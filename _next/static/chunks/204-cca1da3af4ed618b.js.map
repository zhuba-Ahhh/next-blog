{"version":3,"file":"static/chunks/204-cca1da3af4ed618b.js","mappings":"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ACA,mBACA,uBACA,sBACA,sBACA,kBACA,oBACA,oBACA,uBACA,4BACA,sBACA,2BACA,wBACA,yBACA,wBACA,mCACA,wBACA,yBACA,wBACA,wBACA,0BACA,2BACA,2BACA,6BACA,6BACA,6BACA,0BACA,eACA,sBACA,oBACA,oBACA,iBACA,+BACA,qBACA,0BACA,2BACA,4BACA,8BACA,8BACA,6BACA,6BACA,yBACA,wBACA,wBACA,uBACA,0BACA,eACA,sBACA,kBACA,uBACA,mBACA,qBACA,qBACA,4BACA,wBACA,4BACA,4BACA,yBACA,wBACA,kBACA,mBACA,mBACA,yBACA,mBACA,2BACA,cACA,wBACA,uBACA,wBACA,qBACA,wBACA,qBACA,uBACA,mBACA,qBACA,sBACA,uBACA,wBACA,wBACA,mBACA,wBACA,uBACA,kBACA,iBACA,sBACA,mBACA,uBACA,qBACA,oBACA,oBACA,yBACA,mBACA,2DCpJAA,CAAAA,EAAAymB,CAAa,CAQb,SAAAhkB,CAAA,EAQA,IAPA,IAKAggB,EALAiE,EAAA,GACAhmB,EAAAY,OAAAmB,GALA,IAMAkkB,EAAAjmB,EAAAkmB,OAAA,CARA,KASAvH,EAAA,EACAwH,EAAA,GAGA,CAAAA,GACA,KAAAF,IACAA,EAAAjmB,EAAAC,MAAA,CACAkmB,EAAA,IAKApE,CAAAA,CAFAA,EAAA/hB,EAAAQ,KAAA,CAAAme,EAAAsH,GAAAlH,IAAA,KAEA,CAAAoH,CAAA,GACAH,EAAA1nB,IAAA,CAAAyjB,GAGApD,EAAAsH,EAAA,EACAA,EAAAjmB,EAAAkmB,OAAA,CA1BA,IA0BAvH,GAGA,OAAAqH,CACA,kCCjCA,IAAAI,EAAA,qBAEA/mB,CAAAA,EAAAC,OAAA,UAAA8B,CAAA,EACA,oBAAAA,EACA,qCAGA,OAAAA,EAAA4b,OAAA,CAAAoJ,EAAA,OACA,kCCRA,IAAAC,EAAAlhB,OAAAwW,SAAA,CAAA4D,cAAA,CACA+G,EAAAnhB,OAAAwW,SAAA,CAAA+H,QAAA,CACAte,EAAAD,OAAAC,cAAA,CACAmhB,EAAAphB,OAAAqhB,wBAA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gL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,QAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,QAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,QAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,QAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,QAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,QAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,QAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,QAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,QAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,QAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,QAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,QAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,QAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,QAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,QAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,QAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,QAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,QAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,QAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,QAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,QAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,QAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,QAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,QAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,QAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,QAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,QAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,QAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,QAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,QAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,QAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,QAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,QAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,QAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,QAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,QAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,QAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,QAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,QAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,QAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,QAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,QAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,QAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,QAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,QAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,QAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,QAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,QAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,QAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,QAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,QAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,QAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,QAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,QAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,QAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,SAAAhL,MAAA,CAAAgL,CAAA,YAWA,EAGA8yB,CAAA,CAAA//B,EAAA,CACA,EAKAmjC,EAAAxD,MAAA,UAAArxB,CAAA,EACA,MAAAA,UAAAA,CACA,IAEAy0B,MAAA,UAAAQ,CAAA,CAAAj1B,CAAA,EACA,OAAAuxB,EAAAA,EAAA,GAAyC0D,GAAAhB,CAAA,CAAAj0B,EAAA,CACzC,EAAG80B,EACH,EAsDA50B,EAAAF,SAAA,CAAA3iB,OAAA0zC,MAAA,IAAuE7wB,EAAAjP,KAAA,CAhCvEkjC,KAAA,IAAAA,EAAA,GAAyCA,GAgC8BF,EACvE,EACA,MAnBAp0B,EAAA0xB,EAAAA,EAAA,GAA4CrxB,GAAA,GAAiB,CAC7DF,UApCA60B,EAoCA70B,SAAA,CApCA1K,IAAA,KAqCA,GAmBA,IAAA/Y,EAAA+3C,EAAAv6C,EAAAwC,QAAA,EACA,OAAwBi2C,EAAAxgB,aAAmB,CAAAoiB,EAAUtD,EAAQ,CAC7Dp/B,IAAAA,CACA,EAAKmO,GAAAtjB,EACL,CACA,EEiJwB,CACxBxC,KAAAA,EACAk6C,WAAAA,EACAC,gBAAAA,EACAxiC,IAAA,gBAAAiC,MAAA,CAAA8B,EACA,EACA,EACA,CAGA,SAAAy/B,EAAAC,CAAA,EACA,OAAAA,GAAA,SAAAA,EAAAC,aAAA,eG9QAC,GHuTyBzE,EGvTG0E,SHuTHzE,EC3TV,CACf,4BACA,cACA,kBACA,yBACA,uEACA,eACA,iBACA,iBACA,qBACA,mBACA,kBACA,iBACA,eACA,aACA,YACA,qBACA,kBACA,iBACA,cACA,EACA,2BACA,cACA,qBACA,yBACA,uEACA,eACA,iBACA,iBACA,qBACA,mBACA,kBACA,iBACA,eACA,aACA,YACA,qBACA,kBACA,iBACA,eACA,cACA,gBACA,eACA,EACA,2CACA,kBACA,oBACA,EACA,4CACA,kBACA,oBACA,EACA,4CACA,kBACA,oBACA,EACA,6CACA,kBACA,oBACA,EACA,sCACA,kBACA,oBACA,EACA,uCACA,kBACA,oBACA,EACA,uCACA,kBACA,oBACA,EACA,wCACA,kBACA,oBACA,EACA,wCACA,qBACA,eACA,oBACA,mBACA,EACA,SACA,iBACA,EACA,QACA,iBACA,EACA,SACA,iBACA,EACA,OACA,iBACA,EACA,aACA,YACA,EACA,WACA,YACA,EACA,UACA,YACA,EACA,KACA,YACA,EACA,SACA,YACA,EACA,QACA,YACA,EACA,UACA,YACA,EACA,QACA,YACA,EACA,SACA,YACA,EACA,UACA,YACA,EACA,aACA,YACA,EACA,QACA,YACA,EACA,MACA,YACA,EACA,SACA,YACA,EACA,UACA,YACA,EACA,UACA,gBACA,kCACA,EACA,QACA,gBACA,mCACA,aACA,EACA,KACA,gBACA,kCACA,EACA,+BACA,gBACA,kCACA,EACA,wBACA,gBACA,kCACA,EACA,QACA,YACA,EACA,cACA,YACA,EACA,SACA,YACA,EACA,UACA,eACA,EACA,cACA,eACA,EACA,OACA,YACA,EACA,WACA,aACA,iBACA,EACA,UACA,YACA,EACA,MACA,iBACA,EACA,QACA,kBACA,CACA,ED6HA,SAAA0E,CAAA,EACA,IAAA1f,EAAA0f,EAAA1f,QAAA,CACAt5B,EAAAg5C,EAAAh5C,QAAA,CACAi5C,EAAAD,EAAAtkC,KAAA,CACAA,EAAAukC,KAAA,IAAAA,EAAA3E,EAAA2E,EACAC,EAAAF,EAAAG,WAAA,CACAA,EAAAD,KAAA,IAAAA,EAAA,GAAwDA,EACxDE,EAAAJ,EAAAK,YAAA,CACAA,EAAAD,KAAA,IAAAA,EAAA,CACA31B,UAAA6V,EAAA,YAAAliB,MAAA,CAAAkiB,GAAAziB,KAAAA,EACAnC,MAAa2gC,EAAcA,EAAa,GAAG3gC,CAAA,8BAAAA,CAAA,0BAAA0C,MAAA,CAAAkiB,EAAA,OAC3C,EAAM8f,EACNE,EAAAN,EAAArB,eAAA,CACAA,EAAA2B,KAAA,IAAAA,GAAAA,EACAC,EAAAP,EAAA1B,eAAA,CACAA,EAAAiC,KAAA,IAAAA,GAAAA,EACAC,EAAAR,EAAA9B,qBAAA,CACAA,EAAAsC,KAAA,IAAAA,GAAAA,EACAC,EAAAT,EAAAtD,kBAAA,CACAA,EAAA+D,KAAA,IAAAA,EAAA,EAAAA,EACAC,EAAAV,EAAAU,wBAAA,CACAC,EAAAX,EAAAzC,eAAA,CACAA,EAAAoD,KAAA,IAAAA,EAAA,GAAgEA,EAChEC,EAAAZ,EAAAY,SAAA,CACAC,EAAAb,EAAAzB,aAAA,CACAA,EAAAsC,KAAA,IAAAA,GAAAA,EACAC,EAAAd,EAAA5B,SAAA,CAEA2C,EAAAf,EAAAe,QAAA,CACAC,EAAAhB,EAAAiB,MAAA,CACAA,EAAAD,KAAA,IAAAA,EAAA,MAAAA,EACAE,EAAAlB,EAAAmB,OAAA,CACAA,EAAAD,KAAA,IAAAA,EAAA,OAAAA,EACAE,EAAApB,EAAAr4C,IAAA,CACAA,EAAAy5C,KAAA,IAAAA,EAAA,CAAAvhC,MAAAC,OAAA,CAAA9Y,GAAAA,CAAA,IAAAA,CAAA,MAAAo6C,EACAxB,EAAAI,EAAAJ,YAAA,CACAnc,EAAe4d,Sd/VfjyB,CAAA,CAAAlK,CAAA,EACA,SAAAkK,EAAA,SACA,IAAAI,EACAxT,EACAkE,EAAQohC,SDLRtlC,CAAA,CAAAoT,CAAA,EACA,SAAApT,EAAA,SACA,IAAAkJ,EAAA,GACA,QAAApJ,KAAAE,EAAA,QAAyBkG,cAAA,CAAAhE,IAAA,CAAAlC,EAAAF,GAAA,CACzB,GAAAsT,EAAAsE,QAAA,CAAA5X,GAAA,QACAoJ,CAAAA,CAAA,CAAApJ,EAAA,CAAAE,CAAA,CAAAF,EAAA,CAEA,OAAAoJ,CACA,ECHoCkK,EAAAlK,GACpC,GAAApd,OAAA8zC,qBAAA,EACA,IAAAv4B,EAAAvb,OAAA8zC,qBAAA,CAAAxsB,GACA,IAAApT,EAAA,EAAgBA,EAAAqH,EAAAzgB,MAAA,CAAcoZ,IAAAwT,EAAAnM,CAAA,CAAArH,EAAA,CAAAkJ,EAAAwO,QAAA,CAAAlE,IAAA,KAAkC+xB,oBAAA,CAAArjC,IAAA,CAAAkR,EAAAI,IAAAtP,CAAAA,CAAA,CAAAsP,EAAA,CAAAJ,CAAA,CAAAI,EAAA,CAChE,CACA,OAAAtP,CACA,EcqVuC8/B,EAAA7D,GAEvCyD,EAAAA,GAAAvE,EACA,IAAAmG,EAAAlD,EAAwDrB,EAAAxgB,aAAmB,CAAA8f,EAAA,CAC3EO,eAAA4D,EACA9D,UAAAyD,EAAA3kC,KAAA,KACAshC,YAAAO,EACAb,mBAAAA,EACAC,WAAAh1C,CACA,GAAK,KACL85C,EAAA/lC,EAAAgmC,IAAA,EAAAhmC,CAAA,8BACAimC,gBAAA,MACA,EACAC,EAAAjC,EAAAC,GAAA,iBACAiC,EAAAlD,EAAA72C,OAAA0zC,MAAA,IAAqD/X,EAAA,CACrD/nB,MAAA5T,OAAA0zC,MAAA,IAA6BiG,EAAAtB,EAC7B,GAAKr4C,OAAA0zC,MAAA,IAAoB/X,EAAA,CACzBhZ,UAAAgZ,EAAAhZ,SAAA,IAAArM,MAAA,CAAAwjC,EAAA,KAAAxjC,MAAA,CAAAqlB,EAAAhZ,SAAA,EAAAm3B,EACAlmC,MAAA5T,OAAA0zC,MAAA,IAA6B2E,EAC7B,GAYA,GAVA5B,EACA8B,EAAA3kC,KAAA,CAA2B2gC,EAAcA,EAAa,GAAGgE,EAAA3kC,KAAA,KAAyB,CAClFomC,WAAA,UACA,GAEAzB,EAAA3kC,KAAA,CAA2B2gC,EAAcA,EAAa,GAAGgE,EAAA3kC,KAAA,KAAyB,CAClFomC,WAAA,KACA,GAGA,CAAAlC,EACA,OAA0B3C,EAAAxgB,aAAmB,CAAAwkB,EAAAY,EAAAL,EAAgDvE,EAAAxgB,aAAmB,CAAA0kB,EAAAd,EAAA14C,IAQhHi5C,CAAAA,KAAA/iC,IAAA+iC,GAAAG,GAAAxC,CAAA,GAAAqC,CAAAA,EAAA,IACAG,EAAAA,GAAAvC,EACA,IAAAuD,EAAA,EACAngD,KAAA,OACA8C,MAAAiD,CACA,EAAK,CACLq6C,EAAAC,SAzHAC,CAAA,EACA,IAAAtC,EAAAsC,EAAAtC,YAAA,CACAtf,EAAA4hB,EAAA5hB,QAAA,CACA34B,EAAAu6C,EAAAv6C,IAAA,CACAo6C,EAAAG,EAAAH,gBAAA,CAKA,GAAApC,EAAAC,GAAA,CACA,IAAAuC,ED7RAC,KAAAA,EADAC,aAAA,GACAx5B,OAAA,CC6R4CyX,SAE5C,SAAAA,EACA,CACA57B,MAAAq9C,EACAzhB,SAAA,MACA,EACM6hB,EACNvC,EAAArc,SAAA,CAAAjD,EAAA34B,GAEAi4C,EAAAC,aAAA,CAAAl4C,EAEA,CAGA,IACA,OAAA24B,GAAAA,SAAAA,EAAA,CACA57B,MAAAk7C,EAAArc,SAAA,CAAA57B,EAAA24B,EACA,EAAM,CACN57B,MAAAq9C,CACA,CACA,CAAI,MAAA3yB,EAAA,CACJ,OACA1qB,MAAAq9C,CACA,CACA,CACA,EAqFA,CACAnC,aAAAA,EACAtf,SAAAA,EACA34B,KAAAA,EACAo6C,iBAAAA,CACA,EAEA,QAAAC,EAAA1hB,QAAA,EACA0hB,CAAAA,EAAAt9C,KAAA,CAAAq9C,CAAA,EAIA,IAAAvE,EAAAwE,EAAAt9C,KAAA,CAAA9B,MAAA,CAAA85C,EACA5H,EAAAwN,SAzQAN,CAAA,CAAApB,CAAA,CAAAxC,CAAA,CAAAE,CAAA,CAAAJ,CAAA,CAAAxB,CAAA,CAAAc,CAAA,CAAAD,CAAA,CAAAgB,CAAA,EAGA,IAFAgE,EAEAC,EAAAC,SA1BAA,EAAAD,CAAA,EAIA,QAHA/3B,EAAAtS,UAAAvV,MAAA,IAAAuV,KAAA0F,IAAA1F,SAAA,IAAAA,SAAA,OACAuqC,EAAAvqC,UAAAvV,MAAA,IAAAuV,KAAA0F,IAAA1F,SAAA,IAAAA,SAAA,OAEA+H,EAAA,EAAkBA,EAAAsiC,EAAA5/C,MAAA,CAAiBsd,IAAA,CACnC,IR5HAlE,EQ4HAxX,EAAAg+C,CAAA,CAAAtiC,EAAA,CAEA,GAAA1b,SAAAA,EAAA5C,IAAA,CACA8gD,EAAAzhD,IAAA,CAAA+8C,EAAA,CACAh3C,SAAA,CAAAxC,EAAA,CACAimB,URhISk4B,SJJT3mC,CAAA,EACA,GAAA6D,MAAAC,OAAA,CAAA9D,GAAA,OAA+Bi/B,EAAgBj/B,EAC/C,EICAA,EQiIqC,IAAAuB,IAAAkN,KRhIJm4B,SHLjC5mC,CAAA,EACA,uBAAA6T,QAAA,MAAA7T,CAAA,CAAA6T,OAAAsrB,QAAA,SAAAn/B,CAAA,sBAAA6D,MAAA2I,IAAA,CAAAxM,EACA,EGGgDA,IAAO6mC,SFJvD7mC,CAAA,CAAAwD,CAAA,EACA,GAAAxD,EAAA,CACA,oBAAAA,EAAA,OAAqCi/B,EAAgBj/B,EAFrDwD,KAAAA,GAGA,IAAA0F,EAAA,KAAcmB,QAAA,CAAAnI,IAAA,CAAAlC,GAAA7Y,KAAA,OACd,iBAAA+hB,GAAAlJ,EAAAuC,WAAA,EAAA2G,CAAAA,EAAAlJ,EAAAuC,WAAA,CAAA1c,IAAA,UAAAqjB,GAAA,QAAAA,EAAArF,MAAA2I,IAAA,CAAAxM,GAAA,cAAAkJ,GAAA,2CAAA9gB,IAAA,CAAA8gB,GAA+L+1B,EAAgBj/B,EAJ/MwD,KAAAA,GAI+M,MAC/M,CACA,EEFiFxD,IAAO8mC,WDJxF,uJACA,GSoIA,SACM,GAAAt+C,EAAAwC,QAAA,EACN,IAAAs4C,EAAA70B,EAAArM,MAAA,CAAA5Z,EAAAmmB,UAAA,CAAAF,SAAA,EACAg4B,EAAAj+C,EAAAwC,QAAA,CAAAs4C,GAAAn4B,OAAA,UAAAjH,CAAA,EACA,OAAAwiC,EAAAzhD,IAAA,CAAAif,EACA,EACA,CACA,CAEA,OAAAwiC,CACA,EAKAV,EAAAt9C,KAAA,EACAg+C,EAAA,GACAK,EAAA,GACAn6B,EAAA,EA0BA,SAAAo6B,EAAAh8C,CAAA,CAAAo2C,CAAA,EACA,IAAA3yB,EAAAtS,UAAAvV,MAAA,IAAAuV,KAAA0F,IAAA1F,SAAA,IAAAA,SAAA,OACA,OAAAyoC,GAAAn2B,EAAA7nB,MAAA,GAAAqgD,SA1BAj8C,CAAA,CAAAo2C,CAAA,EACA,IAAA3yB,EAAAtS,UAAAvV,MAAA,IAAAuV,KAAA0F,IAAA1F,SAAA,IAAAA,SAAA,OACA,OAAA6lC,EAAA,CACAh3C,SAAAA,EACAo2C,WAAAA,EACAG,gBAAAA,EACAC,kBAAAA,EACAU,sBAAAA,EACAE,UAAAA,EACA3zB,UAAAA,EACA6zB,gBAAAA,EACAC,cAAAA,CACA,EACA,EAaAv3C,EAAAo2C,EAAA3yB,GAAAy4B,SAXAl8C,CAAA,CAAAo2C,CAAA,EACA,GAAAkB,GAAAlB,GAAAc,EAAA,CACA,IAAAb,EAAAC,EAAAC,EAAAH,EAAAI,GACAx2C,EAAAmhB,OAAA,CAAAg1B,EAAAC,EAAAC,GACA,CAEA,OAAAr2C,CACA,EAIAA,EAAAo2C,EACA,CA4DA,KAAAx0B,EAAA45B,EAAA5/C,MAAA,GACAugD,WA1DA,IAAA3+C,EAAAg+C,CAAA,CAAA55B,EAAA,CACAlkB,EAAAF,EAAAwC,QAAA,IAAAtC,KAAA,CAGA,GA7KAX,EAAA8d,KAAA,CAAAy6B,GA6KA,CACA,IAAA8G,EAAA1+C,EAAAid,KAAA,OACAyhC,EAAAj8B,OAAA,UAAA+W,CAAA,CAAAhe,CAAA,EACA,IAAAk9B,EAAAkB,GAAAoE,EAAA9/C,MAAA,CAAA85C,EACA2G,EAAA,CACAzhD,KAAA,OACA8C,MAAA,GAAA0Z,MAAA,CAAA8f,EAAA,KACA,EAEA,GAAAhe,IAAAA,EAAA,CAMA,IAAAojC,EAAAN,EALAR,EAAAr/C,KAAA,CAAA4/C,EAAA,EAAAn6B,GAAAxK,MAAA,CAAA4/B,EAAA,CACAh3C,SAAA,CAAAq8C,EAAA,CACA54B,UAAAjmB,EAAAmmB,UAAA,CAAAF,SAAA,IAGA2yB,GAEAsF,EAAAzhD,IAAA,CAAAqiD,EACA,MAAU,GAAApjC,IAAAkjC,EAAAxgD,MAAA,IACV,IAAA2gD,EAAAf,CAAA,CAAA55B,EAAA,IAAA45B,CAAA,CAAA55B,EAAA,GAAA5hB,QAAA,EAAAw7C,CAAA,CAAA55B,EAAA,GAAA5hB,QAAA,IACAw8C,EAAA,CACA5hD,KAAA,OACA8C,MAAA,GAAA0Z,MAAA,CAAA8f,EACA,EAEA,GAAAqlB,EAAA,CACA,IAAAE,EAAAzF,EAAA,CACAh3C,SAAA,CAAAw8C,EAAA,CACA/4B,UAAAjmB,EAAAmmB,UAAA,CAAAF,SAAA,GAEA+3B,EAAAkB,MAAA,CAAA96B,EAAA,IAAA66B,EACA,KAAY,CAGZ,IAAAE,EAAAX,EAFA,CAAAQ,EAAA,CAEApG,EAAA54C,EAAAmmB,UAAA,CAAAF,SAAA,EAEAi4B,EAAAzhD,IAAA,CAAA0iD,EACA,CAEA,KAAU,CAGV,IAAAC,EAAAZ,EAFA,CAAAK,EAAA,CAEAjG,EAAA54C,EAAAmmB,UAAA,CAAAF,SAAA,EAEAi4B,EAAAzhD,IAAA,CAAA2iD,EACA,CACA,GACAb,EAAAn6B,CACA,CAEAA,GACA,IAMA,GAAAm6B,IAAAP,EAAA5/C,MAAA,IACA,IAAAoE,EAAAw7C,EAAAr/C,KAAA,CAAA4/C,EAAA,EAAAP,EAAA5/C,MAAA,EAEA,GAAAoE,GAAAA,EAAApE,MAAA,EAEA,IAAAyqB,EAAA21B,EAAAh8C,EADAs3C,GAAAoE,EAAA9/C,MAAA,CAAA85C,GAEAgG,EAAAzhD,IAAA,CAAAosB,EACA,CACA,CAEA,OAAAuzB,EAAA8B,EAAA,CAAAH,EAAA,IAAAnkC,MAAA,CAAAlG,KAAA,CAAAqqC,EAAAG,EACA,EA2JAV,EAAApB,EApEAE,KAAA,IAAAA,EAAA,GAAoDA,EAoEpDxC,EAAAJ,EAAAxB,EAAAc,EAAAD,EAAAgB,GACA,OAAwBtB,EAAAxgB,aAAmB,CAAAwkB,EAAAY,EAAgC5E,EAAAxgB,aAAmB,CAAA0kB,EAAAd,EAAA,CAAAnC,GAAAsD,EAAAT,EAAA,CAC9FjM,KAAAA,EACA4J,WAAAhjC,EACAijC,gBAAAA,CACA,IACA,EG5ZAmB,CAAAA,EAAA+D,kBAAA,CDFe,07EAA8sF,CCG7tF,IAAAC,EAAehE,mCCNfiE,CAAAA,EAAAC,CAAA,CAAe,CACf,4BACA,+BACA,0BACA,sFACA,gBACA,iBACA,iBACA,qBACA,mBACA,iBACA,eACA,aACA,YACA,qBACA,kBACA,iBACA,cACA,EACA,2BACA,+BACA,0BACA,sFACA,gBACA,iBACA,iBACA,qBACA,mBACA,iBACA,eACA,aACA,YACA,qBACA,kBACA,iBACA,eACA,cACA,iBACA,gBACA,oBACA,EACA,4CACA,+BACA,eACA,EACA,8CACA,+BACA,eACA,EACA,6CACA,+BACA,eACA,EACA,uCACA,+BACA,eACA,EACA,yCACA,+BACA,eACA,EACA,wCACA,+BACA,eACA,EACA,wCACA,sBACA,qBACA,mBACA,EACA,SACA,0BACA,kBACA,EACA,QACA,yBACA,EACA,OACA,yBACA,EACA,SACA,yBACA,EACA,aACA,yBACA,EACA,QACA,0BACA,aACA,EACA,aACA,yBACA,EACA,cACA,yBACA,EACA,SACA,yBACA,EACA,UACA,yBACA,EACA,QACA,yBACA,EACA,QACA,yBACA,EACA,SACA,0BACA,EACA,UACA,wBACA,EACA,KACA,wBACA,EACA,QACA,wBACA,EACA,SACA,wBACA,EACA,WACA,wBACA,EACA,UACA,0BACA,EACA,QACA,0BACA,EACA,MACA,0BACA,EACA,SACA,0BACA,EACA,UACA,0BACA,EACA,OACA,0BACA,EACA,cACA,0BACA,EACA,mCACA,0BACA,EACA,UACA,0BACA,EACA,UACA,0BACA,EACA,UACA,0BACA,EACA,KACA,0BACA,EACA,+CACA,yBACA,EACA,uDACA,yBACA,EACA,iCACA,wBACA,EACA,iCACA,yBACA,EACA,iCACA,0BACA,EACA,8CACA,0BACA,EACA,gDACA,0BACA,EACA,kCACA,0BACA,EACA,2CACA,0BACA,EACA,wCACA,0BACA,EACA,qHACA,0BACA,EACA,kCACA,yBACA,EACA,sCACA,yBACA,EACA,iCACA,yBACA,EACA,mDACA,yBACA,EACA,+DACA,yBACA,EACA,kDACA,0BACA,EACA,8CACA,0BACA,EACA,+CACA,0BACA,EACA,oDACA,0BACA,kBACA,EACA,4CACA,0BACA,kBACA,EACA,0CACA,0BACA,EACA,iDACA,yBACA,EACA,mDACA,0BACA,EACA,mDACA,wBACA,EACA,uDACA,wBACA,EACA,8CACA,wBACA,EACA,kEACA,wBACA,EACA,MACA,iBACA,EACA,QACA,kBACA,EACA,WACA,aACA,EACA,gCACA,+BACA,EACA,mBACA,+BACA,EACA,mBACA,+BACA,EACA,sBACA,+BACA,EACA,uDACA,mBACA,EACA,gEACA,+BACA,0BACA,sBACA,oBACA,EACA,2DACA,+BACA,0BACA,sBACA,oBACA,EACA,8DACA,+BACA,0BACA,sBACA,oBACA,EACA,sEACA,+BACA,yBACA,EACA,sEACA,+BACA,yBACA,EACA,iEACA,+BACA,yBACA,EACA,iEACA,+BACA,yBACA,EACA,oEACA,+BACA,yBACA,EACA,oEACA,+BACA,yBACA,EACA,kCACA,qCACA,EACA,yCACA,+BACA,0BACA,sBACA,qBACA,wCACA,EACA,kDACA,+BACA,0BACA,sBACA,qBACA,wCACA,EACA,kGACA,0CACA,EACA,iDACA,0CACA,EACA,sCACA,0CACA,EACA,kDACA,yBACA,EACA,oDACA,yBACA,EACA,0DACA,wBACA,EACA,0DACA,wBACA,EACA,0DACA,wBACA,EACA,0DACA,0BACA,EACA,0DACA,0BACA,EACA,2DACA,0BACA,EACA,0DACA,0BACA,EACA,0DACA,0BACA,EACA,2DACA,0BACA,EACA,0DACA,0BACA,EACA,0DACA,0BACA,EACA,2DACA,0BACA,EACA,+DACA,4CACA,EACA,+DACA,4CACA,EACA,+EACA,2CACA,EACA,iFACA,2CACA,EACA,+EACA,2CACA,EACA,iFACA,2CACA,EACA,0EACA,2CACA,EACA,4EACA,2CACA,EACA,0EACA,2CACA,EACA,4EACA,2CACA,EACA,gEACA,4CACA,EACA,gEACA,4CACA,EACA,gFACA,2CACA,EACA,kFACA,2CACA,EACA,gFACA,2CACA,EACA,kFACA,2CACA,EACA,2EACA,2CACA,EACA,6EACA,2CACA,EACA,2EACA,2CACA,EACA,6EACA,2CACA,EACA,2CACA,4BACA,EACA,0DACA,6BACA,oBACA,EACA,uDACA,oBACA,EACA,yDACA,oBACA,EACA,0CACA,+BACA,EACA,0DACA,kCACA,EACA,uDACA,6BACA,EACA,qDACA,6BACA,EACA,kDACA,6BACA,EACA,uDACA,2BACA,iBACA,EACA,qDACA,2BACA,iBACA,EACA,yDACA,2BACA,kBACA,EACA,uDACA,0BACA,EACA,uDACA,0BACA,CACA,sCCleA,IA0NApK,EAEA/4B,EA5NAojC,EACA,iBAAAC,WACAA,WACA,iBAAA9kC,KACAA,KACA,iBAAA2a,OACAA,OACA,iBAAav6B,EAAAyc,CAAM,CACbzc,EAAAyc,CAAM,CACZ,GAEAkoC,GAiNAtjC,EAAA+4B,CAFAA,EAAA,UAAAqK,GAEAA,EAAA9kB,KAAA,CAAAthB,KAAAA,EAIA,WAEA+7B,EACAqK,EAAA9kB,KAAA,CAAAte,EAEA,OAAAojC,EAAA9kB,KAAA,CAGAya,EAAA/7B,KAAAA,EACAgD,EAAAhD,KAAAA,CACA,EA7NAomC,CAAAA,EAAA9kB,KAAA,EAAaK,OAAA,GAAAC,4BAAA,IAIb,IAAAzc,EAAQxjB,EAAQ,OAChB4kD,EAAa5kD,EAAQ,OACrB2/B,EAAY3/B,EAAQ,OACpB6kD,EAAa7kD,EAAQ,OACrB8kD,EAAU9kD,EAAQ,OAClB+kD,EAAY/kD,EAAQ,OACpBglD,EAAShlD,EAAQ,MAEjB2kD,IAEA,IAAA94B,EAAA,GAAYnJ,cAAA,CAGZ,SAAAuiC,IAAA,CAEAA,EAAAnmC,SAAA,CAAA6gB,EAGA,IAAAulB,EAAA,IAAAD,EAqBA,SAAAE,EAAA/iB,CAAA,EACA,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QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,OAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,OAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,OAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,OAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,OAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,OAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,OAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,OAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,OAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,OAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,OAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,OAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,OAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,KAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,OAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,OAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,OAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,OAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,OAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,OAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,OAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBnlD,EAAQ,QAC3BulD,EAAAJ,QAAA,CAAmBn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CA,wEACAF,WAAA,EACA,EACAz/B,QAAA,CAEA,mSACA,kjBACA,CACAqnB,OACA,gFACAE,QAAA,sBACAy5B,SAAA,+DACA,aACA,4rCACAV,SAAA,kEACAC,YAAA,gBACA,CACA,CA9BAljD,EAAAC,OAAA,CAAA6jD,EACAA,EAAAx5B,WAAA,MACAw5B,EAAAngB,OAAA,oCCCA,SAAAogB,EAAA5mB,CAAA,EACAA,EAAA+B,SAAA,CAAA6kB,MAAA,EACA73B,QAAA,gCACApqB,OAAA,CACAwgC,QAAA,wBACAD,OAAA,EACA,EACA,mBACAC,QAAA,2BACAD,OAAA,GACAvE,MAAA,QACA0B,OAAA,CACA6jB,MAAA,CACA/gB,QAAA,yCACAF,WAAA,GACAtE,MAAA,aACA,EACAhe,OACA,sEACAojC,YAAA,QACA,CACA,EACAja,OAAA,CACA3G,QAAA,0DACAD,OAAA,GACA7C,OAAA,CACAzV,QAAA,CAEAuY,QAAA,oBACAF,WAAA,EACA,EACA8gB,YAAA,MACA,CACA,EACAc,QAAA,CACA1hB,QACA,0EACAF,WAAA,GACA5C,OAAA,CACAqkB,SAAA,yBACAX,YAAA,OACA,CACA,EACAe,WAAA,CACA3hB,QAAA,iBACAxE,MAAA,SACA,EACAwO,MAAA,CACAhK,QAAA,aACAxE,MAAA,aACA,EACAn7B,QACA,gHACAg1C,WAAA,CACA,CACArV,QAAA,qBACAxE,MAAA,uBAEA,CACAwE,QAAA,qBACAxE,MAAA,sBAEA,CACAomB,SAAA,mBACAjB,SAAA,wBACAC,YAAA,SACA,EACA/lB,EAAA+B,SAAA,CAAAilB,EAAA,CAAAhnB,EAAA+B,SAAA,CAAA6kB,MAAA,CAtEA/jD,EAAAC,OAAA,CAAA8jD,EACAA,EAAAz5B,WAAA,UACAy5B,EAAApgB,OAAA,wCCCA,SAAAygB,EAAAjnB,CAAA,EACAA,EAAA+B,SAAA,CAAAklB,UAAA,EACAl4B,QAAA,MACA,oBACAoW,QACA,urOACAF,WAAA,GACAtE,MAAA,UACA,EACA,mBACAwE,QACA,sNACA9C,OAAA,CACA,mBACA8C,QAAA,WACA9C,OAAA,CACA0jB,YAAA,OACA,EACAplB,MAAA,KACA,EACA,6BACAwE,QAAA,SACA9C,OAAA,CACA0jB,YAAA,IACAphD,OAAA,CACAwgC,QAAA,YACA9C,OAAA,CACAmkB,SAAA,4BACA,CACA,CACA,EACA7lB,MAAA,YACA,EACAolB,YAAA,GACA,EACAplB,MAAA,KACA,EACA,mBACAwE,QAAA,mBACAxE,MAAA,SACA,EACAh8B,OAAA,CACAwgC,QAAA,YACA9C,OAAA,CACAmkB,SAAA,4BACA,CACA,EACAA,SAAA,6BACAU,MAAA,iBACA,CACA,CArDArkD,EAAAC,OAAA,CAAAmkD,EACAA,EAAA95B,WAAA,cACA85B,EAAAzgB,OAAA,wCCHA,IAAA2gB,EAAmB9mD,EAAQ,OAI3B,SAAA+mD,EAAApnB,CAAA,EACAA,EAAAwlB,QAAA,CAAA2B,GACG,SAAAnnB,CAAA,EACH,IAAAqnB,EACA,y2BACA/7B,EACA,mIAAA8C,MAAA,CAAA5N,OAAA,CACA,aACA,WACA,OAAA6mC,EAAAj5B,MAAA,GAIA,SAAAk5B,EAAAniB,CAAA,EACA,OAAA/D,OACA+D,EAAA3kB,OAAA,4BACA,OAAA8K,CACA,GACA,IAEA,CACA,IAAAi8B,EAAA,CACA/hD,QAAA6hD,EACAtB,YAAA,kBACA,CACA/lB,CAAAA,EAAA+B,SAAA,CAAAqlB,IAAA,EACAr4B,QAAAiR,EAAA+B,SAAA,CAAAqjB,KAAA,CAAAr2B,OAAA,CACApqB,OAAAq7B,EAAA+B,SAAA,CAAAqjB,KAAA,CAAAzgD,MAAA,CACA6iD,IAAA,CACAriB,QAAA,yCACAF,WAAA,GACAC,OAAA,GACAvE,MAAA,eACA0B,OAAArC,EAAA+B,SAAA,CAAAylB,GAAA,EAEAV,WAAA,CACA3hB,QAAA,SACAxE,MAAA,aACA,EACA,cACA,CACAwE,QAAAmiB,EACA,mGACAl5B,MAAA,EAEA6W,WAAA,GACA5C,OAAAklB,CACA,EACA,CAEApiB,QAAAmiB,EACA,uCAAAl5B,MAAA,EAEA6W,WAAA,GACA5C,OAAAklB,CACA,EACA,CAEApiB,QAAAmiB,EAAA,qCAAmEl5B,MAAA,EACnEiU,OAAAklB,CACA,EACA,CACAE,QAAA,CACAtiB,QAAA,uBACAF,WAAA,GACAtE,MAAA,YACA,EACAn7B,QAAA6hD,EACAX,SAAA,wBACA35B,QAAA,sBACAF,OAAA,mCACAi5B,SACA,kEACAC,YAAA,eACA,CACA,EAAG/lB,EACH,CA/EAn9B,EAAAC,OAAA,CAAAskD,EACAA,EAAAj6B,WAAA,QACAi6B,EAAA5gB,OAAA,oCCCA,SAAAkhB,EAAA1nB,CAAA,EACAA,EAAA+B,SAAA,CAAA2lB,GAAA,EACA34B,QAAA,kBACApqB,OAAA,CACAwgC,QAAA,qBACAD,OAAA,EACA,EACArY,OACA,4FACA86B,UAAA,yBACA,mBACAxiB,QAAA,WACAxE,MAAA,UACA,EACAomB,SAAA,UACAL,SAAA,kEACA,oBACAvhB,QAAA,gBACAxE,MAAA,UACA,EACA,mBACAwE,QAAA,cACAxE,MAAA,UACA,EACAinB,WAAA,CACAziB,QAAA,IACAxE,MAAA,SACA,EACAolB,YAAA,cACA8B,IAAA,CACA1iB,QAAA,cACAxE,MAAA,SACA,CACA,CACA,CArCA99B,EAAAC,OAAA,CAAA4kD,EACAA,EAAAv6B,WAAA,OACAu6B,EAAAlhB,OAAA,oCCCA,SAAAshB,EAAA9nB,CAAA,EACAA,EAAA+B,SAAA,CAAA+lB,WAAA,EACA/4B,QAAA,CAEA,0DACA,OACA,MACA,CACApqB,OAAA,wBACAkoB,OAAA,4CACAi5B,SAAA,CACA,yBACA,8YACA,CACAtgD,QACA,uiBACA,aACA,ihBACAugD,YAAA,eACA,CACA,CAvBAljD,EAAAC,OAAA,CAAAglD,EACAA,EAAA36B,WAAA,eACA26B,EAAAthB,OAAA,oCCCA,SAAAuhB,EAAA/nB,CAAA,EACAA,EAAA+B,SAAA,CAAAgmB,GAAA,EACAh5B,QAAA,0BACAnsB,SAAA,CACAuiC,QACA,oEACAF,WAAA,GACAC,OAAA,EACA,EACAvgC,OAAA,CACAwgC,QAAA,mCACAD,OAAA,EACA,EACA8iB,WAAA,CACA7iB,QAAA,mCACAD,OAAA,EACA,EACAshB,SAAA,SACAhhD,QAAA,CACA,CACA2/B,QAAA,iCACAF,WAAA,EACA,EACA,wOACA,CACAE,QAAA,yCACAF,WAAA,EACA,EACA,CACAE,QAAA,mCACAF,WAAA,EACA,EACA,CACAE,QAAA,qBACA,EACA,CACAuhB,SAAA,uBACA35B,QAAA,sBACAm5B,MAAA,CACA/gB,QAAA,OACAxE,MAAA,UACA,EACA9T,OAAA,CACA,aACA,iBACA,wDACA,CACAi5B,SAAA,wCACAC,YAAA,mBACA,CACA,CArDAljD,EAAAC,OAAA,CAAAilD,EACAA,EAAA56B,WAAA,OACA46B,EAAAvhB,OAAA,wCCHA,IAAAyhB,EAAmB5nD,EAAQ,OAI3B,SAAA6nD,EAAAloB,CAAA,EACAA,EAAAwlB,QAAA,CAAAyC,GACAjoB,EAAA+B,SAAA,CAAAmmB,OAAA,CAAAloB,EAAA+B,SAAA,CAAArX,MAAA,QACAllB,QACA,yNACAuhD,SACA,6NACAoB,QACA,gyGACA,GACAnoB,EAAA+B,SAAA,CAAAqmB,GAAA,CAAApoB,EAAA+B,SAAA,CAAAmmB,OAAA,CAbArlD,EAAAC,OAAA,CAAAolD,EACAA,EAAA/6B,WAAA,WACA+6B,EAAA1hB,OAAA,yCCCA,SAAA6hB,EAAAroB,CAAA,EACAA,EAAA+B,SAAA,CAAAsmB,IAAA,EACAt5B,QAAA,MACApqB,OAAA,CACAwgC,QAAA,mCACAD,OAAA,EACA,EACA1/B,QAAA,sCACAqnB,OAAA,oBACAk5B,YAAA,OACA,CACA,CAdAljD,EAAAC,OAAA,CAAAulD,EACAA,EAAAl7B,WAAA,QACAk7B,EAAA7hB,OAAA,oCCCA,SAAA8hB,EAAAtoB,CAAA,GACG,SAAAA,CAAA,EACH,IAAAx4B,EAAA,CACA29B,QACA,mGACAF,WAAA,GACA5C,OAAA,CACAkmB,OAAA,CACApjB,QAAA,+BACA9C,OAAA,CACA0jB,YAAA,aACA,CACA,EACAyC,YAAA,CACArjB,QAAA,oBACA9C,OAAA,CACA0jB,YAAA,OACA,CACA,EACAphD,OAAA,oBACA6hD,SAAA,WACAT,YAAA,YACAD,SAAA,IAEA,0BACA,CACA,EACAwC,EAAAtoB,EAAA+B,SAAA,CAAAumB,QAAA,EACA,iBACAnjB,QAAA,oDACAxE,MAAA,SACA,EACA8nB,MAAA,CACAtjB,QAAA,0DACA9C,OAAA,CACAqmB,WAAA,CACAvjB,QACA,iHACAxE,MAAA,YACA,EACAolB,YAAA,CACA5gB,QAAA,kBACAF,WAAA,EACA,CACA,CACA,EACA,qBACAE,QAAA,qDACA9C,OAAA,CACA0jB,YAAA,WACA,CACA,EAEA,iBACA5gB,QAAA,2DACA9C,OAAA,CACA0jB,YAAA,yBACA,CACA,EAEA,eACA5gB,QACA,oEACA9C,OAAA,CACA0jB,YAAA,qCACA,CACA,EAEA,oBACA5gB,QACA,iEACAF,WAAA,GACAtE,MAAA,aACA,EACA,cACAwE,QAAA,0CACAF,WAAA,GACAtE,MAAA,QACA,EACA,kBACAwE,QAAA,6DACAF,WAAA,EACA,EACAlW,QAAA,WACA2J,MAAA,CACAyM,QACA,iFACAxE,MAAA,YACA0B,OAAA,CACA0jB,YAAA,kCACA,CACA,EACA,mBACA5gB,QAAA,iDACAxE,MAAA,KACA,EACAn5B,WAAAA,EACAgf,GAAA,CACA2e,QAAA,WACAxE,MAAA,aACA,EACA,cACAwE,QAAA,WACAxE,MAAA,aACA,EACAgoB,WAAA,CACAxjB,QAAA,4CACAxE,MAAA,SACA,EACAioB,QAAA,CACA,CACAzjB,QAAA,mBACAF,WAAA,GACAtE,MAAA,QACA,EACA,CACAwE,QAAA,QACAxE,MAAA,QACA,EACA,CACAkoB,MAAA,CACA1jB,QACA,yFACA9C,OAAA,CACAqkB,SAAA,kBACAX,YAAA,OACAv+C,WAAA,CACA29B,QAAA,0DACA9C,OAAA76B,EAAA66B,MAAA,CAEA,CACA,EACAymB,OAAA,CAYA3jB,QACA,wiBACAF,WAAA,GACA5C,OAAA,CACA76B,WAAAA,EACAuhD,IAAA,CACA5jB,QAAA,kCACA9C,OAAA,CACA0jB,YAAA,iCACA,CACA,EACA,iBACA5gB,QAAA,WACA9C,OAAA,CACAmkB,SAAA,CACArhB,QAAA,oBACAF,WAAA,EACA,EACA6gB,SAAA,uBA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AF,WAAA,GACAC,OAAA,EACA,EACA1/B,QACA,qNACAkhD,SAAA,wBACA75B,OAAA,CACA,CACAsY,QACA,kIACAF,WAAA,EACA,EACA,yBACA,CACA6gB,SAAA,IACAC,YAAA,mBACA,EACA/lB,EAAA+B,SAAA,CAAAooB,IAAA,CAAAnqB,EAAA+B,SAAA,aAjDAl/B,EAAAC,OAAA,CAAAonD,EACAA,EAAA/8B,WAAA,WACA+8B,EAAA1jB,OAAA,mCCCA,SAAA4jB,EAAApqB,CAAA,GACG,SAAAA,CAAA,EAKH,IAAAqqB,EACA,0oCACAC,EAAA,CACAnlB,QAAA,4BACAF,WAAA,GACAtE,MAAA,cAEA0B,OAAA,IACA,EACAkoB,EAAA,CACAH,KAAAE,EACAE,YAAA,CACArlB,QAAA/D,OAAA,MAAAipB,GACA1pB,MAAA,UACA,EACA6lB,SAAA,CAEA,CACArhB,QAAA,sBACAD,OAAA,GACA7C,OAAA,CAEAmkB,SAAA,CACA,CACArhB,QAAA,uBACAF,WAAA,EACA,EACA,UACA,CACApY,OACA,8DAEAi5B,SACA,2DAEAC,YAAA,iBACA,CACA,EACA,CACA5gB,QAAA,qCACAD,OAAA,GACA7C,OAAA,CACAmkB,SAAA,iBACA,CACA,EACA,CACArhB,QAAA,cACAD,OAAA,GACA7C,OAAA,CACAyjB,SAAA,mCACAC,YAAA,SACAyE,YAAA,CACArlB,QAAA/D,OAAA,QAAmCipB,GACnCplB,WAAA,GACAtE,MAAA,UACA,CACA,CACA,EACA,qBACA,CAEA77B,OACA,sFACA,CACAk7B,CAAAA,EAAA+B,SAAA,CAAAqoB,IAAA,EACAK,QAAA,CACAtlB,QAAA,aACAxE,MAAA,WACA,EACA5R,QAAA,CACAoW,QAAA,kBACAF,WAAA,EACA,EACA,iBAKA,CAEAE,QAAA,kDACAF,WAAA,GACAtE,MAAA,UACA,EACA,CAEAwE,QAAA,8BACAxE,MAAA,UACA,EACA,CAEA,iBACAwE,QAAA,sCACAxE,MAAA,WACAsE,WAAA,EACA,EAGA,eACAE,QAAA,gCACA9C,OAAA,CACAmoB,YAAA,CACArlB,QAAA/D,OAAA,u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AAA,uCACAF,WAAA,EACA,EACAz/B,QAAA,CACA2/B,QACA,8+EACAF,WAAA,EACA,EACAlY,QAAA,yBACAF,OAAA,CACAsY,QACA,+FACAF,WAAA,EACA,EACAyhB,SAAA,CACAvhB,QAAA,4CACAF,WAAA,EACA,EACA6gB,SAAA,UACAC,YAAA,aACA,CACA,CArCAljD,EAAAC,OAAA,CAAA2pD,EACAA,EAAAt/B,WAAA,WACAs/B,EAAAjmB,OAAA,oCCCA,SAAAkmB,EAAA1sB,CAAA,EACAA,EAAA+B,SAAA,CAAA2qB,KAAA,EACA39B,QAAA,MACApqB,OAAA,CACAwgC,QAAA,oBACAD,OAAA,GACA7C,OAAA,CACA6oB,cAAA,CACA/lB,QAAA,kCACA9C,OAAA,CACA0jB,YAAA,UACAS,SAAA,KACA,CACA,CACA,CACA,EACAA,SACA,21DACA5jD,SACA,8pMACA4C,QACA,uyDACAunB,QAAA,4BACApqB,UACA,2EACAmjD,SACA,+HACA6G,SAAA,CACAxnB,QAAA,eACAxE,MAAA,YACA,EACA9T,OAAA,oBACA65B,SAAA,0BACAX,YAAA,eACA,CACA,CAtCAljD,EAAAC,OAAA,CAAA4pD,EACAA,EAAAv/B,WAAA,SACAu/B,EAAAlmB,OAAA,oCCCA,SAAAomB,EAAA5sB,CAAA,EACAA,EAAA+B,SAAA,CAAA6qB,KAAA,EACA79B,QAAA,CACAoW,QAAA,uBACAF,WAAA,GACAC,OAAA,EACA,EACAvgC,OAAA,CACAwgC,QAAA,8DACAD,OAAA,EACA,EACAzmB,MAAA,CACA0mB,QAAA,kBACAF,WAAA,GACAC,OAAA,GACAvE,MAAA,QACA,EACA,cAEAwE,QACA,oEACAF,WAAA,GACA5C,OAAA,CACAxV,OAAA,CACAsY,QAAA,UACAF,WAAA,EACA,EACA8gB,YAAA,MACA,CACA,EACAvgD,QAAA,CACA2/B,QACA,wtIACAF,WAAA,EACA,EACAlY,QAAA,CACAoY,QAAA,qCACAF,WAAA,EACA,EACApY,OAAA,CACAsY,QACA,kFACAF,WAAA,EACA,EACA6gB,SAAA,CACA,oBACA,CACA3gB,QAAA,+DACAF,WAAA,EACA,EACA,CACA8gB,YAAA,SACA,CACA,CAxDAljD,EAAAC,OAAA,CAAA8pD,EACAA,EAAAz/B,WAAA,SACAy/B,EAAApmB,OAAA,oCCCA,SAAAqmB,EAAA7sB,CAAA,MAGAjR,EACAm8B,EADAn8B,EAAA,YACAm8B,EAAA,CACA/lB,QAAA,aACAxE,MAAA,UACA,EACAX,EAAA+B,SAAA,CAAA8qB,YAAA,CAAA7sB,EAAA+B,SAAA,CAAArX,MAAA,eACAqE,QAAAA,EACApqB,OAAA,CAEA,CACAwgC,QAAA,yBACAD,OAAA,EACA,EACA,CAEAC,QAAA,yBACAD,OAAA,GACA7C,OAAA,CACA6oB,cAAAA,CACA,CACA,EACA,CACA1lD,QACA,mSACA,gBACA2/B,QAAA,aACAxE,MAAA,UACA,CACA,GACAX,EAAA+B,SAAA,CAAAK,YAAA,2BACA,qBACA+C,QAAA,iBACAxE,MAAA,SACA,EAEA,eACAwE,QAAA,qBACAxE,MAAA,QACA0B,OAAA,CACAtT,QAAAA,EACAm8B,cAAAA,CACA,CACA,CACA,GACAlrB,EAAA+B,SAAA,CAAAK,YAAA,0BACA,qBACA+C,QAAA,yBACA9C,OAAA,CACAopB,UAAA,CACAtmB,QAAA,QACAxE,MAAA,aACA,EACAgG,OAAA,CACAxB,QAAA,UACAxE,MAAA,sBACA0B,OAAArC,EAAA+B,SAAA,CAAA0nB,UAAA,CAEA,CACA,EAEA,oBACA,CACAtkB,QAAA,iBACAD,OAAA,GACAvE,MAAA,QACA,EACA,CACAwE,QAAA,iBACAD,OAAA,GACAvE,MAAA,SACA0B,OAAA,CACA6oB,cAAAA,CACA,CACA,EACA,GAEAlrB,EAAA+B,SAAA,CAAAK,YAAA,2BAEAx/B,SAAA,wBACA,GACA,OAAAo9B,EAAA+B,SAAA,CAAA8qB,YAAA,oBACA7sB,EAAA+B,SAAA,CAAA+qB,MAAA,CAAA9sB,EAAA+B,SAAA,CAAA8qB,YAAA,CAvFAhqD,EAAAC,OAAA,CAAA+pD,EACAA,EAAA1/B,WAAA,gBACA0/B,EAAArmB,OAAA,2CCCA,SAAAumB,EAAA/sB,CAAA,EACAA,EAAA+B,SAAA,CAAAgrB,SAAA,EACAh+B,QAAA,CACAoW,QAAA,6CACAF,WAAA,GACAC,OAAA,EACA,EACA8nB,QAAA,CACA7nB,QAAA,2BACAD,OAAA,GACA7C,OAAA,CACA,oBACA19B,OAAA,CACAwgC,QAAA,6BACAF,WAAA,EACA,EACA8gB,YAAA,MACA,CACA,EACAW,SAAA,CACAvhB,QAAA,2CACAF,WAAA,EACA,EACAz/B,QACA,0jBACAunB,QAAA,qBACAF,OACA,4HACAk5B,YAAA,gBACAD,SACA,sHACAgB,WAAA,CACA3hB,QAAA,gCACAxE,MAAA,SACA,CACA,EACAX,EAAA+B,SAAA,CAAAK,YAAA,wBACA,iBACA+C,QAAA,qCACAD,OAAA,GACA7C,OAAA,CACA6oB,cAAA,CACA/lB,QACA,iEACAF,WAAA,GACA5C,OAAArC,EAAA+B,SAAA,CAAAgrB,SAAA,EAEA7F,MAAA,SACA,CACA,EACA,kBACA/hB,QAAA,4CACAD,OAAA,GACA7C,OAAA,CACA6oB,cAAA,CACA/lB,QACA,iEACAF,WAAA,GACA5C,OAAArC,EAAA+B,SAAA,CAAAgrB,SAAA,EAEApoD,OAAA,SACA,CACA,CACA,GACAq7B,EAAA+B,SAAA,CAAAkrB,IAAA,CAAAjtB,EAAA+B,SAAA,CAAAgrB,SAAA,CAnEAlqD,EAAAC,OAAA,CAAAiqD,EACAA,EAAA5/B,WAAA,aACA4/B,EAAAvmB,OAAA,0CCCA,SAAA0mB,EAAAltB,CAAA,GACG,SAAAA,CAAA,EAGH,QADAmtB,EAAA,8CAAA/+B,MAAA,CACArN,EAAA,EAAoBA,EAAA,EAAOA,IAC3BosC,EAAAA,EAAA3sC,OAAA,sBACA,OAAA2sC,CACA,GAEAA,EAAAA,EAAA3sC,OAAA,iBACAwf,EAAA+B,SAAA,CAAAmrB,GAAA,EACAn+B,QAAAqS,OAAA+rB,GACAxoD,OAAA,CACAwgC,QAAA,sBACAD,OAAA,EACA,EACAxF,UAAA,CACA,CACAyF,QAAA/D,OACA,6DAAAhT,MAAA,CAAA5N,OAAA,CACA,aACA,WACA,OAAA2sC,CACA,IAGAjoB,OAAA,GACAvE,MAAA,YACA0B,OAAA,CACAtT,QAAAqS,OAAA+rB,GACAxoD,OAAA,CACAwgC,QAAA,sBACAD,OAAA,EACA,EACA4gB,SAAA,IACAC,YAAA,gBACA,CACA,EACA,CACA5gB,QACA,wFACAxE,MAAA,WACA,EACA,CACAn7B,QACA,0/DACAqnB,OACA,6GACAugC,MAAA,CACAjoB,QAAA,kBACAxE,MAAA,aACA,EACAmlB,SACA,8FACAC,YAAA,6CACA,CACA,EAAG/lB,EACH,CA5DAn9B,EAAAC,OAAA,CAAAoqD,EACAA,EAAA//B,WAAA,OACA+/B,EAAA1mB,OAAA,wCCHA,IAAA+kB,EAAiBlrD,EAAQ,MAIzB,SAAAksD,EAAAvsB,CAAA,MAGAx6B,EAEA6nD,EAJArtB,EAAAwlB,QAAA,CAAA+F,GAEA/lD,EACA,osBACA6nD,EAAA,uCAAAj/B,MAAA,CAAA5N,OAAA,CACA,aACA,WACA,OAAAhb,EAAA4oB,MAAA,GAGA4R,EAAA+B,SAAA,CAAAwqB,GAAA,CAAAvsB,EAAA+B,SAAA,CAAArX,MAAA,MACA,cACA,CACAya,QAAA/D,OACA,gEAAAhT,MAAA,CAAA5N,OAAA,CACA,aACA,WACA,OAAAhb,EAAA4oB,MAAA,IAIA6W,WAAA,EACA,EAIA,iCAEA,oCAEA,iEACA,CACAz/B,QAAAA,EACAqnB,OAAA,CACAsY,QACA,iJACAD,OAAA,EACA,EACA4gB,SACA,yHACA/4B,QAAA,oBACA,GACAiT,EAAA+B,SAAA,CAAAK,YAAA,iBACAv/B,OAAA,CAEAsiC,QAAA/D,OACA,2BAAAhT,MAAA,CACA,MACA,mDAAAA,MAAA,CACA,IACA,kDAAAA,MAAA,CAAA5N,OAAA,CACA,cACA,WACA,OAAA6sC,CACA,GAEA,KAEApoB,WAAA,GACAC,OAAA,GACA7C,OAAA,CACA19B,OAAA,eACAmhD,SAAA,IACAC,YAAA,IACA,CACA,EACA,cACA5gB,QAAA,oCACAxE,MAAA,SACAuE,OAAA,EACA,CACA,GACAlF,EAAA+B,SAAA,CAAAK,YAAA,kBACA,oBACA+C,QAAA,8DACA9C,OAAA,CACAqkB,SAAA,OACA4G,QAAA,CACAnoB,QAAA,WACAxE,MAAA,aACA0B,OAAArC,EAAA+B,SAAA,CAAAwqB,GAAA,CAEA,CACA,CACA,GACAvsB,EAAA+B,SAAA,CAAAK,YAAA,mBACA,gBACA+C,QAAA,KACAxE,MAAA,aACA,CACA,GACAX,EAAA+B,SAAA,CAAAK,YAAA,qBAGA,eACA+C,QACA,6EACAF,WAAA,GACAC,OAAA,GACA7C,OAAArC,EAAA+B,SAAA,CAAArX,MAAA,UACA,CACA,GACAsV,EAAA+B,SAAA,CAAAK,YAAA,CACA,SACA,eACA,CAEA,sCACA,EACApC,EAAA+B,SAAA,CAAAwqB,GAAA,gBAGA,CApHA1pD,EAAAC,OAAA,CAAAypD,EACAA,EAAAp/B,WAAA,OACAo/B,EAAA/lB,OAAA,wCCHA,IAAA+mB,EAAoBltD,EAAQ,OAI5B,SAAAmtD,EAAAxtB,CAAA,EACAA,EAAAwlB,QAAA,CAAA+H,GAEAvtB,EAAA+B,SAAA,CAAAyrB,OAAA,CAAAxtB,EAAA+B,SAAA,CAAArX,MAAA,SACAllB,QAAA,CACA,4XACA,CACA2/B,QAAA,gCACAF,WAAA,EACA,EACA,CACApY,OACA,sJACAi5B,SAAA,MAAA9lB,EAAA+B,SAAA,CAAA0rB,IAAA,CAAA3H,QAAA,EACAC,YAAA,gBACA,GACA/lB,EAAA+B,SAAA,CAAAK,YAAA,6BACA1C,UAAA,CACAyF,QAAA,WACA9C,OAAA,CACAopB,UAAA,CACAtmB,QAAA,WACAxE,MAAA,aACA,EACAjB,UAAA,CACAyF,QAAA,YACAF,WAAA,GACAtE,MAAA,YACA,EACA7hB,KAAA,CACAqmB,QAAA,mBACA9C,OAAArC,EAAA+B,SAAA,CAAAyrB,OAAA,CAEA,CACA,EACAE,UAAA,CACAvoB,QAAA,wBACA9C,OAAA,CACAzV,QAAA,CACAuY,QAAA,wBACAF,WAAA,GACA5C,OAAArC,EAAA+B,SAAA,CAAAyrB,OAAA,EAEA/B,UAAA,CACAtmB,QAAA,oBACAxE,MAAA,UACA,CACA,CACA,EACArZ,KAAA,CACA6d,QACA,0EACAD,OAAA,EACA,CACA,EAEA,CA3DAriC,EAAAC,OAAA,CAAA0qD,EACAA,EAAArgC,WAAA,WACAqgC,EAAAhnB,OAAA,oCCCA,SAAAgjB,EAAAxpB,CAAA,GACG,SAAAA,CAAA,EAWH,SAAAxf,EAAA2kB,CAAA,CAAA4kB,CAAA,EACA,OAAA5kB,EAAA3kB,OAAA,uBAAAsB,CAAA,CAAA2H,CAAA,EACA,YAAAsgC,CAAA,EAAAtgC,EAAA,IACA,EACA,CAOA,SAAAmF,EAAAuW,CAAA,CAAA4kB,CAAA,CAAA1kB,CAAA,EACA,OAAAjE,OAAA5gB,EAAA2kB,EAAA4kB,GAAA1kB,GAAA,GACA,CAQA,SAAAsoB,EAAAxoB,CAAA,CAAAyoB,CAAA,EACA,QAAA7sC,EAAA,EAAsBA,EAAA6sC,EAAe7sC,IACrCokB,EAAAA,EAAA3kB,OAAA,wBACA,YAAA2kB,EAAA,GACA,GAEA,OAAAA,EAAA3kB,OAAA,yBACA,CACA,MAEA,8GAEA,uCAIA,6NAGA,uXAEA,SAAAqtC,EAAAC,CAAA,EACA,eAAAA,EAAAvrC,IAAA,GAAA/B,OAAA,iBACA,CACA,IAAAutC,EAAAF,KAGAxG,EAAAjmB,OACAysB,EACAG,EACA,MAEA,MAEA,QAIAC,EAAAJ,EACAG,EACA,MAEA,OAGAE,EAAAL,EACAG,EACA,MAEA,OAGAV,EAAAK,EAAA,mCAAmCv/B,MAAA,IACnC+/B,EAAAR,EAAA,0BAAAv/B,MAAA,IACA1rB,EAAA,qBAAA0rB,MAAA,CACAggC,EAAA5tC,EAAA,qBAAA4N,MAAA,EAAA1rB,EAAA4qD,EAAA,EACAtF,EAAAxnC,EAAA,mCAAA4N,MAAA,EACA6/B,EACAG,EACA,EACA71B,EAAA,mBAAAnK,MAAA,CACAigC,EAAA7tC,EACA,yCAAA4N,MAAA,CACA,CAAA45B,EAAAzvB,EAAA,EAEA+1B,EAAA9tC,EACA,2CAAkB4N,MAAA,CAClB,CAAAk/B,EAAAa,EAAA51B,EAAA,EAEAg2B,EAAA/tC,EAAA,yBAAA4N,MAAA,EAAAkgC,EAAA,EACAE,EAAAhuC,EACA,mDAAA4N,MAAA,CACA,CAAAmgC,EAAAvG,EAAAzvB,EAAA,EAEAk2B,EAAA,CACAjpD,QAAA6hD,EACAtB,YAAA,eACA,EAGAt2B,EAAA,8CAA8DrB,MAAA,CAC9DsgC,EAAA,wBAAAtgC,MAAA,CACAugC,EAAA,kCAAAvgC,MAAA,CACA4R,EAAA+B,SAAA,CAAAynB,MAAA,CAAAxpB,EAAA+B,SAAA,CAAArX,MAAA,UACA/lB,OAAA,CACA,CACAwgC,QAAAvW,EAAA,kBAAAR,MAAA,EAAAugC,EAAA,EACA1pB,WAAA,GACAC,OAAA,EACA,EACA,CACAC,QAAAvW,EAAA,mBAAAR,MAAA,EAAAsgC,EAAA,EACAzpB,WAAA,GACAC,OAAA,EACA,EACA,CACA,cACA,CAGAC,QAAAvW,EAAA,qCAAwDR,MAAA,EACxD45B,EACA,EACA/iB,WAAA,GACA5C,OAAAosB,CACA,EACA,CAGAtpB,QAAAvW,EAAA,wCAA2DR,MAAA,EAC3D1rB,EACA8rD,EACA,EACAvpB,WAAA,GACA5C,OAAAosB,CACA,EACA,CAGAtpB,QAAAvW,EAAA,4BAAAR,MAAA,EAAA1rB,EAAA,EACAuiC,WAAA,EACA,EACA,CAIAE,QAAAvW,EAAA,oBAAAR,MAAA,EACA2/B,EACAK,EACA,EACAnpB,WAAA,GACA5C,OAAAosB,CACA,EACA,CAIAtpB,QAAAvW,EAAA,yBAAAR,MAAA,EAAA45B,EAAA,EACA/iB,WAAA,GACA5C,OAAAosB,CACA,EACA,CAGAtpB,QAAAvW,EAAA,oBAAAR,MAAA,EAAA1rB,EAAA,EACAuiC,WAAA,EACA,EACA,CAIAE,QAAAvW,EAAA,mCAAAR,MAAA,EACAigC,EACA,EACAppB,WAAA,GACA5C,OAAAosB,CACA,EACA,CAGAtpB,QAAAvW,EACA,2EACAR,MAAA,CACA,CAAAogC,EAAAN,EAAAxrD,EAAA,EAEA2/B,OAAAosB,CACA,EACA,CACAjpD,QAAA6hD,EAEAx6B,OACA,kJACAi5B,SAAA,uDACAC,YAAA,wBACA,GACA/lB,EAAA+B,SAAA,CAAAK,YAAA,oBACA8jB,MAAA,CACA/gB,QAAA,OACAxE,MAAA,UACA,CACA,GACAX,EAAA+B,SAAA,CAAAK,YAAA,yBACA,mBACA+C,QAAAvW,EAAA,yBAAAR,MAAA,EAAA1rB,EAAA,EACAuiC,WAAA,GACAtE,MAAA,aACA,CACA,GACAX,EAAA+B,SAAA,CAAAK,YAAA,wBACAz/B,UAAA,CAGAwiC,QAAAvW,EACA,+DAAqER,MAAA,CACrE,CAAA1rB,EAAA,EAEAuiC,WAAA,GACA5C,OAAA,CACA0jB,YAAA,IACA,CACA,EACA,mBAEA5gB,QAAAvW,EACA,kFACAR,MAAA,CACA,CAAA+/B,EAAA,EAEAlpB,WAAA,GACAtE,MAAA,aACA0B,OAAAosB,CACA,EACA,eAIAtpB,QAAAvW,EACA,+DAA0CR,MAAA,CAC1C,CAAAogC,EAAAxG,EAAA,EAEA3lB,OAAAosB,EACA9tB,MAAA,YACA,EACA,0BAEAwE,QAAAvW,EAAA,8BAA8CR,MAAA,EAAAogC,EAAA,EAC9CvpB,WAAA,GACA5C,OAAAosB,EACA9tB,MAAA,YACA,EAOA,kBAEAwE,QAAAvW,EAAA,yBAAAR,MAAA,EAAA1rB,EAAA4qD,EAAA,EACAjrB,OAAA,CACAqkB,SAAA93B,EAAA,SAAAR,MAAA,EAAA1rB,EAAA,EACA4qD,QAAA,CACAnoB,QAAA/D,OAAAksB,GACA3sB,MAAA,aACA0B,OAAAosB,CACA,CACA,CACA,EACA,aAIAtpB,QAAAvW,EACA,kKACAR,MAAA,CACA,CACA2/B,EACAK,EACA1rD,EACA8rD,EACAnH,EAAAj5B,MAAA,CACA+/B,EACA,kBAAA//B,MAAA,CACA,EAEA6W,WAAA,GACA5C,OAAA,CACA,oBACA8C,QAAAvW,EAAA,+BAAAR,MAAA,EACAggC,EACAD,EACA,EACAlpB,WAAA,GACAC,OAAA,GACA7C,OAAArC,EAAA+B,SAAA,CAAAynB,MAAA,EAEAhkD,QAAA6hD,EACA,cACAliB,QAAA/D,OAAAotB,GACAtpB,OAAA,GACA7C,OAAAosB,CACA,EACA1I,YAAA,OACA,CACA,EACA6I,aAAA,CACAzpB,QAAA,gBACAF,WAAA,GACAtE,MAAA,WACA0B,OAAA,CAEA+mB,UAAA,CACAjkB,QACA,iGACAF,WAAA,GACAtE,MAAA,SACA,CACA,CACA,CACA,GACA,IAAAkuB,EAAAH,EAAA,IAAAj/B,EACAq/B,EAAAtuC,EACA,iEAAA4N,MAAA,CACA,CAAAygC,EAAA,EAEAE,EAAApB,EACAntC,EAAA,+BAAA4N,MAAA,EACA0gC,EACA,EACA,GAEAE,EACA,wEACA5gC,MAAA,CACA6gC,EAAAzuC,EAAA,0BAAA4N,MAAA,EACA45B,EACA+G,EACA,EACA/uB,EAAA+B,SAAA,CAAAK,YAAA,wBACA1C,UAAA,CAGAyF,QAAAvW,EACA,6EACAR,MAAA,CACA,CAAA4gC,EAAAC,EAAA,EAEAhqB,WAAA,GACAC,OAAA,GACA7C,OAAA,CACA/X,OAAA,CACA6a,QAAAvW,EAAA,iBAAAR,MAAA,EAAA4gC,EAAA,EACAruB,MAAA,SACA,EACA,uBACAwE,QAAAvW,EAAA,aAAAR,MAAA,EAAA2gC,EAAA,EACA1sB,OAAArC,EAAA+B,SAAA,CAAAynB,MAAA,EAEA,cACArkB,QAAA/D,OAAA4mB,GACA3lB,OAAA,CACA0jB,YAAA,IACA,CACA,EACAA,YAAA,MACA,CACA,CACA,GACA,IAAAmJ,EAAA,aAA4B9gC,MAAA,CAC5B+gC,EAAAxB,EACAntC,EAAA,+BAAA4N,MAAA,EACA0gC,EACA,EACA,GAEAM,EAAA5uC,EAAA,qCAAoE4N,MAAA,EACpE+gC,EACAD,EACA,EACAG,EAAA1B,EACAntC,EACA,mEACA4N,MAAA,CACA,CAAAygC,EAAA,EAEA,GAEAS,EAAA9uC,EAAA,qCAAoE4N,MAAA,EACpEihC,EACAH,EACA,EACA,SAAAK,EAAArE,CAAA,CAAAsE,CAAA,EACA,OACAtE,cAAA,CACA/lB,QAAAvW,EAAA,6BAAyCR,MAAA,EAAA88B,EAAA,EACzCjmB,WAAA,GACA5C,OAAA,CACA,iBACA8C,QAAAvW,EAAA,sCAA4DR,MAAA,EAC5DohC,EACAN,EACA,EACAjqB,WAAA,GACA5C,OAAA,CACA0jB,YAAA,IACA,CACA,EACAA,YAAA,UACAt/C,WAAA,CACA0+B,QAAA,UACAxE,MAAA,kBACA0B,OAAArC,EAAA+B,SAAA,CAAAynB,MAAA,CAEA,CACA,EACA7kD,OAAA,SACA,CACA,CACAq7B,EAAA+B,SAAA,CAAAK,YAAA,oBACA,wBACA,CACA+C,QAAAvW,EACA,4DAAiER,MAAA,CACjE,CAAAghC,EAAA,EAEAnqB,WAAA,GACAC,OAAA,GACA7C,OAAAktB,EAAAH,EAAAD,EACA,EACA,CACAhqB,QAAAvW,EAAA,4CAA4DR,MAAA,EAC5DkhC,EACA,EACArqB,WAAA,GACAC,OAAA,GACA7C,OAAAktB,EAAAD,EAAAD,EACA,EACA,CACA/nC,KAAA,CACA6d,QAAA/D,OAAA3R,GACAyV,OAAA,EACA,CACA,GACAlF,EAAA+B,SAAA,CAAA0tB,MAAA,CAAAzvB,EAAA+B,SAAA,CAAA2tB,EAAA,CAAA1vB,EAAA+B,SAAA,CAAAynB,MAAA,EACGxpB,EACH,CA7cAn9B,EAAAC,OAAA,CAAA0mD,EACAA,EAAAr8B,WAAA,UACAq8B,EAAAhjB,OAAA,qDCHA,IAAA8iB,EAAsBjpD,EAAQ,OAI9B,SAAAsvD,EAAA3vB,CAAA,EACAA,EAAAwlB,QAAA,CAAA8D,GAIG,SAAAtpB,CAAA,EACH,IAAA4vB,EAAA,0DACAxhC,MAAA,CACAyhC,EACA,+DAAAzhC,MAAA,CACA,IACA,iEAAmDA,MAAA,CAQnD,SAAAu/B,EAAAxoB,CAAA,CAAAyoB,CAAA,EACA,QAAA7sC,EAAA,EAAsBA,EAAA6sC,EAAe7sC,IACrCokB,EAAAA,EAAA3kB,OAAA,sBACA,YAAA2kB,EAAA,GACA,GAEA,OAAAA,EACA3kB,OAAA,wBACAA,OAAA,gBAAAqvC,EAAA,KACArvC,OAAA,oBAAAovC,EAAA,IACA,CACA,IAAA9oC,EAAA6mC,EAAA,4CAAAv/B,MAAA,IACA0hC,EAAAnC,EAAA,8CAAAv/B,MAAA,IACA2hC,EAAApC,EAAA,4CAAiEv/B,MAAA,IACjE4hC,EAAArC,EAAA,0CAAAv/B,MAAA,IAWA6hC,EACA,yFACA7hC,MAAA,CACA8hC,EAAA,sBAAA9hC,MAAA,CAAA6hC,EAAA,UAAA7hC,MAAA,CACA+hC,EACA,OAAA/hC,MAAA,CACA,MACA,oBAAAA,MAAA,CACA6hC,EACA,OAAA7hC,MAAA,CACA,MACA,QAAAA,MAAA,CACA,IAEA,eAAAA,MAAA,EACA8hC,EACA,IACAvC,EAEA,MAAAv/B,MAAA,CACA6hC,EACA,OAAA7hC,MAAA,CACA,MACA,QAAAA,MAAA,CACA,KAEA,eAAAA,MAAA,CACA8hC,EARA,YAYA,YAAA9hC,MAAA,CACA,GAEA,KACA,YAAAA,MAAA,CACA,IACA,IAAAA,MAAA,CACA8hC,EACA,GAQAlwB,CAAAA,EAAA+B,SAAA,CAAA4tB,MAAA,CAAA3vB,EAAA+B,SAAA,CAAArX,MAAA,cAeA,IAAAglC,EAAA,CACAvqB,QAAA,YACAxE,MAAA,kBACA0B,OAjBArC,EAAA+B,SAAA,CAAAK,YAAA,CACA,SACA,SACA,CACAnV,KAAA,CACAkY,QAAA/D,OAAA+uB,GACAjrB,OAAA,GACA7C,OAAArC,EAAA+B,SAAA,CAAA4tB,MAAA,CAEA,EACA,CACAnG,OAAAxpB,EAAA+B,SAAA,CAAArX,MAAA,aACA,EAMA,EACAsV,EAAA+B,SAAA,CAAAK,YAAA,oBACA,iBACA+C,QAAA,iBACAD,OAAA,GACAvE,MAAA,SACA,EACAyvB,MAAA,CACAjrB,QAAA/D,OACA,YAAAhT,MAAA,CACA,MACA,CAEA2hC,EACA,wBAAA3hC,MAAA,CAAA2hC,EACA,6CAAA3hC,MAAA,CACAtH,EACA,MAAAsH,MAAA,CACA2hC,EACA,QAAA3hC,MAAA,CACA2hC,EACA,cAAA3hC,MAAA,CACAtH,EACA,YAAwBsH,MAAA,CACxB,SAAAA,MAAA,CACA2hC,EACA,cAAA3hC,MAAA,CACAtH,EACA,MAAAsH,MAAA,CACA2hC,EACA,gBAAA3hC,MAAA,CACA2hC,EACA,QAAA3hC,MAAA,CACAtH,EACA,MAAAsH,MAAA,CACA2hC,EACA,MACA,UAAA3hC,MAAA,CACA,MACA,WAAAA,MAAA,CACAtH,EACA,KACA,MAAAsH,MAAA,CACA2hC,EACA,KACA,CAAAnvC,IAAA,MACA,KAEAqkB,WAAA,GACAC,OAAA,GACA7C,OAAA,CACA78B,QAAA,QACAgkD,OAAAkG,CACA,CACA,EACAtG,UAAA,CACAjkB,QACA,wKACAF,WAAA,GACAC,OAAA,GACA7C,OAAA,CACA78B,QAAA,QACAgkD,OAAAkG,CACA,CACA,EACAnqD,MAAA,CACA4/B,QAAA/D,OACA,YAAAhT,MAAA,CACA,kBAAAA,MAAA,CACA,MACA,QAAAA,MAAA,CACA,IACAtH,EALA,OAQA,eAAAsH,MAAA,CACA,IACAtH,EACA,IACAgpC,EACA,IACAE,EACAlpC,EACA,MAEAme,WAAA,GACAC,OAAA,GACAvE,MAAA,WACA0B,OAAA,CACA78B,QAAA,KACAgkD,OAAAkG,CACA,CACA,EACA,qBACAvqB,QAAA,iBACAF,WAAA,GACAtE,MAAA,UACA,CACA,GACAX,EAAA+B,SAAA,CAAAsuB,KAAA,CAAArwB,EAAA+B,SAAA,CAAA4tB,MAAA,EACG3vB,EACH,CAtNAn9B,EAAAC,OAAA,CAAA6sD,EACAA,EAAAxiC,WAAA,UACAwiC,EAAAnpB,OAAA,2CCCA,SAAA8pB,EAAAtwB,CAAA,GAWG,SAAAA,CAAA,EAKH,SAAAz6B,EAAA6oB,CAAA,EACA,OAAAgT,OACA,UAAAhT,MAAA,OAAAA,EAAA,kBAA0DA,MAAA,CAC1D,IAEA,CACA4R,EAAA+B,SAAA,CAAAuuB,GAAA,EACAlH,UAAA,CACAjkB,QACA,6ZACAF,WAAA,GACAtE,MAAA,UACA,EACA0Y,OAAA,CACAlU,QAAA5/B,EAAA,qBAAA6oB,MAAA,EACA6W,WAAA,EACA,EACAsrB,KAAA,CACAprB,QAAA5/B,EAAA,SAAA6oB,MAAA,EACA6W,WAAA,GACAtE,MAAA,SACA,EACAiP,MAAA,CACAzK,QAAA5/B,EAAA,oBAAA6oB,MAAA,EACA6W,WAAA,GACAtE,MAAA,QACA,EACA6vB,KAAA,CACArrB,QAAA5/B,EAAA,iCAAA6oB,MAAA,EACA6W,WAAA,GACAtE,MAAA,QACA,EACA8vB,KAAA,CACAtrB,QAAA5/B,EACA,kCAAsC6oB,MAAA,CACtC,IACA,cAAoBA,MAAA,CACpB,IACA,0DAA8DA,MAAA,EAE9D6W,WAAA,GACAtE,MAAA,MACA0B,OAAA,CACAunB,UAAA,IACA,CACA,EACApkD,QAAA,CACA,CACA2/B,QAAA5/B,EAAA,mBAAA6oB,MAAA,EACA6W,WAAA,GACAtE,MAAA,QACA,EACA,CACAwE,QAAA5/B,EAAA,YAAA6oB,MAAA,EACA6W,WAAA,GACAtE,MAAA,MACA,EACA,CACAolB,YAAA,GACA,CACA,EAAG/lB,EACH,CAhFAn9B,EAAAC,OAAA,CAAAwtD,EACAA,EAAAnjC,WAAA,OACAmjC,EAAA9pB,OAAA,mCCCA,SAAAkqB,EAAA1wB,CAAA,GACG,SAAAA,CAAA,EACH,IACA2wB,EADAhsD,EAAA,+CAEAq7B,CAAAA,EAAA+B,SAAA,CAAAojB,GAAA,CAAAp6B,QAAA,EACAoa,QAAAnF,EAAA+B,SAAA,CAAAojB,GAAA,CAAAp6B,QAAA,CAAAoa,OAAA,CACAF,WAAA,GACA5C,OAAAsuB,EAAA,CACA,iBACA,+DACA,yBACAC,MAAA,WACAvlC,GAAA,UACAqU,UAAA,CACAyF,QAAA/D,OAAA,oBAAAz8B,EAAAypB,MAAA,UACA8W,OAAA,GACA7C,OAAA,CACA0jB,YAAA,UACA,oBACA5gB,QAAA,aACAF,WAAA,GACAtE,MAAA,SACA,EACAh+B,UAAA,CACAwiC,QAAA,4CACAF,WAAA,GACA5C,OAAA,CACA0jB,YAAA,KACA,CACA,EACA,aACA5gB,QAAA,oCACAF,WAAA,EACA,EACA,cACAtgC,EACA,CACAwgC,QAAA,4CACAF,WAAA,EACA,EACA,CACA6gB,SAAA,WACA,CACA,EACA,QACA,CACA3gB,QAAA,kDACAF,WAAA,GACA5C,OAAA,CACAxV,OAAA,SACAi5B,SAAA,MACA,CACA,EACA,CACA3gB,QAAA,gCACAF,WAAA,EACA,EACA,CACA4rB,WAAA,cAIA9K,YAAA,OACA,CACA,EACA/lB,EAAA+B,SAAA,CAAAojB,GAAA,QAAA9iB,MAAA,+BAAAA,MAAA,CACAsuB,EACA3wB,EAAA+B,SAAA,CAAAK,YAAA,mBACAokB,SAAA,CACArhB,QACA,8EACAF,WAAA,EACA,CACA,GACA,IAAA6rB,EAAA,CACA3rB,QAAA,+BACAF,WAAA,EACA,EACApY,EAAA,CACAsY,QAAA,uCACAF,WAAA,EACA,EACAjF,EAAA+B,SAAA,CAAAK,YAAA,mBACA0jB,SAAA,CACA3gB,QAAA,qBACAF,WAAA,EACA,EAGA8rB,QAAA,CACA5rB,QAAA,qBACAxE,MAAA,OACA,EACA3mB,MAAA,CACA,CACAmrB,QACA,o6CACAF,WAAA,EACA,EACA,CACAE,QACA,4JACA9C,OAAA,CACAyuB,KAAAA,EACAjkC,OAAAA,EACA65B,SAAA,eACAX,YAAA,OACA,CACA,EACA,CAEAjhD,OAAA,kBACAgsD,KAAAA,EACAjkC,OAAAA,CACA,EACA,EAAGmT,EACH,CAvHAn9B,EAAAC,OAAA,CAAA4tD,EACAA,EAAAvjC,WAAA,aACAujC,EAAAlqB,OAAA,oCCCA,SAAA2e,EAAAnlB,CAAA,MAEAr7B,EAiEAugD,EAjEAvgD,EACA,8EACAq7B,EAAA+B,SAAA,CAAAojB,GAAA,EACAp2B,QAAA,mBACAiiC,OAAA,CACA7rB,QAAA,iDACA9C,OAAA,CACAgkB,KAAA,WACA,8BACAlhB,QACA,4FACAF,WAAA,GACAtE,MAAA,UACA,EACAn7B,QAAA,CACA2/B,QAAA,yCACAF,WAAA,EACA,CACA,CACA,EACA8jB,IAAA,CAEA5jB,QAAA/D,OACA,eACAz8B,EAAAypB,MAAA,CACA,IACA,8BAAAA,MAAA,CACA,OACA,KAEA8W,OAAA,GACA7C,OAAA,CACAqkB,SAAA,QACAX,YAAA,UACAphD,OAAA,CACAwgC,QAAA/D,OAAA,IAAAz8B,EAAAypB,MAAA,MACAuS,MAAA,KACA,CACA,CACA,EACA5V,SAAA,CACAoa,QAAA/D,OACA,qDACAz8B,EAAAypB,MAAA,CACA,iBAEA6W,WAAA,EACA,EACAtgC,OAAA,CACAwgC,QAAAxgC,EACAugC,OAAA,EACA,EACAtiC,SAAA,CACAuiC,QACA,oFACAF,WAAA,EACA,EACA2kB,UAAA,gBACAlD,SAAA,CACAvhB,QAAA,kCACAF,WAAA,EACA,EACA8gB,YAAA,WACA,EACA/lB,EAAA+B,SAAA,CAAAojB,GAAA,QAAA9iB,MAAA,CAAAiC,IAAA,CAAAtE,EAAA+B,SAAA,CAAAojB,GAAA,EACAD,EAAAllB,EAAA+B,SAAA,CAAAmjB,MAAA,IAEAA,EAAA5e,GAAA,CAAA2qB,UAAA,gBACA/L,EAAA5e,GAAA,CAAA4qB,YAAA,gBAGA,CA5EAruD,EAAAC,OAAA,CAAAqiD,EACAA,EAAAh4B,WAAA,OACAg4B,EAAA3e,OAAA,mCCCA,SAAA2qB,EAAAnxB,CAAA,EAEAA,EAAA+B,SAAA,CAAAovB,GAAA,EACA5rD,MAAA,iCACAwgD,YAAA,GACA,CACA,CATAljD,EAAAC,OAAA,CAAAquD,EACAA,EAAAhkC,WAAA,OACAgkC,EAAA3qB,OAAA,oCCCA,SAAA4qB,EAAApxB,CAAA,EACAA,EAAA+B,SAAA,CAAAqvB,MAAA,EAEAriC,QAAA,SACApqB,OAAA,CACAwgC,QAAA,8CACAD,OAAA,EACA,EACA,cACAC,QAAA,8CACAF,WAAA,GACAC,OAAA,EACA,EACAmsB,aAAA,CACAlsB,QACA,kFACAF,WAAA,GACAC,OAAA,GACAvE,MAAA,UACA,EACAqnB,WAAA,CACA7iB,QAAA,oBACAD,OAAA,EACA,EACAshB,SAAA,QAEAhhD,QACA,4YACAkhD,SAAA,mBACA35B,QAAA,2BACAF,OAAA,uDAEAi5B,SAAA,8CACAC,YAAA,cACA,CACA,CAtCAljD,EAAAC,OAAA,CAAAsuD,EACAA,EAAAjkC,WAAA,UACAikC,EAAA5qB,OAAA,oCCCA,SAAA8qB,EAAAtxB,CAAA,EACAA,EAAA+B,SAAA,CAAAuvB,CAAA,CAAAtxB,EAAA+B,SAAA,CAAArX,MAAA,UACAqE,QAAA,CACA,CAEAoW,QAAA,WACAD,OAAA,EACA,EACA,CACAC,QAAA/D,OACA,YAAAhT,MAAA,CACA,MACA,CAGA,0DAAAA,MAAA,CACA,SAAAA,MAAA,CACA,mBAAAA,MAAA,CACA,CAAAxN,IAAA,MACA,KAEAqkB,WAAA,GACAC,OAAA,EACA,EACA,CACAvgC,OAAA,CACA,CACAwgC,QAAA/D,OACA,CAEA,qCAAAhT,MAAA,CACA,6DAAqEA,MAAA,CAGrE,+BAAAA,MAAA,CAEA,qBAAAA,MAAA,CACA,0CAAAA,MAAA,CACA,CAAAxN,IAAA,MACA,KAEAskB,OAAA,EACA,EACA,CACAC,QAAA,+BACAD,OAAA,GACAvE,MAAA,cACA,EACA,CAEAn7B,QACA,u0BACAqnB,OAAA,CAGA,2EACA,CACAsY,QACA,2FACAF,WAAA,EACA,EACA,CACA6gB,SACA,mHACA,GACA9lB,EAAA+B,SAAA,CAAAK,YAAA,eAGA9a,KAAA,0BACA,GACA0Y,EAAA+B,SAAA,CAAAK,YAAA,gBACAx/B,SAAA,QACA,GACAo9B,EAAA+B,SAAA,CAAAK,YAAA,iBACAojB,SAAA,CAEArgB,QACA,sNACAxE,MAAA,UACA,CACA,EACA,CApFA99B,EAAAC,OAAA,CAAAwuD,EACAA,EAAAnkC,WAAA,KACAmkC,EAAA9qB,OAAA,oCCCA,SAAA+qB,EAAAvxB,CAAA,MAEAqnB,EAIAmK,EAEAlmC,EANA+7B,EAAA,CACA,2BACA,6WACA,CAGA/7B,EAAA,CACA6Z,QAAA/D,OAAAowB,CAHAA,EAAA,uDACApjC,MAAA,EAEA,gCAAAA,MAAA,EACA6W,WAAA,GACA5C,OAAA,CACA1/B,UAAA,CACAwiC,QAAA,2CACA9C,OAAA,CACA0jB,YAAA,IACA,CACA,CACA,CACA,EACA/lB,EAAA+B,SAAA,CAAAwvB,IAAA,CAAAvxB,EAAA+B,SAAA,CAAArX,MAAA,UACA,cACAY,EACA,CAGA6Z,QAAA/D,OACAowB,EAAA,+BAAmDpjC,MAAA,EAEnD6W,WAAA,GACA5C,OAAA/W,EAAA+W,MAAA,EAEA,CACA78B,QAAA6hD,EACAvB,SACA,gFACA,GACA9lB,EAAA+B,SAAA,CAAAK,YAAA,kBACA,kBACA+C,QACA,mEACAD,OAAA,GACA7C,OAAA,CACA6oB,cAAA,CACA/lB,QACA,6DACAF,WAAA,GACA5C,OAAA,CACA0jB,YAAA,aACAt/C,WAAA,CACA0+B,QAAA,UACA9C,OAAArC,EAAA+B,SAAA,CAAAwvB,IAAA,CAEA,CACA,EACA5sD,OAAA,SACA,CACA,EACAA,OAAA+Z,KAAAA,CACA,GACAshB,EAAA+B,SAAA,CAAAK,YAAA,sBACAkpB,SAAA,CACAnmB,QAAA,OACAxE,MAAA,UACA,CACA,GACAX,EAAA+B,SAAA,CAAAK,YAAA,sBACAqvB,SAAA,CACAtsB,QACA,sEACA9C,OAAA,CACA,aAAA/W,EACA9lB,QAAA6hD,EACAtB,YAAA,YACAD,SAAA,OACA,CACA,CACA,EAEA,CAlFAjjD,EAAAC,OAAA,CAAAyuD,EACAA,EAAApkC,WAAA,QACAokC,EAAA/qB,OAAA,oCCCA,SAAAkrB,EAAA1xB,CAAA,EAEAA,EAAA+B,SAAA,CAAA2vB,SAAA,EACA3I,IAAA,iDACAnmD,SAAA,CACAuiC,QAAA,wDACAD,OAAA,EACA,EACAvgC,OAAA,CACAwgC,QAAA,qCACAD,OAAA,EACA,EACA,YACA,8DACAysB,KAAA,CACAxsB,QAAA,eACAD,OAAA,EACA,EACAnW,QAAA,CACA,CACAoW,QAAA,kCACAF,WAAA,GACAC,OAAA,EACA,EACA,CACAC,QAAA,mBACAF,WAAA,GACAC,OAAA,EACA,EACA,CACAgiB,MAAA,CACA/hB,QAAA,iCACAD,OAAA,EACA,EACA1/B,QACA,0GACAkhD,SAAA,wBACA75B,OAAA,qCACAk5B,YAAA,iBACAD,SAAA,wCACA/4B,QAAA,oBACA,CAEA,CA9CAlqB,EAAAC,OAAA,CAAA4uD,EACAA,EAAAvkC,WAAA,aACAukC,EAAAlrB,OAAA,oCCCA,SAAAorB,EAAA5xB,CAAA,EACAA,EAAA+B,SAAA,CAAA6vB,GAAA,EACA7iC,QAAA,CACAoW,QAAA,8CACAF,WAAA,EACA,EACA,cACAE,QACA,yEACAxE,MAAA,QACA,EACAkxB,QAAA,CACA1sB,QAAA,wBACAxE,MAAA,UACA,EACAh8B,OAAA,CACAwgC,QAAA,sBACAD,OAAA,EACA,EACAwhB,SACA,ywFACAlhD,QACA,6EACAunB,QAAA,CACAoY,QAAA,2BACAxE,MAAA,UACA,EACA9T,OAAA,4BACAi5B,SAAA,6DACAC,YAAA,gBACA,CACA,CAlCAljD,EAAAC,OAAA,CAAA8uD,EACAA,EAAAzkC,WAAA,OACAykC,EAAAprB,OAAA,oCCCA,SAAAsrB,EAAA9xB,CAAA,EAGAA,EAAA+B,SAAA,CAAA+vB,KAAA,EAIA/iC,QACA,yEACApqB,OAAA,CACAwgC,QAAA,4DACAD,OAAA,GACA7C,OAAA,CACA6oB,cAAA,CACA/lB,QAAA,eACA9C,OAAA,CACA57B,WAAA,CACA0+B,QAAA,wBACAF,WAAA,GACAtE,MAAA,iBACA0B,OAAA,IACA,EACA0jB,YAAA,SACA,CACA,CACA,CACA,EACA5W,MAAA,CACAhK,QAAA,UACAD,OAAA,EACA,EACA6jB,IAAA,CAEA5jB,QACA,yFACAD,OAAA,EACA,EACApnB,IAAA,CAEAqnB,QAAA,yCACAD,OAAA,GACA7C,OAAA,CACAqkB,SAAA,OACAZ,SAAA,KACAU,SAAA,SACA,CACA,EACAgK,KAAA,CAEArrB,QAAA,4BACA9C,OAAA,CACAqkB,SAAA,SACAZ,SAAA,IACAj5B,OAAA,gBACA,CACA,EAEArnB,QACA,qFACA2iD,QAAA,oBACAp7B,QAAA,qBACAF,OACA,gFACAi5B,SACA,qGACAC,YAAA,qBAEA,2BACA,EACA/lB,EAAA+B,SAAA,CAAA+vB,KAAA,CAAAntD,MAAA,CAAA09B,MAAA,CAAA6oB,aAAA,CAAA7oB,MAAA,CAAA57B,UAAA,CAAA47B,MAAA,CACArC,EAAA+B,SAAA,CAAA+vB,KAAA,CAzEAjvD,EAAAC,OAAA,CAAAgvD,EACAA,EAAA3kC,WAAA,SACA2kC,EAAAtrB,OAAA,oCCCA,SAAAjiB,EAAAyb,CAAA,MAeA+xB,CAbA/xB,CAoDGA,EApDH+B,SAAA,CAAAxd,IAAA,EACAytC,MAAA,CAEA,4BACA,YACA,UACA,EAeArpD,OAAAyT,IAAA,CARA21C,EAAA,CACA,mBACA,oBACA,oBACA,qBACAE,UAAA,IACA1tC,KAAA,GACA,GACAyD,OAAA,UAAAtlB,CAAA,EACA,IAAAy3C,EAAA4X,CAAA,CAAArvD,EAAA,CACAi+B,EAAA,GACA,QAAA17B,IAAA,CAAAvC,IAEAi+B,EAAA7+B,IAAA,OAAAugB,IAAA,CAAA3f,EAAA,KAEA,SAAAA,GACAi+B,EAAA7+B,IAAA,SAEAk+B,EAAA+B,SAAA,CAAAxd,IAAA,CAAA7hB,EAAA,EACAyiC,QAAA/D,OACA,QAAA+Y,EAAA,iCACA,KAEAxZ,MAAAA,EACA0B,OAAA,CACAnU,KAAA,CACAiX,QAAA,+BACAF,WAAA,EACA,EACAkV,OAAA,CACAhV,QAAA,SACAxE,MAAA,MAAAte,IAAA,CAAA3f,EAAA,IAEA,CACA,CACA,GACAiG,OAAAC,cAAA,CAAAo3B,EAAA+B,SAAA,CAAAxd,IAAA,aACAhf,MAAAwsD,CACA,EAEA,CA1DAlvD,EAAAC,OAAA,CAAAyhB,EACAA,EAAA4I,WAAA,QACA5I,EAAAiiB,OAAA,wCCHA,IAAA0rB,EAAgC7xD,EAAQ,OAIxC,SAAA8xD,EAAAnyB,CAAA,MAuCAmF,EACAitB,EAvCApyB,EAAAwlB,QAAA,CAAA0M,GAIAlyB,EAAA+B,SAAA,CAAAowB,MAAA,EACApjC,QAAA,mBACAuX,IAAA,CACAnB,QAAA,oBACAF,WAAA,GACAtE,MAAA,SACA,EACA8qB,UAAA,CACAtmB,QAAA,4BACAxE,MAAA,aACA,EACAh8B,OAAA,CACAwgC,QAAA,kCACAD,OAAA,EACA,EACAyX,OAAA,CACAxX,QAAA,UACAF,WAAA,GACAtE,MAAA,UACA,EACA17B,KAAA,CACAkgC,QAAA,mCACAF,WAAA,GACAtE,MAAA,UACA,EACA+lB,SAAA,wBACAlhD,QACA,gFACAsgD,SAAA,oDACAj5B,OAAA,oBACAE,QAAA,2BACAy5B,SAAA,UACAT,YAAA,eACA,EACA5gB,EAAA,kDACAitB,EAAApyB,EAAA+B,SAAA,sBACA/B,EAAAoD,KAAA,CAAA9B,GAAA,4BAAAxjB,CAAA,EACAs0C,EAAAC,iBAAA,CAAAv0C,EAAA,SAAAqnB,EACA,GACAnF,EAAAoD,KAAA,CAAA9B,GAAA,2BAAAxjB,CAAA,EACAs0C,EAAAE,oBAAA,CAAAx0C,EAAA,SACA,GACAkiB,EAAA+B,SAAA,CAAAwwB,MAAA,CAAAvyB,EAAA+B,SAAA,CAAAowB,MAAA,CACAnyB,EAAAoD,KAAA,CAAA9B,GAAA,4BAAAxjB,CAAA,EACAs0C,EAAAC,iBAAA,CAAAv0C,EAAA,SAAAqnB,EACA,GACAnF,EAAAoD,KAAA,CAAA9B,GAAA,2BAAAxjB,CAAA,EACAs0C,EAAAE,oBAAA,CAAAx0C,EAAA,SACA,EAEA,CA1DAjb,EAAAC,OAAA,CAAAqvD,EACAA,EAAAhlC,WAAA,UACAglC,EAAA3rB,OAAA,4CCCA,SAAAgsB,EAAAxyB,CAAA,EACAA,EAAA+B,SAAA,mBACAhT,QAAA,MACApqB,OAAA,CACAwgC,QAAA,wBACAD,OAAA,EACA,EACAshB,SAAA,CACA,CACArhB,QAAA,wBACAF,WAAA,EACA,EACA,CACAE,QAAA,kBACAF,WAAA,EACA,EACA,CACAz/B,QAAA,qCACAorD,MAAA,CAEAzrB,QAAA,gCACAF,WAAA,GACAtE,MAAA,SACA,EACAl+B,KAAA,CAEA0iC,QACA,2XACAF,WAAA,GACAtE,MAAA,SACA,EACAolB,YAAA,MACA,EACA/lB,EAAA+B,SAAA,aAAA/B,EAAA+B,SAAA,kBApCAl/B,EAAAC,OAAA,CAAA0vD,EACAA,EAAArlC,WAAA,eACAqlC,EAAAhsB,OAAA,oCCCA,SAAAisB,EAAAzyB,CAAA,GACG,SAAAA,CAAA,EAGH,IAAA0yB,EACA,sDAAAtkC,MAAA,CACAgd,EAAA,0CAAAhd,MAAA,CAAA5N,OAAA,CACA,WACA,WACA,OAAAkyC,CACA,GAEA/tD,EACA,0EACAypB,MAAA,CACA0P,EAAA,8CAAA1P,MAAA,CAAA5N,OAAA,CACA,SACA,WACA,OAAA7b,CACA,GAEAguD,EAAA,CACAxtB,QAAA/D,OAAAz8B,GACAugC,OAAA,EACA,EACA0tB,EAAA,CACAztB,QAAA,gBACAF,WAAA,GACAC,OAAA,EACA,EAMA,SAAAtW,EAAAR,CAAA,CAAAiX,CAAA,EAQA,OAAAjE,OAPAhT,EAAAA,EACA5N,OAAA,qBACA,OAAAsd,CACA,GACAtd,OAAA,oBACA,OAAA4qB,CACA,GACA/F,EACA,CACArF,EAAA+B,SAAA,CAAA0wB,MAAA,EACAI,YAAA,CACA1tB,QACA,kNACAF,WAAA,GACAC,OAAA,GACA7C,OAAA,CACAt/B,QAAA,CACAoiC,QAAAvW,EACA,gDAAAR,MAAA,CACA,KAEA6W,WAAA,GACAC,OAAA,GACA7C,OAAA,CACAz/B,SAAA,CACAuiC,QAAA,iBACAF,WAAA,EACA,EACAtgC,OAAA,CACAguD,EACA,CACAxtB,QAAA,8BACAF,WAAA,EACA,EACA,CACA6gB,SAAA,OACAC,YAAA,GACA,CACA,EACAvgD,QAAA,CACA,CAEA2/B,QAAAvW,EACA,iEACAR,MAAA,CACA,KAEA6W,WAAA,GACAC,OAAA,EACA,EACA,CAEAC,QAAAvW,EACA,iEACAR,MAAA,CACA,KAEA6W,WAAA,GACAC,OAAA,EACA,EACA,CAEAC,QAAAvW,EAAA,oBAAAR,MAAA,MACA6W,WAAA,GACAC,OAAA,EACA,EACA,CACAC,QAAA,OACAD,OAAA,EACA,EACA,CACAnW,QAAA6jC,EACAjuD,OAAAguD,EACAnM,SAAA,2BACAV,SAAA,MACA,CACA,EACA/2B,QAAA6jC,CACA,EACA5yB,EAAA+B,SAAA,CAAA+wB,UAAA,CAAA9yB,EAAA+B,SAAA,CAAA0wB,MAAA,EACGzyB,EACH,CAxHAn9B,EAAAC,OAAA,CAAA2vD,EACAA,EAAAtlC,WAAA,UACAslC,EAAAjsB,OAAA,gDCCA,SAAArgC,EAAA65B,CAAA,GAEG,SAAAA,CAAA,EACH,IAAA+yB,EACA,MACA,CAEA,uCAAA3kC,MAAA,CACA,4BAAAA,MAAA,CACA,gCAAAA,MAAA,CACA,+EACAA,MAAA,CACA,CAAAxN,IAAA,MACA,IACAoyC,EAAA,CACA9N,OAAA,CACA/f,QAAA,oBACAF,WAAA,GACAtE,MAAA,mDACA0B,OAAArC,EAAA+B,SAAA,CAAAmjB,MAAA,CAEA,EAMA,SAAA+N,EAAA7kC,CAAA,CAAAiX,CAAA,EACA,OAAAjE,OACAhT,EAAA5N,OAAA,oBACA,OAAAuyC,CACA,GACA1tB,EAEA,CACArF,EAAA+B,SAAA,CAAA57B,GAAA,EACA4oB,QAAA,CACAoW,QAAA,gCACAD,OAAA,EACA,EACA,cACAC,QAAA8tB,EACA,+CAAA7kC,MAAA,CACA,KAEA6W,WAAA,GACAC,OAAA,GACAvE,MAAA,aACA0B,OAAA2wB,CACA,EACA,cACA7tB,QAAA8tB,EAAA,oBAAA7kC,MAAA,EACA6W,WAAA,GACAC,OAAA,GACA7C,OAAA2wB,CACA,EACA,aACA7tB,QAAA8tB,EAAA,qCAA8B7kC,MAAA,EAC9B6W,WAAA,GACAC,OAAA,GACA7C,OAAA2wB,CACA,EACAxtD,QAAA,mDACA,iBACA2/B,QAAA,uDACAF,WAAA,GACAtE,MAAA,SACA,EACAt7B,KAAA,CACA8/B,QAAA8tB,EAAA,+BAAA7kC,MAAA,EACA6W,WAAA,GACAC,OAAA,GACA7C,OAAA2wB,CACA,EACAlN,SAAA,aACAC,YAAA,YACA,EACA/lB,EAAA+B,SAAA,CAAAmxB,EAAA,CAAAlzB,EAAA+B,SAAA,CAAA57B,GAAA,EACG65B,EACH,CAlFAn9B,EAAAC,OAAA,CAAAqD,EACAA,EAAAgnB,WAAA,OACAhnB,EAAAqgC,OAAA,wCCCA,SAAA2sB,EAAAnzB,CAAA,EACAA,EAAA+B,SAAA,CAAAoxB,IAAA,EACApkC,QAAA,mBACApqB,OAAA,CACAwgC,QAAA,0BACAD,OAAA,EACA,EACAkuB,QAAA,CACAjuB,QAAA,gBACAD,OAAA,GACAvE,MAAA,YACA,EACA6Z,WAAA,CACArV,QAAA,iDACAF,WAAA,GACAtE,MAAA,oBAEA0lB,KAAA,mCACAN,YAAA,6BACAD,SAAA,UACA,CACA,CAxBAjjD,EAAAC,OAAA,CAAAqwD,EACAA,EAAAhmC,WAAA,QACAgmC,EAAA3sB,OAAA,oCCCA,SAAA6sB,EAAArzB,CAAA,EACAA,EAAA+B,SAAA,CAAAsxB,YAAA,EAEAtkC,QAAA,SACAukC,QAAA,CACAnuB,QAAA,mBACAF,WAAA,GACAtE,MAAA,WACA0B,OAAA,CACA6kB,MAAA,oBAEApB,SAAA,oBACAC,YAAA,WACA,CACA,EACA/oC,IAAA,CACAmoB,QAAA,+BACAF,WAAA,GACAtE,MAAA,WACA,EACAp7B,MAAA,CACA4/B,QAAA,MACAxE,MAAA,aACA0B,OAAA,CACA0jB,YAAA,IACA,CACA,CACA,CACA,CA/BAljD,EAAAC,OAAA,CAAAuwD,EACAA,EAAAlmC,WAAA,gBACAkmC,EAAA7sB,OAAA,oCCCA,SAAA+sB,EAAAvzB,CAAA,EACAA,EAAA+B,SAAA,CAAAwxB,MAAA,EACAxkC,QAAA,OACApqB,OAAA,CAEA,CACAwgC,QAAA,0BACAD,OAAA,EACA,EACA,CACAC,QAAA,0BACAD,OAAA,EACA,EACA,CACAC,QAAA,4CACAD,OAAA,EACA,EACA,CAEA5d,KAAA,sBACA9hB,QACA,+YACAunB,QAAA,sBAEA,kCACAF,OAAA,CAEA,mCACA,mFACA,CACAk5B,YAAA,+CACAD,SAAA,8CACA,CACA,CApCAjjD,EAAAC,OAAA,CAAAywD,EACAA,EAAApmC,WAAA,UACAomC,EAAA/sB,OAAA,wCCHA,IAAA0rB,EAAgC7xD,EAAQ,OAIxC,SAAAmzD,EAAAxzB,CAAA,EACAA,EAAAwlB,QAAA,CAAA0M,GAEAlyB,EAAA+B,SAAA,CAAAyxB,GAAA,EACA/H,UAAA,CACAtmB,QAAA,qBACAxE,MAAA,aACA,EACA5R,QAAA,YACA,uBACAoW,QAAA,UACA9C,OAAArC,EAAA+B,SAAA,CAAA0nB,UAAA,CAEA,EACAzpB,EAAAoD,KAAA,CAAA9B,GAAA,4BAAAxjB,CAAA,EAEAkiB,EAAA+B,SAAA,sBAAAswB,iBAAA,CACAv0C,EACA,MAHA,qBAMA,GACAkiB,EAAAoD,KAAA,CAAA9B,GAAA,2BAAAxjB,CAAA,EACAkiB,EAAA+B,SAAA,sBAAAuwB,oBAAA,CAAAx0C,EAAA,MACA,GACAkiB,EAAA+B,SAAA,CAAArwB,GAAA,CAAAsuB,EAAA+B,SAAA,CAAAyxB,GAAA,CA5BA3wD,EAAAC,OAAA,CAAA0wD,EACAA,EAAArmC,WAAA,OACAqmC,EAAAhtB,OAAA,yCCCA,SAAAitB,EAAAzzB,CAAA,EACAA,EAAA+B,SAAA,CAAA0xB,MAAA,EACAC,IAAA,CACAvuB,QACA,6FACA9C,OAAA,CACA3C,UAAA,QACA/6B,OAAA,aACA,CACA,EACAoqB,QAAA,CACAoW,QAAA,MACAD,OAAA,EACA,EAEAgiB,MAAA,CACA/hB,QACA,6LACAD,OAAA,EACA,EACAvgC,OAAA,CACA,CAEAwgC,QACA,iNACAD,OAAA,GACA7C,OAAA,CAEA,CACA,EACA,CACA8C,QAAA,sBACAD,OAAA,GACA7C,OAAA,CAEA,CACA,EACA,CAEA8C,QAAA,gDACAD,OAAA,GACA7C,OAAA,CAEA,CACA,EACA,CACAsxB,KAAA,CAEAxuB,QAAA,eACAF,WAAA,GACAtE,MAAA,QACA,EACA99B,OAAA,CACAsiC,QAAA,eACAxE,MAAA,YACA,EAEA,6BACAv5B,SAAA,CAEA+9B,QAAA,eACAF,WAAA,GACAtE,MAAA,UACA,EACAjB,UAAA,CACAyF,QAAA,OACAxE,MAAA,UACA,EACA+lB,SAAA,sDACA75B,OAAA,kEACArnB,QACA,kNACAunB,QAAA,yBACA+4B,SAAA,CACA,2FACA,CAEA3gB,QAAA,eACAF,WAAA,EACA,EACA,CAEAE,QAAA,eACAF,WAAA,EACA,EACA,CACA8gB,YAAA,qBACA,EACA/lB,EAAA+B,SAAA,CAAA0xB,MAAA,CAAA9uD,MAAA,CAAAqjB,OAAA,UAAAqI,CAAA,EACAA,EAAAgS,MAAA,EACA6oB,cAAA,CACA/lB,QAAA,aACA9C,OAAA,CACAopB,UAAA,CACAtmB,QAAA,WACAxE,MAAA,aACA,EACA2D,KAAAtE,EAAA+B,SAAA,CAAA0xB,MAAA,CAEA,CACA,CACA,EACA,CAzGA5wD,EAAAC,OAAA,CAAA2wD,EACAA,EAAAtmC,WAAA,UACAsmC,EAAAjtB,OAAA,oCCCA,SAAAotB,EAAA5zB,CAAA,EACAA,EAAA+B,SAAA,CAAA6xB,GAAA,EACA7kC,QAAA,sBACAzH,KAAA,CACA6d,QACA,0EACAD,OAAA,EACA,EACAvgC,OAAA,CACA,CAEAwgC,QAAA,iBACAD,OAAA,EACA,EACA,CACAC,QAAA,wBACAD,OAAA,EACA,EACA,CACA,oBAIAC,QACA,wGACAF,WAAA,GACA5C,OAAA,CACA78B,QAAA,4BACA,CACA,EACAA,QACA,kFAEA2iD,QACA,0PAEAt7B,OAAA,mDAQAi5B,SAAA,0DAEA+N,UAAA,8BACA9M,SAAA,8BACAhB,YAAA,eACA,CACA,CArDAljD,EAAAC,OAAA,CAAA8wD,EACAA,EAAAzmC,WAAA,OACAymC,EAAAptB,OAAA,wCCHA,IAAA+mB,EAAoBltD,EAAQ,OAC5B6xD,EAAgC7xD,EAAQ,OAIxC,SAAAyzD,EAAA9zB,CAAA,EACAA,EAAAwlB,QAAA,CAAA+H,GACAvtB,EAAAwlB,QAAA,CAAA0M,GAEAlyB,EAAA+B,SAAA,CAAA+xB,GAAA,EACArI,UAAA,CACAtmB,QAAA,wBACAF,WAAA,GACAtE,MAAA,aACA,EACA8sB,KAAA,CACAtoB,QAAA,eACAxE,MAAA,gBACA0B,OAAArC,EAAA+B,SAAA,CAAA0rB,IAAA,CAEA,EACAztB,EAAAoD,KAAA,CAAA9B,GAAA,4BAAAxjB,CAAA,EAGAkiB,EAAA+B,SAAA,sBAAAswB,iBAAA,CACAv0C,EACA,MAHA,4FAMA,GACAkiB,EAAAoD,KAAA,CAAA9B,GAAA,2BAAAxjB,CAAA,EACAkiB,EAAA+B,SAAA,sBAAAuwB,oBAAA,CAAAx0C,EAAA,MACA,EAEA,CAhCAjb,EAAAC,OAAA,CAAAgxD,EACAA,EAAA3mC,WAAA,OACA2mC,EAAAttB,OAAA,oCCAA,SAAAutB,EAAA/zB,CAAA,EACAA,EAAA+B,SAAA,CAAAgyB,MAAA,EACAhlC,QAAA,MACApqB,OAAA,CACAwgC,QAAA,wBACAD,OAAA,EACA,EACA,mBACAC,QAAA,8BACAxE,MAAA,UACA,EACA,eACAwE,QAAA,wBACAxE,MAAA,MACA,EACA5T,QAAA,qBACAvnB,QAAA,0DACAqnB,OAAA,CACA,SACA,mBACA,6CACA,CACA65B,SAAA,sBACAF,SAAA,CAEArhB,QAAA,gCACAF,WAAA,EACA,EACA6gB,SAAA,CACA,+GACA,CAEA3gB,QAAA,iBACAF,WAAA,EACA,EACA,CAEAE,QAAA,iBACAF,WAAA,EACA,EACA,CACA0uB,KAAA,gBACA5N,YAAA,uBACA,CACA,CA/CAljD,EAAAC,OAAA,CAAAixD,EACAA,EAAA5mC,WAAA,UACA4mC,EAAAvtB,OAAA,wCCHA,IAAAwtB,EAAmB3zD,EAAQ,OAC3B6xD,EAAgC7xD,EAAQ,OAIxC,SAAA4zD,EAAAj0B,CAAA,EACAA,EAAAwlB,QAAA,CAAAwO,GACAh0B,EAAAwlB,QAAA,CAAA0M,GAEAlyB,EAAA+B,SAAA,CAAAkyB,KAAA,EACAxI,UAAA,CACAtmB,QAAA,iBACAxE,MAAA,aACA,EACA,gBACAwE,QAAA,UACA9C,OAAArC,EAAA+B,SAAA,CAAAmyB,GAAA,CAEA,EACAl0B,EAAAoD,KAAA,CAAA9B,GAAA,4BAAAxjB,CAAA,EAEAkiB,EAAA+B,SAAA,sBAAAswB,iBAAA,CACAv0C,EACA,QAHA,gBAMA,GACAkiB,EAAAoD,KAAA,CAAA9B,GAAA,2BAAAxjB,CAAA,EACAkiB,EAAA+B,SAAA,sBAAAuwB,oBAAA,CAAAx0C,EAAA,QACA,EAEA,CA7BAjb,EAAAC,OAAA,CAAAmxD,EACAA,EAAA9mC,WAAA,SACA8mC,EAAAztB,OAAA,oCCAA,SAAA2tB,EAAAn0B,CAAA,EACAA,EAAA+B,SAAA,mBACAhT,QAAA,CACAoW,QAAA,qCACAF,WAAA,GACAC,OAAA,EACA,EACAvgC,OAAA,CACAwgC,QAAA,sBACAD,OAAA,EACA,EACA5G,UAAA,CAQA6G,QACA,uEACAD,OAAA,GACAvE,MAAA,SACA0B,OAAA,CACAyjB,SAAA,KACAC,YAAA,IACAqO,MAAA,CACAjvB,QAAA,WACAxE,MAAA,UACA,EACA9D,KAAA,CACAsI,QAAA,eACA9C,OAAA,CACA0jB,YAAA,OACA,CACA,EACA78B,KAAA,SACA,CACA,EACA,iBACAic,QAAA,oBACAxE,MAAA,SACA,EACAulB,MAAA,CACA/gB,QACA,uEACAxE,MAAA,WACA0B,OAAA,CACAyjB,SAAA,IACAuO,KAAA,mBACAxmC,OAAA,aACAymC,IAAA,QACA,CACA,EACAD,KAAA,CAGAlvB,QAAA,uDACAxE,MAAA,UACA,EACA9T,OAAA,+CACAE,QAAA,sBACA+4B,SAAA,yBACAC,YAAA,aACA,EACA/lB,EAAA+B,SAAA,MAAA/B,EAAA+B,SAAA,KACA/B,EAAA+B,SAAA,kBArEAl/B,EAAAC,OAAA,CAAAqxD,EACAA,EAAAhnC,WAAA,gBACAgnC,EAAA3tB,OAAA,oCCCA,SAAA+tB,EAAAv0B,CAAA,MAEAw0B,EAIAC,EAGAF,EAuTA5xC,EAGA+xC,EAGAC,EA7TAJ,EAAA,CACAxlC,QAAA,CACA,CAEAoW,QAAA,oBACAF,WAAA,GACA5C,MAAA,CAbAmyB,EAAA,CACA9N,SACA,+EACA,CAWA,EAEA,CAEAvhB,QAAA,mCACAF,WAAA,GACAC,OAAA,GACA7C,OAAAmyB,CACA,EACA,CAEArvB,QAAA,8CACAF,WAAA,GACAC,OAAA,GACA7C,OAAAmyB,CACA,EACA,CACA3nC,OAAA,CACA,CAEAsY,QAAA,yBACAF,WAAA,EACA,EACA,CAEAE,QAAA,yDACAF,WAAA,EACA,EACA,CAEAE,QAAA,iCACAF,WAAA,EACA,EACA,CAEAE,QAAA,iCACAF,WAAA,EACA,EACA,CAEAE,QAAA,8BACAF,WAAA,EACA,EACA,CAGAE,QACA,8DACAF,WAAA,EACA,EACA,CAEAE,QAAA,mCACAF,WAAA,EACA,EACA,CAOAE,QACA,yEACAF,WAAA,EACA,EACA,CAEA2vB,OAAA,CACAzvB,QACA,sEACAF,WAAA,GACAtE,MAAA,SACA0B,OAAA,CACAmkB,SAAA,OACAhhD,QAAA,oBACAsgD,SAAA,CACA3gB,QAAA,6BACAF,WAAA,EACA,CACA,CACA,EACAlY,QAAA,CACAoY,QAAA,qBACAF,WAAA,EACA,EAEA,iBACAE,QAAA,wCACAF,WAAA,GACAC,OAAA,GACAvE,MAAA,SACA0B,OAAA,CACAxV,OAAA,aACA,CACA,EACA,oBACA,CAEAsY,QAAA,0DACAF,WAAA,GACAC,OAAA,GACAvE,MAAA,SACA0B,OAAA,CACAxV,OAAA4nC,CAlHAA,EAAA,CACA5nC,OAAA,cACA,GAgHAA,MAAA,CAEA,yBACAsY,QAAA,0BACAF,WAAA,GACAtE,MAAA,UACA,CACA,CACA,EACA,CAEAwE,QAAA,6DACAF,WAAA,GACAC,OAAA,GACAvE,MAAA,SACA0B,OAAAoyB,CACA,EACA,CAEAtvB,QAAA,6CACAF,WAAA,GACAC,OAAA,GACAvE,MAAA,SACA0B,OAAAoyB,CACA,EACA,CACA,iBACAtvB,QAAA,yCACAF,WAAA,GACAtE,MAAA,WACA0B,OAAA,CAGA19B,OAAA,CACAwgC,QAAA,cACAF,WAAA,EACA,CACA,CACA,EAeA,0BACA,CAEAE,QAAA,uCACAF,WAAA,GACAtE,MAAA,UACA,EACA,CAEAwE,QAAA,eACAF,WAAA,GACAtE,MAAA,UACA,EACA,CAEAwE,QAAA,iBACAF,WAAA,GACAtE,MAAA,UACA,EACA,CACAk0B,YAAA,CACA1vB,QAAA,KACAF,WAAA,GACAtE,MAAA,SACA,EACA,kBACAwE,QAAA,KACAF,WAAA,GACAtE,MAAA,UACA,EACA,qBACAwE,QAAA,KACAF,WAAA,GACAtE,MAAA,UACA,EACA,gBACAwE,QAAA,KACAF,WAAA,GACAtE,MAAA,UACA,EACA,oBAEAwE,QAAA,iCACAF,WAAA,GACAtE,MAAA,SACA,EACA,wBACAwE,QAAA,KACAF,WAAA,GACAtE,MAAA,UACA,EAyBA,6BACAwE,QACA,0MACAF,WAAA,GACAtE,MAAA,SACA,EACA,gBACAwE,QAAA,6DACAF,WAAA,GACAC,OAAA,GACAvE,MAAA,UACA,EACA,yBACAwE,QAAA,uBACAF,WAAA,GACAtE,MAAA,UACA,EAEA,iCACA,CAEAwE,QAAA,wBACAF,WAAA,GACAtE,MAAA,UACA,EACA,CAEAwE,QAAA,iBACAF,WAAA,GACAtE,MAAA,UACA,EACA,CAEA,uBACA,CAEAwE,QAAA,iBACAF,WAAA,GACAtE,MAAA,UACA,EACA,CAEAwE,QAAA,iBACAF,WAAA,GACAtE,MAAA,UACA,EACA,CACA,eACAwE,QAAA,0BACAF,WAAA,EACA,EAgBAtgC,OAAA,CACAwgC,QAAA,qBACAD,OAAA,GACA7C,OAAAoyB,CACA,CACA,EACA9xC,EAAA,SAAA/d,CAAA,EACA,OAAAA,EAAA,IAAA4b,OAAA,6BAAoD,OACpD,EACAk0C,EAAA,SAAAzqC,CAAA,EACA,2BAAAA,EAAA5C,GAAA,CAAA1E,GAAA/B,IAAA,mBACA,EAoXAjY,OAAAyT,IAAA,CAnXAu4C,EAAA,CACA,kBACA,KACA,QACA,QACA,OACA,UACA,MACA,WACA,kBACA,MACA,OACA,YACA,aACA,OACA,WACA,OACA,OACA,QACA,WACA,OACA,QACA,OACA,MACA,IACA,IACA,QACA,QACA,QACA,OACA,kBACA,MACA,SACA,MACA,QACA,OACA,QACA,SACA,OACA,UACA,UACA,OACA,UACA,MACA,gBACA,WACA,QACA,QACA,QACA,OACA,OACA,OACA,OACA,MACA,OACA,OACA,QACA,UACA,YACA,OACA,QACA,OACA,SACA,gBACA,SACA,QACA,YACA,WACA,oBACA,kBACA,OACA,YACA,MACA,QACA,MACA,QACA,MACA,iBACA,UACA,CACA,wBAEA,UACA,YACA,YACA,KACA,SACA,MACA,IACA,WACA,KACA,SACA,QACA,SACA,YACA,aACA,WACA,SACA,UACA,gBACA,oBACA,YACA,UACA,mBACA,KACA,WACA,IACA,KACA,KACA,CACA,qBACA,aACA,WACA,SACA,mBACA,SACA,aACA,aACA,YACA,mBACA,kBACA,WACA,aACA,OACA,WACA,UACA,aACA,YACA,WACA,OACA,OACA,MACA,WACA,UACA,SACA,UACA,aACA,aACA,SACA,QACA,UACA,oBACA,aACA,cACA,OACA,SACA,gBACA,oBACA,gCACA,iCACA,YACA,UACA,WACA,SACA,aACA,aACA,UACA,SACA,OACA,eACA,eACA,QACA,OACA,SACA,YACA,UACA,QACA,WACA,cACA,WACA,QACA,YACA,aACA,aACA,qBACA,SACA,SACA,WACA,eACA,UACA,aACA,OACA,UACA,QACA,SACA,SACA,OACA,aACA,WACA,YACA,MACA,aACA,UACA,aACA,SACA,cACA,YACA,OACA,YACA,SACA,YACA,iBACA,UACA,eACA,UACA,gBACA,eACA,YACA,mBACA,UACA,SACA,WACA,OACA,aACA,oBACA,YACA,UACA,UACA,YACA,WACA,WACA,aACA,OACA,cACA,iBACA,QACA,UACA,YACA,gBACA,cACA,oBACA,MACA,UACA,OACA,SACA,OACA,sBACA,aACA,aACA,mBACA,UACA,cACA,SACA,aACA,WACA,kBACA,OACA,OACA,QACA,QACA,QACA,YACA,SACA,eACA,eACA,WACA,WACA,MACA,aACA,YACA,WACA,QACA,oBACA,eACA,OACA,cACA,QACA,UACA,UACA,OACA,cACA,SACA,OACA,gBACA,YACA,cACA,CACA,gBACA,UACA,kBACA,MACA,cACA,iBACA,aACA,UACA,eACA,UACA,WACA,cACA,MACA,IACA,IACA,cACA,IACA,MACA,IACA,KACA,SACA,cACA,wBACA,OACA,IACA,OACA,IACA,WACA,SACA,cACA,KACA,QACA,aACA,SACA,QACA,SACA,QACA,QACA,QACA,UACA,SACA,UACA,WACA,KACA,iBACA,KACA,MACA,UACA,aACA,KACA,KACA,MACA,QACA,WACA,SACA,KACA,UACA,UACA,MACA,SACA,KACA,SACA,QACA,OACA,WACA,aACA,UACA,WACA,OACA,YACA,cACA,QACA,MACA,iBACA,YACA,yBACA,aACA,QACA,aACA,QACA,UACA,MACA,SACA,wBACA,MACA,OACA,KACA,OACA,WACA,QACA,YACA,YACA,GAEA3sC,OAAA,UAAAtD,CAAA,EACA6vC,CAAA,CAAA7vC,EAAA,CAAAygB,OAAA,CAAAuvB,EAAAC,CAAA,CAAAjwC,EAAA,CACA,GAyNA6vC,EAAAM,WAAA,CAAA1vB,OAAA,CAAAuvB,EAxNA,CAEA,MACA,QACA,OACA,MACA,OACA,QACA,QACA,OACA,QACA,UACA,MACA,MACA,OACA,QACA,QACA,UACA,SACA,OACA,OACA,QACA,QACA,MACA,SACA,KACA,UACA,YACA,MACA,OACA,YACA,QACA,OACA,QACA,OACA,QACA,UACA,KACA,QACA,OACA,SACA,aACA,aACA,WACA,QACA,UACA,OACA,KACA,OACA,SACA,QACA,OACA,SACA,MACA,OACA,SACA,MACA,WACA,YACA,iBACA,kBACA,SACA,YACA,QACA,YACA,YACA,WACA,cACA,UACA,YACA,gBACA,mBACA,SACA,MACA,UACA,cACA,aACA,SACA,cACA,OACA,eACA,YACA,UACA,eACA,eACA,aACA,kBACA,QACA,aACA,SACA,eACA,YACA,eACA,WACA,SACA,WACA,aACA,OACA,YACA,gBACA,eACA,OACA,UACA,UACA,YACA,gBACA,iBACA,kBACA,gBACA,UACA,OACA,YACA,cACA,UACA,cACA,aACA,OACA,aACA,iBACA,aACA,OACA,eACA,cACA,WACA,gBACA,YACA,UACA,QACA,aACA,QACA,OACA,aACA,UACA,aACA,aACA,QACA,OACA,YACA,iBACA,YACA,UACA,eACA,cACA,iBACA,YACA,oBACA,kBACA,QACA,iBACA,eACA,gBACA,kBACA,cACA,gBACA,gBACA,kBACA,cACA,OACA,UACA,YACA,YACA,UACA,eACA,iBACA,aACA,OACA,SACA,cACA,qBACA,SACA,mBACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,gBACA,cACA,iBACA,cACA,eACA,aACA,cACA,WACA,iBACA,oBACA,cACA,qBACA,WACA,eACA,mBACA,oBACA,iBACA,UACA,iBACA,iBACA,cACA,SACA,gBACA,eACA,eACA,aACA,aACA,UACA,oBACA,eACA,YACA,cACA,wBACA,kBACA,EAEA10B,EAAA+B,SAAA,CAAAwyB,MAAA,CAAAA,CAEA,CA15BA1xD,EAAAC,OAAA,CAAAyxD,EACAA,EAAApnC,WAAA,UACAonC,EAAA/tB,OAAA,oCCCA,SAAAsuB,EAAA90B,CAAA,EAOAA,EAAA+B,SAAA,QACAhT,QAAA,CACAoW,QAAA,WACA,EACAxgC,OAAA,CACAwgC,QAAA,UACAD,OAAA,EACA,EACA,kBACAC,QAAA,mBACAxE,MAAA,QACA,EACA,kBACAwE,QAAA,OACAxE,MAAA,WACA,EACA9T,OAAA,MACAi5B,SAAA,gCACAC,YAAA,QACAS,SAAA,QACA,gBACArhB,QAAA,YACAxE,MAAA,MACA,CACA,CAEA,CApCA99B,EAAAC,OAAA,CAAAgyD,EACAA,EAAA3nC,WAAA,UACA2nC,EAAAtuB,OAAA,oCCCA,SAAAuuB,EAAA/0B,CAAA,EACAA,EAAA+B,SAAA,6BAAA/B,EAAA+B,SAAA,CAAArX,MAAA,CACA,QACA,CACAqE,QAAA,SACAvpB,QACA,oEACAsgD,SAAA,wCACA,GAEA,OAAA9lB,EAAA+B,SAAA,2CACA/B,EAAA+B,SAAA,CAAAK,YAAA,uCACAlZ,KAAA,CACAic,QACA,gGACAF,WAAA,GACAC,OAAA,GACA7C,OAAA,CACAmkB,SAAA,CACArhB,QAAA,yDACA9C,OAAA,CACAyjB,SAAA,IACAtgD,QAAA,OACAugD,YAAA,UACA,CACA,EACAA,YAAA,IACA,CACA,EACAvW,OAAA,CAEArK,QAAA,kDACAF,WAAA,GACAtE,MAAA,UACA0B,OAAA,CACA0jB,YAAA,GACA,CACA,CACA,EACA,CA1CAljD,EAAAC,OAAA,CAAAiyD,EACAA,EAAA5nC,WAAA,0BACA4nC,EAAAvuB,OAAA,oCCCA,SAAAwuB,EAAAh1B,CAAA,EAEAA,EAAA+B,SAAA,CAAAizB,IAAA,CAAAh1B,EAAA+B,SAAA,CAAArX,MAAA,kBACAsV,EAAA+B,SAAA,CAAAK,YAAA,mBACA3/B,KAAA,CACA,CACA0iC,QACA,sEACAxE,MAAA,KACA,EACA,GAEAX,EAAA+B,SAAA,CAAAizB,IAAA,sBAAA7vB,OAAA,CACA,uKACA,OAAAnF,EAAA+B,SAAA,CAAAizB,IAAA,WACAh1B,EAAA+B,SAAA,CAAAK,YAAA,oBACA,oBACA+C,QAAA,YACAxE,MAAA,aACA,CACA,GACAjgB,MAAAC,OAAA,CAAAqf,EAAA+B,SAAA,CAAAizB,IAAA,CAAAxvD,OAAA,GACAw6B,CAAAA,EAAA+B,SAAA,CAAAizB,IAAA,CAAAxvD,OAAA,EAAAw6B,EAAA+B,SAAA,CAAAizB,IAAA,CAAAxvD,OAAA,GAEAw6B,EAAA+B,SAAA,CAAAizB,IAAA,CAAAxvD,OAAA,CAAAwjB,OAAA,CACA,CACAmc,QAAA,kDACAF,WAAA,EACA,EACA,CACAE,QACA,wGACAF,WAAA,EACA,EAGA,CAvCApiC,EAAAC,OAAA,CAAAkyD,EACAA,EAAA7nC,WAAA,QACA6nC,EAAAxuB,OAAA,oCCCA,SAAAyuB,EAAAj1B,CAAA,EACAA,EAAA+B,SAAA,CAAAkzB,OAAA,EACA,iBACA9vB,QAAA,0BACAxE,MAAA,QACA,EACAh8B,OAAA,CACAwgC,QACA,gGACA9C,OAAA,CACAtT,QAAA,CACAoW,QAAA,wBACAF,WAAA,EACA,CACA,CACA,EACAlW,QAAA,CACAoW,QAAA,MACAD,OAAA,EACA,EACAnY,QAAA,+BACAF,OAAA,yDACArnB,QAAA,CAEA,oEACA,gIACA,4VACA,8JACA,CACAsgD,SAAA,CACA,qDACA,CAEA3gB,QAAA,sBACAF,WAAA,EACA,EACA,CACA8gB,YAAA,oBACA,CACA,CA1CAljD,EAAAC,OAAA,CAAAmyD,EACAA,EAAA9nC,WAAA,WACA8nC,EAAAzuB,OAAA,oCCCA,SAAA0uB,EAAAl1B,CAAA,EACAA,EAAA+B,SAAA,CAAAmzB,MAAA,CAAAl1B,EAAA+B,SAAA,CAAArX,MAAA,UACAqE,QAAA,CACA,CACAoW,QAAA,kCACAF,WAAA,GACAC,OAAA,EACA,EACA,CACAC,QAAA,mBACAF,WAAA,GACAC,OAAA,EACA,EACA,CACAvgC,OAAA,CACAwgC,QAAA,8DACAD,OAAA,EACA,EACA,cACAC,QACA,yHACAF,WAAA,GACA5C,OAAA,CACAyjB,SAAA,QACAC,YAAA,IACA,CACA,EACAvgD,QACA,ooBACAqnB,OAAA,CACA,iCACA,uBACA,oDACA,iCACA,CACAi5B,SACA,0GACA,GACA9lB,EAAA+B,SAAA,CAAAK,YAAA,qBACAwsB,aAAA,CACAzpB,QAAA,gBACAF,WAAA,GACAtE,MAAA,WACA0B,OAAA,CACA+mB,UAAA,CACAjkB,QAAA,8CACAF,WAAA,GACAtE,MAAA,SACA,CACA,CACA,CACA,GACAX,EAAA+B,SAAA,CAAAK,YAAA,yBACA,0BACA+C,QAAA,wBACAxE,MAAA,SACA,CACA,GACAX,EAAA+B,SAAA,CAAAK,YAAA,oBACA0kB,WAAA,CACA3hB,QAAA,YACAD,OAAA,GACA7C,OAAA,CACA0jB,YAAA,YACA,cACA5gB,QAAA,+BACAF,WAAA,EACA,EACA,sBACAE,QAAA,UACA9C,OAAArC,EAAA+B,SAAA,CAAAmzB,MAAA,CAEA,CACA,EACA5tC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A,CACAX,CAAAA,EAAA+B,SAAA,wBACA36B,SAAA,CACA+9B,QAAA/D,OAAA04B,GACA50B,OAAA,GACA7C,OAAA,CACAzV,QAAA,CACAuY,QAAA,sBACAF,WAAA,GACA5C,OAAA,CACA,iBACA8C,QAAA,oBACAF,WAAA,EACA,EACA,gBAEAE,QAAA,0CACAF,WAAA,GACA5C,OAAA,CACA0jB,YAAA,KACAG,MAAA,CACA/gB,QAAA,mDACAF,WAAA,GACA5C,OAAA,CACAyjB,SAAA,aACAj5B,OAAA,KACA,CACA,EACAyX,KAAA,IACA,CACA,EACA,gBAEAa,QACA,4DACAF,WAAA,GACA5C,OAAA,CACAvpB,OAAA,iBACA,iBAAAihD,EACAhvC,SAAA,CACAoa,QAAA,mBACA9C,OAAA,CACA78B,QAAA,mCACA,CACA,CACA,CACA,EACA,gBAEA2/B,QAAA,0CACAF,WAAA,GACA5C,OAAA,CACA,iBAAA03B,EACAhvC,SAAA,CACAoa,QAAA,cACA9C,OAAA,CACA78B,QAAA,SACA,CACA,CACA,CACA,EACAA,QAAA,6CACA,YACA2/B,QAAA,qDACAxE,MAAA,SACA,EACA,gBACAwE,QAAA,sBACAF,WAAA,EACA,EACA,aACAE,QACA,oEACAF,WAAA,EACA,EACA,kBACAE,QAAA/D,OACA,mBAAAhT,MAAA,CACAu/B,EAAA,sCAA6Dv/B,MAAA,IAC7D,KAEA6W,WAAA,GACAtE,MAAA,QACA,EACAolB,YAAA,GACA,CACA,EACA,sBACA5gB,QAAA,IACAxE,MAAA,UACA,CACA,CACA,EACAhe,OAAAA,EACAhe,OA3HA,CACAwgC,QAAA00B,EACA30B,OAAA,GACA7C,OAAA,CACA1f,OAAAA,CACA,CACA,CAsHA,EACAo3C,EAAA13B,MAAA,CAAAqE,OAAA,CAAArE,MAAA,CAAArC,EAAA+B,SAAA,uBACA/B,EAAA+B,SAAA,uBAAA36B,QAAA,CAAAi7B,MAAA,CAAAzV,OAAA,CAAAyV,MAAA,CACA,eACA,CAAAA,MAAA,CAAAiC,IAAA,CAAAtE,EAAA+B,SAAA,wBACG/B,EACH,CA7JAn9B,EAAAC,OAAA,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AAA,GACA5C,OAAA,CACA78B,QAAA,CACA2/B,QAAA,gBACAF,WAAA,EACA,EACA7W,OAAA,CAGA,CACA+W,QAAA,yBACAF,WAAA,GACA5C,OAAA,CACAxF,KAAA,YACAkpB,YAAA,IACA,eACA5gB,QAAA,UACAxE,MAAA,QACA,CACA,CACA,EAGA,CACAwE,QAAA,mBACAF,WAAA,GACA5C,OAAA,CACA78B,QAAA,oCACA,CACA,EACA,CACA,+CACAkhD,SAAA,0BACA,gBACAvhB,QAAA,8CACAF,WAAA,GACAtE,MAAA,YACA0B,OAAA,CACA0jB,YAAA,IACA,CACA,EACAljD,OAAA,CACAsiC,QAAA,sDACAF,WAAA,GACA5C,OAAA,CACAxJ,QAAA,CACAsM,QAAA,aACAF,WAAA,GACAtE,MAAA,QACA,EACAolB,YAAA,MACA,CACA,EACApjD,UAAA,CACAwiC,QAAA,oBACA9C,OAAA,CACA0jB,YAAA,IACA,CACA,EACAA,YAAA,QACA,CACA,EAGAmW,KAAA,CACA/2B,QAAA,yCACAF,WAAA,GACA5C,OAAA,CACA0jB,YAAA,QACAl5B,OAAA,MACArnB,QAAA,wBACA,CACA,CACA,CACA,CA7IA3C,EAAAC,OAAA,CAAAk5D,EACAA,EAAA7uC,WAAA,kBACA6uC,EAAAx1B,OAAA,mCCCA,SAAA21B,EAAAn8B,CAAA,EACAA,EAAA+B,SAAA,CAAAo6B,IAAA,EACAx3D,OAAA,oCACAsjC,UAAA,CACA9C,QACA,oHACAxE,MAAA,WACAsE,WAAA,EACA,EACAyhB,SACA,sHACA75B,OAAA,8BACAi5B,SAAA,yCACA/4B,QAAA,qBACAvnB,QAAA,SACAugD,YAAA,aACA,CACA,CApBAljD,EAAAC,OAAA,CAAAq5D,EACAA,EAAAhvC,WAAA,QACAgvC,EAAA31B,OAAA,oCCCA,SAAA41B,EAAAp8B,CAAA,EACAA,EAAA+B,SAAA,CAAAq6B,KAAA,CAAAp8B,EAAA+B,SAAA,CAAArX,MAAA,UACA/lB,OAAA,CACAwgC,QAAA,kCACAF,WAAA,GACAC,OAAA,EACA,EACA,cACAC,QACA,4EACAF,WAAA,EACA,E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,CACAj+B,QAAA,oCACAF,WAAA,GACAtE,MAAA,SACA,EACAooB,IAAA,oDACAgX,MAAA,CACA56B,QAAA,6DACAF,WAAA,GACAtE,MAAA,KACA,EACA,cACAwE,QAAA,kCACAxE,MAAA,UACA,EACA,eACAwE,QAAA,sCACAxE,MAAA,UACA,EACA0iC,OAAA,CACAl+B,QACA,qEACAF,WAAA,GACAtE,MAAA,UACA,EACA2iC,KAAA,CACAn+B,QACA,oEACAxE,MAAA,UACA,EACA6vB,KAAA,CACArrB,QAAA,6BACAxE,MAAA,UACA,EACA,aACAwE,QACA,qFACAF,WAAA,GACAC,OAAA,GACAvE,MAAA,QACA,EACAgxB,KAAA,CACAxsB,QAAA/D,OACA,4DAA+DhT,MAAA,CAC/D,IACA,4FACAA,MAAA,CACA,IACA,uKACAA,MAAA,CACA,KAEAuS,MAAA,QACA,EACA4iC,KAAA,CACAp+B,QACA,qEACAxE,MAAA,QACA,EACA5T,QAAA,2BACAF,OAAA,CACAsY,QACA,yGACAF,WAAA,EACA,EACA6gB,SAAA,6BACAC,YAAA,UACA,CACA,CA1HAljD,EAAAC,OAAA,CAAAy0B,EACAA,EAAApK,WAAA,OACAoK,EAAAiP,OAAA,oCCCA,SAAAg9B,EAAAxjC,CAAA,EACAA,EAAA+B,SAAA,CAAAyhC,OAAA,EACAz0C,QAAA,uCACApqB,OAAA,CACAwgC,QAAA,kBACA9C,OAAA,CACAmkB,SAAA,aACAmD,OAAA,6CAEAzkB,OAAA,EACA,EACArY,OAAA,sCACA88B,OAAA,CACAxkB,QAAA,iEACAF,WAAA,GACA5C,OAAA,CACA78B,QAAA,SACA,CACA,EACA2pC,MAAA,CACAhK,QAAA,iDACAF,WAAA,GACAtE,MAAA,QACA,EACA+lB,SAAA,CACAvhB,QAAA,6CACAF,WAAA,EACA,EACAz/B,QAAA,CACA,CACA2/B,QACA,sRACAF,WAAA,EACA,EACA,eACA,CACAlY,QAAA,CACAoY,QAAA,+BACAF,WAAA,EACA,EACAuhB,SAAA,CACArhB,QAAA,qBACAF,WAAA,EACA,EACA6gB,SAAA,CACA3gB,QACA,uH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,KAAA,CACA,CAEA28B,QACA,uFACAF,WAAA,GACAtE,MAAA,SACA,EACA,CAIAwE,QAAA,qBACAD,OAAA,GACA7C,OAAA,CACA,cACA8C,QAAA,qDACAF,WAAA,EACA,EACA,iBACAE,QAAA,WACAF,WAAA,EACA,EACA8gB,YAAA,KACA,CACA,EACA,CACArtB,MAAA,CACA,CAKAyM,QAAA,0CACAxE,MAAA,YACA0B,OAAA,CACA0jB,YAAA,WACA,CACA,EACA,CAGA5gB,QAAA,aACAF,WAAA,GACAtE,MAAA,YACA0B,OAAA,CACA0jB,YAAA,SACA,CACA,EACA,CACAv/B,GAAA,CAKA2e,QAAA,wCACAF,WAAA,GACAtE,MAAA,aACA,EACAoF,KAAA,CAKAZ,QAAA,mCACAF,WAAA,GACAtE,MAAA,aACA,EACA,iBAKAwE,QACA,qHACA9C,OAAA,CACAmkB,SAAA,CACArhB,QAAA,gBACAF,WAAA,EACA,EACAtgC,OACA,+DACAohD,YAAA,gBACA,EACAplB,MAAA,KACA,EACAlnB,KAAA,CAIA0rB,QAAA0+B,EACA,kGACAz1C,MAAA,EAEA6W,WAAA,GACAC,OAAA,GACA7C,OAAA,CACAzV,QAAA,CACAuY,QAAA,sBACAF,WAAA,GACA5C,OAAA,EACA,EACA0jB,YAAA,SACA,CACA,EACApsC,OAAA,CAIAwrB,QAAA0+B,EACA,kGACAz1C,MAAA,EAEA6W,WAAA,GACAC,OAAA,GACA7C,OAAA,CACAzV,QAAA,CACAuY,QAAA,oBACAF,WAAA,GACA5C,OAAA,EACA,EACA0jB,YAAA,MACA,CACA,EACAme,OAAA,CAIA/+B,QAAA0+B,EAAA,2BAAAz1C,MAAA,EACA6W,WAAA,GACAC,OAAA,GACA7C,OAAA,CACAzV,QAAA,CACAuY,QAAA,uBACAF,WAAA,GACA5C,OAAA,EACA,EACA0jB,YAAA,KACA,CACA,EACA,gBAGA5gB,QACA,mEACAF,WAAA,GACAC,OAAA,GACAvE,MAAA,oBAEAooB,IAAA,CAIA5jB,QAAA0+B,EACA,mGACAz1C,MAAA,EAEA6W,WAAA,GACAC,OAAA,GACA7C,OAAA,CACAyjB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AF,WAAA,GACAtE,MAAA,UACA,EACA,CAGAwE,QACA,qGACAF,WAAA,GACAtE,MAAA,UACA,EACA,CAEAwE,QACA,mEACAF,WAAA,GACAtE,MAAA,UACA,EACA,CAEAwE,QACA,uFACAF,WAAA,GACAtE,MAAA,UACA,EACA,CACAwO,MAAA,CACAhK,QAAA,0CACAF,WAAA,GACAC,OAAA,GACAvE,MAAA,UACA,EACA5B,KAAA,CACAoG,QAAA,gEACAxE,MAAA,QACA,EACAh8B,OAAA,CACAwgC,QAAA,cACAD,OAAA,EACA,EACA4hB,WAAA,CACA3hB,QACA,gGACAxE,MAAA,WACA,EACAn7B,QAAA,CAEA,CACA2/B,QACA,yOACAF,WAAA,GACAC,OAAA,EACA,EACA,CACAC,QACA,2KACAF,WAAA,GACAC,OAAA,EACA,EACA,CACApgC,OAAA,cACAghD,SAAA,CACA3gB,QAAA,gCACAF,WAAA,EACA,EACA8gB,YAAA,SACA,CACA,CApHAljD,EAAAC,OAAA,CAAAijE,EACAA,EAAA54C,WAAA,WACA44C,EAAAv/B,OAAA,oCCCA,SAAAw/B,EAAAhmC,CAAA,EACAA,EAAA+B,SAAA,CAAAikC,KAAA,EACAj3C,QAAA,OACAvpB,QACA,s0BACAslD,UAAA,CACA3lB,QAAA,cACAxE,MAAA,UACA,EACA6lB,SAAA,aACA35B,OAAA,gBACAi5B,SAAA,mBACAC,YAAA,uBACA,CACA,CAjBAljD,EAAAC,OAAA,CAAAkjE,EACAA,EAAA74C,WAAA,SACA64C,EAAAx/B,OAAA,oCCCA,SAAAy/B,EAAAjmC,CAAA,MAmQAkmC,EAAAA,EAAA,MAAAC,CA/PA,MACA,MACA,OACA,MACA,MACA,OACA,MACA,OACA,OACA,OACA,OACA,MACA,UACA,QACA,QACA,cACA,OACA,SACA,QACA,SACA,iBACA,aACA,QACA,cACA,OACA,aACA,QACA,gBACA,cACA,gBACA,cACA,WACA,aACA,QACA,SACA,eACA,OACA,OACA,OACA,OACA,UACA,OACA,eACA,SACA,YACA,OACA,QACA,QACA,WACA,QACA,YACA,SACA,QACA,OACA,aACA,UACA,cACA,aACA,SACA,aACA,SACA,WACA,eACA,SACA,cACA,SACA,qBACA,gBACA,UACA,SACA,SACA,OACA,kBACA,WACA,UACA,eACA,eACA,UACA,OACA,QACA,QACA,eACA,aACA,SACA,UACA,mBACA,OACA,eACA,QACA,SACA,OACA,YACA,mBACA,OACA,kBACA,eACA,iBACA,QACA,SACA,QACA,SACA,SACA,OACA,cACA,YACA,QACA,OACA,UACA,gBACA,QACA,WACA,OACA,iBACA,eACA,kBACA,gBACA,cACA,aACA,aACA,oBACA,UACA,MACA,OACA,UACA,SACA,SACA,YACA,MACA,OACA,QACA,UACA,MACA,gBACA,gBACA,aACA,WACA,YACA,gBACA,WACA,eACA,QACA,QACA,OACA,WACA,MACA,OACA,SACA,MACA,OACA,SACA,OACA,OACA,gBACA,QACA,OACA,eACA,UACA,OACA,SACA,YACA,MACA,OACA,iBACA,MACA,OACA,QACA,oBACA,SACA,UACA,aACA,gBACA,cACA,cACA,cACA,gBACA,SACA,SACA,UACA,iBACA,aACA,mBACA,eACA,YACA,QACA,OACA,SACA,SACA,QACA,aACA,cACA,cACA,eACA,YACA,UACA,eACA,YACA,YACA,OACA,UACA,OACA,UACA,UACA,aACA,YACA,SACA,UACA,cACA,YACA,WACA,WACA,QACA,SACA,QACA,QACA,QACA,OACA,SACA,WACA,YACA,gBACA,aACA,YACA,QACA,cACA,YACA,cACA,WACA,WACA,QACA,OACA,aACA,OACA,WACA,SACA,aACA,eACA,WACA,CAeA9+C,GAAA,UAAAy+B,CAAA,EACA,OAAAA,EAAAtlC,OAAA,WACA,GACAI,IAAA,aACAof,EAAA+B,SAAA,CAAAkkC,OAAA,CAAAjmC,EAAA+B,SAAA,CAAArX,MAAA,kBACAsV,EAAA+B,SAAA,CAAAK,YAAA,qBACAx/B,SAAA,CACAuiC,QACA,oHACAD,OAAA,GACA7C,OAAA,CACA78B,QAAA47B,OAAA,YAAA8kC,EAAA,YACA,CACA,CACA,GACAlmC,EAAA+B,SAAA,CAAAkkC,OAAA,CAAAthE,MAAA,CAAA09B,MAAA,EACA0mB,IAAA,CAEA5jB,QACA,yEACAD,OAAA,EACA,EACApgC,OAAA,CAEAqgC,QACA,8EACAD,OAAA,EACA,CACA,EACAlF,EAAA+B,SAAA,CAAAK,YAAA,uBACA+lB,QAAA,CACAhjB,QAAA/D,OAAA,8GACAT,MAAA,SACA,CACA,EAEA,CAvSA99B,EAAAC,OAAA,CAAAmjE,EACAA,EAAA94C,WAAA,WACA84C,EAAAz/B,OAAA,mCCCA,SAAA4/B,EAAApmC,CAAA,EACAA,EAAA+B,SAAA,CAAAqkC,MAAA,EACAr3C,QAAA,CACAoW,QAAA,6BACAD,OAAA,EACA,EACAvgC,OAAA,CACAwgC,QAAA,cACAD,OAAA,EACA,EACA0pB,aAAA,CACAzpB,QAAA,gBACAF,WAAA,GACAC,OAAA,GACAvE,MAAA,UACA,EACA+lB,SAAA,cACA,aACAvhB,QAAA,WACAxE,MAAA,YACA,EACA9T,OAAA,CACAsY,QACA,qEACAF,WAAA,EACA,EACAz/B,QACA,uXACAsgD,SACA,gFACAC,YAAA,cACA,CACA,CAnCAljD,EAAAC,OAAA,CAAAsjE,EACAA,EAAAj5C,WAAA,UACAi5C,EAAA5/B,OAAA,oCCCA,SAAA6/B,EAAArmC,CAAA,EACAA,EAAA+B,SAAA,CAAAskC,UAAA,EACAt3C,QAAA,OACApqB,OAAA,CACA,CACAwgC,QAAA,iCACAD,OAAA,EACA,EACA,CACAC,QAAA,UACAD,OAAA,GACA7C,OAAA,CACA6oB,cAAA,CACA/lB,QAAA,cACA9C,OAAA,CACAgkC,WAAA,CACAlhC,QAAA,sBACAF,WAAA,GACA5C,OAAA,IACA,EACA,6BACA8C,QAAA,SACAxE,MAAA,aACA,CACA,CACA,CACA,CACA,EACA,CACA,cACA,CACAwE,QAAA,iCACAF,WAAA,EACA,EACA,aACA,CACAz/B,QACA,kJACAghD,SAAA,SACA5jD,SAAA,CACAuiC,QAAA,gCACAF,WAAA,EACA,EACAyhB,SAAA,CACAvhB,QACA,27BACA9C,OAAA,CACA0jB,YAAA,IACA,CACA,EACAh5B,QAAA,qBACAF,OACA,6FACAi5B,SACA,2EACAC,YAAA,eACA,EACA/lB,EAAA+B,SAAA,CAAAskC,UAAA,CAAA1hE,MAAA,IAAA09B,MAAA,CAAA6oB,aAAA,CAAA7oB,MAAA,CAAAgkC,UAAA,CAAAhkC,MAAA,CACArC,EAAA+B,SAAA,CAAAskC,UAAA,CACArmC,EAAA+B,SAAA,CAAAukC,IAAA,CAAAtmC,EAAA+B,SAAA,CAAAskC,UAAA,CA9DAxjE,EAAAC,OAAA,CAAAujE,EACAA,EAAAl5C,WAAA,cACAk5C,EAAA7/B,OAAA,0CCCA,SAAA+/B,EAAAvmC,CAAA,EAEAA,EAAA+B,SAAA,CAAAwkC,IAAA,EACAx3C,QAAA,CACAoW,QAAA,8BACAD,OAAA,EACA,EACAvgC,OAAA,CACAwgC,QAAA,yCACAD,OAAA,EACA,EACA8iB,WAAA,CACA7iB,QAAA,4BACAD,OAAA,EACA,EACA4lB,UAAA,WAEAtlD,QACA,wuCACAkhD,SAAA,wBACA35B,QAAA,sBACAF,OAAA,6DACAi5B,SACA,yIACAC,YAAA,eACA,CACA,CA7BAljD,EAAAC,OAAA,CAAAyjE,EACAA,EAAAp5C,WAAA,QACAo5C,EAAA//B,OAAA,oCCCA,SAAAggC,EAAAxmC,CAAA,EACAA,EAAA+B,SAAA,CAAAykC,IAAA,CAAAxmC,EAAA+B,SAAA,CAAArX,MAAA,eAEAllB,QACA,iXACA,GACAw6B,EAAA+B,SAAA,CAAAK,YAAA,oBAEA0kB,WAAA,CACA3hB,QAAA,QACAxE,MAAA,UACA,CACA,GACAX,EAAA+B,SAAA,CAAA0kC,KAAA,CAAAzmC,EAAA+B,SAAA,CAAAykC,IAAA,CAhBA3jE,EAAAC,OAAA,CAAA0jE,EACAA,EAAAr5C,WAAA,QACAq5C,EAAAhgC,OAAA,2CCCA,SAAAkgC,EAAA1mC,CAAA,EACAA,EAAA+B,SAAA,qBACAhT,QAAA,gCACAvpB,QAAA,4CACAunB,QAAA,qBACA25B,SAAA,+BACA75B,OAAA,UACAi5B,SAAA,SACAC,YAAA,cACA,CACA,CAbAljD,EAAAC,OAAA,CAAA4jE,EACAA,EAAAv5C,WAAA,kBACAu5C,EAAAlgC,OAAA,oCCCA,SAAAmgC,EAAA3mC,CAAA,MAEA4mC,EACAC,EAAAA,EAAA,CACA,iBACA1hC,QAAA,oBACAxE,MAAA,UACA,EACA,oBACAwE,QAAA,WACAF,WAAA,GACAtE,MAAA,UACA,EACA,uBACA,CACAwE,OAAA,CAbAyhC,EAAA,qBAcAjmC,MAAA,UACA,EACA,CACAwE,QAAA,aACAF,WAAA,GACAC,OAAA,GACAvE,MAAA,UACA,EACA,CACAwE,QAAA,cACAxE,MAAA,UACA,EACA,EAEAX,EAAA+B,SAAA,CAAA4kC,UAAA,EAEA53C,QAAA,CACAoW,QAAA,gBACAF,WAAA,EACA,EAGA6hC,OAAA,CACA3hC,QAAA,QACAxE,MAAA,MACA0B,OAAA,CACA98B,MAAA,CACA4/B,QAAA,gCACAF,WAAA,GACAtE,MAAA,UACA,EACA3jB,IAAA,CACAmoB,QAAA,UACAF,WAAA,EACA,CACA,CACA,EAEAkK,MAAA,CACAhK,QAAA,8BACAF,WAAA,GACAtE,MAAA,OACA,EACAkmB,QAAA,CACA1hB,QAAA,8BACAF,WAAA,GACAtE,MAAA,WACA0B,OAAA,CACA,uBACA57B,WAAA,CACA0+B,QAAAyhC,EACA1hC,OAAA,GACAvE,MAAA,UACA,EACA,kBACAwE,QAAA,eACA9C,OAAAwkC,CACA,CACA,CACA,EAEA,gBACA1hC,QAAA,wBACAF,WAAA,GACAtE,MAAA,cACA0B,OAAA,CAEA,6BACA57B,WAAA,CACA0+B,QAAAyhC,EACA1hC,OAAA,GACAvE,MAAA,UACA,EACA,kBACAwE,QAAA,2BACAD,OAAA,GACAvE,MAAA,WACA0B,OAAA,CACA,kBACA8C,QAAA,iCACAF,WAAA,GACA5C,OAAAwkC,CACA,EACA,sBACA1hC,QAAA,iBACAF,WAAA,GACAtE,MAAA,MACA,EACA,0BACA,CACA,CACA,CACA,CACA,EACAX,EAAA+B,SAAA,CAAAglC,IAAA,CAAA/mC,EAAA+B,SAAA,YAMA/B,EAAAoD,KAAA,CAAA9B,GAAA,2BAAAxjB,CAAA,EAGA2iB,EADAA,MAAA,CACAzY,OAAA,UAAA6H,CAAA,EACA,oBAAAA,GAAAA,iBAAAA,EAAAptB,IAAA,EACA,IAAAmqB,EAAAo6C,SAgCAA,EAAAn3C,CAAA,QACA,iBAAAA,EACAA,EACQnP,MAAAC,OAAA,CAAAkP,GACRA,EAAAxI,GAAA,CAAA2/C,GAAApmD,IAAA,KAEAomD,EAAAn3C,EAAAjD,OAAA,CAEA,EAxCAiD,EACA,EAAAo3C,SAWAzjE,CAAA,EAGA,QADAg+B,EAAA,GACAzgB,EAAA,EAAsBA,EAAAvd,EAAAC,MAAA,CAAkBsd,IAAA,CACxC,IAAAmmD,EAAA1jE,CAAA,CAAAud,EAAA,CACAomD,EAAA/O,OAAA1uC,OAAA,CAAAw9C,GACA,GAAAC,KAAAA,GACA,GAAAA,EAAA,KACA3lC,EAAA1/B,IAAA,CAAAqlE,EAAA,QACY,GAAA3lC,EAAAt/B,GAAA,KAAAilE,EACZ,SAGA,CACA,OAAA3lC,IAAAA,EAAA/9B,MAAA,EAzBAmpB,KACAiD,EAAAptB,IAAA,YACAotB,EAAAjD,OAAA,CAAAA,EAEA,CACA,EACA,EAmCA,CAtKA/pB,EAAAC,OAAA,CAAA6jE,EACAA,EAAAx5C,WAAA,cACAw5C,EAAAngC,OAAA,oCCCA,SAAA4gC,EAAApnC,CAAA,EACAA,EAAA+B,SAAA,CAAAqlC,IAAA,EACAr4C,QAAA,QACApqB,OAAA,oCACAwqC,MAAA,CACAhK,QAAA,kCACAF,WAAA,GACAtE,MAAA,UACA,EACAn7B,QAAA,CACA,0BACA,CACA2/B,QAAA,8BACAF,WAAA,EACA,EACA,8BACA,4BACA,CACAugB,SAAA,CACArgB,QACA,0GACAxE,MAAA,UACA,EACA9T,OACA,+MACAi5B,SAAA,sBACA,CACA,CA9BAjjD,EAAAC,OAAA,CAAAskE,EACAA,EAAAj6C,WAAA,QACAi6C,EAAA5gC,OAAA,oCCCA,SAAA6gC,EAAArnC,CAAA,EACAA,EAAA+B,SAAA,CAAAslC,IAAA,EACAt4C,QAAA,CACAoW,QAAA,MACAD,OAAA,EACA,EACAy7B,SAAA,CACAx7B,QACA,0HACAF,WAAA,GACAtE,MAAA,QACA,EACA3jB,IAAA,CACAmoB,QAAA,6DACAF,WAAA,GACAtE,MAAA,QACA,EACA9T,OAAA,CACAsY,QACA,mHACAF,WAAA,EACA,EACAlY,QAAA,CACAoY,QAAA,wDACAF,WAAA,EACA,EACA+5B,KAAA,CACA75B,QAAA,2CACAF,WAAA,GACAtE,MAAA,SACA,EACAh8B,OAAA,CACAwgC,QACA,qHACAF,WAAA,GACAC,OAAA,EACA,EACAoiC,QAAA,CACAniC,QACA,sHACAF,WAAA,GACAtE,MAAA,QACA,EACAolB,YAAA,eACA,CACA,CAhDAljD,EAAAC,OAAA,CAAAukE,EACAA,EAAAl6C,WAAA,QACAk6C,EAAA7gC,OAAA,oCCCA,SAAA+gC,EAAAvnC,CAAA,EACAA,EAAA+B,SAAA,CAAAwlC,KAAA,EACAx4C,QAAA,oCACApqB,OAAA,CACAwgC,QAAA,mDACAD,OAAA,GACA7C,OAAA,CACA,4BACA,CACA,EACA1/B,UAAA,CACAwiC,QAAA,0CACAF,WAAA,EACA,EACAE,QAAA,CACAA,QACA,qHACAF,WAAA,GACA5C,OAAA,CACA,gBACA8C,QAAA,qBACAxE,MAAA,YACA,EACA6mC,OAAA,CACAriC,QAAA,SACA9C,OAAA,CACA,cACA8C,QAAA,kBACAxE,MAAA,UACA,EACAolB,YAAA,QACAD,SAAA,CACA3gB,QAAA,IACAxE,MAAA,mBACA,CACA,CACA,CACA,CACA,EACAvV,OAAA,CACA+Z,QAAA,iDACAxE,MAAA,WACAsE,WAAA,EACA,EACAz/B,QACA,sEACA,oBACA2/B,QACA,kIACA9C,OAAA,CACA,yBACA8C,QAAA,mBACAxE,MAAA,SACA,EACA8mC,WAAA,CACAtiC,QAAA,mCACAxE,MAAA,QACA,EACA,yBACAwE,QAAA,kBACAxE,MAAA,SACA,EACAolB,YAAA,OACA,CACA,EACA0hB,WAAA,CACAtiC,QAAA,mCACAxE,MAAA,QACA,EACAmlB,SAAA,CACA,CACA3gB,QAAA,IACAxE,MAAA,aACA,EACA,CACAwE,QAAA,IACAxE,MAAA,aACA,EACA,CACAwE,QAAA,IACAxE,MAAA,WACA,EACA,CACAwE,QAAA,KACAxE,MAAA,aACA,EACA,CACAwE,QAAA,QACAxE,MAAA,YACA,EACA,CACAwE,QAAA,OACAxE,MAAA,WACA,EACA,CACAwE,QAAA,OACAxE,MAAA,UACA,EACA,CACAwE,QAAA,UACAxE,MAAA,MACA,EACA,CACA,iBACA,CACAwE,QACA,2HACAF,WAAA,GACA5C,OAAA,CACA,cACA8C,QAAA,kBACAxE,MAAA,UACA,EACA36B,MAAA,GACA,CACA,EACA,CACAm/B,QAAA,sBACA9C,OAAA,CACA,cACA8C,QAAA,kBACAxE,MAAA,UACA,EACA36B,MAAA,GACA,CACA,EACA,CACA+/C,YAAA,UACArjD,KAAA,iBACA,CACA,CArIAG,EAAAC,OAAA,CAAAykE,EACAA,EAAAp6C,WAAA,SACAo6C,EAAA/gC,OAAA,oCCCA,SAAAkhC,EAAA1nC,CAAA,EAEA,IAAAwmB,EAAAA,EACA,gEACAxmB,EAAA+B,SAAA,CAAA2lC,KAAA,EACA34C,QAAA,CACAoW,QAAA,iBACAF,WAAA,GACAC,OAAA,EACA,EACAkkB,UAAA,CACAjkB,QACA,0GACAF,WAAA,GACAC,OAAA,GACA7C,OAAA,CACA19B,OAAA,CACAwgC,QACA,gEACAF,WAAA,GACAC,OAAA,GACA7C,OAAA,CACA1f,OAAA,CACAwiB,QAAA,cACAxE,MAAA,QACA,EACA6lB,SAAAA,CACA,CACA,EACAz3B,QAAA,CACAoW,QAAA,UACAF,WAAA,GACAC,OAAA,EACA,EACA1/B,QAAA,CACA2/B,QAAA,OACAD,OAAA,EACA,EAEAnY,QAAA,CACAoY,QAAA,uBACAF,WAAA,EACA,EACApY,OAAA,CACAsY,QAAA,uBACAF,WAAA,EACA,EACAuhB,SAAAA,CACA,CACA,EACAT,YAAA,OACA,CAEA,CAxDAljD,EAAAC,OAAA,CAAA4kE,EACAA,EAAAv6C,WAAA,SACAu6C,EAAAlhC,OAAA,oCCCA,SAAAmhC,EAAA3nC,CAAA,EACAA,EAAA+B,SAAA,CAAA4lC,GAAA,EACA54C,QAAA,CACAoW,QAAA,MACAD,OAAA,EACA,E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QAAA,yBACAD,OAAA,GACAvE,MAAA,SACA,EACAn7B,QACA,gQACAkhD,SAAA,CACA,2BACA,CACAvhB,QAAA,yBACAF,WAAA,EACA,EACA,CACApY,OACA,2EACA25B,SAAA,oBACA,uCACAV,SACA,+FACAC,YAAA,gBACA,CACA,CAnCAljD,EAAAC,OAAA,CAAAwlE,EACAA,EAAAn7C,WAAA,MACAm7C,EAAA9hC,OAAA,oCCCA,SAAA+hC,EAAAvoC,CAAA,EACAA,EAAA+B,SAAA,CAAAwmC,MAAA,EACAx5C,QAAA,0BACApqB,OAAA,CACAwgC,QAAA,wBACAD,OAAA,EACA,EAIA1/B,QA+BA47B,OAAA,SALAimB,CAxBA,aACA,QACA,WACA,UACA,SACA,QACA,eACA,SACA,SACA,UACA,WACA,UACA,cACA,SACA,MACA,QACA,KACA,QACA,KACA,OACA,SACA,QACA,QACA,CAEAhgC,GAAA,UAAA7hB,CAAA,EACA,OAAAA,EAAAgd,KAAA,KAAA5B,IAAA,MACA,GACAA,IAAA,MACA,QAEA8lC,SAAA,4BACA75B,OAAA,CAEAsY,QACA,gHACAF,WAAA,EACA,EACA6gB,SACA,sLACAC,YAAA,iBACA,CACA,CAzDAljD,EAAAC,OAAA,CAAAylE,EACAA,EAAAp7C,WAAA,UACAo7C,EAAA/hC,OAAA,oCCCA,SAAAgiC,EAAAxoC,CAAA,MAEAwoC,EAAAA,EAAAxoC,EAAA+B,SAAA,CAAAymC,MAAA,CAAAxoC,EAAA+B,SAAA,CAAArX,MAAA,WACAllB,QAAA,CACA2/B,QACA,+GACAF,WAAA,EACA,EACAuhB,SAAA,CACArhB,QAAA,4DACAF,WAAA,GACA5C,OAAA,CACA0jB,YAAA,OACA,CACA,EACAW,SAAA,CACAvhB,QAAA,iDACAF,WAAA,GACA5C,OAAA,CACA78B,QAAA,CACA2/B,QAAA,oBACAF,WAAA,EACA,EACA8gB,YAAA,OACA,CACA,EACApjC,OAAA,CACAwiB,QAAA,qCACAxE,MAAA,SACA,EACAolB,YAAA,aACA,GACAyiB,EAAAxoC,EAAA+B,SAAA,CAAAK,YAAA,qBACA,kBACA+C,QAAA,UACAF,WAAA,GACAtE,MAAA,SACA,EACAl6B,WAAA,CAEA0+B,QAAA,uDACAD,OAAA,GACAD,WAAA,GACA5C,OAAA,CACA19B,OAAA,CACAwgC,QAAA,2CACAF,WAAA,EACA,EACAz/B,QAAAgjE,EAAAhjE,OAAA,CACAghD,SAAAgiB,EAAAhiB,QAAA,CACAE,SAAA8hB,EAAA9hB,QAAA,CACA35B,QAAA,qBACAF,OAAA,kDACAlK,OAAA6lD,EAAA7lD,MAAA,CACAmjC,SACA,iGACAC,YAAAyiB,EAAAziB,WAAA,CAEA,CACA,GACA/lB,EAAA+B,SAAA,CAAAK,YAAA,CACA,SACA,cACA,CACA37B,WAAA+hE,EAAA/hE,UAAA,CACAjB,QAAAgjE,EAAAhjE,OAAA,CACAghD,SAAAgiB,EAAAhiB,QAAA,CACAE,SAAA8hB,EAAA9hB,QAAA,CACA/jC,OAAA6lD,EAAA7lD,MAAA,CACA,sBACAwiB,QAAAqjC,EAAAziB,WAAA,CACAplB,MAAA,aACA,CACA,EACA6nC,EAAA,IAAAnmC,MAAA,eAGA,CAhFAx/B,EAAAC,OAAA,CAAA0lE,EACAA,EAAAr7C,WAAA,UACAq7C,EAAAhiC,OAAA,oCCCA,SAAAiiC,EAAAzoC,CAAA,EAKAA,EAAA+B,SAAA,CAAA0mC,MAAA,EACArf,UAAA,CACAjkB,QAAA,iBACAD,OAAA,GACAvE,MAAA,sBAEA5R,QAAA,CACAoW,QAAA,uCACAD,OAAA,EACA,EACAvgC,OAAA,CACAwgC,QAAA,wDACAD,OAAA,EACA,EACAwjC,IAAA,CACAvjC,QAAA,qCACAF,WAAA,GACAC,OAAA,GACA7C,OAAA,IACA,EACA78B,QAAA,CACA,CAEA2/B,QACA,iTACAF,WAAA,EACA,EACA,CAEAE,QAAA,+CACAF,WAAA,EACA,EACA,CAEAE,QACA,mKACAF,WAAA,EACA,EACA,CAEAE,QACA,mhBACAF,WAAA,EACA,EACA,CACApY,OAAA,CAEA,0BACA,iCACA,CACAi5B,SAAA,CACA,+CACA,CACA3gB,QACA,0EACAF,WAAA,EACA,EACA,CACA8gB,YAAA,wBACA,EACA/lB,EAAA+B,SAAA,CAAA0mC,MAAA,CAAAC,GAAA,CAAArmC,MAAA,CAAArC,EAAA+B,SAAA,CAAArX,MAAA,WACAg+C,IAAAhqD,KAAAA,EACAlZ,QAAAkZ,KAAAA,EACAonC,SAAApnC,KAAAA,CACA,GACAshB,EAAA+B,SAAA,CAAA4mC,YAAA,CAAA3oC,EAAA+B,SAAA,CAAA0mC,MAAA,CAzEA5lE,EAAAC,OAAA,CAAA2lE,EACAA,EAAAt7C,WAAA,UACAs7C,EAAAjiC,OAAA,kDCCA,SAAAoiC,EAAA5oC,CAAA,MAGAs/B,EACA78D,EAMAmmE,EA8DArhB,EArEA+X,EAAA,2CAAAlxC,MAAA,CACA3rB,EAAA,kCAAA2rB,MAAA,CAAA5N,OAAA,CACA,YACA,WACA,OAAA8+C,CACA,GAEAsJ,EAAA5oC,EAAA+B,SAAA,CAAA6mC,SAAA,EACA75C,QAAA,0BACApqB,OAAA,CACAwgC,QAAA,8CACAD,OAAA,EACA,EACA,cACA,CACAC,QAAA/D,OACA,+BAAAhT,MAAA,CAAA5N,OAAA,CACA,UACA,WACA,OAAA/d,CACA,GAEA,KAEAwiC,WAAA,GACA5C,OAAA,IACA,EACA,CACA8C,QAAA/D,OACA,oBAAAhT,MAAA,CAAA5N,OAAA,sBACA,OAAA/d,CACA,GACA,KAEA4/B,OAAA,IACA,EACA,CACA8C,QAAA/D,OACA,eAAAhT,MAAA,CAAA5N,OAAA,sBACA,OAAA/d,CACA,IAEAwiC,WAAA,GACA5C,OAAA,IACA,EACA,CACA78B,QAAA,CACA2/B,QACA,mIACAF,WAAA,EACA,EACAlY,QAAA,CACAoY,QAAA,8BACAF,WAAA,EACA,EACAkjB,QAAA,CACAhjB,QAAA,4DACAF,WAAA,EACA,EACAyhB,SAAA,iBACA75B,OAAA,CAEA,6BACA,2CACA,CACAi5B,SACA,2EACAC,YAAA,0BACA,EACAwB,EAAA,CACA,UACA,UACA,UACA,WACA,cACA,CAAAxH,MAAA,UAAA8oB,CAAA,CAAA7rD,CAAA,EAEA,OADA6rD,CAAA,CAAA7rD,EAAA,CAAA4rD,CAAA,CAAA5rD,EAAA,CACA6rD,CACA,EAAK,IACLD,CAAA,eAAA5gD,OAAA,UAAAnC,CAAA,EACAA,EAAAwc,MAAA,CAAAklB,CACA,EAEA,CAzFA1kD,EAAAC,OAAA,CAAA8lE,EACAA,EAAAz7C,WAAA,aACAy7C,EAAApiC,OAAA,oCCCA,SAAAsiC,EAAA9oC,CAAA,EACAA,EAAA+B,SAAA,CAAA+mC,MAAA,EACAnkE,OAAA,UACAa,QAAA,CACA2/B,QACA,qFACAF,WAAA,GACAC,OAAA,GACA7C,OAAA,CACA78B,QAAA,aACA27B,SAAA,CACAgE,QAAA,mBACAF,WAAA,GACA5C,OAAA,CACA0jB,YAAA,UACAnjD,SAAA,QACA,CACA,EACA,WACAuiC,QAAA,kBACAF,WAAA,GACA5C,OAAA,CACAyoB,UAAA,CACA3lB,QAAA,UACAxE,MAAA,UACA,EACAolB,YAAA,WACA,CACA,CACA,CACA,EACAD,SAAA,IACAijB,MAAA,CACA5jC,QACA,uEACAD,OAAA,GACA7C,OAAA,CACAqkB,SAAA,SACA9jD,SAAA,CACAuiC,QAAA,iBACAF,WAAA,EACA,EACAtgC,OAAA,UACAohD,YAAA,QACAD,SAAA,GACA,CACA,EACAC,YAAA,OACAl5B,OAAA,CACAsY,QAAA,4BACAF,WAAA,EACA,EACAlY,QAAA,QACA,EACAiT,EAAA+B,SAAA,CAAAinC,EAAA,CAAAhpC,EAAA+B,SAAA,CAAA+mC,MAAA,CAzDAjmE,EAAAC,OAAA,CAAAgmE,EACAA,EAAA37C,WAAA,UACA27C,EAAAtiC,OAAA,wCCCA,SAAAyiC,EAAAjpC,CAAA,EACAA,EAAA+B,SAAA,CAAAknC,UAAA,EACAl6C,QAAAqS,OACA,CAEA,mBAAAhT,MAAA,CACA,cAAoBA,MAAA,CACpB,4DAAAA,MAAA,CACA,mBAAAA,MAAA,CACA,CAAAxN,IAAA,OAEAjc,OAAA,CACAwgC,QAAA,kDACAD,OAAA,EACA,EACAshB,SAAA,OACA,uBACArhB,QAAA,2CACAF,WAAA,GACAtE,MAAA,UACA,EACA,cACAwE,QACA,iIACAF,WAAA,GACA5C,OAAA,CACA0jB,YAAA,GACA,CACA,EACAvgD,QACA,gYACA,oBACA2/B,QAAA,sBACAxE,MAAA,UACA,EACA+lB,SAAA,sBACA35B,QAAA,sBACAF,OAAA,oBACAi5B,SAAA,8BACAC,YAAA,aACA,EACA/lB,EAAA+B,SAAA,CAAAmnC,KAAA,CAAAlpC,EAAA+B,SAAA,CAAAknC,UAAA,CA5CApmE,EAAAC,OAAA,CAAAmmE,EACAA,EAAA97C,WAAA,cACA87C,EAAAziC,OAAA,2CCCA,SAAA2iC,EAAAnpC,CAAA,EAEA,IAAAo4B,EAAAA,EACA,6GACAhqC,MAAA,CACA4R,EAAA+B,SAAA,CAAAonC,IAAA,EACAp6C,QAAA,CACA,CAEAoW,QAAA,2BACAF,WAAA,GACAC,OAAA,EACA,EACA,CACAC,QAAA,gBACAF,WAAA,GACAC,OAAA,EACA,EACA,CAEAvgC,OAAA,CACA,CACAwgC,QAAA/D,OACA,qCAAAhT,MAAA,CACA,MACA,CAEA,mDAAgCA,MAAA,CAEhC,2CAAAA,MAAA,CAIAgqC,EACA,CAAAx3C,IAAA,MACA,KAEAskB,OAAA,EACA,EACA,CACAC,QAAA,mCACAD,OAAA,EACA,EAEA,CACAC,QAAA,wBACAD,OAAA,EACA,EACA,CACAgiB,MAAA,CACA,CACA/hB,QAAA/D,OACA,+BAAAhT,MAAA,CACA,MACA,CAEA,mDAAgCA,MAAA,CAEhC,2CAAAA,MAAA,CAIAgqC,EACA,CAAAx3C,IAAA,MACA,IACA,mBAAAwN,MAAA,EAEA8W,OAAA,EACA,EACA,CACAC,QAAA/D,OACA,yCAAAhT,MAAA,CACA,MACA,CAGA,8EACAA,MAAA,CAEA,sEACAA,MAAA,CAKAgqC,EAAA,MAAAhqC,MAAA,CAAAgqC,EACA,CAAAx3C,IAAA,MACA,IACA,qBAAAwN,MAAA,EAEA6W,WAAA,GACAC,OAAA,EACA,EAIA,CACAC,QACA,4HACAD,OAAA,EACA,EACA,CAEAshB,SAAA,CAEA,sBACA,kBACA,kBACA,sDACA,aAEA,oDACA,CACA4iB,WAAA,CAEAjkC,QAAA,uBACAxE,MAAA,QACA,EACA,YAEAwE,QAAA,kCACAxE,MAAA,QACA,EACA+lB,SAAA,CACAvhB,QAAA,mBACAF,WAAA,EACA,EACAz/B,QACA,6MACAqnB,OACA,8GACAi5B,SACA,gNACAC,YAAA,cACA,CAEA,CA3IAljD,EAAAC,OAAA,CAAAqmE,EACAA,EAAAh8C,WAAA,QACAg8C,EAAA3iC,OAAA,wCCHA,IAAA26B,EAAmB9gE,EAAQ,OAI3B,SAAAgpE,EAAArpC,CAAA,EACAA,EAAAwlB,QAAA,CAAA2b,GACAnhC,EAAA+B,SAAA,CAAAK,YAAA,mBACAknC,KAAA,CACAnkC,QAAA,WACAxE,MAAA,SACA,EACAyE,OACA,uIACA0Q,MAAA,CACA3Q,QAAA,cACA9C,OAAA,CACA78B,QAAA,6BACAugD,YAAA,OACA,CACA,CACA,EACA,CApBAljD,EAAAC,OAAA,CAAAumE,EACAA,EAAAl8C,WAAA,aACAk8C,EAAA7iC,OAAA,wCCHA,IAAA0rB,EAAgC7xD,EAAQ,OAIxC,SAAAihE,EAAAthC,CAAA,MAUAjR,EACAg4B,EAkBAl6B,EAEAi5B,EAEAC,EAyMAwjB,EAMA5kE,EA/OAq7B,EAAAwlB,QAAA,CAAA0M,GASAnjC,EAAA,oCACAg4B,EAAA,CACA,CACA5hB,QAAA,sBACAxE,MAAA,SACA,EACA,CACAwE,QAAA,iCACAD,OAAA,GACAD,WAAA,EACA,EACA,CACAE,QAAA,+CACAD,OAAA,GACAD,WAAA,EACA,EACA,gBACA,gCACA,CACApY,EACA,6IACAi5B,EACA,wFACAC,EAAA,gBACA/lB,EAAA+B,SAAA,CAAAu/B,GAAA,EACA7V,UAAA,CACAtmB,QAAA,6BACAxE,MAAA,WACA,EACA5R,QAAAA,EACAy3B,SAAA,sBACAgjB,QAAA,CACArkC,QACA,oEACAF,WAAA,GACA5C,OAAA,CACA0jB,YAAA,IACA,CACA,EACA,yBACA5gB,QAAA,4DACAF,WAAA,GACAtE,MAAA,YACA,EACA,uBACAwE,QAAA,qCACAF,WAAA,GACAtE,MAAA,UACA,EACAn7B,QAAA,CACA,CACA2/B,QACA,8EACAxE,MAAA,eACAuE,OAAA,GACAD,WAAA,EACA,EACA,CACAE,QACA,sIACAxE,MAAA,YACAuE,OAAA,GACAD,WAAA,EACA,EACA,CACAE,QACA,6IACAxE,MAAA,cACAuE,OAAA,GACAD,WAAA,EACA,EACA,CACAE,QACA,2EACAxE,MAAA,mBACAuE,OAAA,EACA,EACA,CACAC,QAAA,qDACAxE,MAAA,mBACAuE,OAAA,GACAD,WAAA,EACA,EACA,CACAE,QAAA,qCACAxE,MAAA,iBACAuE,OAAA,EACA,EACA,CAEAC,QAAA,sBACAF,WAAA,EACA,EACA,aACA,CAKAE,QACA,8hBACAF,WAAA,EACA,EACA,CACA,iBACAE,QAAA,qCACAF,WAAA,EACA,EACA,cACA,CACAE,QACA,qGACAD,OAAA,GACAD,WAAA,EACA,EACA,CACAE,QAAA,8BACAD,OAAA,GACAD,WAAA,EACA,EACA,CACAE,QAAA,gCACAD,OAAA,EACA,EACA,CACAC,QAAA,gCACAxE,MAAA,6BACAuE,OAAA,GACAD,WAAA,GACA5C,OAAA,CACA0jB,YAAA,IACA,CACA,EACA,CACA5gB,QAAA,kCACAxE,MAAA,6BACAuE,OAAA,GACA7C,OAAA,CACA0jB,YAAA,IACA,CACA,EACA,CACA5gB,QACA,iHACAxE,MAAA,6BACAuE,OAAA,GACAD,WAAA,GACA5C,OAAA,CACA0jB,YAAA,IACA,CACA,EACA,CACA5gB,QAAA,wBACAxE,MAAA,mBACAuE,OAAA,EACA,EACA,CACAC,QAAA,gCACAxE,MAAA,kDACAuE,OAAA,GACA7C,OAAA,CACA0jB,YAAA,IACA,CACA,EACA,CACA5gB,QAAA,wBACAxE,MAAA,iBACAuE,OAAA,EACA,EACA,CACAC,QAAA,gCACAxE,MAAA,gDACAuE,OAAA,GACA7C,OAAA,CACA0jB,YAAA,IACA,CACA,EACA,CACA5gB,QAAA,gCACAxE,MAAA,YACAuE,OAAA,GACAD,WAAA,EACA,EACA,CACAE,QAAA,0CACAxE,MAAA,2CACAuE,OAAA,GACAD,WAAA,GACA5C,OAAA,CACA0jB,YAAA,IACA,CACA,EACA,CACA5gB,QAAA,4CACAxE,MAAA,cACAuE,OAAA,GACAD,WAAA,EACA,EACA,CACAE,QAAA,oDACAxE,MAAA,6CACAuE,OAAA,GACAD,WAAA,GACA5C,OAAA,CACA0jB,YAAA,IACA,CACA,EACA,CACAgB,SAAAA,EACAL,SAAA,CACAvhB,QAAA,+CACAF,WAAA,GACA5C,OAAA,CACA0jB,YAAA,IACA,CACA,EACAnjD,SAAA,CACAuiC,QAAA,aACAF,WAAA,EACA,EACApY,OAAAA,EACAi5B,SAAAA,EACAC,YAAAA,CACA,EAOAphD,EAAA,CACA,CACAwgC,QAAA,sCACAxE,MAAA,gBACAuE,OAAA,GACA7C,OAAA,CACAopB,UAAA,CACAtmB,QAAA,2BACAxE,MAAA,SACA0B,OAAA,CACA0jB,YAAA,cACA,CACA,CACA,CACA,EACA,CACA5gB,QACA,8EACAxE,MAAA,iBACAuE,OAAA,GACA7C,OAAA,CACAopB,UAAA,CACAtmB,QAAA,yCACAxE,MAAA,SACA0B,OAAA,CACA0jB,YAAA,cACA,CACA,EACAmF,aAAA,CAlCAqe,EAAA,CACApkC,QACA,6FACAF,WAAA,GACA5C,OAAArC,EAAA+B,SAAA,CAAAu/B,GAAA,CA+BA,CACA,EACA,CACAn8B,QAAA,yBACAxE,MAAA,yBACAuE,OAAA,EACA,EACA,CACAC,QAAA,yBACAxE,MAAA,uBACAuE,OAAA,EACA,EACA,CACAC,QAAA,yBACAxE,MAAA,uBACAuE,OAAA,GACA7C,OAAA,CACA6oB,cAAAqe,CACA,CACA,EACA,CACAvpC,EAAA+B,SAAA,CAAAK,YAAA,mBACAz9B,OAAAA,EACA+6B,UAAA,CACAyF,QACA,4IACAD,OAAA,GACA7C,OAAA,CACA,qBACA8C,QAAA,uBACAF,WAAA,GAEA5C,OAAA,CACAtT,QAAAA,EACApqB,OAAAA,EACA,wBACA,CACAwgC,QAAA,+BACAxE,MAAA,aACAuE,OAAA,GACAD,WAAA,EACA,EACA,CACAE,QAAA,+BACAxE,MAAA,4CACAuE,OAAA,GACAD,WAAA,GACA5C,OAAA,CACA0jB,YAAA,IACA,CACA,EACA,CACAgB,SAAAA,EACAl6B,OAAAA,EACAi5B,SAAAA,EACAC,YAAAA,CACA,CACA,EACA0F,UAAA,CA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A,aACA9C,OAAA,CACA,aACA8C,QAAA,gCACAxE,MAAA,WACA,EACA,eACAwE,QAAA,qCACAD,OAAA,GACAvE,MAAA,YACA,EACAolB,YAAA,mBACA,CACA,EACA,iBACA,CACA5gB,QAAA,eAEA9C,OAAA,CACA0jB,YAAA,UACA,kBACA5gB,QAAA,+BACAxE,MAAA,QACA,CACA,CACA,EACA,CACAwE,QAAA,mBAEAF,WAAA,GACA5C,OAAA,CACA,kBACA8C,QAAA,+BACAxE,MAAA,QACA,CACA,CACA,EACA,CACAn7B,QAAA,gBAAA6hD,EAAAzmC,IAAA,kBACA8lC,SAAA,wBACA75B,OACA,oFACAi5B,SAAA,mDACAC,YAAA,eACA,CAEA,CArGAljD,EAAAC,OAAA,CAAAknE,EACAA,EAAA78C,WAAA,UACA68C,EAAAxjC,OAAA,oCCCA,SAAAhb,EAAAwU,CAAA,EACAA,EAAA+B,SAAA,CAAAvW,UAAA,EACAuD,QAAA,kBACA,cACAoW,QACA,gGACAF,WAAA,EACA,EACA,mEACA8gB,YAAA,MACA,CACA,CAdAljD,EAAAC,OAAA,CAAA0oB,EACAA,EAAA2B,WAAA,cACA3B,EAAAgb,OAAA,oCCCA,SAAA2jC,EAAAnqC,CAAA,MAEAoqC,EAAAA,EACA,4EACApqC,EAAA+B,SAAA,CAAAooC,QAAA,CAAAnqC,EAAA+B,SAAA,CAAArX,MAAA,UACA,cACA,CACAya,QACA,8DACAF,WAAA,EACA,EACA,CACAE,QACA,6FACAF,WAAA,EACA,EACA,CACAz/B,QACA,2KACAkhD,SAAA,uBACA,GACA1mB,EAAA+B,SAAA,CAAAK,YAAA,wBACA/a,IAAA,CACA8d,QAAA,2DACAxE,MAAA,aACA0B,OAAA,CACA0jB,YAAA,SACAoC,QAAAiiB,CACA,CACA,EACAjiB,QAAAiiB,EACA,yBACAjlC,QAAA,+DACAxE,MAAA,aACA0B,OAAA,CACA0jB,YAAA,IACA,CACA,EACAe,WAAA,CACA3hB,QAAA,4BACAF,WAAA,EACA,CACA,EAEA,CA/CApiC,EAAAC,OAAA,CAAAqnE,EACAA,EAAAh9C,WAAA,YACAg9C,E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AAA,EACAmkB,MAAA,CACA,CACAtjB,QACA,oFACAF,WAAA,GACA5C,OAAA,CACA0jB,YAAA,mBACA,CACA,EACA,CACA5gB,QACA,0FACAF,WAAA,GACA5C,OAAA,CACA0jB,YAAA,OACA,CACA,EACA,CAEA,oBACA5gB,QAAA,wDACAF,WAAA,GACA5C,OAAA,CACAs4B,aAAA,CACAx1B,QAAA,oCACAxE,MAAA,aACA0B,OAAA,CACA0jB,YAAA,SACA,CACA,EACAqD,UAAA,CACAjkB,QAAA,kBACAF,WAAA,GACAtE,MAAA,WACA0B,OAAA,CACA0jB,YAAA,KACA,CACA,CACA,CACA,EACA,eACA,CACA5gB,QAAA,4BACAF,WAAA,GACAtE,MAAA,SACA0B,OAAA,CACA0jB,YAAA,SACA,CACA,EACA,CACA5gB,QAAA,+CACAF,WAAA,GACAtE,MAAA,SACA0B,OAAA,CACA0jB,YAAA,OACA,CACA,EACA,CACAqD,UAAA,CACAjkB,QAAA,yBACAF,WAAA,GACAtE,MAAA,WACA0B,OAAA,CACA0jB,YAAA,KACA,CACA,EACAh3B,QAAA,CAEAoW,QACA,yEACAF,WAAA,EACA,EACAvM,MAAA,CAEA,CACAyM,QACA,gFACA9C,OAAA,CACA0jB,YACA,sFACA6D,UAAA,IACA,CACA,EACA,CACAzkB,QACA,8FACAF,WAAA,GACA5C,OAAA,CACA0jB,YAAA,4CACA6D,UAAA,IACA,CACA,EACA,CACApjC,GAAA,CACA2e,QACA,sFACAF,WAAA,GACAtE,MAAA,aACA,EACA66B,MAAA,CACAr2B,QAAA,6BACAF,WAAA,GACAtE,MAAA,WACA,EACA,uBACAwE,QACA,mLACAF,WAAA,GACAtE,MAAA,QACA,EACA,iBACAwE,QAAA,4DACA9C,OAAA,CACA,6BACA8C,QAAA,MACAxE,MAAA,aACA,CACA,CACA,EACA,wBACAwE,QACA,oFACA9C,OAAA,CACA,6BACA8C,QAAA,wDACAxE,MAAA,aACA,CACA,CACA,EACA,eACAwE,QACA,yFACAF,WAAA,GACAtE,MAAA,aACA,EACA,iBACAwE,QAAA,sCACAF,WAAA,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AA,aACA,EAoCAu9B,IAAA,CACAv9B,QAAA,UACAxE,MAAA,SACA,EACA9T,OAAAA,EACA,mBAAA8gD,EACA5nB,WAAA,CAnBAA,EAAA,qBAoBAphD,MAAA,CAxBAA,EAAA,CACAwgC,QAAA/D,OAAAy4B,GACA30B,OAAA,EACA,CAsBA,EACA6oC,EAAA,CACA5oC,QAAA,gCACA9C,OAAA,CACA78B,QAAA,wBACA6uB,OAAA,IACA05C,OAAA,CACA5oC,QAAA,oBACAxE,MAAA,QACA,CACA,CACA,EACAqtC,EAAA,CACA7oC,QAAA,iDACA9C,OAAA,CACA78B,QAAA,mBACAuoE,OAAA,CACA5oC,QAAA,cACAxE,MAAA,QACA,CACA,CACA,EACAstC,EAAA,CACA9oC,QACA,iLACAF,WAAA,GACAtE,MAAA,SACA,EACAutC,EAAA,CACA/oC,QAAA,gEACAF,WAAA,GACAtE,MAAA,SACA,EACAwtC,EACA,+iCACA//C,MAAA,CACAggD,EAAA,CACAjpC,QAAA/D,OACA,+CAAmDhT,MAAA,CAAA5N,OAAA,CACnD,SACA,WACA,OAAA2tD,CACA,GAEA,KAEAlpC,WAAA,GACA5C,OAAA,CACA78B,QAAA47B,OACA,sBAAAhT,MAAA,CAAA5N,OAAA,qBACA,OAAA2tD,CACA,GACA,KAEAriC,OAAA,CACA3G,QAAA,cACAxE,MAAA,SACA,EACA5R,QAAAA,EACA23B,SAAAonB,EACA,YAAAhvD,CAAA,cACAgnC,SAAAhnC,EAAAgnC,QAAA,CACA1+C,SAAA0X,EAAA4jD,GAAA,CACA71C,OAAAA,EACA,mBAAA8gD,EACA5nB,YAAAA,EACAphD,OAAAA,CACA,CACA,EACA0iD,EAAA,CACAliB,QACA,yxBACAF,WAAA,EACA,EACAjF,EAAA+B,SAAA,CAAA2rC,GAAA,EACAW,UAAA,CACAlpC,QAAA,uDACAF,WAAA,GACAtE,MAAA,SACA0B,OAAA,CACA78B,QAAA,CACA2/B,QAAA,4BACA,EACA4gB,YAAA,GACA,CACA,EACA,YACA5gB,QACA,+FACAF,WAAA,GACA5C,OAAA,CACAmlB,IAAA,CACAriB,QAAA/D,OACA,oKAAgLhT,MAAA,CAAA5N,OAAA,CAChL,SACA,WACA,OAAAq5C,CACA,GAEA,MAEAl5B,MAAA,eACA0B,OAAArC,EAAA+B,SAAA,CAAAylB,GAAA,EAEA,oBAAAymB,EACA,kBACA9oC,QACA,mFACAF,WAAA,GACAtE,MAAA,SACA,EACA9T,OAAAA,EACA,mBAAA8gD,EACA5nB,YAAAA,EACAphD,OAAAA,CACA,CACA,EACA,eACAwgC,QACA,0FACAF,WAAA,GACA5C,OAAA,CACAtT,QAAAA,EACA8oC,OAAA,CACA1yB,QAAA/D,OACA,iFAA4FhT,MAAA,CAAA5N,OAAA,CAC5F,SACA,WACA,OAAAq5C,CACA,GAEA,MAEA50B,WAAA,GACAtE,MAAA,kBACA0B,OAAArC,EAAA+B,SAAA,CAAA81B,MAAA,EAEAryD,QAAA6hD,EACA,mBAAA6mB,EACA,oBAAAD,EACAphD,OAAAA,EACA,mBAAA8gD,EACA5nB,YAAAA,EACAphD,OAAAA,CACA,CACA,EACA,YACAwgC,QACA,uFACAF,WAAA,GACA5C,OAAA,CACAtT,QAAAA,EACAmlC,IAAA,CACA/uB,QAAA/D,OACA,iFAA4FhT,MAAA,CAAA5N,OAAA,CAC5F,SACA,WACA,OAAAq5C,CACA,GAEA,MAEA50B,WAAA,GACAtE,MAAA,eACA0B,OAAArC,EAAA+B,SAAA,CAAAmyB,GAAA,EAEA1uD,QAAA6hD,EACA,mBAAA6mB,EACA,oBAAAD,EACAphD,OAAAA,EACA,mBAAA8gD,EACA5nB,YAAAA,EACAphD,OAAAA,CACA,CACA,EACA,YACAwgC,QACA,mFACAF,WAAA,GACA5C,OAAA,CACAtT,QAAAA,EACA,iBACAoW,QAAA,kCACAF,WAAA,GACA5C,OAAA,CACAslB,UAAA,CACAxiB,QAAA,qBACA9C,OAAA,CACA78B,QAAA,kBACA,CACA,EACA8+B,KAAAxlB,CACA,CACA,EACA,cAAAsvD,EACAzmB,UAAA,CACAxiB,QACA,6DACAF,WAAA,GACA5C,OAAAvjB,CACA,EACA63B,KAAAA,EACAnxC,QAAA6hD,EACAX,SAAAonB,EACAC,OAAAA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AA,EACA,EACAvgC,OAAA,CACAwgC,QAAA,kCACA9C,OAAA,CACA0jB,YAAA,aACA,EACA7gB,OAAA,EACA,EACA,iBACAC,QACA,6TACAxE,MAAA,UACA,EACA,mBACAwE,QACA,0rBACAxE,MAAA,UACA,EACA,YACAwE,QAAA,iBACAF,WAAA,GACAtE,MAAA,SACA,EACA8qB,UAAA,CACAtmB,QAAA,sBACAxE,MAAA,aACA,EACA+lB,SACA,yfACAlhD,QACA,uGACAunB,QAAA,0BACAF,OAAA,+DACAi5B,SAAA,CACA,CACA3gB,QACA,wFACAF,WAAA,EACA,EACA,sCACA,CACA8gB,YAAA,eACA,CACA,CAzDAljD,EAAAC,OAAA,CAAAixE,EACAA,EAAA5mD,WAAA,WACA4mD,EAAAvtC,OAAA,oCCCA,SAAA0yB,EAAAl5B,CAAA,EAEAA,EAAA+B,SAAA,CAAAm3B,GAAA,EACA7f,OAAA,CACAlU,QAAA,wBACAD,OAAA,GACA7C,OAAA,CACA,uBACA,CACA,EACA20B,SAAA,CACA7xB,QAAA,6BACA9C,OAAA,CACA,yBACA,CACA,EACA2xC,MAAA,CACA7uC,QAAA,8BACA9C,OAAA,CACA,mBACA8C,QAAA,MACAD,OAAA,EACA,EACA,wBACA+uC,KAAA,CACA9uC,QAAA,eACA9C,OAAA,CACArlB,IAAA,SACAzX,MAAA,CACA4/B,QAAA,cACAF,WAAA,EACA,CACA,CACA,CACA,CACA,EACAivC,UAAA,CACA/uC,QAAA/D,OACA,QAAAhT,MAAA,CACA,+BAA+BA,MAAA,CAC/B,OACA,kEACAA,MAAA,EACA,IACA,wBAA8BA,MAAA,CAC9B,IACA,YAAAA,MAAA,CACA,KAEAiU,OAAA,CACA,8BACA,qBACA8C,QAAA,2BACA9C,OAAA,CACA,2BACA,qCACA,CACA,EACA,gBACA8C,QAAA,QACA9C,OAAA,CACA,sBACA8xC,KAAA,MACA,CACA,EACA1jB,KAAA,CACAtrB,QAAA,UACA9C,OAAA,CACA,cACA8C,QAAA,gBACA9C,OAAA,CACA,iCACA,yBACA,yBACA,CACA,EACA,eACA,+DACA,CACA,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A0jB,YAAA,CACA5gB,QAAA,IACA,CACA,CACA,EACAqhB,SAAA,CACArhB,QAAA,+BACA9C,OAAA,CACA0jB,YAAA,CACA5gB,QAAA,MACA,EACA2gB,SAAA,CACA3gB,QAAA,cACA,CACA,CACA,EACA,mBACAA,QACA,wMACA9C,OAAA,CACAmkB,SAAA,CACArhB,QAAA,mCACA9C,OAAA,CACA0jB,YAAA,CACA5gB,QAAA,OACA,EACA2gB,SAAA,CACA3gB,QAAA,cACA,CACA,CACA,EACA4gB,YAAA,CACA5gB,QAAA,gBACA,CACA,EACAxE,MAAA,UACA,EACA,kBACAwE,QACA,gNACA9C,OAAA,CACA0jB,YAAA,CACA5gB,QAAA,YACA,CACA,EACAxE,MAAA,UACA,EACA,oBACAwE,QAAA,+CACA9C,OAAA,CACA0jB,YAAA,CACA5gB,QAAA,iCACA9C,OAAA,CACAiE,IAAA,CACAnB,QAAA,KACA,CACA,CACA,CACA,EACAxE,MAAA,UACA,EACA,wBACAwE,QACA,mEACA9C,OAAA,CACA0jB,YAAA,CACA5gB,QAAA,iCACA9C,OAAA,CACAiE,IAAA,CACAnB,QAAA,KACA,CACA,CACA,EACAzF,UAAA,CACAyF,QAAA,WACA9C,OAAA,CACA0jB,YAAA,CACA5gB,QAAA,GACA,CACA,EACAxE,MAAA,SACA,CACA,EACAA,MAAA,UACA,EACA,6BACAwE,QAAA,gBACA9C,OAAA,CACA0jB,YAAA,CACA5gB,QAAA,OACA,CACA,EACAxE,MAAA,UACA,EACA,yBACAwE,QAAA,eACA9C,OAAA,CACA0jB,YAAA,CACA5gB,QAAA,QACA,CACA,EACAxE,MAAA,UACA,CACA,GACAX,EAAA+B,SAAA,CAAAK,YAAA,CACA,SACA,cACA,CACAokB,SAAAxmB,EAAA+B,SAAA,CAAA4zC,KAAA,oBAAAtzC,MAAA,WAEArC,EAAA+B,SAAA,CAAA4zC,KAAA,oBAEA31C,EAAA+B,SAAA,CAAA6zC,SAAA,CAAA51C,EAAA+B,SAAA,CAAA4zC,KAAA,CAzHA9yE,EAAAC,OAAA,CAAA6yE,EACAA,EAAAxoD,WAAA,SACAw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AE,EAAAr1D,CAAA,EACA,KAAAs1D,MAAA,CAAAjH,KAAA,CAAArsD,IAAA,CAAA9S,IAAA,MAAA8Q,GACA,KAAAs1D,MAAA,CAAA/G,IAAA,CAAAvsD,IAAA,CAAA9S,IAAA,MAAA8Q,EACA,CAMA,SAAAu1D,EAAA//E,CAAA,EAEA,UADAA,CAAAA,EAAAE,KAAA,MACW,GACX,gBCzGO,IAAA8/E,EAAA,CACP,QACA,MACA,SACA,QACA,SACA,QACA,SACA,OACA,OACA,SACA,MACA,SACA,QACA,SACA,OACA,KACA,SACA,QACA,SACA,OACA,KACA,SACA,SACA,QACA,SACA,SACA,SACA,OACA,OACA,MACA,QACA,SACA,QACA,SACA,OACA,SACA,SACA,QACA,QACA,QACA,SACA,MACA,QACA,SACA,OACA,SACA,SACA,QACA,OACA,OACA,SACA,MACA,SACA,SACA,QACA,SACA,MACA,OACA,SACA,SACA,SACA,KACA,SACA,QACA,QACA,SACA,SACA,OACA,QACA,KACA,OACA,QACA,SACA,OACA,MACA,SACA,SACA,QACA,SACA,OACA,OACA,SACA,SACA,OACA,OACA,SACA,QACA,OACA,QACA,MACA,OACA,MACA,OACA,OACA,OACA,QACA,QACA,QACA,SACA,QACA,SACA,MACA,OACA,SACA,MACA,OACA,CC3GOC,EAAA,CACP,MACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,OACA,EC3BO,SAAAC,EAAA91D,CAAA,EACP,IAAAjnB,EACA,iBAAAinB,EAAAA,EAAA5rB,UAAA,IAAA4rB,EAEA,OAAAjnB,GAAA,IAAAA,GAAA,EACA,CCLO,SAAAg9E,EAAA/1D,CAAA,EACP,IAAAjnB,EACA,iBAAAinB,EAAAA,EAAA5rB,UAAA,IAAA4rB,EAEA,OACA,OAAAjnB,GAAA,KACAA,GAAA,IAAAA,GAAA,IACAA,GAAA,IAAAA,GAAA,EAEA,CENO,SAAAi9E,EAAAh2D,CAAA,EACP,OAASi2D,SDJFj2D,CAAA,EACP,IAAAjnB,EACA,iBAAAinB,EAAAA,EAAA5rB,UAAA,IAAA4rB,EAEA,OACA,OAAAjnB,GAAA,KACAA,GAAA,IAAAA,GAAA,EAEA,ECJuBinB,IAAe81D,EAAS91D,EAC/C,CCRA,IAAMk2D,EAAOtoD,SAAAC,aAAA,MAMN,SAAAsoD,EAAArgF,CAAA,EACP,IAAAsgF,EAAA,IAAAtgF,EAAA,GACEogF,CAAAA,EAAOpoD,SAAA,CAAAsoD,EACT,IAAAv+D,EAAeq+D,EAAOnoD,WAAA,OAUtB,CAAAlW,KAAAA,EAAAzjB,UAAA,CAAAyjB,EAAA7jB,MAAA,KAAmD8B,SAAAA,CAAA,GAQnD+hB,IAAAu+D,GAAAv+D,CACA,CCpBA,IAAAjjB,EAAAD,OAAAC,YAAA,CAGAi7B,EAAA,CACA,GAEA,+DAEA,iEAEA,6CAEA,+CAEA,2CAEA,oDAEA,+EACA,CChBAwmD,EAAA,YACAC,EAAA,kCACAC,EAEA,6DACAC,EAAA,sBAGAC,EAAA,IAAAzlF,QCjBO,SAAA0lF,EAAA39E,CAAA,EACP,YAAAA,EAAA0e,QAAA,KAAAtH,WAAA,MACA,CE0vBA,SAAAwmE,EAAAC,CAAA,EACA,IAAAC,EAAA,EACA78D,EAAA48D,EAAA7kD,KAAA,CAAA/9B,MAAA,CAEA,OAAAgmB,EAAA,KACA,IAAA/mB,EAAA2jF,EAAA7kD,KAAA,CAAA/X,EAAA,CAEA,GAAA/mB,eAAAA,GAAAA,aAAAA,EAAA,KACA,uBAAAA,GAAA4jF,GACA,CAEA,OAAAA,CACA,CAMA,SAAAC,GAAAD,CAAA,EACA,MAAAroD,KAAAo7C,MAAA,CAAAiN,EACA,CAKA,SAAAE,KACA,SACA,CC/uBA,SAAAC,GAAA52D,CAAA,EACA,KAAAquD,KAAA,EAAcz7E,KAAA,WAAA8C,MAAA,IAA4BsqB,GAC1C,KAAAyB,MAAA,EACA,CAMA,SAAAo1D,GAAA72D,CAAA,EACA,IAAAtqB,EAAA,KAAAw/E,MAAA,GACA1/E,EAAA,KAAAm8B,KAAA,MAAAA,KAAA,CAAA/9B,MAAA,IACE,GAAAwhF,EAAAjI,EAAA,EAAM33E,aAAAA,EAAA5C,IAAA,EAER,KAAA27E,IAAA,CAAAvuD,GAEA,IAAAm1D,EAAAn1D,EAAAm1D,MAAA,CAEA3/E,EAAAE,KAAA,CAAAA,EAEAy/E,GACA3/E,CAAAA,EAAAwsB,IAAA,EAAiBmzD,OAAAA,CAAA,EAEjB,CAMA,SAAA2B,GAAA92D,CAAA,EACA,KAAAs1D,MAAA,CAAAjH,KAAA,CAAArsD,IAAA,CAAA9S,IAAA,MAAA8Q,GACA,KAAAs1D,MAAA,CAAA/G,IAAA,CAAAvsD,IAAA,CAAA9S,IAAA,MAAA8Q,EACA,CAMA,SAAA+2D,GAAAvhF,CAAA,EACA,OAAAA,EAAAE,KAAA,IACA,wCGpBA,IAAA2mB,GAAA,GAAcnJ,cAAA,CAKP8jE,GAAAn2D,OAAA,YAKAo2D,GAAAp2D,OAAA,QAKAq2D,GAAAr2D,OAAA,QAuHP,SAAAs2D,GAAAzhF,CAAA,SACA,MAAAob,OAAA,CAAApb,GACAA,EAGA,iBAAAA,EACA,CAAAshF,GAAAthF,EAAA,CAGA,CAAAA,EAAA,CAWA,SAAA0hF,GAAA1hF,CAAA,EACA,MAAAi4D,CAAAA,CACAj4D,CAAAA,GACA,iBAAAA,GACA,SAAAA,GACA,iBAAAA,EAAA9C,IAAA,EACA8C,EAAA9C,IAAA,CAAAgB,MAAA,GAEA,CC/IO,SAAAyjF,GAAA7G,CAAA,CAAAt9E,CAAA,MAYPiiF,EAEA7hB,EAbA,IAAAhpB,EAAAp3C,EAAAo3C,MAAA,KACAsf,EAAA12D,EAAA02D,MAAA,KACA0tB,EAAAx+E,OAAA0zC,MAAA,IAAuCt5C,EAAAokF,YAAA,EAEvCt4D,EAAA,GAEA4R,EAAA,GACA2mD,EAAAD,EAAAC,SAAA,CACAC,EAAAF,EAAAE,OAAA,CACAC,EAAA,GAMAC,EAAA5+E,OAAA0zC,MAAA,IAAsC8qC,EAAA,CACtCC,UAAAv4D,EACA24D,eAAA,EACA,GACAH,GACAE,CAAAA,EAAAF,OAAA,CAAA5mD,CAAA,EAEA,IAAAgnD,EAAAC,SAiMArH,CAAA,CAAAsH,CAAA,EAEA,IAAAr/D,EAAA,CACA/iB,MAAA,GACAqiF,MAAA,IAEAn+D,EAAA,GACA,OAAAA,EAAA42D,EAAA58E,MAAA,GACA,IAAA00C,EAAAkoC,CAAA,CAAA52D,EAAA,CAGA,GAAA0uB,UAAAA,CAAA,KACA,IAAA11C,EAAA01C,CAAA,IAAA11C,IAAA,CACA,GAAAA,eAAAA,GAAAklF,EAAApzD,QAAA,CAAA9xB,GAAA,CACA,IAAAmf,EAAAu2B,CAAA,IAAA0vC,WAAA,CAAA1vC,CAAA,KAGA,KAAAv2B,EAAAne,MAAA,IAAAme,KAAAA,CAAA,KACAA,EAAAkmE,KAAA,GAEA,IAAAviF,EAAAwiF,SA6CAnmE,CAAA,EACA,IAIAomE,EAJAv+D,EAAA,GAEAnB,EAAA,GAGA,OAAAmB,EAAA7H,EAAAne,MAAA,OAGA8B,EAFA,IAAAsc,EAAAD,CAAA,CAAA6H,EAAA,CAGA,oBAAA5H,EACAtc,EAAAsc,OACM,OAAAA,GACN,QAEAtc,EAAA,KACA,KAEA,SAEAA,EAAA,KACA,KAEA,SAEAA,EAAA,OACA,KAEA,SAEAA,EAAA,IACA,KAIA,SAEA,GAAAyiF,EAAA,SACAziF,EAAA,IACA,KAEA,SAIAA,EAAAnB,OAAAC,YAAA,CAAAwd,EAEA,CACAmmE,EAAAnmE,KAAAA,EACAyG,EAAAxmB,IAAA,CAAAyD,EACA,CACA,OAAA+iB,EAAA1H,IAAA,IACA,EAjGAgB,GACA0G,EAAAs/D,KAAA,CAAA9lF,IAAA,EAAAwmB,EAAA/iB,KAAA,CAAA9B,MAAA,CAAA00C,CAAA,IAAAx0C,KAAA,GACA2kB,EAAA/iB,KAAA,EAAAA,EACA+iB,EAAAs/D,KAAA,CAAA9lF,IAAA,EAAAwmB,EAAA/iB,KAAA,CAAA9B,MAAA,CAAA00C,CAAA,IAAAxuB,GAAA,EACA,CACA,CACA,CACA,OAAArB,CACA,EA7NA+3D,EAAAt9E,EAAA4kF,UAAA,EACAv5D,EAAAq5D,EAAAliF,KAAA,CACAA,EAAA40C,EAAA/rB,EAAAqrC,EACAwuB,EAAAllF,EAAA0D,UAAA,EAAAqP,GAAAsY,GACA,GAAA65D,GAAA,CAAAllF,EAAAmlF,UAAA,CACA,UAAclH,EAAY,+BAC1BM,MAAA6G,EAAA,GACA3G,OAAA,8BACApzD,OAAA,oCACA,GAEA,IACA42D,EAAAjiF,EAAA0D,UAAA,GAAAwhF,EAAAllF,EAAApC,KAAA,CAAAynF,iBAAA,CAAA7iF,EAAA,EAAAgiF,GAAAxkF,EAAApC,KAAA,CAAAu9B,KAAA,CAAA34B,EAAAgiF,EACA,CAAI,MAAAc,EAAA,CAEJ,IAAAtH,EAAAoH,EAAA75D,EAAA/qB,GAAA,CACA+qB,CAFyC+5D,EAEzC3hD,OAAA,CAAAtiC,OAAAkqB,EAAAoY,OAAA,EAAAlmB,OAAA,qBAGA8N,EAAA/qB,GAAA,CAAAw9E,EAAAjoE,MAAA,CACAwV,EAAA6oD,GAAA,EACAjpD,KAAA6yD,EAAA7yD,IAAA,CACAL,OAAAkzD,EAAAlzD,MAAA,EACA,EACAs1C,EAVyCklB,EAWzCf,EAAAh5D,EAAAg6D,QAAA,EAAAnuC,EAAA12C,MAAA,CAAA2qB,EAAA3qB,MAAA,EAEA6qB,yBAAAA,EAAAoY,OAAA,CAEA,GAAAs+C,GAAAjiF,EAAA0D,UAAA,GAAAwhF,GACA,GAAAnyE,GAAAvQ,EAAAvB,KAAA,CAAAghF,EAAAr7D,GAAA,CAAApkB,EAAA9B,MAAA,CAAAg2D,EAAAh2D,MAAA,GACAuhF,EAAA,CACAviF,KAAA,UACAkB,MAAA,EACAgmB,IAAAwwB,EAAA12C,MAAA,CAAA2qB,EAAA3qB,MAAA,CAEA8kF,KAAA,EACA9lF,KAAA,sBACAgE,WAAAu+E,EACArhF,MAAA,EACAgmB,IAAAwwB,EAAA12C,MAAA,CAAA2qB,EAAA3qB,MAAA,EACS,CACT+kF,WAAA,SACA35D,SAAA,QAEM,CACN,IAAAkyD,EAAAoH,EAAAnD,EAAAr7D,GAAA,EACA2E,EACA,4CAGAA,CAAAA,EAAA/qB,GAAA,CAAAw9E,EAAAjoE,MAAA,CACAwV,EAAA6oD,GAAA,EACAjpD,KAAA6yD,EAAA7yD,IAAA,CACAL,OAAAkzD,EAAAlzD,MAAA,EACA,EACAs1C,EAAA70C,EACA02D,EAAAtmE,KAAAA,CACA,EAEA,GAAAsmE,EAAA,KDnEO3hC,EAAAolC,MAEPvK,EAEAwK,EC2FA,GA1BA1D,EAAAn2D,QAAA,CAAAA,EDrEOw0B,ECwEE2hC,EDlET,mBANOyD,ECwEE,SAAAE,CAAA,CAAAntB,CAAA,CAAA/xC,CAAA,CAAAm/D,CAAA,EACT,IAAA/mF,EACA+mF,CAAA,CAAAA,EAAAnlF,MAAA,IAEA+S,EAAAglD,CAIA,6BAAAmtB,EAAAlmF,IAAA,EAAAZ,GAAA2U,IAEA,iBAAAiT,IAEA5nB,EAAAA,CAAA,CAAA2U,EAAA,CACAA,EAAAiT,GAIA5nB,CAAA,CAAA2U,EAAA,CAAAmyE,EAAAliF,UAAA,EAEAoiF,EAAAF,EACA,IDrFAzK,CAAAA,EAAAuK,CAAA,EAMAnpE,CAQA,SAAAA,EAAAja,CAAA,CAAA2X,CAAA,CAAAyM,CAAA,CAAAm/D,CAAA,EAKA,OAJA3B,GAAA5hF,IACAyjF,CAAAA,EAAA37D,WAAA,UAA0C9nB,EAAA5C,IAAA,MAG1CqmF,EAKA,SAAAA,IAEA,IAAAxgE,EAAA41D,EAAA8I,GAAA9I,EAAA74E,EAAA2X,EAAAyM,EAAAm/D,IAAA,GAEA,GAAAtgE,CAAA,MAAAw+D,GACA,OAAAx+D,EAGA,GAAAA,CAAA,MAAAy+D,GAAA,CAEA,IAAAgC,EAEA,IAAAA,KAAA1jF,EACA,GACA6mB,GAAAnN,IAAA,CAAA1Z,EAAA0jF,IACA1jF,CAAA,CAAA0jF,EAAA,EACA,iBAAA1jF,CAAA,CAAA0jF,EAAA,EAEAA,SAAAA,GAEAA,aAAAA,EACA,CACA,IAAAC,EAAAJ,EAAA3pE,MAAA,CAAA5Z,GAEAE,EAAAF,CAAA,CAAA0jF,EAAA,CAEA,GAAAroE,MAAAC,OAAA,CAAApb,GAAA,CAEA,IAAA0jF,EAAA,EAEA,KAAAA,EAAA,IAAAA,EAAAt8D,EAAAlpB,MAAA,GACA,IAAAwnB,EAAA0B,CAAA,CAAAs8D,EAAA,CAEA,GAAAhC,GAAAh8D,GAAA,CACA,IAAAi+D,EAAA5pE,EACA2L,EACA89D,EACAE,EACAD,KAEA,GAAAE,CAAA,MAAApC,GAAA,OAAAoC,EACAD,EACA,iBAAAC,CAAA,IAAAA,CAAA,IAAAD,EAAA,CACA,MACAA,GAEA,CACA,MAAc,GAAAhC,GAAA1hF,GAAA,CACd,IAAA2jF,EAAA5pE,EAAA/Z,EAAAwjF,EAAArqE,KAAAA,EAAAsqE,KACA,GAAAE,CAAA,MAAApC,GAAA,OAAAoC,CACA,CACA,CAEA,CAEA,OAAAR,EAAA1B,GAAA0B,EAAArjF,EAAA2X,EAAAyM,EAAAm/D,IAAAtgE,CACA,CACA,GA3EA+6B,EAAA3kC,KAAAA,EAAAA,KAAAA,EAAA,MCkFAgC,MAAAC,OAAA,CAAAymE,GACAA,EAAAtlF,IAAA,IAAA+sB,QACM,sBAAAu4D,EACN,QAAAr4D,KAAAF,EACAu4D,EAAAr4D,UAAAA,EAAAtsB,IAAA,CAAAssB,EAAAxpB,KAAA,CAAAwpB,EAAAprB,KAAA,CAAAorB,EAAApF,GAAA,CAAAoF,EAAAooD,GAAA,CAAAxzE,KAAA,CAAAorB,EAAAooD,GAAA,CAAAxtD,GAAA,EAGA,QAAAkG,KAAA4Q,EAEA5Q,EAAAlG,GAAA,EAAAwwB,EAAA12C,MAAA,EAAAosB,EAAAlsB,KAAA,CAAAw2C,EAAA12C,MAAA,EAAA2qB,EAAA3qB,MAAA,GAGAolF,EAAAh5D,GACAnP,MAAAC,OAAA,CAAA0mE,GACAA,EAAAvlF,IAAA,CAAA+tB,GAKAw3D,EAAAx3D,GAGA,CAGA,OACAm1D,OAAAA,EACA12D,MAAA60C,EACAmkB,QAAAA,CACA,EAQA,SAAAuB,EAAAM,CAAA,EACA,IAAAC,EAAAjB,EAAAgB,EAAAxlF,KAAA,EACA0lF,EAAAlB,EAAAgB,EAAAx/D,GAAA,CAGAw/D,CAAAA,EAAAxlF,KAAA,CAAAylF,EAAAtwE,MAAA,CACAqwE,EAAAx/D,GAAA,CAAA0/D,EAAAvwE,MAAA,CACAqwE,EAAAhS,GAAA,EACAxzE,MAAA,CACAuqB,KAAAk7D,EAAAl7D,IAAA,CACAL,OAAAu7D,EAAAv7D,MAAA,GACA/U,OAAAswE,EAAAtwE,MAAA,EAEA6Q,IAAA,CACAuE,KAAAm7D,EAAAn7D,IAAA,CACAL,OAAAw7D,EAAAx7D,MAAA,GACA/U,OAAAuwE,EAAAvwE,MAAA,CAEA,EACAqwE,EAAAjjC,KAAA,EAAAijC,EAAAxlF,KAAA,CAAAwlF,EAAAx/D,GAAA,EAUA,SAAAw+D,EAAAmB,CAAA,EACA,IAAAC,EAAAD,EAAAnvC,EAAA12C,MAAA,CACA8lF,EAAA,EACAA,EAAA,EACMA,EAAAn7D,EAAA3qB,MAAA,EACN8lF,CAAAA,EAAAn7D,EAAA3qB,MAAA,EAEA,IAAAs9E,EAAAyI,SAsEA5B,CAAA,CAAA6B,CAAA,EACA,IAAAhgE,EAAA,EACA,KAAAA,EAAAm+D,EAAAnkF,MAAA,EAAAmkF,CAAA,CAAAn+D,EAAA,KAAAggE,GACAhgE,GAAA,EAIA,GAAAA,IAAAA,EACA,OAEA,IAAAigE,EAAAC,EAAA,CAAA/B,CAAA,CAAAn+D,EAAA,GACA6a,EAAAmlD,EAAAC,EACA,OACAx7D,KAAAy7D,EAAAz7D,IAAA,CACAL,OAAA87D,EAAA97D,MAAA,CAAAyW,EACAxrB,OAAA6wE,EAAA7wE,MAAA,CAAAwrB,CACA,CACA,EAvFAmjD,EAAAG,KAAA,CAAA2B,GAQA,OAPAxI,GACAA,CAAAA,EAAA,CACA7yD,KAAAnrB,EAAAY,KAAA,CAAAuqB,IAAA,CACAL,OAAA9qB,EAAAY,KAAA,CAAAkqB,MAAA,CACA/U,OAAA/V,EAAAY,KAAA,CAAAmV,MAAA,CACA,EAEAioE,CACA,CACA,CAMA,SAAAjrE,GAAAvQ,CAAA,EACA,cAAAN,IAAA,CAAAM,EAEAib,OAAA,yBAIAA,OAAA,iCACA,CCtQO,SAAAopE,GAAAvkF,CAAA,EACP,IAAAwkF,EAAAxkF,GAAA,GACA8xE,EAAA0S,EAAA1S,GAAA,KACAjxB,EAAA2jC,EAAA3jC,KAAA,GAAAxnC,KAAAA,EAAAA,KAAAA,EAAA,CACA/a,EAAAmmF,GAAA3S,EAAAxzE,KAAA,CAAAuiD,CAAA,KAAA2jC,EAAAlmF,KAAA,EACAgmB,EAAAmgE,GAAA3S,EAAAxtD,GAAA,CAAAu8B,CAAA,KAAA2jC,EAAAlgE,GAAA,EAEA,GAAAhmB,GAAAgmB,EACA,OAAYhmB,MAAAA,EAAAgmB,IAAAA,CAAA,CAEZ,CAUA,SAAAmgE,GAAAC,CAAA,CAAAC,CAAA,EACA,GAAAD,GAAA,iBAAAA,EAAA,CACA,IAAA77D,EACA,SAAA67D,EAAAE,GAAAF,EAAA77D,IAAA,EAAAxP,KAAAA,EACAmP,EACA,WAAAk8D,EACAE,GAAAF,EAAAl8D,MAAA,EACAnP,KAAAA,EAEA,GAAAwP,GAAAL,KAAAnP,IAAAmP,EACA,OACAK,KAAAA,EACAL,OAAAA,EAAA,EACA/U,OAAAmxE,GAAAD,EACA,CAEA,CACA,CAMA,SAAAC,GAAA1kF,CAAA,EACA,uBAAAA,GAAAA,EAAA,GAAAA,EAAAmZ,KAAAA,CACA,CC3CA,IAAAwrE,GACA,wHAKAC,GACA,4DAiCO,SAAAC,GACP5M,CAAA,CACAR,CAAA,CACAv6E,CAAA,CACA4nF,CAAA,CACAC,CAAA,CACA3pF,CAAA,CACAwmF,CAAA,CACAoD,CAAA,CACA3tB,CAAA,CACAsrB,CAAA,CACAsC,CAAA,MAMApB,EAEAqB,EANA,IAAAxqE,EAAA,KACAyqE,EAAA,KAAArK,MAAA,CAAA58E,MAAA,GACA0yC,EAAA,EAKA,OAYA,SAAA3tC,CAAA,EAMA,OALAg1E,EAAAU,KAAA,CAAAz7E,GACA+6E,EAAAU,KAAA,CAAAmM,GACA7M,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,CAAAiM,GACAjB,EAAAnpE,EAAAof,GAAA,GACAiD,CACA,EAYA,SAAAA,EAAA95B,CAAA,EACA,GAAAA,OAAAA,EAAA,CACA,GAAAiiF,EAAA,MAAAA,EACA,IAAAn8D,EAAA,IAAwB0yD,EACxB,uFACA,CACAM,MAAArhE,EAAAof,GAAA,GACAmiD,OAAA,iBACApzD,OAAA,oCACA,EAGA,OADAE,EAAAy6B,GAAA,CAAAmhC,GAnGA,oFAoGA57D,CACA,CACA,GAAQ,GAAAq8D,GAAA9M,EAAA,EAAkBr1E,GAI1B,OAHAg1E,EAAAU,KAAA,eACAV,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,eACAwM,EAEA,GAAApiF,MAAAA,GAAA2tC,IAAAA,EAAA,CAEA,IAAAzwC,EAAA/E,EACAkqF,GAAA9rE,IAAA,CACAkB,EACAtf,EACAwmF,EACAmD,EACAI,EACAtB,EACAlB,GAAA,GACAtrB,GAAA,IAEA,CACAn6D,KAAA,KACAuiF,OAAAtmE,KAAAA,CACA,EACA,GAAAhZ,OAAAA,EAAAjD,IAAA,EACA+6E,EAAAU,KAAA,CAAAmM,GACA7M,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,CAAAiM,GACA,IAAAx6D,EAAA2tD,EAAAY,IAAA,CAAA37E,GAMA,OALA8nF,GAAA7kF,EAAAs/E,MAAA,EACAr8E,OAAA0zC,MAAA,CAAAxsB,EAAA,CACAm1D,OAAAt/E,EAAAs/E,MAAA,GAGAhI,CACA,CAIA,OAHAyN,EAAA/kF,EAAAghC,OAAA,CACA82C,EAAAU,KAAA,CAAAoM,GACA9M,EAAAW,OAAA,CAAA31E,GACA65B,CACA,CAEA,OADAm7C,EAAAU,KAAA,CAAAoM,GACAjoD,EAAA75B,EACA,CAYA,SAAA65B,EAAA75B,CAAA,SACA,MACAA,GAAA2tC,IAAAA,GACA3tC,OAAAA,GACM,GAAAmiF,GAAA9M,EAAA,EAAkBr1E,IAExBg1E,EAAAY,IAAA,CAAAkM,GACAhoD,EAAA95B,KAIAA,MAAAA,GAAA7H,EAEM,MAAA6H,GACN2tC,CAAAA,GAAA,GAFAA,GAAA,EAIAqnC,EAAAW,OAAA,CAAA31E,GACA65B,EACA,CAaA,SAAAuoD,EAAApiF,CAAA,EACA,IAAA62B,EAAApf,EAAAof,GAAA,GAGA,GACAA,EAAAnR,IAAA,GAAAk7D,EAAAl7D,IAAA,EACA,CAAAs8D,GACAvqE,EAAAuoD,MAAA,CAAA/sC,IAAA,CAAA4D,EAAAnR,IAAA,EACA,CACA,IAAAI,EAAA,IAAwB0yD,EACxB,+IACA,CACAM,MAAArhE,EAAAof,GAAA,GACAmiD,OAAA,kBACApzD,OAAA,oCACA,EAGA,OADAE,EAAAy6B,GAAA,CAAAmhC,GA1MA,gFA2MA57D,CACA,CAiBA,OAAAgU,EAAA95B,EACA,CACA,CAoBA,SAAAqiF,GACAlqF,CAAA,CACAwmF,CAAA,CACAmD,CAAA,CACAI,CAAA,CACAtB,CAAA,CACAlB,CAAA,CACAtrB,CAAA,EAGA,IAAAt0C,EAAiB4+D,GAAa,KAAA7G,MAAA,CAAAr8E,KAAA,CAAA0mF,GAAA,CAC9B/pF,MAAAA,EACAgnF,WAAA,CAAA2C,EAAA,CACAnD,aAAAA,EACAxjF,MAAAylF,EACA3iF,WAAA,GACAyhF,WAAAA,EACA/tC,OAAAyiB,EAAA,KAAwB,GACxBnD,OAAAmD,EAAA,KAAuB,EACvB,GACAooB,EAAA18D,EAAA08D,MAAA,CAGA,GAAApoB,GAAAooB,EAAA,CAGA,IAAAtgD,EAAAsgD,EAAAuD,IAAA,IACA,GACA7jD,wBAAAA,EAAAjiC,IAAA,EACAiiC,qBAAAA,EAAAj+B,UAAA,CAAAhE,IAAA,CACA,CACA,IAAA6+E,EAAoBsI,GAAkBllD,GACtCpW,EAAA,IAAwB0yD,EACxB,eACAt8C,EAAAjiC,IAAA,CACA,uDACA,CACA6+E,MAAAA,EAAA39E,KAAA,CACA69E,OAAA,aACApzD,OAAA,oCACA,EAGA,OADAE,EAAAy6B,GAAA,CAAAmhC,GAAAC,GACA77D,CACA,CACA,GAAAoW,EAAAj+B,UAAA,CAAA+kB,UAAA,KAEA,IAAA8C,EAAA,IAAwB0yD,EACxB,wEACA,CACAM,MAAAA,GAJsC58C,EAAAj+B,UAAA,CAAA+kB,UAAA,KAItC7nB,KAAA,CACA69E,OAAA,eACApzD,OAAA,oCACA,EAGA,OADAE,EAAAy6B,GAAA,CAAAmhC,GAtSA,wEAuSA57D,CACA,CACA,GACAoW,EAAAj+B,UAAA,CAAA+kB,UAAA,KACAkZ,kBAAAA,EAAAj+B,UAAA,CAAA+kB,UAAA,IAAA/oB,IAAA,CACA,CACA,IAAA6+E,EAAoBsI,GAAkBllD,EAAAj+B,UAAA,CAAA+kB,UAAA,KACtC8C,EAAA,IAAwB0yD,EACxB,eACAt8C,EAAAj+B,UAAA,CAAA+kB,UAAA,IAAA/oB,IAAA,CACA,gDACA,CACA6+E,MAAAA,EAAA39E,KAAA,CACA69E,OAAA,aACApzD,OAAA,oCACA,EAGA,OADAE,EAAAy6B,GAAA,CAAAmhC,GAAAC,GACA77D,CACA,CACA,CACA,GAAAhG,EAAAgG,KAAA,EACA,IAAAA,EAAA,IAAsB0yD,EAAY,yCAClCj8C,MAAAzc,EAAAgG,KAAA,CACAgzD,MAAA,CACApzD,KAAA5F,EAAAgG,KAAA,CAAA6oD,GAAA,CAAAjpD,IAAA,CACAL,OAAAvF,EAAAgG,KAAA,CAAA6oD,GAAA,CAAAtpD,MAAA,GACA/U,OAAAwP,EAAAgG,KAAA,CAAA/qB,GAAA,EAEAi+E,OAAA,QACApzD,OAAA,oCACA,GAEA,OADAE,EAAAy6B,GAAA,CAAAmhC,GAtUA,yCAuUA,CACAznF,KAAA,MACAikC,QAAApY,CACA,CACA,CACA,OACA7rB,KAAA,KACAuiF,OAAAA,CACA,CACA,gBEpXA,IAAA8F,GAAA,oBACAC,GAAA,uCACAC,GAAA,wCACAC,GAAA,0DACAC,GAAA,2DAGA/N,GAAA,GAWO,SAASgO,GAAK3iF,CAAA,EACrB,MAAAA,EAAAA,GAAAsiF,GAAA7lF,IAAA,CAAAb,OAAAmgE,aAAA,CAAA/7D,GACA,CAaO,SAAA4iF,GAAA5iF,CAAA,CAAAzF,CAAA,EAEP,IAAA6rB,EAAAmP,CADAh7B,GAAAo6E,EAAA,EACAphD,GAAA,CAAAivD,GAAAD,GACA,MAAAviF,EAAAA,GAAAomB,EAAA3pB,IAAA,CAAAb,OAAAmgE,aAAA,CAAA/7D,GACA,CAYO,SAAS6iF,GAAI3oF,CAAA,CAAAK,CAAA,EAGpB,MAAA6rB,CADAmP,CADAh7B,GAAAo6E,EAAA,EACAphD,GAAA,CAAAmvD,GAAAD,EAAA,EACAhmF,IAAA,CAAAvC,EACA,CC9CA,IAAM4oF,GAAO,2DAsCN,SAAAC,GAAA/N,CAAA,CAAAR,CAAA,CAAAS,CAAA,CAAA98E,CAAA,CAAAwmF,CAAA,CAAAoD,CAAA,CAAAC,CAAA,CAAAgB,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,MAGPC,EAEA/qB,EAJA,IAAAjiD,EAAA,KAKA,OAYA,SAAAzX,CAAA,EAKA,OAJAg1E,EAAAU,KAAA,CAAAsN,GACAhO,EAAAU,KAAA,CAAAuN,GACAjO,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,CAAAqN,GACAyB,CACA,EAYA,SAAAA,EAAA1kF,CAAA,QAGA,CAAQ,EAAAmiF,GAAArL,EAAA,EAAyB92E,GACjCi1E,EAAAj1E,IAIAykF,EAAAE,EACAC,GAAA5kF,GACA,CAgBA,SAAA2kF,EAAA3kF,CAAA,SAEA,KAAAA,GACAg1E,EAAAU,KAAA,CAAAwN,GACAlO,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,CAAAsN,GACAuB,EAAAI,EACAD,IAIA5kF,KAAAA,EACA8kF,GAAA9kF,GAIAA,OAAAA,GAAAA,GAAA,GAAsC2iF,GAAO3iF,IAC7Cg1E,EAAAU,KAAA,CAAA0N,GACApO,EAAAU,KAAA,CAAA2N,GACArO,EAAAW,OAAA,CAAA31E,GACA+kF,QAEAC,GAAAhlF,EAAA,iFAAAA,CAAAA,KAAAA,EAAA,0DAAyK,IACzK,CAcA,SAAA6kF,EAAA7kF,CAAA,SAEA,KAAAA,EACA8kF,GAAA9kF,GAIAA,OAAAA,GAAAA,GAAA,GAAsC2iF,GAAO3iF,IAC7Cg1E,EAAAU,KAAA,CAAA0N,GACApO,EAAAU,KAAA,CAAA2N,GACArO,EAAAW,OAAA,CAAA31E,GACA+kF,QAEAC,GAAAhlF,EAAA,iFAAAA,CAAAA,KAAAA,GAAAA,KAAAA,EAAA,gEACA,CAYA,SAAA+kF,EAAA/kF,CAAA,SAEA,OAAAA,GAAAA,GAAA,GAAsC4iF,GAAM5iF,EAAA,CAC5CuzB,IAAA,EACA,IACAyhD,EAAAW,OAAA,CAAA31E,GACA+kF,GAIA/kF,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,MAAAA,GAAoF,GAAAmiF,GAAArL,EAAA,EAAyB92E,IAAU,GAAAmiF,GAAApL,EAAA,EAAiB/2E,IACxIg1E,EAAAY,IAAA,CAAAyN,GACAoB,EAAAQ,EACAL,GAAA5kF,SAEAglF,GAAAhlF,EAAA,uHAAiHA,CAAAA,KAAAA,EAAA,0DACjH,CAcA,SAAAilF,EAAAjlF,CAAA,SAEA,KAAAA,GACAg1E,EAAAU,KAAA,CAAA4N,GACAtO,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,CAAA0N,GACAmB,EAAAS,EACAN,IAIA5kF,KAAAA,GACAg1E,EAAAU,KAAA,CAAA8N,GACAxO,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,CAAA4N,GACAiB,EAAAU,EACAP,IAIA5kF,KAAAA,GAAAA,KAAAA,GAAAA,MAAAA,GAAAA,OAAAA,GAAAA,GAAA,GAAoF2iF,GAAO3iF,IAC3Fg1E,EAAAY,IAAA,CAAAwN,GACAgC,EAAAplF,SAEAglF,GAAAhlF,EAAA,gJACA,CAYA,SAAAklF,EAAAllF,CAAA,EAEA,GAAAA,OAAAA,GAAAA,GAAA,GAAsC2iF,GAAO3iF,GAG7C,OAFAg1E,EAAAU,KAAA,CAAA6N,GACAvO,EAAAW,OAAA,CAAA31E,GACAqlF,EAEAL,GAAAhlF,EAAA,wJACA,CAYA,SAAAqlF,EAAArlF,CAAA,SAEA,OAAAA,GAAAA,GAAA,GAAsC4iF,GAAM5iF,EAAA,CAC5CuzB,IAAA,EACA,IACAyhD,EAAAW,OAAA,CAAA31E,GACAqlF,GAKArlF,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,MAAAA,GAAqE,GAAAmiF,GAAArL,EAAA,EAAyB92E,IAAU,GAAAmiF,GAAApL,EAAA,EAAiB/2E,IACzHg1E,EAAAY,IAAA,CAAA2N,GACAkB,EAAAa,EACAV,GAAA5kF,SAEAglF,GAAAhlF,EAAA,8HAAwHA,CAAAA,KAAAA,EAAA,0DACxH,CAcA,SAAAslF,EAAAtlF,CAAA,SAEA,KAAAA,GACAg1E,EAAAU,KAAA,CAAA4N,GACAtO,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,CAAA0N,GACAmB,EAAAS,EACAN,IAIA5kF,KAAAA,GAAAA,KAAAA,GAAAA,MAAAA,GAAAA,OAAAA,GAAAA,GAAA,GAAoF2iF,GAAO3iF,IAC3Fg1E,EAAAY,IAAA,CAAAwN,GACAgC,EAAAplF,SAEAglF,GAAAhlF,EAAA,uJACA,CAYA,SAAAmlF,EAAAnlF,CAAA,EAEA,GAAAA,OAAAA,GAAAA,GAAA,GAAsC2iF,GAAO3iF,GAG7C,OAFAg1E,EAAAU,KAAA,CAAA+N,GACAzO,EAAAW,OAAA,CAAA31E,GACAulF,EAEAP,GAAAhlF,EAAA,uFAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,EAAA,IAAAA,EAAA,6DACA,CAYA,SAAAulF,EAAAvlF,CAAA,SAEA,OAAAA,GAAAA,GAAA,GAAsC4iF,GAAM5iF,EAAA,CAC5CuzB,IAAA,EACA,IACAyhD,EAAAW,OAAA,CAAA31E,GACAulF,GAIAvlF,KAAAA,GAAAA,KAAAA,GAAAA,MAAAA,GAAsD,GAAAmiF,GAAArL,EAAA,EAAyB92E,IAAU,GAAAmiF,GAAApL,EAAA,EAAiB/2E,IAC1Gg1E,EAAAY,IAAA,CAAA6N,GACAgB,EAAAe,EACAZ,GAAA5kF,SAEAglF,GAAAhlF,EAAA,6HACA,CAiBA,SAAAwlF,EAAAxlF,CAAA,EAEA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,MAAAA,GAAAA,OAAAA,GAAAA,GAAA,GAAoF2iF,GAAO3iF,GAE3F,OADAg1E,EAAAY,IAAA,CAAAwN,GACAgC,EAAAplF,GAEAglF,GAAAhlF,EAAA,sJACA,CAkBA,SAAAolF,EAAAplF,CAAA,SAEA,KAAAA,GACAg1E,EAAAU,KAAA,CAAAyN,GACAnO,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,CAAAuN,GACAsB,EAAAvlF,GACA0lF,IAIA5kF,KAAAA,EACA8kF,GAAA9kF,GAIAA,MAAAA,EACa4hF,GAAoBrrE,IAAA,CAAAkB,EAAAu9D,EAAAyQ,EAAA/B,EAAAC,EAAAC,EAAAzrF,EAAAwmF,EAAAoD,EAAA,MAAAC,GAAAhiF,GAIjCA,OAAAA,GAAAA,GAAA,GAAsC2iF,GAAO3iF,IAC7Cg1E,EAAAU,KAAA,CAAAmO,GACA7O,EAAAU,KAAA,CAAAoO,GACA9O,EAAAU,KAAA,CAAAqO,GACA/O,EAAAW,OAAA,CAAA31E,GACA0lF,QAEAV,GAAAhlF,EAAA,2JACA,CAYA,SAAAylF,EAAAzlF,CAAA,EAEA,OADAykF,EAAAW,EACAR,GAAA5kF,EACA,CAgBA,SAAA0lF,EAAA1lF,CAAA,SAEA,OAAAA,GAAAA,GAAA,GAAsC4iF,GAAM5iF,EAAA,CAC5CuzB,IAAA,EACA,IACAyhD,EAAAW,OAAA,CAAA31E,GACA0lF,GAIA1lF,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,MAAAA,GAAoF,GAAAmiF,GAAArL,EAAA,EAAyB92E,IAAU,GAAAmiF,GAAApL,EAAA,EAAiB/2E,IACxIg1E,EAAAY,IAAA,CAAAmO,GACAU,EAAAkB,EACAf,GAAA5kF,SAEAglF,GAAAhlF,EAAA,uKACA,CAgBA,SAAA2lF,EAAA3lF,CAAA,SAEA,KAAAA,GACAg1E,EAAAU,KAAA,CAAAsO,GACAhP,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,CAAAoO,GACAS,EAAAmB,EACAhB,IAIA5kF,KAAAA,GACAg1E,EAAAY,IAAA,CAAAkO,GACA9O,EAAAU,KAAA,CAAAwO,GACAlP,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,CAAAsO,GACAO,EAAAoB,GACAjB,IAIA5kF,KAAAA,GAAAA,KAAAA,GAAAA,MAAAA,GAAsD,GAAAmiF,GAAArL,EAAA,EAAyB92E,IAAU,GAAAmiF,GAAApL,EAAA,EAAiB/2E,IAAAA,OAAAA,GAAAA,GAAA,GAAwC2iF,GAAO3iF,IACzJg1E,EAAAY,IAAA,CAAAkO,GACA9O,EAAAY,IAAA,CAAAiO,GACAY,EAAAW,EACAR,GAAA5kF,SAEAglF,GAAAhlF,EAAA,uJACA,CAYA,SAAA4lF,EAAA5lF,CAAA,EAEA,GAAAA,OAAAA,GAAAA,GAAA,GAAsC2iF,GAAO3iF,GAG7C,OAFAg1E,EAAAU,KAAA,CAAAuO,GACAjP,EAAAW,OAAA,CAAA31E,GACA8lF,EAEAd,GAAAhlF,EAAA,8JACA,CAcA,SAAA8lF,EAAA9lF,CAAA,SAEA,OAAAA,GAAAA,GAAA,GAAsC4iF,GAAM5iF,EAAA,CAC5CuzB,IAAA,EACA,IACAyhD,EAAAW,OAAA,CAAA31E,GACA8lF,GAIA9lF,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,MAAAA,GAAqE,GAAAmiF,GAAArL,EAAA,EAAyB92E,IAAU,GAAAmiF,GAAApL,EAAA,EAAiB/2E,IACzHg1E,EAAAY,IAAA,CAAAqO,GACAjP,EAAAY,IAAA,CAAAkO,GACAW,EAAAsB,EACAnB,GAAA5kF,SAEAglF,GAAAhlF,EAAA,6KACA,CAcA,SAAA+lF,EAAA/lF,CAAA,SAEA,KAAAA,GACAg1E,EAAAU,KAAA,CAAAwO,GACAlP,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,CAAAsO,GACAO,EAAAoB,GACAjB,IAIA5kF,KAAAA,GAAAA,KAAAA,GAAAA,MAAAA,GAAAA,OAAAA,GAAAA,GAAA,GAAoF2iF,GAAO3iF,IAC3Fg1E,EAAAY,IAAA,CAAAiO,GACAuB,EAAAplF,SAEAglF,GAAAhlF,EAAA,6JACA,CAcA,SAAA6lF,GAAA7lF,CAAA,SAEA,KAAAA,GAAAA,KAAAA,GACAg1E,EAAAU,KAAA,CAAAyO,GACAnP,EAAAU,KAAA,CAAA0O,GACApP,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,CAAAwO,GACA1qB,EAAA15D,EAqCA,SAAAgmF,EAAAhmF,CAAA,QAIA,CAHA,OAAAA,GACAglF,GAAAhlF,EAAA,uDAAApE,OAAAmgE,aAAA,CAAArC,GAAA,KAEA15D,IAAA05D,IACAsb,EAAAU,KAAA,CAAA0O,GACApP,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,CAAAwO,GACApP,EAAAY,IAAA,CAAAuO,GACAnP,EAAAY,IAAA,CAAAiO,GACAnqB,EAAAxjD,KAAAA,EACAuuE,EAAAW,EACAR,IAEQ,GAAAzC,GAAA9M,EAAA,EAAkBr1E,IAC1BykF,EAAAuB,EACApB,GAAA5kF,KAEAg1E,EAAAU,KAAA,CAAA2O,GACA4B,SAaAA,EAAAjmF,CAAA,SACA,OAAAA,GAAAA,IAAA05D,GAA4C,GAAAyoB,GAAA9M,EAAA,EAAkBr1E,IAC9Dg1E,EAAAY,IAAA,CAAAyO,GACA2B,EAAAhmF,KAEAg1E,EAAAW,OAAA,CAAA31E,GACAimF,EACA,EApBAjmF,GACA,GApDAA,MAAAA,EACa4hF,GAAoBrrE,IAAA,CAAAkB,EAAAu9D,EAAAkR,GAAA5B,EAAAC,EAAAC,EAAArsF,EAAAwmF,EAAAoD,EAAA,MAAAC,GAAAhiF,QAEjCglF,GAAAhlF,EAAA,oGAAkHA,CAAAA,KAAAA,EAAA,qFAAqG,IACvN,CAYA,SAAAkmF,GAAAlmF,CAAA,EAGA,OAFAg1E,EAAAY,IAAA,CAAAiO,GACAY,EAAAW,EACAR,GAAA5kF,EACA,CA+DA,SAAAd,GAAAc,CAAA,EACA,GAAAA,KAAAA,EACA,OAAA8kF,GAAA9kF,GAEAglF,GAAAhlF,EAAA,gDAAAA,CAAAA,KAAAA,GAAAA,KAAAA,EAAA,gEACA,CAYA,SAAA8kF,GAAA9kF,CAAA,EAKA,OAJAg1E,EAAAU,KAAA,CAAAuN,GACAjO,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,CAAAqN,GACAjO,EAAAY,IAAA,CAAAoN,GACAxO,CACA,CAYA,SAAAoQ,GAAA5kF,CAAA,QACA,CAAQ,EAAAmiF,GAAA9M,EAAA,EAAkBr1E,IAC1Bg1E,EAAAU,KAAA,eACAV,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,eACAuQ,IAEQ,GAAAhE,GAAAhN,EAAA,EAAan1E,IAAU,GAAAmiF,GAAApL,EAAA,EAAiB/2E,IAChDg1E,EAAAU,KAAA,iBACA0Q,SAeAA,EAAApmF,CAAA,QACA,CAAQ,EAAAmiF,GAAA9M,EAAA,EAAkBr1E,IAC1Bg1E,EAAAY,IAAA,iBACAgP,GAAA5kF,IAEQ,GAAAmiF,GAAAhN,EAAA,EAAan1E,IAAU,GAAAmiF,GAAApL,EAAA,EAAiB/2E,IAChDg1E,EAAAW,OAAA,CAAA31E,GACAomF,IAEApR,EAAAY,IAAA,iBACA6O,EAAAzkF,GACA,EA1BAA,IAEAykF,EAAAzkF,EACA,CAmCA,SAAAmmF,GAAAnmF,CAAA,EAEA,IAAAgiF,GAAAvqE,EAAAuoD,MAAA,CAAA/sC,IAAA,CAAAxb,EAAAof,GAAA,GAAAnR,IAAA,GACA,IAAAI,EAAA,IAAwB0yD,EAAY,iIAAA/gE,EAAAof,GAAA,iDAEpC,OADA/Q,EAAAy6B,GAAA,CAAkBuiC,GAAO,yDACzBh9D,CACA,CACA,OAAA8+D,GAAA5kF,EACA,CASA,SAAAglF,GAAAhlF,CAAA,CAAAgrE,CAAA,CAAAvsE,CAAA,EACA,IAAAqnB,EAAA,IAAsB0yD,EAAY,cAAAx4E,CAAAA,OAAAA,EAAA,4BAAAA,CAAAA,KAAAA,EAAA,QAAApE,OAAAmgE,aAAA,CAAA/7D,EAAA,UAWlCA,EAAA0e,QAAA,KAAAtH,WAAA,GAAAivE,QAAA,QAXkC,SAAArb,EAAA,cAAAvsE,EAAAgZ,EAAAof,GAAA,6CAAA72B,CAAAA,OAAAA,EAAA,mBAElC,OADA8lB,EAAAy6B,GAAA,CAAgBuiC,GAAO9iF,CAAAA,OAAAA,EAAA,yFACvB8lB,CACA,CACA,iBKpxBA,IAAAwgE,GAAA,CACAzqD,SAkOA,SAAAm5C,CAAA,CAAAR,CAAA,CAAAS,CAAA,EACA,OAKA,SAAAj1E,CAAA,EAIA,OAHAg1E,EAAAU,KAAA,oBACAV,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,oBACAZ,EAAAuR,OAAA,CAA2BC,GAAAvqE,CAAS,CAAAu4D,EAAAS,EACpC,CACA,EA7OAK,QAAA,EACA,EACMmR,GAAO,6DACbC,GAAA,IAAA9wE,IAAA,iHEjBA,IAAM+wE,GAAY,GAWH,SAAAC,GAAArsF,CAAA,EAIf,IAAAg7B,EAAAh7B,GAA8BosF,GAC9Bt9D,EAAA5R,IAFqC,CAErC4R,IAAA,GAEAw9D,EACAx9D,EAAAw9D,mBAAA,EAAAx9D,CAAAA,EAAAw9D,mBAAA,KACAC,EACAz9D,EAAAy9D,sBAAA,EAAAz9D,CAAAA,EAAAy9D,sBAAA,KACAC,EACA19D,EAAA09D,oBAAA,EAAA19D,CAAAA,EAAA09D,oBAAA,KAEAF,EAAAvtF,IAAA,CAA2B0tF,SDlBpBzsF,CAAA,EACP,IAAAg7B,EAAAp1B,OAAA0zC,MAAA,CACA,CACA17C,MAAaA,GAAA8uF,EAAM,CAAA/kE,MAAA,CAAQglE,MAC3BvI,aAAA,CAAqBwI,YAAA,KAAAnH,WAAA,UACrB+B,UAAA,EACA,EACAxnF,GAGA,MAAS,GAAA6sF,GAAAC,CAAA,EAAiB,CACtBC,SDUG/sF,CAAA,EACP,IAAAgtF,EAAA,CACA1rD,SAwBA,SAAAm5C,CAAA,CAAAR,CAAA,CAAAS,CAAA,EACA,IAAAx9D,EAAA,KACA+vE,EAAA/vE,EAAAuoD,MAAA,CAAAwnB,uBAAA,EAAA/vE,CAAAA,EAAAuoD,MAAA,CAAAwnB,uBAAA,KACAtF,EAAA,KAAArK,MAAA,CAAA58E,MAAA,GACA6tB,EAAA,GACA,OAAArR,EAAAgwE,SAAA,CAAAxS,EAYA,SAAAj1E,CAAA,SAEA,EAAA62B,GAAA,GAAAxR,MAAA,GAAA4vD,EAAAj1E,IACAg1E,EAAAU,KAAA,aACAV,EAAAU,KAAA,iBACAV,EAAAW,OAAA,CAAA31E,GAEA8oB,GAAAltB,OAAAC,YAAA,CAAAmE,GACA2mE,EACA,EAYA,SAAAA,EAAA3mE,CAAA,QACA,CAAU,EAAAmiF,GAAAuF,EAAA,EAAU1nF,IACpBg1E,EAAAW,OAAA,CAAA31E,GAGA8oB,GAAAltB,OAAAC,YAAA,CAAAmE,GACA2mE,GAEA,CAAA79C,WAAAA,GAAAA,WAAAA,CAAA,GAAA9oB,KAAAA,GACAg1E,EAAAW,OAAA,CAAA31E,GACA65B,GAEAo7C,EAAAj1E,EACA,CAYA,SAAA65B,EAAA75B,CAAA,SACA,OAAAA,GAA2B,GAAAmiF,GAAA9M,EAAA,EAAkBr1E,IAC7Cg1E,EAAAY,IAAA,iBACA55E,EAAAgE,KAEAg1E,EAAAW,OAAA,CAAA31E,GACA65B,EACA,CAaA,SAAA79B,EAAAgE,CAAA,SACA,OAAAA,EACA2nF,EAAA3nF,GAEU,GAAAmiF,GAAA9M,EAAA,EAAkBr1E,GAC5Bg1E,EAAA3iC,KAAA,CAAAi0C,GAAAqB,EAAAC,GAAA5nF,IAEAg1E,EAAAU,KAAA,iBACA77C,EAAA75B,GACA,CAaA,SAAA4nF,EAAA5nF,CAAA,EAIA,OAHAg1E,EAAAU,KAAA,eACAV,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,eACA55E,CACA,CAYA,SAAA2rF,EAAA3nF,CAAA,EACA,IAAA8f,EAAqB4+D,GAAajnE,EAAAogE,MAAA,CAAAr8E,KAAA,CAAA0mF,GAAA,CAClC/pF,MAAAA,EACAwmF,aAAAA,EACAQ,WAAA,iBACAxtC,OAAA61C,EAAAvsF,MAAA,UAAAusF,EAAApvE,IAAA,aACA,GACA,GAAA0H,EAAAgG,KAAA,EAGA,GAAA9lB,OAAAA,GAAA8f,EAAAg/D,OAAA,CACA,OAAA8I,EAAA5nF,GAEA,IAAA8lB,EAAA,IAA0B0yD,EAAY,6CACtCj8C,MAAAzc,EAAAgG,KAAA,CACAgzD,MAAA,CACApzD,KAAA5F,EAAAgG,KAAA,CAAA6oD,GAAA,CAAAjpD,IAAA,CACAL,OAAAvF,EAAAgG,KAAA,CAAA6oD,GAAA,CAAAtpD,MAAA,GACA/U,OAAAwP,EAAAgG,KAAA,CAAA/qB,GAAA,EAEAi+E,OAAA,QACApzD,OAAA,+BACA,EAEA,OADAE,EAAAy6B,GAAA,CAAoBkmC,GAAO,4CAC3B3gE,CACA,CAEA0hE,EAAAvsF,MAAA,IACA6kB,EAAA08D,MAAA,CAAAuD,IAAA,CAAAT,KAAA,GAEA,IAAAr+D,EAAA,GACA,OAAAA,EAAAnB,EAAA08D,MAAA,CAAAuD,IAAA,CAAA9kF,MAAA,GACA,IAAA4B,EAAAijB,EAAA08D,MAAA,CAAAuD,IAAA,CAAA9+D,EAAA,CACA,IAAAylE,GAAAvvE,GAAA,CAAAta,EAAA5C,IAAA,GACA,IAAA6rB,EAAA,IAA4B0yD,EAAY,eAAA37E,EAAA5C,IAAA,iDACxC6+E,MAAmBsI,GAAkBvkF,GACrCm8E,OAAA,UACApzD,OAAA,+BACA,EAEA,OADAE,EAAAy6B,GAAA,CAAsBkmC,GAAO,4DAC7B3gE,CACA,CAKA,GAAAjpB,sBAAAA,EAAA5C,IAAA,GAAAwd,EAAAgwE,SAAA,EACA,IAAAxmE,EAAA,GACA,OAAAA,EAAApkB,EAAAqjD,UAAA,CAAAjlD,MAAA,GACA,IAAA4sF,EAAAhrF,EAAAqjD,UAAA,CAAAj/B,EAAA,CACAumE,EAAAluF,IAAA,CAAAuuF,EAAAC,KAAA,CAAA5tF,IAAA,CACA,CACA,CACA,CAIA,OAHAiG,OAAA0zC,MAAA,CAAAmhC,EAAAY,IAAA,aAAAr7E,EAAAwnF,SAAA,EACAvF,OAAA18D,EAAA08D,MAAA,EACQtmE,KAAAA,GACRs+D,EAAAx0E,EACA,CACA,EA5MA+nF,SAAA,EACA,EACA,IAAAxtF,GAAA,CAAAA,EAAApC,KAAA,GAAAoC,EAAApC,KAAA,CAAAu9B,KAAA,CACA,yEAEA,IAAAv9B,EAAAoC,EAAApC,KAAA,CACAwmF,EAAAx+E,OAAA0zC,MAAA,EACAszC,YAAA,KACAnH,WAAA,QACA,EAAGzlF,EAAAokF,YAAA,EACH7iF,UAAA,EACA,GACA,OACA0wD,KAAA,CACA,IAAA+6B,EACA,IAAAA,CACA,CACA,CA4LA,EC1NYhyD,GACRyyD,SRUGztF,CAAA,MAYPokF,EAXA,IAAAsJ,EAAA1tF,GAAA,GACAwnF,EAAAkG,EAAAlG,SAAA,CACA5pF,EAAA8vF,EAAA9vF,KAAA,CAMAi8D,EAAA6zB,EAAA7zB,MAAA,CACAsrB,EAAAuI,EAAAvI,UAAA,CAMA,SAHAA,GACAA,CAAAA,EAAA,IAEAvnF,EAAA,CACA,IAAAA,EAAAynF,iBAAA,CACA,+EAEAjB,EAAAx+E,OAAA0zC,MAAA,EACAszC,YAAA,KACAnH,WAAA,QACA,EAAKiI,EAAAtJ,YAAA,CACL,MAAI,GAAAsJ,EAAAtJ,YAAA,EAAAsJ,EAAAlG,SAAA,CACJ,yEAEA,OACAv1B,KAAA,CACA,KACAtyD,KAAA,oBACA2hC,SAuBA,SAAAm5C,CAAA,CAAAR,CAAA,CAAAS,CAAA,EACA,IAAAx9D,EAAA,KACA,OAYA,SAAAzX,CAAA,EAIA,OAca4hF,GAAoBrrE,IAAA,CAAAkB,EAAAu9D,EAAA53C,EAAA,uEAAAjlC,EAAAwmF,EAAAoD,EAAA3tB,EAAAsrB,GAdjC1/E,EACA,EA0BA,SAAAo9B,EAAAp9B,CAAA,EACA,MAAa,GAAAmiF,GAAAhN,EAAA,EAAan1E,GAAS,GAAAkoF,GAAA/qE,CAAA,EAAY63D,EAAA7zD,EAAA,cAAAnhB,GAAAmhB,EAAAnhB,EAC/C,CAYA,SAAAmhB,EAAAnhB,CAAA,EAwBA,IAAAmoF,EAAA1wE,EAAAuoD,MAAA,CAAAwX,UAAA,CAAAhrB,IAAA,KAGA47B,EAAA5Q,CAFAt/D,MAAAC,OAAA,CAAAgwE,GAAAA,EACAA,EAAA,CAAAA,EAAA,KACAllE,IAAA,UAAA6lC,CAAA,EACA,MAAAA,kBAAAA,EAAA5uD,IAAA,UAIA,KAAA8F,GAAAooF,EACApT,EAAAuR,OAAA,CAAA6B,EAAAjnE,EAAA8zD,GAAAj1E,GAEAA,OAAAA,GAA8B,GAAAmiF,GAAA9M,EAAA,EAAkBr1E,GAAAw0E,EAAAx0E,GAAAi1E,EAAAj1E,EAChD,CACA,EAtHA+nF,SAAA,EACA,CACA,EACAxxD,KAAA,CACA,KACAr8B,KAAA,oBACA2hC,SA6HA,SAAAm5C,CAAA,CAAAR,CAAA,EACA,IAAA/8D,EAAA,KACA,OAaA,SAAAzX,CAAA,EACA,OAAa4hF,GAAoBrrE,IAAA,CAAAkB,EAAAu9D,EAAAR,EAAA,uEAAAr8E,EAAAwmF,EAAAoD,EAAA3tB,EAAAsrB,EAAA,IAAA1/E,EACjC,CACA,CA9IA,CACA,CACA,CA6IA,EQhMiBu1B,GACb8yD,SHJG9tF,CAAA,MDCApC,EAAAoC,EDHApC,EAAAoC,MEMPokF,EAHA,IAAAppD,EAAAh7B,GAAA,GACApC,EAAAo9B,EAAAp9B,KAAA,CAGA,GAAAA,EAAA,CACA,IAAAA,EAAAu9B,KAAA,GAAAv9B,EAAAynF,iBAAA,CACA,+EAEAjB,EAAAx+E,OAAA0zC,MAAA,EACAszC,YAAA,KACAnH,WAAA,QACA,EAAKzqD,EAAAopD,YAAA,EACL7iF,UAAA,EACA,EACA,MAAI,GAAAy5B,EAAAopD,YAAA,EAAAppD,EAAAwsD,SAAA,CACJ,yEAEA,OACAv1B,KAAA,CACA,IDnBOr0D,ECmBYA,GAAA+d,KAAAA,EDnBZ3b,ECmBY,CACnBokF,aAAAA,EACAoD,UAAAxsD,EAAAwsD,SAAA,EAAA7rE,KAAAA,CACA,EDrBA,CACAhc,KAAA,gBACA2hC,SAeA,SAAAm5C,CAAA,CAAAR,CAAA,CAAAS,CAAA,EACA,IAAAx9D,EAAA,KACA,OAYA,SAAAzX,CAAA,EAIA,OAAA85B,EAAA95B,EACA,EAYA,SAAA85B,EAAA95B,CAAA,EACA,OAAa+iF,GAAUxsE,IAAA,CAAAkB,EAAAu9D,EAAA53C,EAAA63C,EAAA98E,EAAAoC,EAAAokF,YAAA,CAAApkF,EAAAwnF,SAAA,20BAAA/hF,EACvB,CAYA,SAAAo9B,EAAAp9B,CAAA,EACA,MAAa,GAAAmiF,GAAAhN,EAAA,EAAan1E,GAAS,GAAAkoF,GAAA/qE,CAAA,EAAY63D,EAAA7zD,EAAA,cAAAnhB,GAAAmhB,EAAAnhB,EAC/C,CAYA,SAAAmhB,EAAAnhB,CAAA,EAIA,IAAAsoF,EAAA7wE,EAAAuoD,MAAA,CAAAwX,UAAA,CAAAhrB,IAAA,MAGAvuD,EAAAu5E,CADAt/D,MAAAC,OAAA,CAAAmwE,GAAAA,EAAAA,EAAA,CAAAA,EAAA,KACArlE,IAAA,CAAA6lC,GAAAA,sBAAAA,EAAA5uD,IAAA,EAGA,OAAA8F,KAAAA,EAnDA85B,EAqDA95B,GAAAA,MAAAA,GAAA/B,EAAA+2E,EAAAuR,OAAA,CAAAtoF,EAAAkjB,EAAA8zD,GAAAj1E,GAAAA,OAAAA,GAAgH,GAAAmiF,GAAA9M,EAAA,EAAkBr1E,GAAAw0E,EAAAx0E,GAAAi1E,EAAAj1E,EAClI,CACA,EAvFA+nF,SAAA,EACA,ECkBA,EACAxxD,KAAA,CACA,IF5BOp+B,EE4BYA,GAAA+d,KAAAA,EF5BZ3b,EE4BY,CACnBokF,aAAAA,EACAoD,UAAAxsD,EAAAwsD,SAAA,EAAA7rE,KAAAA,CACA,EF9BA,CACAhc,KAAA,gBACA2hC,SAcA,SAAAm5C,CAAA,CAAAR,CAAA,CAAAS,CAAA,EACA,OAAW8N,GAAUxsE,IAAA,MAAAy+D,EAAAR,EAAAS,EAAA98E,EAAAoC,EAAAokF,YAAA,CAAApkF,EAAAwnF,SAAA,00BACrB,CAfA,EE4BA,CACA,CACA,EG5BUxsD,GFtBV,CACAgzD,QAAA,CAAc/xB,KAAA,kDACd,EEsBA,CACA,ECEgCjhC,IAChCuxD,EAAAxtF,IAAA,CfhBA,CdAA,CACAo8E,MAAA,CACA8S,kBAAApM,EACAqM,kBAAApM,CACA,EACAzG,KAAA,CACA4S,kBAAAlM,EACAoM,uBAAAhM,EACA+L,kBAAAnM,EACAqM,uBAAAjM,CACA,CACA,EcTIkM,WFmDJ,OACAC,eAAA,sBACAnT,MAAA,CACAoT,cAAAC,EACAC,2BAAAC,EACAC,uBAAAC,EACAC,iCAAAC,EACAC,mCAAAxgE,EACAygE,sCAAAzgE,EACA0gE,+BAAAC,EAEAC,cAAAX,EACAY,2BAAAV,EACAW,uBAAAT,EACAU,iCAAAR,EACAS,mCAAAhhE,EACAihE,sCAAAjhE,EACAkhE,+BAAAP,CACA,EACA7T,KAAA,CACAoT,2BAAAiB,EACAC,yBAAAC,EACAC,wBAAAC,EACAC,uBAAAC,EACAnB,iCAAAoB,EACAC,sCAAAphE,EACAqhE,kCAAAC,EACAC,gCAAAC,EACAvB,mCAAAwB,EACAC,wCAAA1hE,EACAkgE,sCACAyB,EACAC,2CAAA5hE,EACAmgE,+BAAA0B,EACApC,cAAAqC,EAEAxB,2BAAAM,EACAmB,yBAAAjB,EACAkB,wBAAAhB,EACAiB,uBAAAf,EACAV,iCAAAW,EACAe,sCAAAliE,EACAmiE,kCAAAb,EACAc,gCAAAZ,EACAf,mCAAAgB,EACAY,wCAAAriE,EACA0gE,sCACAiB,EACAW,2CAAAtiE,EACA2gE,+BAAAkB,EACAxB,cAAAyB,CACA,CACA,EAMA,SAAAriE,IACA,KAAAA,MAAA,EACA,CAUA,SAAAyvD,EAAAzvB,CAAA,EACA,OAAYpjC,KAAAojC,EAAApjC,IAAA,CAAAL,OAAAyjC,EAAAzjC,MAAA,CAAA/U,OAAAw4C,EAAAx4C,MAAA,CACZ,CAMA,SAAA+Y,EAAAhC,CAAA,EACA,KAAAs1D,MAAA,CAAAjH,KAAA,CAAArsD,IAAA,CAAA9S,IAAA,MAAA8Q,GACA,KAAAs1D,MAAA,CAAA/G,IAAA,CAAAvsD,IAAA,CAAA9S,IAAA,MAAA8Q,EACA,CAMA,SAAA0hE,EAAA1hE,CAAA,EAEA,IAAAyW,EAAA,CACA5jC,KAAAgc,KAAAA,EACAlX,WAAA,GACAiV,MAAA,GACA/U,YAAA,GACA/D,MAAAksB,EAAAlsB,KAAA,CACAgmB,IAAAkG,EAAAlG,GAAA,CAEA,MAAAkI,IAAA,CAAAuiE,cAAA,QAAAviE,IAAA,CAAAuiE,cAAA,KACA,KAAAviE,IAAA,CAAAwiE,SAAA,CAAA/tD,EACA,KAAAhV,MAAA,EACA,CAMA,SAAAmgE,EAAA5hE,CAAA,EACA,IAAA2R,EAAA,KAAA3P,IAAA,CAAAuiE,cAAA,CAGA,GAFI,GAAAnP,EAAAjI,EAAA,EAAMx7C,EAAA,6BAEVA,IAAAA,EAAA/9B,MAAA,CACA,UAAgBu9E,EAChB,kEACA,CAASr9E,MAAAksB,EAAAlsB,KAAA,CAAAgmB,IAAAkG,EAAAlG,GAAA,EACT,8CAGA,CAMA,SAAA2qE,EAAAzkE,CAAA,EACA,IAAAyW,EAAA,KAAAzU,IAAA,CAAAwiE,SAAA,CAGA,GAFI,GAAApP,EAAAjI,EAAA,EAAM12C,EAAA,wBAEVA,EAAA7pB,KAAA,CACA,UAAgBukE,EAChB,mEACA,CAASr9E,MAAAksB,EAAAlsB,KAAA,CAAAgmB,IAAAkG,EAAAlG,GAAA,EACT,0CAGA,CAMA,SAAAsoE,EAAApiE,CAAA,EACA,IAAAyW,EAAA,KAAAzU,IAAA,CAAAwiE,SAAA,CAGA,GAFI,GAAApP,EAAAjI,EAAA,EAAM12C,EAAA,wBAEVA,EAAA7pB,KAAA,CACA,UAAgBukE,EAChB,gFACA,CAASr9E,MAAAksB,EAAAlsB,KAAA,CAAAgmB,IAAAkG,EAAAlG,GAAA,EACT,mDAGA,CAMA,SAAA8oE,IACA,IAAAnsD,EAAA,KAAAzU,IAAA,CAAAwiE,SAAA,CACI,GAAApP,EAAAjI,EAAA,EAAM12C,EAAA,wBACVA,EAAA7pB,KAAA,GACA,CAMA,SAAAk2E,EAAA9iE,CAAA,EACA,IAAAyW,EAAA,KAAAzU,IAAA,CAAAwiE,SAAA,CACI,GAAApP,EAAAjI,EAAA,EAAM12C,EAAA,wBACVA,EAAA5jC,IAAA,MAAA6xF,cAAA,CAAA1kE,EACA,CAMA,SAAAgjE,EAAAhjE,CAAA,EACA,IAAAyW,EAAA,KAAAzU,IAAA,CAAAwiE,SAAA,CACI,GAAApP,EAAAjI,EAAA,EAAM12C,EAAA,wBACVA,EAAA5jC,IAAA,WAAA6xF,cAAA,CAAA1kE,EACA,CAMA,SAAAkjE,EAAAljE,CAAA,EACA,IAAAyW,EAAA,KAAAzU,IAAA,CAAAwiE,SAAA,CACI,GAAApP,EAAAjI,EAAA,EAAM12C,EAAA,wBACVA,EAAA5jC,IAAA,WAAA6xF,cAAA,CAAA1kE,EACA,CAMA,SAAA8hE,EAAA9hE,CAAA,EACA,IAAAyW,EAAA,KAAAzU,IAAA,CAAAwiE,SAAA,CACI,GAAApP,EAAAjI,EAAA,EAAM12C,EAAA,wBACVguD,EAAAv1E,IAAA,MAAA8Q,GACAyW,EAAA9+B,UAAA,CAAA1F,IAAA,EACAW,KAAA,kBACAC,KAAA,GACA6C,MAAA,KACA0oB,SAAA,CACAtqB,MAAAo9E,EAAAlxD,EAAAlsB,KAAA,EAEAgmB,IAAAjL,KAAAA,CACA,CACA,EACA,CAMA,SAAAmzE,EAAAhiE,CAAA,EACA,IAAAyW,EAAA,KAAAzU,IAAA,CAAAwiE,SAAA,CACI,GAAApP,EAAAjI,EAAA,EAAM12C,EAAA,wBACVguD,EAAAv1E,IAAA,MAAA8Q,GACAyW,EAAA9+B,UAAA,CAAA1F,IAAA,EAAyBW,KAAA,4BAAA8C,MAAA,KACzB,KAAA+rB,MAAA,EACA,CAMA,SAAA0hE,EAAAnjE,CAAA,EACA,IAAAyW,EAAA,KAAAzU,IAAA,CAAAwiE,SAAA,CACI,GAAApP,EAAAjI,EAAA,EAAM12C,EAAA,wBACV,IAAAf,EAAAe,EAAA9+B,UAAA,CAAA8+B,EAAA9+B,UAAA,CAAA/D,MAAA,IACI,GAAAwhF,EAAAjI,EAAA,EAAMz3C,8BAAAA,EAAA9iC,IAAA,EACV,IAAAuiF,EAAAn1D,EAAAm1D,MAAA,CAEAz/C,EAAAhgC,KAAA,MAAAw/E,MAAA,GAEAC,GACAz/C,CAAAA,EAAA1T,IAAA,EAAmBmzD,OAAAA,CAAA,EAEnB,CAMA,SAAAmO,EAAAtjE,CAAA,EACA,IAAAyW,EAAA,KAAAzU,IAAA,CAAAwiE,SAAA,CACI,GAAApP,EAAAjI,EAAA,EAAM12C,EAAA,wBACV,IAAAjhC,EAAAihC,EAAA9+B,UAAA,CAAA8+B,EAAA9+B,UAAA,CAAA/D,MAAA,IACI,GAAAwhF,EAAAjI,EAAA,EAAM33E,oBAAAA,EAAA5C,IAAA,EACV4C,EAAA3C,IAAA,MAAA6xF,cAAA,CAAA1kE,GACI,GAAAo1D,EAAAjI,EAAA,EAAM33E,KAAAqZ,IAAArZ,EAAA4oB,QAAA,EACV5oB,EAAA4oB,QAAA,CAAAtE,GAAA,CAAAo3D,EAAAlxD,EAAAlG,GAAA,CACA,CAMA,SAAA0pE,EAAAxjE,CAAA,EACA,IAAAyW,EAAA,KAAAzU,IAAA,CAAAwiE,SAAA,CACI,GAAApP,EAAAjI,EAAA,EAAM12C,EAAA,wBACV,IAAAjhC,EAAAihC,EAAA9+B,UAAA,CAAA8+B,EAAA9+B,UAAA,CAAA/D,MAAA,IACI,GAAAwhF,EAAAjI,EAAA,EAAM33E,oBAAAA,EAAA5C,IAAA,EACV4C,EAAA3C,IAAA,WAAA6xF,cAAA,CAAA1kE,GACI,GAAAo1D,EAAAjI,EAAA,EAAM33E,KAAAqZ,IAAArZ,EAAA4oB,QAAA,EACV5oB,EAAA4oB,QAAA,CAAAtE,GAAA,CAAAo3D,EAAAlxD,EAAAlG,GAAA,CACA,CAMA,SAAA2pE,EAAAzjE,CAAA,EACA,IAAAyW,EAAA,KAAAzU,IAAA,CAAAwiE,SAAA,CACI,GAAApP,EAAAjI,EAAA,EAAM12C,EAAA,wBACV,IAAAjhC,EAAAihC,EAAA9+B,UAAA,CAAA8+B,EAAA9+B,UAAA,CAAA/D,MAAA,IACA4B,EAAAE,KAAA,CAAiBivF,SJ9TVjvF,CAAA,CAAAxC,EAAA,EAA0C,MAWjDg+E,EAEA9iD,EAmBAxO,EA/BA,IAAAmP,EACA,iBAAA77B,EAAA67B,UAAA,CACA77B,EAAA67B,UAAA,CAAA/6B,UAAA,IACAd,EAAA67B,UAAA,CAEAtW,EAAA,GACAmB,EAAA,EACAsE,EAAA,GACAlF,EAAA,EAMA9lB,CAAAA,EAAAkrB,QAAA,GACA,UAAAlrB,EAAAkrB,QAAA,aAAAlrB,EAAAkrB,QAAA,EAEAgQ,EAAAl7B,EAAAkrB,QAAA,CAAAgQ,MAAA,CAEA8iD,EAAAh+E,EAAAkrB,QAAA,CAAAtqB,KAAA,EAEAo9E,EAAAh+E,EAAAkrB,QAAA,EAIA,IAAAC,EAAA,CAAA6yD,EAAAA,EAAA7yD,IAAA,OACAL,EAAA,CAAAkzD,EAAAA,EAAAlzD,MAAA,OAGA3C,EAAAmU,IAOA,IAFA5V,IAEA,EAAAA,GAAAlkB,EAAA9B,MAAA,EAQA,GANA,KAAAgsB,GACA5B,CAAAA,EAAA,CAAAoQ,EAAAA,CAAA,CAAAlQ,EAAA,QAKA0B,KAFAA,CAAAA,EAAAlqB,EAAA1B,UAAA,CAAA4lB,EAAA,EAEA,KA0BAhnB,EAzBA,IAAA87B,EAAAh5B,EAAA1B,UAAA,CAAA4lB,EAAA,GAGA,GACA8U,IAAAA,GACAA,KAAAA,GACAA,KAAAA,GACAA,KAAAA,GACAA,KAAAA,GACAA,KAAAA,GACA3b,OAAAH,KAAA,CAAA8b,IACAK,GAAAL,IAAAK,EACA,CAIA/V,GAAAxkB,EAAAorB,GACA5B,IACA,QACA,CAEA,IAAAlqB,EAAA8lB,EAAA,EACAiV,EAAA/6B,EACAgmB,EAAAhmB,EAIA,GAAA46B,KAAAA,EAAA,CAEA5U,EAAA,EAAA+U,EAGA,IAAAH,EAAAh5B,EAAA1B,UAAA,CAAA8lB,EAEA4U,CAAA,KAAAA,GAAAA,MAAAA,GAEA97B,EAAA,cACAknB,EAAA,EAAA+U,GAGAj8B,EAAA,SAEA,MAEAA,EAAA,QAGA,IAAAgyF,EAAA,GACA5O,EAAA,GACAzoD,EAAA,GAIAn4B,EACAxC,UAAAA,EACYgjF,EACZhjF,YAAAA,EACY8iF,EACAC,EAIZ,IAFA77D,IAEA,EAAAA,GAAApkB,EAAA9B,MAAA,GACA,IAAA86B,EAAAh5B,EAAA1B,UAAA,CAAA8lB,GAEA,IAAA1kB,EAAAs5B,GACA,MAGAnB,GAAA/4B,EAAAk6B,GAKA,UAAA97B,GAAgC4iF,EAAuB9wD,QAAA,CAAA6I,KACvDq3D,EAAAr3D,EAEAyoD,EAA+BD,EAA6BxoD,GAE5D,CAEA,IAAAiB,EAAA94B,KAAAA,EAAA1B,UAAA,CAAA8lB,GAEA,GAAA0U,EAAA,CACA1U,IAEA,IAAA+qE,EACAjyF,UAAAA,GAA6BmjF,EAA6BxoD,GAE1Ds3D,IACAD,EAAAr3D,EACAyoD,EAAA6O,EAEA,CAEA,IAAAnwE,EAAA,EAAAoF,EAAAhmB,EACA26B,EAAA,GAEA,MAAAv7B,CAAA,IAAAA,EAAA87B,aAAA,EAEQ,GAAAzB,GAMA,GAAA36B,UAAAA,EAAA,CAGR,GAAA47B,GAAA,CAAAwnD,EACArnD,EAAA,UAWA,GAPAi2D,IAAAr3D,IAEA7Y,EAAA,EADAoF,CAAAA,EAAA+U,EAAA+1D,EAAAhxF,MAAA,EACAi7B,EACAL,EAAA,IAIA,CAAAA,EAAA,CACA,IAAA5P,EAAAgmE,EACA,EACA,EAEA,GAAA1xF,EAAA28B,SAAA,EACA,IAAAnB,EAAAh5B,EAAA1B,UAAA,CAAA8lB,EAEA4U,CAAA,KAAAA,GACAC,EAAA/P,EAAAlK,GACAshE,EAAA,IACyBJ,EAAgBlnD,GACzCsnD,EAAA,GAEArnD,EAAA/P,EAAAlK,EAEA,MACAia,EAAA/P,EAAAlK,EAEA,CAGA+Z,EAAAunD,CACA,KAAQ,KA4JRr9E,EAUAA,EArKA61B,GAGAG,EAAA,EAAAja,GAKA,IAAAowE,EAAA/xE,OAAA1d,QAAA,CACAk4B,EACA36B,gBAAAA,EAAA,OAKA,GA6IA,CADA+F,EA5IAmsF,IA6IA,OAAAnsF,GAAA,OAAAA,EAAA,QA5IAg2B,EAAA,EAAAja,GACA+Z,EAAAj6B,EAAA,YACU,GAAAswF,KAA0BrP,EAGpC9mD,EAAA,EAAAja,GACA+Z,EAAsBgnD,CAAyB,CAAAqP,EAAA,KACrC,CAEV,IAAAl2D,EAAA,GA8IA,EAFAj2B,EAzIAmsF,IA2IA,GAAAnsF,GAAA,GACAA,KAAAA,GACAA,GAAA,IAAAA,GAAA,IACAA,GAAA,KAAAA,GAAA,KACAA,GAAA,OAAAA,GAAA,OACA,CAAAA,MAAAA,CAAA,UACA,CAAAA,MAAAA,CAAA,WAhJAg2B,EAAA,EAAAja,GAIAowE,EAAA,QACAA,GAAA,MACAl2D,GAAAp6B,EAAA,cACAswF,EAAA,MAAAA,KAAAA,GAGAr2D,EAAAG,EAAAp6B,EAAAswF,EACA,CACA,MAnFA,UAAAlyF,GACA+7B,EAAA,EAAAja,GAsFA,GAAA+Z,EAAA,CACAsB,IAEA1U,EAAAmU,IACA5V,EAAAE,EAAA,EACAkE,GAAAlE,EAAAhmB,EAAA,EACA2kB,EAAAxmB,IAAA,CAAAw8B,GACA,IAAA54B,EAAA25B,GACA35B,CAAAA,EAAAoT,MAAA,GAEA/V,EAAAu7B,SAAA,EACAv7B,EAAAu7B,SAAA,CAAAvf,IAAA,CACAhc,EAAAo8B,gBAAA,CACAb,EACA,CAAa36B,MAAAunB,EAAAvB,IAAAjkB,CAAA,EACbH,EAAAvB,KAAA,CAAAL,EAAA,EAAAgmB,IAIAuB,EAAAxlB,CACA,MAKA03B,EAAA73B,EAAAvB,KAAA,CAAAL,EAAA,EAAAgmB,GACAd,GAAAuU,EACAvP,GAAAuP,EAAA35B,MAAA,CACAgmB,EAAAE,EAAA,CAEA,MAEA,KAAA8F,IACAvB,IACAH,IACAF,EAAA,GAGAjL,OAAAH,KAAA,CAAAgN,GACAmQ,KAEA/W,GAAAxkB,EAAAorB,GACA5B,KAMA,OAAAvF,EAAA1H,IAAA,KAGA,SAAAye,IACA,OACAnR,KAAAA,EACAL,OAAAA,EACA/U,OAAA2Q,EAAA,EAAAs3D,EAAAA,EAAAjoE,MAAA,OACA,CACA,CAQA,SAAA0lB,EAAAh2B,CAAA,CAAAsQ,CAAA,EAEA,IAAAmV,CAEAlrB,CAAAA,EAAAy7B,OAAA,GACAvQ,EAAAoR,IACApR,EAAAJ,MAAA,EAAA/U,EACAmV,EAAAnV,MAAA,EAAAA,EAEA/V,EAAAy7B,OAAA,CAAAzf,IAAA,CACAhc,EAAAq8B,cAAA,CACAE,CAAA,CAAA92B,EAAA,CACAylB,EACAzlB,GAGA,CAOA,SAAAo3B,IACA/W,IACAP,EAAAxmB,IAAA,CAAA+mB,GAEA9lB,EAAAg8B,IAAA,EACAh8B,EAAAg8B,IAAA,CAAAhgB,IAAA,CAAAhc,EAAAm8B,WAAA,CAAArW,EAAA,CACAllB,MAAAunB,EACAvB,IAAA0V,GACA,GAGAxW,EAAA,GAEA,CACA,EIpB8B,KAAAk8D,MAAA,IAAiBlmD,cAAA,KAC3C,GAAAomD,EAAAjI,EAAA,EAAM33E,KAAAqZ,IAAArZ,EAAA4oB,QAAA,EACV5oB,EAAA4oB,QAAA,CAAAtE,GAAA,CAAAo3D,EAAAlxD,EAAAlG,GAAA,CACA,CAMA,SAAA6pE,EAAA3jE,CAAA,EACA,IAAAyW,EAAA,KAAAzU,IAAA,CAAAwiE,SAAA,CACI,GAAApP,EAAAjI,EAAA,EAAM12C,EAAA,wBACV,IAAAf,EAAAe,EAAA9+B,UAAA,CAAA8+B,EAAA9+B,UAAA,CAAA/D,MAAA,IACI,GAAAwhF,EAAAjI,EAAA,EAAMz3C,oBAAAA,EAAA9iC,IAAA,EAEV,IAAA4C,EAAA,CAAkB5C,KAAA,iCAAA8C,MAAA,KAAAw/E,MAAA,IAClBC,EAAAn1D,EAAAm1D,MAAA,CAEAA,GACA3/E,CAAAA,EAAAwsB,IAAA,EAAmBmzD,OAAAA,CAAA,GAGnBz/C,EAAAhgC,KAAA,CAAAF,EACI,GAAA4/E,EAAAjI,EAAA,EAAMz3C,KAAA7mB,IAAA6mB,EAAAtX,QAAA,EACVsX,EAAAtX,QAAA,CAAAtE,GAAA,CAAAo3D,EAAAlxD,EAAAlG,GAAA,CACA,CAMA,SAAA+pE,IACA,IAAAptD,EAAA,KAAAzU,IAAA,CAAAwiE,SAAA,CACI,GAAApP,EAAAjI,EAAA,EAAM12C,EAAA,wBAEVA,EAAA5+B,WAAA,GACA,CAMA,SAAAisF,EAAA9jE,CAAA,EACA,IAAAyW,EAAA,KAAAzU,IAAA,CAAAwiE,SAAA,CACI,GAAApP,EAAAjI,EAAA,EAAM12C,EAAA,wBACV,IAAA9E,EAAA,KAAA3P,IAAA,CAAAuiE,cAAA,CACI,GAAAnP,EAAAjI,EAAA,EAAMx7C,EAAA,6BACV,IAAA+D,EAAA/D,CAAA,CAAAA,EAAA/9B,MAAA,IAEA,GAAA6iC,EAAA7pB,KAAA,EAAA8oB,EAAA7iC,IAAA,GAAA4jC,EAAA5jC,IAAA,CACA,UAAgBs+E,EAChB,2BACA4T,EAAAtuD,GACA,8CACAsuD,EAAArvD,GACA,MACUu7C,EAAiBv7C,GAC3B,IACA,CAAS5hC,MAAAksB,EAAAlsB,KAAA,CAAAgmB,IAAAkG,EAAAlG,GAAA,EACT,uCAKA,KAAAo7D,MAAA,GAEAz+C,EAAA7pB,KAAA,CACA+kB,EAAAt/B,GAAA,GAEA,KAAAg8E,KAAA,CACA,CACAz7E,KACAotB,kBAAAA,EAAAptB,IAAA,CACA,oBACA,oBACAC,KAAA4jC,EAAA5jC,IAAA,OACA8E,WAAA8+B,EAAA9+B,UAAA,CACAK,SAAA,IAEAgoB,EACAglE,GAIAvuD,EAAA5+B,WAAA,EAAA4+B,EAAA7pB,KAAA,CACA,KAAA2hE,IAAA,CAAAvuD,EAAAilE,GAEAtzD,EAAA1/B,IAAA,CAAAwkC,EAEA,CAMA,SAAAuuD,EAAAE,CAAA,CAAAv4E,CAAA,EACA,IAAAglB,EAAA,KAAA3P,IAAA,CAAAuiE,cAAA,CACI,GAAAnP,EAAAjI,EAAA,EAAMx7C,EAAA,6BACV,IAAA8E,EAAA9E,CAAA,CAAAA,EAAA/9B,MAAA,IACI,GAAAwhF,EAAAjI,EAAA,EAAM12C,EAAA,wBACV,IAAAg7C,EAAAyT,EAAA,uBAAAA,EAAAtyF,IAAA,QACAwrB,EAAA8mE,EACA,CAASpxF,MAAAoxF,EAAApxF,KAAA,CAAAgmB,IAAAorE,EAAAprE,GAAA,EACTjL,KAAAA,CAEA,WAAcsiE,EACd,+BACA4T,EAAAtuD,GACA,MACQw6C,EAAiB,CAAEn9E,MAAA6Y,EAAA7Y,KAAA,CAAAgmB,IAAAnN,EAAAmN,GAAA,GAC3B,IACA23D,EACArzD,EACA,sCAEA,CAMA,SAAA6mE,EAAAz0E,CAAA,CAAAtD,CAAA,EACA,IAAAupB,EAAA,KAAAzU,IAAA,CAAAwiE,SAAA,MACI,GAAApP,EAAAjI,EAAA,EAAM12C,EAAA,wBAEV,IAAc06C,EACd,6BACA4T,EAAAtuD,GACA,8BACAvpB,EAAAta,IAAA,CACA,MACQq+E,EAAiB/jE,EAAA4M,GAAA,EACzB,gDACA5M,EAAAta,IAAA,CACA,MACQq+E,EAAiB/jE,EAAApZ,KAAA,EACzB,IACA,CAAOA,MAAA0c,EAAA1c,KAAA,CAAAgmB,IAAAtJ,EAAAsJ,GAAA,EACP,sCAEA,CASA,SAAAirE,EAAAtuD,CAAA,EACA,UAAAA,CAAAA,EAAA7pB,KAAA,SAAA6pB,CAAAA,EAAA5jC,IAAA,SACA,CACA,ICpeA,CACAw7E,MAAA,CAAY4R,SAAArJ,EAAA,EACZrI,KAAA,CAAW0R,SAAApJ,GAAAsO,aAAArO,EAAA,CACX,ECCA,EeaA4I,EAAAztF,IAAA,CfCA,CACA49E,WAAA,CdGA,CACAuV,SAAA,CACAjE,kBAAA5L,EACA6L,kBAAA7L,CACA,EACA8P,OAAA,CACA,CAAOzlE,UAAA,IAAa0lE,YAAA,cACpB,CAAOC,QAAA,GAAA3lE,UAAA,GAA4B,EACnC,EcTM4lE,SF6dCtyF,CAAA,EACP,IAAA0tF,EAAA1tF,GAAA,GACA2B,EAAA+rF,EAAA/rF,KAAA,MACA4wF,EAAA7E,EAAA6E,UAAA,KACAC,EAAA9E,EAAA8E,gBAAA,KACAC,EAAA/E,EAAA+E,UAAA,EAAA5yE,OAAAq7D,iBAAA,CACAwX,EAAA/wF,MAAAA,EAAA,QAEA,GAAAA,MAAAA,GAAAA,MAAAA,EACA,YACA,2CACAA,EACA,gDAMA,OAFAgxF,EAAAC,IAAA,CAAAnP,GAEA,CACAyO,SAAA,CACAW,kBAAAF,EACAG,kBAAAH,CACA,EACAR,OAAA,CACA,CAAOzlE,UAAA,IAAA0lE,YAAA,cACP,CAAOC,QAAA,GAAA3lE,UAAA,KACP,CAEAqmE,OAAA,GAEAC,aAAA,EACA,EAOA,SAAAL,EAAArwF,CAAA,CAAA+6B,CAAA,CAAAimD,CAAA,CAAAj6D,CAAA,EACA,IAAA4oC,EAAA3vD,sBAAAA,EAAA5C,IAAA,CACAiF,EAAArC,EAAAA,EAAA3C,IAAA,EACA,EAAA2C,EAAAwC,QAAA,EAAAxC,IAAAA,EAAAwC,QAAA,CAAApE,MAAA,EAGAuyF,EAAAzP,GADAH,EAAAC,IAEA4P,EAAA5P,EAAA6P,aAAA,CAAA9pE,GACA+pE,EAAA9P,EAAA6P,aAAA,CAAA9pE,GAEAgqE,EAAA,GACAj8C,EAAA,CAAA6a,EAAAghC,EAAA,QAAA3wF,CAAAA,EAAA3C,IAAA,MACA07E,EAAAiI,EAAAnI,KAAA,CAAA74E,EAAA5C,IAAA,EAMA,GAJAwzF,EAAAI,IAAA,CAAAl8C,GACAg8C,EAAAE,IAAA,CAAAl8C,GAGA90C,EAAAmC,UAAA,EAAAnC,EAAAmC,UAAA,CAAA/D,MAAA,IACA,IAAA4B,EAAA3C,IAAA,CACA,uDAGA,IAAA+mB,EAAA,GACA,OAAAA,EAAApkB,EAAAmC,UAAA,CAAA/D,MAAA,OAGA6kB,EAFA,IAAAoX,EAAAr6B,EAAAmC,UAAA,CAAAiiB,EAAA,CAIA,GAAAiW,8BAAAA,EAAAj9B,IAAA,CACA6lB,EAAA,IAAqBoX,CAAAA,EAAAn6B,KAAA,cACX,CACV,IAAAm6B,EAAAh9B,IAAA,CACA,mDAGA,IAAA6C,EAAAm6B,EAAAn6B,KAAA,CACAs6E,EAAAngD,EAAAh9B,IAAA,CAEAq9E,EAAA,GAEA,GAAAx6E,MAAAA,QAEY,oBAAAA,EACZw6E,EAAA,IAAsBx6E,CAAAA,EAAAA,KAAA,cACV,CAEZ,IAAA+wF,EACAhB,GAA4B,GAAAvY,EAAAt4D,CAAA,EAAMlf,EAAAb,GAAiB,GAAAq4E,EAAAt4D,CAAA,EAAMlf,EAAAkwF,GACzDA,EACA/wF,EACAq7E,EACAuW,EDnkBSC,SFFWhxF,CAAA,CAAAxC,CAAA,EAQpB,GAPAwC,EAAAA,EAAAib,OAAA,CACAzd,EAAAyzF,MAAA,CACAC,SAwDAD,CAAA,EACA,IAAAE,EAAAxQ,EAAAplF,GAAA,CAAA01F,GAOA,OALAE,IACAA,EAAAC,SAWAH,CAAA,EAEA,IAAAI,EAAA,GACAntE,EAAA,GAEA,OAAAA,EAAA+sE,EAAA/yF,MAAA,EACAmzF,EAAA90F,IAAA,CAAA00F,CAAA,CAAA/sE,EAAA,CAAAjJ,OAAA,CAAAylE,EAAA,SAGA,oBAAA2Q,EAAAh2E,IAAA,cACA,EArBA41E,GACAtQ,EAAA5jF,GAAA,CAAAk0F,EAAAE,IAGAA,CACA,EAjEA3zF,EAAAyzF,MAAA,EACA1Q,EACAl7B,GAGA7nD,EAAAyzF,MAAA,EAAAzzF,EAAA8zF,UAAA,CACA,OAAAtxF,EAGA,OACAA,EAEAib,OAAA,CAAAulE,EAWA,SAAA9R,CAAA,CAAAxqD,CAAA,CAAAyc,CAAA,EACA,OAAAnjC,EAAAgrE,MAAA,CACA,CAAAkG,EAAApwE,UAAA,gBACAowE,EAAApwE,UAAA,IACA,MACA,MACAqiC,EAAAriC,UAAA,CAAA4lB,EAAA,GACA1mB,EAEA,GAjBAyd,OAAA,CAAAwlE,EAAAp7B,GAwBA,SAAAA,EAAAn7B,CAAA,CAAAhG,CAAA,CAAAyc,CAAA,EACA,OAAAnjC,EAAAgrE,MAAA,CACAt+C,EAAA5rB,UAAA,IACAqiC,EAAAriC,UAAA,CAAA4lB,EAAA,GACA1mB,EAEA,CACA,EGqhBoCwC,EDpkBvBoD,OAAA0zC,MAAA,EAAuB0xB,OAAQoY,CAAW,ECokBnB,CAASqQ,OAAA,CAAAF,EAAA,IAC7CA,CACA,CAEAhuE,EAAAu3D,EAAAE,CAAAA,EAAA,QAAAA,CACA,CAEAqW,EAAAt0F,IAAA,CAAAwmB,EACA,CACA,CAEA,IAAAwuE,EAAA,GACAC,EAAAX,EAAAx1E,IAAA,MAIAo0C,GAEA,YAAA/vD,IAAA,CAAA8xF,IAEAd,EAAAv0E,OAAA,GAAA2d,GAAA,CAAAxR,MAAA,CAGAkpE,EAAAtzF,MAAA,CAEAiE,CAAAA,EAAA6tF,EAAA,OACAC,CAAA,GAEAsB,CAAAA,EAAA,IAGA,IAAAE,EAAAf,EACA1wF,EAAA40C,EAEA,GAAA28C,EAAA,CACAE,EAAAb,EAEA,IAAA1sE,EAAA,GAEA,OAAAA,EAAA2sE,EAAA3yF,MAAA,EAGA2yF,CAAA,CAAA3sE,EAAA,CACAusE,EA/kBA,KA+kBAI,CAAA,CAAA3sE,EAAA,CAGAlkB,GAAAyxF,EAAAX,IAAA,CACA,KAAAD,EAAAx1E,IAAA,YAAAo1E,EAEA,MAAMe,GACNxxF,CAAAA,GAAAyxF,EAAAX,IAAA,KAAAU,EAAA,EAuCA,OApCArvF,GACAnC,CAAAA,GAAAyxF,EAAAX,IAAA,CACA,CAAAd,GAAAuB,EAAA,YACA,EAGAvxF,GAAAyxF,EAAAX,IAAA,MAEAhxF,EAAAwC,QAAA,EAAAxC,EAAAwC,QAAA,CAAApE,MAAA,KACA4B,sBAAAA,EAAA5C,IAAA,CACA8C,GAAAyxF,EAAAX,IAAA,CAKAhQ,EAAA4Q,iBAAA,CAAA5xF,EAAA,CACA,GAAA2xF,EAAAt1E,OAAA,GACA4gB,OAAA,IACAsD,MAAA,GACA,KAGAoxD,EAAAlP,KAAA,IAGAviF,GAFAyxF,EAAAX,IAAA,OACAW,EAAAX,IAAA,CAAAa,SAgCAtuE,CAAA,CAAAy9D,CAAA,CAAAj6D,CAAA,EACA,IAAA+qE,EAAA9Q,EAAA8Q,UAAA,CACAtvF,EAAA+gB,EAAA/gB,QAAA,CACAmvF,EAAA3Q,EAAA6P,aAAA,CAAA9pE,GACA4pE,EAAAzP,GAAAH,EAAAC,IAEAjkE,EAAA,GACAqH,EAAA,GAIA,IAFA0tE,EAAAr1F,IAAA,KAEA,EAAA2nB,EAAA5hB,EAAApE,MAAA,GACA,IAAAo8C,EAAAh4C,CAAA,CAAA4hB,EAAA,CAEA0tE,CAAA,CAAAA,EAAA1zF,MAAA,IAAAgmB,EAEA,IAAA2tE,EAAA,CAAuB90D,OAAA,KAAAsD,MAAA,QAAAoxD,EAAAt1E,OAAA,IAEvB4G,EAAA+9D,EAAAgR,MAAA,CAAAx3C,EAAAj3B,EAAAy9D,EAAA+Q,GAEAE,EACAz3C,sBAAAA,EAAAp9C,IAAA,CACA6lB,EACA+9D,EAAAkR,WAAA,CAAAjvE,EAAA,SAAA4F,CAAA,CAAAkS,CAAA,CAAAk1C,CAAA,EACA,OAAAA,EAAA,GAAA0gB,CAAA,EAAA9nE,CACA,GAEA9L,EAAAtgB,IAAA,CAAAk1F,EAAAX,IAAA,CAAAiB,IAEA,SAAAz3C,EAAAp9C,IAAA,EACA4jF,CAAAA,EAAAmR,cAAA,CAAA94E,KAAAA,CAAA,EAGA+K,EAAA5hB,EAAApE,MAAA,IACA2e,EAAAtgB,IAAA,CAAAk1F,EAAAX,IAAA,SAEA,CAIA,OAFAc,EAAAj1F,GAAA,GAEAkgB,EAAAxB,IAAA,IACA,EAzEAvb,EAAAghF,EAAA2Q,EAAAt1E,OAAA,KACAs1E,EAAAX,IAAA,SAIA3uF,GACAnC,CAAAA,GAAAyxF,EAAAX,IAAA,CACA,CAAArhC,EAAAghC,EAAA,SAAA3wF,CAAAA,EAAA3C,IAAA,UACA,EAGA07E,IACA74E,CACA,CACA,EiBvpByCw4B,GhBHzC,CAAUk3D,SAAA,CAAWnF,SAAAlJ,EAAA,GCSrB,EeLA,4BCdO,OAAA6Q,GAOPr4E,YAAAs4E,CAAA,EAEA,KAAA7X,IAAA,CAAA6X,EAAA,IAAAA,EAAA,IAEA,KAAA3X,KAAA,IAYAj/E,IAAA2oB,CAAA,EACA,GAAAA,EAAA,GAAAA,GAAA,KAAAo2D,IAAA,CAAAp8E,MAAA,MAAAs8E,KAAA,CAAAt8E,MAAA,CACA,yCAAAgmB,EAAA,uCAAAo2D,IAAA,CAAAp8E,MAAA,MAAAs8E,KAAA,CAAAt8E,MAAA,cAEA,OAAAo8E,IAAA,CAAAp8E,MAAA,MAAAo8E,IAAA,CAAAp2D,EAAA,CACA,KAAAs2D,KAAA,MAAAA,KAAA,CAAAt8E,MAAA,CAAAgmB,EAAA,KAAAo2D,IAAA,CAAAp8E,MAAA,IAOA,IAAAA,QAAA,CACA,YAAAo8E,IAAA,CAAAp8E,MAAA,MAAAs8E,KAAA,CAAAt8E,MAAA,CAUAqkF,OAAA,CAEA,OADA,KAAA6P,SAAA,IACA,KAAA5X,KAAA,CAAA79E,GAAA,EACA,CAaA8B,MAAAL,CAAA,CAAAgmB,CAAA,EAEA,IAAAiuE,EAAAjuE,MAAAA,EAAA/G,OAAAq7D,iBAAA,CAAAt0D,SACA,OAAAk2D,IAAA,CAAAp8E,MAAA,CACA,KAAAo8E,IAAA,CAAA77E,KAAA,CAAAL,EAAAi0F,GAEAj0F,EAAA,KAAAk8E,IAAA,CAAAp8E,MAAA,CACA,KAAAs8E,KAAA,CAAA/7E,KAAA,MAAA+7E,KAAA,CAAAt8E,MAAA,CAAAm0F,EAAA,KAAA/X,IAAA,CAAAp8E,MAAA,MAAAs8E,KAAA,CAAAt8E,MAAA,CAAAE,EAAA,KAAAk8E,IAAA,CAAAp8E,MAAA,EAAA8c,OAAA,GAEA,KAAAs/D,IAAA,CAAA77E,KAAA,CAAAL,GAAAsb,MAAA,MAAA8gE,KAAA,CAAA/7E,KAAA,MAAA+7E,KAAA,CAAAt8E,MAAA,CAAAm0F,EAAA,KAAA/X,IAAA,CAAAp8E,MAAA,EAAA8c,OAAA,GACA,CAsBAgkC,OAAA5gD,CAAA,CAAAk0F,CAAA,CAAA1Y,CAAA,EAGA,KAAAwY,SAAA,CAAA3zE,KAAA8zE,KAAA,CAAAn0F,IACA,IAAAo0F,EAAA,KAAAhY,KAAA,CAAAx7B,MAAA,MAAAw7B,KAAA,CAAAt8E,MAAA,CAFAo0F,CAAAA,GAAA,GAEAj1E,OAAAq7D,iBAAA,EAEA,OADAkB,GAAA6Y,GAAA,KAAAnY,IAAA,CAAAV,GACA4Y,EAAAx3E,OAAA,EACA,CAUAre,KAAA,CAEA,OADA,KAAAy1F,SAAA,CAAA/0E,OAAAq7D,iBAAA,EACA,KAAA4B,IAAA,CAAA39E,GAAA,EACA,CAWAJ,KAAAm2F,CAAA,EACA,KAAAN,SAAA,CAAA/0E,OAAAq7D,iBAAA,EACA,KAAA4B,IAAA,CAAA/9E,IAAA,CAAAm2F,EACA,CAWAC,SAAA/Y,CAAA,EACA,KAAAwY,SAAA,CAAA/0E,OAAAq7D,iBAAA,EACA+Z,GAAA,KAAAnY,IAAA,CAAAV,EACA,CAWAn2D,QAAAivE,CAAA,EACA,KAAAN,SAAA,IACA,KAAA5X,KAAA,CAAAj+E,IAAA,CAAAm2F,EACA,CAWAE,YAAAhZ,CAAA,EACA,KAAAwY,SAAA,IACAK,GAAA,KAAAjY,KAAA,CAAAZ,EAAA5+D,OAAA,GACA,CAcAo3E,UAAAh7E,CAAA,EACA,GAAAA,IAAA,KAAAkjE,IAAA,CAAAp8E,MAAA,EAAAkZ,CAAAA,CAAAA,CAAAA,EAAA,KAAAkjE,IAAA,CAAAp8E,MAAA,YAAAs8E,KAAA,CAAAt8E,MAAA,GAAAkZ,CAAAA,CAAAA,CAAAA,EAAA,aAAAkjE,IAAA,CAAAp8E,MAAA,GACA,GAAAkZ,EAAA,KAAAkjE,IAAA,CAAAp8E,MAAA,EAEA,IAAAs0F,EAAA,KAAAlY,IAAA,CAAAt7B,MAAA,CAAA5nC,EAAAiG,OAAAq7D,iBAAA,EACA+Z,GAAA,KAAAjY,KAAA,CAAAgY,EAAAx3E,OAAA,GACA,KAAM,CAEN,IAAAw3E,EAAA,KAAAhY,KAAA,CAAAx7B,MAAA,MAAAs7B,IAAA,CAAAp8E,MAAA,MAAAs8E,KAAA,CAAAt8E,MAAA,CAAAkZ,EAAAiG,OAAAq7D,iBAAA,EACA+Z,GAAA,KAAAnY,IAAA,CAAAkY,EAAAx3E,OAAA,GACA,EACA,CACA,CAcA,SAAAy3E,GAAAjyD,CAAA,CAAAg6C,CAAA,EAEA,IAAAz8E,EAAA,EACA,GAAAy8E,EAAAt8E,MAAA,KACAsiC,EAAAjkC,IAAA,IAAAi+E,QAEA,KAAAz8E,EAAAy8E,EAAAt8E,MAAA,EACAsiC,EAAAjkC,IAAA,IAAAi+E,EAAA/7E,KAAA,CAAAV,EAAAA,EAAA,MACAA,GAAA,GAGA,CCrOO,SAAA80F,GAAAC,CAAA,MAKPlgD,EAEAmgD,EAEAC,EAEAC,EAEApZ,EAEAqZ,EAEAv8B,EAfA,IAAAw8B,EAAA,GACAjvE,EAAA,GAeA42D,EAAA,IAAqBoX,GAAYY,GACjC,OAAA5uE,EAAA42D,EAAA58E,MAAA,GACA,KAAAgmB,CAAAA,KAAAivE,CAAA,GACAjvE,EAAAivE,CAAA,CAAAjvE,EAAA,CAMA,GAJA0uB,EAAAkoC,EAAAv/E,GAAA,CAAA2oB,GAIAA,GAAA0uB,cAAAA,CAAA,IAAA11C,IAAA,EAAA49E,mBAAAA,EAAAv/E,GAAA,CAAA2oB,EAAA,MAAAhnB,IAAA,GAEA81F,CAAAA,EAAA,GACAE,CAFAA,EAAAtgD,CAAA,IAAAwgD,UAAA,CAAAtY,MAAA,EAEA58E,MAAA,EAAAg1F,oBAAAA,CAAA,CAAAF,EAAA,IAAA91F,IAAA,EACA81F,CAAAA,GAAA,GAEAA,EAAAE,EAAAh1F,MAAA,EAAAg1F,YAAAA,CAAA,CAAAF,EAAA,IAAA91F,IAAA,EACA,KACA,EADA81F,EAAAE,EAAAh1F,MAAA,EACAg1F,YAAAA,CAAA,CAAAF,EAAA,IAAA91F,IAAA,EAGA,cAAAg2F,CAAA,CAAAF,EAAA,IAAA91F,IAAA,GACAg2F,CAAA,CAAAF,EAAA,IAAAK,2BAAA,IACAL,KAOA,GAAApgD,UAAAA,CAAA,IACAA,CAAA,IAAAohB,WAAA,GACA5wD,OAAA0zC,MAAA,CAAAq8C,EAAAG,SA+CAxY,CAAA,CAAAyY,CAAA,MAaAC,EAEA7tE,EAdA,IAAA2E,EAAAwwD,EAAAv/E,GAAA,CAAAg4F,EAAA,IACAj3F,EAAAw+E,EAAAv/E,GAAA,CAAAg4F,EAAA,IACAE,EAAAF,EAAA,EAEAG,EAAA,GACAC,EAAArpE,EAAA8oE,UAAA,EAAA92F,EAAA2mE,MAAA,CAAA34C,EAAA0pC,WAAA,EAAA1pC,EAAAlsB,KAAA,EACAw1F,EAAAD,EAAA7Y,MAAA,CAEAqY,EAAA,GAEAU,EAAA,GAKA3vE,EAAA,GAEA/H,EAAAmO,EACA7D,EAAA,EACAroB,EAAA,EACA01F,EAAA,CADA,EACA,CAIA,KAAA33E,GAAA,CAEA,KAAA2+D,EAAAv/E,GAAA,GAAAk4F,EAAA,MAAAt3E,IAGAu3E,EAAAn3F,IAAA,CAAAk3F,GACA,CAAAt3E,EAAAi3E,UAAA,GACAI,EAAAl3F,EAAAgmF,WAAA,CAAAnmE,GACAA,EAAAhc,IAAA,EACAqzF,EAAAj3F,IAAA,OAEAopB,GACAguE,EAAAI,UAAA,CAAA53E,EAAA/d,KAAA,EAEA+d,EAAAk3E,2BAAA,EACAM,CAAAA,EAAAK,kCAAA,KAEAL,EAAAjoE,KAAA,CAAA8nE,GACAr3E,EAAAk3E,2BAAA,EACAM,CAAAA,EAAAK,kCAAA,CAAA76E,KAAAA,CAAA,GAKAwM,EAAAxJ,EACAA,EAAAA,EAAAhc,IAAA,CAMA,IADAgc,EAAAmO,EACA,EAAApG,EAAA0vE,EAAA11F,MAAA,EAGA,SAAA01F,CAAA,CAAA1vE,EAAA,KAAA0vE,UAAAA,CAAA,CAAA1vE,EAAA,OAAA0vE,CAAA,CAAA1vE,EAAA,IAAAhnB,IAAA,GAAA02F,CAAA,CAAA1vE,EAAA,MAAAhnB,IAAA,EAAA02F,CAAA,CAAA1vE,EAAA,IAAA9lB,KAAA,CAAAuqB,IAAA,GAAAirE,CAAA,CAAA1vE,EAAA,IAAAE,GAAA,CAAAuE,IAAA,GACAvqB,EAAA8lB,EAAA,EACA4vE,EAAAv3F,IAAA,CAAA6B,GAEA+d,EAAAi3E,UAAA,CAAAj6E,KAAAA,EACAgD,EAAAwJ,QAAA,CAAAxM,KAAAA,EACAgD,EAAAA,EAAAhc,IAAA,EAqBA,IAhBAwzF,EAAA7Y,MAAA,IAKA3+D,GAEAA,EAAAi3E,UAAA,CAAAj6E,KAAAA,EACAgD,EAAAwJ,QAAA,CAAAxM,KAAAA,GAEA26E,EAAAn3F,GAAA,GAKAunB,EAAA4vE,EAAA51F,MAAA,CACAgmB,KAAA,CACA,IAAAzlB,EAAAm1F,EAAAn1F,KAAA,CAAAq1F,CAAA,CAAA5vE,EAAA,CAAA4vE,CAAA,CAAA5vE,EAAA,IACA9lB,EAAAs1F,EAAA/2F,GAAA,GACAw2F,EAAA52F,IAAA,EAAA6B,EAAAA,EAAAK,EAAAP,MAAA,KACA48E,EAAA97B,MAAA,CAAA5gD,EAAA,EAAAK,EACA,CAGA,IAFA00F,EAAAn4E,OAAA,GACAkJ,EAAA,GACA,EAAAA,EAAAivE,EAAAj1F,MAAA,EACA21F,CAAA,CAAAptE,EAAA0sE,CAAA,CAAAjvE,EAAA,KAAAuC,EAAA0sE,CAAA,CAAAjvE,EAAA,IACAuC,GAAA0sE,CAAA,CAAAjvE,EAAA,IAAAivE,CAAA,CAAAjvE,EAAA,MAEA,OAAA2vE,CACA,EAlJA/Y,EAAA52D,IACAA,EAAAivE,CAAA,CAAAjvE,EAAA,CACAyyC,EAAA,SAIA,GAAA/jB,CAAA,IAAAqhD,UAAA,EAGA,IAFAjB,EAAA9uE,EACA6uE,EAAA55E,KAAAA,EACA65E,KAEA,GAAAC,eAAAA,CADAA,EAAAnY,EAAAv/E,GAAA,CAAAy3F,EAAA,CACA,IAAA91F,IAAA,EAAA+1F,oBAAAA,CAAA,IAAA/1F,IAAA,CACA,UAAA+1F,CAAA,MACAF,GACAjY,CAAAA,EAAAv/E,GAAA,CAAAw3F,EAAA,IAAA71F,IAAA,oBAEA+1F,CAAA,IAAA/1F,IAAA,cACA61F,EAAAC,QAGA,MAGAD,IAEAngD,CAAA,IAAAxuB,GAAA,CAAAhhB,OAAA0zC,MAAA,IAAuCgkC,EAAAv/E,GAAA,CAAAw3F,EAAA,IAAA30F,KAAA,EAIvCy7E,CADAA,EAAAiB,EAAAr8E,KAAA,CAAAs0F,EAAA7uE,EAAA,EACAT,OAAA,CAAAmvB,GACAkoC,EAAA97B,MAAA,CAAA+zC,EAAA7uE,EAAA6uE,EAAA,EAAAlZ,GAEA,CACA,CAIA,MADE,GAAAqa,GAAAnoC,CAAA,EAAM+mC,EAAA,EAAAz1E,OAAAq7D,iBAAA,CAAAoC,EAAAr8E,KAAA,KACR,CAAAk4D,CACA,CEjGO,IAAAtvC,GAAA,CACPyX,SAOA,SAAAm5C,CAAA,MAOAtyD,EANA,IAAAwuE,EAAAlc,EAAAuR,OAAA,CACA,KAAAvmB,MAAA,CAAAwX,UAAA,CAAA2Z,cAAA,CASA,SAAAnxF,CAAA,EACA,GAAAA,OAAAA,EAAA,CACAg1E,EAAAW,OAAA,CAAA31E,GACA,MACA,CAIA,OAHAg1E,EAAAU,KAAA,eACAV,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,eACW,GAAAsS,GAAA/qE,CAAA,EAAY63D,EAAAkc,EAAA,aACvB,EAGA,SAAAlxF,CAAA,EAEA,OADAg1E,EAAAU,KAAA,cACA15E,SAIAA,EAAAgE,CAAA,EACA,IAAAqnB,EAAA2tD,EAAAU,KAAA,cACA3kB,YAAA,OACAruC,SAAAA,CACA,GAKA,OAJAA,GACAA,CAAAA,EAAAxlB,IAAA,CAAAmqB,CAAA,EAEA3E,EAAA2E,EACAgC,SAIAA,EAAArpB,CAAA,EACA,GAAAA,OAAAA,EAAA,CACAg1E,EAAAY,IAAA,cACAZ,EAAAY,IAAA,cACAZ,EAAAW,OAAA,CAAA31E,GACA,MACA,OACA,CAAQ,EAAAmiF,GAAA9M,EAAA,EAAkBr1E,IAC1Bg1E,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,cACA55E,IAIAg5E,EAAAW,OAAA,CAAA31E,GACAqpB,EACA,EApBArpB,EACA,EAdAA,EACA,GAlBA,OAAAkxF,CAmDA,CAjEA,ECOaE,GAAQ,CACrBv1D,SAYA,SAAAm5C,CAAA,MAMAqc,EAEAC,EAEAC,EATA,IAAA95E,EAAA,KAEAuhB,EAAA,GACAw4D,EAAA,EAOA,OAAAr2F,EAGA,SAAAA,EAAA6E,CAAA,EAWA,GAAAwxF,EAAAx4D,EAAA/9B,MAAA,EACA,IAAAw0F,EAAAz2D,CAAA,CAAAw4D,EAAA,CAEA,OADA/5E,EAAAg6E,cAAA,CAAAhC,CAAA,IACAza,EAAAuR,OAAA,CACAkJ,CAAA,IAAA3iC,YAAA,CACA4kC,EACAC,GACA3xF,EACA,CAGA,OAAA2xF,EAAA3xF,EACA,CAGA,SAAA0xF,EAAA1xF,CAAA,EAMA,GALAwxF,IAKA/5E,EAAAg6E,cAAA,CAAAG,UAAA,MAWArZ,CAVA9gE,CAAAA,EAAAg6E,cAAA,CAAAG,UAAA,CAAA17E,KAAAA,EACAm7E,GACAQ,IAKA,IAAAC,EAAAr6E,EAAAogE,MAAA,CAAA58E,MAAA,CACA82F,EAAAD,EAKA,KAAAC,KACA,GACAt6E,SAAAA,EAAAogE,MAAA,CAAAka,EAAA,KACAt6E,cAAAA,EAAAogE,MAAA,CAAAka,EAAA,IAAA93F,IAAA,CACA,CACAs+E,EAAA9gE,EAAAogE,MAAA,CAAAka,EAAA,IAAA5wE,GAAA,CACA,KACA,CAEA6wE,EAAAR,GAGA,IAAAvwE,EAAA6wE,EACA,KAAA7wE,EAAAxJ,EAAAogE,MAAA,CAAA58E,MAAA,EACAwc,EAAAogE,MAAA,CAAA52D,EAAA,IAAAE,GAAA,CAAAhhB,OAAA0zC,MAAA,IAAoD0kC,GACpDt3D,IAaA,MATM,GAAAgwE,GAAAnoC,CAAA,EACNrxC,EAAAogE,MAAA,CACAka,EAAA,EACA,EACAt6E,EAAAogE,MAAA,CAAAr8E,KAAA,CAAAs2F,IAIAr6E,EAAAogE,MAAA,CAAA58E,MAAA,CAAAgmB,EACA0wE,EAAA3xF,EACA,CACA,OAAA7E,EAAA6E,EACA,CAGA,SAAA2xF,EAAA3xF,CAAA,EAMA,GAAAwxF,IAAAx4D,EAAA/9B,MAAA,EAIA,IAAAo2F,EACA,OAAAY,EAAAjyF,GAMA,GAAAqxF,EAAAa,gBAAA,EAAAb,EAAAa,gBAAA,CAAAnK,QAAA,CACA,OAAAoK,EAAAnyF,EAQAyX,CAAAA,EAAAgwE,SAAA,CAAAzyB,CAAAA,CACAq8B,CAAAA,EAAAa,gBAAA,GAAAb,EAAAe,6BAAA,CAEA,CAIA,OADA36E,EAAAg6E,cAAA,IACAzc,EAAA3iC,KAAA,CACAggD,GACAC,EACAC,GACAvyF,EACA,CAGA,SAAAsyF,EAAAtyF,CAAA,EAGA,OAFAqxF,GAAAQ,IACAG,EAAAR,GACAS,EAAAjyF,EACA,CAGA,SAAAuyF,EAAAvyF,CAAA,EAGA,OAFAyX,EAAAuoD,MAAA,CAAA/sC,IAAA,CAAAxb,EAAAof,GAAA,GAAAnR,IAAA,EAAA8rE,IAAAx4D,EAAA/9B,MAAA,CACAs2F,EAAA95E,EAAAof,GAAA,GAAAvmB,MAAA,CACA6hF,EAAAnyF,EACA,CAGA,SAAAiyF,EAAAjyF,CAAA,EAGA,OADAyX,EAAAg6E,cAAA,IACAzc,EAAAuR,OAAA,CACA8L,GACAG,EACAL,GACAnyF,EACA,CAGA,SAAAwyF,EAAAxyF,CAAA,EAIA,OAHAwxF,IACAx4D,EAAA1/B,IAAA,EAAAme,EAAAy6E,gBAAA,CAAAz6E,EAAAg6E,cAAA,GAEAQ,EAAAjyF,EACA,CAGA,SAAAmyF,EAAAnyF,CAAA,EACA,GAAAA,OAAAA,EAAA,CACAqxF,GAAAQ,IACAG,EAAA,GACAhd,EAAAW,OAAA,CAAA31E,GACA,MACA,CAOA,OANAqxF,EAAAA,GAAA55E,EAAAuoD,MAAA,CAAAxT,IAAA,CAAA/0C,EAAAof,GAAA,IACAm+C,EAAAU,KAAA,cACA3kB,YAAA,OACAruC,SAAA4uE,EACAnB,WAAAkB,CACA,GACAoB,SAIAA,EAAAzyF,CAAA,EACA,GAAAA,OAAAA,EAAA,CACA0yF,EAAA1d,EAAAY,IAAA,kBACAoc,EAAA,GACAhd,EAAAW,OAAA,CAAA31E,GACA,MACA,OACA,CAAQ,EAAAmiF,GAAA9M,EAAA,EAAkBr1E,IAC1Bg1E,EAAAW,OAAA,CAAA31E,GACA0yF,EAAA1d,EAAAY,IAAA,eAEA4b,EAAA,EACA/5E,EAAAgwE,SAAA,CAAAvxE,KAAAA,EACA/a,IAEA65E,EAAAW,OAAA,CAAA31E,GACAyyF,EACA,EArBAzyF,EACA,CA2BA,SAAA0yF,EAAArrE,CAAA,CAAAsrE,CAAA,EACA,IAAApC,EAAA94E,EAAA4nE,WAAA,CAAAh4D,GAyCA,GAxCAsrE,GAAApC,EAAAj3F,IAAA,OACA+tB,EAAA3E,QAAA,CAAA4uE,EACAA,GAAAA,CAAAA,EAAAp0F,IAAA,CAAAmqB,CAAA,EACAiqE,EAAAjqE,EACAgqE,EAAAP,UAAA,CAAAzpE,EAAAlsB,KAAA,EACAk2F,EAAA5oE,KAAA,CAAA8nE,GAmCA94E,EAAAuoD,MAAA,CAAA/sC,IAAA,CAAA5L,EAAAlsB,KAAA,CAAAuqB,IAAA,GACA,IAqBAktE,EAEAra,EAvBAt3D,EAAAowE,EAAAxZ,MAAA,CAAA58E,MAAA,CACA,KAAAgmB,KACA,GAEAowE,EAAAxZ,MAAA,CAAA52D,EAAA,IAAA9lB,KAAA,CAAAmV,MAAA,CAAAihF,GAEA,EAAAF,EAAAxZ,MAAA,CAAA52D,EAAA,IAAAE,GAAA,EAEAkwE,EAAAxZ,MAAA,CAAA52D,EAAA,IAAAE,GAAA,CAAA7Q,MAAA,CAAAihF,CAAA,EAIA,OAMA,IAAAO,EAAAr6E,EAAAogE,MAAA,CAAA58E,MAAA,CACA82F,EAAAD,EAOA,KAAAC,KACA,GACAt6E,SAAAA,EAAAogE,MAAA,CAAAka,EAAA,KACAt6E,cAAAA,EAAAogE,MAAA,CAAAka,EAAA,IAAA93F,IAAA,CACA,CACA,GAAA24F,EAAA,CACAra,EAAA9gE,EAAAogE,MAAA,CAAAka,EAAA,IAAA5wE,GAAA,CACA,KACA,CACAyxE,EAAA,EACA,CAMA,IAJAZ,EAAAR,GAGAvwE,EAAA6wE,EACA7wE,EAAAxJ,EAAAogE,MAAA,CAAA58E,MAAA,EACAwc,EAAAogE,MAAA,CAAA52D,EAAA,IAAAE,GAAA,CAAAhhB,OAAA0zC,MAAA,IAAoD0kC,GACpDt3D,IAIM,GAAAgwE,GAAAnoC,CAAA,EACNrxC,EAAAogE,MAAA,CACAka,EAAA,EACA,EACAt6E,EAAAogE,MAAA,CAAAr8E,KAAA,CAAAs2F,IAIAr6E,EAAAogE,MAAA,CAAA58E,MAAA,CAAAgmB,CACA,CACA,CAMA,SAAA+wE,EAAArkD,CAAA,EACA,IAAA1sB,EAAA+X,EAAA/9B,MAAA,CAGA,KAAAgmB,KAAA0sB,GAAA,CACA,IAAAmkB,EAAA94B,CAAA,CAAA/X,EAAA,CACAxJ,EAAAg6E,cAAA,CAAA3/B,CAAA,IACAA,CAAA,IAAA8jB,IAAA,CAAAr/D,IAAA,CAAAkB,EAAAu9D,EACA,CACAh8C,EAAA/9B,MAAA,CAAA0yC,CACA,CACA,SAAAkkD,IACAR,EAAA5oE,KAAA,SACA6oE,EAAAp7E,KAAAA,EACAm7E,EAAAn7E,KAAAA,EACAuB,EAAAg6E,cAAA,CAAAG,UAAA,CAAA17E,KAAAA,CACA,CACA,CAxVA,EAGAm8E,GAAA,CACAx2D,SA0VA,SAAAm5C,CAAA,CAAAR,CAAA,CAAAS,CAAA,EAGA,MAAS,GAAAiT,GAAA/qE,CAAA,EACT63D,EACAA,EAAAuR,OAAA,MAAAvmB,MAAA,CAAAwX,UAAA,CAAA3iD,QAAA,CAAA2/C,EAAAS,GACA,aACA,KAAAjV,MAAA,CAAAwX,UAAA,CAAA+Q,OAAA,CAAA/xB,IAAA,CAAAzqC,QAAA,iBAAA7V,KAAAA,EAAA,EAEA,CAlWA,ECXa28E,GAAO,CACpBh3D,SAyBA,SAAAm5C,CAAA,CAAAR,CAAA,EAEA,IAAA9xD,EACA,OAYA,SAAA1iB,CAAA,EAKA,OAJAg1E,EAAAU,KAAA,YACAhzD,EAAAsyD,EAAAU,KAAA,iBACA3kB,YAAA,SACA,GACA+hC,EAAA9yF,EACA,EAYA,SAAA8yF,EAAA9yF,CAAA,SACA,OAAAA,EACA+yF,EAAA/yF,GAKQ,GAAAmiF,GAAA9M,EAAA,EAAkBr1E,GAC1Bg1E,EAAA3iC,KAAA,CAAA2gD,GAAAC,EAAAF,GAAA/yF,IAIAg1E,EAAAW,OAAA,CAAA31E,GACA8yF,EACA,CAOA,SAAAC,EAAA/yF,CAAA,EAGA,OAFAg1E,EAAAY,IAAA,iBACAZ,EAAAY,IAAA,YACApB,EAAAx0E,EACA,CAOA,SAAAizF,EAAAjzF,CAAA,EAQA,OAPAg1E,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,iBACAlzD,EAAAxlB,IAAA,CAAA83E,EAAAU,KAAA,iBACA3kB,YAAA,UACAruC,SAAAA,CACA,GACAA,EAAAA,EAAAxlB,IAAA,CACA41F,CACA,CACA,EAnGAjgE,QAeA,SAAAglD,CAAA,EAEA,OADE+X,GAAW/X,GACbA,CACA,CAjBA,EAGAmb,GAAA,CACAn3D,SAoGA,SAAAm5C,CAAA,CAAAR,CAAA,CAAAS,CAAA,EACA,IAAAx9D,EAAA,KACA,OAOA,SAAAzX,CAAA,EAKA,OAJAg1E,EAAAY,IAAA,iBACAZ,EAAAU,KAAA,eACAV,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,eACW,GAAAsS,GAAA/qE,CAAA,EAAY63D,EAAAke,EAAA,aACvB,EAOA,SAAAA,EAAAlzF,CAAA,EACA,GAAAA,OAAAA,GAAyB,GAAAmiF,GAAA9M,EAAA,EAAkBr1E,GAC3C,OAAAi1E,EAAAj1E,GAKA,IAAA+8B,EAAAtlB,EAAAogE,MAAA,CAAApgE,EAAAogE,MAAA,CAAA58E,MAAA,UACA,CAAAwc,EAAAuoD,MAAA,CAAAwX,UAAA,CAAA+Q,OAAA,CAAA/xB,IAAA,CAAAzqC,QAAA,kBAAAgR,GAAAA,eAAAA,CAAA,IAAA9iC,IAAA,EAAA8iC,CAAA,IAAAgvD,cAAA,CAAAhvD,CAAA,QAAA9hC,MAAA,IACAu5E,EAAAx0E,GAEAg1E,EAAAyS,SAAA,CAAAhwE,EAAAuoD,MAAA,CAAAwX,UAAA,CAAAhrB,IAAA,CAAAyoB,EAAAT,GAAAx0E,EACA,CACA,EAtIAs1E,QAAA,EACA,ECdO9oB,GAAA,CACP3wB,SAOA,SAAAm5C,CAAA,EACA,IAAAv9D,EAAA,KACAy3E,EAAAla,EAAAuR,OAAA,CAEIC,GAAAvqE,CAAS,CAoBb,SAAAjc,CAAA,EACA,GAAAA,OAAAA,EAAA,CACAg1E,EAAAW,OAAA,CAAA31E,GACA,MACA,CAKA,OAJAg1E,EAAAU,KAAA,oBACAV,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,oBACAn+D,EAAAy6E,gBAAA,CAAAh8E,KAAAA,EACAg5E,CACA,EA3BAla,EAAAuR,OAAA,CACA,KAAAvmB,MAAA,CAAAwX,UAAA,CAAA2b,WAAA,CACAC,EACM,GAAAlL,GAAA/qE,CAAA,EACN63D,EACAA,EAAAuR,OAAA,CACA,KAAAvmB,MAAA,CAAAwX,UAAA,CAAAhrB,IAAA,CACA4mC,EACApe,EAAAuR,OAAA,CAA0BsM,GAAOO,IAEjC,gBAIA,OAAAlE,EAgBA,SAAAkE,EAAApzF,CAAA,EACA,GAAAA,OAAAA,EAAA,CACAg1E,EAAAW,OAAA,CAAA31E,GACA,MACA,CAKA,OAJAg1E,EAAAU,KAAA,eACAV,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,eACAn+D,EAAAy6E,gBAAA,CAAAh8E,KAAAA,EACAg5E,CACA,CACA,CAtDA,ECJOmE,GAAA,CACPzb,WAAA0b,IACA,EACOn3F,GAAAo3F,GAAA,UACMC,GAAID,GAAA,QAMjB,SAAAA,GAAAvgC,CAAA,EACA,OACAn3B,SAUA,SAAAm5C,CAAA,EACA,IAAAv9D,EAAA,KACA+/D,EAAA,KAAAxX,MAAA,CAAAwX,UAAA,CAAAxkB,EAAA,CACAz8B,EAAAy+C,EAAAuR,OAAA,CAAA/O,EAAAr8E,EAAAs4F,GACA,OAAAt4F,EAGA,SAAAA,EAAA6E,CAAA,EACA,OAAA4sF,EAAA5sF,GAAAu2B,EAAAv2B,GAAAyzF,EAAAzzF,EACA,CAGA,SAAAyzF,EAAAzzF,CAAA,EACA,GAAAA,OAAAA,EAAA,CACAg1E,EAAAW,OAAA,CAAA31E,GACA,MACA,CAGA,OAFAg1E,EAAAU,KAAA,SACAV,EAAAW,OAAA,CAAA31E,GACAqpB,CACA,CAGA,SAAAA,EAAArpB,CAAA,SACA,EAAAA,IACAg1E,EAAAY,IAAA,SACAr/C,EAAAv2B,KAIAg1E,EAAAW,OAAA,CAAA31E,GACAqpB,EACA,CAMA,SAAAujE,EAAA5sF,CAAA,EACA,GAAAA,OAAAA,EACA,SAEA,IAAAu9B,EAAAi6C,CAAA,CAAAx3E,EAAA,CACAihB,EAAA,GACA,GAAAsc,EAGA,OAAAtc,EAAAsc,EAAAtiC,MAAA,GACA,IAAAw0F,EAAAlyD,CAAA,CAAAtc,EAAA,CACA,IAAAwuE,EAAA/sE,QAAA,EAAA+sE,EAAA/sE,QAAA,CAAAnM,IAAA,CAAAkB,EAAAA,EAAAiL,QAAA,EACA,QAEA,CAEA,QACA,CACA,EAjEAk1D,WAAA0b,GACAtgC,SAAAA,EAAA0gC,GAAAx9E,KAAAA,EAEA,CA+DA,CAMA,SAAAo9E,GAAAK,CAAA,EACA,OAGA,SAAA9b,CAAA,CAAAx+E,CAAA,EACA,IAEAq8E,EAFAz0D,EAAA,GAMA,OAAAA,GAAA42D,EAAA58E,MAAA,EACAy6E,KAAAx/D,IAAAw/D,EACAmC,CAAA,CAAA52D,EAAA,EAAA42D,SAAAA,CAAA,CAAA52D,EAAA,IAAAhnB,IAAA,GACAy7E,EAAAz0D,EACAA,KAEQ42D,CAAA,CAAA52D,EAAA,EAAA42D,SAAAA,CAAA,CAAA52D,EAAA,IAAAhnB,IAAA,GAERgnB,IAAAy0D,EAAA,IACAmC,CAAA,CAAAnC,EAAA,IAAAv0D,GAAA,CAAA02D,CAAA,CAAA52D,EAAA,MAAAE,GAAA,CACA02D,EAAA97B,MAAA,CAAA25B,EAAA,EAAAz0D,EAAAy0D,EAAA,GACAz0D,EAAAy0D,EAAA,GAEAA,EAAAx/D,KAAAA,GAGA,OAAAy9E,EAAAA,EAAA9b,EAAAx+E,GAAAw+E,CACA,CACA,CAaA,SAAA6b,GAAA7b,CAAA,CAAAx+E,CAAA,EACA,IAAAi3F,EAAA,EAEA,OAAAA,GAAAzY,EAAA58E,MAAA,EACA,GACA,CAAAq1F,IAAAzY,EAAA58E,MAAA,EACA48E,eAAAA,CAAA,CAAAyY,EAAA,IAAAr2F,IAAA,GACA49E,SAAAA,CAAA,CAAAyY,EAAA,MAAAr2F,IAAA,CACA,KAOA25F,EANA,IAAAvqE,EAAAwuD,CAAA,CAAAyY,EAAA,MACAl3E,EAAA/f,EAAAgmF,WAAA,CAAAh2D,GACApI,EAAA7H,EAAAne,MAAA,CACA44F,EAAA,GACAlmD,EAAA,EAGA,KAAA1sB,KAAA,CACA,IAAA5H,EAAAD,CAAA,CAAA6H,EAAA,CACA,oBAAA5H,EAAA,CAEA,IADAw6E,EAAAx6E,EAAApe,MAAA,CACAoe,KAAAA,EAAAhe,UAAA,CAAAw4F,EAAA,IACAlmD,IACAkmD,IAEA,GAAAA,EAAA,MACAA,EAAA,EACA,MAEA,GAAAx6E,KAAAA,EACAu6E,EAAA,GACAjmD,SACU,GAAAt0B,KAAAA,OAEA,CAEV4H,IACA,KACA,CACA,CACA,GAAA0sB,EAAA,CACA,IAAAtmB,EAAA,CACAptB,KACAq2F,IAAAzY,EAAA58E,MAAA,EAAA24F,GAAAjmD,EAAA,EACA,aACA,oBACAxyC,MAAA,CACAuqB,KAAA2D,EAAAlI,GAAA,CAAAuE,IAAA,CACAL,OAAAgE,EAAAlI,GAAA,CAAAkE,MAAA,CAAAsoB,EACAr9B,OAAA+Y,EAAAlI,GAAA,CAAA7Q,MAAA,CAAAq9B,EACAmmD,OAAAzqE,EAAAluB,KAAA,CAAA24F,MAAA,CAAA7yE,EACA8yE,aAAA9yE,EACA4yE,EACAxqE,EAAAluB,KAAA,CAAA44F,YAAA,CAAAF,CACA,EACA1yE,IAAAhhB,OAAA0zC,MAAA,IAA+BxqB,EAAAlI,GAAA,CAC/B,CACAkI,CAAAA,EAAAlI,GAAA,CAAAhhB,OAAA0zC,MAAA,IAAmCxsB,EAAAlsB,KAAA,EACnCkuB,EAAAluB,KAAA,CAAAmV,MAAA,GAAA+Y,EAAAlI,GAAA,CAAA7Q,MAAA,CACAnQ,OAAA0zC,MAAA,CAAAxqB,EAAAhC,IAEAwwD,EAAA97B,MAAA,CACAu0C,EACA,EACA,SAAAjpE,EAAAhuB,EAAA,CACA,QAAAguB,EAAAhuB,EAAA,EAEAi3F,GAAA,EAEA,CACAA,GACA,CAEA,OAAAzY,CACA,iBEtMO,IAAAmc,GAAA,CACP95F,KAAA,gBACA2hC,SAOA,SAAAm5C,CAAA,CAAAR,CAAA,CAAAS,CAAA,EACA,IAEAvb,EAFA/rB,EAAA,EAGA,OAYA,SAAA3tC,CAAA,EAGA,OAFAg1E,EAAAU,KAAA,kBAgBAhc,EAdA15D,EAeA4sF,SAaAA,EAAA5sF,CAAA,SACA,IAAA05D,GACAsb,EAAAU,KAAA,0BACAue,SAmBAA,EAAAj0F,CAAA,SACA,IAAA05D,GACAsb,EAAAW,OAAA,CAAA31E,GACA2tC,IACAsmD,IAEAjf,EAAAY,IAAA,0BACW,GAAAuM,GAAAhN,EAAA,EAAan1E,GAAS,GAAAkoF,GAAA/qE,CAAA,EAAY63D,EAAA4X,EAAA,cAAA5sF,GAAA4sF,EAAA5sF,GAC7C,EA3BAA,IAEA2tC,GAAA,GAAA3tC,CAAAA,OAAAA,GAAuC,GAAAmiF,GAAA9M,EAAA,EAAkBr1E,EAAA,GACzDg1E,EAAAY,IAAA,kBACApB,EAAAx0E,IAEAi1E,EAAAj1E,EACA,EAtCAA,EACA,CA0DA,CApFA,ECEOu9B,GAAA,CACPrjC,KAAA,OACA2hC,SA0BA,SAAAm5C,CAAA,CAAAR,CAAA,CAAAS,CAAA,EACA,IAAAx9D,EAAA,KACAslB,EAAAtlB,EAAAogE,MAAA,CAAApgE,EAAAogE,MAAA,CAAA58E,MAAA,IACAi5F,EAAAn3D,GAAAA,eAAAA,CAAA,IAAA9iC,IAAA,CAAA8iC,CAAA,IAAAgvD,cAAA,CAAAhvD,CAAA,QAAA9hC,MAAA,GACA0yC,EAAA,EACA,OAGA,SAAA3tC,CAAA,EACA,IAAA0mC,EAAAjvB,EAAAg6E,cAAA,CAAAx3F,IAAA,EAAA+F,CAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,EAAA,+BACA,GAAA0mC,kBAAAA,EAAA,CAAAjvB,EAAAg6E,cAAA,CAAA/3B,MAAA,EAAA15D,IAAAyX,EAAAg6E,cAAA,CAAA/3B,MAAA,CAAwG,GAAAyoB,GAAAgS,EAAA,EAAUn0F,GAAA,CAOlH,GANAyX,EAAAg6E,cAAA,CAAAx3F,IAAA,GACAwd,EAAAg6E,cAAA,CAAAx3F,IAAA,CAAAysC,EACAsuC,EAAAU,KAAA,CAAAhvC,EAAA,CACAsqD,WAAA,EACA,IAEAtqD,kBAAAA,EAEA,OADAsuC,EAAAU,KAAA,mBACA11E,KAAAA,GAAAA,KAAAA,EAAAg1E,EAAA3iC,KAAA,CAA0D2hD,GAAa/e,EAAAmf,GAAAp0F,GAAAo0F,EAAAp0F,GAEvE,IAAAyX,EAAAgwE,SAAA,EAAAznF,KAAAA,EAGA,OAFAg1E,EAAAU,KAAA,mBACAV,EAAAU,KAAA,kBACA77C,SAOAA,EAAA75B,CAAA,QACA,CAAQ,EAAAmiF,GAAAgS,EAAA,EAAUn0F,IAAA,EAAA2tC,EAAA,IAClBqnC,EAAAW,OAAA,CAAA31E,GACA65B,GAEA,EAAApiB,EAAAgwE,SAAA,EAAA95C,EAAA,IAAAl2B,CAAAA,EAAAg6E,cAAA,CAAA/3B,MAAA,CAAA15D,IAAAyX,EAAAg6E,cAAA,CAAA/3B,MAAA,CAAA15D,KAAAA,GAAAA,KAAAA,CAAA,GACAg1E,EAAAY,IAAA,kBACAwe,EAAAp0F,IAEAi1E,EAAAj1E,EACA,EAjBAA,EAEA,CACA,OAAAi1E,EAAAj1E,EACA,EAkBA,SAAAo0F,EAAAp0F,CAAA,EAKA,OAJAg1E,EAAAU,KAAA,mBACAV,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,mBACAn+D,EAAAg6E,cAAA,CAAA/3B,MAAA,CAAAjiD,EAAAg6E,cAAA,CAAA/3B,MAAA,EAAA15D,EACAg1E,EAAA3iC,KAAA,CAAyBm0C,GAAAvqE,CAAS,CAElCxE,EAAAgwE,SAAA,CAAAxS,EAAAof,EAAArf,EAAAuR,OAAA,CAAA+N,GAAAC,EAAAC,GACA,CAGA,SAAAH,EAAAr0F,CAAA,EAGA,OAFAyX,EAAAg6E,cAAA,CAAAgD,gBAAA,IACAP,IACAK,EAAAv0F,EACA,CAGA,SAAAw0F,EAAAx0F,CAAA,QACA,CAAQ,EAAAmiF,GAAAhN,EAAA,EAAan1E,IACrBg1E,EAAAU,KAAA,6BACAV,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,6BACA2e,GAEAtf,EAAAj1E,EACA,CAGA,SAAAu0F,EAAAv0F,CAAA,EAEA,OADAyX,EAAAg6E,cAAA,CAAA9jD,IAAA,CAAAumD,EAAAz8E,EAAAs0E,cAAA,CAAA/W,EAAAY,IAAA,uBAAA36E,MAAA,CACAu5E,EAAAx0E,EACA,CACA,EAxGA8sD,aAAA,CACAjxB,SA6GA,SAAAm5C,CAAA,CAAAR,CAAA,CAAAS,CAAA,EACA,IAAAx9D,EAAA,KAEA,OADAA,EAAAg6E,cAAA,CAAAG,UAAA,CAAA17E,KAAAA,EACA8+D,EAAA3iC,KAAA,CAAuBm0C,GAAAvqE,CAAS,CAGhC,SAAAjc,CAAA,EAKA,OAJAyX,EAAAg6E,cAAA,CAAAiD,iBAAA,CAAAj9E,EAAAg6E,cAAA,CAAAiD,iBAAA,EAAAj9E,EAAAg6E,cAAA,CAAAgD,gBAAA,CAIW,GAAAvM,GAAA/qE,CAAA,EAAY63D,EAAAR,EAAA,iBAAA/8D,EAAAg6E,cAAA,CAAA9jD,IAAA,IAAA3tC,EACvB,EAGA,SAAAA,CAAA,SACA,EAAAyxF,cAAA,CAAAiD,iBAAA,GAAkD,GAAAvS,GAAAhN,EAAA,EAAan1E,IAC/DyX,EAAAg6E,cAAA,CAAAiD,iBAAA,CAAAx+E,KAAAA,EACAuB,EAAAg6E,cAAA,CAAAgD,gBAAA,CAAAv+E,KAAAA,EACAy+E,EAAA30F,KAEAyX,EAAAg6E,cAAA,CAAAiD,iBAAA,CAAAx+E,KAAAA,EACAuB,EAAAg6E,cAAA,CAAAgD,gBAAA,CAAAv+E,KAAAA,EACA8+D,EAAAuR,OAAA,CAAAqO,GAAApgB,EAAAmgB,GAAA30F,GACA,GAGA,SAAA20F,EAAA30F,CAAA,EAOA,OALAyX,EAAAg6E,cAAA,CAAAG,UAAA,IAEAn6E,EAAAgwE,SAAA,CAAAvxE,KAAAA,EAGW,GAAAgyE,GAAA/qE,CAAA,EAAY63D,EAAAA,EAAAuR,OAAA,CAAAhpD,GAAAi3C,EAAAS,GAAA,aAAAx9D,EAAAuoD,MAAA,CAAAwX,UAAA,CAAA+Q,OAAA,CAAA/xB,IAAA,CAAAzqC,QAAA,iBAAA7V,KAAAA,EAAA,GAAAlW,EACvB,CACA,CAhJA,EACA41E,KAoKA,SAAAZ,CAAA,EACAA,EAAAY,IAAA,MAAA6b,cAAA,CAAAx3F,IAAA,CACA,CArKA,EAGAq6F,GAAA,CACAz4D,SAuKA,SAAAm5C,CAAA,CAAAR,CAAA,CAAAS,CAAA,EACA,IAAAx9D,EAAA,KAIA,MAAS,GAAAywE,GAAA/qE,CAAA,EAAY63D,EAGrB,SAAAh1E,CAAA,EACA,IAAA+8B,EAAAtlB,EAAAogE,MAAA,CAAApgE,EAAAogE,MAAA,CAAA58E,MAAA,IACA,OAAY,GAAAknF,GAAAhN,EAAA,EAAan1E,IAAA+8B,GAAAA,6BAAAA,CAAA,IAAA9iC,IAAA,CAAAu6E,EAAAx0E,GAAAi1E,EAAAj1E,EACzB,EANqB,2BAAAyX,EAAAuoD,MAAA,CAAAwX,UAAA,CAAA+Q,OAAA,CAAA/xB,IAAA,CAAAzqC,QAAA,iBAAA7V,KAAAA,EAAA,EAOrB,EAlLAo/D,QAAA,EACA,EAGAsf,GAAA,CACA/4D,SA0IA,SAAAm5C,CAAA,CAAAR,CAAA,CAAAS,CAAA,EACA,IAAAx9D,EAAA,KACA,MAAS,GAAAywE,GAAA/qE,CAAA,EAAY63D,EAGrB,SAAAh1E,CAAA,EACA,IAAA+8B,EAAAtlB,EAAAogE,MAAA,CAAApgE,EAAAogE,MAAA,CAAA58E,MAAA,IACA,OAAA8hC,GAAAA,mBAAAA,CAAA,IAAA9iC,IAAA,EAAA8iC,CAAA,IAAAgvD,cAAA,CAAAhvD,CAAA,QAAA9hC,MAAA,GAAAwc,EAAAg6E,cAAA,CAAA9jD,IAAA,CAAA6mC,EAAAx0E,GAAAi1E,EAAAj1E,EACA,EANqB,iBAAAyX,EAAAg6E,cAAA,CAAA9jD,IAAA,GAOrB,EAlJA2nC,QAAA,EACA,ECxBOuf,GAAA,CACP36F,KAAA,aACA2hC,SAWA,SAAAm5C,CAAA,CAAAR,CAAA,CAAAS,CAAA,EACA,IAAAx9D,EAAA,KACA,OAYA,SAAAzX,CAAA,EACA,GAAAA,KAAAA,EAAA,CACA,IAAA69E,EAAApmE,EAAAg6E,cAAA,CAWA,OAVA5T,EAAA7pE,IAAA,GACAghE,EAAAU,KAAA,eACAsb,WAAA,EACA,GACAnT,EAAA7pE,IAAA,KAEAghE,EAAAU,KAAA,qBACAV,EAAAU,KAAA,qBACAV,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,qBACAx4C,CACA,CACA,OAAA63C,EAAAj1E,EACA,EAYA,SAAAo9B,EAAAp9B,CAAA,QACA,CAAQ,EAAAmiF,GAAAhN,EAAA,EAAan1E,IACrBg1E,EAAAU,KAAA,+BACAV,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,+BACAZ,EAAAY,IAAA,qBACApB,IAEAQ,EAAAY,IAAA,qBACApB,EAAAx0E,GACA,CACA,EA/DA8sD,aAAA,CACAjxB,SA4EA,SAAAm5C,CAAA,CAAAR,CAAA,CAAAS,CAAA,EACA,IAAAx9D,EAAA,KACA,OAeA,SAAAzX,CAAA,QACA,CAAQ,EAAAmiF,GAAAhN,EAAA,EAAan1E,GAGR,GAAAkoF,GAAA/qE,CAAA,EAAY63D,EAAA8f,EAAA,aAAAr9E,EAAAuoD,MAAA,CAAAwX,UAAA,CAAA+Q,OAAA,CAAA/xB,IAAA,CAAAzqC,QAAA,iBAAA7V,KAAAA,EAAA,GAAAlW,GAEzB80F,EAAA90F,EACA,EAeA,SAAA80F,EAAA90F,CAAA,EACA,OAAAg1E,EAAAuR,OAAA,CAAAsO,GAAArgB,EAAAS,GAAAj1E,EACA,CACA,CArHA,EACA41E,KAuHA,SAAAZ,CAAA,EACAA,EAAAY,IAAA,cACA,CAxHA,EC8BO,SAAAmf,GACP/f,CAAA,CACAR,CAAA,CACAS,CAAA,CACAh7E,CAAA,CACA+6F,CAAA,CACAC,CAAA,CACAC,CAAA,CACAC,CAAA,CACA15E,CAAA,EAEA,IAAA+5D,EAAA/5D,GAAArB,OAAAq7D,iBAAA,CACA2f,EAAA,EACA,OAcA,SAAAp1F,CAAA,SACA,KAAAA,GACAg1E,EAAAU,KAAA,CAAAz7E,GACA+6E,EAAAU,KAAA,CAAAsf,GACAhgB,EAAAU,KAAA,CAAAuf,GACAjgB,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,CAAAqf,GACAI,GAIAr1F,OAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAuD,GAAAmiF,GAAAmT,EAAA,EAAYt1F,GACnEi1E,EAAAj1E,IAEAg1E,EAAAU,KAAA,CAAAz7E,GACA+6E,EAAAU,KAAA,CAAAwf,GACAlgB,EAAAU,KAAA,CAAAyf,GACAngB,EAAAU,KAAA,gBACA3kB,YAAA,QACA,GACAz4C,EAAAtY,GACA,EAYA,SAAAq1F,EAAAr1F,CAAA,SACA,KAAAA,GACAg1E,EAAAU,KAAA,CAAAuf,GACAjgB,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,CAAAqf,GACAjgB,EAAAY,IAAA,CAAAof,GACAhgB,EAAAY,IAAA,CAAA37E,GACAu6E,IAEAQ,EAAAU,KAAA,CAAAyf,GACAngB,EAAAU,KAAA,gBACA3kB,YAAA,QACA,GACAwkC,EAAAv1F,GACA,CAYA,SAAAu1F,EAAAv1F,CAAA,SACA,KAAAA,GACAg1E,EAAAY,IAAA,gBACAZ,EAAAY,IAAA,CAAAuf,GACAE,EAAAr1F,IAEAA,OAAAA,GAAAA,KAAAA,GAAwC,GAAAmiF,GAAA9M,EAAA,EAAkBr1E,GAC1Di1E,EAAAj1E,IAEAg1E,EAAAW,OAAA,CAAA31E,GACAA,KAAAA,EAAAw1F,EAAAD,EACA,CAYA,SAAAC,EAAAx1F,CAAA,SACA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GACAg1E,EAAAW,OAAA,CAAA31E,GACAu1F,GAEAA,EAAAv1F,EACA,CAYA,SAAAsY,EAAAtY,CAAA,QACA,CACAo1F,GACAp1F,CAAAA,OAAAA,GAAAA,KAAAA,GAAuC,GAAAmiF,GAAArL,EAAA,EAAyB92E,EAAA,GAEhEg1E,EAAAY,IAAA,gBACAZ,EAAAY,IAAA,CAAAuf,GACAngB,EAAAY,IAAA,CAAAsf,GACAlgB,EAAAY,IAAA,CAAA37E,GACAu6E,EAAAx0E,IAEAo1F,EAAA5f,GAAAx1E,KAAAA,GACAg1E,EAAAW,OAAA,CAAA31E,GACAo1F,IACA98E,GAEAtY,KAAAA,GACAg1E,EAAAW,OAAA,CAAA31E,GACAo1F,IACA98E,GAMAtY,OAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAuD,GAAAmiF,GAAAmT,EAAA,EAAYt1F,GACnEi1E,EAAAj1E,IAEAg1E,EAAAW,OAAA,CAAA31E,GACAA,KAAAA,EAAAy1F,EAAAn9E,EACA,CAYA,SAAAm9E,EAAAz1F,CAAA,SACA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GACAg1E,EAAAW,OAAA,CAAA31E,GACAsY,GAEAA,EAAAtY,EACA,CACA,CCzLO,SAAA01F,GAAA1gB,CAAA,CAAAR,CAAA,CAAAS,CAAA,CAAAh7E,CAAA,CAAA4nF,CAAA,CAAAsT,CAAA,MAIPvC,EAHA,IAAAn7E,EAAA,KACAk2B,EAAA,EAGA,OAYA,SAAA3tC,CAAA,EAMA,OALAg1E,EAAAU,KAAA,CAAAz7E,GACA+6E,EAAAU,KAAA,CAAAmM,GACA7M,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,CAAAiM,GACA7M,EAAAU,KAAA,CAAAyf,GACAvI,CACA,EAYA,SAAAA,EAAA5sF,CAAA,SACA,EACA,KACAA,OAAAA,GACAA,KAAAA,GACAA,KAAAA,GAAA,CAAA4yF,GAMA5yF,KAAAA,GACA,CAAA2tC,GACA,2BAAAl2B,EAAAuoD,MAAA,CAAAwX,UAAA,CAEAvC,EAAAj1E,GAEAA,KAAAA,GACAg1E,EAAAY,IAAA,CAAAuf,GACAngB,EAAAU,KAAA,CAAAmM,GACA7M,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,CAAAiM,GACA7M,EAAAY,IAAA,CAAA37E,GACAu6E,GAIQ,GAAA2N,GAAA9M,EAAA,EAAkBr1E,IAC1Bg1E,EAAAU,KAAA,eACAV,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,eACAgX,IAEA5X,EAAAU,KAAA,gBACA3kB,YAAA,QACA,GACA4kC,EAAA31F,GACA,CAYA,SAAA21F,EAAA31F,CAAA,SACA,OACAA,GACAA,KAAAA,GACAA,KAAAA,GACM,GAAAmiF,GAAA9M,EAAA,EAAkBr1E,IACxB2tC,IAAA,KAEAqnC,EAAAY,IAAA,gBACAgX,EAAA5sF,KAEAg1E,EAAAW,OAAA,CAAA31E,GACA4yF,GAAAA,CAAAA,EAAA,CAAuB,GAAAzQ,GAAAhN,EAAA,EAAan1E,EAAA,EACpCA,KAAAA,EAAA41F,EAAAD,EACA,CAYA,SAAAC,EAAA51F,CAAA,SACA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GACAg1E,EAAAW,OAAA,CAAA31E,GACA2tC,IACAgoD,GAEAA,EAAA31F,EACA,CACA,CCtHO,SAAA61F,GAAA7gB,CAAA,CAAAR,CAAA,CAAAS,CAAA,CAAAh7E,CAAA,CAAA4nF,CAAA,CAAAsT,CAAA,EAEP,IAAAz7B,EACA,OAYA,SAAA15D,CAAA,SACA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GACAg1E,EAAAU,KAAA,CAAAz7E,GACA+6E,EAAAU,KAAA,CAAAmM,GACA7M,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,CAAAiM,GACAnoB,EAAA15D,KAAAA,EAAA,GAAAA,EACAk2B,GAEA++C,EAAAj1E,EACA,EAcA,SAAAk2B,EAAAl2B,CAAA,SACA,IAAA05D,GACAsb,EAAAU,KAAA,CAAAmM,GACA7M,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,CAAAiM,GACA7M,EAAAY,IAAA,CAAA37E,GACAu6E,IAEAQ,EAAAU,KAAA,CAAAyf,GACAvI,EAAA5sF,GACA,CAYA,SAAA4sF,EAAA5sF,CAAA,SACA,IAAA05D,GACAsb,EAAAY,IAAA,CAAAuf,GACAj/D,EAAAwjC,IAEA15D,OAAAA,EACAi1E,EAAAj1E,GAIQ,GAAAmiF,GAAA9M,EAAA,EAAkBr1E,IAE1Bg1E,EAAAU,KAAA,eACAV,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,eACa,GAAAsS,GAAA/qE,CAAA,EAAY63D,EAAA4X,EAAA,gBAEzB5X,EAAAU,KAAA,gBACA3kB,YAAA,QACA,GACAl3B,EAAA75B,GACA,CAOA,SAAA65B,EAAA75B,CAAA,SACA,IAAA05D,GAAA15D,OAAAA,GAA4C,GAAAmiF,GAAA9M,EAAA,EAAkBr1E,IAC9Dg1E,EAAAY,IAAA,gBACAgX,EAAA5sF,KAEAg1E,EAAAW,OAAA,CAAA31E,GACAA,KAAAA,EAAAma,EAAA0f,EACA,CAYA,SAAA1f,EAAAna,CAAA,SACA,IAAA05D,GAAA15D,KAAAA,GACAg1E,EAAAW,OAAA,CAAA31E,GACA65B,GAEAA,EAAA75B,EACA,CACA,CClIO,SAAA81F,GAAA9gB,CAAA,CAAAR,CAAA,EAEP,IAAAoe,EACA,OAGA,SAAAz3F,EAAA6E,CAAA,QACA,CAAQ,EAAAmiF,GAAA9M,EAAA,EAAkBr1E,IAC1Bg1E,EAAAU,KAAA,eACAV,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,eACAgd,EAAA,GACAz3F,GAEQ,GAAAgnF,GAAAhN,EAAA,EAAan1E,GACR,GAAAkoF,GAAA/qE,CAAA,EACb63D,EACA75E,EACAy3F,EAAA,2BACA5yF,GAEAw0E,EAAAx0E,EACA,CACA,iBC3BA,IAAA+1F,GAAA,CACAl6D,SAsKA,SAAAm5C,CAAA,CAAAR,CAAA,CAAAS,CAAA,EACA,OAcA,SAAAj1E,CAAA,EACA,MAAW,GAAAmiF,GAAArL,EAAA,EAAyB92E,GAAS81F,GAAiB9gB,EAAAghB,GAAAh2F,GAAAi1E,EAAAj1E,EAC9D,EAaA,SAAAg2F,EAAAh2F,CAAA,EACA,OAAW61F,GAAY7gB,EAAAihB,EAAAhhB,EAAA,mEAAAj1E,EACvB,CAYA,SAAAi2F,EAAAj2F,CAAA,EACA,MAAW,GAAAmiF,GAAAhN,EAAA,EAAan1E,GAAS,GAAAkoF,GAAA/qE,CAAA,EAAY63D,EAAAkhB,EAAA,cAAAl2F,GAAAk2F,EAAAl2F,EAC7C,CAYA,SAAAk2F,EAAAl2F,CAAA,EACA,OAAAA,OAAAA,GAA4B,GAAAmiF,GAAA9M,EAAA,EAAkBr1E,GAAAw0E,EAAAx0E,GAAAi1E,EAAAj1E,EAC9C,CACA,EAlOAs1E,QAAA,EACA,ECdO6gB,GAAA,CACPj8F,KAAA,eACA2hC,SAaA,SAAAm5C,CAAA,CAAAR,CAAA,CAAAS,CAAA,EACA,IAAAx9D,EAAA,KACA,OAgBA,SAAAzX,CAAA,EAMA,OAHAg1E,EAAAU,KAAA,iBAGW,GAAAwS,GAAA/qE,CAAA,EAAY63D,EAAAohB,EAAA,gBAAAp2F,EACvB,EAYA,SAAAo2F,EAAAp2F,CAAA,EACA,IAAA+8B,EAAAtlB,EAAAogE,MAAA,CAAApgE,EAAAogE,MAAA,CAAA58E,MAAA,IACA,OAAA8hC,GAAAA,eAAAA,CAAA,IAAA9iC,IAAA,EAAA8iC,CAAA,IAAAgvD,cAAA,CAAAhvD,CAAA,QAAA9hC,MAAA,IAAA2xF,SAaAA,EAAA5sF,CAAA,SACA,OAAAA,EACAo9B,EAAAp9B,GAEQ,GAAAmiF,GAAA9M,EAAA,EAAkBr1E,GAC1Bg1E,EAAAuR,OAAA,CAAA8P,GAAAzJ,EAAAxvD,GAAAp9B,IAEAg1E,EAAAU,KAAA,kBACA77C,SAaAA,EAAA75B,CAAA,SACA,OAAAA,GAAyB,GAAAmiF,GAAA9M,EAAA,EAAkBr1E,IAC3Cg1E,EAAAY,IAAA,kBACAgX,EAAA5sF,KAEAg1E,EAAAW,OAAA,CAAA31E,GACA65B,EACA,EApBA75B,GACA,EAtBAA,GAAAi1E,EAAAj1E,EACA,CA2CA,SAAAo9B,EAAAp9B,CAAA,EAKA,OAJAg1E,EAAAY,IAAA,iBAIApB,EAAAx0E,EACA,CACA,CAtGA,EAGAq2F,GAAA,CACAx6D,SAwGA,SAAAm5C,CAAA,CAAAR,CAAA,CAAAS,CAAA,EACA,IAAAx9D,EAAA,KACA,OAAA4+E,EAaA,SAAAA,EAAAr2F,CAAA,SAGA,EAAAggE,MAAA,CAAA/sC,IAAA,CAAAxb,EAAAof,GAAA,GAAAnR,IAAA,EACAuvD,EAAAj1E,GAEQ,GAAAmiF,GAAA9M,EAAA,EAAkBr1E,IAC1Bg1E,EAAAU,KAAA,eACAV,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,eACAygB,GASW,GAAAnO,GAAA/qE,CAAA,EAAY63D,EAAAohB,EAAA,gBAAAp2F,EACvB,CAYA,SAAAo2F,EAAAp2F,CAAA,EACA,IAAA+8B,EAAAtlB,EAAAogE,MAAA,CAAApgE,EAAAogE,MAAA,CAAA58E,MAAA,IACA,OAAA8hC,GAAAA,eAAAA,CAAA,IAAA9iC,IAAA,EAAA8iC,CAAA,IAAAgvD,cAAA,CAAAhvD,CAAA,QAAA9hC,MAAA,IAAAu5E,EAAAx0E,GAAmH,GAAAmiF,GAAA9M,EAAA,EAAkBr1E,GAAAq2F,EAAAr2F,GAAAi1E,EAAAj1E,EACrI,CACA,EA1JAs1E,QAAA,EACA,EEPOghB,GAAA,CACPp8F,KAAA,kBACA2hC,SAkEA,SAAAm5C,CAAA,CAAAR,CAAA,CAAAS,CAAA,MAGAvb,EAFA,IAAAjiD,EAAA,KAGA,OAaA,SAAAzX,CAAA,EACA,IAEAu2F,EAFAt1E,EAAAxJ,EAAAogE,MAAA,CAAA58E,MAAA,CAIA,KAAAgmB,KAGA,GAAAxJ,eAAAA,EAAAogE,MAAA,CAAA52D,EAAA,IAAAhnB,IAAA,EAAAwd,eAAAA,EAAAogE,MAAA,CAAA52D,EAAA,IAAAhnB,IAAA,EAAAwd,YAAAA,EAAAogE,MAAA,CAAA52D,EAAA,IAAAhnB,IAAA,EACAs8F,EAAA9+E,cAAAA,EAAAogE,MAAA,CAAA52D,EAAA,IAAAhnB,IAAA,CACA,KACA,OAKA,CAAAwd,EAAAuoD,MAAA,CAAA/sC,IAAA,CAAAxb,EAAAof,GAAA,GAAAnR,IAAA,GAAAjO,CAAAA,EAAAgwE,SAAA,EAAA8O,CAAA,GACAvhB,EAAAU,KAAA,sBACAhc,EAAA15D,EAkBAg1E,EAAAU,KAAA,8BACA77C,SAcAA,EAAA75B,CAAA,SACA,IAAA05D,GACAsb,EAAAW,OAAA,CAAA31E,GACA65B,IAEAm7C,EAAAY,IAAA,8BACW,GAAAuM,GAAAhN,EAAA,EAAan1E,GAAS,GAAAkoF,GAAA/qE,CAAA,EAAY63D,EAAA53C,EAAA,cAAAp9B,GAAAo9B,EAAAp9B,GAC7C,EAvCAA,IAEAi1E,EAAAj1E,EACA,EAiDA,SAAAo9B,EAAAp9B,CAAA,SACA,OAAAA,GAAyB,GAAAmiF,GAAA9M,EAAA,EAAkBr1E,IAC3Cg1E,EAAAY,IAAA,sBACApB,EAAAx0E,IAEAi1E,EAAAj1E,EACA,CACA,EAhKAw2F,UAIA,SAAA3e,CAAA,CAAAx+E,CAAA,EAEA,IAEA+qB,EAEAmS,EAEAyb,EANA/wB,EAAA42D,EAAA58E,MAAA,CAUA,KAAAgmB,KACA,GAAA42D,UAAAA,CAAA,CAAA52D,EAAA,KACA,GAAA42D,YAAAA,CAAA,CAAA52D,EAAA,IAAAhnB,IAAA,EACAmqB,EAAAnD,EACA,KACA,CACA,cAAA42D,CAAA,CAAA52D,EAAA,IAAAhnB,IAAA,EACAs8B,CAAAA,EAAAtV,CAAA,CAEA,KAGA,YAAA42D,CAAA,CAAA52D,EAAA,IAAAhnB,IAAA,EAEA49E,EAAA97B,MAAA,CAAA96B,EAAA,GAEA+wB,GAAA6lC,eAAAA,CAAA,CAAA52D,EAAA,IAAAhnB,IAAA,EACA+3C,CAAAA,EAAA/wB,CAAA,EAIA,IAAA44C,EAAA,CACA5/D,KAAA,gBACAkB,MAAAgF,OAAA0zC,MAAA,IAA2BgkC,CAAA,CAAAthD,EAAA,IAAAp7B,KAAA,EAC3BgmB,IAAAhhB,OAAA0zC,MAAA,IAAyBgkC,CAAA,CAAAA,EAAA58E,MAAA,OAAAkmB,GAAA,CACzB,EAiBA,OAdA02D,CAAA,CAAAthD,EAAA,IAAAt8B,IAAA,qBAIA+3C,GACA6lC,EAAA97B,MAAA,CAAAxlB,EAAA,WAAAsjC,EAAAxgE,EAAA,EACAw+E,EAAA97B,MAAA,CAAA/J,EAAA,YAAA6lC,CAAA,CAAAzzD,EAAA,IAAA/qB,EAAA,EACAw+E,CAAA,CAAAzzD,EAAA,IAAAjD,GAAA,CAAAhhB,OAAA0zC,MAAA,IAA6CgkC,CAAA,CAAA7lC,EAAA,IAAA7wB,GAAA,GAE7C02D,CAAA,CAAAzzD,EAAA,IAAAy1C,EAIAge,EAAAv+E,IAAA,SAAAugE,EAAAxgE,EAAA,EACAw+E,CACA,CA1DA,ECDO4e,GAAA,CACP,UACA,UACA,QACA,OACA,WACA,aACA,OACA,UACA,SACA,MACA,WACA,KACA,UACA,SACA,MACA,MACA,KACA,KACA,WACA,aACA,SACA,SACA,OACA,QACA,WACA,KACA,KACA,KACA,KACA,KACA,KACA,OACA,SACA,KACA,OACA,SACA,SACA,KACA,OACA,OACA,OACA,WACA,MACA,WACA,KACA,WACA,SACA,IACA,QACA,SACA,UACA,UACA,QACA,QACA,KACA,QACA,KACA,QACA,QACA,KACA,QACA,KACA,CAcOC,GAAA,oCCtEDC,GAAe,CACrB96D,SA2zBA,SAAAm5C,CAAA,CAAAR,CAAA,CAAAS,CAAA,EACA,OAaA,SAAAj1E,CAAA,EAIA,OAHAg1E,EAAAU,KAAA,eACAV,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,eACAZ,EAAAuR,OAAA,CAA2BC,GAAAvqE,CAAS,CAAAu4D,EAAAS,EACpC,CACA,EA90BAK,QAAA,EACA,EACAshB,GAAA,CACA/6D,SA0wBA,SAAAm5C,CAAA,CAAAR,CAAA,CAAAS,CAAA,EACA,IAAAx9D,EAAA,KACA,OAaA,SAAAzX,CAAA,QACA,CAAQ,EAAAmiF,GAAA9M,EAAA,EAAkBr1E,IAC1Bg1E,EAAAU,KAAA,eACAV,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,eACAx4C,GAEA63C,EAAAj1E,EACA,EAaA,SAAAo9B,EAAAp9B,CAAA,EACA,OAAAyX,EAAAuoD,MAAA,CAAA/sC,IAAA,CAAAxb,EAAAof,GAAA,GAAAnR,IAAA,EAAAuvD,EAAAj1E,GAAAw0E,EAAAx0E,EACA,CACA,EAhzBAs1E,QAAA,EACA,EClBAuhB,GAAA,CACAh7D,SA+ZA,SAAAm5C,CAAA,CAAAR,CAAA,CAAAS,CAAA,EACA,IAAAx9D,EAAA,KACA,OAOA,SAAAzX,CAAA,SACA,OAAAA,EACAi1E,EAAAj1E,IAEAg1E,EAAAU,KAAA,eACAV,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,eACA55E,EACA,EAOA,SAAAA,EAAAgE,CAAA,EACA,OAAAyX,EAAAuoD,MAAA,CAAA/sC,IAAA,CAAAxb,EAAAof,GAAA,GAAAnR,IAAA,EAAAuvD,EAAAj1E,GAAAw0E,EAAAx0E,EACA,CACA,EAzbAs1E,QAAA,EACA,EAGOwhB,GAAA,CACP58F,KAAA,aACA2hC,SAQA,SAAAm5C,CAAA,CAAAR,CAAA,CAAAS,CAAA,MAUAvb,EATA,IAAAjiD,EAAA,KAEAs/E,EAAA,CACAl7D,SAiSA,SAAAm5C,CAAA,CAAAR,CAAA,CAAAS,CAAA,EACA,IAAAtnC,EAAA,EACA,OAOA,SAAA3tC,CAAA,EAIA,OAHAg1E,EAAAU,KAAA,eACAV,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,eACAz6E,CACA,EAcA,SAAAA,EAAA6E,CAAA,EAKA,OADAg1E,EAAAU,KAAA,oBACa,GAAAyM,GAAAhN,EAAA,EAAan1E,GAAS,GAAAkoF,GAAA/qE,CAAA,EAAY63D,EAAAgiB,EAAA,aAAAv/E,EAAAuoD,MAAA,CAAAwX,UAAA,CAAA+Q,OAAA,CAAA/xB,IAAA,CAAAzqC,QAAA,iBAAA7V,KAAAA,EAAA,GAAAlW,GAAAg3F,EAAAh3F,EAC/C,CAcA,SAAAg3F,EAAAh3F,CAAA,SACA,IAAA05D,GACAsb,EAAAU,KAAA,4BACAuhB,SAiBAA,EAAAj3F,CAAA,SACA,IAAA05D,GACA/rB,IACAqnC,EAAAW,OAAA,CAAA31E,GACAi3F,GAEAtpD,GAAAupD,GACAliB,EAAAY,IAAA,4BACe,GAAAuM,GAAAhN,EAAA,EAAan1E,GAAS,GAAAkoF,GAAA/qE,CAAA,EAAY63D,EAAAmiB,EAAA,cAAAn3F,GAAAm3F,EAAAn3F,IAEjDi1E,EAAAj1E,EACA,EA5BAA,IAEAi1E,EAAAj1E,EACA,CAuCA,SAAAm3F,EAAAn3F,CAAA,SACA,OAAAA,GAA2B,GAAAmiF,GAAA9M,EAAA,EAAkBr1E,IAC7Cg1E,EAAAY,IAAA,oBACApB,EAAAx0E,IAEAi1E,EAAAj1E,EACA,CACA,EApYAs1E,QAAA,EACA,EACA8hB,EAAA,EACAF,EAAA,EAGA,OAcA,SAAAl3F,CAAA,EAEA,OAAAq3F,SAeAr3F,CAAA,EACA,IAAA+8B,EAAAtlB,EAAAogE,MAAA,CAAApgE,EAAAogE,MAAA,CAAA58E,MAAA,IAMA,OALAm8F,EAAAr6D,GAAAA,eAAAA,CAAA,IAAA9iC,IAAA,CAAA8iC,CAAA,IAAAgvD,cAAA,CAAAhvD,CAAA,QAAA9hC,MAAA,GACAy+D,EAAA15D,EACAg1E,EAAAU,KAAA,eACAV,EAAAU,KAAA,oBACAV,EAAAU,KAAA,4BACA4hB,SAeAA,EAAAt3F,CAAA,SACA,IAAA05D,GACAw9B,IACAliB,EAAAW,OAAA,CAAA31E,GACAs3F,GAEAJ,EAAA,EACAjiB,EAAAj1E,IAEAg1E,EAAAY,IAAA,4BACW,GAAAuM,GAAAhN,EAAA,EAAan1E,GAAS,GAAAkoF,GAAA/qE,CAAA,EAAY63D,EAAAuiB,EAAA,cAAAv3F,GAAAu3F,EAAAv3F,GAC7C,EA1BAA,EACA,EAvBAA,EACA,EA6DA,SAAAu3F,EAAAv3F,CAAA,SACA,OAAAA,GAAyB,GAAAmiF,GAAA9M,EAAA,EAAkBr1E,IAC3Cg1E,EAAAY,IAAA,oBACAn+D,EAAAgwE,SAAA,CAAAjT,EAAAx0E,GAAAg1E,EAAA3iC,KAAA,CAAAwkD,GAAAW,EAAAp6D,GAAAp9B,KAEAg1E,EAAAU,KAAA,wBACAV,EAAAU,KAAA,gBACA3kB,YAAA,QACA,GACAntC,SAeAA,EAAA5jB,CAAA,SACA,OAAAA,GAAyB,GAAAmiF,GAAA9M,EAAA,EAAkBr1E,IAC3Cg1E,EAAAY,IAAA,gBACAZ,EAAAY,IAAA,wBACA2hB,EAAAv3F,IAEQ,GAAAmiF,GAAAhN,EAAA,EAAan1E,IACrBg1E,EAAAY,IAAA,gBACAZ,EAAAY,IAAA,wBACa,GAAAsS,GAAA/qE,CAAA,EAAY63D,EAAAyiB,EAAA,cAAAz3F,IAEzBA,KAAAA,GAAAA,IAAA05D,EACAub,EAAAj1E,IAEAg1E,EAAAW,OAAA,CAAA31E,GACA4jB,EACA,EA/BA5jB,GACA,CA4CA,SAAAy3F,EAAAz3F,CAAA,SACA,OAAAA,GAAyB,GAAAmiF,GAAA9M,EAAA,EAAkBr1E,GAC3Cu3F,EAAAv3F,IAEAg1E,EAAAU,KAAA,wBACAV,EAAAU,KAAA,gBACA3kB,YAAA,QACA,GACA2mC,SAeAA,EAAA13F,CAAA,SACA,OAAAA,GAAyB,GAAAmiF,GAAA9M,EAAA,EAAkBr1E,IAC3Cg1E,EAAAY,IAAA,gBACAZ,EAAAY,IAAA,wBACA2hB,EAAAv3F,IAEAA,KAAAA,GAAAA,IAAA05D,EACAub,EAAAj1E,IAEAg1E,EAAAW,OAAA,CAAA31E,GACA03F,EACA,EA1BA13F,GACA,CAwCA,SAAAw3F,EAAAx3F,CAAA,EACA,OAAAg1E,EAAAuR,OAAA,CAAAwQ,EAAA35D,EAAAu6D,GAAA33F,EACA,CAcA,SAAA23F,EAAA33F,CAAA,EAIA,OAHAg1E,EAAAU,KAAA,eACAV,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,eACAsb,CACA,CAcA,SAAAA,EAAAlxF,CAAA,EACA,OAAAo3F,EAAA,GAAgC,GAAAjV,GAAAhN,EAAA,EAAan1E,GAAS,GAAAkoF,GAAA/qE,CAAA,EAAY63D,EAAA4iB,EAAA,aAAAR,EAAA,GAAAp3F,GAAA43F,EAAA53F,EAClE,CAcA,SAAA43F,EAAA53F,CAAA,SACA,OAAAA,GAAyB,GAAAmiF,GAAA9M,EAAA,EAAkBr1E,GAC3Cg1E,EAAA3iC,KAAA,CAAAwkD,GAAAW,EAAAp6D,GAAAp9B,IAEAg1E,EAAAU,KAAA,kBACAmiB,SAeAA,EAAA73F,CAAA,SACA,OAAAA,GAAyB,GAAAmiF,GAAA9M,EAAA,EAAkBr1E,IAC3Cg1E,EAAAY,IAAA,kBACAgiB,EAAA53F,KAEAg1E,EAAAW,OAAA,CAAA31E,GACA63F,EACA,EAtBA73F,GACA,CAmCA,SAAAo9B,EAAAp9B,CAAA,EAEA,OADAg1E,EAAAY,IAAA,eACApB,EAAAx0E,EACA,CA2GA,EAjZA+nF,SAAA,EACA,ECVO1K,GAAA,CACPnjF,KAAA,qBACA2hC,SAOA,SAAAm5C,CAAA,CAAAR,CAAA,CAAAS,CAAA,MAIAx5D,EAEAhf,EALA,IAAAgb,EAAA,KACAk2B,EAAA,EAKA,OAgBA,SAAA3tC,CAAA,EAKA,OAJAg1E,EAAAU,KAAA,uBACAV,EAAAU,KAAA,6BACAV,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,6BACA5hE,CACA,EAiBA,SAAAA,EAAAhU,CAAA,SACA,KAAAA,GACAg1E,EAAAU,KAAA,oCACAV,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,oCACAkiB,IAEA9iB,EAAAU,KAAA,4BACAj6D,EAAA,GACAhf,EAAW0lF,GAAA4V,EAAiB,CAC5Bh7F,EAAAiD,GACA,CAcA,SAAA83F,EAAA93F,CAAA,SACA,KAAAA,GAAAA,MAAAA,GACAg1E,EAAAU,KAAA,wCACAV,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,wCACAZ,EAAAU,KAAA,4BACAj6D,EAAA,EACAhf,EAAa0lF,GAAA6V,EAAa,CAC1Bj7F,IAEAi4E,EAAAU,KAAA,4BACAj6D,EAAA,EACAhf,EAAW0lF,GAAAgS,EAAU,CACrBp3F,EAAAiD,GACA,CAmBA,SAAAjD,EAAAiD,CAAA,EACA,GAAAA,KAAAA,GAAA2tC,EAAA,CACA,IAAAtmB,EAAA2tD,EAAAY,IAAA,mCACA,IAAmBuM,GAAA4V,EAAiB,EAAK3a,EAA6B3lE,EAAAs0E,cAAA,CAAA1kE,KAMtE2tD,EAAAU,KAAA,6BACAV,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,6BACAZ,EAAAY,IAAA,uBACApB,GATAS,EAAAj1E,EAUA,QACA,EAAAA,IAAA2tC,IAAAlyB,GACAu5D,EAAAW,OAAA,CAAA31E,GACAjD,GAEAk4E,EAAAj1E,EACA,CACA,CAnIA,ECLOi4F,GAAA,CACP/9F,KAAA,kBACA2hC,SAOA,SAAAm5C,CAAA,CAAAR,CAAA,CAAAS,CAAA,EACA,OAYA,SAAAj1E,CAAA,EAKA,OAJAg1E,EAAAU,KAAA,oBACAV,EAAAU,KAAA,iBACAV,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,iBACA/7C,CACA,EAYA,SAAAA,EAAA75B,CAAA,QAEA,CAAQ,EAAAmiF,GAAA+V,EAAA,EAAgBl4F,IACxBg1E,EAAAU,KAAA,yBACAV,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,yBACAZ,EAAAY,IAAA,oBACApB,GAEAS,EAAAj1E,EACA,CACA,CAhDA,ECFOm4F,GAAA,CACPj+F,KAAA,aACA2hC,SAOA,SAAAm5C,CAAA,CAAAR,CAAA,EACA,OAGA,SAAAx0E,CAAA,EAIA,OAHAg1E,EAAAU,KAAA,eACAV,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,eACW,GAAAsS,GAAA/qE,CAAA,EAAY63D,EAAAR,EAAA,aACvB,CACA,CAhBA,ECMO4jB,GAAA,CACPl+F,KAAA,WACA2hC,SAoHA,SAAAm5C,CAAA,CAAAR,CAAA,CAAAS,CAAA,MAIAojB,EAEApmD,EALA,IAAAx6B,EAAA,KACAwJ,EAAAxJ,EAAAogE,MAAA,CAAA58E,MAAA,CAOA,KAAAgmB,KACA,IAAAxJ,eAAAA,EAAAogE,MAAA,CAAA52D,EAAA,IAAAhnB,IAAA,EAAAwd,cAAAA,EAAAogE,MAAA,CAAA52D,EAAA,IAAAhnB,IAAA,IAAAwd,EAAAogE,MAAA,CAAA52D,EAAA,IAAAq3E,SAAA,EACAD,EAAA5gF,EAAAogE,MAAA,CAAA52D,EAAA,IACA,KACA,CAEA,OAiBA,SAAAjhB,CAAA,SAEA,EAaAq4F,EAAAE,SAAA,CACAC,EAAAx4F,IAEAiyC,EAAAx6B,EAAAuoD,MAAA,CAAA/tB,OAAA,CAAAlmB,QAAA,CAA2C,GAAA0sE,GAAA3vC,CAAA,EAAmBrxC,EAAAs0E,cAAA,EAC9D5wF,MAAAk9F,EAAAl3E,GAAA,CACAA,IAAA1J,EAAAof,GAAA,EACA,KACAm+C,EAAAU,KAAA,aACAV,EAAAU,KAAA,gBACAV,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,gBACAZ,EAAAY,IAAA,aACAx4C,GAxBA63C,EAAAj1E,EAyBA,EAkBA,SAAAo9B,EAAAp9B,CAAA,SAKA,KAAAA,EACAg1E,EAAAuR,OAAA,CAAAmS,GAAAC,EAAA1mD,EAAA0mD,EAAAH,GAAAx4F,GAIAA,KAAAA,EACAg1E,EAAAuR,OAAA,CAAAqS,GAAAD,EAAA1mD,EAAA4mD,EAAAL,GAAAx4F,GAIAiyC,EAAA0mD,EAAA34F,GAAAw4F,EAAAx4F,EACA,CAgBA,SAAA64F,EAAA74F,CAAA,EACA,OAAAg1E,EAAAuR,OAAA,CAAAuS,GAAAH,EAAAH,GAAAx4F,EACA,CAkBA,SAAA24F,EAAA34F,CAAA,EAEA,OAAAw0E,EAAAx0E,EACA,CAkBA,SAAAw4F,EAAAx4F,CAAA,EAEA,OADAq4F,EAAAC,SAAA,IACArjB,EAAAj1E,EACA,CACA,EA9QAw2F,UAiCA,SAAA3e,CAAA,CAAAx+E,CAAA,EACA,IAGAguB,EAEArT,EAEAC,EAEA8yB,EATA9lB,EAAA42D,EAAA58E,MAAA,CACAqV,EAAA,EAWA,KAAA2Q,KAEA,GADAoG,EAAAwwD,CAAA,CAAA52D,EAAA,IACAjN,EAAA,CAEA,GAAAqT,SAAAA,EAAAptB,IAAA,EAAAotB,cAAAA,EAAAptB,IAAA,EAAAotB,EAAAkxE,SAAA,CACA,KAKA,WAAA1gB,CAAA,CAAA52D,EAAA,KAAAoG,cAAAA,EAAAptB,IAAA,EACAotB,CAAAA,EAAAkxE,SAAA,IAEA,MAAM,GAAAtkF,EACN,IAAA4jE,UAAAA,CAAA,CAAA52D,EAAA,KAAAoG,CAAAA,eAAAA,EAAAptB,IAAA,EAAAotB,cAAAA,EAAAptB,IAAA,IAAAotB,EAAAixE,SAAA,GACAtkF,EAAAiN,EACAoG,cAAAA,EAAAptB,IAAA,GACAqW,EAAA,EACA,KACA,CACA,KACM,aAAA+W,EAAAptB,IAAA,EACNga,CAAAA,EAAAgN,CAAA,EAGA,IAAApN,EAAA,CACA5Z,KAAA49E,cAAAA,CAAA,CAAA7jE,EAAA,IAAA/Z,IAAA,gBACAkB,MAAAgF,OAAA0zC,MAAA,IAA2BgkC,CAAA,CAAA7jE,EAAA,IAAA7Y,KAAA,EAC3BgmB,IAAAhhB,OAAA0zC,MAAA,IAAyBgkC,CAAA,CAAAA,EAAA58E,MAAA,OAAAkmB,GAAA,CACzB,EACAwlB,EAAA,CACA1sC,KAAA,QACAkB,MAAAgF,OAAA0zC,MAAA,IAA2BgkC,CAAA,CAAA7jE,EAAA,IAAA7Y,KAAA,EAC3BgmB,IAAAhhB,OAAA0zC,MAAA,IAAyBgkC,CAAA,CAAA5jE,EAAA,IAAAkN,GAAA,CACzB,EACAoV,EAAA,CACAt8B,KAAA,YACAkB,MAAAgF,OAAA0zC,MAAA,IAA2BgkC,CAAA,CAAA7jE,EAAA1D,EAAA,MAAA6Q,GAAA,EAC3BA,IAAAhhB,OAAA0zC,MAAA,IAAyBgkC,CAAA,CAAA5jE,EAAA,MAAA9Y,KAAA,CACzB,EAuBA,OAtBA4rC,EAAA,UAAAlzB,EAAAxa,EAAA,UAAAstC,EAAAttC,EAAA,EAGA0tC,EAAU,GAAAkqD,GAAA8H,CAAA,EAAIhyD,EAAA8wC,EAAAr8E,KAAA,CAAAwY,EAAA,EAAAA,EAAA1D,EAAA,IAGdy2B,EAAU,GAAAkqD,GAAA8H,CAAA,EAAIhyD,EAAA,UAAAxQ,EAAAl9B,EAAA,GAKd0tC,EAAU,GAAAkqD,GAAA8H,CAAA,EAAIhyD,EAAQ,GAAAiyD,GAAAC,CAAA,EAAU5/F,EAAA2mE,MAAA,CAAAwX,UAAA,CAAA0hB,UAAA,CAAA1iC,IAAA,CAAAqhB,EAAAr8E,KAAA,CAAAwY,EAAA1D,EAAA,EAAA2D,EAAA,GAAA5a,IAGhC0tC,EAAU,GAAAkqD,GAAA8H,CAAA,EAAIhyD,EAAA,SAAAxQ,EAAAl9B,EAAA,CAAAw+E,CAAA,CAAA5jE,EAAA,GAAA4jE,CAAA,CAAA5jE,EAAA,WAAA0yB,EAAAttC,EAAA,GAGd0tC,EAAU,GAAAkqD,GAAA8H,CAAA,EAAIhyD,EAAA8wC,EAAAr8E,KAAA,CAAAyY,EAAA,IAGd8yB,EAAU,GAAAkqD,GAAA8H,CAAA,EAAIhyD,EAAA,SAAAlzB,EAAAxa,EAAA,GACZ,GAAA43F,GAAAnoC,CAAA,EAAM+uB,EAAA7jE,EAAA6jE,EAAA58E,MAAA,CAAA8rC,GACR8wC,CACA,EA5GAD,WAiBA,SAAAC,CAAA,EACA,IAAA52D,EAAA,GACA,OAAAA,EAAA42D,EAAA58E,MAAA,GACA,IAAAosB,EAAAwwD,CAAA,CAAA52D,EAAA,IACAoG,CAAAA,eAAAA,EAAAptB,IAAA,EAAAotB,cAAAA,EAAAptB,IAAA,EAAAotB,aAAAA,EAAAptB,IAAA,IAEA49E,EAAA97B,MAAA,CAAA96B,EAAA,EAAAoG,eAAAA,EAAAptB,IAAA,MACAotB,EAAAptB,IAAA,QACAgnB,IAEA,CACA,OAAA42D,CACA,CA5BA,EAGA6gB,GAAA,CACA78D,SA8QA,SAAAm5C,CAAA,CAAAR,CAAA,CAAAS,CAAA,EACA,OAYA,SAAAj1E,CAAA,EAKA,OAJAg1E,EAAAU,KAAA,aACAV,EAAAU,KAAA,mBACAV,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,mBACAujB,CACA,EAYA,SAAAA,EAAAn5F,CAAA,EACA,MAAW,GAAAmiF,GAAArL,EAAA,EAAyB92E,GAAS81F,GAAiB9gB,EAAAokB,GAAAp5F,GAAAo5F,EAAAp5F,EAC9D,CAYA,SAAAo5F,EAAAp5F,CAAA,SACA,KAAAA,EACAq5F,EAAAr5F,GAEW+0F,GAAkB/f,EAAAskB,EAAAC,EAAA,+IAAAv5F,EAC7B,CAYA,SAAAs5F,EAAAt5F,CAAA,EACA,MAAW,GAAAmiF,GAAArL,EAAA,EAAyB92E,GAAS81F,GAAiB9gB,EAAAwkB,GAAAx5F,GAAAq5F,EAAAr5F,EAC9D,CAYA,SAAAu5F,EAAAv5F,CAAA,EACA,OAAAi1E,EAAAj1E,EACA,CAYA,SAAAw5F,EAAAx5F,CAAA,SACA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,EACa61F,GAAY7gB,EAAAykB,EAAAxkB,EAAA,6DAAAj1E,GAEzBq5F,EAAAr5F,EACA,CAYA,SAAAy5F,EAAAz5F,CAAA,EACA,MAAW,GAAAmiF,GAAArL,EAAA,EAAyB92E,GAAS81F,GAAiB9gB,EAAAqkB,GAAAr5F,GAAAq5F,EAAAr5F,EAC9D,CAYA,SAAAq5F,EAAAr5F,CAAA,SACA,KAAAA,GACAg1E,EAAAU,KAAA,mBACAV,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,mBACAZ,EAAAY,IAAA,aACApB,GAEAS,EAAAj1E,EACA,CACA,CAhZA,EAEA44F,GAAA,CACA/8D,SAmZA,SAAAm5C,CAAA,CAAAR,CAAA,CAAAS,CAAA,EACA,IAAAx9D,EAAA,KACA,OAYA,SAAAzX,CAAA,EACA,OAAW01F,GAAYn/E,IAAA,CAAAkB,EAAAu9D,EAAA0kB,EAAAC,EAAA,iDAAA35F,EACvB,EAYA,SAAA05F,EAAA15F,CAAA,EACA,OAAAyX,EAAAuoD,MAAA,CAAA/tB,OAAA,CAAAlmB,QAAA,CAAwC,GAAA0sE,GAAA3vC,CAAA,EAAmBrxC,EAAAs0E,cAAA,CAAAt0E,EAAAogE,MAAA,CAAApgE,EAAAogE,MAAA,CAAA58E,MAAA,QAAAO,KAAA,SAAAg5E,EAAAx0E,GAAAi1E,EAAAj1E,EAC3D,CAYA,SAAA25F,EAAA35F,CAAA,EACA,OAAAi1E,EAAAj1E,EACA,CACA,CA/bA,EAEA84F,GAAA,CACAj9D,SAkcA,SAAAm5C,CAAA,CAAAR,CAAA,CAAAS,CAAA,EACA,OAcA,SAAAj1E,CAAA,EAOA,OAJAg1E,EAAAU,KAAA,cACAV,EAAAU,KAAA,oBACAV,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,oBACAgkB,CACA,EAcA,SAAAA,EAAA55F,CAAA,SACA,KAAAA,GACAg1E,EAAAU,KAAA,oBACAV,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,oBACAZ,EAAAY,IAAA,cACApB,GAEAS,EAAAj1E,EACA,CACA,CAhfA,EC3BO65F,GAAA,CACP3/F,KAAA,kBACA2hC,SAQA,SAAAm5C,CAAA,CAAAR,CAAA,CAAAS,CAAA,EACA,IAAAx9D,EAAA,KACA,OAYA,SAAAzX,CAAA,EAKA,OAJAg1E,EAAAU,KAAA,eACAV,EAAAU,KAAA,qBACAV,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,qBACA5hE,CACA,EAYA,SAAAA,EAAAhU,CAAA,SACA,KAAAA,GACAg1E,EAAAU,KAAA,gBACAV,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,gBACAZ,EAAAY,IAAA,eACAx4C,GAEA63C,EAAAj1E,EACA,CA6BA,SAAAo9B,EAAAp9B,CAAA,EAMA,OAAAA,KAAAA,GAAA,2BAAAyX,EAAAuoD,MAAA,CAAAwX,UAAA,CAAAvC,EAAAj1E,GAAAw0E,EAAAx0E,EACA,CACA,EArFA43E,WAAcwgB,GAAQxgB,UAAA,kBCGf,IAAAkiB,GAAA,CACP5/F,KAAA,YACA2hC,SA+HA,SAAAm5C,CAAA,CAAAR,CAAA,MAMA9a,EALA,IAAAqgC,EAAA,KAAA/5B,MAAA,CAAAwX,UAAA,CAAAuiB,gBAAA,CAAAvjC,IAAA,CACA9zC,EAAA,KAAAA,QAAA,CACAoX,EAAiB,GAAAkgE,GAAA3lF,CAAA,EAAiBqO,GAIlC,OAYA,SAAA1iB,CAAA,EAGA,OAFA05D,EAAA15D,EACAg1E,EAAAU,KAAA,sBACA77C,SAaAA,EAAA75B,CAAA,EACA,GAAAA,IAAA05D,EAEA,OADAsb,EAAAW,OAAA,CAAA31E,GACA65B,EAEA,IAAAxS,EAAA2tD,EAAAY,IAAA,sBAGAx4C,EAAkB,GAAA48D,GAAA3lF,CAAA,EAAiBrU,GAInCgU,EAAA,CAAAopB,GAAAA,IAAAA,GAAAtD,GAAAigE,EAAAhuE,QAAA,CAAA/rB,GACAiU,EAAA,CAAA6lB,GAAAA,IAAAA,GAAAsD,GAAA28D,EAAAhuE,QAAA,CAAArJ,GAGA,OAFA2E,EAAA4yE,KAAA,CAAAjlC,CAAAA,CAAA0E,CAAAA,KAAAA,EAAA1lD,EAAAA,GAAA8lB,CAAAA,GAAA,CAAA7lB,CAAA,GACAoT,EAAA6yE,MAAA,CAAAllC,CAAAA,CAAA0E,CAAAA,KAAAA,EAAAzlD,EAAAA,GAAAmpB,CAAAA,GAAA,CAAAppB,CAAA,GACAwgE,EAAAx0E,EACA,EA9BAA,EACA,CA8BA,EAnLA43E,WASA,SAAAC,CAAA,CAAAx+E,CAAA,EACA,IAEA2a,EAEAH,EAEA0iB,EAEA4jE,EAEAC,EAEAC,EAEAC,EAEAhqF,EAhBA2Q,EAAA,GAsBA,OAAAA,EAAA42D,EAAA58E,MAAA,EAEA,GAAA48E,UAAAA,CAAA,CAAA52D,EAAA,KAAA42D,sBAAAA,CAAA,CAAA52D,EAAA,IAAAhnB,IAAA,EAAA49E,CAAA,CAAA52D,EAAA,IAAAi5E,MAAA,CAIA,KAHAlmF,EAAAiN,EAGAjN,KAEA,GAAA6jE,SAAAA,CAAA,CAAA7jE,EAAA,KAAA6jE,sBAAAA,CAAA,CAAA7jE,EAAA,IAAA/Z,IAAA,EAAA49E,CAAA,CAAA7jE,EAAA,IAAAimF,KAAA,EAEA5gG,EAAA0yF,cAAA,CAAAlU,CAAA,CAAA7jE,EAAA,KAAA3Y,UAAA,MAAAhC,EAAA0yF,cAAA,CAAAlU,CAAA,CAAA52D,EAAA,KAAA5lB,UAAA,KAKA,IAAAw8E,CAAA,CAAA7jE,EAAA,IAAAkmF,MAAA,EAAAriB,CAAA,CAAA52D,EAAA,IAAAg5E,KAAA,IAAApiB,CAAA,CAAA52D,EAAA,IAAAE,GAAA,CAAA7Q,MAAA,CAAAunE,CAAA,CAAA52D,EAAA,IAAA9lB,KAAA,CAAAmV,MAAA,QAAAunE,CAAA,CAAA7jE,EAAA,IAAAmN,GAAA,CAAA7Q,MAAA,CAAAunE,CAAA,CAAA7jE,EAAA,IAAA7Y,KAAA,CAAAmV,MAAA,CAAAunE,CAAA,CAAA52D,EAAA,IAAAE,GAAA,CAAA7Q,MAAA,CAAAunE,CAAA,CAAA52D,EAAA,IAAA9lB,KAAA,CAAAmV,MAAA,KACA,SAIA+pF,EAAAxiB,CAAA,CAAA7jE,EAAA,IAAAmN,GAAA,CAAA7Q,MAAA,CAAAunE,CAAA,CAAA7jE,EAAA,IAAA7Y,KAAA,CAAAmV,MAAA,IAAAunE,CAAA,CAAA52D,EAAA,IAAAE,GAAA,CAAA7Q,MAAA,CAAAunE,CAAA,CAAA52D,EAAA,IAAA9lB,KAAA,CAAAmV,MAAA,OACA,IAAAnV,EAAAgF,OAAA0zC,MAAA,IAAwCgkC,CAAA,CAAA7jE,EAAA,IAAAmN,GAAA,EACxCA,EAAAhhB,OAAA0zC,MAAA,IAAsCgkC,CAAA,CAAA52D,EAAA,IAAA9lB,KAAA,EACtCo/F,GAAAp/F,EAAA,CAAAk/F,GACAE,GAAAp5E,EAAAk5E,GACAF,EAAA,CACAlgG,KAAAogG,EAAA,sCACAl/F,MAAAA,EACAgmB,IAAAhhB,OAAA0zC,MAAA,IAAiCgkC,CAAA,CAAA7jE,EAAA,IAAAmN,GAAA,CACjC,EACAi5E,EAAA,CACAngG,KAAAogG,EAAA,sCACAl/F,MAAAgF,OAAA0zC,MAAA,IAAmCgkC,CAAA,CAAA52D,EAAA,IAAA9lB,KAAA,EACnCgmB,IAAAA,CACA,EACAoV,EAAA,CACAt8B,KAAAogG,EAAA,8BACAl/F,MAAAgF,OAAA0zC,MAAA,IAAmCgkC,CAAA,CAAA7jE,EAAA,IAAAmN,GAAA,EACnCA,IAAAhhB,OAAA0zC,MAAA,IAAiCgkC,CAAA,CAAA52D,EAAA,IAAA9lB,KAAA,CACjC,EACA0Y,EAAA,CACA5Z,KAAAogG,EAAA,sBACAl/F,MAAAgF,OAAA0zC,MAAA,IAAmCsmD,EAAAh/F,KAAA,EACnCgmB,IAAAhhB,OAAA0zC,MAAA,IAAiCumD,EAAAj5E,GAAA,CACjC,EACA02D,CAAA,CAAA7jE,EAAA,IAAAmN,GAAA,CAAAhhB,OAAA0zC,MAAA,IAAgDsmD,EAAAh/F,KAAA,EAChD08E,CAAA,CAAA52D,EAAA,IAAA9lB,KAAA,CAAAgF,OAAA0zC,MAAA,IAAmDumD,EAAAj5E,GAAA,EACnDm5E,EAAA,GAGAziB,CAAA,CAAA7jE,EAAA,IAAAmN,GAAA,CAAA7Q,MAAA,CAAAunE,CAAA,CAAA7jE,EAAA,IAAA7Y,KAAA,CAAAmV,MAAA,EACAgqF,CAAAA,EAAyB,GAAArJ,GAAA8H,CAAA,EAAIuB,EAAA,UAAAziB,CAAA,CAAA7jE,EAAA,IAAA3a,EAAA,SAAAw+E,CAAA,CAAA7jE,EAAA,IAAA3a,EAAA,IAI7BihG,EAAuB,GAAArJ,GAAA8H,CAAA,EAAIuB,EAAA,UAAAzmF,EAAAxa,EAAA,UAAA8gG,EAAA9gG,EAAA,SAAA8gG,EAAA9gG,EAAA,UAAAk9B,EAAAl9B,EAAA,GAK3BihG,EAAuB,GAAArJ,GAAA8H,CAAA,EAAIuB,EAAa,GAAAtB,GAAAC,CAAA,EAAU5/F,EAAA2mE,MAAA,CAAAwX,UAAA,CAAA0hB,UAAA,CAAA1iC,IAAA,CAAAqhB,EAAAr8E,KAAA,CAAAwY,EAAA,EAAAiN,GAAA5nB,IAGlDihG,EAAuB,GAAArJ,GAAA8H,CAAA,EAAIuB,EAAA,SAAA/jE,EAAAl9B,EAAA,UAAA+gG,EAAA/gG,EAAA,SAAA+gG,EAAA/gG,EAAA,SAAAwa,EAAAxa,EAAA,GAG3Bw+E,CAAA,CAAA52D,EAAA,IAAAE,GAAA,CAAA7Q,MAAA,CAAAunE,CAAA,CAAA52D,EAAA,IAAA9lB,KAAA,CAAAmV,MAAA,EACAA,EAAA,EACAgqF,EAAyB,GAAArJ,GAAA8H,CAAA,EAAIuB,EAAA,UAAAziB,CAAA,CAAA52D,EAAA,IAAA5nB,EAAA,SAAAw+E,CAAA,CAAA52D,EAAA,IAAA5nB,EAAA,IAE7BiX,EAAA,EAEU,GAAA2gF,GAAAnoC,CAAA,EAAM+uB,EAAA7jE,EAAA,EAAAiN,EAAAjN,EAAA,EAAAsmF,GAChBr5E,EAAAjN,EAAAsmF,EAAAr/F,MAAA,CAAAqV,EAAA,EACA,KACA,CACA,CAMA,IADA2Q,EAAA,GACA,EAAAA,EAAA42D,EAAA58E,MAAA,EACA,sBAAA48E,CAAA,CAAA52D,EAAA,IAAAhnB,IAAA,EACA49E,CAAAA,CAAA,CAAA52D,EAAA,IAAAhnB,IAAA,SAGA,OAAA49E,CACA,CAvHA,EA8LA,SAAA0iB,GAAAhiB,CAAA,CAAAjoE,CAAA,EACAioE,EAAAlzD,MAAA,EAAA/U,EACAioE,EAAAjoE,MAAA,EAAAA,EACAioE,EAAAwb,YAAA,EAAAzjF,CACA,CG5MO,IAAAkqF,GAAA,CACPtgG,KAAA,iBACA2hC,SAQA,SAAAm5C,CAAA,CAAAR,CAAA,CAAAS,CAAA,EACA,IAAAx9D,EAAA,KACA,OAYA,SAAAzX,CAAA,EAMA,OALAg1E,EAAAU,KAAA,cACAV,EAAAU,KAAA,gBACAV,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,gBACAZ,EAAAY,IAAA,cACAx4C,CACA,EAGA,SAAAA,EAAAp9B,CAAA,EAKA,OAAAA,KAAAA,GAAA,2BAAAyX,EAAAuoD,MAAA,CAAAwX,UAAA,CAAAvC,EAAAj1E,GAAAw0E,EAAAx0E,EACA,CACA,EAtCA43E,WAAcwgB,GAAQxgB,UAAA,EGgBT6iB,GAAQ,CACrB,GAAQl9D,GACR,GAAQA,GACR,GAAQA,GACR,GAAQA,GACR,GAAQA,GACR,GAAQA,GACR,GAAQA,GACR,GAAQA,GACR,GAAQA,GACR,GAAQA,GACR,GAAQA,GACR,GAAQA,GACR,GAAQA,GACR,GAAQs3D,EACR,EAGO1D,GAAA,CACP,GlBjCO,CACPj3F,KAAA,aACA2hC,SAaA,SAAAm5C,CAAA,CAAAR,CAAA,CAAAS,CAAA,MAGAz1B,EAFA,IAAA/nC,EAAA,KAGA,OAYA,SAAAzX,CAAA,EAKA,OADAg1E,EAAAU,KAAA,eAiBWggB,GAAYn/E,IAAA,CAAAkB,EAAAu9D,EAAA0lB,EAEvBzlB,EAAA,mEAlBAj1E,EACA,EA8BA,SAAA06F,EAAA16F,CAAA,QAEA,CADAw/C,EAAiB,GAAAi5C,GAAA3vC,CAAA,EAAmBrxC,EAAAs0E,cAAA,CAAAt0E,EAAAogE,MAAA,CAAApgE,EAAAogE,MAAA,CAAA58E,MAAA,QAAAO,KAAA,QACpCwE,KAAAA,IACAg1E,EAAAU,KAAA,qBACAV,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,qBACA+kB,GAEA1lB,EAAAj1E,EACA,CAYA,SAAA26F,EAAA36F,CAAA,EAEA,MAAW,GAAAmiF,GAAArL,EAAA,EAAyB92E,GAAS81F,GAAiB9gB,EAAA4lB,GAAA56F,GAAA46F,EAAA56F,EAC9D,CAYA,SAAA46F,EAAA56F,CAAA,EACA,OAAW+0F,GAAkB/f,EAAA6lB,EAE7B5lB,EAAA,sJAAAj1E,EACA,CAYA,SAAA66F,EAAA76F,CAAA,EACA,OAAAg1E,EAAAuR,OAAA,CAAAwP,GAAA34D,EAAAA,GAAAp9B,EACA,CAcA,SAAAo9B,EAAAp9B,CAAA,EACA,MAAW,GAAAmiF,GAAAhN,EAAA,EAAan1E,GAAS,GAAAkoF,GAAA/qE,CAAA,EAAY63D,EAAA8lB,EAAA,cAAA96F,GAAA86F,EAAA96F,EAC7C,CAcA,SAAA86F,EAAA96F,CAAA,SACA,OAAAA,GAAyB,GAAAmiF,GAAA9M,EAAA,EAAkBr1E,IAC3Cg1E,EAAAY,IAAA,eAKAn+D,EAAAuoD,MAAA,CAAA/tB,OAAA,CAAA34C,IAAA,CAAAkmD,GAKAg1B,EAAAx0E,IAEAi1E,EAAAj1E,EACA,CACA,CApKA,CkB+BA,EAGOmzF,GAAA,CACP,KAAQgD,GACR,KAAQA,GACR,GAAQA,EACR,EAGa4E,GAAI,CACjB,GhB/CO,CACP7gG,KAAA,aACA2hC,SA8CA,SAAAm5C,CAAA,CAAAR,CAAA,CAAAS,CAAA,EACA,IAAAtnC,EAAA,EACA,OAYA,SAAA3tC,CAAA,EAGA,OADAg1E,EAAAU,KAAA,eAeAV,EAAAU,KAAA,uBACA4hB,SAaAA,EAAAt3F,CAAA,SACA,KAAAA,GAAA2tC,IAAA,GACAqnC,EAAAW,OAAA,CAAA31E,GACAs3F,GAIAt3F,OAAAA,GAAyB,GAAAmiF,GAAArL,EAAA,EAAyB92E,IAClDg1E,EAAAY,IAAA,uBACAgX,SAeAA,EAAA5sF,CAAA,SACA,KAAAA,GACAg1E,EAAAU,KAAA,uBACAslB,SA+BAA,EAAAh7F,CAAA,SACA,KAAAA,GACAg1E,EAAAW,OAAA,CAAA31E,GACAg7F,IAEAhmB,EAAAY,IAAA,uBACAgX,EAAA5sF,GACA,EAtCAA,IAEAA,OAAAA,GAAyB,GAAAmiF,GAAA9M,EAAA,EAAkBr1E,IAC3Cg1E,EAAAY,IAAA,eAIApB,EAAAx0E,IAEQ,GAAAmiF,GAAAhN,EAAA,EAAan1E,GACR,GAAAkoF,GAAA/qE,CAAA,EAAY63D,EAAA4X,EAAA,cAAA5sF,IAKzBg1E,EAAAU,KAAA,mBACArsD,SAkCAA,EAAArpB,CAAA,SACA,OAAAA,GAAAA,KAAAA,GAAwC,GAAAmiF,GAAArL,EAAA,EAAyB92E,IACjEg1E,EAAAY,IAAA,mBACAgX,EAAA5sF,KAEAg1E,EAAAW,OAAA,CAAA31E,GACAqpB,EACA,EAzCArpB,GACA,EAnCAA,IAEAi1E,EAAAj1E,EACA,EAxCAA,EACA,CAgHA,EA/KA6yB,QAIA,SAAAglD,CAAA,CAAAx+E,CAAA,EACA,IAGA+qB,EAEAmS,EALAw8D,EAAAlb,EAAA58E,MAAA,GACAi2F,EAAA,EAgCA,MAzBA,eAAArZ,CAAA,CAPA,EAOA,IAAA59E,IAAA,EACAi3F,CAAAA,GAAA,GAIA6B,EAAA,EAAA7B,GAAArZ,eAAAA,CAAA,CAAAkb,EAAA,IAAA94F,IAAA,EACA84F,CAAAA,GAAA,GAEA,uBAAAlb,CAAA,CAAAkb,EAAA,IAAA94F,IAAA,EAAAi3F,CAAAA,IAAA6B,EAAA,GAAAA,EAAA,EAAA7B,GAAArZ,eAAAA,CAAA,CAAAkb,EAAA,MAAA94F,IAAA,GACA84F,CAAAA,GAAA7B,EAAA,IAAA6B,EAAA,KAEAA,EAAA7B,IACA9sE,EAAA,CACAnqB,KAAA,iBACAkB,MAAA08E,CAAA,CAAAqZ,EAAA,IAAA/1F,KAAA,CACAgmB,IAAA02D,CAAA,CAAAkb,EAAA,IAAA5xE,GAAA,EAEAoV,EAAA,CACAt8B,KAAA,YACAkB,MAAA08E,CAAA,CAAAqZ,EAAA,IAAA/1F,KAAA,CACAgmB,IAAA02D,CAAA,CAAAkb,EAAA,IAAA5xE,GAAA,CACA4vC,YAAA,MACA,EACI,GAAAkgC,GAAAnoC,CAAA,EAAM+uB,EAAAqZ,EAAA6B,EAAA7B,EAAA,YAAA9sE,EAAA/qB,EAAA,UAAAk9B,EAAAl9B,EAAA,SAAAk9B,EAAAl9B,EAAA,SAAA+qB,EAAA/qB,EAAA,IAEVw+E,CACA,CAtCA,EgB4CA,GAAQmc,GACR,IAASsC,GAAiBtC,GAAa,CACvC,GbjDO,CACP95F,KAAA,WACA2hC,SAsCA,SAAAm5C,CAAA,CAAAR,CAAA,CAAAS,CAAA,MAGAvb,EAEAuhC,EAEAnyE,EAEA7H,EAEAi6E,EAVA,IAAAzjF,EAAA,KAWA,OAYA,SAAAzX,CAAA,EAEA,OAcAg1E,EAAAU,KAAA,aACAV,EAAAU,KAAA,iBACAV,EAAAW,OAAA,CAhBA31E,GAiBAgU,CAhBA,EAiCA,SAAAA,EAAAhU,CAAA,SACA,KAAAA,GACAg1E,EAAAW,OAAA,CAAA31E,GACAm7F,GAEAn7F,KAAAA,GACAg1E,EAAAW,OAAA,CAAA31E,GACAi7F,EAAA,GACAG,GAEAp7F,KAAAA,GACAg1E,EAAAW,OAAA,CAAA31E,GACA05D,EAAA,EAMAjiD,EAAAgwE,SAAA,CAAAjT,EAAA6mB,GAIQ,GAAAlZ,GAAAuF,EAAA,EAAU1nF,IAClBg1E,EAAAW,OAAA,CAAA31E,GAEA8oB,EAAAltB,OAAAC,YAAA,CAAAmE,GACA+iB,GAEAkyD,EAAAj1E,EACA,CAgBA,SAAAm7F,EAAAn7F,CAAA,SACA,KAAAA,GACAg1E,EAAAW,OAAA,CAAA31E,GACA05D,EAAA,EACA4hC,GAEAt7F,KAAAA,GACAg1E,EAAAW,OAAA,CAAA31E,GACA05D,EAAA,EACAz4C,EAAA,EACAs6E,GAIQ,GAAApZ,GAAAuF,EAAA,EAAU1nF,IAClBg1E,EAAAW,OAAA,CAAA31E,GACA05D,EAAA,EAGAjiD,EAAAgwE,SAAA,CAAAjT,EAAA6mB,GAEApmB,EAAAj1E,EACA,CAYA,SAAAs7F,EAAAt7F,CAAA,SACA,KAAAA,GACAg1E,EAAAW,OAAA,CAAA31E,GAGAyX,EAAAgwE,SAAA,CAAAjT,EAAA6mB,GAEApmB,EAAAj1E,EACA,CAYA,SAAAu7F,EAAAv7F,CAAA,EACA,IAAAjD,EAAA,gBACA,IAAAA,EAAA1B,UAAA,CAAA4lB,KAEA,CADA+zD,EAAAW,OAAA,CAAA31E,GACAihB,IAAAlkB,EAAA9B,MAAA,EAGAwc,EAAAgwE,SAAA,CAAAjT,EAAA1nB,EAEAyuC,EAEAtmB,EAAAj1E,EACA,CAYA,SAAAo7F,EAAAp7F,CAAA,QACA,CAAQ,EAAAmiF,GAAAuF,EAAA,EAAU1nF,IAClBg1E,EAAAW,OAAA,CAAA31E,GAEA8oB,EAAAltB,OAAAC,YAAA,CAAAmE,GACA+iB,GAEAkyD,EAAAj1E,EACA,CAcA,SAAA+iB,EAAA/iB,CAAA,EACA,GAAAA,OAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAuD,GAAAmiF,GAAArL,EAAA,EAAyB92E,GAAA,CAChF,IAAArG,EAAAqG,KAAAA,EACA9F,EAAA4uB,EAAAtT,WAAA,SACA,CAAA7b,GAAA,CAAAshG,GAAmCvE,GAAY3qE,QAAA,CAAA7xB,IAC/Cw/D,EAAA,EAGAjiD,EAAAgwE,SAAA,CAAAjT,EAAAx0E,GAAA8sD,EAAA9sD,IAEUy2F,GAAc1qE,QAAA,CAAAjD,EAAAtT,WAAA,IAExB,CADAkkD,EAAA,EACA//D,IACAq7E,EAAAW,OAAA,CAAA31E,GACAw7F,GAKA/jF,EAAAgwE,SAAA,CAAAjT,EAAAx0E,GAAA8sD,EAAA9sD,IAEA05D,EAAA,EAEAjiD,EAAAgwE,SAAA,GAAAhwE,EAAAuoD,MAAA,CAAA/sC,IAAA,CAAAxb,EAAAof,GAAA,GAAAnR,IAAA,EAAAuvD,EAAAj1E,GAAAi7F,EAAAQ,SA0CAA,EAAAz7F,CAAA,QACA,CAAQ,EAAAmiF,GAAAhN,EAAA,EAAan1E,IACrBg1E,EAAAW,OAAA,CAAA31E,GACAy7F,GAEAC,EAAA17F,EACA,EAhDAA,GAAA27F,EAAA37F,GACA,QAGA,KAAAA,GAAuB,GAAAmiF,GAAA4V,EAAA,EAAiB/3F,IACxCg1E,EAAAW,OAAA,CAAA31E,GACA8oB,GAAAltB,OAAAC,YAAA,CAAAmE,GACA+iB,GAEAkyD,EAAAj1E,EACA,CAYA,SAAAw7F,EAAAx7F,CAAA,SACA,KAAAA,GACAg1E,EAAAW,OAAA,CAAA31E,GAGAyX,EAAAgwE,SAAA,CAAAjT,EAAA1nB,GAEAmoB,EAAAj1E,EACA,CA2CA,SAAA27F,EAAA37F,CAAA,SACA,KAAAA,GACAg1E,EAAAW,OAAA,CAAA31E,GACA07F,GAIA17F,KAAAA,GAAAA,KAAAA,GAAsC,GAAAmiF,GAAAuF,EAAA,EAAU1nF,IAChDg1E,EAAAW,OAAA,CAAA31E,GACA47F,GAEQ,GAAAzZ,GAAAhN,EAAA,EAAan1E,IACrBg1E,EAAAW,OAAA,CAAA31E,GACA27F,GAEAD,EAAA17F,EACA,CAgBA,SAAA47F,EAAA57F,CAAA,SAEA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAoE,GAAAmiF,GAAA4V,EAAA,EAAiB/3F,IACrFg1E,EAAAW,OAAA,CAAA31E,GACA47F,GAEAC,EAAA77F,EACA,CAeA,SAAA67F,EAAA77F,CAAA,SACA,KAAAA,GACAg1E,EAAAW,OAAA,CAAA31E,GACA87F,GAEQ,GAAA3Z,GAAAhN,EAAA,EAAan1E,IACrBg1E,EAAAW,OAAA,CAAA31E,GACA67F,GAEAF,EAAA37F,EACA,CAeA,SAAA87F,EAAA97F,CAAA,SACA,OAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,EACAi1E,EAAAj1E,GAEAA,KAAAA,GAAAA,KAAAA,GACAg1E,EAAAW,OAAA,CAAA31E,GACAk7F,EAAAl7F,EACA+7F,GAEQ,GAAA5Z,GAAAhN,EAAA,EAAan1E,IACrBg1E,EAAAW,OAAA,CAAA31E,GACA87F,GAEAE,SAsCAA,EAAAh8F,CAAA,SACA,OAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAkI,GAAAmiF,GAAArL,EAAA,EAAyB92E,GAC3J67F,EAAA77F,IAEAg1E,EAAAW,OAAA,CAAA31E,GACAg8F,EACA,EA5CAh8F,EACA,CAcA,SAAA+7F,EAAA/7F,CAAA,SACA,IAAAk7F,GACAlmB,EAAAW,OAAA,CAAA31E,GACAk7F,EAAA,KACAe,GAEAj8F,OAAAA,GAAyB,GAAAmiF,GAAA9M,EAAA,EAAkBr1E,GAC3Ci1E,EAAAj1E,IAEAg1E,EAAAW,OAAA,CAAA31E,GACA+7F,EACA,CA+BA,SAAAE,EAAAj8F,CAAA,SACA,KAAAA,GAAAA,KAAAA,GAAsC,GAAAmiF,GAAAhN,EAAA,EAAan1E,GACnD27F,EAAA37F,GAEAi1E,EAAAj1E,EACA,CAYA,SAAA07F,EAAA17F,CAAA,SACA,KAAAA,GACAg1E,EAAAW,OAAA,CAAA31E,GACAk8F,GAEAjnB,EAAAj1E,EACA,CAYA,SAAAk8F,EAAAl8F,CAAA,SACA,OAAAA,GAAyB,GAAAmiF,GAAA9M,EAAA,EAAkBr1E,GAG3C8sD,EAAA9sD,GAEQ,GAAAmiF,GAAAhN,EAAA,EAAan1E,IACrBg1E,EAAAW,OAAA,CAAA31E,GACAk8F,GAEAjnB,EAAAj1E,EACA,CAYA,SAAA8sD,EAAA9sD,CAAA,SACA,KAAAA,GAAA05D,IAAAA,GACAsb,EAAAW,OAAA,CAAA31E,GACAm8F,GAEAn8F,KAAAA,GAAA05D,IAAAA,GACAsb,EAAAW,OAAA,CAAA31E,GACAo8F,GAEAp8F,KAAAA,GAAA05D,IAAAA,GACAsb,EAAAW,OAAA,CAAA31E,GACAq8F,GAEAr8F,KAAAA,GAAA05D,IAAAA,GACAsb,EAAAW,OAAA,CAAA31E,GACAq7F,GAEAr7F,KAAAA,GAAA05D,IAAAA,GACAsb,EAAAW,OAAA,CAAA31E,GACAs8F,GAEQ,GAAAna,GAAA9M,EAAA,EAAkBr1E,IAAA05D,CAAAA,IAAAA,GAAAA,IAAAA,CAAA,GAC1Bsb,EAAAY,IAAA,iBACAZ,EAAA3iC,KAAA,CAA2BskD,GAAe4F,EAAA3U,GAAA5nF,IAE1CA,OAAAA,GAAyB,GAAAmiF,GAAA9M,EAAA,EAAkBr1E,IAC3Cg1E,EAAAY,IAAA,iBACAgS,EAAA5nF,KAEAg1E,EAAAW,OAAA,CAAA31E,GACA8sD,EACA,CAaA,SAAA86B,EAAA5nF,CAAA,EACA,OAAAg1E,EAAA3iC,KAAA,CAAAukD,GAAA4F,EAAAD,GAAAv8F,EACA,CAaA,SAAAw8F,EAAAx8F,CAAA,EAIA,OAHAg1E,EAAAU,KAAA,eACAV,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,eACA6mB,CACA,CAaA,SAAAA,EAAAz8F,CAAA,SACA,OAAAA,GAAyB,GAAAmiF,GAAA9M,EAAA,EAAkBr1E,GAC3C4nF,EAAA5nF,IAEAg1E,EAAAU,KAAA,iBACA5oB,EAAA9sD,GACA,CAYA,SAAAm8F,EAAAn8F,CAAA,SACA,KAAAA,GACAg1E,EAAAW,OAAA,CAAA31E,GACAq7F,GAEAvuC,EAAA9sD,EACA,CAYA,SAAAo8F,EAAAp8F,CAAA,SACA,KAAAA,GACAg1E,EAAAW,OAAA,CAAA31E,GACA8oB,EAAA,GACA4zE,GAEA5vC,EAAA9sD,EACA,CAYA,SAAA08F,EAAA18F,CAAA,EACA,GAAAA,KAAAA,EAAA,CACA,IAAA9F,EAAA4uB,EAAAtT,WAAA,UACA,GAAsBuW,QAAA,CAAA7xB,IACtB86E,EAAAW,OAAA,CAAA31E,GACAq8F,GAEAvvC,EAAA9sD,EACA,OACA,CAAQ,EAAAmiF,GAAAuF,EAAA,EAAU1nF,IAAA8oB,EAAA7tB,MAAA,IAClB+5E,EAAAW,OAAA,CAAA31E,GAEA8oB,GAAAltB,OAAAC,YAAA,CAAAmE,GACA08F,GAEA5vC,EAAA9sD,EACA,CAYA,SAAAs8F,EAAAt8F,CAAA,SACA,KAAAA,GACAg1E,EAAAW,OAAA,CAAA31E,GACAq7F,GAEAvuC,EAAA9sD,EACA,CAoBA,SAAAq7F,EAAAr7F,CAAA,SACA,KAAAA,GACAg1E,EAAAW,OAAA,CAAA31E,GACAq8F,GAIAr8F,KAAAA,GAAA05D,IAAAA,GACAsb,EAAAW,OAAA,CAAA31E,GACAq7F,GAEAvuC,EAAA9sD,EACA,CAYA,SAAAq8F,EAAAr8F,CAAA,SACA,OAAAA,GAAyB,GAAAmiF,GAAA9M,EAAA,EAAkBr1E,IAC3Cg1E,EAAAY,IAAA,iBACA2mB,EAAAv8F,KAEAg1E,EAAAW,OAAA,CAAA31E,GACAq8F,EACA,CAYA,SAAAE,EAAAv8F,CAAA,EAMA,OALAg1E,EAAAY,IAAA,aAKApB,EAAAx0E,EACA,CACA,EA9wBAw2F,UAeA,SAAA3e,CAAA,EACA,IAAA52D,EAAA42D,EAAA58E,MAAA,CACA,KAAAgmB,KACA42D,CAAAA,UAAAA,CAAA,CAAA52D,EAAA,KAAA42D,aAAAA,CAAA,CAAA52D,EAAA,IAAAhnB,IAAA,IAYA,OARAgnB,EAAA,GAAA42D,eAAAA,CAAA,CAAA52D,EAAA,MAAAhnB,IAAA,GAEA49E,CAAA,CAAA52D,EAAA,IAAA9lB,KAAA,CAAA08E,CAAA,CAAA52D,EAAA,MAAA9lB,KAAA,CAEA08E,CAAA,CAAA52D,EAAA,MAAA9lB,KAAA,CAAA08E,CAAA,CAAA52D,EAAA,MAAA9lB,KAAA,CAEA08E,EAAA97B,MAAA,CAAA96B,EAAA,MAEA42D,CACA,EA9BAkQ,SAAA,EACA,Ea6CA,GAAQuO,GACR,GAAQtC,GACR,GAAQ8C,GACR,IAASA,EACT,EAGa6F,GAAM,CACnB,GAAQtf,GACR,GAAQ4a,EACR,EAGa2E,GAAI,CACjB,KAAQzE,GACR,KAAQA,GACR,KAAQA,GACR,GAAQ0B,GACR,GAAQxc,GACR,GAAQyc,GACR,IL3EO,CACP5/F,KAAA,WACA2hC,SAOA,SAAAm5C,CAAA,CAAAR,CAAA,CAAAS,CAAA,EACA,IAAAtnC,EAAA,EACA,OAcA,SAAA3tC,CAAA,EAMA,OALAg1E,EAAAU,KAAA,aACAV,EAAAU,KAAA,mBACAV,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,mBACAZ,EAAAU,KAAA,qBACA1hE,CACA,EAcA,SAAAA,EAAAhU,CAAA,QACA,CAAQ,EAAAmiF,GAAAuF,EAAA,EAAU1nF,IAClBg1E,EAAAW,OAAA,CAAA31E,GACA68F,GAEA78F,KAAAA,EACAi1E,EAAAj1E,GAEA88F,EAAA98F,EACA,CAcA,SAAA68F,EAAA78F,CAAA,SAEA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAqD,GAAAmiF,GAAA4V,EAAA,EAAiB/3F,IAEtE2tC,EAAA,EACAovD,SAiBAA,EAAA/8F,CAAA,SACA,KAAAA,GACAg1E,EAAAW,OAAA,CAAA31E,GACA2tC,EAAA,EACAqvD,GAIA,CAAAh9F,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAsD,GAAAmiF,GAAA4V,EAAA,EAAiB/3F,EAAA,GAAA2tC,IAAA,IACvEqnC,EAAAW,OAAA,CAAA31E,GACA+8F,IAEApvD,EAAA,EACAmvD,EAAA98F,GACA,EA/BAA,IAEA88F,EAAA98F,EACA,CAwCA,SAAAg9F,EAAAh9F,CAAA,SACA,KAAAA,GACAg1E,EAAAY,IAAA,qBACAZ,EAAAU,KAAA,mBACAV,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,mBACAZ,EAAAY,IAAA,aACApB,GAIAx0E,OAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAuD,GAAAmiF,GAAAmT,EAAA,EAAYt1F,GACnEi1E,EAAAj1E,IAEAg1E,EAAAW,OAAA,CAAA31E,GACAg9F,EACA,CAYA,SAAAF,EAAA98F,CAAA,SACA,KAAAA,GACAg1E,EAAAW,OAAA,CAAA31E,GACAi9F,GAEQ,GAAA9a,GAAA+a,EAAA,EAAUl9F,IAClBg1E,EAAAW,OAAA,CAAA31E,GACA88F,GAEA7nB,EAAAj1E,EACA,CAYA,SAAAi9F,EAAAj9F,CAAA,EACA,MAAW,GAAAmiF,GAAA4V,EAAA,EAAiB/3F,GAAAm9F,SAa5BA,EAAAn9F,CAAA,SACA,KAAAA,GACAg1E,EAAAW,OAAA,CAAA31E,GACA2tC,EAAA,EACAsvD,GAEAj9F,KAAAA,GAEAg1E,EAAAY,IAAA,qBAAA37E,IAAA,iBACA+6E,EAAAU,KAAA,mBACAV,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,mBACAZ,EAAAY,IAAA,aACApB,GAEA4oB,SAeAA,EAAAp9F,CAAA,EAEA,IAAAA,KAAAA,GAAwB,GAAAmiF,GAAA4V,EAAA,EAAiB/3F,EAAA,GAAA2tC,IAAA,IACzC,IAAAzwC,EAAA8C,KAAAA,EAAAo9F,EAAAD,EAEA,OADAnoB,EAAAW,OAAA,CAAA31E,GACA9C,CACA,CACA,OAAA+3E,EAAAj1E,EACA,EAvBAA,EACA,EA7B4BA,GAAAi1E,EAAAj1E,EAC5B,CAmDA,CAzNA,ECDO,CACP9F,KAAA,WACA2hC,SAOA,SAAAm5C,CAAA,CAAAR,CAAA,CAAAS,CAAA,MAGAvb,EAEAz4C,EAEAwjE,EANA,IAAAhtE,EAAA,KAOA,OAYA,SAAAzX,CAAA,EAIA,OAHAg1E,EAAAU,KAAA,aACAV,EAAAU,KAAA,iBACAV,EAAAW,OAAA,CAAA31E,GACAgU,CACA,EAgBA,SAAAA,EAAAhU,CAAA,SACA,KAAAA,GACAg1E,EAAAW,OAAA,CAAA31E,GACAm7F,GAEAn7F,KAAAA,GACAg1E,EAAAW,OAAA,CAAA31E,GACAo7F,GAEAp7F,KAAAA,GACAg1E,EAAAW,OAAA,CAAA31E,GACAqqD,GAIQ,GAAA83B,GAAAuF,EAAA,EAAU1nF,IAClBg1E,EAAAW,OAAA,CAAA31E,GACAq9F,GAEApoB,EAAAj1E,EACA,CAgBA,SAAAm7F,EAAAn7F,CAAA,SACA,KAAAA,GACAg1E,EAAAW,OAAA,CAAA31E,GACAs7F,GAEAt7F,KAAAA,GACAg1E,EAAAW,OAAA,CAAA31E,GACAihB,EAAA,EACAs6E,GAEQ,GAAApZ,GAAAuF,EAAA,EAAU1nF,IAClBg1E,EAAAW,OAAA,CAAA31E,GACA+mB,GAEAkuD,EAAAj1E,EACA,CAYA,SAAAs7F,EAAAt7F,CAAA,SACA,KAAAA,GACAg1E,EAAAW,OAAA,CAAA31E,GACAs9F,GAEAroB,EAAAj1E,EACA,CAYA,SAAAumB,EAAAvmB,CAAA,SACA,OAAAA,EACAi1E,EAAAj1E,GAEAA,KAAAA,GACAg1E,EAAAW,OAAA,CAAA31E,GACAu9F,GAEQ,GAAApb,GAAA9M,EAAA,EAAkBr1E,IAC1BykF,EAAAl+D,EACAi3E,EAAAx9F,KAEAg1E,EAAAW,OAAA,CAAA31E,GACAumB,EACA,CAYA,SAAAg3E,EAAAv9F,CAAA,SACA,KAAAA,GACAg1E,EAAAW,OAAA,CAAA31E,GACAs9F,GAEA/2E,EAAAvmB,EACA,CAYA,SAAAs9F,EAAAt9F,CAAA,EACA,OAAAA,KAAAA,EAAAmhB,EAAAnhB,GAAAA,KAAAA,EAAAu9F,EAAAv9F,GAAAumB,EAAAvmB,EACA,CAYA,SAAAu7F,EAAAv7F,CAAA,EACA,IAAAjD,EAAA,gBACA,IAAAA,EAAA1B,UAAA,CAAA4lB,MACA+zD,EAAAW,OAAA,CAAA31E,GACAihB,IAAAlkB,EAAA9B,MAAA,CAAAs9D,EAAAgjC,GAEAtmB,EAAAj1E,EACA,CAYA,SAAAu4D,EAAAv4D,CAAA,SACA,OAAAA,EACAi1E,EAAAj1E,GAEAA,KAAAA,GACAg1E,EAAAW,OAAA,CAAA31E,GACAy9F,GAEQ,GAAAtb,GAAA9M,EAAA,EAAkBr1E,IAC1BykF,EAAAlsB,EACAilC,EAAAx9F,KAEAg1E,EAAAW,OAAA,CAAA31E,GACAu4D,EACA,CAYA,SAAAklC,EAAAz9F,CAAA,SACA,KAAAA,GACAg1E,EAAAW,OAAA,CAAA31E,GACA09F,GAEAnlC,EAAAv4D,EACA,CAYA,SAAA09F,EAAA19F,CAAA,SACA,KAAAA,EACAmhB,EAAAnhB,GAEAA,KAAAA,GACAg1E,EAAAW,OAAA,CAAA31E,GACA09F,GAEAnlC,EAAAv4D,EACA,CAYA,SAAA+mB,EAAA/mB,CAAA,SACA,OAAAA,GAAAA,KAAAA,EACAmhB,EAAAnhB,GAEQ,GAAAmiF,GAAA9M,EAAA,EAAkBr1E,IAC1BykF,EAAA19D,EACAy2E,EAAAx9F,KAEAg1E,EAAAW,OAAA,CAAA31E,GACA+mB,EACA,CAYA,SAAAsjC,EAAArqD,CAAA,SACA,OAAAA,EACAi1E,EAAAj1E,GAEAA,KAAAA,GACAg1E,EAAAW,OAAA,CAAA31E,GACA29F,GAEQ,GAAAxb,GAAA9M,EAAA,EAAkBr1E,IAC1BykF,EAAAp6B,EACAmzC,EAAAx9F,KAEAg1E,EAAAW,OAAA,CAAA31E,GACAqqD,EACA,CAYA,SAAAszC,EAAA39F,CAAA,EACA,OAAAA,KAAAA,EAAAmhB,EAAAnhB,GAAAqqD,EAAArqD,EACA,CAYA,SAAAo7F,EAAAp7F,CAAA,QAEA,CAAQ,EAAAmiF,GAAAuF,EAAA,EAAU1nF,IAClBg1E,EAAAW,OAAA,CAAA31E,GACA49F,GAEA3oB,EAAAj1E,EACA,CAYA,SAAA49F,EAAA59F,CAAA,SAEA,KAAAA,GAAuB,GAAAmiF,GAAA4V,EAAA,EAAiB/3F,IACxCg1E,EAAAW,OAAA,CAAA31E,GACA49F,GAEAC,SAaAA,EAAA79F,CAAA,QACA,CAAQ,EAAAmiF,GAAA9M,EAAA,EAAkBr1E,IAC1BykF,EAAAoZ,EACAL,EAAAx9F,IAEQ,GAAAmiF,GAAAhN,EAAA,EAAan1E,IACrBg1E,EAAAW,OAAA,CAAA31E,GACA69F,GAEA18E,EAAAnhB,EACA,EAvBAA,EACA,CAkCA,SAAAq9F,EAAAr9F,CAAA,SAEA,KAAAA,GAAuB,GAAAmiF,GAAA4V,EAAA,EAAiB/3F,IACxCg1E,EAAAW,OAAA,CAAA31E,GACAq9F,GAEAr9F,KAAAA,GAAAA,KAAAA,GAAsC,GAAAmiF,GAAArL,EAAA,EAAyB92E,GAC/D89F,EAAA99F,GAEAi1E,EAAAj1E,EACA,CAYA,SAAA89F,EAAA99F,CAAA,SACA,KAAAA,GACAg1E,EAAAW,OAAA,CAAA31E,GACAmhB,GAIAnhB,KAAAA,GAAAA,KAAAA,GAAsC,GAAAmiF,GAAAuF,EAAA,EAAU1nF,IAChDg1E,EAAAW,OAAA,CAAA31E,GACA+9F,GAEQ,GAAA5b,GAAA9M,EAAA,EAAkBr1E,IAC1BykF,EAAAqZ,EACAN,EAAAx9F,IAEQ,GAAAmiF,GAAAhN,EAAA,EAAan1E,IACrBg1E,EAAAW,OAAA,CAAA31E,GACA89F,GAEA38E,EAAAnhB,EACA,CAYA,SAAA+9F,EAAA/9F,CAAA,SAEA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAoE,GAAAmiF,GAAA4V,EAAA,EAAiB/3F,IACrFg1E,EAAAW,OAAA,CAAA31E,GACA+9F,GAEAC,SAcAA,EAAAh+F,CAAA,SACA,KAAAA,GACAg1E,EAAAW,OAAA,CAAA31E,GACAi+F,GAEQ,GAAA9b,GAAA9M,EAAA,EAAkBr1E,IAC1BykF,EAAAuZ,EACAR,EAAAx9F,IAEQ,GAAAmiF,GAAAhN,EAAA,EAAan1E,IACrBg1E,EAAAW,OAAA,CAAA31E,GACAg+F,GAEAF,EAAA99F,EACA,EA5BAA,EACA,CAwCA,SAAAi+F,EAAAj+F,CAAA,SACA,OAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,EACAi1E,EAAAj1E,GAEAA,KAAAA,GAAAA,KAAAA,GACAg1E,EAAAW,OAAA,CAAA31E,GACA05D,EAAA15D,EACAk+F,GAEQ,GAAA/b,GAAA9M,EAAA,EAAkBr1E,IAC1BykF,EAAAwZ,EACAT,EAAAx9F,IAEQ,GAAAmiF,GAAAhN,EAAA,EAAan1E,IACrBg1E,EAAAW,OAAA,CAAA31E,GACAi+F,IAEAjpB,EAAAW,OAAA,CAAA31E,GACAm+F,EACA,CAYA,SAAAD,EAAAl+F,CAAA,SACA,IAAA05D,GACAsb,EAAAW,OAAA,CAAA31E,GACA05D,EAAAxjD,KAAAA,EACAkoF,GAEAp+F,OAAAA,EACAi1E,EAAAj1E,GAEQ,GAAAmiF,GAAA9M,EAAA,EAAkBr1E,IAC1BykF,EAAAyZ,EACAV,EAAAx9F,KAEAg1E,EAAAW,OAAA,CAAA31E,GACAk+F,EACA,CAYA,SAAAC,EAAAn+F,CAAA,SACA,OAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,EACAi1E,EAAAj1E,GAEAA,KAAAA,GAAAA,KAAAA,GAAsC,GAAAmiF,GAAArL,EAAA,EAAyB92E,GAC/D89F,EAAA99F,IAEAg1E,EAAAW,OAAA,CAAA31E,GACAm+F,EACA,CAaA,SAAAC,EAAAp+F,CAAA,SACA,KAAAA,GAAAA,KAAAA,GAAsC,GAAAmiF,GAAArL,EAAA,EAAyB92E,GAC/D89F,EAAA99F,GAEAi1E,EAAAj1E,EACA,CAYA,SAAAmhB,EAAAnhB,CAAA,SACA,KAAAA,GACAg1E,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,iBACAZ,EAAAY,IAAA,aACApB,GAEAS,EAAAj1E,EACA,CAgBA,SAAAw9F,EAAAx9F,CAAA,EAKA,OAJAg1E,EAAAY,IAAA,iBACAZ,EAAAU,KAAA,eACAV,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,eACAyoB,CACA,CAgBA,SAAAA,EAAAr+F,CAAA,EAGA,MAAW,GAAAmiF,GAAAhN,EAAA,EAAan1E,GAAS,GAAAkoF,GAAA/qE,CAAA,EAAY63D,EAAAspB,EAAA,aAAA7mF,EAAAuoD,MAAA,CAAAwX,UAAA,CAAA+Q,OAAA,CAAA/xB,IAAA,CAAAzqC,QAAA,iBAAA7V,KAAAA,EAAA,GAAAlW,GAAAs+F,EAAAt+F,EAC7C,CAgBA,SAAAs+F,EAAAt+F,CAAA,EAEA,OADAg1E,EAAAU,KAAA,iBACA+O,EAAAzkF,EACA,CACA,CAppBA,EIsE2B,CAC3B,GAAQw6F,GACR,IF7EO,CACPtgG,KAAA,kBACA2hC,SAOA,SAAAm5C,CAAA,CAAAR,CAAA,CAAAS,CAAA,EACA,OAaA,SAAAj1E,CAAA,EAGA,OAFAg1E,EAAAU,KAAA,oBACAV,EAAAW,OAAA,CAAA31E,GACAo9B,CACA,EAaA,SAAAA,EAAAp9B,CAAA,QACA,CAAQ,EAAAmiF,GAAA9M,EAAA,EAAkBr1E,IAC1Bg1E,EAAAY,IAAA,oBACApB,EAAAx0E,IAEAi1E,EAAAj1E,EACA,CACA,CA5CA,EE0E0Bi4F,GAAe,CACzC,GAAQG,GACR,GAAQ0B,GACR,GD7EO,CACP5/F,KAAA,WACA2hC,SAmEA,SAAAm5C,CAAA,CAAAR,CAAA,CAAAS,CAAA,EAEA,IAEAtnC,EAEAtmB,EAJA6vE,EAAA,EAKA,OAcA,SAAAl3F,CAAA,EAGA,OAFAg1E,EAAAU,KAAA,aACAV,EAAAU,KAAA,qBACA4hB,SAaAA,EAAAt3F,CAAA,SACA,KAAAA,GACAg1E,EAAAW,OAAA,CAAA31E,GACAk3F,IACAI,IAEAtiB,EAAAY,IAAA,qBACA2oB,EAAAv+F,GACA,EArBAA,EACA,EAgCA,SAAAu+F,EAAAv+F,CAAA,SAEA,OAAAA,EACAi1E,EAAAj1E,GAMAA,KAAAA,GACAg1E,EAAAU,KAAA,UACAV,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,UACA2oB,GAIAv+F,KAAAA,GACAqnB,EAAA2tD,EAAAU,KAAA,qBACA/nC,EAAA,EACAspD,SA2CAA,EAAAj3F,CAAA,SAEA,KAAAA,GACAg1E,EAAAW,OAAA,CAAA31E,GACA2tC,IACAspD,GAIAtpD,IAAAupD,GACAliB,EAAAY,IAAA,qBACAZ,EAAAY,IAAA,aACApB,EAAAx0E,KAIAqnB,EAAAptB,IAAA,gBACAovB,EAAArpB,GACA,EA7DAA,IAEQ,GAAAmiF,GAAA9M,EAAA,EAAkBr1E,IAC1Bg1E,EAAAU,KAAA,eACAV,EAAAW,OAAA,CAAA31E,GACAg1E,EAAAY,IAAA,eACA2oB,IAIAvpB,EAAAU,KAAA,iBACArsD,EAAArpB,GACA,CAYA,SAAAqpB,EAAArpB,CAAA,SACA,OAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAuD,GAAAmiF,GAAA9M,EAAA,EAAkBr1E,IACzEg1E,EAAAY,IAAA,iBACA2oB,EAAAv+F,KAEAg1E,EAAAW,OAAA,CAAA31E,GACAqpB,EACA,CA+BA,EA7MAwJ,QAMA,SAAAglD,CAAA,EACA,IAGA52D,EAEAy0D,EALA8oB,EAAA3mB,EAAA58E,MAAA,GACAwjG,EAAA,EAOA,IAAA5mB,eAAAA,CAAA,CAPA,EAOA,IAAA59E,IAAA,EAAA49E,UAAAA,CAAA,CAAA4mB,EAAA,IAAAxkG,IAAA,GAAA49E,CAAAA,eAAAA,CAAA,CAAA2mB,EAAA,IAAAvkG,IAAA,EAAA49E,UAAAA,CAAA,CAAA2mB,EAAA,IAAAvkG,IAAA,EAIA,KAHAgnB,EAAAw9E,EAGA,EAAAx9E,EAAAu9E,GACA,GAAA3mB,iBAAAA,CAAA,CAAA52D,EAAA,IAAAhnB,IAAA,EAEA49E,CAAA,CAAA4mB,EAAA,IAAAxkG,IAAA,mBACA49E,CAAA,CAAA2mB,EAAA,IAAAvkG,IAAA,mBACAwkG,GAAA,EACAD,GAAA,EACA,KACA,CACA,CAMA,IAFAv9E,EAAAw9E,EAAA,EACAD,IACA,EAAAv9E,GAAAu9E,GACA9oB,KAAAx/D,IAAAw/D,EACAz0D,IAAAu9E,GAAA3mB,eAAAA,CAAA,CAAA52D,EAAA,IAAAhnB,IAAA,EACAy7E,CAAAA,EAAAz0D,CAAA,EAEMA,CAAAA,IAAAu9E,GAAA3mB,eAAAA,CAAA,CAAA52D,EAAA,IAAAhnB,IAAA,IACN49E,CAAA,CAAAnC,EAAA,IAAAz7E,IAAA,gBACAgnB,IAAAy0D,EAAA,IACAmC,CAAA,CAAAnC,EAAA,IAAAv0D,GAAA,CAAA02D,CAAA,CAAA52D,EAAA,MAAAE,GAAA,CACA02D,EAAA97B,MAAA,CAAA25B,EAAA,EAAAz0D,EAAAy0D,EAAA,GACA8oB,GAAAv9E,EAAAy0D,EAAA,EACAz0D,EAAAy0D,EAAA,GAEAA,EAAAx/D,KAAAA,GAGA,OAAA2hE,CACA,EAlDAn1D,SAwDA,SAAA1iB,CAAA,EAEA,OAAAA,KAAAA,GAAA,yBAAA63E,MAAA,MAAAA,MAAA,CAAA58E,MAAA,OAAAhB,IAAA,CAzDA,CCyEA,EAGOi/F,GAAA,CACP1iC,KAAA,CAASsjC,GAAWzG,GAAW,EAIxB0G,GAAA,CACPvjC,KAAA,SAIO+xB,GAAA,CACP/xB,KAAA,IEzFA5zC,GAAA,cCDO,SAAA87E,GAAA3hG,CAAA,CAAA4hG,CAAA,EACP,IAAA3+F,EAAAoa,OAAA1d,QAAA,CAAAK,EAAA4hG,UACA,EAEA,GAAA3+F,KAAAA,GAAAA,EAAA,IAAAA,EAAA,IAEAA,EAAA,KAAAA,EAAA,KAEAA,EAAA,OAAAA,EAAA,OAEAA,EAAA,OAAAA,EAAA,OACA,CAAAA,MAAAA,CAAA,WAAAA,MAAAA,CAAA,UAEAA,EAAA,QACA,IAEApE,OAAAmgE,aAAA,CAAA/7D,EACA,CC7BA,IAAA4+F,GACA,oEAwBA,SAAAniD,GAAAxd,CAAA,CAAA4/D,CAAA,CAAAC,CAAA,EACA,GAAAD,EAEA,OAAAA,EAKA,GAAA3iE,KADA4iE,EAAAzjG,UAAA,IACA,CACA,IAAA6gC,EAAA4iE,EAAAzjG,UAAA,IACA6f,EAAAghB,MAAAA,GAAAA,KAAAA,EACA,OAAWwiE,GAA+BI,EAAAtjG,KAAA,CAAA0f,EAAA,KAAAA,EAAA,MAC1C,CACA,OAASkiE,EAA6B0hB,IAAA7/D,CACtC,CCqGA,IAAM8/D,GAAG,GAAKxkF,cAAA,CAuiCd,SAASykF,GAAKl2C,CAAA,EACd,OACApjC,KAAAojC,EAAApjC,IAAA,CACAL,OAAAyjC,EAAAzjC,MAAA,CACA/U,OAAAw4C,EAAAx4C,MAAA,CAEA,CA8DA,SAAA2uF,GAAA5nB,CAAA,CAAAE,CAAA,EACA,GAAAF,EACA,6BAAAA,EAAAp9E,IAAA,OAA2Dq+E,EAAiB,CAC5En9E,MAAAk8E,EAAAl8E,KAAA,CACAgmB,IAAAk2D,EAAAl2D,GAAA,GACK,0BAAAo2D,EAAAt9E,IAAA,OAAqDq+E,EAAiB,CAC3En9E,MAAAo8E,EAAAp8E,KAAA,CACAgmB,IAAAo2D,EAAAp2D,GAAA,GACK,YAEL,iDAAAo2D,EAAAt9E,IAAA,OAA+Eq+E,EAAiB,CAChGn9E,MAAAo8E,EAAAp8E,KAAA,CACAgmB,IAAAo2D,EAAAp2D,GAAA,GACK,kBAEL,CCnvCe,SAAA+9E,GAAA3kG,CAAA,EAGf,IAAAkd,EAAA,KAEAA,EAAAuoD,MAAA,CAKA,SAAA9U,CAAA,MDwIO8wB,EAAAzhF,MH7IP4kG,EALA95E,EACAyD,EAEA3tB,EIQA,MDwIA,iBADO6gF,ECvIgB,CACvB,GAAAvkE,EAAA4R,IAAA,aACA,GAAA9uB,CAAA,CAIA28E,WAAAz/D,EAAA4R,IAAA,4BACA+1E,gBAAA3nF,EAAA4R,IAAA,mCDkIA9uB,EAAAyhF,EACAA,EAAA9lE,KAAAA,GAEAmpF,CAQA,SAAA9kG,CAAA,EAEA,IAAAoiF,EAAA,CACA2iB,WAAA,GACAzW,eAAA,uDACAnT,MAAA,CACA6pB,SAAAC,EAAA5+E,GACA6+E,iBAAAC,EACAC,cAAAD,EACAE,WAAAJ,EAAA3lC,GACAg7B,WAAA2K,EA21BA,WACA,OACAvlG,KAAA,aACAoF,SAAA,GAEA,GA/1BA44F,gBAAAyH,EACAriB,mBAAAqiB,EACA5I,WAAA0I,EAAAK,GACAC,oBAAAh3E,EACAi3E,oBAAAj3E,EACAqtE,aAAAqJ,EAAAK,EAAA/2E,GACAk3E,SAAAR,EAs2BA,WACA,OACAvlG,KAAA,aACA8C,MAAA,EACA,CACA,EA32BA+rB,GACAm3E,aAAAP,EACAr2E,KAAAq2E,EACAQ,cAAAR,EACA1tD,WAAAwtD,EA02BA,WACA,OACAvlG,KAAA,aACAulD,WAAA,GACA7Y,MAAA,KACAzW,MAAA,KACAqwB,IAAA,EACA,CACA,GAj3BA4/C,4BAAAr3E,EACAs3E,sBAAAt3E,EACAu3E,sBAAAv3E,EACA6jD,SAAA6yB,EAi3BA,WACA,OACAvlG,KAAA,WACAoF,SAAA,GAEA,GAr3BAihG,gBAAAd,EAAAe,GACAC,kBAAAhB,EAAAe,GACAE,SAAAjB,EAAA/6E,EAAAqE,GACA43E,aAAAhB,EACAiB,SAAAnB,EAAA/6E,EAAAqE,GACA83E,aAAAlB,EACAvzF,MAAAqzF,EA24BA,WACA,OACAvlG,KAAA,QACAi2B,MAAA,KACAqwB,IAAA,GACA5c,IAAA,IACA,CACA,GAj5BAgD,MAAA7d,EACAlI,KAAA4+E,EAAA5+E,GACAigF,SAAArB,EA66BA,SAAAn4E,CAAA,EACA,OACAptB,KAAA,WACAm6D,OAAA/sC,EAAAy5E,OAAA,CACA13E,QAAA,KACA/pB,SAAA,GAEA,GAn7BA0hG,cA6YA,SAAA15E,CAAA,EACA,KAAAgC,IAAA,CAAA23E,2BAAA,GAEAC,IADA,CAAAjoE,KAAA,MAAAA,KAAA,CAAA/9B,MAAA,IACAE,KAAA,CAAAif,OAAA1d,QAAA,MAAAqvF,cAAA,CAAA1kE,GAAA,IACA,KAAAgC,IAAA,CAAA23E,2BAAA,CAAA9qF,KAAAA,EAEA,EAlZAgrF,YAAA1B,EAAAjiE,EAoYA,WACA,KAAAlU,IAAA,CAAA23E,2BAAA,GACA,GArYAG,cAAA3B,EAAAjiE,GACAg5D,UAAAiJ,EAm7BA,WACA,OACAvlG,KAAA,YACAoF,SAAA,GAEA,GAv7BAy2B,UA0uBA,WACA,KAAAzM,IAAA,CAAA+3E,aAAA,YACA,EA3uBAC,gBAAAv4E,EACAw4E,0BAAAx4E,EACAy4E,oBAAAz4E,EACA04E,cAAAhC,EAAA3lC,GACA4nC,OAAAjC,EAq7BA,WACA,OACAvlG,KAAA,SACAoF,SAAA,GAEA,GAz7BA20F,cAAAwL,EAo8BA,WACA,OACAvlG,KAAA,eACA,CACA,EAv8BA,EACA27E,KAAA,CACAgqB,WAAA8B,IACAC,mBA8dA,SAAAt6E,CAAA,EACA,IAAAxqB,EAAA,KAAAm8B,KAAA,MAAAA,KAAA,CAAA/9B,MAAA,IACA,IAAA4B,EAAAihF,KAAA,EACA,IAAAA,EAAA,KAAAiO,cAAA,CAAA1kE,GAAApsB,MAAA,CACA4B,EAAAihF,KAAA,CAAAA,CACA,CACA,EAneAyhB,SAAAmC,IACA/B,cAsyBA,SAAAt4E,CAAA,EACAu6E,EAAArrF,IAAA,MAAA8Q,GAEAxqB,IADA,CAAAm8B,KAAA,MAAAA,KAAA,CAAA/9B,MAAA,IACAslD,GAAA,gBAAAwrC,cAAA,CAAA1kE,EACA,EAzyBAo4E,iBA2xBA,SAAAp4E,CAAA,EACAu6E,EAAArrF,IAAA,MAAA8Q,GAEAxqB,IADA,CAAAm8B,KAAA,MAAAA,KAAA,CAAA/9B,MAAA,IACAslD,GAAA,MAAAwrC,cAAA,CAAA1kE,EACA,EA9xBAwtE,WAAA6M,IACAG,qBAAAD,EACAE,oCAAAC,EACAC,gCAAAD,EACAE,wBAyvBA,SAAA56E,CAAA,MAIAtqB,EAHA,IAAAssB,EAAA,KAAA0iE,cAAA,CAAA1kE,GACAptB,EAAA,KAAAovB,IAAA,CAAA64E,sBAAA,CAGAjoG,GACA8C,EAAc2hG,GAA+Br1E,EAAApvB,oCAAAA,EAAA,OAC7C,KAAAovB,IAAA,CAAA64E,sBAAA,CAAAhsF,KAAAA,GAGAnZ,EADqBqgF,EAA6B/zD,GAGlD,IAAA0T,EAAA,KAAA/D,KAAA,MAAAA,KAAA,CAAA/9B,MAAA,IACA8hC,EAAAhgC,KAAA,EAAAA,CACA,EAtwBAsgF,mBA4wBA,SAAAh2D,CAAA,EAEA0V,IADA,CAAA/D,KAAA,CAAAt/B,GAAA,GACA+rB,QAAA,CAAAtE,GAAA,CAAwB69E,GAAK33E,EAAAlG,GAAA,CAC7B,EA9wBA21E,WAAA4K,EAgaA,WACA,IAAAr4E,EAAA,KAAAkzD,MAAA,EAEA1/E,CADA,KAAAm8B,KAAA,MAAAA,KAAA,CAAA/9B,MAAA,IACA8B,KAAA,CAAAssB,EAAArR,OAAA,gCACA,KAAAqR,IAAA,CAAA84E,cAAA,CAAAjsF,KAAAA,CACA,GApaAksF,gBAoZA,WAEA,KAAA/4E,IAAA,CAAA84E,cAAA,GACA,KAAAr5E,MAAA,GACA,KAAAO,IAAA,CAAA84E,cAAA,IACA,EAxZArC,oBA+XA,WACA,IAAAz2E,EAAA,KAAAkzD,MAAA,EAEA1/E,CADA,KAAAm8B,KAAA,MAAAA,KAAA,CAAA/9B,MAAA,IACA2U,IAAA,CAAAyZ,CACA,EAlYA02E,oBAwYA,WACA,IAAA12E,EAAA,KAAAkzD,MAAA,EAEA1/E,CADA,KAAAm8B,KAAA,MAAAA,KAAA,CAAA/9B,MAAA,IACAy8F,IAAA,CAAAruE,CACA,EA3YA62E,cAAA0B,EACAzL,aAAAuL,EAsaA,WACA,IAAAr4E,EAAA,KAAAkzD,MAAA,EAEA1/E,CADA,KAAAm8B,KAAA,MAAAA,KAAA,CAAA/9B,MAAA,IACA8B,KAAA,CAAAssB,EAAArR,OAAA,mBACA,GAzaAgoF,SAAA0B,EAykBA,WACA,IAAAr4E,EAAA,KAAAkzD,MAAA,EAEA1/E,CADA,KAAAm8B,KAAA,MAAAA,KAAA,CAAA/9B,MAAA,IACA8B,KAAA,CAAAssB,CACA,GA5kBA42E,aAAA2B,EACAv4E,KAAAu4E,EACA5vD,WAAA0vD,IACAvB,4BAgcA,WACA,IAAA92E,EAAA,KAAAkzD,MAAA,EAEA1/E,CADA,KAAAm8B,KAAA,MAAAA,KAAA,CAAA/9B,MAAA,IACAslD,GAAA,CAAAl3B,CACA,EAncA+2E,sBA0aA,SAAA/4E,CAAA,EACA,IAAAsf,EAAA,KAAA41C,MAAA,GACA1/E,EAAA,KAAAm8B,KAAA,MAAAA,KAAA,CAAA/9B,MAAA,IACA4B,EAAA8pC,KAAA,CAAAA,EACA9pC,EAAA2iD,UAAA,CAAsB,GAAAi5C,GAAA3vC,CAAA,EAAmB,KAAAijC,cAAA,CAAA1kE,IAAA7R,WAAA,EACzC,EA9aA6qF,sBAobA,WACA,IAAAh3E,EAAA,KAAAkzD,MAAA,EAEA1/E,CADA,KAAAm8B,KAAA,MAAAA,KAAA,CAAA/9B,MAAA,IACAi1B,KAAA,CAAA7G,CACA,EAvbAsjD,SAAA+0B,IACApB,gBAAAoB,EAAAW,GACA7B,kBAAAkB,EAAAW,GACA5B,SAAAiB,EAyiBA,WACA,IAAAr4E,EAAA,KAAAkzD,MAAA,EAEA1/E,CADA,KAAAm8B,KAAA,MAAAA,KAAA,CAAA/9B,MAAA,IACA8B,KAAA,CAAAssB,CACA,GA5iBAq3E,aAAAkB,EACAjB,SAAAe,EAkjBA,WACA,IAAAr4E,EAAA,KAAAkzD,MAAA,EAEA1/E,CADA,KAAAm8B,KAAA,MAAAA,KAAA,CAAA/9B,MAAA,IACA8B,KAAA,CAAAssB,CACA,GArjBAu3E,aAAAgB,EACAz1F,MAAAu1F,EAmmBA,WACA,IAAA7kG,EAAA,KAAAm8B,KAAA,MAAAA,KAAA,CAAA/9B,MAAA,IAKA,QAAAouB,IAAA,CAAAi5E,WAAA,EAEA,IAAAlB,EAAA,KAAA/3E,IAAA,CAAA+3E,aAAA,YACAvkG,CAAAA,EAAA5C,IAAA,cAEA4C,EAAAukG,aAAA,CAAAA,EAEA,OAAAvkG,EAAA0jD,GAAA,CACA,OAAA1jD,EAAAqzB,KAAA,MAGA,OAAArzB,EAAA2iD,UAAA,CAEA,OAAA3iD,EAAA8pC,KAAA,CAEA,KAAAtd,IAAA,CAAA+3E,aAAA,CAAAlrF,KAAAA,CACA,GAxnBAywB,MA8oBA,WACA,IAAA6nB,EAAA,KAAAx1B,KAAA,MAAAA,KAAA,CAAA/9B,MAAA,IACA8B,EAAA,KAAAw/E,MAAA,GACA1/E,EAAA,KAAAm8B,KAAA,MAAAA,KAAA,CAAA/9B,MAAA,IAGA,GADA,KAAAouB,IAAA,CAAAi5E,WAAA,IACAzlG,SAAAA,EAAA5C,IAAA,EAEA,IAAAoF,EAAAmvD,EAAAnvD,QAAA,CACAxC,EAAAwC,QAAA,CAAAA,CACA,MACAxC,EAAA8mC,GAAA,CAAA5mC,CAEA,EA1pBAwlG,UA8nBA,SAAAl7E,CAAA,EACA,IAAAlrB,EAAA,KAAA4vF,cAAA,CAAA1kE,GACA45E,EAAA,KAAAjoE,KAAA,MAAAA,KAAA,CAAA/9B,MAAA,IAGAgmG,EAAAt6D,KAAA,CDv3BA5pC,EAAAib,OAAA,CAAA4mF,GAAAniD,ICy3BAwkD,EAAAzhD,UAAA,CAA0B,GAAAi5C,GAAA3vC,CAAA,EAAmB3sD,GAAAqZ,WAAA,EAC7C,EAroBA2iF,WAqgBA,SAAA9wE,CAAA,EACA,IAAAhuB,EAAA,KAAA2/B,KAAA,MAAAA,KAAA,CAAA/9B,MAAA,IAEA,QAAAouB,IAAA,CAAAm5E,WAAA,EAEAzlE,EADA19B,QAAA,CAAAhG,EAAAgG,QAAA,CAAApE,MAAA,IACAwqB,QAAA,CAAAtE,GAAA,CAA0B69E,GAAK33E,EAAAlG,GAAA,EAC/B,KAAAkI,IAAA,CAAAm5E,WAAA,CAAAtsF,KAAAA,EACA,MACA,CACA,MAAAmT,IAAA,CAAAo5E,4BAAA,EAAA9lB,EAAAkM,cAAA,CAAA98D,QAAA,CAAA1yB,EAAAY,IAAA,IACAylG,EAAAnpF,IAAA,MAAA8Q,GACAu6E,EAAArrF,IAAA,MAAA8Q,GAEA,EAjhBAzG,KAAA8gF,EAkkBA,WACA,IAAA7kG,EAAA,KAAAm8B,KAAA,MAAAA,KAAA,CAAA/9B,MAAA,IAKA,QAAAouB,IAAA,CAAAi5E,WAAA,EAEA,IAAAlB,EAAA,KAAA/3E,IAAA,CAAA+3E,aAAA,YACAvkG,CAAAA,EAAA5C,IAAA,cAEA4C,EAAAukG,aAAA,CAAAA,EAEA,OAAAvkG,EAAA0jD,GAAA,CACA,OAAA1jD,EAAAqzB,KAAA,MAGA,OAAArzB,EAAA2iD,UAAA,CAEA,OAAA3iD,EAAA8pC,KAAA,CAEA,KAAAtd,IAAA,CAAA+3E,aAAA,CAAAlrF,KAAAA,CACA,GAvlBA2qF,SAAAa,IACAR,YAAAQ,IACAP,cAAAO,IACAnL,UAAAmL,IACAL,gBAksBA,SAAAh6E,CAAA,EACA,IAAAsf,EAAA,KAAA41C,MAAA,GACA1/E,EAAA,KAAAm8B,KAAA,MAAAA,KAAA,CAAA/9B,MAAA,IAGA4B,EAAA8pC,KAAA,CAAAA,EAEA9pC,EAAA2iD,UAAA,CAAsB,GAAAi5C,GAAA3vC,CAAA,EAAmB,KAAAijC,cAAA,CAAA1kE,IAAA7R,WAAA,GACzC,KAAA6T,IAAA,CAAA+3E,aAAA,OACA,EA1sBAE,0BAypBA,WACA,IAAAj4E,EAAA,KAAAkzD,MAAA,EAEA1/E,CADA,KAAAm8B,KAAA,MAAAA,KAAA,CAAA/9B,MAAA,IACAslD,GAAA,CAAAl3B,CACA,EA5pBAk4E,oBAmqBA,WACA,IAAAl4E,EAAA,KAAAkzD,MAAA,EAEA1/E,CADA,KAAAm8B,KAAA,MAAAA,KAAA,CAAA/9B,MAAA,IACAi1B,KAAA,CAAA7G,CACA,EAtqBAq5E,SA6qBA,WACA,KAAAr5E,IAAA,CAAAi5E,WAAA,CAAApsF,KAAAA,CACA,EA9qBAsrF,cAAAE,EAgdA,WACA,KAAAr4E,IAAA,CAAAo5E,4BAAA,CAAAvsF,KAAAA,CACA,GAjdAysF,0BAscA,SAAAt7E,CAAA,EAEAxqB,IADA,CAAAm8B,KAAA,MAAAA,KAAA,CAAA/9B,MAAA,IACA6iF,KAAA,WAAAiO,cAAA,CAAA1kE,GAAAqyD,WAAA,OACA,EAxcAkpB,kBA6bA,WACA,KAAAv5E,IAAA,CAAAo5E,4BAAA,GACA,EA9bAhB,OAAAC,IACA1N,cAAA0N,GACA,CACA,EACAmB,CA06BA,SAAAA,EAAAC,CAAA,CAAA5rB,CAAA,EACA,IAAAj2D,EAAA,GACA,OAAAA,EAAAi2D,EAAAj8E,MAAA,GACA,IAAA8B,EAAAm6E,CAAA,CAAAj2D,EAAA,CACA/I,MAAAC,OAAA,CAAApb,GACA8lG,EAAAC,EAAA/lG,GAEA4wE,SAUAm1B,CAAA,CAAAn1B,CAAA,EAEA,IAAAn5D,EACA,IAAAA,KAAAm5D,EACA,GAAQoxB,GAAGxoF,IAAA,CAAAo3D,EAAAn5D,GACX,OAAAA,GACA,qBACA,CACA,IAAA+iE,EAAA5J,CAAA,CAAAn5D,EAAA,CACA+iE,GACAurB,CAAA,CAAAtuF,EAAA,CAAAlb,IAAA,IAAAi+E,GAEA,KACA,CACA,iBACA,CACA,IAAAA,EAAA5J,CAAA,CAAAn5D,EAAA,CACA+iE,GACAurB,CAAA,CAAAtuF,EAAA,CAAAlb,IAAA,IAAAi+E,GAEA,KACA,CACA,YACA,WACA,CACA,IAAAA,EAAA5J,CAAA,CAAAn5D,EAAA,CACA+iE,GACAp3E,OAAA0zC,MAAA,CAAAivD,CAAA,CAAAtuF,EAAA,CAAA+iE,EAGA,CAEA,CAGA,EA7CAurB,EAAA/lG,EAEA,CACA,GAp7BA4/E,EAAA,CAAApiF,GAAA,IAAkC6kG,eAAA,MAGlC,IAAA/1E,EAAA,GACA,OAUA,SAAAwuD,CAAA,EAEA,IAAAh9B,EAAA,CACA5gD,KAAA,OACAoF,SAAA,IAGAhG,EAAA,CACA2/B,MAAA,CAAA6hB,EAAA,CACA8hB,WAAA,GACAggB,OAAAA,EACAjH,MAAAA,EACAE,KAAAA,EACA9sD,OAAAA,EACAyzD,OAAAA,EACAlzD,KAAAA,CACA,EAEA05E,EAAA,GACA9hF,EAAA,GACA,OAAAA,EAAA42D,EAAA58E,MAAA,EAGA48E,CAAAA,gBAAAA,CAAA,CAAA52D,EAAA,IAAAhnB,IAAA,EAAA49E,kBAAAA,CAAA,CAAA52D,EAAA,IAAAhnB,IAAA,IACA49E,UAAAA,CAAA,CAAA52D,EAAA,IACA8hF,EAAAzpG,IAAA,CAAA2nB,GAGAA,EAAA+hF,SAiDAnrB,CAAA,CAAA18E,CAAA,CAAAF,CAAA,EACA,IAIA4lG,EAEA/Q,EAEAmT,EAEA7O,EAVAnzE,EAAA9lB,EAAA,EACA+nG,EAAA,GACAC,EAAA,GASA,OAAAliF,GAAAhmB,GAAA,CACA,IAAA00C,EAAAkoC,CAAA,CAAA52D,EAAA,CACA,OAAA0uB,CAAA,IAAA11C,IAAA,EACA,oBACA,kBACA,iBAEA01C,UAAAA,CAAA,IACAuzD,IAEAA,IAEA9O,EAAAl+E,KAAAA,EACA,KAEA,uBAEA,UAAAy5B,CAAA,OACAkxD,GAAAzM,GAAA8O,GAAAD,GACAA,CAAAA,EAAAhiF,CAAA,EAEAmzE,EAAAl+E,KAAAA,GAEA,KAEA,kBACA,oBACA,qBACA,qBACA,+BAIA,KAEA,SAEAk+E,EAAAl+E,KAAAA,CAEA,CACA,IAAAgtF,GAAAvzD,UAAAA,CAAA,KAAAA,mBAAAA,CAAA,IAAA11C,IAAA,EAAAipG,KAAAA,GAAAvzD,SAAAA,CAAA,KAAAA,CAAAA,kBAAAA,CAAA,IAAA11C,IAAA,EAAA01C,gBAAAA,CAAA,IAAA11C,IAAA,GACA,GAAA4mG,EAAA,CACA,IAAAuC,EAAAniF,EAEA,IADA6uE,EAAA55E,KAAAA,EACAktF,KAAA,CACA,IAAAC,EAAAxrB,CAAA,CAAAurB,EAAA,CACA,GAAAC,eAAAA,CAAA,IAAAppG,IAAA,EAAAopG,oBAAAA,CAAA,IAAAppG,IAAA,EACA,GAAAopG,SAAAA,CAAA,aACAvT,IACAjY,CAAA,CAAAiY,EAAA,IAAA71F,IAAA,mBACAkpG,EAAA,IAEAE,CAAA,IAAAppG,IAAA,cACA61F,EAAAsT,CACA,MAAc,GAAAC,eAAAA,CAAA,IAAAppG,IAAA,EAAAopG,qBAAAA,CAAA,IAAAppG,IAAA,EAAAopG,+BAAAA,CAAA,IAAAppG,IAAA,EAAAopG,qBAAAA,CAAA,IAAAppG,IAAA,EAAAopG,mBAAAA,CAAA,IAAAppG,IAAA,OAGd,KAEA,CACAgpG,GAAA,EAAAnT,GAAAmT,EAAAnT,CAAA,GACA+Q,CAAAA,EAAAC,OAAA,KAIAD,EAAA1/E,GAAA,CAAAhhB,OAAA0zC,MAAA,IAAyCi8C,EAAAjY,CAAA,CAAAiY,EAAA,IAAA30F,KAAA,CAAAw0C,CAAA,IAAAxuB,GAAA,EACzC02D,EAAA97B,MAAA,CAAA+zC,GAAA7uE,EAAA,UAAA4/E,EAAAlxD,CAAA,MACA1uB,IACAhmB,GACA,CAGA,GAAA00C,mBAAAA,CAAA,IAAA11C,IAAA,EAEA,IAAAw1F,EAAA,CACAx1F,KAAA,WACA6mG,QAAA,GACA3lG,MAAAgF,OAAA0zC,MAAA,IAAmClE,CAAA,IAAAx0C,KAAA,EAEnCgmB,IAAAjL,KAAAA,CACA,EACA2qF,EAAApR,EACA5X,EAAA97B,MAAA,CAAA96B,EAAA,WAAAwuE,EAAA9/C,CAAA,MACA1uB,IACAhmB,IACAgoG,EAAA/sF,KAAAA,EACAk+E,EAAA,EACA,CACA,CACA,CAEA,OADAvc,CAAA,CAAA18E,EAAA,IAAA2lG,OAAA,CAAAqC,EACAloG,CACA,EAzJA48E,EADAkrB,EAAArpG,GAAA,GACAunB,IAKA,IADAA,EAAA,GACA,EAAAA,EAAA42D,EAAA58E,MAAA,GACA,IAAAqoG,EAAA3mB,CAAA,CAAA9E,CAAA,CAAA52D,EAAA,KACU89E,GAAGxoF,IAAA,CAAA+sF,EAAAzrB,CAAA,CAAA52D,EAAA,IAAAhnB,IAAA,GACbqpG,CAAA,CAAAzrB,CAAA,CAAA52D,EAAA,IAAAhnB,IAAA,EAAAsc,IAAA,CAAApW,OAAA0zC,MAAA,EACAk4C,eAAAlU,CAAA,CAAA52D,EAAA,IAAA8qE,cAAA,EACS1yF,GAAAw+E,CAAA,CAAA52D,EAAA,IAET,CAGA,GAAA5nB,EAAAsjE,UAAA,CAAA1hE,MAAA,IACA,IAAA8hC,EAAA1jC,EAAAsjE,UAAA,CAAAtjE,EAAAsjE,UAAA,CAAA1hE,MAAA,IAEAqoG,CADAvmE,CAAA,KAAAkiE,EAAA,EACA1oF,IAAA,CAAAld,EAAA6c,KAAAA,EAAA6mB,CAAA,IACA,CAkBA,IAfA8d,EAAAp1B,QAAA,EACAtqB,MAAa6jG,GAAKnnB,EAAA58E,MAAA,GAAA48E,CAAA,OAAA18E,KAAA,EAClBuqB,KAAA,EACAL,OAAA,EACA/U,OAAA,CACA,GACA6Q,IAAW69E,GAAKnnB,EAAA58E,MAAA,GAAA48E,CAAA,CAAAA,EAAA58E,MAAA,OAAAkmB,GAAA,EAChBuE,KAAA,EACAL,OAAA,EACA/U,OAAA,CACA,EACA,EAGA2Q,EAAA,GACA,EAAAA,EAAA07D,EAAA2iB,UAAA,CAAArkG,MAAA,EACA4/C,EAAA8hC,EAAA2iB,UAAA,CAAAr+E,EAAA,CAAA45B,IAAAA,EAEA,OAAAA,CACA,EA4HA,SAAA2kD,EAAA3pF,CAAA,CAAA1H,CAAA,EACA,OAOA,SAAAkZ,CAAA,EACAquD,EAAAn/D,IAAA,MAAAV,EAAAwR,GAAAA,GACAlZ,GAAAA,EAAAoI,IAAA,MAAA8Q,EACA,CACA,CAMA,SAAAyB,IACA,KAAAkQ,KAAA,CAAA1/B,IAAA,EACAW,KAAA,WACAoF,SAAA,IAEA,CAcA,SAAAq2E,EAAA74E,CAAA,CAAAwqB,CAAA,CAAAk8E,CAAA,EAIAC,IAHA,CAAAxqE,KAAA,MAAAA,KAAA,CAAA/9B,MAAA,IAEAoE,QAAA,CACA/F,IAAA,CAAAuD,GACA,KAAAm8B,KAAA,CAAA1/B,IAAA,CAAAuD,GACA,KAAA8/D,UAAA,CAAArjE,IAAA,EAAA+tB,EAAAk8E,EAAA,EACA1mG,EAAA4oB,QAAA,EACAtqB,MAAa6jG,GAAK33E,EAAAlsB,KAAA,EAElBgmB,IAAAjL,KAAAA,CACA,CACA,CAUA,SAAAwrF,EAAAvzF,CAAA,EACA,OAOA,SAAAkZ,CAAA,EACAlZ,GAAAA,EAAAoI,IAAA,MAAA8Q,GACAuuD,EAAAr/D,IAAA,MAAA8Q,EACA,CACA,CAYA,SAAAuuD,EAAAvuD,CAAA,CAAAo8E,CAAA,EACA,IAAA5mG,EAAA,KAAAm8B,KAAA,CAAAt/B,GAAA,GACAsa,EAAA,KAAA2oD,UAAA,CAAAjjE,GAAA,GACA,GAAAsa,EAKMA,CAAA,IAAA/Z,IAAA,GAAAotB,EAAAptB,IAAA,GACNwpG,EACAA,EAAAltF,IAAA,MAAA8Q,EAAArT,CAAA,KAGAsvF,CADAtvF,CAAA,KAAAirF,EAAA,EACA1oF,IAAA,MAAA8Q,EAAArT,CAAA,WATA,6BAAAqT,EAAAptB,IAAA,OAA8Dq+E,EAAiB,CAC/En9E,MAAAksB,EAAAlsB,KAAA,CACAgmB,IAAAkG,EAAAlG,GAAA,GACO,mBASPtkB,CAAAA,EAAA4oB,QAAA,CAAAtE,GAAA,CAAwB69E,GAAK33E,EAAAlG,GAAA,CAC7B,CAMA,SAAAo7D,IACA,MAAW,GAAAmnB,GAAAC,CAAA,EAAQ,KAAA3qE,KAAA,CAAAt/B,GAAA,GACnB,CAuJA,SAAAgmG,EAAAr4E,CAAA,EAGA,IAAAm8E,EAAA3mG,IAFA,CAAAm8B,KAAA,MAAAA,KAAA,CAAA/9B,MAAA,IAEAoE,QAAA,CACA09B,EAAAymE,CAAA,CAAAA,EAAAvoG,MAAA,IACA8hC,GAAAA,SAAAA,EAAA9iC,IAAA,GAGA8iC,CADAA,EA8aA,CACA9iC,KAAA,OACA8C,MAAA,EACA,CAjbA,EACA0oB,QAAA,EACAtqB,MAAe6jG,GAAK33E,EAAAlsB,KAAA,EAEpBgmB,IAAAjL,KAAAA,CACA,EACAstF,EAAAlqG,IAAA,CAAAyjC,IAEA,KAAA/D,KAAA,CAAA1/B,IAAA,CAAAyjC,EACA,CAOA,SAAA6kE,EAAAv6E,CAAA,EACA,IAAA0V,EAAA,KAAA/D,KAAA,CAAAt/B,GAAA,EACAqjC,CAAAA,EAAAhgC,KAAA,OAAAgvF,cAAA,CAAA1kE,GACA0V,EAAAtX,QAAA,CAAAtE,GAAA,CAAwB69E,GAAK33E,EAAAlG,GAAA,CAC7B,CA2BA,SAAAkhF,IACA,KAAAh5E,IAAA,CAAAm5E,WAAA,GACA,CA6LA,SAAAT,EAAA16E,CAAA,EACA,KAAAgC,IAAA,CAAA64E,sBAAA,CAAA76E,EAAAptB,IAAA,CAiEA,SAAA4lG,IACA,OACA5lG,KAAA,OACA2V,KAAA,KACA8nF,KAAA,KACA36F,MAAA,EACA,CACA,CA8BA,SAAA88D,IACA,OACA5/D,KAAA,UAEA6jF,MAAA,EACAz+E,SAAA,GAEA,CAGA,SAAAkhG,IACA,OACAtmG,KAAA,OACA,CACA,CAGA,SAAAwqB,IACA,OACAxqB,KAAA,OACA8C,MAAA,EACA,CACA,CAaA,SAAA6jB,IACA,OACA3mB,KAAA,OACAi2B,MAAA,KACAqwB,IAAA,GACAlhD,SAAA,GAEA,CAMA,SAAAk+B,EAAAlW,CAAA,EACA,OACAptB,KAAA,OACA2pG,QAAAv8E,gBAAAA,EAAAptB,IAAA,CACAkB,MAAA,KACAi5D,OAAA/sC,EAAAy5E,OAAA,CACAzhG,SAAA,GAEA,CA6CA,GA//BA9E,GAA2BspG,SrClKpBhsB,CAAA,EACP,MAAU+X,GAAW/X,KAGrB,OAAAA,CACA,EqC6JuCniD,CJxJhC,SAAAn7B,CAAA,EAOP,IAAAylE,EAAA,CACA/tB,QAAA,GACAhf,KAAA,GACAukD,WANI,GAAA4P,GAAAC,CAAA,EAAiB,CAAEyc,KAAiBvuE,CAHxCh7B,GAAA,IAGwC28E,UAAA,OAOxC9yD,QAAAvO,EAAoBuO,IACpByQ,SAAAhf,EAAqBu7E,IACrB5kC,KAAA32C,EAAiB22C,IACjBrwD,OAAA0Z,EAAmB1Z,IACnBo6B,KAAA1gB,EAAiB29E,GACjB,EACA,OAAAxzB,EAKA,SAAAnqD,EAAAq5E,CAAA,EACA,OAEA,SAAAruE,CAAA,EACA,OAAakjF,S3BCN/jC,CAAA,CAAAgkC,CAAA,CAAAnjF,CAAA,EAEP,IAAA03D,EAAAp4E,OAAA0zC,MAAA,CACAhzB,EACA1gB,OAAA0zC,MAAA,IAAwBhzB,GACxB,CACA6E,KAAA,EACAL,OAAA,EACA/U,OAAA,CACA,EACA,CACAwjF,OAAA,EACAC,aAAA,EACA,GAGAkQ,EAAA,GAEAC,EAAA,GAEA9qF,EAAA,GAEA4f,EAAA,GASAg8C,EAAA,CACAW,QAkJA,SAAA31E,CAAA,EACQ,GAAAmiF,GAAA9M,EAAA,EAAkBr1E,IAC1Bu4E,EAAA7yD,IAAA,GACA6yD,EAAAlzD,MAAA,GACAkzD,EAAAjoE,MAAA,EAAAtQ,KAAAA,EAAA,IACAmkG,KACM,KAAAnkG,IACNu4E,EAAAlzD,MAAA,GACAkzD,EAAAjoE,MAAA,IAIAioE,EAAAwb,YAAA,GACAxb,EAAAub,MAAA,IAEAvb,EAAAwb,YAAA,GAKAxb,EAAAwb,YAAA,GAAA36E,CAAA,CAAAm/D,EAAAub,MAAA,EAAA74F,MAAA,GACAs9E,EAAAwb,YAAA,IACAxb,EAAAub,MAAA,KAKAz6F,EAAAqpB,QAAA,CAAA1iB,CAIA,EAhLA01E,MAmLA,SAAAz7E,CAAA,CAAA+kE,CAAA,EAGA,IAAA33C,EAAA23C,GAAA,GAKA,OAJA33C,EAAAptB,IAAA,CAAAA,EACAotB,EAAAlsB,KAAA,CAAA07B,IACAx9B,EAAAw+E,MAAA,CAAAv+E,IAAA,UAAA+tB,EAAAhuB,EAAA,EACA2/B,EAAA1/B,IAAA,CAAA+tB,GACAA,CACA,EA3LAuuD,KA8LA,SAAA37E,CAAA,EACA,IAAAotB,EAAA2R,EAAAt/B,GAAA,GAGA,OAFA2tB,EAAAlG,GAAA,CAAA0V,IACAx9B,EAAAw+E,MAAA,CAAAv+E,IAAA,SAAA+tB,EAAAhuB,EAAA,EACAguB,CACA,EAlMAk/D,QAAA6d,EAyMA,SAAAC,CAAA,CAAAzgF,CAAA,EACAm+D,EAAAsiB,EAAAzgF,EAAA/C,IAAA,CACA,GA1MAwxB,MAAA+xD,EAAAE,GACA7c,UAAA2c,EAAAE,EAAA,CACA7c,UAAA,EACA,EACA,EAOApuF,EAAA,CACAqpB,SAAA,KACA1iB,KAAA,KACAyxF,eAAA,GACA5Z,OAAA,GACA7X,OAAAA,EACAqf,YAAAA,EACA0M,eA6CA,SAAA1kE,CAAA,CAAAk9E,CAAA,EACA,OAAWC,SAsYaprF,CAAA,CAAAmrF,CAAA,EACxB,IAIA/kB,EAJAv+D,EAAA,GAEAnB,EAAA,GAGA,OAAAmB,EAAA7H,EAAAne,MAAA,OAGA8B,EAFA,IAAAsc,EAAAD,CAAA,CAAA6H,EAAA,CAGA,oBAAA5H,EACAtc,EAAAsc,OAEA,OAAAA,GACA,QACAtc,EAAA,KACA,KAEA,SACAA,EAAA,KACA,KAEA,SACAA,EAAA,OACA,KAEA,SACAA,EAAAwnG,EAAA,QACA,KAEA,SACA,IAAAA,GAAA/kB,EAAA,SACAziF,EAAA,IACA,KAEA,SAEAA,EAAAnB,OAAAC,YAAA,CAAAwd,EAEA,CACAmmE,EAAAnmE,KAAAA,EACAyG,EAAAxmB,IAAA,CAAAyD,EACA,CACA,OAAA+iB,EAAA1H,IAAA,IACA,EAlb0BinE,EAAAh4D,GAAAk9E,EAC1B,EA9CA1tE,IAAAA,EACAi6D,WAkEA,SAAA/zF,CAAA,EACAknG,CAAA,CAAAlnG,EAAA2oB,IAAA,EAAA3oB,EAAAsoB,MAAA,CACA8+E,GACA,EApEA17E,MAsBA,SAAAjtB,CAAA,QAKA,CAJA4d,EAAa,GAAA63E,GAAA8H,CAAA,EAAI3/E,EAAA5d,GACjBipG,WA8DA,IAAAC,EACA,KAAAnsB,EAAAub,MAAA,CAAA16E,EAAAne,MAAA,GACA,IAAAoe,EAAAD,CAAA,CAAAm/D,EAAAub,MAAA,EAGA,oBAAAz6E,EAKA,IAJAqrF,EAAAnsB,EAAAub,MAAA,CACAvb,EAAAwb,YAAA,IACAxb,CAAAA,EAAAwb,YAAA,IAGAxb,EAAAub,MAAA,GAAA4Q,GACAnsB,EAAAwb,YAAA,CAAA16E,EAAApe,MAAA,EAEAkzD,KAcAnuD,EAAAA,EAdAqZ,EAAAhe,UAAA,CAAAk9E,EAAAwb,YAAA,EAiBAlW,EAAAA,EAAA79E,EAjBA,MAiBA69E,EAAAA,EAdAxkE,EAEA,CACA,IA/EAD,OAAAA,CAAA,CAAAA,EAAAne,MAAA,KACA,IAEA8mF,EAAAiiB,EAAA,GAGA3qG,EAAAw+E,MAAA,CAAqB,GAAAmhB,GAAAC,CAAA,EAAUiL,EAAA7qG,EAAAw+E,MAAA,CAAAx+E,GAC/BA,EAAAw+E,MAAA,CACA,CAlCA,EAOAgG,EAAAmmB,EAAAnoE,QAAA,CAAAtlB,IAAA,CAAAld,EAAA27E,GAWA,OAHAgvB,EAAApsB,UAAA,EACAssB,EAAA5qG,IAAA,CAAA0qG,GAEA3qG,EA4BA,SAAAgmF,EAAAh4D,CAAA,EACA,OAAAs9E,SA8VAvrF,CAAA,CAAAiO,CAAA,MAMAu9E,EALA,IAAAC,EAAAx9E,EAAAlsB,KAAA,CAAA24F,MAAA,CACAgR,EAAAz9E,EAAAlsB,KAAA,CAAA44F,YAAA,CACAgR,EAAA19E,EAAAlG,GAAA,CAAA2yE,MAAA,CACAkR,EAAA39E,EAAAlG,GAAA,CAAA4yE,YAAA,CAGA,GAAA8Q,IAAAE,EAEAH,EAAA,CAAAxrF,CAAA,CAAAyrF,EAAA,CAAArpG,KAAA,CAAAspG,EAAAE,GAAA,KACI,CAEJ,GADAJ,EAAAxrF,EAAA5d,KAAA,CAAAqpG,EAAAE,GACAD,EAAA,IACA,IAAA5oE,EAAA0oE,CAAA,IACA,iBAAA1oE,EACA0oE,CAAA,IAAA1oE,EAAA1gC,KAAA,CAAAspG,GAEAF,EAAAtlB,KAAA,EAEA,CACA0lB,EAAA,GAEAJ,EAAAtrG,IAAA,CAAA8f,CAAA,CAAA2rF,EAAA,CAAAvpG,KAAA,GAAAwpG,GAEA,CACA,OAAAJ,CACA,EAxXAxrF,EAAAiO,EACA,CAGA,SAAAwP,IAEA,IAAWnR,KAAAA,CAAA,CAAAL,OAAAA,CAAA,CAAA/U,OAAAA,CAAA,CAAAwjF,OAAAA,CAAA,CAAAC,aAAAA,CAAA,EAA4Cxb,EACvD,OACA7yD,KAAAA,EACAL,OAAAA,EACA/U,OAAAA,EACAwjF,OAAAA,EACAC,aAAAA,CACA,CACA,CA8HA,SAAAuQ,EAAA1sE,CAAA,CAAAhU,CAAA,EACAA,EAAA44B,OAAA,EACA,CAQA,SAAA4nD,EAAAa,CAAA,CAAAjmC,CAAA,EACA,OAWA,SAAAwY,CAAA,CAAAiN,CAAA,CAAAygB,CAAA,EAEA,IAAAC,EAEAC,EAEAlT,EAEAtuE,EACA,OAAA1L,MAAAC,OAAA,CAAAq/D,GACA6tB,EAAA7tB,GACA,aAAAA,EAEA6tB,EAAA,CAAA7tB,EAAA,EAaA,SAAAx3E,CAAA,EACA,IAAA68D,EAAA78D,OAAAA,GAAA6e,CAAA,CAAA7e,EAAA,CACA09B,EAAA19B,OAAAA,GAAA6e,EAAA23C,IAAA,CAOA,OAAA6uC,EANA,IAGAntF,MAAAC,OAAA,CAAA0kD,GAAAA,EAAAA,EAAA,CAAAA,EAAA,OACA3kD,MAAAC,OAAA,CAAAulB,GAAAA,EAAAA,EAAA,CAAAA,EAAA,IACA,EACA19B,EACA,EASA,SAAAqlG,EAAA9nE,CAAA,QAGA,CAFA4nE,EAAA5nE,EACA6nE,EAAA,EACA7nE,IAAAA,EAAAtiC,MAAA,EACAiqG,EAEAI,EAAA/nE,CAAA,CAAA6nE,EAAA,CACA,CAQA,SAAAE,EAAAjB,CAAA,EACA,OAGA,SAAArkG,CAAA,QAaA,CARA4jB,EAAA2hF,WAyEA,IAAAC,EAAA3uE,IACA4uE,EAAApsG,EAAAqpB,QAAA,CACAgjF,EAAArsG,EAAA64F,gBAAA,CACAyT,EAAAtsG,EAAAw+E,MAAA,CAAA58E,MAAA,CACA2qG,EAAA1tF,MAAA2I,IAAA,CAAAmY,GACA,OACAwjB,QASA,WACA+7B,EAAAitB,EACAnsG,EAAAqpB,QAAA,CAAA+iF,EACApsG,EAAA64F,gBAAA,CAAAwT,EACArsG,EAAAw+E,MAAA,CAAA58E,MAAA,CAAA0qG,EACA3sE,EAAA4sE,EACAzB,GACA,EAfAtjF,KAAA8kF,CACA,CAeA,IA/FAzT,EAAAmS,EACAA,EAAA/uB,OAAA,EACAj8E,CAAAA,EAAA64F,gBAAA,CAAAmS,CAAA,EAMAA,EAAAnqG,IAAA,EACAb,EAAA2mE,MAAA,CAAAwX,UAAA,CAAA+Q,OAAA,CAAA/xB,IAAA,CAAAzqC,QAAA,CAAAs4E,EAAAnqG,IAAA,GAEA+6E,EAAAj1E,GAEAqkG,EAAAxoE,QAAA,CAAAtlB,IAAA,CAIAyoD,EAAA7+D,OAAA0zC,MAAA,CAAA1zC,OAAA0V,MAAA,CAAAxc,GAAA2lE,GAAA3lE,EACA27E,EACAR,EACAS,GACAj1E,EACA,CACA,CAGA,SAAAw0E,EAAAx0E,CAAA,EAGA,OADAilG,EAAA/S,EAAAtuE,GACA6gE,CACA,CAGA,SAAAxP,EAAAj1E,CAAA,QAGA,CADA4jB,EAAA44B,OAAA,GACA,EAAA4oD,EAAAD,EAAAlqG,MAAA,EACAqqG,EAAAH,CAAA,CAAAC,EAAA,EAEAF,CACA,CACA,CACA,CAOA,SAAAnjB,EAAAsiB,CAAA,CAAAxjF,CAAA,EACAwjF,EAAAzsB,UAAA,GAAAssB,EAAAn4E,QAAA,CAAAs4E,IACAH,EAAA5qG,IAAA,CAAA+qG,GAEAA,EAAAxxE,OAAA,EACM,GAAAo+D,GAAAnoC,CAAA,EACNzvD,EAAAw+E,MAAA,CACAh3D,EACAxnB,EAAAw+E,MAAA,CAAA58E,MAAA,CAAA4lB,EACAwjF,EAAAxxE,OAAA,CAAAx5B,EAAAw+E,MAAA,CAAAr8E,KAAA,CAAAqlB,GAAAxnB,IAGAgrG,EAAA7N,SAAA,EACAn9F,CAAAA,EAAAw+E,MAAA,CAAAwsB,EAAA7N,SAAA,CAAAn9F,EAAAw+E,MAAA,CAAAx+E,EAAA,CAEA,CAuCA,SAAA8qG,IACA5rB,EAAA7yD,IAAA,IAAAu+E,GAAA1rB,EAAAlzD,MAAA,KACAkzD,EAAAlzD,MAAA,CAAA4+E,CAAA,CAAA1rB,EAAA7yD,IAAA,EACA6yD,EAAAjoE,MAAA,EAAA2zF,CAAA,CAAA1rB,EAAA7yD,IAAA,IAEA,CACA,E2B/b4Bs6C,EAAAkvB,EAAAruE,EAC5B,CACA,CACA,GI2H4CtmB,GAAAs6B,QAAA,GAAApM,KAAA,CAA2Bo9E,CHvJvExgF,EAAA,EACAyD,EAAA,GAEA3tB,EAAA,GAOA,SAAA4B,CAAA,CAAAi/E,CAAA,CAAA76D,CAAA,MAIAjH,EAEAhd,EAEAszF,EAEAsV,EAEA9lG,EAVA,IAAAoZ,EAAA,GAyBA,IAdArc,EACA+rB,EACA,kBAAA/rB,EACAA,EAAA2hB,QAAA,GACA,IAAAw9D,YAAAF,GAAA9lE,KAAAA,GAAAumC,MAAA,CAAA1/C,EAAA,EACAyzF,EAAA,EACA1nE,EAAA,GACA3tB,IAEA,QAAA4B,EAAA1B,UAAA,KACAm1F,IAEAr1F,EAAA+a,KAAAA,GAEAs6E,EAAAzzF,EAAA9B,MAAA,GAMA,GALA2nB,GAAAjJ,SAAA,CAAA62E,EAEAsV,EACA5rF,CAFAA,EAAA0I,GAAA/I,IAAA,CAAA9c,EAAA,GAEAmd,KAAAhE,IAAAgE,EAAA+G,KAAA,CAAA/G,EAAA+G,KAAA,CAAAlkB,EAAA9B,MAAA,CACA+E,EAAAjD,EAAA1B,UAAA,CAAAyqG,GACA,CAAA5rF,EAAA,CACA4O,EAAA/rB,EAAAvB,KAAA,CAAAg1F,GACA,KACA,CACA,GAAAxwF,KAAAA,GAAAwwF,IAAAsV,GAAA3G,EACA/lF,EAAA9f,IAAA,KACA6lG,EAAAjpF,KAAAA,OAUA,OARAipF,IACA/lF,EAAA9f,IAAA,KACA6lG,EAAAjpF,KAAAA,GAEAs6E,EAAAsV,IACA1sF,EAAA9f,IAAA,CAAAyD,EAAAvB,KAAA,CAAAg1F,EAAAsV,IACAzgF,GAAAygF,EAAAtV,GAEAxwF,GACA,OACAoZ,EAAA9f,IAAA,QACA+rB,IACA,KAEA,QAGA,IAFAnoB,EAAAse,EAAAA,KAAAuqF,IAAA,CAAA1gF,EAAA,GACAjM,EAAA9f,IAAA,KACA+rB,IAAAnoB,GAAAkc,EAAA9f,IAAA,KACA,KAEA,SACA8f,EAAA9f,IAAA,KACA+rB,EAAA,EACA,KAEA,SACA85E,EAAA,GACA95E,EAAA,CAEA,CAEAmrE,EAAAsV,EAAA,CACA,CAMA,OALA3kF,IACAg+E,GAAA/lF,EAAA9f,IAAA,KACAwvB,GAAA1P,EAAA9f,IAAA,CAAAwvB,GACA1P,EAAA9f,IAAA,QAEA8f,CACA,GI/EuB8xC,ED4I0D8wB,EAAA,MCnIjF,CACA,iBCiBO,SAAAgqB,GAAAjpG,CAAA,EAEP,IAAA+iB,EAAA,GACAmB,EAAA,GACA9lB,EAAA,EACA8qG,EAAA,EACA,OAAAhlF,EAAAlkB,EAAA9B,MAAA,GACA,IAAA+E,EAAAjD,EAAA1B,UAAA,CAAA4lB,GAEAjJ,EAAA,GAGA,GACAhY,KAAAA,GACM,GAAAmiF,GAAA4V,EAAA,EAAiBh7F,EAAA1B,UAAA,CAAA4lB,EAAA,KACjB,GAAAkhE,GAAA4V,EAAA,EAAiBh7F,EAAA1B,UAAA,CAAA4lB,EAAA,IAEvBglF,EAAA,OAGA,GAAAjmG,EAAA,IACA,oBAAmBvD,IAAA,CAAAb,OAAAC,YAAA,CAAAmE,KACnBgY,CAAAA,EAAApc,OAAAC,YAAA,CAAAmE,EAAA,OAIA,GAAAA,EAAA,OAAAA,EAAA,OACA,IAAA9C,EAAAH,EAAA1B,UAAA,CAAA4lB,EAAA,EAGAjhB,CAAAA,EAAA,OAAA9C,EAAA,OAAAA,EAAA,OACA8a,EAAApc,OAAAC,YAAA,CAAAmE,EAAA9C,GACA+oG,EAAA,GAIAjuF,EAAA,GAEA,MAGAA,EAAApc,OAAAC,YAAA,CAAAmE,GAEAgY,IACA8H,EAAAxmB,IAAA,CAAAyD,EAAAvB,KAAA,CAAAL,EAAA8lB,GAAAilF,mBAAAluF,IACA7c,EAAA8lB,EAAAglF,EAAA,EACAjuF,EAAA,IAEAiuF,IACAhlF,GAAAglF,EACAA,EAAA,EAEA,CACA,OAAAnmF,EAAA1H,IAAA,KAAArb,EAAAvB,KAAA,CAAAL,EACA,CCjCO,SAAAgrG,GAAAvuE,CAAA,CAAAwuE,CAAA,EAEP,IAAAtmF,EAAA,EAAmB7lB,KAAA,OAAA8C,MAAA,KAAyB,CAW5C,OATAqpG,EAAA,GACAtmF,EAAAxmB,IAAA,EACAW,KAAA,UACA8oB,QAAA,MACAC,WAAA,GACA3jB,SAAA,EAAkBpF,KAAA,OAAA8C,MAAAnB,OAAAwqG,EAAA,EAA8C,GAIhEtmF,CACA,CAaO,SAAAumF,GAAAC,CAAA,CAAAF,CAAA,EACP,MACA,qBACAE,CAAAA,EAAA,GACAF,CAAAA,EAAA,MAAAA,EAAA,GAEA,iBCpFO,IAAAvlB,GAAiB0lB,GAAK,OAUtB3lB,GAAmB2lB,GAAK,SAU/B,SAASA,GAAKtsG,CAAA,EACd,OAQA,SAAA4C,CAAA,EACA,IAAA07E,EAAA,GAAA17E,EAAA4oB,QAAA,EAAA5oB,EAAA4oB,QAAA,CAAAxrB,EAAA,KAEA,GACA,iBAAAs+E,EAAA7yD,IAAA,EACA6yD,EAAA7yD,IAAA,IACA,iBAAA6yD,EAAAlzD,MAAA,EACAkzD,EAAAlzD,MAAA,GAEA,OACAK,KAAA6yD,EAAA7yD,IAAA,CACAL,OAAAkzD,EAAAlzD,MAAA,CACA/U,OACA,iBAAAioE,EAAAjoE,MAAA,EAAAioE,EAAAjoE,MAAA,IACAioE,EAAAjoE,MAAA,CACA4F,KAAAA,CACA,CAEA,CACA,CAUO,SAASswF,GAAQ3pG,CAAA,EACxB,IAAA1B,EAAAylF,GAAA/jF,GACAskB,EAAA0/D,GAAAhkF,GAEA,GAAA1B,GAAAgmB,EACA,OAAYhmB,MAAAA,EAAAgmB,IAAAA,CAAA,CAEZ,CSxEO,SAAAslF,GAAA5oB,CAAA,CAAAhhF,CAAA,EACP,IAAA6pG,EAAA7pG,EAAAukG,aAAA,CACAnwC,EAAA,IAQA,GANAy1C,cAAAA,EACAz1C,GAAA,KACI,SAAAy1C,GACJz1C,CAAAA,GAAA,IAAAp0D,CAAAA,EAAA8pC,KAAA,EAAA9pC,EAAA2iD,UAAA,OAGA3iD,mBAAAA,EAAA5C,IAAA,CACA,QAAaA,KAAA,OAAA8C,MAAA,KAAAF,EAAA8mC,GAAA,CAAAstB,CAAA,EAA8C,CAG3D,IAAAzxD,EAAAq+E,EAAAngD,GAAA,CAAA7gC,GACAq/B,EAAA18B,CAAA,IAEA08B,GAAAA,SAAAA,EAAAjiC,IAAA,CACAiiC,EAAAn/B,KAAA,KAAAm/B,EAAAn/B,KAAA,CAEAyC,EAAAghB,OAAA,EAAsBvmB,KAAA,OAAA8C,MAAA,MAGtB,IAAAggC,EAAAv9B,CAAA,CAAAA,EAAAvE,MAAA,IAQA,OANA8hC,GAAAA,SAAAA,EAAA9iC,IAAA,CACA8iC,EAAAhgC,KAAA,EAAAk0D,EAEAzxD,EAAAlG,IAAA,EAAmBW,KAAA,OAAA8C,MAAAk0D,CAAA,GAGnBzxD,CACA,CMgEA,SAAAmnG,GAAA9pG,CAAA,EACA,IAAAu3D,EAAAv3D,EAAAu3D,MAAA,CAEA,OAAAA,MAAAA,EACAv3D,EAAAwC,QAAA,CAAApE,MAAA,GACAm5D,CACA,CQ/EA,SAAAwyC,GAAA7pG,CAAA,CAAA5B,CAAA,CAAAgmB,CAAA,EACA,IAAA0jF,EAAA,EACAE,EAAAhoG,EAAA9B,MAAA,CAEA,GAAAE,EAAA,CACA,IAAA6E,EAAAjD,EAAA28E,WAAA,CAAAmrB,GAEA,KAAA7kG,IAAAA,GAAAA,KAAAA,GACA6kG,IACA7kG,EAAAjD,EAAA28E,WAAA,CAAAmrB,EAEA,CAEA,GAAA1jF,EAAA,CACA,IAAAnhB,EAAAjD,EAAA28E,WAAA,CAAAqrB,EAAA,GAEA,KAAA/kG,IAAAA,GAAAA,KAAAA,GACA+kG,IACA/kG,EAAAjD,EAAA28E,WAAA,CAAAqrB,EAAA,EAEA,CAEA,OAAAA,EAAAF,EAAA9nG,EAAAvB,KAAA,CAAAqpG,EAAAE,GAAA,EACA,CGvCO,IAAM8B,GAAQ,CACrBprC,WzBXO,SAAAoiB,CAAA,CAAAhhF,CAAA,EAEP,IAAAijB,EAAA,CACA7lB,KAAA,UACA8oB,QAAA,aACAC,WAAA,GACA3jB,SAAAw+E,EAAApvC,IAAA,CAAAovC,EAAAngD,GAAA,CAAA7gC,GAAA,GACA,EAEA,OADAghF,EAAAipB,KAAA,CAAAjqG,EAAAijB,GACA+9D,EAAAkpB,SAAA,CAAAlqG,EAAAijB,EACA,EyBEAknF,MxBXO,SAAAnpB,CAAA,CAAAhhF,CAAA,EAEP,IAAAijB,EAAA,CAAkB7lB,KAAA,UAAA8oB,QAAA,KAAAC,WAAA,GAA8C3jB,SAAA,IAEhE,OADAw+E,EAAAipB,KAAA,CAAAjqG,EAAAijB,GACA,CAAA+9D,EAAAkpB,SAAA,CAAAlqG,EAAAijB,GAAA,CAA0C7lB,KAAA,OAAA8C,MAAA,MAA0B,EwBQpEiD,KvBZO,SAAA69E,CAAA,CAAAhhF,CAAA,EACP,IAAAE,EAAAF,EAAAE,KAAA,CAAAF,EAAAE,KAAA,SAEAimB,EAAA,EAEAnmB,CAAAA,EAAA+S,IAAA,EACAoT,CAAAA,EAAAF,SAAA,cAAAjmB,EAAA+S,IAAA,GAKA,IAAAkQ,EAAA,CACA7lB,KAAA,UACA8oB,QAAA,OACAC,WAAAA,EACA3jB,SAAA,EAAgBpF,KAAA,OAAA8C,MAAAA,CAAA,EAAoB,EAapC,OAVAF,EAAA66F,IAAA,EACA53E,CAAAA,EAAAuJ,IAAA,EAAmBquE,KAAA76F,EAAA66F,IAAA,GAGnB7Z,EAAAipB,KAAA,CAAAjqG,EAAAijB,GAIAA,EAAA,CAAY7lB,KAAA,UAAA8oB,QAAA,MAAAC,WAAA,GAA+C3jB,SAAA,CAH3DygB,EAAA+9D,EAAAkpB,SAAA,CAAAlqG,EAAAijB,GAG2D,EAC3D+9D,EAAAipB,KAAA,CAAAjqG,EAAAijB,GACAA,CACA,EuBhBAmnF,OtBdO,SAAAppB,CAAA,CAAAhhF,CAAA,EAEP,IAAAijB,EAAA,CACA7lB,KAAA,UACA8oB,QAAA,MACAC,WAAA,GACA3jB,SAAAw+E,EAAAngD,GAAA,CAAA7gC,EACA,EAEA,OADAghF,EAAAipB,KAAA,CAAAjqG,EAAAijB,GACA+9D,EAAAkpB,SAAA,CAAAlqG,EAAAijB,EACA,EsBKA6sD,SrBfO,SAAAkR,CAAA,CAAAhhF,CAAA,EAEP,IAAAijB,EAAA,CACA7lB,KAAA,UACA8oB,QAAA,KACAC,WAAA,GACA3jB,SAAAw+E,EAAAngD,GAAA,CAAA7gC,EACA,EAEA,OADAghF,EAAAipB,KAAA,CAAAjqG,EAAAijB,GACA+9D,EAAAkpB,SAAA,CAAAlqG,EAAAijB,EACA,EqBMAonF,kBpBjBO,SAAArpB,CAAA,CAAAhhF,CAAA,MASP+4D,EARA,IAAAuxC,EACA,iBAAAtpB,EAAAtjF,OAAA,CAAA4sG,aAAA,CACAtpB,EAAAtjF,OAAA,CAAA4sG,aAAA,CACA,gBACAtkF,EAAAjnB,OAAAiB,EAAA2iD,UAAA,EAAApoC,WAAA,GACAgwF,EAAiBpB,GAAYnjF,EAAArN,WAAA,IAC7ByL,EAAA48D,EAAAwpB,aAAA,CAAAnmF,OAAA,CAAA2B,GAIAykF,EAAAzpB,EAAA0pB,cAAA,CAAAjvG,GAAA,CAAAuqB,EAEAykF,MAAApxF,IAAAoxF,GACAA,EAAA,EACAzpB,EAAAwpB,aAAA,CAAA/tG,IAAA,CAAAupB,GACA+yC,EAAAioB,EAAAwpB,aAAA,CAAApsG,MAAA,EAEA26D,EAAA30C,EAAA,EAGAqmF,GAAA,EACAzpB,EAAA0pB,cAAA,CAAAztG,GAAA,CAAA+oB,EAAAykF,GAGA,IAAA1mF,EAAA,CACA3mB,KAAA,UACA8oB,QAAA,IACAC,WAAA,CACAuR,KAAA,IAAA4yE,EAAA,MAAAC,EACAvkF,GACAskF,EACA,SACAC,EACAE,CAAAA,EAAA,MAAAA,EAAA,IACAE,gBAAA,GACApnE,gBAAA,oBAEA/gC,SAAA,EAAgBpF,KAAA,OAAA8C,MAAAnB,OAAAg6D,EAAA,EAAqC,EAErDioB,EAAAipB,KAAA,CAAAjqG,EAAA+jB,GAGA,IAAA5R,EAAA,CACA/U,KAAA,UACA8oB,QAAA,MACAC,WAAA,GACA3jB,SAAA,CAAAuhB,EAAA,EAGA,OADAi9D,EAAAipB,KAAA,CAAAjqG,EAAAmS,GACA6uE,EAAAkpB,SAAA,CAAAlqG,EAAAmS,EACA,EoBjCA6qD,QnBjBO,SAAAgkB,CAAA,CAAAhhF,CAAA,EAEP,IAAAijB,EAAA,CACA7lB,KAAA,UACA8oB,QAAA,IAAAlmB,EAAAihF,KAAA,CACA96D,WAAA,GACA3jB,SAAAw+E,EAAAngD,GAAA,CAAA7gC,EACA,EAEA,OADAghF,EAAAipB,KAAA,CAAAjqG,EAAAijB,GACA+9D,EAAAkpB,SAAA,CAAAlqG,EAAAijB,EACA,EmBQA2E,KlBhBO,SAAAo5D,CAAA,CAAAhhF,CAAA,EACP,GAAAghF,EAAAtjF,OAAA,CAAAktG,kBAAA,EAEA,IAAA3nF,EAAA,CAAoB7lB,KAAA,MAAA8C,MAAAF,EAAAE,KAAA,EAEpB,OADA8gF,EAAAipB,KAAA,CAAAjqG,EAAAijB,GACA+9D,EAAAkpB,SAAA,CAAAlqG,EAAAijB,EACA,CAGA,EkBQA4nF,ehBjBO,SAAA7pB,CAAA,CAAAhhF,CAAA,EACP,IAAAgmB,EAAAjnB,OAAAiB,EAAA2iD,UAAA,EAAApoC,WAAA,GACA46B,EAAA6rC,EAAA8pB,cAAA,CAAArvG,GAAA,CAAAuqB,GAEA,IAAAmvB,EACA,OAAWy0D,GAAM5oB,EAAAhhF,GAIjB,IAAAmmB,EAAA,CAAsBb,IAAK6jF,GAAYh0D,EAAAuO,GAAA,MAAA5c,IAAA9mC,EAAA8mC,GAAA,CAEvC,QAAAqO,EAAA9hB,KAAA,EAAA8hB,KAAA97B,IAAA87B,EAAA9hB,KAAA,EACAlN,CAAAA,EAAAkN,KAAA,CAAA8hB,EAAA9hB,KAAA,EAIA,IAAApQ,EAAA,CAAkB7lB,KAAA,UAAA8oB,QAAA,MAAAC,WAAAA,EAAA3jB,SAAA,IAElB,OADAw+E,EAAAipB,KAAA,CAAAjqG,EAAAijB,GACA+9D,EAAAkpB,SAAA,CAAAlqG,EAAAijB,EACA,EgBDA3T,MfpBO,SAAc0xE,CAAA,CAAAhhF,CAAA,EAErB,IAAAmmB,EAAA,CAAsBb,IAAK6jF,GAAYnpG,EAAA0jD,GAAA,EAEvC,QAAA1jD,EAAA8mC,GAAA,EAAA9mC,KAAAqZ,IAAArZ,EAAA8mC,GAAA,EACA3gB,CAAAA,EAAA2gB,GAAA,CAAA9mC,EAAA8mC,GAAA,EAGA,OAAA9mC,EAAAqzB,KAAA,EAAArzB,KAAAqZ,IAAArZ,EAAAqzB,KAAA,EACAlN,CAAAA,EAAAkN,KAAA,CAAArzB,EAAAqzB,KAAA,EAIA,IAAApQ,EAAA,CAAkB7lB,KAAA,UAAA8oB,QAAA,MAAAC,WAAAA,EAAA3jB,SAAA,IAElB,OADAw+E,EAAAipB,KAAA,CAAAjqG,EAAAijB,GACA+9D,EAAAkpB,SAAA,CAAAlqG,EAAAijB,EACA,EeKA8nF,WdpBO,SAAA/pB,CAAA,CAAAhhF,CAAA,EAEP,IAAA05B,EAAA,CAAgBt8B,KAAA,OAAA8C,MAAAF,EAAAE,KAAA,CAAAib,OAAA,mBAChB6lE,EAAAipB,KAAA,CAAAjqG,EAAA05B,GAGA,IAAAzW,EAAA,CACA7lB,KAAA,UACA8oB,QAAA,OACAC,WAAA,GACA3jB,SAAA,CAAAk3B,EAAA,EAGA,OADAsnD,EAAAipB,KAAA,CAAAjqG,EAAAijB,GACA+9D,EAAAkpB,SAAA,CAAAlqG,EAAAijB,EACA,EcOA+nF,cbpBO,SAAAhqB,CAAA,CAAAhhF,CAAA,EACP,IAAAgmB,EAAAjnB,OAAAiB,EAAA2iD,UAAA,EAAApoC,WAAA,GACA46B,EAAA6rC,EAAA8pB,cAAA,CAAArvG,GAAA,CAAAuqB,GAEA,IAAAmvB,EACA,OAAWy0D,GAAM5oB,EAAAhhF,GAIjB,IAAAmmB,EAAA,CAAsBuR,KAAMyxE,GAAYh0D,EAAAuO,GAAA,MAExC,QAAAvO,EAAA9hB,KAAA,EAAA8hB,KAAA97B,IAAA87B,EAAA9hB,KAAA,EACAlN,CAAAA,EAAAkN,KAAA,CAAA8hB,EAAA9hB,KAAA,EAIA,IAAApQ,EAAA,CACA7lB,KAAA,UACA8oB,QAAA,IACAC,WAAAA,EACA3jB,SAAAw+E,EAAAngD,GAAA,CAAA7gC,EACA,EAEA,OADAghF,EAAAipB,KAAA,CAAAjqG,EAAAijB,GACA+9D,EAAAkpB,SAAA,CAAAlqG,EAAAijB,EACA,EaHAc,KZvBO,SAAai9D,CAAA,CAAAhhF,CAAA,EAEpB,IAAAmmB,EAAA,CAAsBuR,KAAMyxE,GAAYnpG,EAAA0jD,GAAA,EAExC,QAAA1jD,EAAAqzB,KAAA,EAAArzB,KAAAqZ,IAAArZ,EAAAqzB,KAAA,EACAlN,CAAAA,EAAAkN,KAAA,CAAArzB,EAAAqzB,KAAA,EAIA,IAAApQ,EAAA,CACA7lB,KAAA,UACA8oB,QAAA,IACAC,WAAAA,EACA3jB,SAAAw+E,EAAAngD,GAAA,CAAA7gC,EACA,EAEA,OADAghF,EAAAipB,KAAA,CAAAjqG,EAAAijB,GACA+9D,EAAAkpB,SAAA,CAAAlqG,EAAAijB,EACA,EYOA+gF,SXnBO,SAAAhjB,CAAA,CAAAhhF,CAAA,CAAAujB,CAAA,EACP,IAAAxG,EAAAikE,EAAAngD,GAAA,CAAA7gC,GACAirG,EAAA1nF,EAAA2nF,SAyEAlrG,CAAA,EACA,IAAAirG,EAAA,GACA,GAAAjrG,SAAAA,EAAA5C,IAAA,EACA6tG,EAAAjrG,EAAAu3D,MAAA,KACA,IAAA/0D,EAAAxC,EAAAwC,QAAA,CACA4hB,EAAA,GAEA,MAAA6mF,GAAA,EAAA7mF,EAAA5hB,EAAApE,MAAA,EACA6sG,EAAAnB,GAAAtnG,CAAA,CAAA4hB,EAAA,CAEA,CAEA,OAAA6mF,CACA,EAtFA1nF,GAAAumF,GAAA9pG,GAEAmmB,EAAA,GAEA3jB,EAAA,GAEA,qBAAAxC,EAAAusB,OAAA,MAGAmtE,EAFA,IAAAr6D,EAAAtiB,CAAA,IAIAsiB,GAAAA,YAAAA,EAAAjiC,IAAA,EAAAiiC,MAAAA,EAAAnZ,OAAA,CACAwzE,EAAAr6D,GAEAq6D,EAAA,CAAmBt8F,KAAA,UAAA8oB,QAAA,IAAAC,WAAA,GAA6C3jB,SAAA,IAChEua,EAAA4G,OAAA,CAAA+1E,IAGAA,EAAAl3F,QAAA,CAAApE,MAAA,IACAs7F,EAAAl3F,QAAA,CAAAmhB,OAAA,EAAkCvmB,KAAA,OAAA8C,MAAA,MAGlCw5F,EAAAl3F,QAAA,CAAAmhB,OAAA,EACAvmB,KAAA,UACA8oB,QAAA,QACAC,WAAA,CAAmB/oB,KAAA,WAAAmvB,QAAAvsB,EAAAusB,OAAA,CAAA0b,SAAA,IACnBzlC,SAAA,KAKA2jB,EAAAF,SAAA,oBAGA,IAAA7B,EAAA,GAEA,OAAAA,EAAArH,EAAA3e,MAAA,GACA,IAAAo8C,EAAAz9B,CAAA,CAAAqH,EAAA,CAIA6mF,CAAAA,GACA7mF,IAAAA,GACAo2B,YAAAA,EAAAp9C,IAAA,EACAo9C,MAAAA,EAAAt0B,OAAA,GAEA1jB,EAAA/F,IAAA,EAAqBW,KAAA,OAAA8C,MAAA,OAGrBs6C,YAAAA,EAAAp9C,IAAA,EAAAo9C,MAAAA,EAAAt0B,OAAA,EAAA+kF,EAGAzoG,EAAA/F,IAAA,CAAA+9C,GAFAh4C,EAAA/F,IAAA,IAAA+9C,EAAAh4C,QAAA,CAIA,CAEA,IAAA09B,EAAAnjB,CAAA,CAAAA,EAAA3e,MAAA,IAGA8hC,GAAA+qE,CAAAA,GAAA/qE,YAAAA,EAAA9iC,IAAA,EAAA8iC,MAAAA,EAAAha,OAAA,GACA1jB,EAAA/F,IAAA,EAAmBW,KAAA,OAAA8C,MAAA,OAInB,IAAA+iB,EAAA,CAAkB7lB,KAAA,UAAA8oB,QAAA,KAAAC,WAAAA,EAAA3jB,SAAAA,CAAA,EAElB,OADAw+E,EAAAipB,KAAA,CAAAjqG,EAAAijB,GACA+9D,EAAAkpB,SAAA,CAAAlqG,EAAAijB,EACA,EWjDAyd,KVxBO,SAAasgD,CAAA,CAAAhhF,CAAA,EAEpB,IAAAmmB,EAAA,GACApJ,EAAAikE,EAAAngD,GAAA,CAAA7gC,GACAokB,EAAA,GAOA,IALA,iBAAApkB,EAAA1B,KAAA,EAAA0B,IAAAA,EAAA1B,KAAA,EACA6nB,CAAAA,EAAA7nB,KAAA,CAAA0B,EAAA1B,KAAA,EAIA,EAAA8lB,EAAArH,EAAA3e,MAAA,GACA,IAAAo8C,EAAAz9B,CAAA,CAAAqH,EAAA,CAEA,GACAo2B,YAAAA,EAAAp9C,IAAA,EACAo9C,OAAAA,EAAAt0B,OAAA,EACAs0B,EAAAr0B,UAAA,EACA9K,MAAAC,OAAA,CAAAk/B,EAAAr0B,UAAA,CAAAF,SAAA,GACAu0B,EAAAr0B,UAAA,CAAAF,SAAA,CAAAiJ,QAAA,mBACA,CACA/I,EAAAF,SAAA,wBACA,KACA,CACA,CAGA,IAAAhD,EAAA,CACA7lB,KAAA,UACA8oB,QAAAlmB,EAAA+mG,OAAA,WACA5gF,WAAAA,EACA3jB,SAAAw+E,EAAApvC,IAAA,CAAA70B,EAAA,GACA,EAEA,OADAikE,EAAAipB,KAAA,CAAAjqG,EAAAijB,GACA+9D,EAAAkpB,SAAA,CAAAlqG,EAAAijB,EACA,EUVAy2E,UT1BO,SAAA1Y,CAAA,CAAAhhF,CAAA,EAEP,IAAAijB,EAAA,CACA7lB,KAAA,UACA8oB,QAAA,IACAC,WAAA,GACA3jB,SAAAw+E,EAAAngD,GAAA,CAAA7gC,EACA,EAEA,OADAghF,EAAAipB,KAAA,CAAAjqG,EAAAijB,GACA+9D,EAAAkpB,SAAA,CAAAlqG,EAAAijB,EACA,ESkBAka,KR3BO,SAAA6jD,CAAA,CAAAhhF,CAAA,EAEP,IAAAijB,EAAA,CAAkB7lB,KAAA,OAAAoF,SAAAw+E,EAAApvC,IAAA,CAAAovC,EAAAngD,GAAA,CAAA7gC,GAAA,EAElB,OADAghF,EAAAipB,KAAA,CAAAjqG,EAAAijB,GACA+9D,EAAAkpB,SAAA,CAAAlqG,EAAAijB,EACA,EQuBA2hF,OP7BO,SAAA5jB,CAAA,CAAAhhF,CAAA,EAEP,IAAAijB,EAAA,CACA7lB,KAAA,UACA8oB,QAAA,SACAC,WAAA,GACA3jB,SAAAw+E,EAAAngD,GAAA,CAAA7gC,EACA,EAEA,OADAghF,EAAAipB,KAAA,CAAAjqG,EAAAijB,GACA+9D,EAAAkpB,SAAA,CAAAlqG,EAAAijB,EACA,EOoBAmgC,MN/BO,SAAA49B,CAAA,CAAAhhF,CAAA,EACP,IAAAswC,EAAA0wC,EAAAngD,GAAA,CAAA7gC,GACAmrG,EAAA76D,EAAAmyC,KAAA,GAEA2oB,EAAA,GAEA,GAAAD,EAAA,CAEA,IAAA9rE,EAAA,CACAjiC,KAAA,UACA8oB,QAAA,QACAC,WAAA,GACA3jB,SAAAw+E,EAAApvC,IAAA,EAAAu5D,EAAA,IACA,EACAnqB,EAAAipB,KAAA,CAAAjqG,EAAAwC,QAAA,IAAA68B,GACA+rE,EAAA3uG,IAAA,CAAA4iC,EACA,CAEA,GAAAiR,EAAAlyC,MAAA,IAEA,IAAA8kF,EAAA,CACA9lF,KAAA,UACA8oB,QAAA,QACAC,WAAA,GACA3jB,SAAAw+E,EAAApvC,IAAA,CAAAtB,EAAA,GACA,EAEAhyC,EAAkBylF,GAAU/jF,EAAAwC,QAAA,KAC5B8hB,EAAgB0/D,GAAQhkF,EAAAwC,QAAA,CAAAxC,EAAAwC,QAAA,CAAApE,MAAA,KACxBE,GAAAgmB,GAAA4+D,CAAAA,EAAAt6D,QAAA,EAAuCtqB,MAAAA,EAAAgmB,IAAAA,CAAA,GACvC8mF,EAAA3uG,IAAA,CAAAymF,EACA,CAGA,IAAAjgE,EAAA,CACA7lB,KAAA,UACA8oB,QAAA,QACAC,WAAA,GACA3jB,SAAAw+E,EAAApvC,IAAA,CAAAw5D,EAAA,GACA,EAEA,OADApqB,EAAAipB,KAAA,CAAAjqG,EAAAijB,GACA+9D,EAAAkpB,SAAA,CAAAlqG,EAAAijB,EACA,EMVAw7C,UJ/BO,SAAAuiB,CAAA,CAAAhhF,CAAA,EAIP,IAAAijB,EAAA,CACA7lB,KAAA,UACA8oB,QAAA,KACAC,WAAA,GACA3jB,SAAAw+E,EAAAngD,GAAA,CAAA7gC,EACA,EAEA,OADAghF,EAAAipB,KAAA,CAAAjqG,EAAAijB,GACA+9D,EAAAkpB,SAAA,CAAAlqG,EAAAijB,EACA,EIoBAstC,SL3BO,SAAAywB,CAAA,CAAAhhF,CAAA,CAAAujB,CAAA,EACP,IAAAojF,EAAApjF,EAAAA,EAAA/gB,QAAA,CAAA6W,KAAAA,EAGA6M,EAAAmlF,IADA1E,CAAAA,EAAAA,EAAAtiF,OAAA,CAAArkB,GAAA,GACA,UAEA6xC,EAAAtuB,GAAAA,UAAAA,EAAAnmB,IAAA,CAAAmmB,EAAAsuB,KAAA,CAAAx4B,KAAAA,EACAjb,EAAAyzC,EAAAA,EAAAzzC,MAAA,CAAA4B,EAAAwC,QAAA,CAAApE,MAAA,CACAktG,EAAA,GAEAC,EAAA,GAEA,OAAAD,EAAAltG,GAAA,CAEA,IAAA4wD,EAAAhvD,EAAAwC,QAAA,CAAA8oG,EAAA,CAEAnlF,EAAA,GACAqlF,EAAA35D,EAAAA,CAAA,CAAAy5D,EAAA,CAAAjyF,KAAAA,EAEAmyF,GACArlF,CAAAA,EAAA0rB,KAAA,CAAA25D,CAAA,EAIA,IAAAvoF,EAAA,CAAkB7lB,KAAA,UAAA8oB,QAAAA,EAAAC,WAAAA,EAAA3jB,SAAA,IAElBwsD,IACA/rC,EAAAzgB,QAAA,CAAAw+E,EAAAngD,GAAA,CAAAmuB,GACAgyB,EAAAipB,KAAA,CAAAj7C,EAAA/rC,GACAA,EAAA+9D,EAAAkpB,SAAA,CAAAl7C,EAAA/rC,IAGAsoF,EAAA9uG,IAAA,CAAAwmB,EACA,CAGA,IAAAA,EAAA,CACA7lB,KAAA,UACA8oB,QAAA,KACAC,WAAA,GACA3jB,SAAAw+E,EAAApvC,IAAA,CAAA25D,EAAA,GACA,EAEA,OADAvqB,EAAAipB,KAAA,CAAAjqG,EAAAijB,GACA+9D,EAAAkpB,SAAA,CAAAlqG,EAAAijB,EACA,EKhBAyW,KFjCO,SAAasnD,CAAA,CAAAhhF,CAAA,EAEpB,IAAAijB,EAAA,CAAkB7lB,KAAA,OAAA8C,MAAqBurG,SDThCvrG,CAAA,EACP,IAAA6oB,EAAAhqB,OAAAmB,GACA6lB,EAAA,YACA1I,EAAA0I,EAAA/I,IAAA,CAAA+L,GACA2iF,EAAA,EAEAhjF,EAAA,GAEA,KAAArL,GACAqL,EAAAjsB,IAAA,CACAstG,GAAAhhF,EAAApqB,KAAA,CAAA+sG,EAAAruF,EAAA+G,KAAA,EAAAsnF,EAAA,MACAruF,CAAA,KAGAquF,EAAAruF,EAAA+G,KAAA,CAAA/G,CAAA,IAAAjf,MAAA,CACAif,EAAA0I,EAAA/I,IAAA,CAAA+L,GAKA,OAFAL,EAAAjsB,IAAA,CAAAstG,GAAAhhF,EAAApqB,KAAA,CAAA+sG,GAAAA,EAAA,OAEAhjF,EAAAnN,IAAA,IACA,ECZgDxc,OAAAiB,EAAAE,KAAA,IAEhD,OADA8gF,EAAAipB,KAAA,CAAAjqG,EAAAijB,GACA+9D,EAAAkpB,SAAA,CAAAlqG,EAAAijB,EACA,EE6BAk0E,cDlCO,SAAsBnW,CAAA,CAAAhhF,CAAA,EAE7B,IAAAijB,EAAA,CACA7lB,KAAA,UACA8oB,QAAA,KACAC,WAAA,GACA3jB,SAAA,IAGA,OADAw+E,EAAAipB,KAAA,CAAAjqG,EAAAijB,GACA+9D,EAAAkpB,SAAA,CAAAlqG,EAAAijB,EACA,ECyBAuqD,KAAAxY,GACA2J,KAAA3J,GACA7f,WAAA6f,GACA22C,mBAAA32C,EACA,EAGA,SAAAA,KAEA,CCoHA,IAAM42C,GAAG,GAAKluF,cAAA,CAGRmuF,GAAY,GAsJlB,SAAA5B,GAAAjmF,CAAA,CAAAC,CAAA,EACAD,EAAA4E,QAAA,EAAA3E,CAAAA,EAAA2E,QAAA,CAAmC+gF,GAAQ3lF,EAAA,CAC3C,CAcA,SAAAkmF,GAAAlmF,CAAA,CAAAC,CAAA,EAEA,IAAAhB,EAAAgB,EAGA,GAAAD,GAAAA,EAAAwI,IAAA,EACA,IAAAs/E,EAAA9nF,EAAAwI,IAAA,CAAAs/E,KAAA,CACAC,EAAA/nF,EAAAwI,IAAA,CAAAu/E,SAAA,CACAC,EAAAhoF,EAAAwI,IAAA,CAAAw/E,WAAA,CAEA,iBAAAF,IAGA7oF,YAAAA,EAAA7lB,IAAA,CACA6lB,EAAAiD,OAAA,CAAA4lF,EAUA7oF,EAAA,CAAkB7lB,KAAA,UAAA8oB,QAAA4lF,EAAA3lF,WAAA,GAA+C3jB,SADjE,aAAAygB,EAAAA,EAAAzgB,QAAA,EAAAygB,EAAA,GAKA,YAAAA,EAAA7lB,IAAA,EAAA4uG,GACA1oG,OAAA0zC,MAAA,CAAA/zB,EAAAkD,UAAA,CAAuC,GAAAoxD,GAAA00B,EAAA,EAAeD,IAItD,aAAA/oF,GACAA,EAAAzgB,QAAA,EAEAupG,MADAA,GAGA9oF,CAAAA,EAAAzgB,QAAA,CAAAupG,CAAA,CAEA,CAEA,OAAA9oF,CACA,CA0CO,SAAA2uB,GAAAtqB,CAAA,CAAA2jF,CAAA,EAEP,IAAAhoF,EAAA,GACAmB,EAAA,GAMA,IAJA6mF,GACAhoF,EAAAxmB,IAAA,EAAiBW,KAAA,OAAA8C,MAAA,OAGjB,EAAAkkB,EAAAkD,EAAAlpB,MAAA,EACAgmB,GAAAnB,EAAAxmB,IAAA,EAA4BW,KAAA,OAAA8C,MAAA,OAC5B+iB,EAAAxmB,IAAA,CAAA6qB,CAAA,CAAAlD,EAAA,EAOA,OAJA6mF,GAAA3jF,EAAAlpB,MAAA,IACA6kB,EAAAxmB,IAAA,EAAiBW,KAAA,OAAA8C,MAAA,OAGjB+iB,CACA,CAUA,SAAAipF,GAAAhsG,CAAA,EACA,IAAAkkB,EAAA,EACAjhB,EAAAjD,EAAA1B,UAAA,CAAA4lB,GAEA,KAAAjhB,IAAAA,GAAAA,KAAAA,GACAihB,IACAjhB,EAAAjD,EAAA1B,UAAA,CAAA4lB,GAGA,OAAAlkB,EAAAvB,KAAA,CAAAylB,EACA,CCjYO,SAAA+nF,GAAAnuD,CAAA,CAAAtgD,CAAA,EACP,IAAAsjF,EAAgBorB,SD0GTpuD,CAAA,CAAAtgD,CAAA,EACP,IAAAg7B,EAAAh7B,GAA8BmuG,GAE9Bf,EAAA,IAAA92F,IAEAq4F,EAAA,IAAAr4F,IASAgtE,EAAA,CACAngD,IA0EA,SAAAtd,CAAA,EAEA,IAAAY,EAAA,GAEA,gBAAAZ,EAAA,CACA,IAAA+D,EAAA/D,EAAA/gB,QAAA,CACA4hB,EAAA,GACA,OAAAA,EAAAkD,EAAAlpB,MAAA,GACA,IAAA6kB,EAAA+9D,EAAAjJ,GAAA,CAAAzwD,CAAA,CAAAlD,EAAA,CAAAb,GAGA,GAAAN,EAAA,CACA,GAAAmB,GAAAkD,UAAAA,CAAA,CAAAlD,EAAA,GAAAhnB,IAAA,GACAie,MAAAC,OAAA,CAAA2H,IAAAA,SAAAA,EAAA7lB,IAAA,EACA6lB,CAAAA,EAAA/iB,KAAA,CAAAgsG,GAAAjpF,EAAA/iB,KAAA,GAGA,CAAAmb,MAAAC,OAAA,CAAA2H,IAAAA,YAAAA,EAAA7lB,IAAA,GACA,IAAAiiC,EAAApc,EAAAzgB,QAAA,IAEA68B,GAAAA,SAAAA,EAAAjiC,IAAA,EACAiiC,CAAAA,EAAAn/B,KAAA,CAAAgsG,GAAA7sE,EAAAn/B,KAAA,EAEA,CAGAmb,MAAAC,OAAA,CAAA2H,GACAkB,EAAA1nB,IAAA,IAAAwmB,GAEAkB,EAAA1nB,IAAA,CAAAwmB,EAEA,CACA,CACA,CAEA,OAAAkB,CACA,EA7GA+lF,UAAAA,GACAY,eAAAA,EACAuB,aAAAA,EACA3B,eAZA,IAAA12F,IAaAw2F,cAAA,GACA5a,SAVA,CAAoB,GAAGoa,EAAe,IAAAtxE,EAAAk3D,QAAA,EAWtC7X,IAgCA,SAAA/3E,CAAA,CAAAujB,CAAA,EACA,IAAAnmB,EAAA4C,EAAA5C,IAAA,CACA40F,EAAAhR,EAAA4O,QAAA,CAAAxyF,EAAA,CAEA,GAAQwuG,GAAGlyF,IAAA,CAAAsnE,EAAA4O,QAAA,CAAAxyF,IAAA40F,EACX,OAAAA,EAAAhR,EAAAhhF,EAAAujB,GAGA,GAAAy9D,EAAAtjF,OAAA,CAAA4uG,WAAA,EAAAtrB,EAAAtjF,OAAA,CAAA4uG,WAAA,CAAAp9E,QAAA,CAAA9xB,GAAA,CACA,gBAAA4C,EAAA,CACA,IAAewC,SAAAA,CAAA,IAAA+pG,EAAA,CAAsBvsG,EACrCijB,EAAuB,GAAAs0D,GAAA00B,EAAA,EAAeM,GAItC,OAFAtpF,EAAAzgB,QAAA,CAAAw+E,EAAAngD,GAAA,CAAA7gC,GAEAijB,CACA,CAGA,MAAa,GAAAs0D,GAAA00B,EAAA,EAAejsG,EAC5B,CAIA,MAAAwsG,CAFAxrB,EAAAtjF,OAAA,CAAA+uG,cAAA,EAqIA,SAAAzrB,CAAA,CAAAhhF,CAAA,EACA,IAAAwsB,EAAAxsB,EAAAwsB,IAAA,KAEAvJ,EACA,UAAAjjB,GACA,CAAM4rG,CAAAA,GAAGlyF,IAAA,CAAA8S,EAAA,gBAA8Bo/E,GAAGlyF,IAAA,CAAA8S,EAAA,cAC1C,CAASpvB,KAAA,OAAA8C,MAAAF,EAAAE,KAAA,EACT,CACA9C,KAAA,UACA8oB,QAAA,MACAC,WAAA,GACA3jB,SAAAw+E,EAAAngD,GAAA,CAAA7gC,EACA,EAGA,OADAghF,EAAAipB,KAAA,CAAAjqG,EAAAijB,GACA+9D,EAAAkpB,SAAA,CAAAlqG,EAAAijB,EACA,CArJA,EAEA+9D,EAAAhhF,EAAAujB,EACA,EAxDA7lB,QAAAg7B,EACAuxE,MAAAA,GACAr4D,KAAAA,EACA,EAgBA,MAdE,GAAA86D,GAAAC,EAAA,EAAK3uD,EAAA,SAAAh+C,CAAA,EACP,GAAAA,eAAAA,EAAA5C,IAAA,EAAA4C,uBAAAA,EAAA5C,IAAA,EACA,IAAA4kB,EAAAhiB,eAAAA,EAAA5C,IAAA,CAAA0tG,EAAAuB,EACArmF,EAAAjnB,OAAAiB,EAAA2iD,UAAA,EAAApoC,WAAA,GAIAyH,EAAA1H,GAAA,CAAA0L,IAEAhE,EAAA/kB,GAAA,CAAA+oB,EAAAhmB,EAEA,CACA,GAEAghF,CAoFA,ECxO2BhjC,EAAAtgD,GAC3BsC,EAAAghF,EAAAjJ,GAAA,CAAA/5B,EAAA3kC,KAAAA,GACAuzF,EAAeC,S7BkCR7rB,CAAA,EACP,IAAAspB,EACA,iBAAAtpB,EAAAtjF,OAAA,CAAA4sG,aAAA,CACAtpB,EAAAtjF,OAAA,CAAA4sG,aAAA,CACA,gBACAwC,EACA9rB,EAAAtjF,OAAA,CAAAovG,mBAAA,EAAAxD,GACAyD,EACA/rB,EAAAtjF,OAAA,CAAAqvG,iBAAA,EAAAvD,GACAwD,EAAAhsB,EAAAtjF,OAAA,CAAAsvG,aAAA,cACAC,EAAAjsB,EAAAtjF,OAAA,CAAAuvG,oBAAA,OACAC,EAAAlsB,EAAAtjF,OAAA,CAAAwvG,uBAAA,GACAjnF,UAAA,aAGAknF,EAAA,GACA1D,EAAA,GAEA,OAAAA,EAAAzoB,EAAAwpB,aAAA,CAAApsG,MAAA,GACA,IAAA+2C,EAAA6rC,EAAAqrB,YAAA,CAAA5wG,GAAA,CACAulF,EAAAwpB,aAAA,CAAAf,EAAA,EAGA,IAAAt0D,EACA,SAGA,IAAA5tB,EAAAy5D,EAAAngD,GAAA,CAAAsU,GACAnvB,EAAAjnB,OAAAo2C,EAAAwN,UAAA,EAAApoC,WAAA,GACAgwF,EAAmBpB,GAAYnjF,EAAArN,WAAA,IAC/B4wF,EAAA,EAEA6D,EAAA,GACAC,EAAArsB,EAAA0pB,cAAA,CAAAjvG,GAAA,CAAAuqB,GAGA,KAAAqnF,KAAAh0F,IAAAg0F,GAAA,EAAA9D,GAAA8D,GAAA,CACAD,EAAAhvG,MAAA,IACAgvG,EAAA3wG,IAAA,EAA6BW,KAAA,OAAA8C,MAAA,MAG7B,IAAAsC,EACA,iBAAAsqG,EACAA,EACAA,EAAArD,EAAAF,EAEA,kBAAA/mG,GACAA,CAAAA,EAAA,CAAoBpF,KAAA,OAAA8C,MAAAsC,CAAA,GAGpB4qG,EAAA3wG,IAAA,EACAW,KAAA,UACA8oB,QAAA,IACAC,WAAA,CACAuR,KACA,IACA4yE,EACA,SACAC,EACAhB,CAAAA,EAAA,MAAAA,EAAA,IACA+D,oBAAA,GACAnpE,UACA,iBAAA4oE,EACAA,EACAA,EAAAtD,EAAAF,GACAtjF,UAAA,2BAEAzjB,SAAA6Y,MAAAC,OAAA,CAAA9Y,GAAAA,EAAA,CAAAA,EAAA,EAEA,CAEA,IAAA09B,EAAA3Y,CAAA,CAAAA,EAAAnpB,MAAA,IAEA,GAAA8hC,GAAAA,YAAAA,EAAA9iC,IAAA,EAAA8iC,MAAAA,EAAAha,OAAA,EACA,IAAAqnF,EAAArtE,EAAA19B,QAAA,CAAA09B,EAAA19B,QAAA,CAAApE,MAAA,IACAmvG,GAAAA,SAAAA,EAAAnwG,IAAA,CACAmwG,EAAArtG,KAAA,MAEAggC,EAAA19B,QAAA,CAAA/F,IAAA,EAA4BW,KAAA,OAAA8C,MAAA,MAG5BggC,EAAA19B,QAAA,CAAA/F,IAAA,IAAA2wG,EACA,MACA7lF,EAAA9qB,IAAA,IAAA2wG,GAIA,IAAApJ,EAAA,CACA5mG,KAAA,UACA8oB,QAAA,KACAC,WAAA,CAAmBH,GAAAskF,EAAA,MAAAC,CAAA,EACnB/nG,SAAAw+E,EAAApvC,IAAA,CAAArqB,EAAA,GACA,EAEAy5D,EAAAipB,KAAA,CAAA90D,EAAA6uD,GAEAmJ,EAAA1wG,IAAA,CAAAunG,EACA,CAEA,GAAAmJ,IAAAA,EAAA/uG,MAAA,CAIA,OACAhB,KAAA,UACA8oB,QAAA,UACAC,WAAA,CAAiBqnF,cAAA,GAAAvnF,UAAA,eACjBzjB,SAAA,CACA,CACApF,KAAA,UACA8oB,QAAA+mF,EACA9mF,WAAA,CACA,GAAa,GAAAoxD,GAAA00B,EAAA,EAAeiB,EAAA,CAC5BlnF,GAAA,gBACA,EACAxjB,SAAA,EAAoBpF,KAAA,OAAA8C,MAAA8sG,CAAA,EAAmC,EAEvD,CAAO5vG,KAAA,OAAA8C,MAAA,MACP,CACA9C,KAAA,UACA8oB,QAAA,KACAC,WAAA,GACA3jB,SAAAw+E,EAAApvC,IAAA,CAAAu7D,EAAA,GACA,EACA,CAAO/vG,KAAA,OAAA8C,MAAA,MACP,CAEA,E6BjKqB8gF,GAErB/9D,EAAA5H,MAAAC,OAAA,CAAAtb,GACA,CAAO5C,KAAA,OAAAoF,SAAAxC,CAAA,EACPA,GAAA,CAAe5C,KAAA,OAAAoF,SAAA,IAUf,OARAoqG,IAII,GAAAhtB,EAAAjI,EAAA,EAAM,aAAA10D,GACVA,EAAAzgB,QAAA,CAAA/F,IAAA,EAA0BW,KAAA,OAAA8C,MAAA,MAA0B0sG,IAGpD3pF,CACA,CC8Be,SAAAwqF,GAAAC,CAAA,CAAAhwG,CAAA,SACf,WAAAgwG,EAIA,eAAA1vD,CAAA,CAAAxmB,CAAA,EAEA,IAAAm2E,EACQxB,GAAMnuD,EAAA,CAAQxmB,KAAAA,EAAA,GAAA95B,CAAA,EAEtB,OAAAgwG,EAAA56E,GAAA,CAAA66E,EAAAn2E,EACA,EAMA,SAAAwmB,CAAA,CAAAxmB,CAAA,EAEA,OACM20E,GAAMnuD,EAAA,CAAQxmB,KAAAA,EAAA,GAAA95B,GAAAgwG,CAAA,EAEpB,CACA,CCvJO,SAAAE,GAAA3kF,CAAA,EACP,GAAAA,EACA,MAAAA,CAEA,iBCXe,SAAApE,GAAA3kB,CAAA,EACf,oBAAAA,GAAAA,OAAAA,EACA,SAGA,IAAA4Z,EAAAxW,OAAAuqG,cAAA,CAAA3tG,GACA,OAAA4Z,OAAAA,GAAAA,IAAAxW,OAAAwW,SAAA,EAAAxW,OAAAA,OAAAuqG,cAAA,CAAA/zF,EAAA,IAAAuR,CAAAA,OAAAyiF,WAAA,IAAA5tG,CAAA,IAAAmrB,CAAAA,OAAAsrB,QAAA,IAAAz2C,CAAA,CACA,CEPO,IAAA6tG,GAYP,SAAAxwG,CAAA,EAGA,IAAAid,EAGAwzF,IALA,CACAj0F,WAAA,CAIAD,SAAA,CAEA5Z,EAAAsa,CAAA,CAAAjd,EAAA,CAEAmW,EAAA,WACA,OAAAxT,EAAAwT,KAAA,CAAAA,EAAAC,UACA,EAgBA,OAdArQ,OAAAuW,cAAA,CAAAnG,EAAA8G,GAcA9G,CACA,ECiUMu6F,GAAG,GAAKvwF,cAAA,OAePwwF,WAAwBH,GAI/Bh0F,aAAA,CAEA,cAeA,KAAAo0F,QAAA,CAAA90F,KAAAA,EAYA,KAAA9d,MAAA,CAAA8d,KAAAA,EAaA,KAAA+0F,SAAA,IAaA,KAAA5L,QAAA,CAAAnpF,KAAAA,EASA,KAAAg1F,WAAA,IASA,KAAAC,MAAA,CAAAj1F,KAAAA,EASA,KAAA/b,SAAA,IAUA,KAAA6lE,MAAA,CAAA9pD,KAAAA,EASA,KAAAk1F,YAAA,CAAwBC,WF1bxB,IAAAC,EAAA,GAEAC,EAAA,CAAoB57E,IAKpB,YAAA3O,CAAA,EACA,IAAAwqF,EAAA,GAEAnxE,EAAArZ,EAAAtnB,GAAA,GAEA,sBAAA2gC,EACA,2DAAAA,GAGAn9B,CAQA,SAAAA,EAAA4oB,CAAA,IAAAmQ,CAAA,EACA,IAAA5lB,EAAAi7F,CAAA,GAAAE,EAAA,CACAvqF,EAAA,GAEA,GAAA6E,EAAA,CACAuU,EAAAvU,GACA,MACA,CAGA,OAAA7E,EAAAD,EAAA/lB,MAAA,EACAg7B,CAAAA,OAAAA,CAAA,CAAAhV,EAAA,EAAAgV,KAAA/f,IAAA+f,CAAA,CAAAhV,EAAA,GACAgV,CAAAA,CAAA,CAAAhV,EAAA,CAAAD,CAAA,CAAAC,EAAA,EAKAD,EAAAiV,EAGA5lB,EACQo7F,CAoDD,SAAaC,CAAA,CAAArxE,CAAA,EAEpB,IAAAy9C,EAEA,OAQA,YAAAlB,CAAA,MAGA92D,EAFA,IAAA6rF,EAAAD,EAAAzwG,MAAA,CAAA27E,EAAA37E,MAAA,CAIA0wG,GACA/0B,EAAAt9E,IAAA,CAAAsyG,GAGA,IACA9rF,EAAA4rF,EAAAn7F,KAAA,MAAAqmE,EACA,CAAM,MAAA9wD,EAAA,CAON,GAAA6lF,GAAA7zB,EACA,MAP0ChyD,EAU1C,OAAA8lF,EAV0C9lF,EAW1C,CAEA6lF,IACA7rF,GAAAA,EAAAoT,IAAA,qBAAApT,EAAAoT,IAAA,CACApT,EAAAoT,IAAA,CAAAA,EAAA04E,GACQ9rF,aAAA24D,MACRmzB,EAAA9rF,GAEAoT,EAAApT,GAGA,EAOA,SAAA8rF,EAAA9lF,CAAA,IAAAmQ,CAAA,EACA6hD,IACAA,EAAA,GACAz9C,EAAAvU,KAAAmQ,GAEA,CAOA,SAAA/C,EAAAn2B,CAAA,EACA6uG,EAAA,KAAA7uG,EACA,CACA,GAxHYsT,EAAAnT,MAAA+4B,GAEZoE,EAAA,QAAApE,EAEA,GAjCA,QAAAjV,EAkCA,EAhDoBq5E,IAmDpB,SAAAwR,CAAA,EACA,sBAAAA,EACA,gBACA,+CAAAA,GAKA,OADAP,EAAAhyG,IAAA,CAAAuyG,GACAN,CACA,CA5DoB,EAEpB,OAAAA,CA2DA,GE4XA,CAaAlqG,MAAA,CAEA,IAAAkpG,EAEA,IAAAQ,GAEA9pF,EAAA,GAEA,OAAAA,EAAA,KAAAgqF,SAAA,CAAAhwG,MAAA,GACA,IAAA6wG,EAAA,KAAAb,SAAA,CAAAhqF,EAAA,CACAspF,EAAAlQ,GAAA,IAAAyR,EACA,CAIA,OAFAvB,EAAAlhF,IAAA,CAAqBnH,GAAM,MAAS,KAAA/nB,SAAA,GAEpCowG,CACA,CA6DAlhF,KAAA7U,CAAA,CAAAzX,CAAA,QACA,iBAAAyX,EAEA,GAAAhE,UAAAvV,MAAA,EACA8wG,GAAA,YAAAZ,MAAA,EACA,KAAAhxG,SAAA,CAAAqa,EAAA,CAAAzX,EACA,MAIA,GAAiBwZ,IAAA,MAAApc,SAAA,CAAAqa,IAAA,KAAAra,SAAA,CAAAqa,EAAA,EAAA0B,KAAAA,EAIjB,GACA61F,GAAA,YAAAZ,MAAA,EACA,KAAAhxG,SAAA,CAAAqa,EACA,MAIA,KAAAra,SAAA,CAoBA6xG,QAAA,CACA,QAAAb,MAAA,CACA,YAQA,YAAAD,WAAA,MAAAD,SAAA,CAAAhwG,MAAA,GACA,IAAA6wG,EAAA,GAAAvxG,EAAA,MAAA0wG,SAAA,MAAAC,WAAA,EAEA,GAAA3wG,CAAA,IAAAA,CAAA,IACA,QAGA,MAAAA,CAAA,KACAA,CAAAA,CAAA,IAAA2b,KAAAA,CAAA,EAGA,IAAA+1F,EAAAH,EAAAv1F,IAAA,CAb+D,QAa/Dhc,EAEA,oBAAA0xG,GACA,KAAAb,YAAA,CAAA/Q,GAAA,CAAA4R,EAEA,CAKA,OAHA,KAAAd,MAAA,IACA,KAAAD,WAAA,CAAA9wF,OAAAq7D,iBAAA,CAEA,KAiBA//C,MAAArB,CAAA,EACA,KAAA23E,MAAA,GACA,IAAAE,EAAAC,GAAA93E,GACA2rC,EAAA,KAAAA,MAAA,OAAA5nE,MAAA,CAEA,OADAg0G,GAAA,QAAApsC,GACAA,EAAApkE,OAAAswG,GAAAA,EACA,CA4CA92F,QAAAif,CAAA,CAAAu3E,CAAA,EACA,IAAAn0F,EAAA,KAMA,OAJA,KAAAu0F,MAAA,GACAI,GAAA,eAAApsC,MAAA,OAAA5nE,MAAA,EACAi0G,GAAA,eAAAhN,QAAA,OAAA2L,QAAA,EAEAY,EAAAU,EAAAp2F,KAAAA,EAAA01F,GAAA,IAAAh5E,QAAA05E,GAQA,SAAAA,EAAAz5E,CAAA,CAAA05E,CAAA,EACA,IAAAL,EAAAC,GAAA93E,GAGAm4E,EAE8B/0F,EAAAie,KAAA,CAAAw2E,GA+B9B,SAAAO,EAAA3mF,CAAA,CAAAuO,CAAA,EACAvO,GAAA,CAAAuO,EACAk4E,EAAAzmF,GACU+M,EACVA,EAAAwB,IAEU,GAAAooD,EAAAjI,EAAA,EAAMo3B,EAAA,yCAChBA,EAAA11F,KAAAA,EAAAme,GAEA,CArCA5c,EAAAkY,GAAA,CAAA68E,EAAAN,EAAA,SAAApmF,CAAA,CAAA+0B,CAAA,CAAAxmB,CAAA,EACA,GAAAvO,GAAA,CAAA+0B,GAAA,CAAAxmB,EACA,OAAAo4E,EAAA3mF,GAUA,IAAA4mF,EAAAj1F,EAAAikB,SAAA,CAHgCmf,EAGhCxmB,EA4iBA,kBA1iBAq4E,GAujBA3vG,GACA,iBAxjBA2vG,GAyjBA,eAzjBAA,GA0jBA,eA1jBAA,EACAr4E,EAAAt3B,KAAA,CAAA2vG,EAEAr4E,EAAAvU,MAAA,CAAA4sF,EAGAD,EAAA3mF,EAAmEuO,EACnE,EAiBA,CACA,CAiCAs4E,YAAAt4E,CAAA,EAEA,IAEAvU,EAFA8sF,EAAA,GAYA,OARA,KAAAZ,MAAA,GACAI,GAAA,mBAAApsC,MAAA,OAAA5nE,MAAA,EACAi0G,GAAA,mBAAAhN,QAAA,OAAA2L,QAAA,EAEA,KAAA51F,OAAA,CAAAif,EASA,SAAAvO,CAAA,CAAAuO,CAAA,EACAu4E,EAAA,GACMnC,GAAI3kF,GACVhG,EAAAuU,CACA,GAZAw4E,GAAA,wBAAAD,GACI,GAAAnwB,EAAAjI,EAAA,EAAM10D,EAAA,+CAEVA,CAUA,CAwCA6P,IAAAkrB,CAAA,CAAAxmB,CAAA,CAAAu3E,CAAA,EACAkB,GAAAjyD,GACA,KAAAmxD,MAAA,GAEA,IAAAZ,EAAA,KAAAA,YAAA,CAOA,OALAQ,GAAA,mBAAAv3E,IACAu3E,EAAAv3E,EACAA,EAAAne,KAAAA,GAGA01F,EAAAU,EAAAp2F,KAAAA,EAAA01F,GAAA,IAAAh5E,QAAA05E,GAWA,SAAAA,EAAAz5E,CAAA,CAAA05E,CAAA,EACM,GAAA9vB,EAAAjI,EAAA,EACN,mBAAAngD,EACA,gDAEA,IAAA63E,EAAAC,GAAA93E,GACA+2E,EAAAz7E,GAAA,CAAAkrB,EAAAqxD,EAQA,SAAApmF,CAAA,CAAAinF,CAAA,CAAA14E,CAAA,EACA,IAAA24E,EAEAD,GAAAlyD,EAGA/0B,EACAymF,EAAAzmF,GACU+M,EACVA,EAAAm6E,IAEU,GAAAvwB,EAAAjI,EAAA,EAAMo3B,EAAA,yCAChBA,EAAA11F,KAAAA,EAAA82F,EAAA34E,GAEA,EACA,CACA,CAmBA44E,QAAApyD,CAAA,CAAAxmB,CAAA,EAEA,IAEAvU,EAFA8sF,EAAA,GAQA,OAJA,KAAAj9E,GAAA,CAAAkrB,EAAAxmB,EASA,SAAAvO,CAAA,CAAA+0B,CAAA,EACM4vD,GAAI3kF,GACVhG,EAAA+6B,EACA+xD,EAAA,EACA,GAXAC,GAAA,gBAAAD,GACI,GAAAnwB,EAAAjI,EAAA,EAAM10D,EAAA,+CACVA,CAUA,CA+BA4b,UAAAmf,CAAA,CAAAxmB,CAAA,EACA,KAAA23E,MAAA,GACA,IAAAE,EAAAC,GAAA93E,GACAgrE,EAAA,KAAAA,QAAA,OAAA2L,QAAA,CAIA,OAHAqB,GAAA,YAAAhN,GACAyN,GAAAjyD,GAEAwkD,EAAAxkD,EAAAqxD,EACA,CA2DA7R,IAAAt9F,CAAA,IAAA65E,CAAA,EACA,IAAAq0B,EAAA,KAAAA,SAAA,CACA9wG,EAAA,KAAAA,SAAA,CAIA,GAFA4xG,GAAA,WAAAZ,MAAA,EAEApuG,MAAAA,QAEM,sBAAAA,EACNmwG,EAAAnwG,EAAA65E,QACM,oBAAA75E,EACNmb,MAAAC,OAAA,CAAApb,GACAowG,EAAApwG,GAEAqwG,EAAArwG,QAGA,+CAAAA,EAAA,KAGA,YA0BA,SAAAqwG,EAAAttF,CAAA,EACA,iBAAAA,CAAA,kBAAAA,CAAA,EACA,YACA,8KAIAqtF,EAAArtF,EAAAya,OAAA,EAEAza,EAAAyV,QAAA,EACAp7B,CAAAA,EAAAo7B,QAAA,CAA6BrT,GAAM,GAAA/nB,EAAAo7B,QAAA,CAAAzV,EAAAyV,QAAA,EAEnC,CAMA,SAAA43E,EAAA5yE,CAAA,EACA,IAAAtZ,EAAA,GAEA,GAAAsZ,MAAAA,QAEQ,GAAAriB,MAAAC,OAAA,CAAAoiB,GACR,OAAAtZ,EAAAsZ,EAAAt/B,MAAA,GAEA69B,SA9CA/7B,CAAA,EACA,sBAAAA,EACAmwG,EAAAnwG,EAAA,SACQ,oBAAAA,GACR,GAAAmb,MAAAC,OAAA,CAAApb,GAAA,CACA,IAAAvC,EAAA,GAAAo8E,EAAA,CACoD75E,EACpDmwG,EAAA1yG,EAAAo8E,EACA,MACAw2B,EAAArwG,QAGA,+CAAAA,EAAA,IAEA,EA+BAw9B,CAAA,CAAAtZ,EAAA,OAIA,oDAAAsZ,EAAA,IAEA,CAOA,SAAA2yE,EAAA1yG,CAAA,CAAAo8E,CAAA,EACA,IAAA31D,EAAA,GACAosF,EAAA,GAEA,OAAApsF,EAAAgqF,EAAAhwG,MAAA,EACA,GAAAgwG,CAAA,CAAAhqF,EAAA,MAAAzmB,EAAA,CACA6yG,EAAApsF,EACA,KACA,CAGA,GAAAosF,KAAAA,EACApC,EAAA3xG,IAAA,EAAAkB,KAAAo8E,EAAA,OAIA,GAAAA,EAAA37E,MAAA,IACA,IAAAqyG,EAAA,GAAAxxE,EAAA,CAAA86C,EACA22B,EAAAtC,CAAA,CAAAoC,EAAA,IACY3rF,GAAU6rF,IAAoB7rF,GAAU4rF,IACpDA,CAAAA,EAAoBprF,GAAM,GAAAqrF,EAAAD,EAAA,EAG1BrC,CAAA,CAAAoC,EAAA,EAAA7yG,EAAA8yG,KAAAxxE,EAAA,CAEA,CACA,CACA,CA8BO,IAAA0xE,GAAA,IAAAzC,KAAAiB,MAAA,GASP,SAAAI,GAAAlyG,CAAA,CAAA6C,CAAA,EACA,sBAAAA,EACA,2BAAA7C,EAAA,qBAEA,CASA,SAAAmyG,GAAAnyG,CAAA,CAAA6C,CAAA,EACA,sBAAAA,EACA,2BAAA7C,EAAA,uBAEA,CASA,SAAA6xG,GAAA7xG,CAAA,CAAAixG,CAAA,EACA,GAAAA,EACA,YACA,gBACAjxG,EACA,mHAGA,CAQA,SAAA4yG,GAAAjwG,CAAA,EAGA,IAAO6kB,GAAU7kB,IAAA,iBAAAA,EAAA5C,IAAA,CACjB,uCAAA4C,EAAA,IAGA,CAUA,SAAAgwG,GAAA3yG,CAAA,CAAAuzG,CAAA,CAAAb,CAAA,EACA,IAAAA,EACA,YACA,IAAA1yG,EAAA,0BAAAuzG,EAAA,YAGA,CAMA,SAAAtB,GAAApvG,CAAA,EACA,OAAS2wG,GAUT,iBAVwB3wG,GAWxB,YAXwBA,GAYxB,aAZwBA,EAAAA,EAAA,IAAsBm+E,EAAKn+E,EACnD,CC3vCO,MAAA4wG,GACP/2F,aAAA,CAEA,KAAAg3F,WAAA,IAGA,KAAAC,aAAA,IAGA,KAAArtD,WAAA,MAGA,KAAAnnD,OAAA,EACA4sG,KAAA,SAAA2H,WAAA,IACAl3B,OAAA,SAAAm3B,aAAA,IACA71F,QAAA,QAAAwoC,WAAA,CAAA3jD,CACA,CACA,CASAmb,QAAAoI,CAAA,CAAApS,CAAA,CAAAiT,CAAA,CAAApkB,CAAA,EACAujB,GAAApS,IACAiT,MAAAA,EAC4B,EAAAjT,EAAA,CAAAiT,EAAA,CAAApkB,EAEPujB,CAAA,CAAApS,EAAA,CAAAnR,EAGrB,CAQA65E,OAAAt2D,CAAA,CAAApS,CAAA,CAAAiT,CAAA,EACAb,GAAApS,IACAiT,MAAAA,EAC4B,EAAAjT,EAAA,CAAA+tC,MAAA,CAAA96B,EAAA,GAE5B,OAAAb,CAAA,CAAApS,EAAA,CAGA,CACA,CC9CO,MAAA8/F,WAAyBH,GAMhC/2F,YAAA8+D,CAAA,CAAAwK,CAAA,EACA,QAGA,KAAA0tB,WAAA,IAGA,KAAAC,aAAA,IAGA,KAAArtD,WAAA,MAGA,KAAAnnD,OAAA,EACA4sG,KAAA,SAAA2H,WAAA,IACAl3B,OAAA,SAAAm3B,aAAA,IACA71F,QAAA,QAAAwoC,WAAA,CAAA3jD,CACA,EAGA,KAAA64E,KAAA,CAAAA,EAGA,KAAAwK,KAAA,CAAAA,CACA,CAUAI,MAAAzjF,CAAA,CAAAujB,CAAA,CAAApS,CAAA,CAAAiT,CAAA,EACA,GAAApkB,EAAA,KAgCA2X,EA/BA,QAAAkhE,KAAA,EACA,IAAAq4B,EAAA,KAAAH,WAAA,CACAI,EAAA,KAAAH,aAAA,CACAI,EAAA,KAAAztD,WAAA,CACA,KAAAotD,WAAA,IACA,KAAAC,aAAA,IACA,KAAArtD,WAAA,MAEA,KAAAk1B,KAAA,CAAAn/D,IAAA,MAAAld,OAAA,CAAAwD,EAAAujB,EAAApS,EAAAiT,GAEA,KAAAu/B,WAAA,GACA3jD,EAAA,KAAA2jD,WAAA,CACA,KAAAxoC,OAAA,CAAAoI,EAAApS,EAAAiT,EAAApkB,IAGA,KAAAgxG,aAAA,EACA,KAAAn3B,MAAA,CAAAt2D,EAAApS,EAAAiT,GAGA,IAAAitF,EAAA,KAAAN,WAAA,CACAre,EAAA,KAAAse,aAAA,CAMA,GAJA,KAAAD,WAAA,CAAAG,EACA,KAAAF,aAAA,CAAAG,EACA,KAAAxtD,WAAA,CAAAytD,EAEAC,EAAA,OAAArxG,EACA,GAAA0yF,EAAA,WACA,CAKA,IAAA/6E,KAAA3X,EAAA,CAEA,IAAAE,EAAAF,CAAA,CAAA2X,EAAA,CAEA,GAAAzX,GAAA,iBAAAA,GACA,GAAAmb,MAAAC,OAAA,CAAApb,GAEA,QAAAwb,EAAA,EAAsBA,EAAA4L,EAAAlpB,MAAA,CAAkBsd,GAAA,GACxC,IAAAk3E,EAAAtrE,CAAA,CAAA5L,EAAA,CACA41F,GAAA1e,IACA,MAAAnP,KAAA,CAAAmP,EAAA5yF,EAAA2X,EAAA+D,IAEAA,GAGA,MACO41F,GAAApxG,IACP,KAAAujF,KAAA,CAAAvjF,EAAAF,EAAA2X,EAAA,MAGA,CAEA,QAAA0rE,KAAA,EACA,IAAA+tB,EAAA,KAAAztD,WAAA,CACAwtD,EAAA,KAAAH,aAAA,CACA,KAAArtD,WAAA,MACA,KAAAqtD,aAAA,IAEA,KAAA3tB,KAAA,CAAA3pE,IAAA,MAAAld,OAAA,CAAAwD,EAAAujB,EAAApS,EAAAiT,GAEA,KAAAu/B,WAAA,GACA3jD,EAAA,KAAA2jD,WAAA,CACA,KAAAxoC,OAAA,CAAAoI,EAAApS,EAAAiT,EAAApkB,IAGA,KAAAgxG,aAAA,EACA,KAAAn3B,MAAA,CAAAt2D,EAAApS,EAAAiT,GAGA,IAAAsuE,EAAA,KAAAse,aAAA,CAKA,GAHA,KAAArtD,WAAA,CAAAytD,EACA,KAAAJ,aAAA,CAAAG,EAEAze,EAAA,WACA,CACA,CAEA,OAAA1yF,CACA,CACA,CAQA,SAAAsxG,GAAApxG,CAAA,EACA,OACAA,OAAAA,GAAA,iBAAAA,GAAA,SAAAA,GAAA,iBAAAA,EAAA9C,IAAA,CEpIO,SAAAm0G,GAAAC,CAAA,EAAqB34B,MAAAA,CAAA,CAAAwK,MAAAA,CAAA,CAAc,EAE1C,OAAAouB,IADsBR,GAAUp4B,EAAAwK,GAChCI,KAAA,CAAA+tB,EAAA,KACA,CEhBO,SAAAE,GAAAtwG,CAAA,EAIP,IAAA4gB,EAAA,IAAA5mB,QAGAu2G,EAAA,IAAA39F,IAEAy8B,EAAA,IAAAmhE,GAAA,SAGAC,EAAA,GAEAC,EAAArhE,EAEC8gE,GAAInwG,EAAA,CACLy3E,MAAA74E,CAAA,CAAAujB,CAAA,EACA,OAAAvjB,EAAA5C,IAAA,EACA,iBACAmmB,GAAmBwuF,SDXJA,EAAA/xG,CAAA,CAAAujB,CAAA,EACf,GAAAvjB,qBAAAA,EAAA5C,IAAA,CACA,OAAA4C,EAAAgyG,QAAA,EAAAD,EAAA/xG,EAAA7C,MAAA,CAAA6C,GAGA,GAAAA,eAAAA,EAAA5C,IAAA,EACA,IAAAmmB,EAAA,SAEA,OAAAA,EAAAnmB,IAAA,EAEA,8BAAAmmB,EAAAyuF,QAAA,EAAAhyG,IAAAujB,EAAApmB,MAAA,KAGA,0BAAAomB,EAAAyuF,QAAA,KAGA,qBAGA,eAHA,OAAAzuF,EAAAyuF,QAAA,EAAAhyG,IAAAujB,EAAArjB,KAAA,KAOA,kBACA,6BAAAF,IAAAujB,EAAA0nE,KAAA,KAGA,mBACA,qBACA,6BACA,iBACA,CACA,CAEA,QACA,ECxB+BjrF,EAAAujB,IAC/BsuF,EAAAp1G,IAAA,EAAAq1G,EAAA9xG,EAAA,EAEA,KAEA,yBACAA,EAAAqjD,UAAA,CAAA1gC,OAAA,KACAmvF,EAAA/nF,YAAA,CAAA9sB,GAAA,CAAA+tF,EAAAC,KAAA,CAAA5tF,IAAA,CAAA2tF,EACA,GACA,KAEA,0BACA,0BACA,8BACAhrF,wBAAAA,EAAA5C,IAAA,EACA4C,EAAAgmB,EAAA,EACA8rF,EAAA/nF,YAAA,CAAA9sB,GAAA,CAAA+C,EAAAgmB,EAAA,CAAA3oB,IAAA,CAAA2C,GAGAgiB,EAAA/kB,GAAA,CAAA+C,EAAA8xG,EAAA,IAAAF,GAAAE,EAAA,OAEA9vF,EAAA/kB,GAAA,CAAA+C,EAAA8xG,EAAA,IAAAF,GAAAE,EAAA,KAEA,uBAAA9xG,EAAA5C,IAAA,EAAA4C,EAAAgmB,EAAA,EACA8rF,EAAA/nF,YAAA,CAAA9sB,GAAA,CAAA+C,EAAAgmB,EAAA,CAAA3oB,IAAA,CAAA2C,IAIAA,EAAAwhE,MAAA,CAAA7+C,OAAA,CAAAoS,IACAk9E,GAAAl9E,GAAApS,OAAA,CAAAtlB,IACAy0G,EAAA/nF,YAAA,CAAA9sB,GAAA,CAAAI,EAAA2C,EACA,EACA,GACA,KAEA,oBACA,qBACA,qBAIA,qBAHAgiB,EAAA/kB,GAAA,CAAA+C,EAAA8xG,EAAA,IAAAF,GAAAE,EAAA,KACA,KAMA,wBACA,0BACAA,EAAAI,eAAA,CAAAlyG,GACA,KAEA,mBACAgiB,EAAA/kB,GAAA,CAAA+C,EAAA8xG,EAAA,IAAAF,GAAAE,EAAA,KAEA9xG,EAAA+0B,KAAA,EACAk9E,GAAAjyG,EAAA+0B,KAAA,EAAApS,OAAA,CAAAtlB,IACA2C,EAAA+0B,KAAA,EACA+8E,EAAA/nF,YAAA,CAAA9sB,GAAA,CAAAI,EAAA2C,EAAA+0B,KAAA,CAEA,EAGA,CACA,EAEAsuD,MAAArjF,CAAA,EACAgiB,EAAA1H,GAAA,CAAAta,IAAA8xG,OAAAA,GAAAA,EAAAvuF,MAAA,EACAuuF,CAAAA,EAAAA,EAAAvuF,MAAA,CAEA,CACA,GAEA,QAAA7H,EAAAm2F,EAAAzzG,MAAA,GAAqCsd,GAAA,EAAQ,EAAAA,EAAA,CAC7C,IAAA+0B,EAAAxX,EAAA,CAAA44E,CAAA,CAAAn2F,EAAA,CAEA+0B,EAAAohE,UAAA,CAAAv3F,GAAA,CAAA2e,EAAA57B,IAAA,GACA80G,SAcAA,EAAA1hE,CAAA,CAAApzC,CAAA,EACAozC,EAAAohE,UAAA,CAAA51E,GAAA,CAAA5+B,GACAozC,EAAAltB,MAAA,EAAA4uF,EAAA1hE,EAAAltB,MAAA,CAAAlmB,EACA,EAjBAozC,EAAAxX,EAAA57B,IAAA,EAEAozC,EAAA2hE,UAAA,CAAAn5E,EAAA57B,IAAA,GACAs0G,EAAA10G,GAAA,CAAAg8B,EAAA57B,IAAA,CAAA47B,EAEA,CAEA,OAAUjX,IAAAA,EAAAyuB,MAAAA,EAAAkhE,QAAAA,CAAA,CACV,CAWO,MAAAC,GAKP73F,YAAAwJ,CAAA,CAAAwnC,CAAA,EAEA,KAAAxnC,MAAA,CAAAA,EAGA,KAAAwnC,KAAA,CAAAA,EAGA,KAAAhhC,YAAA,KAAA/V,IAGA,KAAAq+F,wBAAA,KAAAt5F,IAGA,KAAA84F,UAAA,KAAA94F,GACA,CAKAm5F,gBAAAlyG,CAAA,EACAA,wBAAAA,EAAA5C,IAAA,CACA4C,QAAAA,EAAA6pC,IAAA,OAAAkhB,KAAA,OAAAxnC,MAAA,CACA,KAAAA,MAAA,CAAA2uF,eAAA,CAAAlyG,GAUAA,EAAA+pB,YAAA,CAAApH,OAAA,CAPA,IACAsvF,GAAAK,EAAAtsF,EAAA,EAAArD,OAAA,CAAAtlB,IACA,KAAA0sB,YAAA,CAAA9sB,GAAA,CAAAI,EAAA2C,GACAsyG,EAAAC,IAAA,OAAAF,wBAAA,CAAAp2E,GAAA,CAAA5+B,EACA,EACA,GAII2C,EAAAgmB,EAAA,EACJ,KAAA+D,YAAA,CAAA9sB,GAAA,CAAA+C,EAAAgmB,EAAA,CAAA3oB,IAAA,CAAA2C,EAEA,CAMAoyG,WAAA/0G,CAAA,SACA,KAAA0sB,YAAA,CAAAzP,GAAA,CAAAjd,GAAA,KACA,KAAAkmB,MAAA,OAAAA,MAAA,CAAA6uF,UAAA,CAAA/0G,EACA,CAMAid,IAAAjd,CAAA,EACA,OACA,KAAA0sB,YAAA,CAAAzP,GAAA,CAAAjd,IAAA,OAAAkmB,MAAA,OAAAA,MAAA,CAAAjJ,GAAA,CAAAjd,EAEA,CACA,CAMO,SAAA40G,GAAAl9E,CAAA,EACP,MAAAy9E,CAQO,SAAAA,EAAAz9E,CAAA,CAAAzN,EAAA,IACP,OAAAyN,EAAA33B,IAAA,EACA,iBACAkqB,EAAA7qB,IAAA,CAAAs4B,GACA,KAEA,wBACA,IAAA53B,EAAA43B,EACA,KAAA53B,qBAAAA,EAAAC,IAAA,EACAD,EAA6BA,EAAAA,MAAA,CAE7BmqB,EAAA7qB,IAAA,CAA8BU,GAC9B,KAEA,qBAUA43B,EAAA5O,UAAA,CAAAxD,OAAA,CARA,IACAxR,gBAAAA,EAAA/T,IAAA,CACAo1G,EAAArhG,EAAApP,QAAA,CAAAulB,GAEAkrF,EAAArhG,EAAAjR,KAAA,CAAAonB,EAEA,GAGA,KAEA,oBAEA,IAAAmrF,EAAA,IACA92E,GAAA62E,EAAA72E,EAAArU,EACA,EAEAyN,EAAAiJ,QAAA,CAAArb,OAAA,KACAgZ,GACA82E,EAAA92E,EAEA,GACA,KAEA,mBACA62E,EAAAz9E,EAAAhzB,QAAA,CAAAulB,GACA,KAEA,yBACAkrF,EAAAz9E,EAAAylD,IAAA,CAAAlzD,EAEA,CAEA,OAAAA,CACA,GA1DAyN,GAAA/S,GAAA,CAAAhiB,GAAAA,EAAA3C,IAAA,CACA,CC9KO,SAAA2b,GAAAgL,CAAA,CAAAC,CAAA,EAGP,IAAAk+C,EAAA,yCACA/9C,EAAA,GAEA,OAAAA,EAAA+9C,EAAA/jE,MAAA,GACA,IAAA+3D,EAAAgM,CAAA,CAAA/9C,EAAA,CAEA+xC,KAAAnyC,GAEAC,CAAAA,CAAA,CAAAkyC,EAAA,CAAAnyC,CAAA,CAAAmyC,EAAA,CAEA,CACA,CGRO,SAAAu8C,GAAArvD,CAAA,CAAAkvD,CAAA,EACP,IAOAI,EAPAvuF,EAAA,GAEA2F,EAAA,GAEA6oF,EAAA,GAKA,OAAAxuF,EAAAi/B,EAAAjlD,MAAA,GACA,IAAA4sF,EAAA3nC,CAAA,CAAAj/B,EAAA,CAEA,6BAAA4mE,EAAA5tF,IAAA,CACAu1G,EAAA3nB,EAEA4nB,EAAAn2G,IAAA,CAAAuuF,EAEA,CAEA,GAAA2nB,EAAA,CAEA,IAAAL,EAAA,CACAl1G,KAAA,qBACA4oB,GAAA2sF,EAAA1nB,KAAA,CACAsnB,KAAAA,CACA,EACIv5F,GAAM25F,EAAAL,GACVvoF,EAAAttB,IAAA,CAAA61G,EACA,CAyCA,OAvCAvoF,EAAAttB,IAAA,EACAW,KAAA,qBACA4oB,GAAA,CACA5oB,KAAA,gBACA+oB,WAAAysF,EAAA5wF,GAAA,UAAAgpE,CAAA,EAEA,IAAArzE,EACAqzE,oBAAAA,EAAA5tF,IAAA,CACA4tF,EAAA6nB,QAAA,CACA7nB,oBAAAA,EAAA5tF,IAAA,CACA4tF,EAAA8nB,QAAA,CACA,CAAiB11G,KAAA,aAAAC,KAAA,WACjB6C,EAAA8qF,EAAAC,KAAA,CAGA,oBAAAD,EAAA5tF,IAAA,GACA8C,EAAAyX,EACAA,EAAAqzE,EAAAC,KAAA,EAIA,IAAA1tF,EAAA,CACAH,KAAA,WACAysC,KAAA,OACAkpE,UAAAp7F,EAAAta,IAAA,GAAA6C,EAAA7C,IAAA,CACA8sC,OAAA,GACA6nE,SAAA,GACAr6F,IAAAA,EACAzX,MAAAA,CACA,EAEA,OADQ8Y,GAAMgyE,EAAAztF,GACdA,CACA,EACA,EACAg1G,KAAAI,EACA,CAASv1G,KAAA,aAAAC,KAAAs1G,EAAA1nB,KAAA,CAAA5tF,IAAA,EACTk1G,CACA,GAEAxoF,CACA,CC3EO,SAAAipF,GAAAC,CAAA,EACP,IAEA91G,EAFAinB,EAAA,GAIA,OAAAA,EAAA6uF,EAAA70G,MAAA,GACA,IAAAf,EAAA41G,CAAA,CAAA7uF,EAAA,CAEA4B,EACA,iBAAA3oB,GAAkC2oF,GAAgB3oF,GAClD,CAAWD,KAAA,aAAAC,KAAAA,CAAA,EACX,CAAWD,KAAA,UAAA8C,MAAA7C,CAAA,EACXF,EAAAA,EACA,CACAC,KAAA,mBACAD,OAAAA,EACAI,SAAAyoB,EACAgsF,SAAAhsF,YAAAA,EAAA5oB,IAAA,CACAgqE,SAAA,EACA,EACAphD,CACA,CAIA,MAFE,GAAA45D,EAAAjI,EAAA,EAAMx6E,EAAA,yCACN,GAAAyiF,EAAAjI,EAAA,EAAMx6E,YAAAA,EAAAC,IAAA,2CACRD,CACA,CAQO,SAAA+1G,GAAAD,CAAA,EACP,IAEA91G,EAFAinB,EAAA,GAIA,OAAAA,EAAA6uF,EAAA70G,MAAA,GACA,IAAAf,EAAA41G,CAAA,CAAA7uF,EAAA,CACI,GAAAw7D,EAAAjI,EAAA,EACJ,iBAAAt6E,GAAkC2oF,GAAgB3oF,EAAA,CAAQq5B,IAAA,KAC1D,uCAAAr5B,EAAA,KAIA,IAAA2oB,EAAA,CAAgB5oB,KAAA,gBAAAC,KAAAA,CAAA,EAChBF,EAAAA,EAAA,CAAuBC,KAAA,sBAAAD,OAAAA,EAAAI,SAAAyoB,CAAA,EAAmDA,CAC1E,CAGA,MADE,GAAA45D,EAAAjI,EAAA,EAAMx6E,EAAA,yCACRA,CACA,CCpBO,SAAAg2G,GAAAz1G,CAAA,EACP,IAAA01G,EAAA11G,EAAA01G,OAAA,EAAA/5F,KAAAA,EACAg6F,EAAA,iBAAAD,EAAAA,EAAA17E,IAAA,CAAA07E,EACAE,EAAA51G,EAAA41G,YAAA,YACAjnC,EACA3uE,KAAA2b,IAAA3b,EAAA2uE,MAAA,uBAAA3uE,EAAA2uE,MAAA,CACAknC,EACA71G,KAAA2b,IAAA3b,EAAA61G,UAAA,kBAAA71G,EAAA61G,UAAA,CACAC,EAAA91G,EAAA81G,kBAAA,UACAC,EAAA/1G,EAAA+1G,eAAA,UACAn9B,EAAA54E,EAAA44E,UAAA,cAUA,gBAAAt4B,CAAA,CAAAxmB,CAAA,MHpDOx3B,EDGAkqB,EIorBPwpF,MA5nBAC,EAEApsF,EAEAizB,EATA,IAAAo5D,EAAA,GAEAjwD,EAAA,GACAkwD,EAAA,EAwBA,GAhBA,YAAAv9B,GAAAi9B,GACAO,GAAA91D,EAAA,WAAAu1D,GAGA,YAAAj9B,GAAAjK,GACAynC,GAAA91D,EAAA,OAAAquB,GAGA,cAAAiK,GAAAm9B,GACAK,GAAA91D,EAAA,mBAAAy1D,GAGAn9B,GACAw9B,GAAA91D,EAAA,cAAAs4B,GAGAA,YAAAA,GAAAk9B,EAAA,CACA,IAAAnnC,EACA,YACA,iEAIA0nC,EAAA,CACA32G,KAAA,oBACAimD,WAAA,CACA,CACAjmD,KAAA,yBACA6tF,MAAA,CAAoB7tF,KAAA,aAAAC,KAAAgvE,EAAAlvD,KAAA,SACpB,EACA,CACA4L,OAAA,CAAiB3rB,KAAA,UAAA8C,MAAAszG,CAAA,CACjB,EACA,CAIA,IAAAh5D,KAAAwD,EAAAklC,IAAA,CAMA,GAAA1oC,6BAAAA,EAAAp9C,IAAA,CACAu2G,GACAn8E,EAAA20C,IAAA,CACA,oEACcsP,EAAkB8I,GAAkBovB,IAClD,IACA,CACAz3B,UAAA,CAAAl+B,EAAAxD,EAAA,CACAyhC,MAAqBsI,GAAkB/pC,GACvC2hC,OAAA,mBACApzD,OAAA,gBACA,GAIA4qF,EAAAn5D,EACAmJ,EAAAlnD,IAAA,EACAW,KAAA,sBACAysC,KAAA,QACA9f,aAAA,CACA,CACA3sB,KAAA,qBACA4oB,GAAA,CAAmB5oB,KAAA,aAAAC,KAAA,aACnBk1G,KAAoByB,wBHjIpBh0G,CAFOA,EGmI0Bw6C,EAAAtwB,WAAA,EHjIjC9sB,IAAA,EACA4C,qBAAAA,EAAA5C,IAAA,EACA4C,wBAAAA,EAAA5C,IAAA,CDAA,wBAAA8sB,CADOA,EIiIkCswB,EAAAtwB,WAAA,EJhIzC9sB,IAAA,CACA,CAAY,GAAA8sB,CAAA,CAAA9sB,KAAA,uBAKV,GAAAwiF,EAAAjI,EAAA,EAAMztD,qBAAAA,EAAA9sB,IAAA,yBACR,CAAU,GAAA8sB,CAAA,CAAA9sB,KAAA,oBI0HVo9C,EAAAtwB,WAAA,EAEA,QAMA,GAAAswB,2BAAAA,EAAAp9C,IAAA,EAAAo9C,EAAAzxB,MAAA,EAEA,IAAAA,EAAiDyxB,EAAAzxB,MAAA,CAGjDyxB,EAAA6I,UAAA,CAAA7I,EAAA6I,UAAA,CAAA/L,MAAA,UAAA0zC,CAAA,EACA,GAAAA,YAAAA,EAAA8nB,QAAA,CAAAz1G,IAAA,EACAs2G,GACAn8E,EAAA20C,IAAA,CACA,oEACkBsP,EAAkB8I,GAAkBovB,IACtD,IACA,CACAz3B,UAAA,CAAAl+B,EAAAxD,EAAAwwC,EAAA,CACA/O,MAAyBsI,GAAkB/pC,GAC3C2hC,OAAA,mBACApzD,OAAA,gBACA,GAIA4qF,EAAA3oB,EAIA,IAAA3nC,EAAA,GAGA,GAAA2nC,YAAAA,EAAAC,KAAA,CAAA5tF,IAAA,CACAgmD,EAAA5mD,IAAA,EACAW,KAAA,yBACA6tF,MAAA,CAAwB7tF,KAAA,aAAAC,KAAA,YACxB,OACc,CAEd,IAAA42G,EAAA,CACA72G,KAAA,kBACAy1G,SAAA7nB,EAAAC,KAAA,CACAA,MAAA,CAAwB7tF,KAAA,aAAAC,KAAA,YACxB,EACc2b,GAAMgyE,EAAAC,KAAA,CAAAgpB,GACpB5wD,EAAA5mD,IAAA,CAAAw3G,EACA,CAGA,IAAAjwF,EAAA,CAA0B5mB,KAAA,UAAA8C,MAAA6oB,EAAA7oB,KAAA,EACd8Y,GAAM+P,EAAA/E,GAGlB,IAAAkG,EAAA,CACA9sB,KAAA,oBACAimD,WAAAA,EACAt6B,OAAA/E,CACA,EAIA,OAHYhL,GAAMgyE,EAAA9gE,GAClB6pF,EAAA7pF,GAEA,EACA,CAEA,QACA,GAGAswB,EAAA6I,UAAA,CAAAjlD,MAAA,IACA81G,EAAA15D,EAEA,KAMAA,2BAAAA,EAAAp9C,IAAA,EACAo9C,yBAAAA,EAAAp9C,IAAA,CAEA82G,EAAA15D,GACQA,sBAAAA,EAAAp9C,IAAA,CACR22G,EAAAv5D,GAEAA,wBAAAA,EAAAp9C,IAAA,EACAo9C,CAAAA,eAAAA,EAAAp5C,UAAA,CAAAhE,IAAA,EAEAo9C,gBAAAA,EAAAp5C,UAAA,CAAAhE,IAAA,GAEAmqB,EAAA,GACAo8B,EAAAlnD,IAAA,IACA03G,EAAA35D,EAAAp5C,UAAA,CAAAkyG,EAAAn7C,CAAAA,CAAAw7C,KAMAhwD,EAAAlnD,IAAA,CAAA+9C,GAKAjzB,GACAo8B,EAAAlnD,IAAA,IACA03G,EAAA96F,KAAAA,EAAAi6F,EAAAn7C,CAAAA,CAAAw7C,IAIAC,EAAAn3G,IAAA,2BAEA,kBAAA62G,GACA3vD,EAAAlnD,IAAA,EACAW,KAAA,kBACA2E,SAAA,CACA3E,KAAA,mBACA+oB,WAAA,IACA9K,MAAA2I,IAAA,EAA2B5lB,OAAAy1G,CAAA,GAAuB7xF,GAAA,CASlD,SAAA+Y,CAAA,CAAA3W,CAAA,EACA,OACAhnB,KAAA,gBACA2E,SAAA,CACA3E,KAAA,aACAC,KAAA,aAAA+mB,CAAAA,EAAA,EACA,CACA,CACA,MAEAwvF,EAAA5xF,GAAA,UAAAiqC,CAAA,EAkBA,MAhBA,CACA7uD,KAAA,WACAysC,KAAA,OACAM,OAAA,GACA6nE,SAAA,GACAe,UAAA,iBAAA9mD,EACAt0C,IAAA,CACAva,KAAA,aACAC,KAAA,iBAAA4uD,EAAAA,EAAAA,CAAA,KAEA/rD,MAAA,CACA9C,KAAA,aACAC,KAAA,iBAAA4uD,EAAAA,EAAAA,CAAA,IAEA,CAGA,GACA,CAEA,GAGAjO,EAAAklC,IAAA,CAAAv/B,EAEA,IAAAywD,EAAA,GACAC,EAAA,GA8GA,SAAAH,EAAAl0G,CAAA,EACA,GAAAA,2BAAAA,EAAA5C,IAAA,CAgBA,IAAAo9C,KAVAx6C,EAAAkqB,WAAA,EACA0pF,EAAAn3G,IAAA,IACei1G,GAAO1xG,EAAAkqB,WAAA,EAAAumB,KAAA,CAAA1mB,YAAA,CAAAhT,IAAA,IAQtB/W,EAAAqjD,UAAA,EACAuwD,EAAAn3G,IAAA,CAAA+9C,EAAAs4D,QAAA,CAAAz1G,IAAA,EAIA02G,EAAA/zG,EACA,CAQA,SAAA+zG,EAAA/zG,CAAA,EAEA,IAAAmb,EAEAo3F,EAEA,GAAAe,kBAAAA,GACA,GAEAtzG,sBAAAA,EAAA5C,IAAA,EACA4C,yBAAAA,EAAA5C,IAAA,EAEA4C,2BAAAA,EAAA5C,IAAA,EAAA4C,EAAA+oB,MAAA,CACA,CAEU,GAAA62D,EAAAjI,EAAA,EAAM33E,EAAA+oB,MAAA,yCAahB,IAAAhnB,EAAA,CAA4B3E,KAAA,mBAAA2rB,OAAA/oB,EAAA+oB,MAAA,EAClB/P,GAAMhZ,EAAA+B,GAChBwwG,EAAA,CAAkBn1G,KAAA,kBAAA2E,SAAAA,CAAA,EAOlBoZ,EAJA,CAAAnb,sBAAAA,EAAA5C,IAAA,EACA4C,2BAAAA,EAAA5C,IAAA,GACA4C,IAAAA,EAAAqjD,UAAA,CAAAjlD,MAAA,CAEA,CAAuBhB,KAAA,sBAAAgE,WAAAmxG,CAAA,EAEvB,CACAn1G,KAAA,sBACAysC,KAAA,QACA9f,aACA/pB,yBAAAA,EAAA5C,IAAA,CACA,CACA,CACAA,KAAA,qBACA4oB,GAAA,CACA5oB,KAAA,aACAC,KAAA,gBAAAw2G,CACA,EACAtB,KAAAA,CACA,EACA,CACoBG,GAAwB1yG,EAAAqjD,UAAA,CAAAkvD,EAC5C,CAEA,MAAU,GAAAvyG,EAAAkqB,WAAA,CACV/O,EAAAnb,EAAAkqB,WAAA,KACU,CAEV,IAAAoqF,EAAAt0G,EAAAqjD,UAAA,CACA/L,MAAA,UAAA0zC,CAAA,EACA,OAAAA,EAAAC,KAAA,CAAA5tF,IAAA,GAAA2tF,EAAA8nB,QAAA,CAAAz1G,IAAA,GAEA2kB,GAAA,UAAAgpE,CAAA,EACA,OACA5tF,KAAA,qBACA4oB,GAAAglE,EAAA8nB,QAAA,CACAP,KAAAvnB,EAAAC,KAAA,CAEA,EAEAqpB,CAAAA,EAAAl2G,MAAA,IACA+c,CAAAA,EAAA,CACA/d,KAAA,sBACAysC,KAAA,QACA9f,aAAAuqF,CACA,EAEA,OAEAn5F,EAAAnb,EAGAmb,GACAwoC,EAAAlnD,IAAA,CAAA0e,EAEA,CAnOAk4F,CAAAA,GAAAC,kBAAAA,CAAA,GACM/B,GAAIvzD,EAAA,CACV66B,MAAA74E,CAAA,EACA,GACA,CAAAA,yBAAAA,EAAA5C,IAAA,EACA4C,2BAAAA,EAAA5C,IAAA,EACA4C,sBAAAA,EAAA5C,IAAA,GACA4C,EAAA+oB,MAAA,CACA,CAGY,GAAA62D,EAAAjI,EAAA,EAAM07B,EAAA,2CAElB,IAAAnzG,EAAAF,EAAA+oB,MAAA,CAAA7oB,KAAA,CAEY,GAAA0/E,EAAAjI,EAAA,EAAM,iBAAAz3E,EAAA,0BAOlB,IAGA,IAAA2+E,IAAA3+E,EAEA,CAAc,MAEdA,CAAAA,EAAA0Y,UAAA,OACA1Y,EAAA0Y,UAAA,QACA1Y,EAAA0Y,UAAA,UAEA1Y,CAAAA,EAAA,IAAA2+E,IAAA3+E,EAAAmzG,GAAA37E,IAAA,CAIA,CAGA,IAAAisB,EAAA,CAAiCvmD,KAAA,UAAA8C,MAAAA,CAAA,EACrB8Y,GAAMhZ,EAAA+oB,MAAA,CAAA46B,GAClB3jD,EAAA+oB,MAAA,CAAA46B,EACA,MACA,CAEA,GAAA3jD,qBAAAA,EAAA5C,IAAA,EACAi3G,EAAA,GAEA,IAAA1wD,EAAA,CACAvmD,KAAA,iBACAm3G,OAAA,CAAuBn3G,KAAA,aAAAC,KAAA,+BACvBsW,UAAA,CAAA3T,EAAA+oB,MAAA,EACAq+C,SAAA,EACA,CACApnE,CAAAA,EAAA+oB,MAAA,CAAA46B,EACA,MACA,CAIA,GACA3jD,qBAAAA,EAAA5C,IAAA,EACA,WAAA4C,GACAA,iBAAAA,EAAA7C,MAAA,CAAAC,IAAA,EACA4C,eAAAA,EAAAzC,QAAA,CAAAH,IAAA,EACA4C,WAAAA,EAAA7C,MAAA,CAAA09F,IAAA,CAAAx9F,IAAA,EACA2C,SAAAA,EAAA7C,MAAA,CAAAI,QAAA,CAAAF,IAAA,EACA2C,QAAAA,EAAAzC,QAAA,CAAAF,IAAA,CACA,CACA+2G,EAAA,GAEA,IAAAzwD,EAAA,CAAiCvmD,KAAA,aAAAC,KAAA,kBACrB2b,GAAMhZ,EAAA2jD,GAClB,KAAAxoC,OAAA,CAAAwoC,EACA,CACA,CACA,GAGA0wD,IACAhB,GACAe,CAAAA,EAAA,IAGAp2D,EAAAklC,IAAA,CAAAzmF,IAAA,EAoTAi3G,EAlTAL,EACA,CAAej2G,KAAA,UAAA8C,MAAAmzG,CAAA,EACf,CAAej2G,KAAA,aAAAC,KAAA,kBAiTf,CACAD,KAAA,sBACA4oB,GAAA,CAAS5oB,KAAA,aAAAC,KAAA,+BACTghE,UAAA,GACAzgC,MAAA,GACA4jC,OAAA,EAAcpkE,KAAA,aAAAC,KAAA,KAA8B,CAC5C6lF,KAAA,CACA9lF,KAAA,iBACA8lF,KAAA,CACA,CACA9lF,KAAA,cACAwC,KAAA,CACAxC,KAAA,mBACAo9E,KAAA,CACAp9E,KAAA,kBACAqjD,SAAA,SACA3L,OAAA,GACA/yC,SAAA,CAAyB3E,KAAA,aAAAC,KAAA,IACzB,EACAojD,SAAA,MACAi6B,MAAA,CAAoBt9E,KAAA,UAAA8C,MAAA,SACpB,EACAs0G,WAAA,CACAp3G,KAAA,kBACA2E,SAAA,CAAuB3E,KAAA,aAAAC,KAAA,IACvB,EACAo3G,UAAA,IACA,EAGA,CACAr3G,KAAA,eACA2tD,MAAA,CACA3tD,KAAA,iBACA8lF,KAAA,CACA,CACA9lF,KAAA,sBACAgE,WAAA,CACAhE,KAAA,gBACAm3G,OAAA,CAA2Bn3G,KAAA,aAAAC,KAAA,OAC3BsW,UAAA,EAA+BvW,KAAA,aAAAC,KAAA,KAA8B,CAE7D,EACA,CACAD,KAAA,kBACA2E,SAAA,CAA2B3E,KAAA,aAAAC,KAAA,IAC3B,EACA,EAEAopG,QAAA,CACArpG,KAAA,cACA23B,MAAA,KACAmuD,KAAA,CAAmB9lF,KAAA,iBAAA8lF,KAAA,GACnB,EACAwxB,UAAA,IACA,EAgBA,CACAt3G,KAAA,cACAwC,KAAA,CACAxC,KAAA,oBACAo9E,KAAA,CACAp9E,KAAA,oBACAo9E,KAAA,CACAp9E,KAAA,iBACAm3G,OAAwBvB,GAAsB,oBAC9Cr/F,UAAA,EAA6BvW,KAAA,UAAA8C,MAAA,KAA4B,CACzDknE,SAAA,EACA,EACA3mB,SAAA,KACAi6B,MAAA,CACAt9E,KAAA,iBACAm3G,OAAwBvB,GAAsB,oBAC9Cr/F,UAAA,EAA6BvW,KAAA,UAAA8C,MAAA,MAA6B,CAC1DknE,SAAA,EACA,CACA,EACA3mB,SAAA,KACAi6B,MAAA,CACAt9E,KAAA,iBACAm3G,OAAsBvB,GAAsB,oBAC5Cr/F,UAAA,EAA2BvW,KAAA,UAAA8C,MAAA,OAA8B,CACzDknE,SAAA,EACA,CACA,EACAotC,WAAA,CACAp3G,KAAA,kBACA2E,SAAA,CACA3E,KAAA,mBACAD,OAAA,CACAC,KAAA,gBACAm3G,OAAA,CAAyBn3G,KAAA,aAAAC,KAAA,OACzBsW,UAAA,EAA6BvW,KAAA,aAAAC,KAAA,KAA8Bq2G,EAAA,EAE3Dn2G,SAAA,CAAyBH,KAAA,aAAAC,KAAA,QACzB20G,SAAA,GACA5qC,SAAA,EACA,CACA,EACAqtC,UAAA,IACA,EACA,CACAr3G,KAAA,kBACA2E,SAAA,CAAqB3E,KAAA,aAAAC,KAAA,IACrB,EACA,CAEA,KAraA+2G,IACM,GAAAx0B,EAAAjI,EAAA,EACN27B,kBAAAA,EACA,6DAEAt1D,EAAAklC,IAAA,CAAAv/D,OAAA,CAwaA,CACAvmB,KAAA,sBACA2sB,aAAA,CACA,CACA3sB,KAAA,qBACA4oB,GAAA,CAAe5oB,KAAA,aAAAC,KAAA,kBACfk1G,KAAgBS,GAAsB,0BACtC,EACA,CACAnpE,KAAA,OACA,EACA,CACAzsC,KAAA,cACAwC,KAAA,CACAxC,KAAA,kBACAqjD,SAAA,IACA3L,OAAA,GACA/yC,SAAA,CAAmB3E,KAAA,aAAAC,KAAA,iBACnB,EACAm3G,WAAA,CACAp3G,KAAA,iBACA2E,SAAA,CACA3E,KAAA,gBACAm3G,OAAA,CAAmBn3G,KAAA,aAAAC,KAAA,SACnBsW,UAAA,CACA,CACAvW,KAAA,UACA8C,MACA,wIACA,EACA,CAEA,EACAu0G,UAAA,IACA,GAzUA,EAYA,SAAAN,EAAA5sF,CAAA,CAAA+rF,CAAA,CAAAqB,CAAA,EAuCA,IAAA1xF,EArCA,CACA7lB,KAAA,aACAqF,eAAA,CACArF,KAAA,oBACAC,KAAA,CAAeD,KAAA,gBAAAC,KAAA,aACf8E,WAAA,CACA,CACA/E,KAAA,qBACA2E,SAAA,CAAuB3E,KAAA,aAAAC,KAAA,QACvB,EACA,CACAgF,YAAA,EACA,EACAK,eAAA,CACAtF,KAAA,oBACAC,KAAA,CAAeD,KAAA,gBAAAC,KAAA,YACf,EACAmF,SAAA,CACA,CACApF,KAAA,aACAqF,eAAA,CACArF,KAAA,oBACAC,KAAA,CAAmBD,KAAA,gBAAAC,KAAA,qBACnB8E,WAAA,CACA,CACA/E,KAAA,qBACA2E,SAAA,CAA2B3E,KAAA,aAAAC,KAAA,QAC3B,EACA,CACAgF,YAAA,EACA,EACAK,eAAA,KACAF,SAAA,IAEA,EAKAmyG,GACA1xF,CAAAA,EAAA,CACA7lB,KAAA,wBACAwC,KAAA,CAAexC,KAAA,aAAAC,KAAA,aACfm3G,WAAAvxF,EACAwxF,UAAA,CACAr3G,KAAA,iBACAm3G,OAAA,CAAmBn3G,KAAA,aAAAC,KAAA,qBACnBsW,UAAA,EAAuBvW,KAAA,aAAAC,KAAA,SAAkC,CACzD+pE,SAAA,EACA,CACA,GAGA,IAAArlE,EAGAwlB,GAAA,CAAoBnqB,KAAA,aAAAC,KAAA,YAKpB,iBAAA0E,EAAA3E,IAAA,EACA2E,IAAAA,EAAAS,QAAA,CAAApE,MAAA,EACA2D,eAAAA,EAAAS,QAAA,IAAApF,IAAA,EAEA2E,CAAAA,EAAAA,EAAAS,QAAA,KAGA,IAAAoyG,EAAA,GAEIrD,GAAIxvG,EAAA,CACR82E,MAAA74E,CAAA,EACA,GACAA,4BAAAA,EAAA5C,IAAA,EACA4C,wBAAAA,EAAA5C,IAAA,EACA4C,uBAAAA,EAAA5C,IAAA,CAEA,YAAAgsG,IAAA,GAIAppG,CAAAA,oBAAAA,EAAA5C,IAAA,EAGA4C,mBAAAA,EAAA5C,IAAA,EAAA4C,EAAA60G,KAAA,GAEAD,CAAAA,EAAA,GAEA,CACA,GAGA,IAAA1qF,EAAA,CACA9sB,KAAA,sBACA4oB,GAAA,CAAW5oB,KAAA,aAAAC,KAAA,cACXmkE,OAAA,CACA,CACApkE,KAAA,oBACAo9E,KAAA,CAAiBp9E,KAAA,aAAAC,KAAA,SACjBq9E,MAAA,CAAkBt9E,KAAA,mBAAA+oB,WAAA,GAClB,EACA,CACA+8D,KAAA,CACA9lF,KAAA,iBACA8lF,KAAA,EAAgB9lF,KAAA,kBAAA2E,SAAAkhB,CAAA,EAA0C,CAE1D,EAEA,OACA,CACA7lB,KAAA,sBACAwgC,MAAAg3E,EACA5uF,GAAA,CAAa5oB,KAAA,aAAAC,KAAA,qBACbmkE,OAAA,EAAkBpkE,KAAA,aAAAC,KAAA,SAAkC,CACpD6lF,KAAA,CACA9lF,KAAA,iBACA8lF,KAAA,CACA,CACA9lF,KAAA,kBAGA2E,SAA+CA,CAC/C,EACA,CAEA,EACAuxG,YAAAA,EACA,CAAWl2G,KAAA,2BAAA8sB,YAAAA,CAAA,EACXA,EACA,CAEA,CAQA,SAAA4pF,GAAA91D,CAAA,CAAA3gD,CAAA,CAAA6C,CAAA,EACA89C,EAAAx0B,QAAA,EAAA7F,QAAA,CACAvmB,KAAA,QACA8C,MAAA7C,EAAA,IAAA6C,EACAssB,KAAA,CAAWsoF,oBAAA,GACX,EACA,CCnmBA,IAAAjzD,GAAA,qDAwcA,SAAAkzD,GAAA/0G,CAAA,EAEA,IAAAmb,EAEA,GAAAnb,wBAAAA,EAAA5C,IAAA,EAGA,IAAA4oB,EAAA+uF,GAAA/0G,EAAAzC,QAAA,EACA4d,EAAA,CACA/d,KAAA,mBACAD,OAAA43G,GAAA/0G,EAAA7C,MAAA,EACAI,SAAAyoB,EACAgsF,SAAAhsF,YAAAA,EAAA5oB,IAAA,CACAgqE,SAAA,EACA,CACA,MACAjsD,EADInb,sBAAAA,EAAA5C,IAAA,CACJ,CACAA,KAAA,UACA8C,MAAAF,EAAA1C,SAAA,CAAAD,IAAA,KAAA2C,EAAA3C,IAAA,CAAAA,IAAA,EAKc2oF,GAAgBhmF,EAAA3C,IAAA,EAC9B,CAASD,KAAA,aAAAC,KAAA2C,EAAA3C,IAAA,EACT,CAASD,KAAA,UAAA8C,MAAAF,EAAA3C,IAAA,EAIT,OADE23G,GAAMh1G,EAAAmb,GACRA,CACA,CAUA,SAAA85F,GAAAjvF,CAAA,MAIA/C,EAHA,IAAAiyF,EAAAlvF,EAAA7I,KAAA,MACAiH,EAAA,GAIA,OAAAA,EAAA8wF,EAAA92G,MAAA,GAEA,IAAA+S,EAAiB60E,GAAgBkvB,CAAA,CAAA9wF,EAAA,EACjC,CAAShnB,KAAA,aAAAC,KAAA63G,CAAA,CAAA9wF,EAAA,EACT,CAAShnB,KAAA,UAAA8C,MAAAg1G,CAAA,CAAA9wF,EAAA,EACTnB,EAAAA,EACA,CACA7lB,KAAA,mBACAD,OAAA8lB,EACA1lB,SAAA4T,EACA6gG,SAAA75C,CAAAA,CAAA/zC,CAAAA,GAAAjT,YAAAA,EAAA/T,IAAA,EACAgqE,SAAA,EACA,EACAj2D,CACA,CAGA,MADE,GAAAyuE,EAAAjI,EAAA,EAAM10D,EAAA,mBACRA,CACA,CAYA,SAAS+xF,GAAMhxF,CAAA,CAAAC,CAAA,EACf,IAAAk+C,EAAA,yCACA/9C,EAAA,GAEA,OAAAA,EAAA+9C,EAAA/jE,MAAA,GACA,IAAA+3D,EAAAgM,CAAA,CAAA/9C,EAAA,CACA+xC,KAAAnyC,GAEAC,CAAAA,CAAA,CAAAkyC,EAAA,CAAAnyC,CAAA,CAAAmyC,EAAA,CAEA,CACA,CCjmBO,SAASg/C,GAAcz3G,CAAO,EAEnC,GAAM,CAAC03G,YAAAA,CAAW,CAAE9B,aAAAA,CAAY,CAAC,CAAG51G,GAAW,CAAC,EAUhD,OAAO,SAAUsgD,CAAI,CAAExmB,CAAI,EAczB,IAbA69E,SD8EGr3D,CAAA,CAAAtgD,CAAA,EACP,IAAAoiF,EAAApiF,GAAA,GACA43G,EAAAx1B,cAAAA,EAAAy1B,OAAA,CAEAC,EAAA,GAEAl+C,EAAA,GAEEi6C,GAAIvzD,EAAA,CACN66B,MAAA74E,CAAA,EACA,GAAAA,YAAAA,EAAA5C,IAAA,EACA,IAAAosB,EAAAxpB,EAAAwpB,QAAA,KACApF,EAAA,GAEA,OAAAA,EAAAoF,EAAAprB,MAAA,GACAyjD,GAAA/kC,SAAA,GAEA,IAAAO,EAAAwkC,GAAA7kC,IAAA,CAAAwM,CAAA,CAAApF,EAAA,CAAAlkB,KAAA,EAEA,KAAAmd,GAGAm4F,CAAA,CAAAn4F,CAAA,KAAAA,CAAA,IACAA,EAAAwkC,GAAA7kC,IAAA,CAAAwM,CAAA,CAAApF,EAAA,CAAAlkB,KAAA,CAEA,CAEA,GAAAs1G,EAAAl/B,UAAA,EACA,GAAAk/B,cAAAA,EAAAl/B,UAAA,EAGA,GAFAg/B,EAAA,GAEAE,EAAA9+E,GAAA,CACA,6DAGA,GAAA8+E,EAAAC,OAAA,CACA,YACA,oDAGA,MAAY,GAAAD,YAAAA,EAAAl/B,UAAA,CAGZ,IAFAg/B,EAAA,GAEAE,EAAA/B,eAAA,CACA,YACA,mDAEA,MAEA,YACA,4BACA+B,EAAAl/B,UAAA,CACA,wCAIA,CACA,EAEA+M,MAAArjF,CAAA,MAmHA3C,EAMAsa,EA6FA48F,EArNA,GAAAv0G,YAAAA,EAAA5C,IAAA,EAEA,IAAAimD,EAAA,GAkCA,GAhCAiU,EAAA3F,QAAA,EACAtO,EAAA5mD,IAAA,EACAW,KAAA,kBACAy1G,SAAA,CAAuBz1G,KAAA,aAAAC,KAAA,YACvB4tF,MAAA,CAAoB7tF,KAAA,aAAAC,KAAA,YACpB,GAGAi6D,EAAA5gC,GAAA,EACA2sB,EAAA5mD,IAAA,EACAW,KAAA,kBACAy1G,SAAA,CAAuBz1G,KAAA,aAAAC,KAAA,OACvB4tF,MAAA,CAAoB7tF,KAAA,aAAAC,KAAA,OACpB,GAGAi6D,EAAA3gC,IAAA,EACA0sB,EAAA5mD,IAAA,EACAW,KAAA,kBACAy1G,SAAA,CAAuBz1G,KAAA,aAAAC,KAAA,QACvB4tF,MAAA,CAAoB7tF,KAAA,aAAAC,KAAA,QACpB,GAGAi6D,EAAAo+C,MAAA,EACAryD,EAAA5mD,IAAA,EACAW,KAAA,kBACAy1G,SAAA,CAAuBz1G,KAAA,aAAAC,KAAA,UACvB4tF,MAAA,CAAoB7tF,KAAA,aAAAC,KAAA,UACpB,GAGAgmD,EAAAjlD,MAAA,IACA,IAAAu3G,EAAA,EAEA,KAAAA,EAAA31G,EAAAkjF,IAAA,CAAA9kF,MAAA,GACA,IAAAo8C,EAAAx6C,EAAAkjF,IAAA,CAAAyyB,EAAA,CAEA,iBAAAn7D,GAAAA,EAAAuJ,SAAA,CACA4xD,SAEA,KAEA,CAEA31G,EAAAkjF,IAAA,CAAAhkC,MAAA,CAAAy2D,EAAA,GACAv4G,KAAA,oBACAimD,WAAAA,EACAt6B,OAAA,CACA3rB,KAAA,UACA8C,MACA,CAAAs1G,EAAA/B,eAAA,EACA3zB,EAAA81B,YAAA,EACA,SACA91B,CAAAA,EAAAs1B,WAAA,mCACA,CACA,EACA,CACA,CAEA,GAAAp1G,eAAAA,EAAA5C,IAAA,EAAA4C,gBAAAA,EAAA5C,IAAA,CACA,OAIA,IAAAoF,EAAA,GACA4hB,EAAA,GAGA,OAAAA,EAAApkB,EAAAwC,QAAA,CAAApE,MAAA,GACA,IAAAo8C,EAAAx6C,EAAAwC,QAAA,CAAA4hB,EAAA,CAEA,GAAAo2B,2BAAAA,EAAAp9C,IAAA,CAEA,uBAAAo9C,EAAAp5C,UAAA,CAAAhE,IAAA,EACAoF,EAAA/F,IAAA,CAAA+9C,EAAAp5C,UAAA,OAEU,GAAAo5C,YAAAA,EAAAp9C,IAAA,EACV,IAAA8C,EAAAs6C,EAAAt6C,KAAA,CAEAib,OAAA,YAEAA,OAAA,yBAEAA,OAAA,cAEAA,OAAA,YAEAA,OAAA,YAEAA,OAAA,YAGA,GAAAjb,EAAA,CAEA,IAAAw5B,EAAA,CAA0Bt8B,KAAA,UAAA8C,MAAAA,CAAA,EACd80G,GAAMx6D,EAAA9gB,GAClBl3B,EAAA/F,IAAA,CAAAi9B,EACA,CACA,KACU,GAAAkmD,EAAAjI,EAAA,EACVn9B,eAAAA,EAAAp9C,IAAA,EACAo9C,gBAAAA,EAAAp9C,IAAA,EACAo9C,mBAAAA,EAAAp9C,IAAA,EAEAoF,EAAA/F,IAAA,CAAA+9C,EAEA,CAKA,IAAA2nB,EAAA,GAEA4X,EAAA,GAKA,GAAA/5E,eAAAA,EAAA5C,IAAA,MAaAm6D,EARA,GAAAl6D,eAAAA,CAJAA,EAAA03G,GAAA/0G,EAAAyC,cAAA,CAAApF,IAAA,GAIAD,IAAA,WAAAwC,IAAA,CAAAvC,EAAAA,IAAA,GAEA,IAAAgD,EAAA,CAAwBjD,KAAA,UAAA8C,MAAA7C,EAAAA,IAAA,EACd23G,GAAM33G,EAAAgD,GAChBhD,EAAAgD,CACA,CAIA,IAAA8B,EAAAnC,EAAAyC,cAAA,CAAAN,UAAA,CACAiiB,EAAA,GAIA,OAAAA,EAAAjiB,EAAA/D,MAAA,GACA,IAAAi8B,EAAAl4B,CAAA,CAAAiiB,EAAA,CAEA,GAAAiW,uBAAAA,EAAAj9B,IAAA,CACAi9B,qBAAAA,EAAAt4B,QAAA,CAAA3E,IAAA,CACA+kE,EAAA1lE,IAAA,IAAA49B,EAAAt4B,QAAA,CAAAokB,UAAA,EAEAg8C,EAAA1lE,IAAA,EAA2BW,KAAA,gBAAA2E,SAAAs4B,EAAAt4B,QAAA,GAG3Bw1D,EAAA,OACY,CACZ,IAAApmD,EAAA0kG,SAsKA71G,CAAA,MAEAE,EAEA,GAAAF,EAAAE,KAAA,EACA,GAAAF,2BAAAA,EAAAE,KAAA,CAAA9C,IAAA,EACA,IAAA04G,EAAA91G,EAAAE,KAAA,CAAAkB,UAAA,CACM,GAAAw+E,EAAAjI,EAAA,EACNm+B,uBAAAA,EAAA14G,IAAA,CACA,iDAEA8C,EAAA41G,CACA,KAEA,CACA,IAAAC,EAAA/1G,EAAAE,KAAA,CACM,GAAA0/E,EAAAjI,EAAA,EACNo+B,eAAAA,EAAA34G,IAAA,EAAA24G,gBAAAA,EAAA34G,IAAA,CACA,kEAEA8C,EAAA61G,EACA,OAAA71G,EAAAub,GAAA,OAKAvb,EAAA,CAAa9C,KAAA,UAAA8C,MAAA,IAIb,IAAAyjD,EAAA,CACAvmD,KAAA,WACAua,IAAAo9F,GAAA/0G,EAAA3C,IAAA,EACA6C,MAAAA,EACA2pC,KAAA,OACAM,OAAA,GACA4oE,UAAA,GACAf,SAAA,EACA,EAEA,OADEgD,GAAMh1G,EAAA2jD,GACRA,CACA,EA/MAtpB,GAEA,GACAi7E,GACAnkG,eAAAA,EAAAwG,GAAA,CAAAva,IAAA,EACA+T,QAAAA,EAAAwG,GAAA,CAAAta,IAAA,CACA,CACA,GAAAk6D,EACA,YACA,wDAIA,IAAAr3D,EAAAiR,EAAAjR,KAAA,CAEc,GAAA0/E,EAAAjI,EAAA,EACdz3E,sBAAAA,EAAA9C,IAAA,EACA8C,iBAAAA,EAAA9C,IAAA,EACA8C,kBAAAA,EAAA9C,IAAA,EACA8C,gBAAAA,EAAA9C,IAAA,EAGAua,EAAAzX,CACA,MACAiiE,EAAA1lE,IAAA,CAAA0U,EAEA,CACA,CACA,MAEAmkG,GACAh+C,EAAA3F,QAAA,IACAt0D,EAAA,CAAgBD,KAAA,aAAAC,KAAA,cAEhBA,EAAA43G,GACAO,EAAAC,OAAA,EAAA31B,EAAAyzB,UAAA,oBA0BA,GAtBA+B,EACA9yG,EAAApE,MAAA,IACA+jE,EAAA1lE,IAAA,EACAW,KAAA,WACAua,IAAA,CAAkBva,KAAA,aAAAC,KAAA,YAClB6C,MACAsC,EAAApE,MAAA,GACA,CAAmBhB,KAAA,kBAAA4gC,SAAAx7B,CAAA,EACnBA,CAAA,IACAqnC,KAAA,OACAM,OAAA,GACA4oE,UAAA,GACAf,SAAA,EACA,GAGAj4B,EAAAv3E,EAMA8yG,EAAA,CACAv7B,EAAAt9E,IAAA,EAAyBW,KAAA,mBAAA+oB,WAAAg8C,CAAA,GAEzBxqD,EACAoiE,EAAAt9E,IAAA,CAAAkb,GACUmoE,EAAAs1B,WAAA,EACVr7B,EAAAt9E,IAAA,EAA2BW,KAAA,aAAAC,KAAA,cAG3B,IAAA24G,EAAAxzG,EAAApE,MAAA,GAEA,GAAA0hF,EAAAs1B,WAAA,EACA99C,EAAAo+C,MAAA,IACAnB,EAAA,CACAn3G,KAAA,aACAC,KAAA,SACA,EACA08E,EAAAt9E,IAAA,EAA2BW,KAAA,UAAA8C,MAAA81G,CAAA,GAG3B,IAAAjtF,EAAA,CACA3rB,KAAA,mBACA+oB,WAAA,CACA,CACA/oB,KAAA,WACA+sC,OAAA,GACA4oE,UAAA,GACAf,SAAA,GACAnoE,KAAA,OACAlyB,IAAA,CAAsBva,KAAA,aAAAC,KAAA,YACtB6C,MAAA,CACA9C,KAAA,UACA8C,MAAA4/E,EAAAm2B,QAAA,eACA,CACA,EACA,CAGAj2G,CAAAA,EAAA8xE,GAAA,EACA/oD,EAAA5C,UAAA,CAAA1pB,IAAA,CACA,CACAW,KAAA,WACA+sC,OAAA,GACA4oE,UAAA,GACAf,SAAA,GACAnoE,KAAA,OACAlyB,IAAA,CAAsBva,KAAA,aAAAC,KAAA,cACtB6C,MAAA,CAAwB9C,KAAA,UAAA8C,MAAAF,EAAA8xE,GAAA,CAAAxzE,KAAA,CAAAuqB,IAAA,CACxB,EACA,CACAzrB,KAAA,WACA+sC,OAAA,GACA4oE,UAAA,GACAf,SAAA,GACAnoE,KAAA,OACAlyB,IAAA,CAAsBva,KAAA,aAAAC,KAAA,gBACtB6C,MAAA,CAAwB9C,KAAA,UAAA8C,MAAAF,EAAA8xE,GAAA,CAAAxzE,KAAA,CAAAkqB,MAAA,GACxB,GAIAuxD,EAAAt9E,IAAA,CAAAssB,EAAA,CAAmC3rB,KAAA,kBACnC,MAAU44G,GACV1+C,EAAA3gC,IAAA,IACA49E,EAAA,CAAoBn3G,KAAA,aAAAC,KAAA,WAEpBi6D,EAAA5gC,GAAA,IACA69E,EAAA,CAAoBn3G,KAAA,aAAAC,KAAA,QAEpB,MAGA8kE,EAAA/jE,MAAA,GACA27E,EAAAp2D,OAAA,EAA8BvmB,KAAA,mBAAA+oB,WAAAg8C,CAAA,GACpB4X,EAAA37E,MAAA,IACV27E,EAAAp2D,OAAA,EAA8BvmB,KAAA,UAAA8C,MAAA,OAG9Bq0G,EAAAU,GACAO,EAAA9+E,GAAA,EAAAopD,EAAAzT,MAAA,yBAIA0N,EAAAp2D,OAAA,CAAAtmB,GAEA,IAAAqc,EAAA,CACAtc,KAAA,iBACAm3G,OAAAA,EACA5gG,UAAAomE,EACA3S,SAAA,EACA,EACM4tC,GAAMh1G,EAAA0Z,GACZ,KAAAyB,OAAA,CAAAzB,EACA,CACA,EACA,EChcaskC,EAAM,CAACo3D,YAAAA,EAAaa,SAAUz+E,EAAK8mD,OAAO,CAAC,EAAE,GAIlDtgC,EAAKx0B,QAAQ,EACfw0B,CAAAA,EAAKx0B,QAAQ,CAAGw0B,EAAKx0B,QAAQ,CAAC8tB,MAAM,CAAC,SAAU2U,CAAC,MACtCA,EAAR,MAAO,SAACA,CAAAA,EAAAA,EAAEz/B,IAAI,GAANy/B,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAQ6oD,mBAAmB,CACrC,IAMExB,kBAAAA,EAAkC,CACpC,IAAIlvF,EAAQ,EAKZ,KAAOA,EAAQ45B,EAAKklC,IAAI,CAAC9kF,MAAM,EAAE,CAC/B,IAAMo8C,EAAQwD,EAAKklC,IAAI,CAAC9+D,EAAM,CAC9B,GAAI,cAAeo2B,GAASA,EAAMuJ,SAAS,CACzC3/B,SAEA,KAEJ,CAEA,IAAM8F,EAAc8zB,EAAKklC,IAAI,CAAC9+D,EAAM,CAGlC8F,GACAA,sBAAAA,EAAY9sB,IAAI,EAChB,iBAAO8sB,EAAYnB,MAAM,CAAC7oB,KAAK,EAC/B,wBAAwBN,IAAI,CAACsqB,EAAYnB,MAAM,CAAC7oB,KAAK,GAErD89C,CAAAA,EAAKklC,IAAI,CAAC9+D,EAAM,CAAG,CACjBhnB,KAAM,sBACNysC,KAAM,QACN9f,aAAc2oF,GACZxoF,EAAYm5B,UAAU,CACtB2vD,GAAuB,CAAC,YAAa,EAAE,EAE3C,EAEJ,CACF,CACF,CC9EO,SAAAkD,GAAAC,CAAA,EACP,IAEA37B,EAFAp2D,EAAA,GAIA,OAAAA,EAAA+xF,EAAA/3G,MAAA,GACA,IAAAs8E,EAAAy7B,CAAA,CAAA/xF,EAAA,CACAo2D,EAAAA,EAAA,CAAmBp9E,KAAA,mBAAAo9E,KAAAA,EAAA/5B,SAAA,IAAAi6B,MAAAA,CAAA,EAAsDA,CACzE,CAGA,MADE,GAAAkF,EAAAjI,EAAA,EAAM6C,EAAA,iDACRA,CACA,CC0CO,SAAA47B,GAAA14G,CAAA,EACP,IAAS03G,YAAAA,CAAA,CAAA9B,aAAAA,CAAA,CAAA+C,qBAAAA,CAAA,EAAiD34G,EAU1D,gBAAAsgD,CAAA,CAAAxmB,CAAA,MAQA8+E,EANA,IAAAC,EAAsB7E,GAAO1zD,GAE7Bw4D,EAAA,GACAC,EAAA,GACAC,EAAA,GAkaA,GA9ZInF,GAAIvzD,EAAA,CACR66B,MAAA74E,CAAA,EAEA,IAAA22G,EACAJ,EAAAv0F,GAAA,CAAAvmB,GAAA,CAAAuE,GAIAA,CAAAA,wBAAAA,EAAA5C,IAAA,EACA4C,uBAAAA,EAAA5C,IAAA,EACA4C,4BAAAA,EAAA5C,IAAA,IAEAo5G,EAAA/5G,IAAA,EACAm6G,WAAA,GACAC,yBAAA,IAAA7iG,IACAhU,KAAAA,EACA82G,QAAA,GACAjF,WAAA,GACAkF,KAAA,KAKAC,GAAAh3G,EAAA,eACA22G,GACA,CAAAM,GAAAN,EAAA,cAEAH,CAAA,IAAAI,UAAA,CAAAn6G,IAAA,eAIA,IAAAy6G,EAAAV,CAAA,IACA,GACA,GACA,IAAAU,EAAAl3G,IAAA,uBACAq2G,CAAA,IAKAM,IACAA,EAAA32G,IAAA,CAAAA,EACAs2G,EAAAK,GAGAL,GAAAt2G,eAAAA,EAAA5C,IAAA,GACA,IAAAC,EAAA2C,EAAAyC,cAAA,CAAApF,IAAA,CAGA,GAAAA,wBAAAA,EAAAD,IAAA,EAEA,IAAA61G,EAAA,GAGA,KAAA51G,wBAAAA,EAAAD,IAAA,EACA61G,EAAAtvF,OAAA,CAAAtmB,EAAAE,QAAA,CAAAF,IAAA,EACAA,EAAAA,EAAAF,MAAA,CAGA81G,EAAAtvF,OAAA,CAAAtmB,EAAAA,IAAA,EACA,IAAA85G,EAAAlE,EAAA13F,IAAA,MACAyK,EAAA3oB,EAAAA,IAAA,CAEA+5G,EAAAH,GAAAX,EAAAtwF,GAEA,IAAA1iB,OAAAkhB,MAAA,CAAA0yF,EAAArF,UAAA,CAAAsF,GAAA,CAEA,IAAAE,EACAf,EAAA/yF,MAAA,CAGA,EAAA6zF,GAGAC,GACAA,wBAAAA,EAAAr3G,IAAA,CAAA5C,IAAA,EACA45G,GAAAK,EAAAr3G,IAAA,wBAEAk3G,CAAAA,EAAArF,UAAA,CAAAsF,EAAA,EAAoDhwC,UAAA,GAAAnnE,KAAAA,CAAA,EAEpD,CAEAk3G,EAAAJ,OAAA,CAAA5nF,QAAA,CAAAlJ,IAAAoxF,GACAF,EAAAJ,OAAA,CAAAr6G,IAAA,CAAAupB,EAEA,MAEA,GAAA3oB,sBAAAA,EAAAD,IAAA,OAOA,GAAmB4oF,GAAgB3oF,EAAAA,IAAA,aAAAuC,IAAA,CAAAvC,EAAAA,IAAA,GACnC,IAAA2oB,EAAA3oB,EAAAA,IAAA,CAEA45G,GAAAX,EAAAtwF,KAIA,cAAAA,GACA1iB,OAAAkhB,MAAA,CAAA0yF,EAAArF,UAAA,CAAA7rF,IAEAkxF,CAAAA,EAAArF,UAAA,CAAA7rF,EAAA,EAAgDmhD,UAAA,GAAAnnE,KAAAA,CAAA,GAGhDk3G,EAAAN,UAAA,CAAA1nF,QAAA,CAAAlJ,IACAkxF,EAAAN,UAAA,CAAAn6G,IAAA,CAAAupB,GAGA,MAAY,GAAAhmB,EAAAwsB,IAAA,EAAAxsB,EAAAwsB,IAAA,CAAA8qF,eAAA,MAIA,CACZ,IAAAtxF,EAAA3oB,EAAAA,IAAA,CAEA65G,EAAAH,IAAA,CAAA7nF,QAAA,CAAAlJ,IACAkxF,EAAAH,IAAA,CAAAt6G,IAAA,CAAAupB,GAIA,IAAAuxF,EAAA,eAAAvxF,EAAA,CACA,GAAgBggE,CAAgB,IAAhBA,GAAgBhgE,GAAA,CAChC,IAAAwxF,EACAN,EAAAL,wBAAA,CAAAp7G,GAAA,CAAAuqB,EACA3M,MAAAA,IAAAm+F,IACAA,EAAA,aAAoDN,EAAAL,wBAAA,CAAA/lE,IAAA,CAA4C,EAChGomE,EAAAL,wBAAA,CAAA55G,GAAA,CACA+oB,EACAwxF,IAIAD,EAAA,CAAAC,EAAA,CAGAx3G,EAAAyC,cAAA,CAAApF,IAAA,CACc61G,GAAyBqE,GAEvCv3G,EAAA0C,cAAA,EACA1C,CAAAA,EAAA0C,cAAA,CAAArF,IAAA,CACgB61G,GAAyBqE,EAAA,CAEzC,CACA,CACA,EACAl0B,MAAArjF,CAAA,EAEA,IAAA24B,EAAA,GAEA0jD,EAAA,GAEAtC,EAAA,GAEAhwD,EAAA,GAOA,GALAusF,GAAAA,EAAAt2G,IAAA,GAAAA,GAEAs2G,CAAAA,EAA2CA,EAAA/yF,MAAA,EAI3CvjB,wBAAAA,EAAA5C,IAAA,EACA4C,uBAAAA,EAAA5C,IAAA,EACA4C,4BAAAA,EAAA5C,IAAA,CACA,KAIAC,EAgKAsa,EAlKA,IAAA84B,EAAA+lE,CAAA,CAAAA,EAAAp4G,MAAA,IAIA,IAAAf,KAAAozC,EAAAsmE,IAAA,CAAAU,IAAA,GACA9+E,EAAAl8B,IAAA,EACAW,KAAA,WACAysC,KAAA,OACAlyB,IAAmBquE,GAAgB3oF,GACnC,CAAmBD,KAAA,aAAAC,KAAAA,CAAA,EACnB,CAAmBD,KAAA,UAAA8C,MAAA7C,CAAA,EACnB6C,MAAA,CAAsB9C,KAAA,UAAA8C,MAAA7C,CAAA,EACtB8sC,OAAA,GACA4oE,UAAA,GACAf,SAAA,EACA,GAKA,IAAA30G,KAFAg/E,EAAA5/E,IAAA,IAAAg0C,EAAAmmE,UAAA,EAEAnmE,EAAAqmE,OAAA,EAGAz6B,EAAAntD,QAAA,CAAA7xB,IACAg/E,EAAA5/E,IAAA,CAAAY,GAIAg/E,EAAAo7B,IAAA,GAGA,IAAAC,EAAA,GAEA,GACA/+E,EAAAv6B,MAAA,IACAi+E,EAAAj+E,MAAA,IACAqyC,EAAAomE,wBAAA,CAAA/lE,IAAA,GACA,KAyCA6mE,EArBA,GAnBAtB,IACAI,EAAA,GACA18B,EAAAt9E,IAAA,EACAW,KAAA,iBACAm3G,OAAA,CAAyBn3G,KAAA,aAAAC,KAAA,sBACzBsW,UAAA,GACAyzD,SAAA,EACA,IAMA4vC,CAAAA,GAAAvmE,EAAAzwC,IAAA,gBACAg3G,GAAAvmE,EAAAzwC,IAAA,wBAEA+5E,EAAAt9E,IAAA,CAA8Bu2G,GAAsB,yBAGpDr6E,EAAAv6B,MAAA,IAAA27E,EAAA37E,MAAA,GACA,QAAAqnD,KAAAs0B,EACAphD,EAAAl8B,IAAA,EAA+BW,KAAA,gBAAA2E,SAAA0jD,CAAA,GAM/B,IAAAmyD,EACAj/E,EAAAv6B,MAAA,GACA,CAAmBhB,KAAA,mBAAA+oB,WAAAwS,CAAA,EAGnB,CACAv7B,KAAA,oBACAqjD,SAAA,KACA+5B,KAAAT,CAAA,IACAW,MAAA,CAA4Bt9E,KAAA,mBAAA+oB,WAAA,GAC5B,EAyCA,GA7BAk2D,EAAAj+E,MAAA,IACAu5G,CAAAA,EAAA,CACAv6G,KAAA,gBACA+oB,WAAAk2D,EAAAr6D,GAAA,UAAA3kB,CAAA,EACA,OACAD,KAAA,WACAysC,KAAA,OACAlyB,IAAA,CACAva,KAAA,aACAC,KAAAA,cAAAA,EAAA,UAAAA,CACA,EACA6C,MAAA,CAA4B9C,KAAA,aAAAC,KAAAA,CAAA,EAC5B8sC,OAAA,GACA4oE,UAAA11G,cAAAA,EACA20G,SAAA,EACA,CACA,EACA,GAGAvhE,EAAAsmE,IAAA,CAAA34G,MAAA,KACA2rB,EAAAttB,IAAA,EACAW,KAAA,qBACA4oB,GAAA,CAAqB5oB,KAAA,aAAAC,KAAA,eACrBk1G,KAAAqF,CACA,GACAA,EAAA,CAAgCx6G,KAAA,aAAAC,KAAA,gBAGhC25G,GAAAvmE,EAAAzwC,IAAA,sBACA,QAAAgmB,EAAA6xF,EAAA,MACApnE,EAAAomE,wBAAA,CACA,CAAAY,IAAA,WAAAz8F,EAAA,EAAAtD,EAAA,EACA,OAAAsD,EAAA88F,aAAA,CAAApgG,EACA,GAMAqS,EAAAttB,IAAA,EACAW,KAAA,qBACA4oB,GAAA,CACA5oB,KAAA,aACAC,KAAAw6G,CACA,EACAtF,KAAA,CACAn1G,KAAA,mBACAD,OAAA,CAA6BC,KAAA,aAAAC,KAAA,eAC7BE,SAAA,CAA+BH,KAAA,UAAA8C,MAAA8lB,CAAA,EAC/BgsF,SAAA,GACA5qC,SAAA,EACA,CACA,GAIAuwC,GACA5tF,EAAAttB,IAAA,EACAW,KAAA,qBACA4oB,GAAA2xF,EACApF,KAAAqF,CACA,GAGA7tF,EAAA3rB,MAAA,IACAs5G,EAAAj7G,IAAA,EACAW,KAAA,sBACAysC,KAAA,QACA9f,aAAAA,CACA,EAEA,CAMA,IAAApS,KAAA84B,EAAAohE,UAAA,CACA,GAAAvuG,OAAAkhB,MAAA,CAAAisB,EAAAohE,UAAA,CAAAl6F,GAAA,CACA,IAAA6D,EAAA7D,EAAAwF,KAAA,MACAiH,EAAA,EACA,OAAAA,EAAA5I,EAAApd,MAAA,GACA,IAAAq6E,EAAAj9D,EAAA7c,KAAA,GAAAylB,GAAA7I,IAAA,MACAjY,OAAAkhB,MAAA,CAAAisB,EAAAohE,UAAA,CAAAp5B,IACAhoC,CAAAA,EAAAohE,UAAA,CAAAp5B,EAAA,EACAtR,UAAA,GACAnnE,KAAAywC,EAAAohE,UAAA,CAAAl6F,EAAA,CAAA3X,IAAA,CACA,CAEA,CACA,CAGA,IAAA6xG,EAAAvuG,OAAAyT,IAAA,CAAA05B,EAAAohE,UAAA,EAAA4F,IAAA,GACArzF,EAAA,GACA,OAAAA,EAAAytF,EAAAzzG,MAAA,GACA,IAAA4nB,EAAA6rF,CAAA,CAAAztF,EAAA,CACA2C,EAAA0pB,EAAAohE,UAAA,CAAA7rF,EAAA,CACAi2D,EAA0BR,EAAkB8I,GAAkBx9D,EAAA/mB,IAAA,GAE9D+5E,EAAA,CACA,CAAe38E,KAAA,UAAA8C,MAAA8lB,CAAA,EACf,CAAe5oB,KAAA,UAAA8C,MAAA6mB,EAAAogD,SAAA,EACf,CAEAuvC,EAAA,GAEAtB,GAAAn5B,GACAlC,EAAAt9E,IAAA,EAA+BW,KAAA,UAAA8C,MAAA+7E,CAAA,GAG/By7B,EAAAj7G,IAAA,EACAW,KAAA,cACAwC,KAAA,CACAxC,KAAA,kBACAqjD,SAAA,IACA3L,OAAA,GACA/yC,SAA0BixG,GAAsBhtF,EAAA7I,KAAA,MAChD,EACAq3F,WAAA,CACAp3G,KAAA,sBACAgE,WAAA,CACAhE,KAAA,iBACAm3G,OAAA,CAA2Bn3G,KAAA,aAAAC,KAAA,wBAC3BsW,UAAAomE,EACA3S,SAAA,EACA,CACA,EACAqtC,UAAAp7F,KAAAA,CACA,EACA,CAEAq+F,EAAAt5G,MAAA,KAEA,mBAAA25G,EAAA70B,IAAA,CAAA9lF,IAAA,EACA26G,CAAAA,EAAA70B,IAAA,EACA9lF,KAAA,iBACA8lF,KAAA,EAAwB9lF,KAAA,kBAAA2E,SAAAg2G,EAAA70B,IAAA,EAAkD,CAC1E,EAGA60B,EAAA70B,IAAA,CAAAA,IAAA,CAAAv/D,OAAA,IAAA+zF,IAGAlB,EAAA35G,GAAA,EACA,CACA,CACA,GAGA45G,GAAAJ,GACAr4D,EAAAklC,IAAA,CAAAv/D,OAAA,CACAq0F,SAwFA3B,CAAA,CAAA/C,CAAA,EAEA,IAAAjwD,EAAA,CACA,CACAjmD,KAAA,kBACAy1G,SAAA,CAAiBz1G,KAAA,aAAAC,KAAA,oBACjB4tF,MAAA,CAAc7tF,KAAA,aAAAC,KAAA,qBACd,EACA,CAEA,MAAAi2G,kBAAAA,EACA,CACAl2G,KAAA,sBACAysC,KAAA,QACA9f,aAAsB2oF,GACtBrvD,EACU2vD,GAAsB,iBAEhC,EACA,CACA51G,KAAA,oBACAimD,WAAAA,EACAt6B,OAAA,CAAiB3rB,KAAA,UAAA8C,MAAAm2G,CAAA,CACjB,CACA,EAhHAA,EAAA/C,IAKAoD,EAAA,CAEA,IAAAr1E,EAAA,CACA,CAASjkC,KAAA,UAAA8C,MAAA,aACT,CACA9C,KAAA,wBACAwC,KAAA,CAAiBxC,KAAA,aAAAC,KAAA,aACjBm3G,WAAA,CAAuBp3G,KAAA,UAAA8C,MAAA,aACvBu0G,UAAA,CAAsBr3G,KAAA,UAAA8C,MAAA,SACtB,EACA,CAAS9C,KAAA,UAAA8C,MAAA,MACT,CAAS9C,KAAA,aAAAC,KAAA,MACT,CACAD,KAAA,UACA8C,MACA,oEACA,EACA,CAGA65E,EAAA,CACA,CAAS38E,KAAA,aAAAC,KAAA,MACT,CAASD,KAAA,aAAAC,KAAA,aACT,CAEA+3G,IACA/zE,EAAA5kC,IAAA,EACAW,KAAA,wBACAwC,KAAA,CAAiBxC,KAAA,aAAAC,KAAA,SACjBm3G,WAAsB0B,GAAgB,CACtC,CAAa94G,KAAA,UAAA8C,MAAA,uCACb,CAAa9C,KAAA,aAAAC,KAAA,SACb,CACAD,KAAA,UACA8C,MAAA,CAAAs3B,EAAA3T,IAAA,UAAA2T,EAAA3T,IAAA,QACA,EACA,EACA4wF,UAAA,CAAsBr3G,KAAA,UAAA8C,MAAA,GACtB,GAEA65E,EAAAt9E,IAAA,EAAyBW,KAAA,aAAAC,KAAA,WAGzB2gD,EAAAklC,IAAA,CAAAzmF,IAAA,EACAW,KAAA,sBACA4oB,GAAA,CAAa5oB,KAAA,aAAAC,KAAA,wBACbghE,UAAA,GACAzgC,MAAA,GACA4jC,OAAAuY,EACAmJ,KAAA,CACA9lF,KAAA,iBACA8lF,KAAA,CACA,CACA9lF,KAAA,iBACA2E,SAAA,CACA3E,KAAA,gBACAm3G,OAAA,CAAyBn3G,KAAA,aAAAC,KAAA,SACzBsW,UAAA,CAA4BuiG,GAAgB70E,GAAA,CAE5C,EACA,CAEA,EACA,CAEA,kBAAAiyE,GACAt1D,EAAAklC,IAAA,CAAAv/D,OAAA,EACAvmB,KAAA,sBACAgE,WAAA,CAAqBhE,KAAA,UAAA8C,MAAA,cACrB6jD,UAAA,YACA,EAEA,CACA,CA4CA,SAAAizD,GAAAh3G,CAAA,CAAA3C,CAAA,EACA,MAAA86D,CAAAA,CAAAn4D,CAAAA,GAAA,OAAAA,GAAAA,EAAAgmB,EAAA,EAAAhmB,EAAAgmB,EAAA,CAAA3oB,IAAA,GAAAA,CAAA,CACA,CAUA,SAAA45G,GAAAxmE,CAAA,CAAAzqB,CAAA,EAEA,IAAAswF,EAAA7lE,EAEA,KAAA6lE,GAAA,CACA,GAAAA,EAAAvsF,YAAA,CAAAzP,GAAA,CAAA0L,GACA,SAIAswF,EACAA,EAAA/yF,MAAA,EAAAlK,KAAAA,CAEA,CAEA,QACA,CC5nBA,IAAQwlB,UAAAA,EAAA,EAAYD,KAGpB,IAAA7/B,OAAA+a,SAAA,CAAAk6D,MAAA,CAEA,YACA,iGAKA,IAAAj1E,OAAA+a,SAAA,CAAAm+F,QAAA,CAEA,YACA,mGAIA,IAAAC,GAAA,CACA,OACA,OACA,OACA,MACA,MACA,MACA,OACA,OACA,QACA,QACA,MACA,MACA,OACA,OACAC,GAAA,EACAC,WAAA,EACA,QACA,QACA,SACA,OACA,OACA,OACA,OACA,OACA,OACA,EAKOC,GAAA,CAEP/8B,gBAAA,GACAg9B,yBAAA,GACAC,eAAA,GACAC,WAAA,GACAC,kBAAA,GACAC,QAAA,GACAC,gBAAA,GACAC,MAAA,GACAC,mBAAA,GAEAC,iBAAA,GACAC,gBAAA,GACAC,eAAA,GACAC,cAAA,GAEAC,wBAnBO,GAoBPC,gBApBO,GAqBPC,mBArBO,GAsBPC,iBAtBO,GAwBPC,iBAAA,GACAC,gBAAA,GACAC,gBAAA,GACAn+B,iBAAA,GACAo+B,kBAAA,GACAC,sBAAA,EACAC,qBAAA,EACAC,gBAAA,EACAx+B,YAAA,CACA,EAEA,SAAAy+B,GAAA74B,CAAA,CAAA15D,CAAA,EAIA,IAAU+2C,UAAAA,CAAA,EAAY2iB,EAEtB,GADAA,EAAAp1D,KAAA,MACAtE,MAAAA,GAAAA,EAAAlpB,MAAA,IACAigE,CAAA,CAAA/2C,CAAA,IAAAlqB,IAAA,EAAAkqB,CAAA,IAAA05D,GACA,IAAY5iF,OAAAA,CAAA,EAASkpB,EACrB,QAAA5L,EAAA,EAAoBA,EAAAtd,EAAYsd,IAAA,CAChC,IAAAqZ,EAAAzN,CAAA,CAAA5L,EAAA,CACAslE,EAAAp1D,KAAA,OACAyyC,CAAA,CAAAtpC,EAAA33B,IAAA,EAAA23B,EAAAisD,EACA,CACA,CACAA,EAAAp1D,KAAA,KACA,CAEA,SAAAkuF,GAAA94B,CAAA,CAAAhhF,CAAA,CAAA+5G,CAAA,CAAAC,CAAA,EACA,IAAAC,EAAAj5B,EAAAk5B,qBAAA,CAAAl6G,EAAA5C,IAAA,EACA,GAAA68G,KAAAA,EACA,SAEA,IAAAE,EAAAn5B,EAAAk5B,qBAAA,CAAAH,EAAA38G,IAAA,SACA,IAAA+8G,EAGA,CAAAH,GACAC,KAAAA,GACAE,KAAAA,GACAJ,OAAAA,EAAAt5D,QAAA,EACAw5D,EAAAE,EAGAF,CAAAA,KAAAA,GAAAA,KAAAA,CAAA,IAIAj6G,OAAAA,EAAAygD,QAAA,EAAAs5D,OAAAA,EAAAt5D,QAAA,CAEA,CAAAu5D,EAGA,KAAAC,GACAE,KAAAA,GACAn6G,CAAAA,OAAAA,EAAAygD,QAAA,EAAAs5D,OAAAA,EAAAt5D,QAAA,IAKAu5D,EAGA9B,EAAA,CAAAl4G,EAAAygD,QAAA,GACAy3D,EAAA,CAAA6B,EAAAt5D,QAAA,EAIAy3D,EAAA,CAAAl4G,EAAAygD,QAAA,EACAy3D,EAAA,CAAA6B,EAAAt5D,QAAA,GAEA,CAEA,SAAA25D,GAAAp5B,CAAA,CAAAhhF,CAAA,CAAA+5G,CAAA,CAAAC,CAAA,EAIA,IAAU37C,UAAAA,CAAA,EAAY2iB,EACtB84B,GAAA94B,EAAAhhF,EAAA+5G,EAAAC,IACAh5B,EAAAp1D,KAAA,MACAyyC,CAAA,CAAAr+D,EAAA5C,IAAA,EAAA4C,EAAAghF,GACAA,EAAAp1D,KAAA,OAEAyyC,CAAA,CAAAr+D,EAAA5C,IAAA,EAAA4C,EAAAghF,EAEA,CAkBA,SAAAq5B,GAAAr5B,CAAA,CAAAx3D,CAAA,CAAAoP,CAAA,CAAA0hF,CAAA,EAMA,IAAUl8G,OAAAA,CAAA,EAASorB,EACnB,QAAA9N,EAAA,EAAkBA,EAAAtd,EAAYsd,IAAA,CAC9B,IAAAgO,EAAAF,CAAA,CAAA9N,EAAA,CACAslE,EAAAp1D,KAAA,CAAAgN,GACAlP,MAAAA,EAAAtsB,IAAA,IAEA4jF,EAAAp1D,KAAA,OAAAlC,EAAAxpB,KAAA,CAAAgd,IAAA,QAAAwM,IAGAs3D,EAAAp1D,KAAA,OACA2uF,SAhCAv5B,CAAA,CAAAtnD,CAAA,CAAAd,CAAA,CAAA0hF,CAAA,EAIA,IAAA5xF,EAAAgR,EAAAvc,KAAA,OACAmH,EAAAoE,EAAAtqB,MAAA,GAEA,GADA4iF,EAAAp1D,KAAA,CAAAlD,CAAA,IAAAxL,IAAA,IACAoH,EAAA,GACA08D,EAAAp1D,KAAA,CAAA0uF,GACA,QAAA5+F,EAAA,EAAoBA,EAAA4I,EAAS5I,IAC7BslE,EAAAp1D,KAAA,CAAAgN,EAAAlQ,CAAA,CAAAhN,EAAA,CAAAwB,IAAA,GAAAo9F,GAEAt5B,EAAAp1D,KAAA,CAAAgN,EAAAlQ,CAAA,CAAApE,EAAA,CAAApH,IAAA,GACA,CACA,EAkBA8jE,EAAAt3D,EAAAxpB,KAAA,CAAA04B,EAAA0hF,GACAt5B,EAAAp1D,KAAA,MAAA0uF,GAEA,CACA,CAqBA,SAAAE,GAAAx5B,CAAA,CAAAhhF,CAAA,EAIA,IAAUq+D,UAAAA,CAAA,EAAY2iB,EACtB,CAAUj3D,aAAAA,CAAA,EAAe/pB,EACzBghF,EAAAp1D,KAAA,CAAA5rB,EAAA6pC,IAAA,MACA,IAAUzrC,OAAAA,CAAA,EAAS2rB,EACnB,GAAA3rB,EAAA,GACAigE,EAAAo8C,kBAAA,CAAA1wF,CAAA,IAAAi3D,GACA,QAAAtlE,EAAA,EAAoBA,EAAAtd,EAAYsd,IAChCslE,EAAAp1D,KAAA,OACAyyC,EAAAo8C,kBAAA,CAAA1wF,CAAA,CAAArO,EAAA,CAAAslE,EAEA,CACA,CASO,IAAA05B,GAAA,CAIPC,QAAA36G,CAAA,CAAAghF,CAAA,EACA,IAAApoD,EAAAooD,EAAApoD,MAAA,CAAAo7C,MAAA,CAAAgN,EAAA45B,WAAA,EACA,CAAYN,QAAAA,CAAA,CAAAO,cAAAA,CAAA,EAAyB75B,EACrC65B,GAAA76G,MAAAA,EAAAwpB,QAAA,EACA6wF,GAAAr5B,EAAAhhF,EAAAwpB,QAAA,CAAAoP,EAAA0hF,GAEA,IAAA5C,EAAA13G,EAAAkjF,IAAA,CACA,CAAY9kF,OAAAA,CAAA,EAASs5G,EACrB,QAAAh8F,EAAA,EAAoBA,EAAAtd,EAAYsd,IAAA,CAChC,IAAA4mC,EAAAo1D,CAAA,CAAAh8F,EAAA,CACAm/F,GAAAv4D,MAAAA,EAAA94B,QAAA,EACA6wF,GAAAr5B,EAAA1+B,EAAA94B,QAAA,CAAAoP,EAAA0hF,GAEAt5B,EAAAp1D,KAAA,CAAAgN,GACA,KAAA0pB,EAAAllD,IAAA,EAAAklD,EAAA0+B,GACAA,EAAAp1D,KAAA,CAAA0uF,EACA,CACAO,GAAA76G,MAAAA,EAAA86G,gBAAA,EACAT,GAAAr5B,EAAAhhF,EAAA86G,gBAAA,CAAAliF,EAAA0hF,EAEA,EACA/+B,eAAAA,EAAA,SAAAv7E,CAAA,CAAAghF,CAAA,EACA,IAAApoD,EAAAooD,EAAApoD,MAAA,CAAAo7C,MAAA,CAAAgN,EAAA45B,WAAA,IACA,CAAYN,QAAAA,CAAA,CAAAO,cAAAA,CAAA,EAAyB75B,EACrC+5B,EAAAniF,EAAAooD,EAAApoD,MAAA,CACAooD,EAAAp1D,KAAA,MACA,IAAA8rF,EAAA13G,EAAAkjF,IAAA,CACA,GAAAw0B,MAAAA,GAAAA,EAAAt5G,MAAA,IACA4iF,EAAAp1D,KAAA,CAAA0uF,GACAO,GAAA76G,MAAAA,EAAAwpB,QAAA,EACA6wF,GAAAr5B,EAAAhhF,EAAAwpB,QAAA,CAAAuxF,EAAAT,GAEA,IAAcl8G,OAAAA,CAAA,EAASs5G,EACvB,QAAAh8F,EAAA,EAAsBA,EAAAtd,EAAYsd,IAAA,CAClC,IAAA4mC,EAAAo1D,CAAA,CAAAh8F,EAAA,CACAm/F,GAAAv4D,MAAAA,EAAA94B,QAAA,EACA6wF,GAAAr5B,EAAA1+B,EAAA94B,QAAA,CAAAuxF,EAAAT,GAEAt5B,EAAAp1D,KAAA,CAAAmvF,GACA,KAAAz4D,EAAAllD,IAAA,EAAAklD,EAAA0+B,GACAA,EAAAp1D,KAAA,CAAA0uF,EACA,CACAt5B,EAAAp1D,KAAA,CAAAgN,EACA,MACAiiF,GAAA76G,MAAAA,EAAAwpB,QAAA,GACAw3D,EAAAp1D,KAAA,CAAA0uF,GACAD,GAAAr5B,EAAAhhF,EAAAwpB,QAAA,CAAAuxF,EAAAT,GACAt5B,EAAAp1D,KAAA,CAAAgN,IAGAiiF,GAAA76G,MAAAA,EAAA86G,gBAAA,EACAT,GAAAr5B,EAAAhhF,EAAA86G,gBAAA,CAAAC,EAAAT,GAEAt5B,EAAAp1D,KAAA,MACAo1D,EAAA45B,WAAA,EACA,EACAI,UAAAz/B,EACA0/B,YAAAj7G,CAAA,CAAAghF,CAAA,EACAA,EAAAp1D,KAAA,YACA,KAAA2vD,cAAA,CAAAv7E,EAAAghF,EACA,EACAk6B,eAAAl7G,CAAA,CAAAghF,CAAA,EACAA,EAAAp1D,KAAA,KACA,EACAuvF,oBAAAn7G,CAAA,CAAAghF,CAAA,EACA,IAAAo6B,EAAAp6B,EAAAk5B,qBAAA,CAAAl6G,EAAAoB,UAAA,CAAAhE,IAAA,EAtQO,KAwQPg+G,GACAA,IAAAA,GAAAp7G,MAAAA,EAAAoB,UAAA,CAAAo5E,IAAA,CAAAp9E,IAAA,KAGA4jF,EAAAp1D,KAAA,MACA,KAAA5rB,EAAAoB,UAAA,CAAAhE,IAAA,EAAA4C,EAAAoB,UAAA,CAAA4/E,GACAA,EAAAp1D,KAAA,OAEA,KAAA5rB,EAAAoB,UAAA,CAAAhE,IAAA,EAAA4C,EAAAoB,UAAA,CAAA4/E,GAEAA,EAAAp1D,KAAA,KACA,EACAyvF,YAAAr7G,CAAA,CAAAghF,CAAA,EACAA,EAAAp1D,KAAA,SACA,KAAA5rB,EAAAJ,IAAA,CAAAxC,IAAA,EAAA4C,EAAAJ,IAAA,CAAAohF,GACAA,EAAAp1D,KAAA,OACA,KAAA5rB,EAAAw0G,UAAA,CAAAp3G,IAAA,EAAA4C,EAAAw0G,UAAA,CAAAxzB,GACA,MAAAhhF,EAAAy0G,SAAA,GACAzzB,EAAAp1D,KAAA,WACA,KAAA5rB,EAAAy0G,SAAA,CAAAr3G,IAAA,EAAA4C,EAAAy0G,SAAA,CAAAzzB,GAEA,EACAs6B,iBAAAt7G,CAAA,CAAAghF,CAAA,EACA,KAAAhhF,EAAA8pC,KAAA,CAAA1sC,IAAA,EAAA4C,EAAA8pC,KAAA,CAAAk3C,GACAA,EAAAp1D,KAAA,OACA,KAAA5rB,EAAAkjF,IAAA,CAAA9lF,IAAA,EAAA4C,EAAAkjF,IAAA,CAAAlC,EACA,EACAu6B,eAAAv7G,CAAA,CAAAghF,CAAA,EACAA,EAAAp1D,KAAA,UACA,MAAA5rB,EAAA8pC,KAAA,GACAk3C,EAAAp1D,KAAA,MACA,KAAA5rB,EAAA8pC,KAAA,CAAA1sC,IAAA,EAAA4C,EAAA8pC,KAAA,CAAAk3C,IAEAA,EAAAp1D,KAAA,KACA,EACA4vF,kBAAAx7G,CAAA,CAAAghF,CAAA,EACAA,EAAAp1D,KAAA,aACA,MAAA5rB,EAAA8pC,KAAA,GACAk3C,EAAAp1D,KAAA,MACA,KAAA5rB,EAAA8pC,KAAA,CAAA1sC,IAAA,EAAA4C,EAAA8pC,KAAA,CAAAk3C,IAEAA,EAAAp1D,KAAA,KACA,EACA6vF,cAAAz7G,CAAA,CAAAghF,CAAA,EACAA,EAAAp1D,KAAA,WACA,KAAA5rB,EAAA7C,MAAA,CAAAC,IAAA,EAAA4C,EAAA7C,MAAA,CAAA6jF,GACAA,EAAAp1D,KAAA,OACA,KAAA5rB,EAAAkjF,IAAA,CAAA9lF,IAAA,EAAA4C,EAAAkjF,IAAA,CAAAlC,EACA,EACA06B,gBAAA17G,CAAA,CAAAghF,CAAA,EACA,IAAApoD,EAAAooD,EAAApoD,MAAA,CAAAo7C,MAAA,CAAAgN,EAAA45B,WAAA,IACA,CAAYN,QAAAA,CAAA,CAAAO,cAAAA,CAAA,EAAyB75B,CACrCA,CAAAA,EAAA45B,WAAA,GACA,IAAAe,EAAA/iF,EAAAooD,EAAApoD,MAAA,CACAmiF,EAAAY,EAAA36B,EAAApoD,MAAA,CACAooD,EAAAp1D,KAAA,aACA,KAAA5rB,EAAA47G,YAAA,CAAAx+G,IAAA,EAAA4C,EAAA47G,YAAA,CAAA56B,GACAA,EAAAp1D,KAAA,OAAoB0uF,GACpB,IAAYuB,MAAAC,CAAA,EAAoB97G,EAChC,CAAY5B,OAAA29G,CAAA,EAA0BD,EACtC,QAAApgG,EAAA,EAAoBA,EAAAqgG,EAAqBrgG,IAAA,CACzC,IAAAsgG,EAAAF,CAAA,CAAApgG,EAAA,CACAm/F,GAAAmB,MAAAA,EAAAxyF,QAAA,EACA6wF,GAAAr5B,EAAAg7B,EAAAxyF,QAAA,CAAAmyF,EAAArB,GAEA0B,EAAAp8G,IAAA,EACAohF,EAAAp1D,KAAA,CAAA+vF,EAAA,SACA,KAAAK,EAAAp8G,IAAA,CAAAxC,IAAA,EAAA4+G,EAAAp8G,IAAA,CAAAohF,GACAA,EAAAp1D,KAAA,KAAA0uF,IAEAt5B,EAAAp1D,KAAA,CAAA+vF,EAAA,WAAArB,GAEA,IAAc9F,WAAAA,CAAA,EAAawH,EAC3B,CAAc59G,OAAA69G,CAAA,EAA0BzH,EACxC,QAAA94F,EAAA,EAAsBA,EAAAugG,EAAqBvgG,IAAA,CAC3C,IAAA4mC,EAAAkyD,CAAA,CAAA94F,EAAA,CACAm/F,GAAAv4D,MAAAA,EAAA94B,QAAA,EACA6wF,GAAAr5B,EAAA1+B,EAAA94B,QAAA,CAAAuxF,EAAAT,GAEAt5B,EAAAp1D,KAAA,CAAAmvF,GACA,KAAAz4D,EAAAllD,IAAA,EAAAklD,EAAA0+B,GACAA,EAAAp1D,KAAA,CAAA0uF,EACA,CACA,CACAt5B,EAAA45B,WAAA,IACA55B,EAAAp1D,KAAA,CAAAgN,EAAA,IACA,EACAsjF,gBAAAl8G,CAAA,CAAAghF,CAAA,EACAA,EAAAp1D,KAAA,WACA5rB,EAAA+B,QAAA,GACAi/E,EAAAp1D,KAAA,MACA,KAAA5rB,EAAA+B,QAAA,CAAA3E,IAAA,EAAA4C,EAAA+B,QAAA,CAAAi/E,IAEAA,EAAAp1D,KAAA,KACA,EACAuwF,eAAAn8G,CAAA,CAAAghF,CAAA,EACAA,EAAAp1D,KAAA,WACA,KAAA5rB,EAAA+B,QAAA,CAAA3E,IAAA,EAAA4C,EAAA+B,QAAA,CAAAi/E,GACAA,EAAAp1D,KAAA,KACA,EACAwwF,aAAAp8G,CAAA,CAAAghF,CAAA,EAGA,GAFAA,EAAAp1D,KAAA,SACA,KAAA5rB,EAAA+qD,KAAA,CAAA3tD,IAAA,EAAA4C,EAAA+qD,KAAA,CAAAi2B,GACAhhF,EAAAymG,OAAA,EACA,IAAcA,QAAAA,CAAA,EAAUzmG,CACxBymG,OAAAA,EAAA1xE,KAAA,CACAisD,EAAAp1D,KAAA,aAEAo1D,EAAAp1D,KAAA,aACA,KAAA66E,EAAA1xE,KAAA,CAAA33B,IAAA,EAAAqpG,EAAA1xE,KAAA,CAAAisD,GACAA,EAAAp1D,KAAA,QAEA,KAAA66E,EAAAvjB,IAAA,CAAA9lF,IAAA,EAAAqpG,EAAAvjB,IAAA,CAAAlC,EACA,CACAhhF,EAAA00G,SAAA,GACA1zB,EAAAp1D,KAAA,cACA,KAAA5rB,EAAA00G,SAAA,CAAAt3G,IAAA,EAAA4C,EAAA00G,SAAA,CAAA1zB,GAEA,EACAq7B,eAAAr8G,CAAA,CAAAghF,CAAA,EACAA,EAAAp1D,KAAA,YACA,KAAA5rB,EAAAJ,IAAA,CAAAxC,IAAA,EAAA4C,EAAAJ,IAAA,CAAAohF,GACAA,EAAAp1D,KAAA,OACA,KAAA5rB,EAAAkjF,IAAA,CAAA9lF,IAAA,EAAA4C,EAAAkjF,IAAA,CAAAlC,EACA,EACAs7B,iBAAAt8G,CAAA,CAAAghF,CAAA,EACAA,EAAAp1D,KAAA,QACA,KAAA5rB,EAAAkjF,IAAA,CAAA9lF,IAAA,EAAA4C,EAAAkjF,IAAA,CAAAlC,GACAA,EAAAp1D,KAAA,aACA,KAAA5rB,EAAAJ,IAAA,CAAAxC,IAAA,EAAA4C,EAAAJ,IAAA,CAAAohF,GACAA,EAAAp1D,KAAA,MACA,EACA2wF,aAAAv8G,CAAA,CAAAghF,CAAA,EAEA,GADAA,EAAAp1D,KAAA,UACA5rB,MAAAA,EAAAuyG,IAAA,EACA,IAAcA,KAAAA,CAAA,EAAOvyG,CACrBuyG,CAAA,MAAAA,EAAAn1G,IAAA,IACAo9G,GAAAx5B,EAAAuxB,GAEA,KAAAA,EAAAn1G,IAAA,EAAAm1G,EAAAvxB,EAEA,CACAA,EAAAp1D,KAAA,OACA5rB,EAAAJ,IAAA,EACA,KAAAI,EAAAJ,IAAA,CAAAxC,IAAA,EAAA4C,EAAAJ,IAAA,CAAAohF,GAEAA,EAAAp1D,KAAA,OACA5rB,EAAAw8G,MAAA,EACA,KAAAx8G,EAAAw8G,MAAA,CAAAp/G,IAAA,EAAA4C,EAAAw8G,MAAA,CAAAx7B,GAEAA,EAAAp1D,KAAA,OACA,KAAA5rB,EAAAkjF,IAAA,CAAA9lF,IAAA,EAAA4C,EAAAkjF,IAAA,CAAAlC,EACA,EACA9F,eAAAA,EAAA,SAAAl7E,CAAA,CAAAghF,CAAA,EACAA,EAAAp1D,KAAA,QAAuB5rB,EAAA60G,KAAA,aAA2B,IAClD,IAAYr6B,KAAAA,CAAA,EAAOx6E,CACnBw6E,CAAA,MAAAA,EAAAp9E,IAAA,IACAo9G,GAAAx5B,EAAAxG,GAEA,KAAAA,EAAAp9E,IAAA,EAAAo9E,EAAAwG,GAGAA,EAAAp1D,KAAA,CAAA5rB,MAAAA,EAAA5C,IAAA,mBACA,KAAA4C,EAAA06E,KAAA,CAAAt9E,IAAA,EAAA4C,EAAA06E,KAAA,CAAAsG,GACAA,EAAAp1D,KAAA,OACA,KAAA5rB,EAAAkjF,IAAA,CAAA9lF,IAAA,EAAA4C,EAAAkjF,IAAA,CAAAlC,EACA,EACAy7B,eAAAvhC,EACAwhC,kBAAA18G,CAAA,CAAAghF,CAAA,EACAA,EAAAp1D,KAAA,aAA0B5rB,EAC1B,EACAm7E,oBAAAA,EAAA,SAAAn7E,CAAA,CAAAghF,CAAA,EACAA,EAAAp1D,KAAA,CACA,CAAA5rB,EAAA49B,KAAA,cACA59B,CAAAA,EAAAq+D,SAAA,2BACAr+D,CAAAA,EAAAgmB,EAAA,CAAAhmB,EAAAgmB,EAAA,CAAA3oB,IAAA,KACA2C,GAEA65G,GAAA74B,EAAAhhF,EAAAwhE,MAAA,EACAwf,EAAAp1D,KAAA,MACA,KAAA5rB,EAAAkjF,IAAA,CAAA9lF,IAAA,EAAA4C,EAAAkjF,IAAA,CAAAlC,EACA,EACAo4B,mBAAAj+B,EACAwhC,oBAAA38G,CAAA,CAAAghF,CAAA,EACAw5B,GAAAx5B,EAAAhhF,GACAghF,EAAAp1D,KAAA,KACA,EACA6uF,mBAAAz6G,CAAA,CAAAghF,CAAA,EACA,KAAAhhF,EAAAgmB,EAAA,CAAA5oB,IAAA,EAAA4C,EAAAgmB,EAAA,CAAAg7D,GACA,MAAAhhF,EAAAuyG,IAAA,GACAvxB,EAAAp1D,KAAA,QACA,KAAA5rB,EAAAuyG,IAAA,CAAAn1G,IAAA,EAAA4C,EAAAuyG,IAAA,CAAAvxB,GAEA,EACA47B,iBAAA58G,CAAA,CAAAghF,CAAA,EAEA,GADAA,EAAAp1D,KAAA,UAAA5rB,CAAAA,EAAAgmB,EAAA,IAAyChmB,EAAAgmB,EAAA,CAAA3oB,IAAA,EAAc,MAAA2C,GACvDA,EAAA68G,UAAA,EACA77B,EAAAp1D,KAAA,aACA,IAAcixF,WAAAA,CAAA,EAAa78G,EAC3B,CAAc5C,KAAAA,CAAA,EAAOy/G,EACrBzB,EAAAp6B,EAAAk5B,qBAAA,CAAA98G,EAAA,CAEAA,CAAAA,MAAAA,CAAA,KAAAA,MAAAA,CAAA,KAAAA,MAAAA,CAAA,MACAg+G,CAAAA,KAAAA,GACAA,EAAAp6B,EAAAk5B,qBAAA,CAAAf,eAAA,GAGAn4B,EAAAp1D,KAAA,MACA,KAAA5rB,EAAA68G,UAAA,CAAAz/G,IAAA,EAAAy/G,EAAA77B,GACAA,EAAAp1D,KAAA,OAEA,KAAAixF,EAAAz/G,IAAA,EAAAy/G,EAAA77B,GAEAA,EAAAp1D,KAAA,KACA,CACA,KAAAovF,SAAA,CAAAh7G,EAAAkjF,IAAA,CAAAlC,EACA,EACA87B,kBAAA98G,CAAA,CAAAghF,CAAA,EACAA,EAAAp1D,KAAA,YACA,IAAYy3B,WAAAA,CAAA,EAAarjD,EACzB,CAAY5B,OAAAA,CAAA,EAASilD,EAGrB3nC,EAAA,EACA,GAAAtd,EAAA,GACA,KAAasd,EAAAtd,GAAY,CACzBsd,EAAA,GACAslE,EAAAp1D,KAAA,OAEA,IAAAo/D,EAAA3nC,CAAA,CAAA3nC,EAAA,CACAte,EAAA4tF,EAAA5tF,IAAA,IACA,GAAAA,MAAAA,EAEA4jF,EAAAp1D,KAAA,CAAAo/D,EAAAC,KAAA,CAAA5tF,IAAA,CAAA2tF,GACAtvE,SACU,GAAAte,MAAAA,EAEV4jF,EAAAp1D,KAAA,SAAAo/D,EAAAC,KAAA,CAAA5tF,IAAA,CAAA2tF,GACAtvE,SAGA,KAEA,CACA,GAAAA,EAAAtd,EAAA,CAEA,IADA4iF,EAAAp1D,KAAA,QACe,CACf,IAAAo/D,EAAA3nC,CAAA,CAAA3nC,EAAA,CACA,CAAkBre,KAAAA,CAAA,EAAO2tF,EAAA6nB,QAAA,CAKzB,GAJA7xB,EAAAp1D,KAAA,CAAAvuB,EAAA2tF,GACA3tF,IAAA2tF,EAAAC,KAAA,CAAA5tF,IAAA,EACA2jF,EAAAp1D,KAAA,QAAAo/D,EAAAC,KAAA,CAAA5tF,IAAA,EAEA,EAAAqe,EAAAtd,EACA4iF,EAAAp1D,KAAA,YAEA,KAEA,CACAo1D,EAAAp1D,KAAA,KACA,CACAo1D,EAAAp1D,KAAA,UACA,CACA,KAAA8sF,OAAA,CAAA14G,EAAA+oB,MAAA,CAAAi4D,GACAA,EAAAp1D,KAAA,KACA,EACAmxF,iBAAA/8G,CAAA,CAAAghF,CAAA,EACAA,EAAAp1D,KAAA,YACA,KAAA5rB,EAAA+oB,MAAA,CAAA3rB,IAAA,EAAA4C,EAAA+oB,MAAA,CAAAi4D,GACAA,EAAAp1D,KAAA,KACA,EACAoxF,yBAAAh9G,CAAA,CAAAghF,CAAA,EACAA,EAAAp1D,KAAA,oBACA,KAAA5rB,EAAAkqB,WAAA,CAAA9sB,IAAA,EAAA4C,EAAAkqB,WAAA,CAAA82D,GAEA,MAAAA,EAAAk5B,qBAAA,CAAAl6G,EAAAkqB,WAAA,CAAA9sB,IAAA,GACA4C,MAAAA,EAAAkqB,WAAA,CAAA9sB,IAAA,KAGA4jF,EAAAp1D,KAAA,KAEA,EACAqxF,uBAAAj9G,CAAA,CAAAghF,CAAA,EAEA,GADAA,EAAAp1D,KAAA,YACA5rB,EAAAkqB,WAAA,CACA,KAAAlqB,EAAAkqB,WAAA,CAAA9sB,IAAA,EAAA4C,EAAAkqB,WAAA,CAAA82D,OACM,CACNA,EAAAp1D,KAAA,MACA,IAAcy3B,WAAAA,CAAA,EAAarjD,EAC3B,CAAU5B,OAAAA,CAAA,EAASilD,EACnB,GAAAjlD,EAAA,EACA,QAAAsd,EAAA,IAA0B,CAC1B,IAAAsvE,EAAA3nC,CAAA,CAAA3nC,EAAA,CACA,CAAkBre,KAAAA,CAAA,EAAO2tF,EAAAC,KAAA,CAKzB,GAJAjK,EAAAp1D,KAAA,CAAAvuB,EAAA2tF,GACA3tF,IAAA2tF,EAAA8nB,QAAA,CAAAz1G,IAAA,EACA2jF,EAAAp1D,KAAA,QAAAo/D,EAAA8nB,QAAA,CAAAz1G,IAAA,EAEA,EAAAqe,EAAAtd,EACA4iF,EAAAp1D,KAAA,YAEA,KAEA,CAEAo1D,EAAAp1D,KAAA,MACA5rB,EAAA+oB,MAAA,GACAi4D,EAAAp1D,KAAA,WACA,KAAA8sF,OAAA,CAAA14G,EAAA+oB,MAAA,CAAAi4D,IAEAA,EAAAp1D,KAAA,KACA,CACA,EACAsxF,qBAAAl9G,CAAA,CAAAghF,CAAA,EACAhhF,MAAAA,EAAA8yG,QAAA,CACA9xB,EAAAp1D,KAAA,gBAAA5rB,EAAA8yG,QAAA,CAAAz1G,IAAA,WAEA2jF,EAAAp1D,KAAA,mBAEA,KAAA8sF,OAAA,CAAA14G,EAAA+oB,MAAA,CAAAi4D,GACAA,EAAAp1D,KAAA,KACA,EACAuxF,iBAAAn9G,CAAA,CAAAghF,CAAA,EACAhhF,EAAAo9G,MAAA,EACAp8B,EAAAp1D,KAAA,YAEA,IAAAie,EAAA7pC,EAAA6pC,IAAA,IACAA,CAAAA,MAAAA,GAAAA,MAAAA,CAAA,GAEAm3C,EAAAp1D,KAAA,CAAA5rB,EAAA6pC,IAAA,MAEA7pC,EAAAE,KAAA,CAAA09B,KAAA,EACAojD,EAAAp1D,KAAA,WAEA5rB,EAAAE,KAAA,CAAAm+D,SAAA,EACA2iB,EAAAp1D,KAAA,MAEA5rB,EAAAgyG,QAAA,EACAhxB,EAAAp1D,KAAA,MACA,KAAA5rB,EAAA2X,GAAA,CAAAva,IAAA,EAAA4C,EAAA2X,GAAA,CAAAqpE,GACAA,EAAAp1D,KAAA,OAEA,KAAA5rB,EAAA2X,GAAA,CAAAva,IAAA,EAAA4C,EAAA2X,GAAA,CAAAqpE,GAEA64B,GAAA74B,EAAAhhF,EAAAE,KAAA,CAAAshE,MAAA,EACAwf,EAAAp1D,KAAA,MACA,KAAA5rB,EAAAE,KAAA,CAAAgjF,IAAA,CAAA9lF,IAAA,EAAA4C,EAAAE,KAAA,CAAAgjF,IAAA,CAAAlC,EACA,EACAm4B,gBAAAn5G,CAAA,CAAAghF,CAAA,EACA,KAAA47B,gBAAA,CAAA58G,EAAAghF,EACA,EACAk4B,wBAAAl5G,CAAA,CAAAghF,CAAA,EACAA,EAAAp1D,KAAA,CAAA5rB,EAAA49B,KAAA,aAAA59B,GACA,IAAYwhE,OAAAA,CAAA,EAASxhE,CACrB,OAAAwhE,IAEAA,IAAAA,EAAApjE,MAAA,EAAAojE,MAAAA,CAAA,IAAApkE,IAAA,IAEA4jF,EAAAp1D,KAAA,CAAA41C,CAAA,IAAAnkE,IAAA,CAAAmkE,CAAA,KAEAq4C,GAAA74B,EAAAhhF,EAAAwhE,MAAA,GAGAwf,EAAAp1D,KAAA,SACA5rB,MAAAA,EAAAkjF,IAAA,CAAA9lF,IAAA,KAEA4jF,EAAAp1D,KAAA,MACA,KAAAytF,gBAAA,CAAAr5G,EAAAkjF,IAAA,CAAAlC,GACAA,EAAAp1D,KAAA,OAEA,KAAA5rB,EAAAkjF,IAAA,CAAA9lF,IAAA,EAAA4C,EAAAkjF,IAAA,CAAAlC,EAEA,EACAu3B,eAAAv4G,CAAA,CAAAghF,CAAA,EACAA,EAAAp1D,KAAA,QAAA5rB,EACA,EACA44G,MAAA54G,CAAA,CAAAghF,CAAA,EACAA,EAAAp1D,KAAA,SAAA5rB,EACA,EACAo7E,YAAAA,EAAA,SAAAp7E,CAAA,CAAAghF,CAAA,EACAA,EAAAp1D,KAAA,QACA,KAAA5rB,EAAA+B,QAAA,CAAA3E,IAAA,EAAA4C,EAAA+B,QAAA,CAAAi/E,EACA,EACAq8B,cAAAjiC,EACAw+B,gBAAA55G,CAAA,CAAAghF,CAAA,EACAA,EAAAp1D,KAAA,CAAA5rB,EAAAs9G,QAAA,mBACAt9G,EAAA+B,QAAA,GACAi/E,EAAAp1D,KAAA,MACA,KAAA5rB,EAAA+B,QAAA,CAAA3E,IAAA,EAAA4C,EAAA+B,QAAA,CAAAi/E,GAEA,EACAw4B,gBAAAx5G,CAAA,CAAAghF,CAAA,EACAA,EAAAp1D,KAAA,UAAA5rB,GACAo6G,GAAAp5B,EAAAhhF,EAAA+B,QAAA,CAAA/B,EACA,EACA24G,gBAAA34G,CAAA,CAAAghF,CAAA,EACA,IAAYu8B,OAAAA,CAAA,CAAApH,YAAAA,CAAA,EAAsBn2G,EAClCghF,EAAAp1D,KAAA,MACA,IAAYxtB,OAAAA,CAAA,EAAS+3G,EACrB,QAAAz6F,EAAA,EAAoBA,EAAAtd,EAAYsd,IAAA,CAChC,IAAAta,EAAA+0G,CAAA,CAAAz6F,EAAA,CACA8hG,EAAAD,CAAA,CAAA7hG,EAAA,CACAslE,EAAAp1D,KAAA,CAAA4xF,EAAAt9G,KAAA,CAAAub,GAAA,CAAA+hG,GACAx8B,EAAAp1D,KAAA,OACA,KAAAxqB,EAAAhE,IAAA,EAAAgE,EAAA4/E,GACAA,EAAAp1D,KAAA,KACA,CACA,IAAA4xF,EAAAD,CAAA,CAAAA,EAAAn/G,MAAA,IACA4iF,EAAAp1D,KAAA,CAAA4xF,EAAAt9G,KAAA,CAAAub,GAAA,CAAA+hG,GACAx8B,EAAAp1D,KAAA,KACA,EACA6xF,gBAAAz9G,CAAA,CAAAghF,CAAA,EACAA,EAAAp1D,KAAA,CAAA5rB,EAAAE,KAAA,CAAAub,GAAA,CAAAzb,EACA,EACAs4G,yBAAAt4G,CAAA,CAAAghF,CAAA,EACAo5B,GAAAp5B,EAAAhhF,EAAAihC,GAAA,CAAAjhC,GACA,KAAAA,EAAAw9G,KAAA,CAAApgH,IAAA,EAAA4C,EAAAw9G,KAAA,CAAAx8B,EACA,EACA1F,gBAAAA,EAAA,SAAAt7E,CAAA,CAAAghF,CAAA,EAEA,GADAA,EAAAp1D,KAAA,MACA5rB,EAAAg+B,QAAA,CAAA5/B,MAAA,IACA,IAAc4/B,SAAAA,CAAA,EAAWh+B,EACzB,CAAU5B,OAAAA,CAAA,EAAS4/B,EACnB,QAAAtiB,EAAA,IAAwB,CACxB,IAAAigB,EAAAqC,CAAA,CAAAtiB,EAAA,CAIA,GAHA,MAAAigB,GACA,KAAAA,EAAAv+B,IAAA,EAAAu+B,EAAAqlD,GAEA,EAAAtlE,EAAAtd,EACA4iF,EAAAp1D,KAAA,WACU,CACV,MAAA+P,GACAqlD,EAAAp1D,KAAA,OAEA,KACA,CACA,CACA,CACAo1D,EAAAp1D,KAAA,KACA,EACA8xF,aAAApiC,EACA+9B,iBAAAr5G,CAAA,CAAAghF,CAAA,EACA,IAAApoD,EAAAooD,EAAApoD,MAAA,CAAAo7C,MAAA,CAAAgN,EAAA45B,WAAA,IACA,CAAYN,QAAAA,CAAA,CAAAO,cAAAA,CAAA,EAAyB75B,EACrC28B,EAAA/kF,EAAAooD,EAAApoD,MAAA,CAEA,GADAooD,EAAAp1D,KAAA,MACA5rB,EAAAmmB,UAAA,CAAA/nB,MAAA,IACA4iF,EAAAp1D,KAAA,CAAA0uF,GACAO,GAAA76G,MAAAA,EAAAwpB,QAAA,EACA6wF,GAAAr5B,EAAAhhF,EAAAwpB,QAAA,CAAAm0F,EAAArD,GAEA,IAAAsD,EAAA,IAAAtD,EACA,CAAcn0F,WAAAA,CAAA,EAAanmB,EAC3B,CAAU5B,OAAAA,CAAA,EAAS+nB,EACnB,QAAAzK,EAAA,IAAwB,CACxB,IAAAne,EAAA4oB,CAAA,CAAAzK,EAAA,CAMA,GALAm/F,GAAAt9G,MAAAA,EAAAisB,QAAA,EACA6wF,GAAAr5B,EAAAzjF,EAAAisB,QAAA,CAAAm0F,EAAArD,GAEAt5B,EAAAp1D,KAAA,CAAA+xF,GACA,KAAApgH,EAAAH,IAAA,EAAAG,EAAAyjF,GACA,EAAAtlE,EAAAtd,EACA4iF,EAAAp1D,KAAA,CAAAgyF,QAEA,KAEA,CACA58B,EAAAp1D,KAAA,CAAA0uF,GACAO,GAAA76G,MAAAA,EAAA86G,gBAAA,EACAT,GAAAr5B,EAAAhhF,EAAA86G,gBAAA,CAAA6C,EAAArD,GAEAt5B,EAAAp1D,KAAA,CAAAgN,EAAA,IACA,MAAMiiF,EACN76G,MAAAA,EAAAwpB,QAAA,EACAw3D,EAAAp1D,KAAA,CAAA0uF,GACAD,GAAAr5B,EAAAhhF,EAAAwpB,QAAA,CAAAm0F,EAAArD,GACA,MAAAt6G,EAAA86G,gBAAA,EACAT,GAAAr5B,EAAAhhF,EAAA86G,gBAAA,CAAA6C,EAAArD,GAEAt5B,EAAAp1D,KAAA,CAAAgN,EAAA,MACQ54B,MAAAA,EAAA86G,gBAAA,EACR95B,EAAAp1D,KAAA,CAAA0uF,GACAD,GAAAr5B,EAAAhhF,EAAA86G,gBAAA,CAAA6C,EAAArD,GACAt5B,EAAAp1D,KAAA,CAAAgN,EAAA,MAEAooD,EAAAp1D,KAAA,MAGAo1D,EAAAp1D,KAAA,KAEAo1D,CAAAA,EAAA45B,WAAA,EACA,EACAiD,SAAA79G,CAAA,CAAAghF,CAAA,EACAhhF,EAAAmqC,MAAA,EAAAnqC,MAAAA,EAAA6pC,IAAA,IAEA,KAAAszE,gBAAA,CAAAn9G,EAAAghF,IAEAhhF,EAAA+yG,SAAA,GACA/yG,EAAAgyG,QAAA,EACAhxB,EAAAp1D,KAAA,MACA,KAAA5rB,EAAA2X,GAAA,CAAAva,IAAA,EAAA4C,EAAA2X,GAAA,CAAAqpE,GACAA,EAAAp1D,KAAA,OAEA,KAAA5rB,EAAA2X,GAAA,CAAAva,IAAA,EAAA4C,EAAA2X,GAAA,CAAAqpE,GAEAA,EAAAp1D,KAAA,QAEA,KAAA5rB,EAAAE,KAAA,CAAA9C,IAAA,EAAA4C,EAAAE,KAAA,CAAA8gF,GAEA,EACA88B,mBAAA99G,CAAA,CAAAghF,CAAA,EAWA,GAVAhhF,EAAAo9G,MAAA,EACAp8B,EAAAp1D,KAAA,YAEA5rB,EAAAgyG,QAAA,EACAhxB,EAAAp1D,KAAA,MAEA,KAAA5rB,EAAA2X,GAAA,CAAAva,IAAA,EAAA4C,EAAA2X,GAAA,CAAAqpE,GACAhhF,EAAAgyG,QAAA,EACAhxB,EAAAp1D,KAAA,MAEA5rB,MAAAA,EAAAE,KAAA,EACA,MAAAF,EAAA2X,GAAA,CAAAva,IAAA,KACA4jF,EAAAp1D,KAAA,MAEA,MACA,CACAo1D,EAAAp1D,KAAA,QACA,KAAA5rB,EAAAE,KAAA,CAAA9C,IAAA,EAAA4C,EAAAE,KAAA,CAAA8gF,GACAA,EAAAp1D,KAAA,KACA,EACAmyF,cAAA/9G,CAAA,CAAAghF,CAAA,EAEA,GADAA,EAAAp1D,KAAA,MACA5rB,EAAAmmB,UAAA,CAAA/nB,MAAA,IACA,IAAc+nB,WAAAA,CAAA,EAAanmB,EAC3B,CAAU5B,OAAAA,CAAA,EAAS+nB,EACnB,QAAAzK,EAAA,IAEA,GADA,KAAAyK,CAAA,CAAAzK,EAAA,CAAAte,IAAA,EAAA+oB,CAAA,CAAAzK,EAAA,CAAAslE,GACA,EAAAtlE,EAAAtd,EACA4iF,EAAAp1D,KAAA,YAEA,KAGA,CACAo1D,EAAAp1D,KAAA,KACA,EACAitF,mBAAA74G,CAAA,CAAAghF,CAAA,EACA64B,GAAA74B,EAAAhhF,EAAAm2G,WAAA,CACA,EACAoD,gBAAAv5G,CAAA,CAAAghF,CAAA,EACA,GAAAhhF,EAAA80C,MAAA,EACA,IACA2L,SAAAA,CAAA,CACA1+C,SAAAA,CAAA,CACAA,SAAA,CAAoB3E,KAAAA,CAAA,CAAM,CAC1B,CAAQ4C,EACRghF,EAAAp1D,KAAA,CAAA60B,GACA,IAAAu9D,EAAAlE,GAAA94B,EAAAj/E,EAAA/B,EAEA,EAAAg+G,GACAv9D,CAAAA,EAAAriD,MAAA,IACAhB,MAAAA,CAAA,KACAA,CAAAA,MAAAA,CAAA,KAAAA,MAAAA,CAAA,MACA2E,EAAA+yC,MAAA,EACA/yC,EAAA0+C,QAAA,MAAAA,GACAA,CAAAA,MAAAA,GAAAA,MAAAA,CAAA,IAGAugC,EAAAp1D,KAAA,MAEAoyF,GACAh9B,EAAAp1D,KAAA,CAAA60B,EAAAriD,MAAA,aACA,KAAAhB,EAAA,CAAA2E,EAAAi/E,GACAA,EAAAp1D,KAAA,OAEA,KAAAxuB,EAAA,CAAA2E,EAAAi/E,EAEA,MAEA,KAAAhhF,EAAA+B,QAAA,CAAA3E,IAAA,EAAA4C,EAAA+B,QAAA,CAAAi/E,GACAA,EAAAp1D,KAAA,CAAA5rB,EAAAygD,QAAA,CAEA,EACA64D,iBAAAt5G,CAAA,CAAAghF,CAAA,EAEAhhF,EAAA80C,MAAA,EACAksC,EAAAp1D,KAAA,CAAA5rB,EAAAygD,QAAA,EACA,KAAAzgD,EAAA+B,QAAA,CAAA3E,IAAA,EAAA4C,EAAA+B,QAAA,CAAAi/E,KAEA,KAAAhhF,EAAA+B,QAAA,CAAA3E,IAAA,EAAA4C,EAAA+B,QAAA,CAAAi/E,GACAA,EAAAp1D,KAAA,CAAA5rB,EAAAygD,QAAA,EAEA,EACAk5D,qBAAA35G,CAAA,CAAAghF,CAAA,EACA,KAAAhhF,EAAAw6E,IAAA,CAAAp9E,IAAA,EAAA4C,EAAAw6E,IAAA,CAAAwG,GACAA,EAAAp1D,KAAA,KAAA5rB,EAAAygD,QAAA,MACA,KAAAzgD,EAAA06E,KAAA,CAAAt9E,IAAA,EAAA4C,EAAA06E,KAAA,CAAAsG,EACA,EACAi9B,kBAAAj+G,CAAA,CAAAghF,CAAA,EACA,KAAAhhF,EAAAw6E,IAAA,CAAAp9E,IAAA,EAAA4C,EAAAw6E,IAAA,CAAAwG,GACAA,EAAAp1D,KAAA,QACA,KAAA5rB,EAAA06E,KAAA,CAAAt9E,IAAA,EAAA4C,EAAA06E,KAAA,CAAAsG,EACA,EACA3F,iBAAAA,EAAA,SAAAr7E,CAAA,CAAAghF,CAAA,EACA,IAAAk9B,EAAAl+G,OAAAA,EAAAygD,QAAA,CACAy9D,GAEAl9B,EAAAp1D,KAAA,MAEAwuF,GAAAp5B,EAAAhhF,EAAAw6E,IAAA,CAAAx6E,EAAA,IACAghF,EAAAp1D,KAAA,KAAA5rB,EAAAygD,QAAA,MACA25D,GAAAp5B,EAAAhhF,EAAA06E,KAAA,CAAA16E,EAAA,IACAk+G,GACAl9B,EAAAp1D,KAAA,KAEA,EACA6tF,kBAAAp+B,EACAq+B,sBAAA15G,CAAA,CAAAghF,CAAA,EACA,IAAYphF,KAAAA,CAAA,EAAOI,EACnBo7G,EAAAp6B,EAAAk5B,qBAAA,CAAAt6G,EAAAxC,IAAA,EAp3BO,KAs3BPg+G,GACAA,GAAAp6B,EAAAk5B,qBAAA,CAAAR,qBAAA,EAEA14B,EAAAp1D,KAAA,MACA,KAAAhsB,EAAAxC,IAAA,EAAAwC,EAAAohF,GACAA,EAAAp1D,KAAA,OAEA,KAAAhsB,EAAAxC,IAAA,EAAAwC,EAAAohF,GAEAA,EAAAp1D,KAAA,QACA,KAAA5rB,EAAAw0G,UAAA,CAAAp3G,IAAA,EAAA4C,EAAAw0G,UAAA,CAAAxzB,GACAA,EAAAp1D,KAAA,QACA,KAAA5rB,EAAAy0G,SAAA,CAAAr3G,IAAA,EAAA4C,EAAAy0G,SAAA,CAAAzzB,EACA,EACAi4B,cAAAj5G,CAAA,CAAAghF,CAAA,EACAA,EAAAp1D,KAAA,SACA,IAAAwvF,EAAAp6B,EAAAk5B,qBAAA,CAAAl6G,EAAAu0G,MAAA,CAAAn3G,IAAA,EAt4BO,KAw4BPg+G,GACAA,EAAAp6B,EAAAk5B,qBAAA,CAAAlB,cAAA,EACAmF,SApvBAn+G,CAAA,EAIA,IAAAigC,EAAAjgC,EACA,KAAAigC,MAAAA,GAAA,CACA,IAAY7iC,KAAAA,CAAA,EAAO6iC,EACnB,GAAA7iC,MAAAA,CAAA,KAAAA,MAAAA,CAAA,IAEA,SACM,GAAAA,MAAAA,CAAA,KAAAA,MAAAA,CAAA,KAAAA,MAAAA,CAAA,IAIN,SAFA6iC,EAAAA,EAAA9iC,MAAA,CAKA,EAmuBA6C,EAAAu0G,MAAA,GAEAvzB,EAAAp1D,KAAA,MACA,KAAA5rB,EAAAu0G,MAAA,CAAAn3G,IAAA,EAAA4C,EAAAu0G,MAAA,CAAAvzB,GACAA,EAAAp1D,KAAA,OAEA,KAAA5rB,EAAAu0G,MAAA,CAAAn3G,IAAA,EAAA4C,EAAAu0G,MAAA,CAAAvzB,GAEA64B,GAAA74B,EAAAhhF,EAAA,UACA,EACAg5G,eAAAh5G,CAAA,CAAAghF,CAAA,EACA,IAAAo6B,EAAAp6B,EAAAk5B,qBAAA,CAAAl6G,EAAAu0G,MAAA,CAAAn3G,IAAA,EAr5BO,KAu5BPg+G,GACAA,EAAAp6B,EAAAk5B,qBAAA,CAAAlB,cAAA,EAEAh4B,EAAAp1D,KAAA,MACA,KAAA5rB,EAAAu0G,MAAA,CAAAn3G,IAAA,EAAA4C,EAAAu0G,MAAA,CAAAvzB,GACAA,EAAAp1D,KAAA,OAEA,KAAA5rB,EAAAu0G,MAAA,CAAAn3G,IAAA,EAAA4C,EAAAu0G,MAAA,CAAAvzB,GAEAhhF,EAAAonE,QAAA,EACA4Z,EAAAp1D,KAAA,OAEAiuF,GAAA74B,EAAAhhF,EAAA,UACA,EACA+4G,gBAAA/4G,CAAA,CAAAghF,CAAA,EACA,KAAAhhF,EAAAoB,UAAA,CAAAhE,IAAA,EAAA4C,EAAAoB,UAAA,CAAA4/E,EACA,EACA83B,iBAAA94G,CAAA,CAAAghF,CAAA,EACA,IAAAo6B,EAAAp6B,EAAAk5B,qBAAA,CAAAl6G,EAAA7C,MAAA,CAAAC,IAAA,EAz6BO,KA26BPg+G,GACAA,EAAAp6B,EAAAk5B,qBAAA,CAAApB,gBAAA,EAEA93B,EAAAp1D,KAAA,MACA,KAAA5rB,EAAA7C,MAAA,CAAAC,IAAA,EAAA4C,EAAA7C,MAAA,CAAA6jF,GACAA,EAAAp1D,KAAA,OAEA,KAAA5rB,EAAA7C,MAAA,CAAAC,IAAA,EAAA4C,EAAA7C,MAAA,CAAA6jF,GAEAhhF,EAAAgyG,QAAA,EACAhyG,EAAAonE,QAAA,EACA4Z,EAAAp1D,KAAA,OAEAo1D,EAAAp1D,KAAA,MACA,KAAA5rB,EAAAzC,QAAA,CAAAH,IAAA,EAAA4C,EAAAzC,QAAA,CAAAyjF,GACAA,EAAAp1D,KAAA,QAEA5rB,EAAAonE,QAAA,CACA4Z,EAAAp1D,KAAA,OAEAo1D,EAAAp1D,KAAA,MAEA,KAAA5rB,EAAAzC,QAAA,CAAAH,IAAA,EAAA4C,EAAAzC,QAAA,CAAAyjF,GAEA,EACAo9B,aAAAp+G,CAAA,CAAAghF,CAAA,EACAA,EAAAp1D,KAAA,CAAA5rB,EAAA66F,IAAA,CAAAx9F,IAAA,KAAA2C,EAAAzC,QAAA,CAAAF,IAAA,CAAA2C,EACA,EACAw4G,WAAAx4G,CAAA,CAAAghF,CAAA,EACAA,EAAAp1D,KAAA,CAAA5rB,EAAA3C,IAAA,CAAA2C,EACA,EACAy4G,kBAAAz4G,CAAA,CAAAghF,CAAA,EACAA,EAAAp1D,KAAA,KAAoB5rB,EAAA3C,IAAA,CAAU,EAAA2C,EAC9B,EACA04G,QAAA14G,CAAA,CAAAghF,CAAA,EACAhhF,MAAAA,EAAAyb,GAAA,CAEAulE,EAAAp1D,KAAA,CAAA5rB,EAAAyb,GAAA,CAAAzb,GACMA,MAAAA,EAAA6hD,KAAA,CACN,KAAAw8D,aAAA,CAAAr+G,EAAAghF,GACMhhF,MAAAA,EAAAs+G,MAAA,CACNt9B,EAAAp1D,KAAA,CAAA5rB,EAAAs+G,MAAA,KAAAt+G,GAEAghF,EAAAp1D,KAAA,CAAAiT,GAAA7+B,EAAAE,KAAA,EAAAF,EAEA,EACAq+G,cAAAr+G,CAAA,CAAAghF,CAAA,EACA,IAAYn/B,MAAAA,CAAA,EAAQ7hD,EACpBghF,EAAAp1D,KAAA,KAAoBi2B,EAAA/hB,OAAA,CAAc,GAAG+hB,EAAA7hB,KAAA,CAAY,EAAAhgC,EACjD,CACA,EAEAu+G,GAAA,EAOA,OAAAC,GACAzkG,YAAArc,CAAA,EACA,IAAA+gH,EAAA/gH,MAAAA,EAAA6gH,GAAA7gH,CACA,MAAA07B,MAAA,IAEAqlF,MAAAA,EAAArlF,MAAA,EACA,KAAAA,MAAA,CAAAqlF,EAAArlF,MAAA,CACA,KAAAxN,KAAA,MAAA8yF,aAAA,EAEA,KAAAtlF,MAAA,IAEA,KAAAilC,SAAA,CAAAogD,MAAAA,EAAApgD,SAAA,CAAAogD,EAAApgD,SAAA,CAAAq8C,GACA,KAAAR,qBAAA,CACAuE,MAAAA,EAAAvE,qBAAA,CACAuE,EAAAvE,qBAAA,CACA7B,GAEA,KAAAz/E,MAAA,CAAA6lF,MAAAA,EAAA7lF,MAAA,CAAA6lF,EAAA7lF,MAAA,MACA,KAAA0hF,OAAA,CAAAmE,MAAAA,EAAAnE,OAAA,CAAAmE,EAAAnE,OAAA,MACA,KAAAM,WAAA,CACA6D,MAAAA,EAAAE,mBAAA,CAAAF,EAAAE,mBAAA,GACA,KAAA9D,aAAA,CAAA4D,EAAAA,EAAAj1F,QAAA,EAAAi1F,EAAAj1F,QAAA,CAEA,MAAAi1F,EAAAG,SAAA,GACA,KAAAhzF,KAAA,CACA6yF,MAAAA,EAAArlF,MAAA,MAAAylF,WAAA,MAAAC,mBAAA,CACA,KAAAF,SAAA,CAAAH,EAAAG,SAAA,CACA,KAAA/1F,IAAA,GACA,KAAAL,MAAA,GACA,KAAAu2F,WAAA,MAAAzE,OAAA,CAAAn9F,KAAA,OAAA/e,MAAA,GACA,KAAA4gH,OAAA,EACAC,SAAA,KAEAC,UAAA,KACA7hH,KAAAgc,KAAAA,EACA0P,OAAA01F,EAAAG,SAAA,CAAApnF,IAAA,EAAAinF,EAAAG,SAAA,CAAAO,KAAA,EAGA,CAEAvzF,MAAAzoB,CAAA,EACA,KAAAi2B,MAAA,EAAAj2B,CACA,CAEAu7G,cAAAv7G,CAAA,EACA,KAAAi2B,MAAA,CAAAxN,KAAA,CAAAzoB,EACA,CAEA07G,YAAA17G,CAAA,CAAAnD,CAAA,EACA,KAAAo5B,MAAA,EAAAj2B,EACA,KAAA6e,GAAA,CAAA7e,EAAAnD,EACA,CAEA8+G,oBAAA37G,CAAA,CAAAnD,CAAA,EACA,KAAAo5B,MAAA,CAAAxN,KAAA,CAAAzoB,GACA,KAAA6e,GAAA,CAAA7e,EAAAnD,EACA,CAEAgiB,IAAA7e,CAAA,CAAAnD,CAAA,EACA,GAAAA,MAAAA,EAAA,CACA,IAAc5C,KAAAA,CAAA,EAAO4C,EACrB,GAAA5C,MAAAA,CAAA,KAAAA,MAAAA,CAAA,KAEA,KAAAorB,MAAA,GACA,KAAAK,IAAA,GACA,MACA,CACA,GAAA7oB,MAAAA,EAAA8xE,GAAA,EACA,IAAgBktC,QAAAA,CAAA,EAAU,KAC1BA,EAAAC,QAAA,CAAAj/G,EAAA8xE,GAAA,CAAAxzE,KAAA,CACA0gH,EAAA3hH,IAAA,CAAA2C,EAAA3C,IAAA,CACA,KAAAuhH,SAAA,CAAAQ,UAAA,CAAAJ,EACA,CACA,GACA,MAAA5hH,CAAA,KAAAA,MAAAA,CAAA,KACAA,MAAAA,CAAA,KAAAA,MAAAA,CAAA,sBAAA4C,EAAAE,KAAA,CACA,CAEA,IAAgB9B,OAAAA,CAAA,EAAS+E,EACzB,CAAcqlB,OAAAA,CAAA,CAAAK,KAAAA,CAAA,EAAe,KAC7B,QAAAnN,EAAA,EAAwBA,EAAAtd,EAAYsd,IACpCvY,OAAAA,CAAA,CAAAuY,EAAA,EACA8M,EAAA,EACAK,KAEAL,GAGA,MAAAA,MAAA,CAAAA,EACA,KAAAK,IAAA,CAAAA,EACA,MACA,CACA,CACA,IAAYzqB,OAAAA,CAAA,EAAS+E,EACrB,CAAYm3G,QAAAA,CAAA,EAAU,KACtBl8G,EAAA,IAEA,KAAA2gH,WAAA,IACAzE,CAAAA,IAAAA,EAAAl8G,MAAA,CACA+E,CAAA,CAAA/E,EAAA,KAAAk8G,EACAn3G,EAAA80G,QAAA,CAAAqC,EAAA,GAEA,KAAAzxF,IAAA,OAAAk2F,WAAA,CACA,KAAAv2F,MAAA,IAEA,KAAAA,MAAA,EAAApqB,EAGA,CAEAyjB,UAAA,CACA,YAAAuX,MAAA,CAEA,CC7iCA,IAAMimF,GAAY,GA2BX,SAAAC,GAAAthE,CAAA,CAAAtgD,CAAA,EACP,IAAS6hH,mBAAAA,CAAA,CAAAtJ,SAAAA,CAAA,CAAArmB,SAAAA,CAAA,EAAwClyF,GAAa2hH,GAC9DT,EAAAW,EACA,IAAAA,EAAA,CAA8B/nF,KAAAy+E,GAAA,iBAC9B58F,KAAAA,EAaA,OAAUnZ,MAXMs/G,SD8gCTx/G,CAAA,CAAAtC,CAAA,EAaP,IAAAsjF,EAAA,IAAAw9B,GAAA9gH,GAGA,OADAsjF,EAAA3iB,SAAA,CAAAr+D,EAAA5C,IAAA,EAAA4C,EAAAghF,GACAA,EAAA5nD,MAAA,EC7hCA4kB,EAEA,CACAx0B,SAAA,GACA60C,UAAA,CAAkB,GAAGq8C,EAAS,IAAA9qB,CAAA,EAC9BgvB,UAAAA,GAAAvlG,KAAAA,CACA,GAIU2I,IAFV48F,EAAAA,EAAApvF,MAAA,GAAAnW,KAAAA,CAEU,CACV,CC7HO,IAAAqd,GAAA,CACP+oF,aA8BA,SAAAz/G,CAAA,CAAAghF,CAAA,EACA,KAAAhhF,EAAA3C,IAAA,CAAAD,IAAA,EAAA4C,EAAA3C,IAAA,CAAA2jF,GAEA,OAAAhhF,EAAAE,KAAA,EAAAF,KAAAqZ,IAAArZ,EAAAE,KAAA,GACA8gF,EAAAp1D,KAAA,MAGA5rB,YAAAA,EAAAE,KAAA,CAAA9C,IAAA,CACA4jF,EAAAp1D,KAAA,CACA,IAAA8zF,GAAA3gH,OAAAiB,EAAAE,KAAA,CAAAA,KAAA,GAAAib,OAAA,gBAAuE,IACvEnb,GAGA,KAAAA,EAAAE,KAAA,CAAA9C,IAAA,EAAA4C,EAAAE,KAAA,CAAA8gF,GAGA,EA7CA2+B,kBA2DA,SAAA3/G,CAAA,CAAAghF,CAAA,EACAA,EAAAp1D,KAAA,OACA,KAAA5rB,EAAA3C,IAAA,CAAAD,IAAA,EAAA4C,EAAA3C,IAAA,CAAA2jF,GACAA,EAAAp1D,KAAA,KACA,EA9DAg0F,mBA4EA,SAAA5/G,CAAA,CAAAghF,CAAA,EACAA,EAAAp1D,KAAA,OAAA5rB,EACA,EA7EA6/G,WA4FA,SAAA7/G,CAAA,CAAAghF,CAAA,EACA,IAAA58D,EAAA,GAIA,GAFA,KAAApkB,EAAAyC,cAAA,CAAArF,IAAA,EAAA4C,EAAAyC,cAAA,CAAAu+E,GAEAhhF,EAAAwC,QAAA,CACA,OAAA4hB,EAAApkB,EAAAwC,QAAA,CAAApE,MAAA,GACA,IAAAo8C,EAAAx6C,EAAAwC,QAAA,CAAA4hB,EAAA,CAIA,GAAAo2B,mBAAAA,EAAAp9C,IAAA,CACA,qDAGA,KAAAo9C,EAAAp9C,IAAA,EAAAo9C,EAAAwmC,EACA,CAGAhhF,EAAA0C,cAAA,EACA,KAAA1C,EAAA0C,cAAA,CAAAtF,IAAA,EAAA4C,EAAA0C,cAAA,CAAAs+E,EAEA,EAjHA8+B,mBA2HA,aA1HAC,uBAwIA,SAAA//G,CAAA,CAAAghF,CAAA,EACAA,EAAAp1D,KAAA,MACA,KAAA5rB,EAAAoB,UAAA,CAAAhE,IAAA,EAAA4C,EAAAoB,UAAA,CAAA4/E,GACAA,EAAAp1D,KAAA,KACA,EA3IAo0F,YAyJA,SAAAhgH,CAAA,CAAAghF,CAAA,EACA,IAAA58D,EAAA,GAIA,GAFA,KAAApkB,EAAAigH,eAAA,CAAA7iH,IAAA,EAAA4C,EAAAigH,eAAA,CAAAj/B,GAEAhhF,EAAAwC,QAAA,CACA,OAAA4hB,EAAApkB,EAAAwC,QAAA,CAAApE,MAAA,GACA,IAAAo8C,EAAAx6C,EAAAwC,QAAA,CAAA4hB,EAAA,CAIA,GAAAo2B,mBAAAA,EAAAp9C,IAAA,CACA,qDAGA,KAAAo9C,EAAAp9C,IAAA,EAAAo9C,EAAAwmC,EACA,CAGA,KAAAhhF,EAAAkgH,eAAA,CAAA9iH,IAAA,EAAA4C,EAAAkgH,eAAA,CAAAl/B,EACA,EA5KAm/B,cA0LA,SAAAngH,CAAA,CAAAghF,CAAA,EACAA,EAAAp1D,KAAA,CAAA5rB,EAAA3C,IAAA,CAAA2C,EACA,EA3LAogH,oBAyMA,SAAApgH,CAAA,CAAAghF,CAAA,EACA,KAAAhhF,EAAA7C,MAAA,CAAAC,IAAA,EAAA4C,EAAA7C,MAAA,CAAA6jF,GACAA,EAAAp1D,KAAA,MACA,KAAA5rB,EAAAzC,QAAA,CAAAH,IAAA,EAAA4C,EAAAzC,QAAA,CAAAyjF,EACA,EA5MAq/B,kBA0NA,SAAArgH,CAAA,CAAAghF,CAAA,EACA,KAAAhhF,EAAA1C,SAAA,CAAAF,IAAA,EAAA4C,EAAA1C,SAAA,CAAA0jF,GACAA,EAAAp1D,KAAA,MACA,KAAA5rB,EAAA3C,IAAA,CAAAD,IAAA,EAAA4C,EAAA3C,IAAA,CAAA2jF,EACA,EA7NAs/B,kBA2OA,SAAAtgH,CAAA,CAAAghF,CAAA,EACA,IAAA58D,EAAA,GAKA,GAHA48D,EAAAp1D,KAAA,MACA,KAAA5rB,EAAA3C,IAAA,CAAAD,IAAA,EAAA4C,EAAA3C,IAAA,CAAA2jF,GAEAhhF,EAAAmC,UAAA,CACA,OAAAiiB,EAAApkB,EAAAmC,UAAA,CAAA/D,MAAA,EACA4iF,EAAAp1D,KAAA,MACA,KAAA5rB,EAAAmC,UAAA,CAAAiiB,EAAA,CAAAhnB,IAAA,EAAA4C,EAAAmC,UAAA,CAAAiiB,EAAA,CAAA48D,GAIAA,EAAAp1D,KAAA,CAAA5rB,EAAAqC,WAAA,WACA,EAxPAk+G,mBAsQA,SAAAvgH,CAAA,CAAAghF,CAAA,EACAA,EAAAp1D,KAAA,MAAA5rB,EACA,EAvQAwgH,mBAqRA,SAAAxgH,CAAA,CAAAghF,CAAA,EACAA,EAAAp1D,KAAA,MAEA,KAAAyxF,aAAA,CAAAr9G,EAAAghF,GACAA,EAAAp1D,KAAA,KACA,EAzRA60F,QAuSA,SAAgBzgH,CAAA,CAAAghF,CAAA,EAChBA,EAAAp1D,KAAA,CAAA8zF,GAAA1/G,EAAAE,KAAA,EAAAib,OAAA,WAAkDulG,IAAA1gH,EAClD,CAxSA,EAyTA,SAAA0/G,GAAAx/G,CAAA,EACA,OAAAA,EAAAib,OAAA,yBACA,CAMA,SAAAulG,GAAAt+E,CAAA,EACA,MAAAA,MAAAA,EACA,OACAA,MAAAA,EACA,OACAA,MAAAA,EACA,SACA,QACA,CC5VO,SAAAu+E,GAAAjjH,CAAA,EAIP,IAAS6hH,mBAAAA,CAAA,EAAoB7hH,CAE7Bkd,CAHqC,KAGrC4nF,QAAA,CAUA,SAAAxkD,CAAA,CAAAxmB,CAAA,EACA,IAAAvU,EAAAs8F,EACQD,GAAIthE,EAAA,CACZuhE,mBAAAA,EACAtJ,SAAAz+E,EAAA3T,IAAA,gBACA+rE,SAAoBl5D,EACpB,GACQ4oF,GAAIthE,EAAA,CAAQ4xC,SAAUl5D,EAAG,GAIjC,OAFAc,EAAAxV,GAAA,CAAAiB,EAAAjB,GAAA,CAEAiB,EAAA/iB,KAAA,CAEA,CCtCO,MAAAg1C,GAOPn7B,YAAAxc,CAAA,CAAAukC,CAAA,CAAAiE,CAAA,EACA,KAAAxoC,QAAA,CAAAA,EACA,KAAAukC,MAAA,CAAAA,EACAiE,GACA,MAAAA,KAAA,CAAAA,CAAA,CAEA,CACA,CCRO,SAAA1D,GAAAqT,CAAA,CAAA3P,CAAA,EAEP,IAAAxoC,EAAA,GAEAukC,EAAA,GACA1d,EAAA,GAEA,OAAAA,EAAAsxB,EAAAt3C,MAAA,EACAkF,OAAA0zC,MAAA,CAAAz5C,EAAAm4C,CAAA,CAAAtxB,EAAA,CAAA7mB,QAAA,EACA+F,OAAA0zC,MAAA,CAAAlV,EAAA4T,CAAA,CAAAtxB,EAAA,CAAA0d,MAAA,EAGA,WAAaoT,GAAM33C,EAAAukC,EAAAiE,EACnB,CCrBO,SAAS66E,GAAS1gH,CAAA,EACzB,OAAAA,EAAAyY,WAAA,EACA,CFiBAu8B,GAAAp7B,SAAA,CAAAvc,QAAA,IAEA23C,GAAAp7B,SAAA,CAAAgoB,MAAA,IAEAoT,GAAAp7B,SAAA,CAAAisB,KAAA,KG3BO,OAAAlE,GAMP9nB,YAAAxc,CAAA,CAAA88B,CAAA,EAEA,KAAA98B,QAAA,CAAAA,EAEA,KAAA88B,SAAA,CAAAA,CACA,CACA,CAGAwH,GAAA/nB,SAAA,CAAAisB,KAAA,MACAlE,GAAA/nB,SAAA,CAAA4N,OAAA,IACAma,GAAA/nB,SAAA,CAAA6oB,UAAA,IACAd,GAAA/nB,SAAA,CAAA6N,iBAAA,IACAka,GAAA/nB,SAAA,CAAA0N,MAAA,IACAqa,GAAA/nB,SAAA,CAAAmN,cAAA,IACA4a,GAAA/nB,SAAA,CAAAkN,cAAA,IACA6a,GAAA/nB,SAAA,CAAAoN,qBAAA,IACA2a,GAAA/nB,SAAA,CAAAssB,eAAA,IACAvE,GAAA/nB,SAAA,CAAAs7B,OAAA,ICxBA,IAAAO,GAAA,EAEakrE,GAAOjrE,KACbjT,GAAAiT,KACAjuB,GAAAiuB,KACApuB,GAAAouB,KACA5uB,GAAA4uB,KACA3uB,GAAA2uB,KACA1uB,GAAA0uB,KAEP,SAAAA,KACA,YAAAD,EACA,CCPA,IAAAN,GAAA/xC,OAAAyT,IAAA,CAA2B+pG,EAEpB,OAAAl/E,WAA0BC,GAQjC9nB,YAAAxc,CAAA,CAAA88B,CAAA,CAAAkb,CAAA,CAAAxP,CAAA,MAuBApuB,EAAAzX,EAtBA,IAAAkkB,EAAA,GAMA,GAJA,MAAA7mB,EAAA88B,GAEA0L,GAqBA5hB,CAAAA,IArBA,MAqBA,CArBA4hB,CAqBA,EAnBA,iBAAAwP,EACA,OAAAnxB,EAAAixB,GAAAj3C,MAAA,GACA,IAAAo3C,EAAAH,EAAA,CAAAjxB,EAAA,CAcAzM,EAbA09B,EAAA,CAAAjxB,EAAA,EAaAlkB,EAbA,CAAAq1C,EAA0CurE,CAAK,CAAAtrE,EAAA,IAAasrE,CAAK,CAAAtrE,EAAA,GAgBjErxB,CAAAA,IAhBA,CAgBAxM,EAAA,CAAAzX,CAAA,CAfA,CAEA,CACA,CAEA0hC,GAAA9nB,SAAA,CAAAs7B,OAAA,ICbA,IAAM2rE,GAAG,GAAKrjG,cAAA,CAMP,SAASsjG,GAAM7rE,CAAA,MAMtBhkC,EAJA,IAAA5T,EAAA,GAEAukC,EAAA,GAIA,IAAA3wB,KAAAgkC,EAAAhvB,UAAA,CACA,GAAQ46F,GAAGrnG,IAAA,CAAAy7B,EAAAhvB,UAAA,CAAAhV,GAAA,CACX,IAAAjR,EAAAi1C,EAAAhvB,UAAA,CAAAhV,EAAA,CACA4V,EAAA,IAAuB6a,GACvBzwB,EACAgkC,EAAAvS,SAAA,CAAAuS,EAAAhzC,UAAA,KAAwDgP,GACxDjR,EACAi1C,EAAApP,KAAA,CAIAoP,CAAAA,EAAA/O,eAAA,EACA+O,EAAA/O,eAAA,CAAAlX,QAAA,CAAA/d,IAEA4V,CAAAA,EAAAqf,eAAA,KAGA7oC,CAAA,CAAA4T,EAAA,CAAA4V,EAEA+a,CAAA,CAAa8+E,GAASzvG,GAAA,CAAAA,EACtB2wB,CAAA,CAAa8+E,GAAS75F,EAAAsT,SAAA,GAAAlpB,CACtB,CAGA,WAAa+jC,GAAM33C,EAAAukC,EAAAqT,EAAApP,KAAA,CACnB,CCvDO,IAAAzD,GAAc0+E,GAAM,CAC3Bj7E,MAAA,QACAnD,UAAAA,CAAA7H,EAAA5pB,IACA,SAAAA,EAAAxS,KAAA,IAAAga,WAAA,GAEAwN,WAAA,CACA0vB,aAAA,KACAC,aAAA,KACAC,UAAA,KACAC,UAAA,KACAC,UAAA,KACAC,WAAA,KACAC,UAAA,IACA,CACA,GCdO5T,GAAYy+E,GAAM,CACzBj7E,MAAA,MACAnD,UAAAA,CAAA7H,EAAA5pB,IACA,OAAAA,EAAAxS,KAAA,IAAAga,WAAA,GAEAwN,WAAA,CAAeiwB,QAAA,KAAAC,QAAA,KAAAC,SAAA,KACf,GCHO,SAAArB,GAAA9yC,CAAA,CAAAk4B,CAAA,EACP,OAAAA,KAAAl4B,EAAAA,CAAA,CAAAk4B,EAAA,CAAAA,CACA,CCAO,SAAAyL,GAAA3jC,CAAA,CAAA5E,CAAA,EACP,OAAS03C,GAAsB9yC,EAAA5E,EAAAob,WAAA,GAC/B,CCNO,IAAA6pB,GAAcw+E,GAAM,CAC3Bj7E,MAAA,QACA5jC,WAAA,CAAeo0C,WAAA,eACf3T,UAAakD,GACb3f,WAAA,CAAeqc,MAAA,KAAAgU,WAAA,KACf,GCLO/T,GAAau+E,GAAM,CAC1Bp+E,UAAAA,CAAA7H,EAAA5pB,IACAA,SAAAA,EAAAA,EAAA,QAAAA,EAAAxS,KAAA,IAAAga,WAAA,GAEAwN,WAAA,CACA0c,qBAAA,KACAC,WAAgBH,GAChBI,iBAAA,KACAC,SAAcL,GACdM,YAAiBN,GACjBO,aAAkB1b,GAClB2b,aAAkB3b,GAClB4b,YAAiB5b,GACjB6b,aAAkBrc,GAClBsc,YAAA,KACAC,gBAAqBvc,GACrBwc,YAAA,KACAC,aAAkBd,GAClBe,eAAoB1c,GACpB2c,iBAAA,KACAC,aAAkBjB,GAClBkB,WAAgB7c,GAChB8c,YAAiBnB,GACjBoB,aAAA,KACAC,WAAgBrB,GAChBsB,YAAA,KACAC,iBAAA,KACAC,UAAA,KACAC,eAAoBpd,GACpBqd,UAAe7c,GACf8c,SAAA,KACAC,UAAe5B,GACf6B,cAAmB7B,GACnB8B,oBAAyB9B,GACzB+B,gBAAA,KACAC,SAAc3d,GACd4d,gBAAA,KACAC,aAAkBrd,GAClBsd,YAAiBnC,GACjBoC,aAAkBpC,GAClBqC,aAAA,KACAC,aAAkBtC,GAClBuC,oBAAyBle,GACzBme,aAAkB3d,GAClB4d,aAAkB5d,GAClB6d,YAAiB7d,GACjB8d,aAAkB3C,GAClB4C,YAAiB/d,GACjBge,SAAA,KACAC,aAAkBje,GAClBke,aAAkBle,GAClBme,aAAkBne,GAClBoe,cAAA,KACAC,KAAA,IACA,CACA,GC/Cao7E,GAAOD,GAAM,CAC1Bj7E,MAAA,OACA5jC,WAAA,CACA6jC,cAAA,iBACAC,UAAA,QACAC,QAAA,MACAC,UAAA,YACA,EACAvD,UAAakD,GACbM,gBAAA,0CACAjgB,WAAA,CAEAkgB,KAAA,KACAC,OAAYrf,GACZsf,cAAmBvf,GACnBwf,UAAexf,GACfyf,OAAA,KACAC,MAAA,KACAC,gBAAqBk6E,GACrBj6E,oBAAyBi6E,GACzBh6E,eAAoBg6E,GACpB/5E,IAAA,KACAnP,GAAA,KACAiG,MAAWijF,GACX95E,eAAA,KACAC,aAAkBhgB,GAClBigB,UAAe45E,GACf35E,SAAc25E,GACdK,SAAcl6F,GACdmgB,QAAA,KACAC,QAAA,KACA7a,QAAas0F,GACbx5E,KAAA,KACAphB,UAAee,GACfsgB,KAAU9f,GACV+f,QAAA,KACAhgB,QAAA,KACAigB,gBAAqB7E,GACrB8E,SAAco5E,GACdn5E,aAAkB1gB,GAClB2gB,OAAYngB,GAASP,GACrB2gB,YAAA,KACApb,KAAA,KACAqb,SAAA,KACAC,SAAA,KACAlS,QAAairF,GACbp/E,MAAWo/E,GACX94E,IAAA,KACAC,QAAA,KACAC,SAAc44E,GACd34E,SAAcvgB,GACdwgB,UAAexF,GACfyF,QAAA,KACAC,aAAA,KACA84E,cAAA,KACA74E,KAAA,KACAC,WAAA,KACAC,YAAA,KACAC,WAAA,KACAC,eAAoBm4E,GACpBl4E,WAAA,KACAC,QAAa5hB,GACb6hB,OAAYrhB,GACZ/S,OAAYosG,GACZ/3E,KAAUthB,GACVkQ,KAAA,KACAqR,SAAA,KACAC,QAAahiB,GACbiiB,UAAejiB,GACfhB,GAAA,KACAkjB,WAAA,KACAC,YAAA,KACAi4E,MAAWP,GACXz3E,UAAA,KACAC,UAAA,KACAC,GAAA,KACAC,MAAWs3E,GACXr3E,OAAA,KACAC,SAAcziB,GACd0iB,QAAa1iB,GACb2iB,UAAek3E,GACfj3E,SAAc5iB,GACd6iB,KAAA,KACAC,MAAA,KACA/2B,KAAA,KACA+oB,SAAA,KACA4E,KAAA,KACA9L,QAAA,KACAmV,KAAU82E,GACV72E,IAASxiB,GACT6P,SAAA,KACAzY,IAAA,KACAqrB,UAAeziB,GACf0iB,MAAA,KACAC,OAAA,KACAzrB,IAAA,KACA0rB,UAAe5iB,GACf6iB,SAAcw2E,GACdv2E,MAAWu2E,GACXxjH,KAAA,KACAktC,MAAA,KACAC,SAAcq2E,GACdp2E,WAAgBo2E,GAChBn2E,QAAA,KACAC,aAAA,KACAC,WAAA,KACAy2E,cAAA,KACAx2E,cAAA,KACA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OAHAg1F,EAAAh1F,EAAAk8E,KAAA,CAAA11D,EAAA,CAKA,OAAAwuE,CACA,EAMA0/C,GAAKG,gBAAA,EAAAR,EAAApuH,KACL,IAAAN,EAAmB+uH,GAAKE,UAAA,CAAAP,EAAApuH,EAAAllB,KAAA,QACxBw3D,EAAAtyC,CAAA,CAAAA,EAAAzlB,MAAA,OACA4uI,EAAAzpH,GAAA,CAAA4yC,EAAA,CACA,GAAA62E,GAAA,UAAAA,EACA,OAAAA,CACA,2CACA,ECjEA,IAAA0F,GAAA,SAEAC,GAAA,OAEAC,GAAA,OAEMC,GAAM,OAENC,GAAY,KAAAtoH,GAAA,UAAAA,EAEZuoH,GAAQ,KAAAvoH,GACdA,CAAAA,WAAAA,EAAAptB,IAAA,EACAotB,yBAAAA,EAAAptB,IAAA,EACAotB,yBAAAA,EAAAptB,IAAA,EACAotB,iBAAAA,EAAAptB,IAAA,EAGA,SAAA41I,GAAAxoH,CAAA,EACA,OAAAA,GACA,KAAAkoH,GACA,aACA,MAAAC,GACA,aACA,MAAAC,GACA,kBACA,MAAaC,GACb,gBACA,SACA,OAAAj0G,KAAAC,SAAA,CAAArU,EACA,CACA,CAEA,SAAAyoH,GAAAlqH,CAAA,EACA,OAAAA,GACA,KAAA2pH,GACA,uBACA,MAAAC,GACA,gBACA,MAAAC,GACA,sBACA,MAAaC,GACb,cACA,WACA,iBACA,WACA,eACA,QACA,SACA,WACA,eACA,SACA,oBACA,SACA,wBACA,SACA,qBACA,SACA,sBACA,SACA,oBACA,SACA,sBACA,SACA,oBACA,SACA,aACA,CACA,OAAA9pH,CAAA,KACA,QACA,QACA,aACA,SACA,eACA,SACA,sBACA,SACA,aACA,SACA,cACA,SACA,WACA,SACA,4BACA,SACA,4BACA,SACA,QACA,2BACA,CACA,WACA,CC1BA,SAAAmqH,GAAA30I,CAAA,EACA,OAAAA,GACA,KAAA8a,KAAAA,EACA,QACA,SACA,SACA,QACA,QACA,SACA,QACA,CACA,CACA,IAAA85H,GAAA,IAAAp6H,IAAA,0BACAq6H,GAAA,IAAAr6H,IAAA,qFACAs6H,GAAA,IAAAt6H,IA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","sources":["webpack://_N_E/./node_modules/.pnpm/acorn-jsx@5.3.2_acorn@8.12.1/node_modules/acorn-jsx/index.js","webpack://_N_E/./node_modules/.pnpm/acorn-jsx@5.3.2_acorn@8.12.1/node_modules/acorn-jsx/xhtml.js","webpack://_N_E/./node_modules/.pnpm/ansi-styles@3.2.1/node_modules/ansi-styles/index.js","webpack://_N_E/./node_modules/.pnpm/chalk@2.4.2/node_modules/chalk/index.js","webpack://_N_E/./node_modules/.pnpm/chalk@2.4.2/node_modules/chalk/templates.js","webpack://_N_E/./node_modules/.pnpm/color-convert@1.9.3/node_modules/color-convert/conversions.js","webpack://_N_E/./node_modules/.pnpm/color-convert@1.9.3/node_modules/color-convert/index.js","webpack://_N_E/./node_modules/.pnpm/color-convert@1.9.3/node_modules/color-convert/route.js","webpack://_N_E/./node_modules/.pnpm/color-name@1.1.3/node_modules/color-name/index.js","webpack://_N_E/./node_modules/.pnpm/comma-separated-tokens@1.0.8/node_modules/comma-separated-tokens/index.js","webpack://_N_E/./node_modules/.pnpm/escape-string-regexp@1.0.5/node_modules/escape-string-regexp/index.js","webpack://_N_E/./node_modules/.pnpm/extend@3.0.2/node_modules/extend/index.js","webpack://_N_E/./node_modules/.pnpm/hast-util-parse-selector@2.2.5/node_modules/hast-util-parse-selector/index.js","webpack://_N_E/./node_modules/.pnpm/hastscript@6.0.0/node_modules/hastscript/factory.js","webpack://_N_E/./node_modules/.pnpm/hastscript@6.0.0/node_modules/hastscript/html.js","webpack://_N_E/./node_modules/.pnpm/hastscript@6.0.0/node_modules/hastscript/index.js","webpack://_N_E/./node_modules/.pnpm/inline-style-parser@0.1.1/node_modules/inline-style-parser/index.js","webpack://_N_E/./node_modules/.pnpm/is-alphabetical@1.0.4/node_modules/is-alphabetical/index.js","webpack://_N_E/./node_modules/.pnpm/is-alphanumerical@1.0.4/node_modules/is-alphanumerical/index.js","webpack://_N_E/./node_modules/.pnpm/is-decimal@1.0.4/node_modules/is-decimal/index.js","webpack://_N_E/./node_modules/.pnpm/is-hexadecimal@1.0.4/node_modules/is-hexadecimal/index.js","webpack://_N_E/./node_modules/.pnpm/js-tokens@4.0.0/node_modules/js-tokens/index.js","webpack://_N_E/./node_modules/.pnpm/next@14.2.6_react-dom@18.3.1_react@18.3.1/node_modules/next/dist/api/app-dynamic.js","webpack://_N_E/./node_modules/.pnpm/next@14.2.6_react-dom@18.3.1_react@18.3.1/node_modules/next/dist/build/polyfills/process.js","webpack://_N_E/./node_modules/.pnpm/next@14.2.6_react-dom@18.3.1_react@18.3.1/node_modules/next/dist/compiled/buffer/index.js","webpack://_N_E/./node_modules/.pnpm/next@14.2.6_react-dom@18.3.1_react@18.3.1/node_modules/next/dist/compiled/process/browser.js","webpack://_N_E/../../../src/shared/lib/app-dynamic.tsx","webpack://_N_E/../../../../src/shared/lib/lazy-dynamic/dynamic-bailout-to-csr.tsx","webpack://_N_E/../../../../src/shared/lib/lazy-dynamic/loadable.tsx","webpack://_N_E/../../../../src/shared/lib/lazy-dynamic/preload-css.tsx","webpack://_N_E/./node_modules/.pnpm/parse-entities@2.0.0/node_modules/parse-entities/decode-entity.browser.js","webpack://_N_E/./node_modules/.pnpm/parse-entities@2.0.0/node_modules/parse-entities/index.js","webpack://_N_E/./node_modules/.pnpm/picocolors@1.0.1/node_modules/picocolors/picocolors.browser.js","webpack://_N_E/./node_modules/.pnpm/prismjs@1.27.0/node_modules/prismjs/components/prism-core.js","webpack://_N_E/./node_modules/.pnpm/property-information@5.6.0/node_modules/property-information/find.js","webpack://_N_E/./node_modules/.pnpm/property-information@5.6.0/node_modules/property-information/html.js","webpack://_N_E/./node_modules/.pnpm/property-information@5.6.0/node_modules/property-information/lib/aria.js","webpack://_N_E/./node_modules/.pnpm/property-information@5.6.0/node_modules/property-information/lib/html.js","webpack://_N_E/./node_modules/.pnpm/property-information@5.6.0/node_modules/property-information/lib/util/case-insensitive-transform.js","webpack://_N_E/./node_modules/.pnpm/property-information@5.6.0/node_modules/property-information/lib/util/case-sensitive-transform.js","webpack://_N_E/./node_modules/.pnpm/property-information@5.6.0/node_modules/property-information/lib/util/create.js","webpack://_N_E/./node_modules/.pnpm/property-information@5.6.0/node_modules/property-information/lib/util/defined-info.js","webpack://_N_E/./node_modules/.pnpm/property-information@5.6.0/node_modules/property-information/lib/util/info.js","webpack://_N_E/./node_modules/.pnpm/property-information@5.6.0/node_modules/property-information/lib/util/merge.js","webpack://_N_E/./node_modules/.pnpm/property-information@5.6.0/node_modules/property-information/lib/util/schema.js","webpack://_N_E/./node_modules/.pnpm/property-information@5.6.0/node_modules/property-information/lib/util/types.js","webpack://_N_E/./node_modules/.pnpm/property-information@5.6.0/node_modules/property-information/lib/xlink.js","webpack://_N_E/./node_modules/.pnpm/property-information@5.6.0/node_modules/property-information/lib/xml.js","webpack://_N_E/./node_modules/.pnpm/property-information@5.6.0/node_modules/property-information/lib/xmlns.js","webpack://_N_E/./node_modules/.pnpm/property-information@5.6.0/node_modules/property-information/normalize.js","webpack://_N_E/./node_modules/.pnpm/@babel+runtime@7.25.4/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","webpack://_N_E/./node_modules/.pnpm/@babel+runtime@7.25.4/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","webpack://_N_E/./node_modules/.pnpm/@babel+runtime@7.25.4/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","webpack://_N_E/./node_modules/.pnpm/@babel+runtime@7.25.4/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","webpack://_N_E/./node_modules/.pnpm/@babel+runtime@7.25.4/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","webpack://_N_E/./node_modules/.pnpm/@babel+runtime@7.25.4/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","webpack://_N_E/./node_modules/.pnpm/@babel+runtime@7.25.4/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","webpack://_N_E/./node_modules/.pnpm/@babel+runtime@7.25.4/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","webpack://_N_E/./node_modules/.pnpm/@babel+runtime@7.25.4/node_modules/@babel/runtime/helpers/esm/typeof.js","webpack://_N_E/./node_modules/.pnpm/@babel+runtime@7.25.4/node_modules/@babel/runtime/helpers/esm/toPrimitive.js","webpack://_N_E/./node_modules/.pnpm/@babel+runtime@7.25.4/node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","webpack://_N_E/./node_modules/.pnpm/@babel+runtime@7.25.4/node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack://_N_E/./node_modules/.pnpm/@babel+runtime@7.25.4/node_modules/@babel/runtime/helpers/esm/extends.js","webpack://_N_E/./node_modules/.pnpm/react-syntax-highlighter@15.5.0_react@18.3.1/node_modules/react-syntax-highlighter/dist/esm/create-element.js","webpack://_N_E/./node_modules/.pnpm/react-syntax-highlighter@15.5.0_react@18.3.1/node_modules/react-syntax-highlighter/dist/esm/checkForListedLanguage.js","webpack://_N_E/./node_modules/.pnpm/react-syntax-highlighter@15.5.0_react@18.3.1/node_modules/react-syntax-highlighter/dist/esm/highlight.js","webpack://_N_E/./node_modules/.pnpm/react-syntax-highlighter@15.5.0_react@18.3.1/node_modules/react-syntax-highlighter/dist/esm/styles/prism/prism.js","webpack://_N_E/./node_modules/.pnpm/react-syntax-highlighter@15.5.0_react@18.3.1/node_modules/react-syntax-highlighter/dist/esm/languages/prism/supported-languages.js","webpack://_N_E/./node_modules/.pnpm/react-syntax-highlighter@15.5.0_react@18.3.1/node_modules/react-syntax-highlighter/dist/esm/prism.js","webpack://_N_E/./node_modules/.pnpm/react-syntax-highlighter@15.5.0_react@18.3.1/node_modules/react-syntax-highlighter/dist/esm/styles/prism/one-light.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/core.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/index.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/abap.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/abnf.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/actionscript.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/ada.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/agda.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/al.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/antlr4.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/apacheconf.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/apex.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/apl.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/applescript.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/aql.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/arduino.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/arff.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/asciidoc.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/asm6502.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/asmatmel.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/aspnet.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/autohotkey.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/autoit.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/avisynth.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/avro-idl.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/bash.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/basic.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/batch.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/bbcode.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/bicep.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/birb.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/bison.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/bnf.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/brainfuck.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/brightscript.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/bro.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/bsl.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/c.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/cfscript.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/chaiscript.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/cil.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/clike.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/clojure.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/cmake.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/cobol.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/coffeescript.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/concurnas.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/coq.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/cpp.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/crystal.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/csharp.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/cshtml.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/csp.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/css-extras.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/css.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/csv.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/cypher.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/d.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/dart.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/dataweave.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/dax.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/dhall.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/diff.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/django.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/dns-zone-file.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/docker.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/dot.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/ebnf.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/editorconfig.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/eiffel.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/ejs.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/elixir.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/elm.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/erb.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/erlang.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/etlua.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/excel-formula.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/factor.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/false.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/firestore-security-rules.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/flow.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/fortran.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/fsharp.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/ftl.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/gap.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/gcode.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/gdscript.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/gedcom.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/gherkin.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/git.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/glsl.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/gml.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/gn.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/go-module.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/go.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/graphql.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/groovy.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/haml.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/handlebars.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/haskell.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/haxe.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/hcl.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/hlsl.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/hoon.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/hpkp.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/hsts.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/http.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/ichigojam.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/icon.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/icu-message-format.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/idris.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/iecst.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/ignore.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/inform7.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/ini.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/io.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/j.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/java.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/javadoc.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/javadoclike.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/javascript.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/javastacktrace.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/jexl.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/jolie.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/jq.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/js-extras.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/js-templates.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/jsdoc.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/json.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/json5.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/jsonp.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/jsstacktrace.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/jsx.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/julia.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/keepalived.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/keyman.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/kotlin.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/kumir.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/kusto.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/latex.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/latte.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/less.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/lilypond.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/liquid.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/lisp.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/livescript.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/llvm.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/log.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/lolcode.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/lua.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/magma.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/makefile.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/markdown.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/markup-templating.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/markup.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/matlab.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/maxscript.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/mel.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/mermaid.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/mizar.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/mongodb.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/monkey.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/moonscript.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/n1ql.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/n4js.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/nand2tetris-hdl.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/naniscript.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/nasm.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/neon.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/nevod.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/nginx.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/nim.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/nix.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/nsis.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/objectivec.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/ocaml.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/opencl.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/openqasm.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/oz.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/parigp.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/parser.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/pascal.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/pascaligo.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/pcaxis.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/peoplecode.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/perl.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/php-extras.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/php.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/phpdoc.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/plsql.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/powerquery.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/powershell.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/processing.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/prolog.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/promql.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/properties.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/protobuf.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/psl.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/pug.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/puppet.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/pure.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/purebasic.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/purescript.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/python.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/q.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/qml.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/qore.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/qsharp.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/r.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/racket.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/reason.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/regex.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/rego.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/renpy.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/rest.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/rip.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/roboconf.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/robotframework.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/ruby.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/rust.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/sas.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/sass.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/scala.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/scheme.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/scss.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/shell-session.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/smali.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/smalltalk.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/smarty.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/sml.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/solidity.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/solution-file.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/soy.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/sparql.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/splunk-spl.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/sqf.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/sql.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/squirrel.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/stan.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/stylus.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/swift.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/systemd.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/t4-cs.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/t4-templating.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/t4-vb.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/tap.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/tcl.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/textile.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/toml.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/tremor.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/tsx.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/tt2.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/turtle.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/twig.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/typescript.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/typoscript.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/unrealscript.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/uorazor.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/uri.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/v.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/vala.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/vbnet.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/velocity.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/verilog.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/vhdl.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/vim.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/visual-basic.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/warpscript.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/wasm.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/web-idl.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/wiki.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/wolfram.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/wren.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/xeora.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/xml-doc.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/xojo.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/xquery.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/yaml.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/yang.js","webpack://_N_E/./node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/zig.js","webpack://_N_E/./node_modules/.pnpm/space-separated-tokens@1.1.5/node_modules/space-separated-tokens/index.js","webpack://_N_E/./node_modules/.pnpm/style-to-object@0.4.4/node_modules/style-to-object/index.js","webpack://_N_E/./node_modules/.pnpm/supports-color@5.5.0/node_modules/supports-color/browser.js","webpack://_N_E/./node_modules/.pnpm/xtend@4.0.2/node_modules/xtend/immutable.js","webpack://_N_E/./node_modules/.pnpm/@babel+code-frame@7.24.7/node_modules/@babel/code-frame/lib/index.js","webpack://_N_E/./node_modules/.pnpm/@babel+helper-validator-identifier@7.24.7/node_modules/@babel/helper-validator-identifier/lib/identifier.js","webpack://_N_E/./node_modules/.pnpm/@babel+helper-validator-identifier@7.24.7/node_modules/@babel/helper-validator-identifier/lib/index.js","webpack://_N_E/./node_modules/.pnpm/@babel+helper-validator-identifier@7.24.7/node_modules/@babel/helper-validator-identifier/lib/keyword.js","webpack://_N_E/./node_modules/.pnpm/@babel+highlight@7.24.7/node_modules/@babel/highlight/lib/index.js","webpack://_N_E/./node_modules/.pnpm/next-mdx-remote@5.0.0_@types+react@18.3.4_react@18.3.1/node_modules/next-mdx-remote/dist/jsx-runtime.cjs","webpack://_N_E/./node_modules/.pnpm/@ungap+structured-clone@1.2.0/node_modules/@ungap/structured-clone/esm/types.js","webpack://_N_E/./node_modules/.pnpm/@ungap+structured-clone@1.2.0/node_modules/@ungap/structured-clone/esm/deserialize.js","webpack://_N_E/./node_modules/.pnpm/@ungap+structured-clone@1.2.0/node_modules/@ungap/structured-clone/esm/serialize.js","webpack://_N_E/./node_modules/.pnpm/@ungap+structured-clone@1.2.0/node_modules/@ungap/structured-clone/esm/index.js","webpack://_N_E/./node_modules/.pnpm/ccount@2.0.1/node_modules/ccount/index.js","webpack://_N_E/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/default.js","webpack://_N_E/./node_modules/.pnpm/hast-util-heading-rank@3.0.0/node_modules/hast-util-heading-rank/lib/index.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-string@4.0.0/node_modules/mdast-util-to-string/lib/index.js","webpack://_N_E/./node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/blank-line.js","webpack://_N_E/./node_modules/.pnpm/micromark-factory-space@2.0.0/node_modules/micromark-factory-space/index.js","webpack://_N_E/./node_modules/.pnpm/micromark-util-character@2.1.0/node_modules/micromark-util-character/index.js","webpack://_N_E/./node_modules/.pnpm/micromark-util-chunked@2.0.0/node_modules/micromark-util-chunked/index.js","webpack://_N_E/./node_modules/.pnpm/micromark-util-classify-character@2.0.0/node_modules/micromark-util-classify-character/index.js","webpack://_N_E/./node_modules/.pnpm/micromark-util-combine-extensions@2.0.0/node_modules/micromark-util-combine-extensions/index.js","webpack://_N_E/./node_modules/.pnpm/micromark-util-normalize-identifier@2.0.0/node_modules/micromark-util-normalize-identifier/index.js","webpack://_N_E/./node_modules/.pnpm/micromark-util-resolve-all@2.0.0/node_modules/micromark-util-resolve-all/index.js","webpack://_N_E/./node_modules/.pnpm/unist-util-stringify-position@4.0.0/node_modules/unist-util-stringify-position/lib/index.js","webpack://_N_E/./node_modules/.pnpm/vfile-message@4.0.2/node_modules/vfile-message/lib/index.js","webpack://_N_E/./node_modules/.pnpm/vfile@6.0.2/node_modules/vfile/lib/minpath.browser.js","webpack://_N_E/./node_modules/.pnpm/vfile@6.0.2/node_modules/vfile/lib/minproc.browser.js","webpack://_N_E/./node_modules/.pnpm/vfile@6.0.2/node_modules/vfile/lib/minurl.shared.js","webpack://_N_E/./node_modules/.pnpm/vfile@6.0.2/node_modules/vfile/lib/minurl.browser.js","webpack://_N_E/./node_modules/.pnpm/vfile@6.0.2/node_modules/vfile/lib/index.js","webpack://_N_E/./node_modules/.pnpm/markdown-extensions@2.0.0/node_modules/markdown-extensions/index.js","webpack://_N_E/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/extnames.js","webpack://_N_E/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/resolve-file-and-options.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-mdx-expression@2.0.0/node_modules/mdast-util-mdx-expression/lib/index.js","webpack://_N_E/./node_modules/.pnpm/character-entities-legacy@3.0.0/node_modules/character-entities-legacy/index.js","webpack://_N_E/./node_modules/.pnpm/character-reference-invalid@2.0.1/node_modules/character-reference-invalid/index.js","webpack://_N_E/./node_modules/.pnpm/is-decimal@2.0.1/node_modules/is-decimal/index.js","webpack://_N_E/./node_modules/.pnpm/is-hexadecimal@2.0.1/node_modules/is-hexadecimal/index.js","webpack://_N_E/./node_modules/.pnpm/is-alphabetical@2.0.1/node_modules/is-alphabetical/index.js","webpack://_N_E/./node_modules/.pnpm/is-alphanumerical@2.0.1/node_modules/is-alphanumerical/index.js","webpack://_N_E/./node_modules/.pnpm/decode-named-character-reference@1.0.2/node_modules/decode-named-character-reference/index.dom.js","webpack://_N_E/./node_modules/.pnpm/parse-entities@4.0.1/node_modules/parse-entities/lib/index.js","webpack://_N_E/./node_modules/.pnpm/stringify-entities@4.0.4/node_modules/stringify-entities/lib/core.js","webpack://_N_E/./node_modules/.pnpm/stringify-entities@4.0.4/node_modules/stringify-entities/lib/util/format-basic.js","webpack://_N_E/./node_modules/.pnpm/stringify-entities@4.0.4/node_modules/stringify-entities/lib/index.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-mdx-jsx@3.1.2/node_modules/mdast-util-mdx-jsx/lib/index.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-mdxjs-esm@2.0.1/node_modules/mdast-util-mdxjs-esm/lib/index.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-mdx@3.0.0/node_modules/mdast-util-mdx/lib/index.js","webpack://_N_E/./node_modules/.pnpm/estree-util-visit@2.0.0/node_modules/estree-util-visit/lib/color.default.js","webpack://_N_E/./node_modules/.pnpm/estree-util-visit@2.0.0/node_modules/estree-util-visit/lib/index.js","webpack://_N_E/./node_modules/.pnpm/micromark-util-events-to-acorn@2.0.2/node_modules/micromark-util-events-to-acorn/index.js","webpack://_N_E/./node_modules/.pnpm/unist-util-position-from-estree@2.0.0/node_modules/unist-util-position-from-estree/lib/index.js","webpack://_N_E/./node_modules/.pnpm/micromark-factory-mdx-expression@2.0.1/node_modules/micromark-factory-mdx-expression/index.js","webpack://_N_E/./node_modules/.pnpm/micromark-extension-mdx-expression@3.0.0/node_modules/micromark-extension-mdx-expression/lib/syntax.js","webpack://_N_E/./node_modules/.pnpm/estree-util-is-identifier-name@3.0.0/node_modules/estree-util-is-identifier-name/lib/index.js","webpack://_N_E/./node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.0/node_modules/micromark-extension-mdx-jsx/lib/factory-tag.js","webpack://_N_E/./node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.0/node_modules/micromark-extension-mdx-jsx/lib/jsx-text.js","webpack://_N_E/./node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.0/node_modules/micromark-extension-mdx-jsx/lib/jsx-flow.js","webpack://_N_E/./node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.0/node_modules/micromark-extension-mdx-jsx/lib/syntax.js","webpack://_N_E/./node_modules/.pnpm/micromark-extension-mdx-md@2.0.0/node_modules/micromark-extension-mdx-md/index.js","webpack://_N_E/./node_modules/.pnpm/micromark-extension-mdxjs-esm@3.0.0/node_modules/micromark-extension-mdxjs-esm/lib/syntax.js","webpack://_N_E/./node_modules/.pnpm/micromark-extension-mdxjs@3.0.0/node_modules/micromark-extension-mdxjs/index.js","webpack://_N_E/./node_modules/.pnpm/remark-mdx@3.0.1/node_modules/remark-mdx/lib/index.js","webpack://_N_E/./node_modules/.pnpm/micromark-util-subtokenize@2.0.1/node_modules/micromark-util-subtokenize/lib/splice-buffer.js","webpack://_N_E/./node_modules/.pnpm/micromark-util-subtokenize@2.0.1/node_modules/micromark-util-subtokenize/index.js","webpack://_N_E/./node_modules/.pnpm/micromark@4.0.0/node_modules/micromark/lib/postprocess.js","webpack://_N_E/./node_modules/.pnpm/micromark@4.0.0/node_modules/micromark/lib/initialize/content.js","webpack://_N_E/./node_modules/.pnpm/micromark@4.0.0/node_modules/micromark/lib/initialize/document.js","webpack://_N_E/./node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/content.js","webpack://_N_E/./node_modules/.pnpm/micromark@4.0.0/node_modules/micromark/lib/initialize/flow.js","webpack://_N_E/./node_modules/.pnpm/micromark@4.0.0/node_modules/micromark/lib/initialize/text.js","webpack://_N_E/./node_modules/.pnpm/micromark@4.0.0/node_modules/micromark/lib/create-tokenizer.js","webpack://_N_E/./node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/thematic-break.js","webpack://_N_E/./node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/list.js","webpack://_N_E/./node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/block-quote.js","webpack://_N_E/./node_modules/.pnpm/micromark-factory-destination@2.0.0/node_modules/micromark-factory-destination/index.js","webpack://_N_E/./node_modules/.pnpm/micromark-factory-label@2.0.0/node_modules/micromark-factory-label/index.js","webpack://_N_E/./node_modules/.pnpm/micromark-factory-title@2.0.0/node_modules/micromark-factory-title/index.js","webpack://_N_E/./node_modules/.pnpm/micromark-factory-whitespace@2.0.0/node_modules/micromark-factory-whitespace/index.js","webpack://_N_E/./node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/definition.js","webpack://_N_E/./node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/code-indented.js","webpack://_N_E/./node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/heading-atx.js","webpack://_N_E/./node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/setext-underline.js","webpack://_N_E/./node_modules/.pnpm/micromark-util-html-tag-name@2.0.0/node_modules/micromark-util-html-tag-name/index.js","webpack://_N_E/./node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/html-flow.js","webpack://_N_E/./node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/code-fenced.js","webpack://_N_E/./node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/character-reference.js","webpack://_N_E/./node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/character-escape.js","webpack://_N_E/./node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/line-ending.js","webpack://_N_E/./node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/label-end.js","webpack://_N_E/./node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/label-start-image.js","webpack://_N_E/./node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/attention.js","webpack://_N_E/./node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/autolink.js","webpack://_N_E/./node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/html-text.js","webpack://_N_E/./node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/label-start-link.js","webpack://_N_E/./node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/hard-break-escape.js","webpack://_N_E/./node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/code-text.js","webpack://_N_E/./node_modules/.pnpm/micromark@4.0.0/node_modules/micromark/lib/constructs.js","webpack://_N_E/./node_modules/.pnpm/micromark@4.0.0/node_modules/micromark/lib/parse.js","webpack://_N_E/./node_modules/.pnpm/micromark@4.0.0/node_modules/micromark/lib/preprocess.js","webpack://_N_E/./node_modules/.pnpm/micromark-util-decode-numeric-character-reference@2.0.1/node_modules/micromark-util-decode-numeric-character-reference/index.js","webpack://_N_E/./node_modules/.pnpm/micromark-util-decode-string@2.0.0/node_modules/micromark-util-decode-string/index.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-from-markdown@2.0.1/node_modules/mdast-util-from-markdown/lib/index.js","webpack://_N_E/./node_modules/.pnpm/remark-parse@11.0.0/node_modules/remark-parse/lib/index.js","webpack://_N_E/./node_modules/.pnpm/micromark-util-sanitize-uri@2.0.0/node_modules/micromark-util-sanitize-uri/index.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/footer.js","webpack://_N_E/./node_modules/.pnpm/unist-util-position@5.0.0/node_modules/unist-util-position/lib/index.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/break.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/code.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/delete.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/heading.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/html.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/revert.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/image.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/link.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/list-item.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/list.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/root.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/strong.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/table.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/table-row.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","webpack://_N_E/./node_modules/.pnpm/trim-lines@3.0.1/node_modules/trim-lines/index.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/text.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/index.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/state.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/index.js","webpack://_N_E/./node_modules/.pnpm/remark-rehype@11.1.0/node_modules/remark-rehype/lib/index.js","webpack://_N_E/./node_modules/.pnpm/bail@2.0.2/node_modules/bail/index.js","webpack://_N_E/./node_modules/.pnpm/is-plain-obj@4.1.0/node_modules/is-plain-obj/index.js","webpack://_N_E/./node_modules/.pnpm/trough@2.2.0/node_modules/trough/lib/index.js","webpack://_N_E/./node_modules/.pnpm/unified@11.0.5/node_modules/unified/lib/callable-instance.js","webpack://_N_E/./node_modules/.pnpm/unified@11.0.5/node_modules/unified/lib/index.js","webpack://_N_E/./node_modules/.pnpm/estree-walker@3.0.3/node_modules/estree-walker/src/walker.js","webpack://_N_E/./node_modules/.pnpm/estree-walker@3.0.3/node_modules/estree-walker/src/sync.js","webpack://_N_E/./node_modules/.pnpm/estree-walker@3.0.3/node_modules/estree-walker/src/async.js","webpack://_N_E/./node_modules/.pnpm/estree-walker@3.0.3/node_modules/estree-walker/src/index.js","webpack://_N_E/./node_modules/.pnpm/is-reference@3.0.2/node_modules/is-reference/src/index.js","webpack://_N_E/./node_modules/.pnpm/periscopic@3.1.0/node_modules/periscopic/src/index.js","webpack://_N_E/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-create.js","webpack://_N_E/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-declaration-to-expression.js","webpack://_N_E/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-is-declaration.js","webpack://_N_E/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-specifiers-to-declarations.js","webpack://_N_E/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-to-id-or-member-expression.js","webpack://_N_E/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/recma-document.js","webpack://_N_E/./node_modules/.pnpm/estree-util-build-jsx@3.0.1/node_modules/estree-util-build-jsx/lib/index.js","webpack://_N_E/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/recma-jsx-build.js","webpack://_N_E/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/util/estree-util-to-binary-addition.js","webpack://_N_E/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/recma-jsx-rewrite.js","webpack://_N_E/./node_modules/.pnpm/astring@1.8.6/node_modules/astring/dist/astring.mjs","webpack://_N_E/./node_modules/.pnpm/estree-util-to-js@2.0.0/node_modules/estree-util-to-js/lib/index.js","webpack://_N_E/./node_modules/.pnpm/estree-util-to-js@2.0.0/node_modules/estree-util-to-js/lib/jsx.js","webpack://_N_E/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/recma-stringify.js","webpack://_N_E/./node_modules/.pnpm/property-information@6.5.0/node_modules/property-information/lib/util/schema.js","webpack://_N_E/./node_modules/.pnpm/property-information@6.5.0/node_modules/property-information/lib/util/merge.js","webpack://_N_E/./node_modules/.pnpm/property-information@6.5.0/node_modules/property-information/lib/normalize.js","webpack://_N_E/./node_modules/.pnpm/property-information@6.5.0/node_modules/property-information/lib/util/info.js","webpack://_N_E/./node_modules/.pnpm/property-information@6.5.0/node_modules/property-information/lib/util/types.js","webpack://_N_E/./node_modules/.pnpm/property-information@6.5.0/node_modules/property-information/lib/util/defined-info.js","webpack://_N_E/./node_modules/.pnpm/property-information@6.5.0/node_modules/property-information/lib/util/create.js","webpack://_N_E/./node_modules/.pnpm/property-information@6.5.0/node_modules/property-information/lib/xlink.js","webpack://_N_E/./node_modules/.pnpm/property-information@6.5.0/node_modules/property-information/lib/xml.js","webpack://_N_E/./node_modules/.pnpm/property-information@6.5.0/node_modules/property-information/lib/util/case-sensitive-transform.js","webpack://_N_E/./node_modules/.pnpm/property-information@6.5.0/node_modules/property-information/lib/util/case-insensitive-transform.js","webpack://_N_E/./node_modules/.pnpm/property-information@6.5.0/node_modules/property-information/lib/xmlns.js","webpack://_N_E/./node_modules/.pnpm/property-information@6.5.0/node_modules/property-information/lib/aria.js","webpack://_N_E/./node_modules/.pnpm/property-information@6.5.0/node_modules/property-information/lib/html.js","webpack://_N_E/./node_modules/.pnpm/property-information@6.5.0/node_modules/property-information/lib/svg.js","webpack://_N_E/./node_modules/.pnpm/property-information@6.5.0/node_modules/property-information/index.js","webpack://_N_E/./node_modules/.pnpm/zwitch@2.0.4/node_modules/zwitch/index.js","webpack://_N_E/./node_modules/.pnpm/hast-util-to-estree@3.1.0/node_modules/hast-util-to-estree/lib/handlers/comment.js","webpack://_N_E/./node_modules/.pnpm/comma-separated-tokens@2.0.3/node_modules/comma-separated-tokens/index.js","webpack://_N_E/./node_modules/.pnpm/property-information@6.5.0/node_modules/property-information/lib/find.js","webpack://_N_E/./node_modules/.pnpm/property-information@6.5.0/node_modules/property-information/lib/hast-to-react.js","webpack://_N_E/./node_modules/.pnpm/space-separated-tokens@2.0.2/node_modules/space-separated-tokens/index.js","webpack://_N_E/./node_modules/.pnpm/style-to-object@0.4.4/node_modules/style-to-object/index.mjs","webpack://_N_E/./node_modules/.pnpm/hast-util-to-estree@3.1.0/node_modules/hast-util-to-estree/lib/handlers/element.js","webpack://_N_E/./node_modules/.pnpm/estree-util-attach-comments@3.0.0/node_modules/estree-util-attach-comments/lib/index.js","webpack://_N_E/./node_modules/.pnpm/hast-util-to-estree@3.1.0/node_modules/hast-util-to-estree/lib/handlers/mdx-expression.js","webpack://_N_E/./node_modules/.pnpm/hast-util-to-estree@3.1.0/node_modules/hast-util-to-estree/lib/handlers/mdx-jsx-element.js","webpack://_N_E/./node_modules/.pnpm/hast-util-to-estree@3.1.0/node_modules/hast-util-to-estree/lib/handlers/mdxjs-esm.js","webpack://_N_E/./node_modules/.pnpm/hast-util-whitespace@3.0.0/node_modules/hast-util-whitespace/lib/index.js","webpack://_N_E/./node_modules/.pnpm/hast-util-to-estree@3.1.0/node_modules/hast-util-to-estree/lib/handlers/root.js","webpack://_N_E/./node_modules/.pnpm/hast-util-to-estree@3.1.0/node_modules/hast-util-to-estree/lib/handlers/text.js","webpack://_N_E/./node_modules/.pnpm/hast-util-to-estree@3.1.0/node_modules/hast-util-to-estree/lib/handlers/index.js","webpack://_N_E/./node_modules/.pnpm/hast-util-to-estree@3.1.0/node_modules/hast-util-to-estree/lib/state.js","webpack://_N_E/./node_modules/.pnpm/hast-util-to-estree@3.1.0/node_modules/hast-util-to-estree/lib/index.js","webpack://_N_E/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/rehype-recma.js","webpack://_N_E/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/rehype-remove-raw.js","webpack://_N_E/./node_modules/.pnpm/collapse-white-space@2.1.0/node_modules/collapse-white-space/index.js","webpack://_N_E/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/plugin/remark-mark-and-unravel.js","webpack://_N_E/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/node-types.js","webpack://_N_E/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/core.js","webpack://_N_E/./node_modules/.pnpm/@mdx-js+mdx@3.0.1/node_modules/@mdx-js/mdx/lib/compile.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/nodes/identity.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/visit.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/doc/directives.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/doc/anchors.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/doc/applyReviver.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/nodes/toJS.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/nodes/Node.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/nodes/Alias.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/nodes/Scalar.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/doc/createNode.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/nodes/Collection.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/stringify/stringifyComment.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/stringify/foldFlowLines.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/stringify/stringifyString.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/stringify/stringify.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/stringify/stringifyPair.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/log.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/nodes/addPairToJSMap.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/nodes/Pair.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/stringify/stringifyCollection.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/nodes/YAMLMap.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/schema/common/map.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/nodes/YAMLSeq.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/schema/common/seq.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/schema/common/string.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/schema/common/null.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/schema/core/bool.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/stringify/stringifyNumber.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/schema/core/float.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/schema/core/int.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/schema/core/schema.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/schema/json/schema.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/schema/yaml-1.1/binary.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/schema/yaml-1.1/pairs.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/schema/yaml-1.1/omap.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/schema/yaml-1.1/bool.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/schema/yaml-1.1/float.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/schema/yaml-1.1/int.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/schema/yaml-1.1/set.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/schema/yaml-1.1/timestamp.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/schema/yaml-1.1/schema.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/schema/tags.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/schema/Schema.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/stringify/stringifyDocument.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/doc/Document.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/errors.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/compose/resolve-props.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/compose/util-contains-newline.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/compose/util-flow-indent-check.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/compose/util-map-includes.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/compose/resolve-block-map.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/compose/resolve-block-seq.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/compose/resolve-end.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/compose/resolve-flow-collection.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/compose/compose-collection.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/compose/resolve-block-scalar.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/compose/resolve-flow-scalar.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/compose/compose-scalar.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/compose/util-empty-scalar-position.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/compose/compose-node.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/compose/compose-doc.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/compose/composer.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/parse/cst-scalar.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/parse/cst-stringify.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/parse/cst-visit.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/parse/cst.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/parse/lexer.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/parse/line-counter.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/parse/parser.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/public-api.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/dist/index.js","webpack://_N_E/./node_modules/.pnpm/yaml@2.5.0/node_modules/yaml/browser/index.js","webpack://_N_E/./node_modules/.pnpm/vfile-matter@5.0.0/node_modules/vfile-matter/lib/index.js","webpack://_N_E/./node_modules/.pnpm/next-mdx-remote@5.0.0_@types+react@18.3.4_react@18.3.1/node_modules/next-mdx-remote/dist/format-mdx-error.js","webpack://_N_E/./node_modules/.pnpm/unist-util-is@5.2.1/node_modules/unist-util-is/lib/index.js","webpack://_N_E/./node_modules/.pnpm/unist-util-remove@3.1.1/node_modules/unist-util-remove/lib/index.js","webpack://_N_E/./node_modules/.pnpm/next-mdx-remote@5.0.0_@types+react@18.3.4_react@18.3.1/node_modules/next-mdx-remote/dist/plugins/remove-imports-exports.js","webpack://_N_E/./node_modules/.pnpm/next-mdx-remote@5.0.0_@types+react@18.3.4_react@18.3.1/node_modules/next-mdx-remote/dist/serialize.js","webpack://_N_E/./node_modules/.pnpm/next-mdx-remote@5.0.0_@types+react@18.3.4_react@18.3.1/node_modules/next-mdx-remote/dist/rsc.js","webpack://_N_E/./node_modules/.pnpm/next-mdx-remote@5.0.0_@types+react@18.3.4_react@18.3.1/node_modules/next-mdx-remote/rsc.js","webpack://_N_E/./node_modules/.pnpm/react-icons@5.3.0_react@18.3.1/node_modules/react-icons/lib/iconsManifest.mjs","webpack://_N_E/./node_modules/.pnpm/react-icons@5.3.0_react@18.3.1/node_modules/react-icons/lib/iconContext.mjs","webpack://_N_E/./node_modules/.pnpm/react-icons@5.3.0_react@18.3.1/node_modules/react-icons/lib/iconBase.mjs","webpack://_N_E/./node_modules/.pnpm/react-icons@5.3.0_react@18.3.1/node_modules/react-icons/lib/index.mjs","webpack://_N_E/./node_modules/.pnpm/hast-util-is-element@3.0.0/node_modules/hast-util-is-element/lib/index.js","webpack://_N_E/./node_modules/.pnpm/rehype-autolink-headings@7.1.0/node_modules/rehype-autolink-headings/lib/index.js","webpack://_N_E/./node_modules/.pnpm/github-slugger@2.0.0/node_modules/github-slugger/regex.js","webpack://_N_E/./node_modules/.pnpm/github-slugger@2.0.0/node_modules/github-slugger/index.js","webpack://_N_E/./node_modules/.pnpm/hast-util-to-string@3.0.0/node_modules/hast-util-to-string/lib/index.js","webpack://_N_E/./node_modules/.pnpm/rehype-slug@6.0.0/node_modules/rehype-slug/lib/index.js","webpack://_N_E/./node_modules/.pnpm/escape-string-regexp@5.0.0/node_modules/escape-string-regexp/index.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-find-and-replace@3.0.1/node_modules/mdast-util-find-and-replace/lib/index.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-gfm-autolink-literal@2.0.1/node_modules/mdast-util-gfm-autolink-literal/lib/index.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-gfm-footnote@2.0.0/node_modules/mdast-util-gfm-footnote/lib/index.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-gfm-strikethrough@2.0.0/node_modules/mdast-util-gfm-strikethrough/lib/index.js","webpack://_N_E/./node_modules/.pnpm/markdown-table@3.0.3/node_modules/markdown-table/index.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/blockquote.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/break.js","webpack://_N_E/./node_modules/.pnpm/longest-streak@3.1.0/node_modules/longest-streak/index.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/util/check-fence.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/code.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/util/check-quote.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/definition.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/util/check-emphasis.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/emphasis.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/heading.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/html.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/image.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/image-reference.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/link.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/link-reference.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/util/check-bullet-other.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/util/check-rule.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/list.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/list-item.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/paragraph.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-phrasing@4.1.0/node_modules/mdast-util-phrasing/lib/index.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/root.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/util/check-strong.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/strong.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/text.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/util/check-rule-repetition.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/thematic-break.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/index.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-gfm-table@2.0.0/node_modules/mdast-util-gfm-table/lib/index.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-gfm-task-list-item@2.0.0/node_modules/mdast-util-gfm-task-list-item/lib/index.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-gfm@3.0.0/node_modules/mdast-util-gfm/lib/index.js","webpack://_N_E/./node_modules/.pnpm/micromark-extension-gfm-autolink-literal@2.1.0/node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js","webpack://_N_E/./node_modules/.pnpm/micromark-extension-gfm-footnote@2.1.0/node_modules/micromark-extension-gfm-footnote/lib/syntax.js","webpack://_N_E/./node_modules/.pnpm/micromark-extension-gfm-strikethrough@2.1.0/node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js","webpack://_N_E/./node_modules/.pnpm/micromark-extension-gfm-table@2.1.0/node_modules/micromark-extension-gfm-table/lib/edit-map.js","webpack://_N_E/./node_modules/.pnpm/micromark-extension-gfm-table@2.1.0/node_modules/micromark-extension-gfm-table/lib/infer.js","webpack://_N_E/./node_modules/.pnpm/micromark-extension-gfm-table@2.1.0/node_modules/micromark-extension-gfm-table/lib/syntax.js","webpack://_N_E/./node_modules/.pnpm/micromark-extension-gfm-task-list-item@2.1.0/node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js","webpack://_N_E/./node_modules/.pnpm/micromark-extension-gfm@3.0.0/node_modules/micromark-extension-gfm/index.js","webpack://_N_E/./node_modules/.pnpm/remark-gfm@4.0.0/node_modules/remark-gfm/lib/index.js","webpack://_N_E/./node_modules/.pnpm/unist-util-is@6.0.0/node_modules/unist-util-is/lib/index.js","webpack://_N_E/./node_modules/.pnpm/unist-util-visit-parents@6.0.1/node_modules/unist-util-visit-parents/lib/color.js","webpack://_N_E/./node_modules/.pnpm/unist-util-visit-parents@6.0.1/node_modules/unist-util-visit-parents/lib/index.js","webpack://_N_E/./node_modules/.pnpm/unist-util-visit@5.0.0/node_modules/unist-util-visit/lib/index.js"],"sourcesContent":["'use strict';\n\nconst XHTMLEntities = require('./xhtml');\n\nconst hexNumber = /^[\\da-fA-F]+$/;\nconst decimalNumber = /^\\d+$/;\n\n// The map to `acorn-jsx` tokens from `acorn` namespace objects.\nconst acornJsxMap = new WeakMap();\n\n// Get the original tokens for the given `acorn` namespace object.\nfunction getJsxTokens(acorn) {\n  acorn = acorn.Parser.acorn || acorn;\n  let acornJsx = acornJsxMap.get(acorn);\n  if (!acornJsx) {\n    const tt = acorn.tokTypes;\n    const TokContext = acorn.TokContext;\n    const TokenType = acorn.TokenType;\n    const tc_oTag = new TokContext('<tag', false);\n    const tc_cTag = new TokContext('</tag', false);\n    const tc_expr = new TokContext('<tag>...</tag>', true, true);\n    const tokContexts = {\n      tc_oTag: tc_oTag,\n      tc_cTag: tc_cTag,\n      tc_expr: tc_expr\n    };\n    const tokTypes = {\n      jsxName: new TokenType('jsxName'),\n      jsxText: new TokenType('jsxText', {beforeExpr: true}),\n      jsxTagStart: new TokenType('jsxTagStart', {startsExpr: true}),\n      jsxTagEnd: new TokenType('jsxTagEnd')\n    };\n\n    tokTypes.jsxTagStart.updateContext = function() {\n      this.context.push(tc_expr); // treat as beginning of JSX expression\n      this.context.push(tc_oTag); // start opening tag context\n      this.exprAllowed = false;\n    };\n    tokTypes.jsxTagEnd.updateContext = function(prevType) {\n      let out = this.context.pop();\n      if (out === tc_oTag && prevType === tt.slash || out === tc_cTag) {\n        this.context.pop();\n        this.exprAllowed = this.curContext() === tc_expr;\n      } else {\n        this.exprAllowed = true;\n      }\n    };\n\n    acornJsx = { tokContexts: tokContexts, tokTypes: tokTypes };\n    acornJsxMap.set(acorn, acornJsx);\n  }\n\n  return acornJsx;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(object) {\n  if (!object)\n    return object;\n\n  if (object.type === 'JSXIdentifier')\n    return object.name;\n\n  if (object.type === 'JSXNamespacedName')\n    return object.namespace.name + ':' + object.name.name;\n\n  if (object.type === 'JSXMemberExpression')\n    return getQualifiedJSXName(object.object) + '.' +\n    getQualifiedJSXName(object.property);\n}\n\nmodule.exports = function(options) {\n  options = options || {};\n  return function(Parser) {\n    return plugin({\n      allowNamespaces: options.allowNamespaces !== false,\n      allowNamespacedObjects: !!options.allowNamespacedObjects\n    }, Parser);\n  };\n};\n\n// This is `tokTypes` of the peer dep.\n// This can be different instances from the actual `tokTypes` this plugin uses.\nObject.defineProperty(module.exports, \"tokTypes\", {\n  get: function get_tokTypes() {\n    return getJsxTokens(require(\"acorn\")).tokTypes;\n  },\n  configurable: true,\n  enumerable: true\n});\n\nfunction plugin(options, Parser) {\n  const acorn = Parser.acorn || require(\"acorn\");\n  const acornJsx = getJsxTokens(acorn);\n  const tt = acorn.tokTypes;\n  const tok = acornJsx.tokTypes;\n  const tokContexts = acorn.tokContexts;\n  const tc_oTag = acornJsx.tokContexts.tc_oTag;\n  const tc_cTag = acornJsx.tokContexts.tc_cTag;\n  const tc_expr = acornJsx.tokContexts.tc_expr;\n  const isNewLine = acorn.isNewLine;\n  const isIdentifierStart = acorn.isIdentifierStart;\n  const isIdentifierChar = acorn.isIdentifierChar;\n\n  return class extends Parser {\n    // Expose actual `tokTypes` and `tokContexts` to other plugins.\n    static get acornJsx() {\n      return acornJsx;\n    }\n\n    // Reads inline JSX contents token.\n    jsx_readToken() {\n      let out = '', chunkStart = this.pos;\n      for (;;) {\n        if (this.pos >= this.input.length)\n          this.raise(this.start, 'Unterminated JSX contents');\n        let ch = this.input.charCodeAt(this.pos);\n\n        switch (ch) {\n        case 60: // '<'\n        case 123: // '{'\n          if (this.pos === this.start) {\n            if (ch === 60 && this.exprAllowed) {\n              ++this.pos;\n              return this.finishToken(tok.jsxTagStart);\n            }\n            return this.getTokenFromCode(ch);\n          }\n          out += this.input.slice(chunkStart, this.pos);\n          return this.finishToken(tok.jsxText, out);\n\n        case 38: // '&'\n          out += this.input.slice(chunkStart, this.pos);\n          out += this.jsx_readEntity();\n          chunkStart = this.pos;\n          break;\n\n        case 62: // '>'\n        case 125: // '}'\n          this.raise(\n            this.pos,\n            \"Unexpected token `\" + this.input[this.pos] + \"`. Did you mean `\" +\n              (ch === 62 ? \"&gt;\" : \"&rbrace;\") + \"` or \" + \"`{\\\"\" + this.input[this.pos] + \"\\\"}\" + \"`?\"\n          );\n\n        default:\n          if (isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.pos);\n            out += this.jsx_readNewLine(true);\n            chunkStart = this.pos;\n          } else {\n            ++this.pos;\n          }\n        }\n      }\n    }\n\n    jsx_readNewLine(normalizeCRLF) {\n      let ch = this.input.charCodeAt(this.pos);\n      let out;\n      ++this.pos;\n      if (ch === 13 && this.input.charCodeAt(this.pos) === 10) {\n        ++this.pos;\n        out = normalizeCRLF ? '\\n' : '\\r\\n';\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      if (this.options.locations) {\n        ++this.curLine;\n        this.lineStart = this.pos;\n      }\n\n      return out;\n    }\n\n    jsx_readString(quote) {\n      let out = '', chunkStart = ++this.pos;\n      for (;;) {\n        if (this.pos >= this.input.length)\n          this.raise(this.start, 'Unterminated string constant');\n        let ch = this.input.charCodeAt(this.pos);\n        if (ch === quote) break;\n        if (ch === 38) { // '&'\n          out += this.input.slice(chunkStart, this.pos);\n          out += this.jsx_readEntity();\n          chunkStart = this.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.pos);\n          out += this.jsx_readNewLine(false);\n          chunkStart = this.pos;\n        } else {\n          ++this.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.pos++);\n      return this.finishToken(tt.string, out);\n    }\n\n    jsx_readEntity() {\n      let str = '', count = 0, entity;\n      let ch = this.input[this.pos];\n      if (ch !== '&')\n        this.raise(this.pos, 'Entity must start with an ampersand');\n      let startPos = ++this.pos;\n      while (this.pos < this.input.length && count++ < 10) {\n        ch = this.input[this.pos++];\n        if (ch === ';') {\n          if (str[0] === '#') {\n            if (str[1] === 'x') {\n              str = str.substr(2);\n              if (hexNumber.test(str))\n                entity = String.fromCharCode(parseInt(str, 16));\n            } else {\n              str = str.substr(1);\n              if (decimalNumber.test(str))\n                entity = String.fromCharCode(parseInt(str, 10));\n            }\n          } else {\n            entity = XHTMLEntities[str];\n          }\n          break;\n        }\n        str += ch;\n      }\n      if (!entity) {\n        this.pos = startPos;\n        return '&';\n      }\n      return entity;\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can't contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsx_readWord() {\n      let ch, start = this.pos;\n      do {\n        ch = this.input.charCodeAt(++this.pos);\n      } while (isIdentifierChar(ch) || ch === 45); // '-'\n      return this.finishToken(tok.jsxName, this.input.slice(start, this.pos));\n    }\n\n    // Parse next token as JSX identifier\n\n    jsx_parseIdentifier() {\n      let node = this.startNode();\n      if (this.type === tok.jsxName)\n        node.name = this.value;\n      else if (this.type.keyword)\n        node.name = this.type.keyword;\n      else\n        this.unexpected();\n      this.next();\n      return this.finishNode(node, 'JSXIdentifier');\n    }\n\n    // Parse namespaced identifier.\n\n    jsx_parseNamespacedName() {\n      let startPos = this.start, startLoc = this.startLoc;\n      let name = this.jsx_parseIdentifier();\n      if (!options.allowNamespaces || !this.eat(tt.colon)) return name;\n      var node = this.startNodeAt(startPos, startLoc);\n      node.namespace = name;\n      node.name = this.jsx_parseIdentifier();\n      return this.finishNode(node, 'JSXNamespacedName');\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsx_parseElementName() {\n      if (this.type === tok.jsxTagEnd) return '';\n      let startPos = this.start, startLoc = this.startLoc;\n      let node = this.jsx_parseNamespacedName();\n      if (this.type === tt.dot && node.type === 'JSXNamespacedName' && !options.allowNamespacedObjects) {\n        this.unexpected();\n      }\n      while (this.eat(tt.dot)) {\n        let newNode = this.startNodeAt(startPos, startLoc);\n        newNode.object = node;\n        newNode.property = this.jsx_parseIdentifier();\n        node = this.finishNode(newNode, 'JSXMemberExpression');\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsx_parseAttributeValue() {\n      switch (this.type) {\n      case tt.braceL:\n        let node = this.jsx_parseExpressionContainer();\n        if (node.expression.type === 'JSXEmptyExpression')\n          this.raise(node.start, 'JSX attributes must only be assigned a non-empty expression');\n        return node;\n\n      case tok.jsxTagStart:\n      case tt.string:\n        return this.parseExprAtom();\n\n      default:\n        this.raise(this.start, 'JSX value should be either an expression or a quoted JSX text');\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsx_parseEmptyExpression() {\n      let node = this.startNodeAt(this.lastTokEnd, this.lastTokEndLoc);\n      return this.finishNodeAt(node, 'JSXEmptyExpression', this.start, this.startLoc);\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsx_parseExpressionContainer() {\n      let node = this.startNode();\n      this.next();\n      node.expression = this.type === tt.braceR\n        ? this.jsx_parseEmptyExpression()\n        : this.parseExpression();\n      this.expect(tt.braceR);\n      return this.finishNode(node, 'JSXExpressionContainer');\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsx_parseAttribute() {\n      let node = this.startNode();\n      if (this.eat(tt.braceL)) {\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssign();\n        this.expect(tt.braceR);\n        return this.finishNode(node, 'JSXSpreadAttribute');\n      }\n      node.name = this.jsx_parseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsx_parseAttributeValue() : null;\n      return this.finishNode(node, 'JSXAttribute');\n    }\n\n    // Parses JSX opening tag starting after '<'.\n\n    jsx_parseOpeningElementAt(startPos, startLoc) {\n      let node = this.startNodeAt(startPos, startLoc);\n      node.attributes = [];\n      let nodeName = this.jsx_parseElementName();\n      if (nodeName) node.name = nodeName;\n      while (this.type !== tt.slash && this.type !== tok.jsxTagEnd)\n        node.attributes.push(this.jsx_parseAttribute());\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tok.jsxTagEnd);\n      return this.finishNode(node, nodeName ? 'JSXOpeningElement' : 'JSXOpeningFragment');\n    }\n\n    // Parses JSX closing tag starting after '</'.\n\n    jsx_parseClosingElementAt(startPos, startLoc) {\n      let node = this.startNodeAt(startPos, startLoc);\n      let nodeName = this.jsx_parseElementName();\n      if (nodeName) node.name = nodeName;\n      this.expect(tok.jsxTagEnd);\n      return this.finishNode(node, nodeName ? 'JSXClosingElement' : 'JSXClosingFragment');\n    }\n\n    // Parses entire JSX element, including it's opening tag\n    // (starting after '<'), attributes, contents and closing tag.\n\n    jsx_parseElementAt(startPos, startLoc) {\n      let node = this.startNodeAt(startPos, startLoc);\n      let children = [];\n      let openingElement = this.jsx_parseOpeningElementAt(startPos, startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.type) {\n          case tok.jsxTagStart:\n            startPos = this.start; startLoc = this.startLoc;\n            this.next();\n            if (this.eat(tt.slash)) {\n              closingElement = this.jsx_parseClosingElementAt(startPos, startLoc);\n              break contents;\n            }\n            children.push(this.jsx_parseElementAt(startPos, startLoc));\n            break;\n\n          case tok.jsxText:\n            children.push(this.parseExprAtom());\n            break;\n\n          case tt.braceL:\n            children.push(this.jsx_parseExpressionContainer());\n            break;\n\n          default:\n            this.unexpected();\n          }\n        }\n        if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n          this.raise(\n            closingElement.start,\n            'Expected corresponding JSX closing tag for <' + getQualifiedJSXName(openingElement.name) + '>');\n        }\n      }\n      let fragmentOrElement = openingElement.name ? 'Element' : 'Fragment';\n\n      node['opening' + fragmentOrElement] = openingElement;\n      node['closing' + fragmentOrElement] = closingElement;\n      node.children = children;\n      if (this.type === tt.relational && this.value === \"<\") {\n        this.raise(this.start, \"Adjacent JSX elements must be wrapped in an enclosing tag\");\n      }\n      return this.finishNode(node, 'JSX' + fragmentOrElement);\n    }\n\n    // Parse JSX text\n\n    jsx_parseText() {\n      let node = this.parseLiteral(this.value);\n      node.type = \"JSXText\";\n      return node;\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsx_parseElement() {\n      let startPos = this.start, startLoc = this.startLoc;\n      this.next();\n      return this.jsx_parseElementAt(startPos, startLoc);\n    }\n\n    parseExprAtom(refShortHandDefaultPos) {\n      if (this.type === tok.jsxText)\n        return this.jsx_parseText();\n      else if (this.type === tok.jsxTagStart)\n        return this.jsx_parseElement();\n      else\n        return super.parseExprAtom(refShortHandDefaultPos);\n    }\n\n    readToken(code) {\n      let context = this.curContext();\n\n      if (context === tc_expr) return this.jsx_readToken();\n\n      if (context === tc_oTag || context === tc_cTag) {\n        if (isIdentifierStart(code)) return this.jsx_readWord();\n\n        if (code == 62) {\n          ++this.pos;\n          return this.finishToken(tok.jsxTagEnd);\n        }\n\n        if ((code === 34 || code === 39) && context == tc_oTag)\n          return this.jsx_readString(code);\n      }\n\n      if (code === 60 && this.exprAllowed && this.input.charCodeAt(this.pos + 1) !== 33) {\n        ++this.pos;\n        return this.finishToken(tok.jsxTagStart);\n      }\n      return super.readToken(code);\n    }\n\n    updateContext(prevType) {\n      if (this.type == tt.braceL) {\n        var curContext = this.curContext();\n        if (curContext == tc_oTag) this.context.push(tokContexts.b_expr);\n        else if (curContext == tc_expr) this.context.push(tokContexts.b_tmpl);\n        else super.updateContext(prevType);\n        this.exprAllowed = true;\n      } else if (this.type === tt.slash && prevType === tok.jsxTagStart) {\n        this.context.length -= 2; // do not consider JSX expr -> JSX open tag -> ... anymore\n        this.context.push(tc_cTag); // reconsider as closing tag context\n        this.exprAllowed = false;\n      } else {\n        return super.updateContext(prevType);\n      }\n    }\n  };\n}\n","module.exports = {\n  quot: '\\u0022',\n  amp: '&',\n  apos: '\\u0027',\n  lt: '<',\n  gt: '>',\n  nbsp: '\\u00A0',\n  iexcl: '\\u00A1',\n  cent: '\\u00A2',\n  pound: '\\u00A3',\n  curren: '\\u00A4',\n  yen: '\\u00A5',\n  brvbar: '\\u00A6',\n  sect: '\\u00A7',\n  uml: '\\u00A8',\n  copy: '\\u00A9',\n  ordf: '\\u00AA',\n  laquo: '\\u00AB',\n  not: '\\u00AC',\n  shy: '\\u00AD',\n  reg: '\\u00AE',\n  macr: '\\u00AF',\n  deg: '\\u00B0',\n  plusmn: '\\u00B1',\n  sup2: '\\u00B2',\n  sup3: '\\u00B3',\n  acute: '\\u00B4',\n  micro: '\\u00B5',\n  para: '\\u00B6',\n  middot: '\\u00B7',\n  cedil: '\\u00B8',\n  sup1: '\\u00B9',\n  ordm: '\\u00BA',\n  raquo: '\\u00BB',\n  frac14: '\\u00BC',\n  frac12: '\\u00BD',\n  frac34: '\\u00BE',\n  iquest: '\\u00BF',\n  Agrave: '\\u00C0',\n  Aacute: '\\u00C1',\n  Acirc: '\\u00C2',\n  Atilde: '\\u00C3',\n  Auml: '\\u00C4',\n  Aring: '\\u00C5',\n  AElig: '\\u00C6',\n  Ccedil: '\\u00C7',\n  Egrave: '\\u00C8',\n  Eacute: '\\u00C9',\n  Ecirc: '\\u00CA',\n  Euml: '\\u00CB',\n  Igrave: '\\u00CC',\n  Iacute: '\\u00CD',\n  Icirc: '\\u00CE',\n  Iuml: '\\u00CF',\n  ETH: '\\u00D0',\n  Ntilde: '\\u00D1',\n  Ograve: '\\u00D2',\n  Oacute: '\\u00D3',\n  Ocirc: '\\u00D4',\n  Otilde: '\\u00D5',\n  Ouml: '\\u00D6',\n  times: '\\u00D7',\n  Oslash: '\\u00D8',\n  Ugrave: '\\u00D9',\n  Uacute: '\\u00DA',\n  Ucirc: '\\u00DB',\n  Uuml: '\\u00DC',\n  Yacute: '\\u00DD',\n  THORN: '\\u00DE',\n  szlig: '\\u00DF',\n  agrave: '\\u00E0',\n  aacute: '\\u00E1',\n  acirc: '\\u00E2',\n  atilde: '\\u00E3',\n  auml: '\\u00E4',\n  aring: '\\u00E5',\n  aelig: '\\u00E6',\n  ccedil: '\\u00E7',\n  egrave: '\\u00E8',\n  eacute: '\\u00E9',\n  ecirc: '\\u00EA',\n  euml: '\\u00EB',\n  igrave: '\\u00EC',\n  iacute: '\\u00ED',\n  icirc: '\\u00EE',\n  iuml: '\\u00EF',\n  eth: '\\u00F0',\n  ntilde: '\\u00F1',\n  ograve: '\\u00F2',\n  oacute: '\\u00F3',\n  ocirc: '\\u00F4',\n  otilde: '\\u00F5',\n  ouml: '\\u00F6',\n  divide: '\\u00F7',\n  oslash: '\\u00F8',\n  ugrave: '\\u00F9',\n  uacute: '\\u00FA',\n  ucirc: '\\u00FB',\n  uuml: '\\u00FC',\n  yacute: '\\u00FD',\n  thorn: '\\u00FE',\n  yuml: '\\u00FF',\n  OElig: '\\u0152',\n  oelig: '\\u0153',\n  Scaron: '\\u0160',\n  scaron: '\\u0161',\n  Yuml: '\\u0178',\n  fnof: '\\u0192',\n  circ: '\\u02C6',\n  tilde: '\\u02DC',\n  Alpha: '\\u0391',\n  Beta: '\\u0392',\n  Gamma: '\\u0393',\n  Delta: '\\u0394',\n  Epsilon: '\\u0395',\n  Zeta: '\\u0396',\n  Eta: '\\u0397',\n  Theta: '\\u0398',\n  Iota: '\\u0399',\n  Kappa: '\\u039A',\n  Lambda: '\\u039B',\n  Mu: '\\u039C',\n  Nu: '\\u039D',\n  Xi: '\\u039E',\n  Omicron: '\\u039F',\n  Pi: '\\u03A0',\n  Rho: '\\u03A1',\n  Sigma: '\\u03A3',\n  Tau: '\\u03A4',\n  Upsilon: '\\u03A5',\n  Phi: '\\u03A6',\n  Chi: '\\u03A7',\n  Psi: '\\u03A8',\n  Omega: '\\u03A9',\n  alpha: '\\u03B1',\n  beta: '\\u03B2',\n  gamma: '\\u03B3',\n  delta: '\\u03B4',\n  epsilon: '\\u03B5',\n  zeta: '\\u03B6',\n  eta: '\\u03B7',\n  theta: '\\u03B8',\n  iota: '\\u03B9',\n  kappa: '\\u03BA',\n  lambda: '\\u03BB',\n  mu: '\\u03BC',\n  nu: '\\u03BD',\n  xi: '\\u03BE',\n  omicron: '\\u03BF',\n  pi: '\\u03C0',\n  rho: '\\u03C1',\n  sigmaf: '\\u03C2',\n  sigma: '\\u03C3',\n  tau: '\\u03C4',\n  upsilon: '\\u03C5',\n  phi: '\\u03C6',\n  chi: '\\u03C7',\n  psi: '\\u03C8',\n  omega: '\\u03C9',\n  thetasym: '\\u03D1',\n  upsih: '\\u03D2',\n  piv: '\\u03D6',\n  ensp: '\\u2002',\n  emsp: '\\u2003',\n  thinsp: '\\u2009',\n  zwnj: '\\u200C',\n  zwj: '\\u200D',\n  lrm: '\\u200E',\n  rlm: '\\u200F',\n  ndash: '\\u2013',\n  mdash: '\\u2014',\n  lsquo: '\\u2018',\n  rsquo: '\\u2019',\n  sbquo: '\\u201A',\n  ldquo: '\\u201C',\n  rdquo: '\\u201D',\n  bdquo: '\\u201E',\n  dagger: '\\u2020',\n  Dagger: '\\u2021',\n  bull: '\\u2022',\n  hellip: '\\u2026',\n  permil: '\\u2030',\n  prime: '\\u2032',\n  Prime: '\\u2033',\n  lsaquo: '\\u2039',\n  rsaquo: '\\u203A',\n  oline: '\\u203E',\n  frasl: '\\u2044',\n  euro: '\\u20AC',\n  image: '\\u2111',\n  weierp: '\\u2118',\n  real: '\\u211C',\n  trade: '\\u2122',\n  alefsym: '\\u2135',\n  larr: '\\u2190',\n  uarr: '\\u2191',\n  rarr: '\\u2192',\n  darr: '\\u2193',\n  harr: '\\u2194',\n  crarr: '\\u21B5',\n  lArr: '\\u21D0',\n  uArr: '\\u21D1',\n  rArr: '\\u21D2',\n  dArr: '\\u21D3',\n  hArr: '\\u21D4',\n  forall: '\\u2200',\n  part: '\\u2202',\n  exist: '\\u2203',\n  empty: '\\u2205',\n  nabla: '\\u2207',\n  isin: '\\u2208',\n  notin: '\\u2209',\n  ni: '\\u220B',\n  prod: '\\u220F',\n  sum: '\\u2211',\n  minus: '\\u2212',\n  lowast: '\\u2217',\n  radic: '\\u221A',\n  prop: '\\u221D',\n  infin: '\\u221E',\n  ang: '\\u2220',\n  and: '\\u2227',\n  or: '\\u2228',\n  cap: '\\u2229',\n  cup: '\\u222A',\n  'int': '\\u222B',\n  there4: '\\u2234',\n  sim: '\\u223C',\n  cong: '\\u2245',\n  asymp: '\\u2248',\n  ne: '\\u2260',\n  equiv: '\\u2261',\n  le: '\\u2264',\n  ge: '\\u2265',\n  sub: '\\u2282',\n  sup: '\\u2283',\n  nsub: '\\u2284',\n  sube: '\\u2286',\n  supe: '\\u2287',\n  oplus: '\\u2295',\n  otimes: '\\u2297',\n  perp: '\\u22A5',\n  sdot: '\\u22C5',\n  lceil: '\\u2308',\n  rceil: '\\u2309',\n  lfloor: '\\u230A',\n  rfloor: '\\u230B',\n  lang: '\\u2329',\n  rang: '\\u232A',\n  loz: '\\u25CA',\n  spades: '\\u2660',\n  clubs: '\\u2663',\n  hearts: '\\u2665',\n  diams: '\\u2666'\n};\n","'use strict';\nconst colorConvert = require('color-convert');\n\nconst wrapAnsi16 = (fn, offset) => function () {\n\tconst code = fn.apply(colorConvert, arguments);\n\treturn `\\u001B[${code + offset}m`;\n};\n\nconst wrapAnsi256 = (fn, offset) => function () {\n\tconst code = fn.apply(colorConvert, arguments);\n\treturn `\\u001B[${38 + offset};5;${code}m`;\n};\n\nconst wrapAnsi16m = (fn, offset) => function () {\n\tconst rgb = fn.apply(colorConvert, arguments);\n\treturn `\\u001B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;\n};\n\nfunction assembleStyles() {\n\tconst codes = new Map();\n\tconst styles = {\n\t\tmodifier: {\n\t\t\treset: [0, 0],\n\t\t\t// 21 isn't widely supported and 22 does the same thing\n\t\t\tbold: [1, 22],\n\t\t\tdim: [2, 22],\n\t\t\titalic: [3, 23],\n\t\t\tunderline: [4, 24],\n\t\t\tinverse: [7, 27],\n\t\t\thidden: [8, 28],\n\t\t\tstrikethrough: [9, 29]\n\t\t},\n\t\tcolor: {\n\t\t\tblack: [30, 39],\n\t\t\tred: [31, 39],\n\t\t\tgreen: [32, 39],\n\t\t\tyellow: [33, 39],\n\t\t\tblue: [34, 39],\n\t\t\tmagenta: [35, 39],\n\t\t\tcyan: [36, 39],\n\t\t\twhite: [37, 39],\n\t\t\tgray: [90, 39],\n\n\t\t\t// Bright color\n\t\t\tredBright: [91, 39],\n\t\t\tgreenBright: [92, 39],\n\t\t\tyellowBright: [93, 39],\n\t\t\tblueBright: [94, 39],\n\t\t\tmagentaBright: [95, 39],\n\t\t\tcyanBright: [96, 39],\n\t\t\twhiteBright: [97, 39]\n\t\t},\n\t\tbgColor: {\n\t\t\tbgBlack: [40, 49],\n\t\t\tbgRed: [41, 49],\n\t\t\tbgGreen: [42, 49],\n\t\t\tbgYellow: [43, 49],\n\t\t\tbgBlue: [44, 49],\n\t\t\tbgMagenta: [45, 49],\n\t\t\tbgCyan: [46, 49],\n\t\t\tbgWhite: [47, 49],\n\n\t\t\t// Bright color\n\t\t\tbgBlackBright: [100, 49],\n\t\t\tbgRedBright: [101, 49],\n\t\t\tbgGreenBright: [102, 49],\n\t\t\tbgYellowBright: [103, 49],\n\t\t\tbgBlueBright: [104, 49],\n\t\t\tbgMagentaBright: [105, 49],\n\t\t\tbgCyanBright: [106, 49],\n\t\t\tbgWhiteBright: [107, 49]\n\t\t}\n\t};\n\n\t// Fix humans\n\tstyles.color.grey = styles.color.gray;\n\n\tfor (const groupName of Object.keys(styles)) {\n\t\tconst group = styles[groupName];\n\n\t\tfor (const styleName of Object.keys(group)) {\n\t\t\tconst style = group[styleName];\n\n\t\t\tstyles[styleName] = {\n\t\t\t\topen: `\\u001B[${style[0]}m`,\n\t\t\t\tclose: `\\u001B[${style[1]}m`\n\t\t\t};\n\n\t\t\tgroup[styleName] = styles[styleName];\n\n\t\t\tcodes.set(style[0], style[1]);\n\t\t}\n\n\t\tObject.defineProperty(styles, groupName, {\n\t\t\tvalue: group,\n\t\t\tenumerable: false\n\t\t});\n\n\t\tObject.defineProperty(styles, 'codes', {\n\t\t\tvalue: codes,\n\t\t\tenumerable: false\n\t\t});\n\t}\n\n\tconst ansi2ansi = n => n;\n\tconst rgb2rgb = (r, g, b) => [r, g, b];\n\n\tstyles.color.close = '\\u001B[39m';\n\tstyles.bgColor.close = '\\u001B[49m';\n\n\tstyles.color.ansi = {\n\t\tansi: wrapAnsi16(ansi2ansi, 0)\n\t};\n\tstyles.color.ansi256 = {\n\t\tansi256: wrapAnsi256(ansi2ansi, 0)\n\t};\n\tstyles.color.ansi16m = {\n\t\trgb: wrapAnsi16m(rgb2rgb, 0)\n\t};\n\n\tstyles.bgColor.ansi = {\n\t\tansi: wrapAnsi16(ansi2ansi, 10)\n\t};\n\tstyles.bgColor.ansi256 = {\n\t\tansi256: wrapAnsi256(ansi2ansi, 10)\n\t};\n\tstyles.bgColor.ansi16m = {\n\t\trgb: wrapAnsi16m(rgb2rgb, 10)\n\t};\n\n\tfor (let key of Object.keys(colorConvert)) {\n\t\tif (typeof colorConvert[key] !== 'object') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst suite = colorConvert[key];\n\n\t\tif (key === 'ansi16') {\n\t\t\tkey = 'ansi';\n\t\t}\n\n\t\tif ('ansi16' in suite) {\n\t\t\tstyles.color.ansi[key] = wrapAnsi16(suite.ansi16, 0);\n\t\t\tstyles.bgColor.ansi[key] = wrapAnsi16(suite.ansi16, 10);\n\t\t}\n\n\t\tif ('ansi256' in suite) {\n\t\t\tstyles.color.ansi256[key] = wrapAnsi256(suite.ansi256, 0);\n\t\t\tstyles.bgColor.ansi256[key] = wrapAnsi256(suite.ansi256, 10);\n\t\t}\n\n\t\tif ('rgb' in suite) {\n\t\t\tstyles.color.ansi16m[key] = wrapAnsi16m(suite.rgb, 0);\n\t\t\tstyles.bgColor.ansi16m[key] = wrapAnsi16m(suite.rgb, 10);\n\t\t}\n\t}\n\n\treturn styles;\n}\n\n// Make the export immutable\nObject.defineProperty(module, 'exports', {\n\tenumerable: true,\n\tget: assembleStyles\n});\n","'use strict';\nconst escapeStringRegexp = require('escape-string-regexp');\nconst ansiStyles = require('ansi-styles');\nconst stdoutColor = require('supports-color').stdout;\n\nconst template = require('./templates.js');\n\nconst isSimpleWindowsTerm = process.platform === 'win32' && !(process.env.TERM || '').toLowerCase().startsWith('xterm');\n\n// `supportsColor.level` → `ansiStyles.color[name]` mapping\nconst levelMapping = ['ansi', 'ansi', 'ansi256', 'ansi16m'];\n\n// `color-convert` models to exclude from the Chalk API due to conflicts and such\nconst skipModels = new Set(['gray']);\n\nconst styles = Object.create(null);\n\nfunction applyOptions(obj, options) {\n\toptions = options || {};\n\n\t// Detect level if not set manually\n\tconst scLevel = stdoutColor ? stdoutColor.level : 0;\n\tobj.level = options.level === undefined ? scLevel : options.level;\n\tobj.enabled = 'enabled' in options ? options.enabled : obj.level > 0;\n}\n\nfunction Chalk(options) {\n\t// We check for this.template here since calling `chalk.constructor()`\n\t// by itself will have a `this` of a previously constructed chalk object\n\tif (!this || !(this instanceof Chalk) || this.template) {\n\t\tconst chalk = {};\n\t\tapplyOptions(chalk, options);\n\n\t\tchalk.template = function () {\n\t\t\tconst args = [].slice.call(arguments);\n\t\t\treturn chalkTag.apply(null, [chalk.template].concat(args));\n\t\t};\n\n\t\tObject.setPrototypeOf(chalk, Chalk.prototype);\n\t\tObject.setPrototypeOf(chalk.template, chalk);\n\n\t\tchalk.template.constructor = Chalk;\n\n\t\treturn chalk.template;\n\t}\n\n\tapplyOptions(this, options);\n}\n\n// Use bright blue on Windows as the normal blue color is illegible\nif (isSimpleWindowsTerm) {\n\tansiStyles.blue.open = '\\u001B[94m';\n}\n\nfor (const key of Object.keys(ansiStyles)) {\n\tansiStyles[key].closeRe = new RegExp(escapeStringRegexp(ansiStyles[key].close), 'g');\n\n\tstyles[key] = {\n\t\tget() {\n\t\t\tconst codes = ansiStyles[key];\n\t\t\treturn build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, key);\n\t\t}\n\t};\n}\n\nstyles.visible = {\n\tget() {\n\t\treturn build.call(this, this._styles || [], true, 'visible');\n\t}\n};\n\nansiStyles.color.closeRe = new RegExp(escapeStringRegexp(ansiStyles.color.close), 'g');\nfor (const model of Object.keys(ansiStyles.color.ansi)) {\n\tif (skipModels.has(model)) {\n\t\tcontinue;\n\t}\n\n\tstyles[model] = {\n\t\tget() {\n\t\t\tconst level = this.level;\n\t\t\treturn function () {\n\t\t\t\tconst open = ansiStyles.color[levelMapping[level]][model].apply(null, arguments);\n\t\t\t\tconst codes = {\n\t\t\t\t\topen,\n\t\t\t\t\tclose: ansiStyles.color.close,\n\t\t\t\t\tcloseRe: ansiStyles.color.closeRe\n\t\t\t\t};\n\t\t\t\treturn build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, model);\n\t\t\t};\n\t\t}\n\t};\n}\n\nansiStyles.bgColor.closeRe = new RegExp(escapeStringRegexp(ansiStyles.bgColor.close), 'g');\nfor (const model of Object.keys(ansiStyles.bgColor.ansi)) {\n\tif (skipModels.has(model)) {\n\t\tcontinue;\n\t}\n\n\tconst bgModel = 'bg' + model[0].toUpperCase() + model.slice(1);\n\tstyles[bgModel] = {\n\t\tget() {\n\t\t\tconst level = this.level;\n\t\t\treturn function () {\n\t\t\t\tconst open = ansiStyles.bgColor[levelMapping[level]][model].apply(null, arguments);\n\t\t\t\tconst codes = {\n\t\t\t\t\topen,\n\t\t\t\t\tclose: ansiStyles.bgColor.close,\n\t\t\t\t\tcloseRe: ansiStyles.bgColor.closeRe\n\t\t\t\t};\n\t\t\t\treturn build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, model);\n\t\t\t};\n\t\t}\n\t};\n}\n\nconst proto = Object.defineProperties(() => {}, styles);\n\nfunction build(_styles, _empty, key) {\n\tconst builder = function () {\n\t\treturn applyStyle.apply(builder, arguments);\n\t};\n\n\tbuilder._styles = _styles;\n\tbuilder._empty = _empty;\n\n\tconst self = this;\n\n\tObject.defineProperty(builder, 'level', {\n\t\tenumerable: true,\n\t\tget() {\n\t\t\treturn self.level;\n\t\t},\n\t\tset(level) {\n\t\t\tself.level = level;\n\t\t}\n\t});\n\n\tObject.defineProperty(builder, 'enabled', {\n\t\tenumerable: true,\n\t\tget() {\n\t\t\treturn self.enabled;\n\t\t},\n\t\tset(enabled) {\n\t\t\tself.enabled = enabled;\n\t\t}\n\t});\n\n\t// See below for fix regarding invisible grey/dim combination on Windows\n\tbuilder.hasGrey = this.hasGrey || key === 'gray' || key === 'grey';\n\n\t// `__proto__` is used because we must return a function, but there is\n\t// no way to create a function with a different prototype\n\tbuilder.__proto__ = proto; // eslint-disable-line no-proto\n\n\treturn builder;\n}\n\nfunction applyStyle() {\n\t// Support varags, but simply cast to string in case there's only one arg\n\tconst args = arguments;\n\tconst argsLen = args.length;\n\tlet str = String(arguments[0]);\n\n\tif (argsLen === 0) {\n\t\treturn '';\n\t}\n\n\tif (argsLen > 1) {\n\t\t// Don't slice `arguments`, it prevents V8 optimizations\n\t\tfor (let a = 1; a < argsLen; a++) {\n\t\t\tstr += ' ' + args[a];\n\t\t}\n\t}\n\n\tif (!this.enabled || this.level <= 0 || !str) {\n\t\treturn this._empty ? '' : str;\n\t}\n\n\t// Turns out that on Windows dimmed gray text becomes invisible in cmd.exe,\n\t// see https://github.com/chalk/chalk/issues/58\n\t// If we're on Windows and we're dealing with a gray color, temporarily make 'dim' a noop.\n\tconst originalDim = ansiStyles.dim.open;\n\tif (isSimpleWindowsTerm && this.hasGrey) {\n\t\tansiStyles.dim.open = '';\n\t}\n\n\tfor (const code of this._styles.slice().reverse()) {\n\t\t// Replace any instances already present with a re-opening code\n\t\t// otherwise only the part of the string until said closing code\n\t\t// will be colored, and the rest will simply be 'plain'.\n\t\tstr = code.open + str.replace(code.closeRe, code.open) + code.close;\n\n\t\t// Close the styling before a linebreak and reopen\n\t\t// after next line to fix a bleed issue on macOS\n\t\t// https://github.com/chalk/chalk/pull/92\n\t\tstr = str.replace(/\\r?\\n/g, `${code.close}$&${code.open}`);\n\t}\n\n\t// Reset the original `dim` if we changed it to work around the Windows dimmed gray issue\n\tansiStyles.dim.open = originalDim;\n\n\treturn str;\n}\n\nfunction chalkTag(chalk, strings) {\n\tif (!Array.isArray(strings)) {\n\t\t// If chalk() was called by itself or with a string,\n\t\t// return the string itself as a string.\n\t\treturn [].slice.call(arguments, 1).join(' ');\n\t}\n\n\tconst args = [].slice.call(arguments, 2);\n\tconst parts = [strings.raw[0]];\n\n\tfor (let i = 1; i < strings.length; i++) {\n\t\tparts.push(String(args[i - 1]).replace(/[{}\\\\]/g, '\\\\$&'));\n\t\tparts.push(String(strings.raw[i]));\n\t}\n\n\treturn template(chalk, parts.join(''));\n}\n\nObject.defineProperties(Chalk.prototype, styles);\n\nmodule.exports = Chalk(); // eslint-disable-line new-cap\nmodule.exports.supportsColor = stdoutColor;\nmodule.exports.default = module.exports; // For TypeScript\n","'use strict';\nconst TEMPLATE_REGEX = /(?:\\\\(u[a-f\\d]{4}|x[a-f\\d]{2}|.))|(?:\\{(~)?(\\w+(?:\\([^)]*\\))?(?:\\.\\w+(?:\\([^)]*\\))?)*)(?:[ \\t]|(?=\\r?\\n)))|(\\})|((?:.|[\\r\\n\\f])+?)/gi;\nconst STYLE_REGEX = /(?:^|\\.)(\\w+)(?:\\(([^)]*)\\))?/g;\nconst STRING_REGEX = /^(['\"])((?:\\\\.|(?!\\1)[^\\\\])*)\\1$/;\nconst ESCAPE_REGEX = /\\\\(u[a-f\\d]{4}|x[a-f\\d]{2}|.)|([^\\\\])/gi;\n\nconst ESCAPES = new Map([\n\t['n', '\\n'],\n\t['r', '\\r'],\n\t['t', '\\t'],\n\t['b', '\\b'],\n\t['f', '\\f'],\n\t['v', '\\v'],\n\t['0', '\\0'],\n\t['\\\\', '\\\\'],\n\t['e', '\\u001B'],\n\t['a', '\\u0007']\n]);\n\nfunction unescape(c) {\n\tif ((c[0] === 'u' && c.length === 5) || (c[0] === 'x' && c.length === 3)) {\n\t\treturn String.fromCharCode(parseInt(c.slice(1), 16));\n\t}\n\n\treturn ESCAPES.get(c) || c;\n}\n\nfunction parseArguments(name, args) {\n\tconst results = [];\n\tconst chunks = args.trim().split(/\\s*,\\s*/g);\n\tlet matches;\n\n\tfor (const chunk of chunks) {\n\t\tif (!isNaN(chunk)) {\n\t\t\tresults.push(Number(chunk));\n\t\t} else if ((matches = chunk.match(STRING_REGEX))) {\n\t\t\tresults.push(matches[2].replace(ESCAPE_REGEX, (m, escape, chr) => escape ? unescape(escape) : chr));\n\t\t} else {\n\t\t\tthrow new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);\n\t\t}\n\t}\n\n\treturn results;\n}\n\nfunction parseStyle(style) {\n\tSTYLE_REGEX.lastIndex = 0;\n\n\tconst results = [];\n\tlet matches;\n\n\twhile ((matches = STYLE_REGEX.exec(style)) !== null) {\n\t\tconst name = matches[1];\n\n\t\tif (matches[2]) {\n\t\t\tconst args = parseArguments(name, matches[2]);\n\t\t\tresults.push([name].concat(args));\n\t\t} else {\n\t\t\tresults.push([name]);\n\t\t}\n\t}\n\n\treturn results;\n}\n\nfunction buildStyle(chalk, styles) {\n\tconst enabled = {};\n\n\tfor (const layer of styles) {\n\t\tfor (const style of layer.styles) {\n\t\t\tenabled[style[0]] = layer.inverse ? null : style.slice(1);\n\t\t}\n\t}\n\n\tlet current = chalk;\n\tfor (const styleName of Object.keys(enabled)) {\n\t\tif (Array.isArray(enabled[styleName])) {\n\t\t\tif (!(styleName in current)) {\n\t\t\t\tthrow new Error(`Unknown Chalk style: ${styleName}`);\n\t\t\t}\n\n\t\t\tif (enabled[styleName].length > 0) {\n\t\t\t\tcurrent = current[styleName].apply(current, enabled[styleName]);\n\t\t\t} else {\n\t\t\t\tcurrent = current[styleName];\n\t\t\t}\n\t\t}\n\t}\n\n\treturn current;\n}\n\nmodule.exports = (chalk, tmp) => {\n\tconst styles = [];\n\tconst chunks = [];\n\tlet chunk = [];\n\n\t// eslint-disable-next-line max-params\n\ttmp.replace(TEMPLATE_REGEX, (m, escapeChar, inverse, style, close, chr) => {\n\t\tif (escapeChar) {\n\t\t\tchunk.push(unescape(escapeChar));\n\t\t} else if (style) {\n\t\t\tconst str = chunk.join('');\n\t\t\tchunk = [];\n\t\t\tchunks.push(styles.length === 0 ? str : buildStyle(chalk, styles)(str));\n\t\t\tstyles.push({inverse, styles: parseStyle(style)});\n\t\t} else if (close) {\n\t\t\tif (styles.length === 0) {\n\t\t\t\tthrow new Error('Found extraneous } in Chalk template literal');\n\t\t\t}\n\n\t\t\tchunks.push(buildStyle(chalk, styles)(chunk.join('')));\n\t\t\tchunk = [];\n\t\t\tstyles.pop();\n\t\t} else {\n\t\t\tchunk.push(chr);\n\t\t}\n\t});\n\n\tchunks.push(chunk.join(''));\n\n\tif (styles.length > 0) {\n\t\tconst errMsg = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? '' : 's'} (\\`}\\`)`;\n\t\tthrow new Error(errMsg);\n\t}\n\n\treturn chunks.join('');\n};\n","/* MIT license */\nvar cssKeywords = require('color-name');\n\n// NOTE: conversions should only return primitive values (i.e. arrays, or\n//       values that give correct `typeof` results).\n//       do not use box values types (i.e. Number(), String(), etc.)\n\nvar reverseKeywords = {};\nfor (var key in cssKeywords) {\n\tif (cssKeywords.hasOwnProperty(key)) {\n\t\treverseKeywords[cssKeywords[key]] = key;\n\t}\n}\n\nvar convert = module.exports = {\n\trgb: {channels: 3, labels: 'rgb'},\n\thsl: {channels: 3, labels: 'hsl'},\n\thsv: {channels: 3, labels: 'hsv'},\n\thwb: {channels: 3, labels: 'hwb'},\n\tcmyk: {channels: 4, labels: 'cmyk'},\n\txyz: {channels: 3, labels: 'xyz'},\n\tlab: {channels: 3, labels: 'lab'},\n\tlch: {channels: 3, labels: 'lch'},\n\thex: {channels: 1, labels: ['hex']},\n\tkeyword: {channels: 1, labels: ['keyword']},\n\tansi16: {channels: 1, labels: ['ansi16']},\n\tansi256: {channels: 1, labels: ['ansi256']},\n\thcg: {channels: 3, labels: ['h', 'c', 'g']},\n\tapple: {channels: 3, labels: ['r16', 'g16', 'b16']},\n\tgray: {channels: 1, labels: ['gray']}\n};\n\n// hide .channels and .labels properties\nfor (var model in convert) {\n\tif (convert.hasOwnProperty(model)) {\n\t\tif (!('channels' in convert[model])) {\n\t\t\tthrow new Error('missing channels property: ' + model);\n\t\t}\n\n\t\tif (!('labels' in convert[model])) {\n\t\t\tthrow new Error('missing channel labels property: ' + model);\n\t\t}\n\n\t\tif (convert[model].labels.length !== convert[model].channels) {\n\t\t\tthrow new Error('channel and label counts mismatch: ' + model);\n\t\t}\n\n\t\tvar channels = convert[model].channels;\n\t\tvar labels = convert[model].labels;\n\t\tdelete convert[model].channels;\n\t\tdelete convert[model].labels;\n\t\tObject.defineProperty(convert[model], 'channels', {value: channels});\n\t\tObject.defineProperty(convert[model], 'labels', {value: labels});\n\t}\n}\n\nconvert.rgb.hsl = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar min = Math.min(r, g, b);\n\tvar max = Math.max(r, g, b);\n\tvar delta = max - min;\n\tvar h;\n\tvar s;\n\tvar l;\n\n\tif (max === min) {\n\t\th = 0;\n\t} else if (r === max) {\n\t\th = (g - b) / delta;\n\t} else if (g === max) {\n\t\th = 2 + (b - r) / delta;\n\t} else if (b === max) {\n\t\th = 4 + (r - g) / delta;\n\t}\n\n\th = Math.min(h * 60, 360);\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tl = (min + max) / 2;\n\n\tif (max === min) {\n\t\ts = 0;\n\t} else if (l <= 0.5) {\n\t\ts = delta / (max + min);\n\t} else {\n\t\ts = delta / (2 - max - min);\n\t}\n\n\treturn [h, s * 100, l * 100];\n};\n\nconvert.rgb.hsv = function (rgb) {\n\tvar rdif;\n\tvar gdif;\n\tvar bdif;\n\tvar h;\n\tvar s;\n\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar v = Math.max(r, g, b);\n\tvar diff = v - Math.min(r, g, b);\n\tvar diffc = function (c) {\n\t\treturn (v - c) / 6 / diff + 1 / 2;\n\t};\n\n\tif (diff === 0) {\n\t\th = s = 0;\n\t} else {\n\t\ts = diff / v;\n\t\trdif = diffc(r);\n\t\tgdif = diffc(g);\n\t\tbdif = diffc(b);\n\n\t\tif (r === v) {\n\t\t\th = bdif - gdif;\n\t\t} else if (g === v) {\n\t\t\th = (1 / 3) + rdif - bdif;\n\t\t} else if (b === v) {\n\t\t\th = (2 / 3) + gdif - rdif;\n\t\t}\n\t\tif (h < 0) {\n\t\t\th += 1;\n\t\t} else if (h > 1) {\n\t\t\th -= 1;\n\t\t}\n\t}\n\n\treturn [\n\t\th * 360,\n\t\ts * 100,\n\t\tv * 100\n\t];\n};\n\nconvert.rgb.hwb = function (rgb) {\n\tvar r = rgb[0];\n\tvar g = rgb[1];\n\tvar b = rgb[2];\n\tvar h = convert.rgb.hsl(rgb)[0];\n\tvar w = 1 / 255 * Math.min(r, Math.min(g, b));\n\n\tb = 1 - 1 / 255 * Math.max(r, Math.max(g, b));\n\n\treturn [h, w * 100, b * 100];\n};\n\nconvert.rgb.cmyk = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar c;\n\tvar m;\n\tvar y;\n\tvar k;\n\n\tk = Math.min(1 - r, 1 - g, 1 - b);\n\tc = (1 - r - k) / (1 - k) || 0;\n\tm = (1 - g - k) / (1 - k) || 0;\n\ty = (1 - b - k) / (1 - k) || 0;\n\n\treturn [c * 100, m * 100, y * 100, k * 100];\n};\n\n/**\n * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance\n * */\nfunction comparativeDistance(x, y) {\n\treturn (\n\t\tMath.pow(x[0] - y[0], 2) +\n\t\tMath.pow(x[1] - y[1], 2) +\n\t\tMath.pow(x[2] - y[2], 2)\n\t);\n}\n\nconvert.rgb.keyword = function (rgb) {\n\tvar reversed = reverseKeywords[rgb];\n\tif (reversed) {\n\t\treturn reversed;\n\t}\n\n\tvar currentClosestDistance = Infinity;\n\tvar currentClosestKeyword;\n\n\tfor (var keyword in cssKeywords) {\n\t\tif (cssKeywords.hasOwnProperty(keyword)) {\n\t\t\tvar value = cssKeywords[keyword];\n\n\t\t\t// Compute comparative distance\n\t\t\tvar distance = comparativeDistance(rgb, value);\n\n\t\t\t// Check if its less, if so set as closest\n\t\t\tif (distance < currentClosestDistance) {\n\t\t\t\tcurrentClosestDistance = distance;\n\t\t\t\tcurrentClosestKeyword = keyword;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn currentClosestKeyword;\n};\n\nconvert.keyword.rgb = function (keyword) {\n\treturn cssKeywords[keyword];\n};\n\nconvert.rgb.xyz = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\n\t// assume sRGB\n\tr = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);\n\tg = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);\n\tb = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);\n\n\tvar x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);\n\tvar y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);\n\tvar z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);\n\n\treturn [x * 100, y * 100, z * 100];\n};\n\nconvert.rgb.lab = function (rgb) {\n\tvar xyz = convert.rgb.xyz(rgb);\n\tvar x = xyz[0];\n\tvar y = xyz[1];\n\tvar z = xyz[2];\n\tvar l;\n\tvar a;\n\tvar b;\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);\n\n\tl = (116 * y) - 16;\n\ta = 500 * (x - y);\n\tb = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.hsl.rgb = function (hsl) {\n\tvar h = hsl[0] / 360;\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar t1;\n\tvar t2;\n\tvar t3;\n\tvar rgb;\n\tvar val;\n\n\tif (s === 0) {\n\t\tval = l * 255;\n\t\treturn [val, val, val];\n\t}\n\n\tif (l < 0.5) {\n\t\tt2 = l * (1 + s);\n\t} else {\n\t\tt2 = l + s - l * s;\n\t}\n\n\tt1 = 2 * l - t2;\n\n\trgb = [0, 0, 0];\n\tfor (var i = 0; i < 3; i++) {\n\t\tt3 = h + 1 / 3 * -(i - 1);\n\t\tif (t3 < 0) {\n\t\t\tt3++;\n\t\t}\n\t\tif (t3 > 1) {\n\t\t\tt3--;\n\t\t}\n\n\t\tif (6 * t3 < 1) {\n\t\t\tval = t1 + (t2 - t1) * 6 * t3;\n\t\t} else if (2 * t3 < 1) {\n\t\t\tval = t2;\n\t\t} else if (3 * t3 < 2) {\n\t\t\tval = t1 + (t2 - t1) * (2 / 3 - t3) * 6;\n\t\t} else {\n\t\t\tval = t1;\n\t\t}\n\n\t\trgb[i] = val * 255;\n\t}\n\n\treturn rgb;\n};\n\nconvert.hsl.hsv = function (hsl) {\n\tvar h = hsl[0];\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar smin = s;\n\tvar lmin = Math.max(l, 0.01);\n\tvar sv;\n\tvar v;\n\n\tl *= 2;\n\ts *= (l <= 1) ? l : 2 - l;\n\tsmin *= lmin <= 1 ? lmin : 2 - lmin;\n\tv = (l + s) / 2;\n\tsv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);\n\n\treturn [h, sv * 100, v * 100];\n};\n\nconvert.hsv.rgb = function (hsv) {\n\tvar h = hsv[0] / 60;\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\tvar hi = Math.floor(h) % 6;\n\n\tvar f = h - Math.floor(h);\n\tvar p = 255 * v * (1 - s);\n\tvar q = 255 * v * (1 - (s * f));\n\tvar t = 255 * v * (1 - (s * (1 - f)));\n\tv *= 255;\n\n\tswitch (hi) {\n\t\tcase 0:\n\t\t\treturn [v, t, p];\n\t\tcase 1:\n\t\t\treturn [q, v, p];\n\t\tcase 2:\n\t\t\treturn [p, v, t];\n\t\tcase 3:\n\t\t\treturn [p, q, v];\n\t\tcase 4:\n\t\t\treturn [t, p, v];\n\t\tcase 5:\n\t\t\treturn [v, p, q];\n\t}\n};\n\nconvert.hsv.hsl = function (hsv) {\n\tvar h = hsv[0];\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\tvar vmin = Math.max(v, 0.01);\n\tvar lmin;\n\tvar sl;\n\tvar l;\n\n\tl = (2 - s) * v;\n\tlmin = (2 - s) * vmin;\n\tsl = s * vmin;\n\tsl /= (lmin <= 1) ? lmin : 2 - lmin;\n\tsl = sl || 0;\n\tl /= 2;\n\n\treturn [h, sl * 100, l * 100];\n};\n\n// http://dev.w3.org/csswg/css-color/#hwb-to-rgb\nconvert.hwb.rgb = function (hwb) {\n\tvar h = hwb[0] / 360;\n\tvar wh = hwb[1] / 100;\n\tvar bl = hwb[2] / 100;\n\tvar ratio = wh + bl;\n\tvar i;\n\tvar v;\n\tvar f;\n\tvar n;\n\n\t// wh + bl cant be > 1\n\tif (ratio > 1) {\n\t\twh /= ratio;\n\t\tbl /= ratio;\n\t}\n\n\ti = Math.floor(6 * h);\n\tv = 1 - bl;\n\tf = 6 * h - i;\n\n\tif ((i & 0x01) !== 0) {\n\t\tf = 1 - f;\n\t}\n\n\tn = wh + f * (v - wh); // linear interpolation\n\n\tvar r;\n\tvar g;\n\tvar b;\n\tswitch (i) {\n\t\tdefault:\n\t\tcase 6:\n\t\tcase 0: r = v; g = n; b = wh; break;\n\t\tcase 1: r = n; g = v; b = wh; break;\n\t\tcase 2: r = wh; g = v; b = n; break;\n\t\tcase 3: r = wh; g = n; b = v; break;\n\t\tcase 4: r = n; g = wh; b = v; break;\n\t\tcase 5: r = v; g = wh; b = n; break;\n\t}\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.cmyk.rgb = function (cmyk) {\n\tvar c = cmyk[0] / 100;\n\tvar m = cmyk[1] / 100;\n\tvar y = cmyk[2] / 100;\n\tvar k = cmyk[3] / 100;\n\tvar r;\n\tvar g;\n\tvar b;\n\n\tr = 1 - Math.min(1, c * (1 - k) + k);\n\tg = 1 - Math.min(1, m * (1 - k) + k);\n\tb = 1 - Math.min(1, y * (1 - k) + k);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.rgb = function (xyz) {\n\tvar x = xyz[0] / 100;\n\tvar y = xyz[1] / 100;\n\tvar z = xyz[2] / 100;\n\tvar r;\n\tvar g;\n\tvar b;\n\n\tr = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);\n\tg = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);\n\tb = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);\n\n\t// assume sRGB\n\tr = r > 0.0031308\n\t\t? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)\n\t\t: r * 12.92;\n\n\tg = g > 0.0031308\n\t\t? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)\n\t\t: g * 12.92;\n\n\tb = b > 0.0031308\n\t\t? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)\n\t\t: b * 12.92;\n\n\tr = Math.min(Math.max(0, r), 1);\n\tg = Math.min(Math.max(0, g), 1);\n\tb = Math.min(Math.max(0, b), 1);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.lab = function (xyz) {\n\tvar x = xyz[0];\n\tvar y = xyz[1];\n\tvar z = xyz[2];\n\tvar l;\n\tvar a;\n\tvar b;\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);\n\n\tl = (116 * y) - 16;\n\ta = 500 * (x - y);\n\tb = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.lab.xyz = function (lab) {\n\tvar l = lab[0];\n\tvar a = lab[1];\n\tvar b = lab[2];\n\tvar x;\n\tvar y;\n\tvar z;\n\n\ty = (l + 16) / 116;\n\tx = a / 500 + y;\n\tz = y - b / 200;\n\n\tvar y2 = Math.pow(y, 3);\n\tvar x2 = Math.pow(x, 3);\n\tvar z2 = Math.pow(z, 3);\n\ty = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;\n\tx = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;\n\tz = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;\n\n\tx *= 95.047;\n\ty *= 100;\n\tz *= 108.883;\n\n\treturn [x, y, z];\n};\n\nconvert.lab.lch = function (lab) {\n\tvar l = lab[0];\n\tvar a = lab[1];\n\tvar b = lab[2];\n\tvar hr;\n\tvar h;\n\tvar c;\n\n\thr = Math.atan2(b, a);\n\th = hr * 360 / 2 / Math.PI;\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tc = Math.sqrt(a * a + b * b);\n\n\treturn [l, c, h];\n};\n\nconvert.lch.lab = function (lch) {\n\tvar l = lch[0];\n\tvar c = lch[1];\n\tvar h = lch[2];\n\tvar a;\n\tvar b;\n\tvar hr;\n\n\thr = h / 360 * 2 * Math.PI;\n\ta = c * Math.cos(hr);\n\tb = c * Math.sin(hr);\n\n\treturn [l, a, b];\n};\n\nconvert.rgb.ansi16 = function (args) {\n\tvar r = args[0];\n\tvar g = args[1];\n\tvar b = args[2];\n\tvar value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization\n\n\tvalue = Math.round(value / 50);\n\n\tif (value === 0) {\n\t\treturn 30;\n\t}\n\n\tvar ansi = 30\n\t\t+ ((Math.round(b / 255) << 2)\n\t\t| (Math.round(g / 255) << 1)\n\t\t| Math.round(r / 255));\n\n\tif (value === 2) {\n\t\tansi += 60;\n\t}\n\n\treturn ansi;\n};\n\nconvert.hsv.ansi16 = function (args) {\n\t// optimization here; we already know the value and don't need to get\n\t// it converted for us.\n\treturn convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);\n};\n\nconvert.rgb.ansi256 = function (args) {\n\tvar r = args[0];\n\tvar g = args[1];\n\tvar b = args[2];\n\n\t// we use the extended greyscale palette here, with the exception of\n\t// black and white. normal palette only has 4 greyscale shades.\n\tif (r === g && g === b) {\n\t\tif (r < 8) {\n\t\t\treturn 16;\n\t\t}\n\n\t\tif (r > 248) {\n\t\t\treturn 231;\n\t\t}\n\n\t\treturn Math.round(((r - 8) / 247) * 24) + 232;\n\t}\n\n\tvar ansi = 16\n\t\t+ (36 * Math.round(r / 255 * 5))\n\t\t+ (6 * Math.round(g / 255 * 5))\n\t\t+ Math.round(b / 255 * 5);\n\n\treturn ansi;\n};\n\nconvert.ansi16.rgb = function (args) {\n\tvar color = args % 10;\n\n\t// handle greyscale\n\tif (color === 0 || color === 7) {\n\t\tif (args > 50) {\n\t\t\tcolor += 3.5;\n\t\t}\n\n\t\tcolor = color / 10.5 * 255;\n\n\t\treturn [color, color, color];\n\t}\n\n\tvar mult = (~~(args > 50) + 1) * 0.5;\n\tvar r = ((color & 1) * mult) * 255;\n\tvar g = (((color >> 1) & 1) * mult) * 255;\n\tvar b = (((color >> 2) & 1) * mult) * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.ansi256.rgb = function (args) {\n\t// handle greyscale\n\tif (args >= 232) {\n\t\tvar c = (args - 232) * 10 + 8;\n\t\treturn [c, c, c];\n\t}\n\n\targs -= 16;\n\n\tvar rem;\n\tvar r = Math.floor(args / 36) / 5 * 255;\n\tvar g = Math.floor((rem = args % 36) / 6) / 5 * 255;\n\tvar b = (rem % 6) / 5 * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hex = function (args) {\n\tvar integer = ((Math.round(args[0]) & 0xFF) << 16)\n\t\t+ ((Math.round(args[1]) & 0xFF) << 8)\n\t\t+ (Math.round(args[2]) & 0xFF);\n\n\tvar string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.hex.rgb = function (args) {\n\tvar match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);\n\tif (!match) {\n\t\treturn [0, 0, 0];\n\t}\n\n\tvar colorString = match[0];\n\n\tif (match[0].length === 3) {\n\t\tcolorString = colorString.split('').map(function (char) {\n\t\t\treturn char + char;\n\t\t}).join('');\n\t}\n\n\tvar integer = parseInt(colorString, 16);\n\tvar r = (integer >> 16) & 0xFF;\n\tvar g = (integer >> 8) & 0xFF;\n\tvar b = integer & 0xFF;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hcg = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar max = Math.max(Math.max(r, g), b);\n\tvar min = Math.min(Math.min(r, g), b);\n\tvar chroma = (max - min);\n\tvar grayscale;\n\tvar hue;\n\n\tif (chroma < 1) {\n\t\tgrayscale = min / (1 - chroma);\n\t} else {\n\t\tgrayscale = 0;\n\t}\n\n\tif (chroma <= 0) {\n\t\thue = 0;\n\t} else\n\tif (max === r) {\n\t\thue = ((g - b) / chroma) % 6;\n\t} else\n\tif (max === g) {\n\t\thue = 2 + (b - r) / chroma;\n\t} else {\n\t\thue = 4 + (r - g) / chroma + 4;\n\t}\n\n\thue /= 6;\n\thue %= 1;\n\n\treturn [hue * 360, chroma * 100, grayscale * 100];\n};\n\nconvert.hsl.hcg = function (hsl) {\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar c = 1;\n\tvar f = 0;\n\n\tif (l < 0.5) {\n\t\tc = 2.0 * s * l;\n\t} else {\n\t\tc = 2.0 * s * (1.0 - l);\n\t}\n\n\tif (c < 1.0) {\n\t\tf = (l - 0.5 * c) / (1.0 - c);\n\t}\n\n\treturn [hsl[0], c * 100, f * 100];\n};\n\nconvert.hsv.hcg = function (hsv) {\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\n\tvar c = s * v;\n\tvar f = 0;\n\n\tif (c < 1.0) {\n\t\tf = (v - c) / (1 - c);\n\t}\n\n\treturn [hsv[0], c * 100, f * 100];\n};\n\nconvert.hcg.rgb = function (hcg) {\n\tvar h = hcg[0] / 360;\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tif (c === 0.0) {\n\t\treturn [g * 255, g * 255, g * 255];\n\t}\n\n\tvar pure = [0, 0, 0];\n\tvar hi = (h % 1) * 6;\n\tvar v = hi % 1;\n\tvar w = 1 - v;\n\tvar mg = 0;\n\n\tswitch (Math.floor(hi)) {\n\t\tcase 0:\n\t\t\tpure[0] = 1; pure[1] = v; pure[2] = 0; break;\n\t\tcase 1:\n\t\t\tpure[0] = w; pure[1] = 1; pure[2] = 0; break;\n\t\tcase 2:\n\t\t\tpure[0] = 0; pure[1] = 1; pure[2] = v; break;\n\t\tcase 3:\n\t\t\tpure[0] = 0; pure[1] = w; pure[2] = 1; break;\n\t\tcase 4:\n\t\t\tpure[0] = v; pure[1] = 0; pure[2] = 1; break;\n\t\tdefault:\n\t\t\tpure[0] = 1; pure[1] = 0; pure[2] = w;\n\t}\n\n\tmg = (1.0 - c) * g;\n\n\treturn [\n\t\t(c * pure[0] + mg) * 255,\n\t\t(c * pure[1] + mg) * 255,\n\t\t(c * pure[2] + mg) * 255\n\t];\n};\n\nconvert.hcg.hsv = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tvar v = c + g * (1.0 - c);\n\tvar f = 0;\n\n\tif (v > 0.0) {\n\t\tf = c / v;\n\t}\n\n\treturn [hcg[0], f * 100, v * 100];\n};\n\nconvert.hcg.hsl = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tvar l = g * (1.0 - c) + 0.5 * c;\n\tvar s = 0;\n\n\tif (l > 0.0 && l < 0.5) {\n\t\ts = c / (2 * l);\n\t} else\n\tif (l >= 0.5 && l < 1.0) {\n\t\ts = c / (2 * (1 - l));\n\t}\n\n\treturn [hcg[0], s * 100, l * 100];\n};\n\nconvert.hcg.hwb = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\tvar v = c + g * (1.0 - c);\n\treturn [hcg[0], (v - c) * 100, (1 - v) * 100];\n};\n\nconvert.hwb.hcg = function (hwb) {\n\tvar w = hwb[1] / 100;\n\tvar b = hwb[2] / 100;\n\tvar v = 1 - b;\n\tvar c = v - w;\n\tvar g = 0;\n\n\tif (c < 1) {\n\t\tg = (v - c) / (1 - c);\n\t}\n\n\treturn [hwb[0], c * 100, g * 100];\n};\n\nconvert.apple.rgb = function (apple) {\n\treturn [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];\n};\n\nconvert.rgb.apple = function (rgb) {\n\treturn [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];\n};\n\nconvert.gray.rgb = function (args) {\n\treturn [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];\n};\n\nconvert.gray.hsl = convert.gray.hsv = function (args) {\n\treturn [0, 0, args[0]];\n};\n\nconvert.gray.hwb = function (gray) {\n\treturn [0, 100, gray[0]];\n};\n\nconvert.gray.cmyk = function (gray) {\n\treturn [0, 0, 0, gray[0]];\n};\n\nconvert.gray.lab = function (gray) {\n\treturn [gray[0], 0, 0];\n};\n\nconvert.gray.hex = function (gray) {\n\tvar val = Math.round(gray[0] / 100 * 255) & 0xFF;\n\tvar integer = (val << 16) + (val << 8) + val;\n\n\tvar string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.rgb.gray = function (rgb) {\n\tvar val = (rgb[0] + rgb[1] + rgb[2]) / 3;\n\treturn [val / 255 * 100];\n};\n","var conversions = require('./conversions');\nvar route = require('./route');\n\nvar convert = {};\n\nvar models = Object.keys(conversions);\n\nfunction wrapRaw(fn) {\n\tvar wrappedFn = function (args) {\n\t\tif (args === undefined || args === null) {\n\t\t\treturn args;\n\t\t}\n\n\t\tif (arguments.length > 1) {\n\t\t\targs = Array.prototype.slice.call(arguments);\n\t\t}\n\n\t\treturn fn(args);\n\t};\n\n\t// preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nfunction wrapRounded(fn) {\n\tvar wrappedFn = function (args) {\n\t\tif (args === undefined || args === null) {\n\t\t\treturn args;\n\t\t}\n\n\t\tif (arguments.length > 1) {\n\t\t\targs = Array.prototype.slice.call(arguments);\n\t\t}\n\n\t\tvar result = fn(args);\n\n\t\t// we're assuming the result is an array here.\n\t\t// see notice in conversions.js; don't use box types\n\t\t// in conversion functions.\n\t\tif (typeof result === 'object') {\n\t\t\tfor (var len = result.length, i = 0; i < len; i++) {\n\t\t\t\tresult[i] = Math.round(result[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t};\n\n\t// preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nmodels.forEach(function (fromModel) {\n\tconvert[fromModel] = {};\n\n\tObject.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});\n\tObject.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});\n\n\tvar routes = route(fromModel);\n\tvar routeModels = Object.keys(routes);\n\n\trouteModels.forEach(function (toModel) {\n\t\tvar fn = routes[toModel];\n\n\t\tconvert[fromModel][toModel] = wrapRounded(fn);\n\t\tconvert[fromModel][toModel].raw = wrapRaw(fn);\n\t});\n});\n\nmodule.exports = convert;\n","var conversions = require('./conversions');\n\n/*\n\tthis function routes a model to all other models.\n\n\tall functions that are routed have a property `.conversion` attached\n\tto the returned synthetic function. This property is an array\n\tof strings, each with the steps in between the 'from' and 'to'\n\tcolor models (inclusive).\n\n\tconversions that are not possible simply are not included.\n*/\n\nfunction buildGraph() {\n\tvar graph = {};\n\t// https://jsperf.com/object-keys-vs-for-in-with-closure/3\n\tvar models = Object.keys(conversions);\n\n\tfor (var len = models.length, i = 0; i < len; i++) {\n\t\tgraph[models[i]] = {\n\t\t\t// http://jsperf.com/1-vs-infinity\n\t\t\t// micro-opt, but this is simple.\n\t\t\tdistance: -1,\n\t\t\tparent: null\n\t\t};\n\t}\n\n\treturn graph;\n}\n\n// https://en.wikipedia.org/wiki/Breadth-first_search\nfunction deriveBFS(fromModel) {\n\tvar graph = buildGraph();\n\tvar queue = [fromModel]; // unshift -> queue -> pop\n\n\tgraph[fromModel].distance = 0;\n\n\twhile (queue.length) {\n\t\tvar current = queue.pop();\n\t\tvar adjacents = Object.keys(conversions[current]);\n\n\t\tfor (var len = adjacents.length, i = 0; i < len; i++) {\n\t\t\tvar adjacent = adjacents[i];\n\t\t\tvar node = graph[adjacent];\n\n\t\t\tif (node.distance === -1) {\n\t\t\t\tnode.distance = graph[current].distance + 1;\n\t\t\t\tnode.parent = current;\n\t\t\t\tqueue.unshift(adjacent);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn graph;\n}\n\nfunction link(from, to) {\n\treturn function (args) {\n\t\treturn to(from(args));\n\t};\n}\n\nfunction wrapConversion(toModel, graph) {\n\tvar path = [graph[toModel].parent, toModel];\n\tvar fn = conversions[graph[toModel].parent][toModel];\n\n\tvar cur = graph[toModel].parent;\n\twhile (graph[cur].parent) {\n\t\tpath.unshift(graph[cur].parent);\n\t\tfn = link(conversions[graph[cur].parent][cur], fn);\n\t\tcur = graph[cur].parent;\n\t}\n\n\tfn.conversion = path;\n\treturn fn;\n}\n\nmodule.exports = function (fromModel) {\n\tvar graph = deriveBFS(fromModel);\n\tvar conversion = {};\n\n\tvar models = Object.keys(graph);\n\tfor (var len = models.length, i = 0; i < len; i++) {\n\t\tvar toModel = models[i];\n\t\tvar node = graph[toModel];\n\n\t\tif (node.parent === null) {\n\t\t\t// no possible conversion, or this node is the source model.\n\t\t\tcontinue;\n\t\t}\n\n\t\tconversion[toModel] = wrapConversion(toModel, graph);\n\t}\n\n\treturn conversion;\n};\n\n","'use strict'\r\n\r\nmodule.exports = {\r\n\t\"aliceblue\": [240, 248, 255],\r\n\t\"antiquewhite\": [250, 235, 215],\r\n\t\"aqua\": [0, 255, 255],\r\n\t\"aquamarine\": [127, 255, 212],\r\n\t\"azure\": [240, 255, 255],\r\n\t\"beige\": [245, 245, 220],\r\n\t\"bisque\": [255, 228, 196],\r\n\t\"black\": [0, 0, 0],\r\n\t\"blanchedalmond\": [255, 235, 205],\r\n\t\"blue\": [0, 0, 255],\r\n\t\"blueviolet\": [138, 43, 226],\r\n\t\"brown\": [165, 42, 42],\r\n\t\"burlywood\": [222, 184, 135],\r\n\t\"cadetblue\": [95, 158, 160],\r\n\t\"chartreuse\": [127, 255, 0],\r\n\t\"chocolate\": [210, 105, 30],\r\n\t\"coral\": [255, 127, 80],\r\n\t\"cornflowerblue\": [100, 149, 237],\r\n\t\"cornsilk\": [255, 248, 220],\r\n\t\"crimson\": [220, 20, 60],\r\n\t\"cyan\": [0, 255, 255],\r\n\t\"darkblue\": [0, 0, 139],\r\n\t\"darkcyan\": [0, 139, 139],\r\n\t\"darkgoldenrod\": [184, 134, 11],\r\n\t\"darkgray\": [169, 169, 169],\r\n\t\"darkgreen\": [0, 100, 0],\r\n\t\"darkgrey\": [169, 169, 169],\r\n\t\"darkkhaki\": [189, 183, 107],\r\n\t\"darkmagenta\": [139, 0, 139],\r\n\t\"darkolivegreen\": [85, 107, 47],\r\n\t\"darkorange\": [255, 140, 0],\r\n\t\"darkorchid\": [153, 50, 204],\r\n\t\"darkred\": [139, 0, 0],\r\n\t\"darksalmon\": [233, 150, 122],\r\n\t\"darkseagreen\": [143, 188, 143],\r\n\t\"darkslateblue\": [72, 61, 139],\r\n\t\"darkslategray\": [47, 79, 79],\r\n\t\"darkslategrey\": [47, 79, 79],\r\n\t\"darkturquoise\": [0, 206, 209],\r\n\t\"darkviolet\": [148, 0, 211],\r\n\t\"deeppink\": [255, 20, 147],\r\n\t\"deepskyblue\": [0, 191, 255],\r\n\t\"dimgray\": [105, 105, 105],\r\n\t\"dimgrey\": [105, 105, 105],\r\n\t\"dodgerblue\": [30, 144, 255],\r\n\t\"firebrick\": [178, 34, 34],\r\n\t\"floralwhite\": [255, 250, 240],\r\n\t\"forestgreen\": [34, 139, 34],\r\n\t\"fuchsia\": [255, 0, 255],\r\n\t\"gainsboro\": [220, 220, 220],\r\n\t\"ghostwhite\": [248, 248, 255],\r\n\t\"gold\": [255, 215, 0],\r\n\t\"goldenrod\": [218, 165, 32],\r\n\t\"gray\": [128, 128, 128],\r\n\t\"green\": [0, 128, 0],\r\n\t\"greenyellow\": [173, 255, 47],\r\n\t\"grey\": [128, 128, 128],\r\n\t\"honeydew\": [240, 255, 240],\r\n\t\"hotpink\": [255, 105, 180],\r\n\t\"indianred\": [205, 92, 92],\r\n\t\"indigo\": [75, 0, 130],\r\n\t\"ivory\": [255, 255, 240],\r\n\t\"khaki\": [240, 230, 140],\r\n\t\"lavender\": [230, 230, 250],\r\n\t\"lavenderblush\": [255, 240, 245],\r\n\t\"lawngreen\": [124, 252, 0],\r\n\t\"lemonchiffon\": [255, 250, 205],\r\n\t\"lightblue\": [173, 216, 230],\r\n\t\"lightcoral\": [240, 128, 128],\r\n\t\"lightcyan\": [224, 255, 255],\r\n\t\"lightgoldenrodyellow\": [250, 250, 210],\r\n\t\"lightgray\": [211, 211, 211],\r\n\t\"lightgreen\": [144, 238, 144],\r\n\t\"lightgrey\": [211, 211, 211],\r\n\t\"lightpink\": [255, 182, 193],\r\n\t\"lightsalmon\": [255, 160, 122],\r\n\t\"lightseagreen\": [32, 178, 170],\r\n\t\"lightskyblue\": [135, 206, 250],\r\n\t\"lightslategray\": [119, 136, 153],\r\n\t\"lightslategrey\": [119, 136, 153],\r\n\t\"lightsteelblue\": [176, 196, 222],\r\n\t\"lightyellow\": [255, 255, 224],\r\n\t\"lime\": [0, 255, 0],\r\n\t\"limegreen\": [50, 205, 50],\r\n\t\"linen\": [250, 240, 230],\r\n\t\"magenta\": [255, 0, 255],\r\n\t\"maroon\": [128, 0, 0],\r\n\t\"mediumaquamarine\": [102, 205, 170],\r\n\t\"mediumblue\": [0, 0, 205],\r\n\t\"mediumorchid\": [186, 85, 211],\r\n\t\"mediumpurple\": [147, 112, 219],\r\n\t\"mediumseagreen\": [60, 179, 113],\r\n\t\"mediumslateblue\": [123, 104, 238],\r\n\t\"mediumspringgreen\": [0, 250, 154],\r\n\t\"mediumturquoise\": [72, 209, 204],\r\n\t\"mediumvioletred\": [199, 21, 133],\r\n\t\"midnightblue\": [25, 25, 112],\r\n\t\"mintcream\": [245, 255, 250],\r\n\t\"mistyrose\": [255, 228, 225],\r\n\t\"moccasin\": [255, 228, 181],\r\n\t\"navajowhite\": [255, 222, 173],\r\n\t\"navy\": [0, 0, 128],\r\n\t\"oldlace\": [253, 245, 230],\r\n\t\"olive\": [128, 128, 0],\r\n\t\"olivedrab\": [107, 142, 35],\r\n\t\"orange\": [255, 165, 0],\r\n\t\"orangered\": [255, 69, 0],\r\n\t\"orchid\": [218, 112, 214],\r\n\t\"palegoldenrod\": [238, 232, 170],\r\n\t\"palegreen\": [152, 251, 152],\r\n\t\"paleturquoise\": [175, 238, 238],\r\n\t\"palevioletred\": [219, 112, 147],\r\n\t\"papayawhip\": [255, 239, 213],\r\n\t\"peachpuff\": [255, 218, 185],\r\n\t\"peru\": [205, 133, 63],\r\n\t\"pink\": [255, 192, 203],\r\n\t\"plum\": [221, 160, 221],\r\n\t\"powderblue\": [176, 224, 230],\r\n\t\"purple\": [128, 0, 128],\r\n\t\"rebeccapurple\": [102, 51, 153],\r\n\t\"red\": [255, 0, 0],\r\n\t\"rosybrown\": [188, 143, 143],\r\n\t\"royalblue\": [65, 105, 225],\r\n\t\"saddlebrown\": [139, 69, 19],\r\n\t\"salmon\": [250, 128, 114],\r\n\t\"sandybrown\": [244, 164, 96],\r\n\t\"seagreen\": [46, 139, 87],\r\n\t\"seashell\": [255, 245, 238],\r\n\t\"sienna\": [160, 82, 45],\r\n\t\"silver\": [192, 192, 192],\r\n\t\"skyblue\": [135, 206, 235],\r\n\t\"slateblue\": [106, 90, 205],\r\n\t\"slategray\": [112, 128, 144],\r\n\t\"slategrey\": [112, 128, 144],\r\n\t\"snow\": [255, 250, 250],\r\n\t\"springgreen\": [0, 255, 127],\r\n\t\"steelblue\": [70, 130, 180],\r\n\t\"tan\": [210, 180, 140],\r\n\t\"teal\": [0, 128, 128],\r\n\t\"thistle\": [216, 191, 216],\r\n\t\"tomato\": [255, 99, 71],\r\n\t\"turquoise\": [64, 224, 208],\r\n\t\"violet\": [238, 130, 238],\r\n\t\"wheat\": [245, 222, 179],\r\n\t\"white\": [255, 255, 255],\r\n\t\"whitesmoke\": [245, 245, 245],\r\n\t\"yellow\": [255, 255, 0],\r\n\t\"yellowgreen\": [154, 205, 50]\r\n};\r\n","'use strict'\n\nexports.parse = parse\nexports.stringify = stringify\n\nvar comma = ','\nvar space = ' '\nvar empty = ''\n\n// Parse comma-separated tokens to an array.\nfunction parse(value) {\n  var values = []\n  var input = String(value || empty)\n  var index = input.indexOf(comma)\n  var lastIndex = 0\n  var end = false\n  var val\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    val = input.slice(lastIndex, index).trim()\n\n    if (val || !end) {\n      values.push(val)\n    }\n\n    lastIndex = index + 1\n    index = input.indexOf(comma, lastIndex)\n  }\n\n  return values\n}\n\n// Compile an array to comma-separated tokens.\n// `options.padLeft` (default: `true`) pads a space left of each token, and\n// `options.padRight` (default: `false`) pads a space to the right of each token.\nfunction stringify(values, options) {\n  var settings = options || {}\n  var left = settings.padLeft === false ? empty : space\n  var right = settings.padRight ? space : empty\n\n  // Ensure the last empty entry is seen.\n  if (values[values.length - 1] === empty) {\n    values = values.concat(empty)\n  }\n\n  return values.join(right + comma + left).trim()\n}\n","'use strict';\n\nvar matchOperatorsRe = /[|\\\\{}()[\\]^$+*?.]/g;\n\nmodule.exports = function (str) {\n\tif (typeof str !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\treturn str.replace(matchOperatorsRe, '\\\\$&');\n};\n","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","'use strict'\n\nmodule.exports = parse\n\nvar search = /[#.]/g\n\n// Create a hast element from a simple CSS selector.\nfunction parse(selector, defaultTagName) {\n  var value = selector || ''\n  var name = defaultTagName || 'div'\n  var props = {}\n  var start = 0\n  var subvalue\n  var previous\n  var match\n\n  while (start < value.length) {\n    search.lastIndex = start\n    match = search.exec(value)\n    subvalue = value.slice(start, match ? match.index : value.length)\n\n    if (subvalue) {\n      if (!previous) {\n        name = subvalue\n      } else if (previous === '#') {\n        props.id = subvalue\n      } else if (props.className) {\n        props.className.push(subvalue)\n      } else {\n        props.className = [subvalue]\n      }\n\n      start += subvalue.length\n    }\n\n    if (match) {\n      previous = match[0]\n      start++\n    }\n  }\n\n  return {type: 'element', tagName: name, properties: props, children: []}\n}\n","'use strict'\n\nvar find = require('property-information/find')\nvar normalize = require('property-information/normalize')\nvar parseSelector = require('hast-util-parse-selector')\nvar spaces = require('space-separated-tokens').parse\nvar commas = require('comma-separated-tokens').parse\n\nmodule.exports = factory\n\nvar own = {}.hasOwnProperty\n\nfunction factory(schema, defaultTagName, caseSensitive) {\n  var adjust = caseSensitive ? createAdjustMap(caseSensitive) : null\n\n  return h\n\n  // Hyperscript compatible DSL for creating virtual hast trees.\n  function h(selector, properties) {\n    var node = parseSelector(selector, defaultTagName)\n    var children = Array.prototype.slice.call(arguments, 2)\n    var name = node.tagName.toLowerCase()\n    var property\n\n    node.tagName = adjust && own.call(adjust, name) ? adjust[name] : name\n\n    if (properties && isChildren(properties, node)) {\n      children.unshift(properties)\n      properties = null\n    }\n\n    if (properties) {\n      for (property in properties) {\n        addProperty(node.properties, property, properties[property])\n      }\n    }\n\n    addChild(node.children, children)\n\n    if (node.tagName === 'template') {\n      node.content = {type: 'root', children: node.children}\n      node.children = []\n    }\n\n    return node\n  }\n\n  function addProperty(properties, key, value) {\n    var info\n    var property\n    var result\n\n    // Ignore nullish and NaN values.\n    if (value === null || value === undefined || value !== value) {\n      return\n    }\n\n    info = find(schema, key)\n    property = info.property\n    result = value\n\n    // Handle list values.\n    if (typeof result === 'string') {\n      if (info.spaceSeparated) {\n        result = spaces(result)\n      } else if (info.commaSeparated) {\n        result = commas(result)\n      } else if (info.commaOrSpaceSeparated) {\n        result = spaces(commas(result).join(' '))\n      }\n    }\n\n    // Accept `object` on style.\n    if (property === 'style' && typeof value !== 'string') {\n      result = style(result)\n    }\n\n    // Class-names (which can be added both on the `selector` and here).\n    if (property === 'className' && properties.className) {\n      result = properties.className.concat(result)\n    }\n\n    properties[property] = parsePrimitives(info, property, result)\n  }\n}\n\nfunction isChildren(value, node) {\n  return (\n    typeof value === 'string' ||\n    'length' in value ||\n    isNode(node.tagName, value)\n  )\n}\n\nfunction isNode(tagName, value) {\n  var type = value.type\n\n  if (tagName === 'input' || !type || typeof type !== 'string') {\n    return false\n  }\n\n  if (typeof value.children === 'object' && 'length' in value.children) {\n    return true\n  }\n\n  type = type.toLowerCase()\n\n  if (tagName === 'button') {\n    return (\n      type !== 'menu' &&\n      type !== 'submit' &&\n      type !== 'reset' &&\n      type !== 'button'\n    )\n  }\n\n  return 'value' in value\n}\n\nfunction addChild(nodes, value) {\n  var index\n  var length\n\n  if (typeof value === 'string' || typeof value === 'number') {\n    nodes.push({type: 'text', value: String(value)})\n    return\n  }\n\n  if (typeof value === 'object' && 'length' in value) {\n    index = -1\n    length = value.length\n\n    while (++index < length) {\n      addChild(nodes, value[index])\n    }\n\n    return\n  }\n\n  if (typeof value !== 'object' || !('type' in value)) {\n    throw new Error('Expected node, nodes, or string, got `' + value + '`')\n  }\n\n  nodes.push(value)\n}\n\n// Parse a (list of) primitives.\nfunction parsePrimitives(info, name, value) {\n  var index\n  var length\n  var result\n\n  if (typeof value !== 'object' || !('length' in value)) {\n    return parsePrimitive(info, name, value)\n  }\n\n  length = value.length\n  index = -1\n  result = []\n\n  while (++index < length) {\n    result[index] = parsePrimitive(info, name, value[index])\n  }\n\n  return result\n}\n\n// Parse a single primitives.\nfunction parsePrimitive(info, name, value) {\n  var result = value\n\n  if (info.number || info.positiveNumber) {\n    if (!isNaN(result) && result !== '') {\n      result = Number(result)\n    }\n  } else if (info.boolean || info.overloadedBoolean) {\n    // Accept `boolean` and `string`.\n    if (\n      typeof result === 'string' &&\n      (result === '' || normalize(value) === normalize(name))\n    ) {\n      result = true\n    }\n  }\n\n  return result\n}\n\nfunction style(value) {\n  var result = []\n  var key\n\n  for (key in value) {\n    result.push([key, value[key]].join(': '))\n  }\n\n  return result.join('; ')\n}\n\nfunction createAdjustMap(values) {\n  var length = values.length\n  var index = -1\n  var result = {}\n  var value\n\n  while (++index < length) {\n    value = values[index]\n    result[value.toLowerCase()] = value\n  }\n\n  return result\n}\n","'use strict'\n\nvar schema = require('property-information/html')\nvar factory = require('./factory')\n\nvar html = factory(schema, 'div')\nhtml.displayName = 'html'\n\nmodule.exports = html\n","'use strict'\n\nmodule.exports = require('./html')\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function(style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function(node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","'use strict'\n\nmodule.exports = alphabetical\n\n// Check if the given character code, or the character code at the first\n// character, is alphabetical.\nfunction alphabetical(character) {\n  var code = typeof character === 'string' ? character.charCodeAt(0) : character\n\n  return (\n    (code >= 97 && code <= 122) /* a-z */ ||\n    (code >= 65 && code <= 90) /* A-Z */\n  )\n}\n","'use strict'\n\nvar alphabetical = require('is-alphabetical')\nvar decimal = require('is-decimal')\n\nmodule.exports = alphanumerical\n\n// Check if the given character code, or the character code at the first\n// character, is alphanumerical.\nfunction alphanumerical(character) {\n  return alphabetical(character) || decimal(character)\n}\n","'use strict'\n\nmodule.exports = decimal\n\n// Check if the given character code, or the character code at the first\n// character, is decimal.\nfunction decimal(character) {\n  var code = typeof character === 'string' ? character.charCodeAt(0) : character\n\n  return code >= 48 && code <= 57 /* 0-9 */\n}\n","'use strict'\n\nmodule.exports = hexadecimal\n\n// Check if the given character code, or the character code at the first\n// character, is hexadecimal.\nfunction hexadecimal(character) {\n  var code = typeof character === 'string' ? character.charCodeAt(0) : character\n\n  return (\n    (code >= 97 /* a */ && code <= 102) /* z */ ||\n    (code >= 65 /* A */ && code <= 70) /* Z */ ||\n    (code >= 48 /* A */ && code <= 57) /* Z */\n  )\n}\n","// Copyright 2014, 2015, 2016, 2017, 2018 Simon Lydell\n// License: MIT. (See LICENSE.)\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n})\n\n// This regex comes from regex.coffee, and is inserted here by generate-index.js\n// (run `npm run build`).\nexports.default = /((['\"])(?:(?!\\2|\\\\).|\\\\(?:\\r\\n|[\\s\\S]))*(\\2)?|`(?:[^`\\\\$]|\\\\[\\s\\S]|\\$(?!\\{)|\\$\\{(?:[^{}]|\\{[^}]*\\}?)*\\}?)*(`)?)|(\\/\\/.*)|(\\/\\*(?:[^*]|\\*(?!\\/))*(\\*\\/)?)|(\\/(?!\\*)(?:\\[(?:(?![\\]\\\\]).|\\\\.)*\\]|(?![\\/\\]\\\\]).|\\\\.)+\\/(?:(?!\\s*(?:\\b|[\\u0080-\\uFFFF$\\\\'\"~({]|[+\\-!](?!=)|\\.?\\d))|[gmiyus]{1,6}\\b(?![\\u0080-\\uFFFF$\\\\]|\\s*(?:[+\\-*%&|^<>!=?({]|\\/(?![\\/*])))))|(0[xX][\\da-fA-F]+|0[oO][0-7]+|0[bB][01]+|(?:\\d*\\.\\d+|\\d+\\.?)(?:[eE][+-]?\\d+)?)|((?!\\d)(?:(?!\\s)[$\\w\\u0080-\\uFFFF]|\\\\u[\\da-fA-F]{4}|\\\\u\\{[\\da-fA-F]+\\})+)|(--|\\+\\+|&&|\\|\\||=>|\\.{3}|(?:[+\\-\\/%&|^]|\\*{1,2}|<{1,2}|>{1,3}|!=?|={1,2})=?|[?~.,:;[\\](){}])|(\\s+)|(^$|[\\s\\S])/g\n\nexports.matchToToken = function(match) {\n  var token = {type: \"invalid\", value: match[0], closed: undefined}\n       if (match[ 1]) token.type = \"string\" , token.closed = !!(match[3] || match[4])\n  else if (match[ 5]) token.type = \"comment\"\n  else if (match[ 6]) token.type = \"comment\", token.closed = !!match[7]\n  else if (match[ 8]) token.type = \"regex\"\n  else if (match[ 9]) token.type = \"number\"\n  else if (match[10]) token.type = \"name\"\n  else if (match[11]) token.type = \"punctuator\"\n  else if (match[12]) token.type = \"whitespace\"\n  return token\n}\n","export * from \"../shared/lib/app-dynamic\";\nexport { default } from \"../shared/lib/app-dynamic\";\n\n//# sourceMappingURL=app-dynamic.js.map","\"use strict\";\nvar _global_process, _global_process1;\nmodule.exports = ((_global_process = global.process) == null ? void 0 : _global_process.env) && typeof ((_global_process1 = global.process) == null ? void 0 : _global_process1.env) === \"object\" ? global.process : require(\"next/dist/compiled/process\");\n\n//# sourceMappingURL=process.js.map","(function(){var e={675:function(e,r){\"use strict\";r.byteLength=byteLength;r.toByteArray=toByteArray;r.fromByteArray=fromByteArray;var t=[];var f=[];var n=typeof Uint8Array!==\"undefined\"?Uint8Array:Array;var i=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";for(var o=0,u=i.length;o<u;++o){t[o]=i[o];f[i.charCodeAt(o)]=o}f[\"-\".charCodeAt(0)]=62;f[\"_\".charCodeAt(0)]=63;function getLens(e){var r=e.length;if(r%4>0){throw new Error(\"Invalid string. Length must be a multiple of 4\")}var t=e.indexOf(\"=\");if(t===-1)t=r;var f=t===r?0:4-t%4;return[t,f]}function byteLength(e){var r=getLens(e);var t=r[0];var f=r[1];return(t+f)*3/4-f}function _byteLength(e,r,t){return(r+t)*3/4-t}function toByteArray(e){var r;var t=getLens(e);var i=t[0];var o=t[1];var u=new n(_byteLength(e,i,o));var a=0;var s=o>0?i-4:i;var h;for(h=0;h<s;h+=4){r=f[e.charCodeAt(h)]<<18|f[e.charCodeAt(h+1)]<<12|f[e.charCodeAt(h+2)]<<6|f[e.charCodeAt(h+3)];u[a++]=r>>16&255;u[a++]=r>>8&255;u[a++]=r&255}if(o===2){r=f[e.charCodeAt(h)]<<2|f[e.charCodeAt(h+1)]>>4;u[a++]=r&255}if(o===1){r=f[e.charCodeAt(h)]<<10|f[e.charCodeAt(h+1)]<<4|f[e.charCodeAt(h+2)]>>2;u[a++]=r>>8&255;u[a++]=r&255}return u}function tripletToBase64(e){return t[e>>18&63]+t[e>>12&63]+t[e>>6&63]+t[e&63]}function encodeChunk(e,r,t){var f;var n=[];for(var i=r;i<t;i+=3){f=(e[i]<<16&16711680)+(e[i+1]<<8&65280)+(e[i+2]&255);n.push(tripletToBase64(f))}return n.join(\"\")}function fromByteArray(e){var r;var f=e.length;var n=f%3;var i=[];var o=16383;for(var u=0,a=f-n;u<a;u+=o){i.push(encodeChunk(e,u,u+o>a?a:u+o))}if(n===1){r=e[f-1];i.push(t[r>>2]+t[r<<4&63]+\"==\")}else if(n===2){r=(e[f-2]<<8)+e[f-1];i.push(t[r>>10]+t[r>>4&63]+t[r<<2&63]+\"=\")}return i.join(\"\")}},72:function(e,r,t){\"use strict\";\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */var f=t(675);var n=t(783);var i=typeof Symbol===\"function\"&&typeof Symbol.for===\"function\"?Symbol.for(\"nodejs.util.inspect.custom\"):null;r.Buffer=Buffer;r.SlowBuffer=SlowBuffer;r.INSPECT_MAX_BYTES=50;var o=2147483647;r.kMaxLength=o;Buffer.TYPED_ARRAY_SUPPORT=typedArraySupport();if(!Buffer.TYPED_ARRAY_SUPPORT&&typeof console!==\"undefined\"&&typeof console.error===\"function\"){console.error(\"This browser lacks typed array (Uint8Array) support which is required by \"+\"`buffer` v5.x. Use `buffer` v4.x if you require old browser support.\")}function typedArraySupport(){try{var e=new Uint8Array(1);var r={foo:function(){return 42}};Object.setPrototypeOf(r,Uint8Array.prototype);Object.setPrototypeOf(e,r);return e.foo()===42}catch(e){return false}}Object.defineProperty(Buffer.prototype,\"parent\",{enumerable:true,get:function(){if(!Buffer.isBuffer(this))return undefined;return this.buffer}});Object.defineProperty(Buffer.prototype,\"offset\",{enumerable:true,get:function(){if(!Buffer.isBuffer(this))return undefined;return this.byteOffset}});function createBuffer(e){if(e>o){throw new RangeError('The value \"'+e+'\" is invalid for option \"size\"')}var r=new Uint8Array(e);Object.setPrototypeOf(r,Buffer.prototype);return r}function Buffer(e,r,t){if(typeof e===\"number\"){if(typeof r===\"string\"){throw new TypeError('The \"string\" argument must be of type string. Received type number')}return allocUnsafe(e)}return from(e,r,t)}Buffer.poolSize=8192;function from(e,r,t){if(typeof e===\"string\"){return fromString(e,r)}if(ArrayBuffer.isView(e)){return fromArrayLike(e)}if(e==null){throw new TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, \"+\"or Array-like Object. Received type \"+typeof e)}if(isInstance(e,ArrayBuffer)||e&&isInstance(e.buffer,ArrayBuffer)){return fromArrayBuffer(e,r,t)}if(typeof SharedArrayBuffer!==\"undefined\"&&(isInstance(e,SharedArrayBuffer)||e&&isInstance(e.buffer,SharedArrayBuffer))){return fromArrayBuffer(e,r,t)}if(typeof e===\"number\"){throw new TypeError('The \"value\" argument must not be of type number. Received type number')}var f=e.valueOf&&e.valueOf();if(f!=null&&f!==e){return Buffer.from(f,r,t)}var n=fromObject(e);if(n)return n;if(typeof Symbol!==\"undefined\"&&Symbol.toPrimitive!=null&&typeof e[Symbol.toPrimitive]===\"function\"){return Buffer.from(e[Symbol.toPrimitive](\"string\"),r,t)}throw new TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, \"+\"or Array-like Object. Received type \"+typeof e)}Buffer.from=function(e,r,t){return from(e,r,t)};Object.setPrototypeOf(Buffer.prototype,Uint8Array.prototype);Object.setPrototypeOf(Buffer,Uint8Array);function assertSize(e){if(typeof e!==\"number\"){throw new TypeError('\"size\" argument must be of type number')}else if(e<0){throw new RangeError('The value \"'+e+'\" is invalid for option \"size\"')}}function alloc(e,r,t){assertSize(e);if(e<=0){return createBuffer(e)}if(r!==undefined){return typeof t===\"string\"?createBuffer(e).fill(r,t):createBuffer(e).fill(r)}return createBuffer(e)}Buffer.alloc=function(e,r,t){return alloc(e,r,t)};function allocUnsafe(e){assertSize(e);return createBuffer(e<0?0:checked(e)|0)}Buffer.allocUnsafe=function(e){return allocUnsafe(e)};Buffer.allocUnsafeSlow=function(e){return allocUnsafe(e)};function fromString(e,r){if(typeof r!==\"string\"||r===\"\"){r=\"utf8\"}if(!Buffer.isEncoding(r)){throw new TypeError(\"Unknown encoding: \"+r)}var t=byteLength(e,r)|0;var f=createBuffer(t);var n=f.write(e,r);if(n!==t){f=f.slice(0,n)}return f}function fromArrayLike(e){var r=e.length<0?0:checked(e.length)|0;var t=createBuffer(r);for(var f=0;f<r;f+=1){t[f]=e[f]&255}return t}function fromArrayBuffer(e,r,t){if(r<0||e.byteLength<r){throw new RangeError('\"offset\" is outside of buffer bounds')}if(e.byteLength<r+(t||0)){throw new RangeError('\"length\" is outside of buffer bounds')}var f;if(r===undefined&&t===undefined){f=new Uint8Array(e)}else if(t===undefined){f=new Uint8Array(e,r)}else{f=new Uint8Array(e,r,t)}Object.setPrototypeOf(f,Buffer.prototype);return f}function fromObject(e){if(Buffer.isBuffer(e)){var r=checked(e.length)|0;var t=createBuffer(r);if(t.length===0){return t}e.copy(t,0,0,r);return t}if(e.length!==undefined){if(typeof e.length!==\"number\"||numberIsNaN(e.length)){return createBuffer(0)}return fromArrayLike(e)}if(e.type===\"Buffer\"&&Array.isArray(e.data)){return fromArrayLike(e.data)}}function checked(e){if(e>=o){throw new RangeError(\"Attempt to allocate Buffer larger than maximum \"+\"size: 0x\"+o.toString(16)+\" bytes\")}return e|0}function SlowBuffer(e){if(+e!=e){e=0}return Buffer.alloc(+e)}Buffer.isBuffer=function isBuffer(e){return e!=null&&e._isBuffer===true&&e!==Buffer.prototype};Buffer.compare=function compare(e,r){if(isInstance(e,Uint8Array))e=Buffer.from(e,e.offset,e.byteLength);if(isInstance(r,Uint8Array))r=Buffer.from(r,r.offset,r.byteLength);if(!Buffer.isBuffer(e)||!Buffer.isBuffer(r)){throw new TypeError('The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array')}if(e===r)return 0;var t=e.length;var f=r.length;for(var n=0,i=Math.min(t,f);n<i;++n){if(e[n]!==r[n]){t=e[n];f=r[n];break}}if(t<f)return-1;if(f<t)return 1;return 0};Buffer.isEncoding=function isEncoding(e){switch(String(e).toLowerCase()){case\"hex\":case\"utf8\":case\"utf-8\":case\"ascii\":case\"latin1\":case\"binary\":case\"base64\":case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return true;default:return false}};Buffer.concat=function concat(e,r){if(!Array.isArray(e)){throw new TypeError('\"list\" argument must be an Array of Buffers')}if(e.length===0){return Buffer.alloc(0)}var t;if(r===undefined){r=0;for(t=0;t<e.length;++t){r+=e[t].length}}var f=Buffer.allocUnsafe(r);var n=0;for(t=0;t<e.length;++t){var i=e[t];if(isInstance(i,Uint8Array)){i=Buffer.from(i)}if(!Buffer.isBuffer(i)){throw new TypeError('\"list\" argument must be an Array of Buffers')}i.copy(f,n);n+=i.length}return f};function byteLength(e,r){if(Buffer.isBuffer(e)){return e.length}if(ArrayBuffer.isView(e)||isInstance(e,ArrayBuffer)){return e.byteLength}if(typeof e!==\"string\"){throw new TypeError('The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. '+\"Received type \"+typeof e)}var t=e.length;var f=arguments.length>2&&arguments[2]===true;if(!f&&t===0)return 0;var n=false;for(;;){switch(r){case\"ascii\":case\"latin1\":case\"binary\":return t;case\"utf8\":case\"utf-8\":return utf8ToBytes(e).length;case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return t*2;case\"hex\":return t>>>1;case\"base64\":return base64ToBytes(e).length;default:if(n){return f?-1:utf8ToBytes(e).length}r=(\"\"+r).toLowerCase();n=true}}}Buffer.byteLength=byteLength;function slowToString(e,r,t){var f=false;if(r===undefined||r<0){r=0}if(r>this.length){return\"\"}if(t===undefined||t>this.length){t=this.length}if(t<=0){return\"\"}t>>>=0;r>>>=0;if(t<=r){return\"\"}if(!e)e=\"utf8\";while(true){switch(e){case\"hex\":return hexSlice(this,r,t);case\"utf8\":case\"utf-8\":return utf8Slice(this,r,t);case\"ascii\":return asciiSlice(this,r,t);case\"latin1\":case\"binary\":return latin1Slice(this,r,t);case\"base64\":return base64Slice(this,r,t);case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return utf16leSlice(this,r,t);default:if(f)throw new TypeError(\"Unknown encoding: \"+e);e=(e+\"\").toLowerCase();f=true}}}Buffer.prototype._isBuffer=true;function swap(e,r,t){var f=e[r];e[r]=e[t];e[t]=f}Buffer.prototype.swap16=function swap16(){var e=this.length;if(e%2!==0){throw new RangeError(\"Buffer size must be a multiple of 16-bits\")}for(var r=0;r<e;r+=2){swap(this,r,r+1)}return this};Buffer.prototype.swap32=function swap32(){var e=this.length;if(e%4!==0){throw new RangeError(\"Buffer size must be a multiple of 32-bits\")}for(var r=0;r<e;r+=4){swap(this,r,r+3);swap(this,r+1,r+2)}return this};Buffer.prototype.swap64=function swap64(){var e=this.length;if(e%8!==0){throw new RangeError(\"Buffer size must be a multiple of 64-bits\")}for(var r=0;r<e;r+=8){swap(this,r,r+7);swap(this,r+1,r+6);swap(this,r+2,r+5);swap(this,r+3,r+4)}return this};Buffer.prototype.toString=function toString(){var e=this.length;if(e===0)return\"\";if(arguments.length===0)return utf8Slice(this,0,e);return slowToString.apply(this,arguments)};Buffer.prototype.toLocaleString=Buffer.prototype.toString;Buffer.prototype.equals=function equals(e){if(!Buffer.isBuffer(e))throw new TypeError(\"Argument must be a Buffer\");if(this===e)return true;return Buffer.compare(this,e)===0};Buffer.prototype.inspect=function inspect(){var e=\"\";var t=r.INSPECT_MAX_BYTES;e=this.toString(\"hex\",0,t).replace(/(.{2})/g,\"$1 \").trim();if(this.length>t)e+=\" ... \";return\"<Buffer \"+e+\">\"};if(i){Buffer.prototype[i]=Buffer.prototype.inspect}Buffer.prototype.compare=function compare(e,r,t,f,n){if(isInstance(e,Uint8Array)){e=Buffer.from(e,e.offset,e.byteLength)}if(!Buffer.isBuffer(e)){throw new TypeError('The \"target\" argument must be one of type Buffer or Uint8Array. '+\"Received type \"+typeof e)}if(r===undefined){r=0}if(t===undefined){t=e?e.length:0}if(f===undefined){f=0}if(n===undefined){n=this.length}if(r<0||t>e.length||f<0||n>this.length){throw new RangeError(\"out of range index\")}if(f>=n&&r>=t){return 0}if(f>=n){return-1}if(r>=t){return 1}r>>>=0;t>>>=0;f>>>=0;n>>>=0;if(this===e)return 0;var i=n-f;var o=t-r;var u=Math.min(i,o);var a=this.slice(f,n);var s=e.slice(r,t);for(var h=0;h<u;++h){if(a[h]!==s[h]){i=a[h];o=s[h];break}}if(i<o)return-1;if(o<i)return 1;return 0};function bidirectionalIndexOf(e,r,t,f,n){if(e.length===0)return-1;if(typeof t===\"string\"){f=t;t=0}else if(t>2147483647){t=2147483647}else if(t<-2147483648){t=-2147483648}t=+t;if(numberIsNaN(t)){t=n?0:e.length-1}if(t<0)t=e.length+t;if(t>=e.length){if(n)return-1;else t=e.length-1}else if(t<0){if(n)t=0;else return-1}if(typeof r===\"string\"){r=Buffer.from(r,f)}if(Buffer.isBuffer(r)){if(r.length===0){return-1}return arrayIndexOf(e,r,t,f,n)}else if(typeof r===\"number\"){r=r&255;if(typeof Uint8Array.prototype.indexOf===\"function\"){if(n){return Uint8Array.prototype.indexOf.call(e,r,t)}else{return Uint8Array.prototype.lastIndexOf.call(e,r,t)}}return arrayIndexOf(e,[r],t,f,n)}throw new TypeError(\"val must be string, number or Buffer\")}function arrayIndexOf(e,r,t,f,n){var i=1;var o=e.length;var u=r.length;if(f!==undefined){f=String(f).toLowerCase();if(f===\"ucs2\"||f===\"ucs-2\"||f===\"utf16le\"||f===\"utf-16le\"){if(e.length<2||r.length<2){return-1}i=2;o/=2;u/=2;t/=2}}function read(e,r){if(i===1){return e[r]}else{return e.readUInt16BE(r*i)}}var a;if(n){var s=-1;for(a=t;a<o;a++){if(read(e,a)===read(r,s===-1?0:a-s)){if(s===-1)s=a;if(a-s+1===u)return s*i}else{if(s!==-1)a-=a-s;s=-1}}}else{if(t+u>o)t=o-u;for(a=t;a>=0;a--){var h=true;for(var c=0;c<u;c++){if(read(e,a+c)!==read(r,c)){h=false;break}}if(h)return a}}return-1}Buffer.prototype.includes=function includes(e,r,t){return this.indexOf(e,r,t)!==-1};Buffer.prototype.indexOf=function indexOf(e,r,t){return bidirectionalIndexOf(this,e,r,t,true)};Buffer.prototype.lastIndexOf=function lastIndexOf(e,r,t){return bidirectionalIndexOf(this,e,r,t,false)};function hexWrite(e,r,t,f){t=Number(t)||0;var n=e.length-t;if(!f){f=n}else{f=Number(f);if(f>n){f=n}}var i=r.length;if(f>i/2){f=i/2}for(var o=0;o<f;++o){var u=parseInt(r.substr(o*2,2),16);if(numberIsNaN(u))return o;e[t+o]=u}return o}function utf8Write(e,r,t,f){return blitBuffer(utf8ToBytes(r,e.length-t),e,t,f)}function asciiWrite(e,r,t,f){return blitBuffer(asciiToBytes(r),e,t,f)}function latin1Write(e,r,t,f){return asciiWrite(e,r,t,f)}function base64Write(e,r,t,f){return blitBuffer(base64ToBytes(r),e,t,f)}function ucs2Write(e,r,t,f){return blitBuffer(utf16leToBytes(r,e.length-t),e,t,f)}Buffer.prototype.write=function write(e,r,t,f){if(r===undefined){f=\"utf8\";t=this.length;r=0}else if(t===undefined&&typeof r===\"string\"){f=r;t=this.length;r=0}else if(isFinite(r)){r=r>>>0;if(isFinite(t)){t=t>>>0;if(f===undefined)f=\"utf8\"}else{f=t;t=undefined}}else{throw new Error(\"Buffer.write(string, encoding, offset[, length]) is no longer supported\")}var n=this.length-r;if(t===undefined||t>n)t=n;if(e.length>0&&(t<0||r<0)||r>this.length){throw new RangeError(\"Attempt to write outside buffer bounds\")}if(!f)f=\"utf8\";var i=false;for(;;){switch(f){case\"hex\":return hexWrite(this,e,r,t);case\"utf8\":case\"utf-8\":return utf8Write(this,e,r,t);case\"ascii\":return asciiWrite(this,e,r,t);case\"latin1\":case\"binary\":return latin1Write(this,e,r,t);case\"base64\":return base64Write(this,e,r,t);case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return ucs2Write(this,e,r,t);default:if(i)throw new TypeError(\"Unknown encoding: \"+f);f=(\"\"+f).toLowerCase();i=true}}};Buffer.prototype.toJSON=function toJSON(){return{type:\"Buffer\",data:Array.prototype.slice.call(this._arr||this,0)}};function base64Slice(e,r,t){if(r===0&&t===e.length){return f.fromByteArray(e)}else{return f.fromByteArray(e.slice(r,t))}}function utf8Slice(e,r,t){t=Math.min(e.length,t);var f=[];var n=r;while(n<t){var i=e[n];var o=null;var u=i>239?4:i>223?3:i>191?2:1;if(n+u<=t){var a,s,h,c;switch(u){case 1:if(i<128){o=i}break;case 2:a=e[n+1];if((a&192)===128){c=(i&31)<<6|a&63;if(c>127){o=c}}break;case 3:a=e[n+1];s=e[n+2];if((a&192)===128&&(s&192)===128){c=(i&15)<<12|(a&63)<<6|s&63;if(c>2047&&(c<55296||c>57343)){o=c}}break;case 4:a=e[n+1];s=e[n+2];h=e[n+3];if((a&192)===128&&(s&192)===128&&(h&192)===128){c=(i&15)<<18|(a&63)<<12|(s&63)<<6|h&63;if(c>65535&&c<1114112){o=c}}}}if(o===null){o=65533;u=1}else if(o>65535){o-=65536;f.push(o>>>10&1023|55296);o=56320|o&1023}f.push(o);n+=u}return decodeCodePointsArray(f)}var u=4096;function decodeCodePointsArray(e){var r=e.length;if(r<=u){return String.fromCharCode.apply(String,e)}var t=\"\";var f=0;while(f<r){t+=String.fromCharCode.apply(String,e.slice(f,f+=u))}return t}function asciiSlice(e,r,t){var f=\"\";t=Math.min(e.length,t);for(var n=r;n<t;++n){f+=String.fromCharCode(e[n]&127)}return f}function latin1Slice(e,r,t){var f=\"\";t=Math.min(e.length,t);for(var n=r;n<t;++n){f+=String.fromCharCode(e[n])}return f}function hexSlice(e,r,t){var f=e.length;if(!r||r<0)r=0;if(!t||t<0||t>f)t=f;var n=\"\";for(var i=r;i<t;++i){n+=s[e[i]]}return n}function utf16leSlice(e,r,t){var f=e.slice(r,t);var n=\"\";for(var i=0;i<f.length;i+=2){n+=String.fromCharCode(f[i]+f[i+1]*256)}return n}Buffer.prototype.slice=function slice(e,r){var t=this.length;e=~~e;r=r===undefined?t:~~r;if(e<0){e+=t;if(e<0)e=0}else if(e>t){e=t}if(r<0){r+=t;if(r<0)r=0}else if(r>t){r=t}if(r<e)r=e;var f=this.subarray(e,r);Object.setPrototypeOf(f,Buffer.prototype);return f};function checkOffset(e,r,t){if(e%1!==0||e<0)throw new RangeError(\"offset is not uint\");if(e+r>t)throw new RangeError(\"Trying to access beyond buffer length\")}Buffer.prototype.readUIntLE=function readUIntLE(e,r,t){e=e>>>0;r=r>>>0;if(!t)checkOffset(e,r,this.length);var f=this[e];var n=1;var i=0;while(++i<r&&(n*=256)){f+=this[e+i]*n}return f};Buffer.prototype.readUIntBE=function readUIntBE(e,r,t){e=e>>>0;r=r>>>0;if(!t){checkOffset(e,r,this.length)}var f=this[e+--r];var n=1;while(r>0&&(n*=256)){f+=this[e+--r]*n}return f};Buffer.prototype.readUInt8=function readUInt8(e,r){e=e>>>0;if(!r)checkOffset(e,1,this.length);return this[e]};Buffer.prototype.readUInt16LE=function readUInt16LE(e,r){e=e>>>0;if(!r)checkOffset(e,2,this.length);return this[e]|this[e+1]<<8};Buffer.prototype.readUInt16BE=function readUInt16BE(e,r){e=e>>>0;if(!r)checkOffset(e,2,this.length);return this[e]<<8|this[e+1]};Buffer.prototype.readUInt32LE=function readUInt32LE(e,r){e=e>>>0;if(!r)checkOffset(e,4,this.length);return(this[e]|this[e+1]<<8|this[e+2]<<16)+this[e+3]*16777216};Buffer.prototype.readUInt32BE=function readUInt32BE(e,r){e=e>>>0;if(!r)checkOffset(e,4,this.length);return this[e]*16777216+(this[e+1]<<16|this[e+2]<<8|this[e+3])};Buffer.prototype.readIntLE=function readIntLE(e,r,t){e=e>>>0;r=r>>>0;if(!t)checkOffset(e,r,this.length);var f=this[e];var n=1;var i=0;while(++i<r&&(n*=256)){f+=this[e+i]*n}n*=128;if(f>=n)f-=Math.pow(2,8*r);return f};Buffer.prototype.readIntBE=function readIntBE(e,r,t){e=e>>>0;r=r>>>0;if(!t)checkOffset(e,r,this.length);var f=r;var n=1;var i=this[e+--f];while(f>0&&(n*=256)){i+=this[e+--f]*n}n*=128;if(i>=n)i-=Math.pow(2,8*r);return i};Buffer.prototype.readInt8=function readInt8(e,r){e=e>>>0;if(!r)checkOffset(e,1,this.length);if(!(this[e]&128))return this[e];return(255-this[e]+1)*-1};Buffer.prototype.readInt16LE=function readInt16LE(e,r){e=e>>>0;if(!r)checkOffset(e,2,this.length);var t=this[e]|this[e+1]<<8;return t&32768?t|4294901760:t};Buffer.prototype.readInt16BE=function readInt16BE(e,r){e=e>>>0;if(!r)checkOffset(e,2,this.length);var t=this[e+1]|this[e]<<8;return t&32768?t|4294901760:t};Buffer.prototype.readInt32LE=function readInt32LE(e,r){e=e>>>0;if(!r)checkOffset(e,4,this.length);return this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24};Buffer.prototype.readInt32BE=function readInt32BE(e,r){e=e>>>0;if(!r)checkOffset(e,4,this.length);return this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]};Buffer.prototype.readFloatLE=function readFloatLE(e,r){e=e>>>0;if(!r)checkOffset(e,4,this.length);return n.read(this,e,true,23,4)};Buffer.prototype.readFloatBE=function readFloatBE(e,r){e=e>>>0;if(!r)checkOffset(e,4,this.length);return n.read(this,e,false,23,4)};Buffer.prototype.readDoubleLE=function readDoubleLE(e,r){e=e>>>0;if(!r)checkOffset(e,8,this.length);return n.read(this,e,true,52,8)};Buffer.prototype.readDoubleBE=function readDoubleBE(e,r){e=e>>>0;if(!r)checkOffset(e,8,this.length);return n.read(this,e,false,52,8)};function checkInt(e,r,t,f,n,i){if(!Buffer.isBuffer(e))throw new TypeError('\"buffer\" argument must be a Buffer instance');if(r>n||r<i)throw new RangeError('\"value\" argument is out of bounds');if(t+f>e.length)throw new RangeError(\"Index out of range\")}Buffer.prototype.writeUIntLE=function writeUIntLE(e,r,t,f){e=+e;r=r>>>0;t=t>>>0;if(!f){var n=Math.pow(2,8*t)-1;checkInt(this,e,r,t,n,0)}var i=1;var o=0;this[r]=e&255;while(++o<t&&(i*=256)){this[r+o]=e/i&255}return r+t};Buffer.prototype.writeUIntBE=function writeUIntBE(e,r,t,f){e=+e;r=r>>>0;t=t>>>0;if(!f){var n=Math.pow(2,8*t)-1;checkInt(this,e,r,t,n,0)}var i=t-1;var o=1;this[r+i]=e&255;while(--i>=0&&(o*=256)){this[r+i]=e/o&255}return r+t};Buffer.prototype.writeUInt8=function writeUInt8(e,r,t){e=+e;r=r>>>0;if(!t)checkInt(this,e,r,1,255,0);this[r]=e&255;return r+1};Buffer.prototype.writeUInt16LE=function writeUInt16LE(e,r,t){e=+e;r=r>>>0;if(!t)checkInt(this,e,r,2,65535,0);this[r]=e&255;this[r+1]=e>>>8;return r+2};Buffer.prototype.writeUInt16BE=function writeUInt16BE(e,r,t){e=+e;r=r>>>0;if(!t)checkInt(this,e,r,2,65535,0);this[r]=e>>>8;this[r+1]=e&255;return r+2};Buffer.prototype.writeUInt32LE=function writeUInt32LE(e,r,t){e=+e;r=r>>>0;if(!t)checkInt(this,e,r,4,4294967295,0);this[r+3]=e>>>24;this[r+2]=e>>>16;this[r+1]=e>>>8;this[r]=e&255;return r+4};Buffer.prototype.writeUInt32BE=function writeUInt32BE(e,r,t){e=+e;r=r>>>0;if(!t)checkInt(this,e,r,4,4294967295,0);this[r]=e>>>24;this[r+1]=e>>>16;this[r+2]=e>>>8;this[r+3]=e&255;return r+4};Buffer.prototype.writeIntLE=function writeIntLE(e,r,t,f){e=+e;r=r>>>0;if(!f){var n=Math.pow(2,8*t-1);checkInt(this,e,r,t,n-1,-n)}var i=0;var o=1;var u=0;this[r]=e&255;while(++i<t&&(o*=256)){if(e<0&&u===0&&this[r+i-1]!==0){u=1}this[r+i]=(e/o>>0)-u&255}return r+t};Buffer.prototype.writeIntBE=function writeIntBE(e,r,t,f){e=+e;r=r>>>0;if(!f){var n=Math.pow(2,8*t-1);checkInt(this,e,r,t,n-1,-n)}var i=t-1;var o=1;var u=0;this[r+i]=e&255;while(--i>=0&&(o*=256)){if(e<0&&u===0&&this[r+i+1]!==0){u=1}this[r+i]=(e/o>>0)-u&255}return r+t};Buffer.prototype.writeInt8=function writeInt8(e,r,t){e=+e;r=r>>>0;if(!t)checkInt(this,e,r,1,127,-128);if(e<0)e=255+e+1;this[r]=e&255;return r+1};Buffer.prototype.writeInt16LE=function writeInt16LE(e,r,t){e=+e;r=r>>>0;if(!t)checkInt(this,e,r,2,32767,-32768);this[r]=e&255;this[r+1]=e>>>8;return r+2};Buffer.prototype.writeInt16BE=function writeInt16BE(e,r,t){e=+e;r=r>>>0;if(!t)checkInt(this,e,r,2,32767,-32768);this[r]=e>>>8;this[r+1]=e&255;return r+2};Buffer.prototype.writeInt32LE=function writeInt32LE(e,r,t){e=+e;r=r>>>0;if(!t)checkInt(this,e,r,4,2147483647,-2147483648);this[r]=e&255;this[r+1]=e>>>8;this[r+2]=e>>>16;this[r+3]=e>>>24;return r+4};Buffer.prototype.writeInt32BE=function writeInt32BE(e,r,t){e=+e;r=r>>>0;if(!t)checkInt(this,e,r,4,2147483647,-2147483648);if(e<0)e=4294967295+e+1;this[r]=e>>>24;this[r+1]=e>>>16;this[r+2]=e>>>8;this[r+3]=e&255;return r+4};function checkIEEE754(e,r,t,f,n,i){if(t+f>e.length)throw new RangeError(\"Index out of range\");if(t<0)throw new RangeError(\"Index out of range\")}function writeFloat(e,r,t,f,i){r=+r;t=t>>>0;if(!i){checkIEEE754(e,r,t,4,34028234663852886e22,-34028234663852886e22)}n.write(e,r,t,f,23,4);return t+4}Buffer.prototype.writeFloatLE=function writeFloatLE(e,r,t){return writeFloat(this,e,r,true,t)};Buffer.prototype.writeFloatBE=function writeFloatBE(e,r,t){return writeFloat(this,e,r,false,t)};function writeDouble(e,r,t,f,i){r=+r;t=t>>>0;if(!i){checkIEEE754(e,r,t,8,17976931348623157e292,-17976931348623157e292)}n.write(e,r,t,f,52,8);return t+8}Buffer.prototype.writeDoubleLE=function writeDoubleLE(e,r,t){return writeDouble(this,e,r,true,t)};Buffer.prototype.writeDoubleBE=function writeDoubleBE(e,r,t){return writeDouble(this,e,r,false,t)};Buffer.prototype.copy=function copy(e,r,t,f){if(!Buffer.isBuffer(e))throw new TypeError(\"argument should be a Buffer\");if(!t)t=0;if(!f&&f!==0)f=this.length;if(r>=e.length)r=e.length;if(!r)r=0;if(f>0&&f<t)f=t;if(f===t)return 0;if(e.length===0||this.length===0)return 0;if(r<0){throw new RangeError(\"targetStart out of bounds\")}if(t<0||t>=this.length)throw new RangeError(\"Index out of range\");if(f<0)throw new RangeError(\"sourceEnd out of bounds\");if(f>this.length)f=this.length;if(e.length-r<f-t){f=e.length-r+t}var n=f-t;if(this===e&&typeof Uint8Array.prototype.copyWithin===\"function\"){this.copyWithin(r,t,f)}else if(this===e&&t<r&&r<f){for(var i=n-1;i>=0;--i){e[i+r]=this[i+t]}}else{Uint8Array.prototype.set.call(e,this.subarray(t,f),r)}return n};Buffer.prototype.fill=function fill(e,r,t,f){if(typeof e===\"string\"){if(typeof r===\"string\"){f=r;r=0;t=this.length}else if(typeof t===\"string\"){f=t;t=this.length}if(f!==undefined&&typeof f!==\"string\"){throw new TypeError(\"encoding must be a string\")}if(typeof f===\"string\"&&!Buffer.isEncoding(f)){throw new TypeError(\"Unknown encoding: \"+f)}if(e.length===1){var n=e.charCodeAt(0);if(f===\"utf8\"&&n<128||f===\"latin1\"){e=n}}}else if(typeof e===\"number\"){e=e&255}else if(typeof e===\"boolean\"){e=Number(e)}if(r<0||this.length<r||this.length<t){throw new RangeError(\"Out of range index\")}if(t<=r){return this}r=r>>>0;t=t===undefined?this.length:t>>>0;if(!e)e=0;var i;if(typeof e===\"number\"){for(i=r;i<t;++i){this[i]=e}}else{var o=Buffer.isBuffer(e)?e:Buffer.from(e,f);var u=o.length;if(u===0){throw new TypeError('The value \"'+e+'\" is invalid for argument \"value\"')}for(i=0;i<t-r;++i){this[i+r]=o[i%u]}}return this};var a=/[^+/0-9A-Za-z-_]/g;function base64clean(e){e=e.split(\"=\")[0];e=e.trim().replace(a,\"\");if(e.length<2)return\"\";while(e.length%4!==0){e=e+\"=\"}return e}function utf8ToBytes(e,r){r=r||Infinity;var t;var f=e.length;var n=null;var i=[];for(var o=0;o<f;++o){t=e.charCodeAt(o);if(t>55295&&t<57344){if(!n){if(t>56319){if((r-=3)>-1)i.push(239,191,189);continue}else if(o+1===f){if((r-=3)>-1)i.push(239,191,189);continue}n=t;continue}if(t<56320){if((r-=3)>-1)i.push(239,191,189);n=t;continue}t=(n-55296<<10|t-56320)+65536}else if(n){if((r-=3)>-1)i.push(239,191,189)}n=null;if(t<128){if((r-=1)<0)break;i.push(t)}else if(t<2048){if((r-=2)<0)break;i.push(t>>6|192,t&63|128)}else if(t<65536){if((r-=3)<0)break;i.push(t>>12|224,t>>6&63|128,t&63|128)}else if(t<1114112){if((r-=4)<0)break;i.push(t>>18|240,t>>12&63|128,t>>6&63|128,t&63|128)}else{throw new Error(\"Invalid code point\")}}return i}function asciiToBytes(e){var r=[];for(var t=0;t<e.length;++t){r.push(e.charCodeAt(t)&255)}return r}function utf16leToBytes(e,r){var t,f,n;var i=[];for(var o=0;o<e.length;++o){if((r-=2)<0)break;t=e.charCodeAt(o);f=t>>8;n=t%256;i.push(n);i.push(f)}return i}function base64ToBytes(e){return f.toByteArray(base64clean(e))}function blitBuffer(e,r,t,f){for(var n=0;n<f;++n){if(n+t>=r.length||n>=e.length)break;r[n+t]=e[n]}return n}function isInstance(e,r){return e instanceof r||e!=null&&e.constructor!=null&&e.constructor.name!=null&&e.constructor.name===r.name}function numberIsNaN(e){return e!==e}var s=function(){var e=\"0123456789abcdef\";var r=new Array(256);for(var t=0;t<16;++t){var f=t*16;for(var n=0;n<16;++n){r[f+n]=e[t]+e[n]}}return r}()},783:function(e,r){\n/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nr.read=function(e,r,t,f,n){var i,o;var u=n*8-f-1;var a=(1<<u)-1;var s=a>>1;var h=-7;var c=t?n-1:0;var l=t?-1:1;var p=e[r+c];c+=l;i=p&(1<<-h)-1;p>>=-h;h+=u;for(;h>0;i=i*256+e[r+c],c+=l,h-=8){}o=i&(1<<-h)-1;i>>=-h;h+=f;for(;h>0;o=o*256+e[r+c],c+=l,h-=8){}if(i===0){i=1-s}else if(i===a){return o?NaN:(p?-1:1)*Infinity}else{o=o+Math.pow(2,f);i=i-s}return(p?-1:1)*o*Math.pow(2,i-f)};r.write=function(e,r,t,f,n,i){var o,u,a;var s=i*8-n-1;var h=(1<<s)-1;var c=h>>1;var l=n===23?Math.pow(2,-24)-Math.pow(2,-77):0;var p=f?0:i-1;var y=f?1:-1;var g=r<0||r===0&&1/r<0?1:0;r=Math.abs(r);if(isNaN(r)||r===Infinity){u=isNaN(r)?1:0;o=h}else{o=Math.floor(Math.log(r)/Math.LN2);if(r*(a=Math.pow(2,-o))<1){o--;a*=2}if(o+c>=1){r+=l/a}else{r+=l*Math.pow(2,1-c)}if(r*a>=2){o++;a/=2}if(o+c>=h){u=0;o=h}else if(o+c>=1){u=(r*a-1)*Math.pow(2,n);o=o+c}else{u=r*Math.pow(2,c-1)*Math.pow(2,n);o=0}}for(;n>=8;e[t+p]=u&255,p+=y,u/=256,n-=8){}o=o<<n|u;s+=n;for(;s>0;e[t+p]=o&255,p+=y,o/=256,s-=8){}e[t+p-y]|=g*128}}};var r={};function __nccwpck_require__(t){var f=r[t];if(f!==undefined){return f.exports}var n=r[t]={exports:{}};var i=true;try{e[t](n,n.exports,__nccwpck_require__);i=false}finally{if(i)delete r[t]}return n.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var t=__nccwpck_require__(72);module.exports=t})();","(function(){var e={229:function(e){var t=e.exports={};var r;var n;function defaultSetTimout(){throw new Error(\"setTimeout has not been defined\")}function defaultClearTimeout(){throw new Error(\"clearTimeout has not been defined\")}(function(){try{if(typeof setTimeout===\"function\"){r=setTimeout}else{r=defaultSetTimout}}catch(e){r=defaultSetTimout}try{if(typeof clearTimeout===\"function\"){n=clearTimeout}else{n=defaultClearTimeout}}catch(e){n=defaultClearTimeout}})();function runTimeout(e){if(r===setTimeout){return setTimeout(e,0)}if((r===defaultSetTimout||!r)&&setTimeout){r=setTimeout;return setTimeout(e,0)}try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}function runClearTimeout(e){if(n===clearTimeout){return clearTimeout(e)}if((n===defaultClearTimeout||!n)&&clearTimeout){n=clearTimeout;return clearTimeout(e)}try{return n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}var i=[];var o=false;var u;var a=-1;function cleanUpNextTick(){if(!o||!u){return}o=false;if(u.length){i=u.concat(i)}else{a=-1}if(i.length){drainQueue()}}function drainQueue(){if(o){return}var e=runTimeout(cleanUpNextTick);o=true;var t=i.length;while(t){u=i;i=[];while(++a<t){if(u){u[a].run()}}a=-1;t=i.length}u=null;o=false;runClearTimeout(e)}t.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1){for(var r=1;r<arguments.length;r++){t[r-1]=arguments[r]}}i.push(new Item(e,t));if(i.length===1&&!o){runTimeout(drainQueue)}};function Item(e,t){this.fun=e;this.array=t}Item.prototype.run=function(){this.fun.apply(null,this.array)};t.title=\"browser\";t.browser=true;t.env={};t.argv=[];t.version=\"\";t.versions={};function noop(){}t.on=noop;t.addListener=noop;t.once=noop;t.off=noop;t.removeListener=noop;t.removeAllListeners=noop;t.emit=noop;t.prependListener=noop;t.prependOnceListener=noop;t.listeners=function(e){return[]};t.binding=function(e){throw new Error(\"process.binding is not supported\")};t.cwd=function(){return\"/\"};t.chdir=function(e){throw new Error(\"process.chdir is not supported\")};t.umask=function(){return 0}}};var t={};function __nccwpck_require__(r){var n=t[r];if(n!==undefined){return n.exports}var i=t[r]={exports:{}};var o=true;try{e[r](i,i.exports,__nccwpck_require__);o=false}finally{if(o)delete t[r]}return i.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var r=__nccwpck_require__(229);module.exports=r})();",null,null,null,null,"'use strict'\n\n/* eslint-env browser */\n\nvar el\n\nvar semicolon = 59 //  ';'\n\nmodule.exports = decodeEntity\n\nfunction decodeEntity(characters) {\n  var entity = '&' + characters + ';'\n  var char\n\n  el = el || document.createElement('i')\n  el.innerHTML = entity\n  char = el.textContent\n\n  // Some entities do not require the closing semicolon (`&not` - for instance),\n  // which leads to situations where parsing the assumed entity of &notit; will\n  // result in the string `¬it;`.  When we encounter a trailing semicolon after\n  // parsing and the entity to decode was not a semicolon (`&semi;`), we can\n  // assume that the matching was incomplete\n  if (char.charCodeAt(char.length - 1) === semicolon && characters !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the entity was not valid\n  return char === entity ? false : char\n}\n","'use strict'\n\nvar legacy = require('character-entities-legacy')\nvar invalid = require('character-reference-invalid')\nvar decimal = require('is-decimal')\nvar hexadecimal = require('is-hexadecimal')\nvar alphanumerical = require('is-alphanumerical')\nvar decodeEntity = require('./decode-entity')\n\nmodule.exports = parseEntities\n\nvar own = {}.hasOwnProperty\nvar fromCharCode = String.fromCharCode\nvar noop = Function.prototype\n\n// Default settings.\nvar defaults = {\n  warning: null,\n  reference: null,\n  text: null,\n  warningContext: null,\n  referenceContext: null,\n  textContext: null,\n  position: {},\n  additional: null,\n  attribute: false,\n  nonTerminated: true\n}\n\n// Characters.\nvar tab = 9 // '\\t'\nvar lineFeed = 10 // '\\n'\nvar formFeed = 12 // '\\f'\nvar space = 32 // ' '\nvar ampersand = 38 // '&'\nvar semicolon = 59 // ';'\nvar lessThan = 60 // '<'\nvar equalsTo = 61 // '='\nvar numberSign = 35 // '#'\nvar uppercaseX = 88 // 'X'\nvar lowercaseX = 120 // 'x'\nvar replacementCharacter = 65533 // '�'\n\n// Reference types.\nvar name = 'named'\nvar hexa = 'hexadecimal'\nvar deci = 'decimal'\n\n// Map of bases.\nvar bases = {}\n\nbases[hexa] = 16\nbases[deci] = 10\n\n// Map of types to tests.\n// Each type of character reference accepts different characters.\n// This test is used to detect whether a reference has ended (as the semicolon\n// is not strictly needed).\nvar tests = {}\n\ntests[name] = alphanumerical\ntests[deci] = decimal\ntests[hexa] = hexadecimal\n\n// Warning types.\nvar namedNotTerminated = 1\nvar numericNotTerminated = 2\nvar namedEmpty = 3\nvar numericEmpty = 4\nvar namedUnknown = 5\nvar numericDisallowed = 6\nvar numericProhibited = 7\n\n// Warning messages.\nvar messages = {}\n\nmessages[namedNotTerminated] =\n  'Named character references must be terminated by a semicolon'\nmessages[numericNotTerminated] =\n  'Numeric character references must be terminated by a semicolon'\nmessages[namedEmpty] = 'Named character references cannot be empty'\nmessages[numericEmpty] = 'Numeric character references cannot be empty'\nmessages[namedUnknown] = 'Named character references must be known'\nmessages[numericDisallowed] =\n  'Numeric character references cannot be disallowed'\nmessages[numericProhibited] =\n  'Numeric character references cannot be outside the permissible Unicode range'\n\n// Wrap to ensure clean parameters are given to `parse`.\nfunction parseEntities(value, options) {\n  var settings = {}\n  var option\n  var key\n\n  if (!options) {\n    options = {}\n  }\n\n  for (key in defaults) {\n    option = options[key]\n    settings[key] =\n      option === null || option === undefined ? defaults[key] : option\n  }\n\n  if (settings.position.indent || settings.position.start) {\n    settings.indent = settings.position.indent || []\n    settings.position = settings.position.start\n  }\n\n  return parse(value, settings)\n}\n\n// Parse entities.\n// eslint-disable-next-line complexity\nfunction parse(value, settings) {\n  var additional = settings.additional\n  var nonTerminated = settings.nonTerminated\n  var handleText = settings.text\n  var handleReference = settings.reference\n  var handleWarning = settings.warning\n  var textContext = settings.textContext\n  var referenceContext = settings.referenceContext\n  var warningContext = settings.warningContext\n  var pos = settings.position\n  var indent = settings.indent || []\n  var length = value.length\n  var index = 0\n  var lines = -1\n  var column = pos.column || 1\n  var line = pos.line || 1\n  var queue = ''\n  var result = []\n  var entityCharacters\n  var namedEntity\n  var terminated\n  var characters\n  var character\n  var reference\n  var following\n  var warning\n  var reason\n  var output\n  var entity\n  var begin\n  var start\n  var type\n  var test\n  var prev\n  var next\n  var diff\n  var end\n\n  if (typeof additional === 'string') {\n    additional = additional.charCodeAt(0)\n  }\n\n  // Cache the current point.\n  prev = now()\n\n  // Wrap `handleWarning`.\n  warning = handleWarning ? parseError : noop\n\n  // Ensure the algorithm walks over the first character and the end\n  // (inclusive).\n  index--\n  length++\n\n  while (++index < length) {\n    // If the previous character was a newline.\n    if (character === lineFeed) {\n      column = indent[lines] || 1\n    }\n\n    character = value.charCodeAt(index)\n\n    if (character === ampersand) {\n      following = value.charCodeAt(index + 1)\n\n      // The behaviour depends on the identity of the next character.\n      if (\n        following === tab ||\n        following === lineFeed ||\n        following === formFeed ||\n        following === space ||\n        following === ampersand ||\n        following === lessThan ||\n        following !== following ||\n        (additional && following === additional)\n      ) {\n        // Not a character reference.\n        // No characters are consumed, and nothing is returned.\n        // This is not an error, either.\n        queue += fromCharCode(character)\n        column++\n\n        continue\n      }\n\n      start = index + 1\n      begin = start\n      end = start\n\n      if (following === numberSign) {\n        // Numerical entity.\n        end = ++begin\n\n        // The behaviour further depends on the next character.\n        following = value.charCodeAt(end)\n\n        if (following === uppercaseX || following === lowercaseX) {\n          // ASCII hex digits.\n          type = hexa\n          end = ++begin\n        } else {\n          // ASCII digits.\n          type = deci\n        }\n      } else {\n        // Named entity.\n        type = name\n      }\n\n      entityCharacters = ''\n      entity = ''\n      characters = ''\n      test = tests[type]\n      end--\n\n      while (++end < length) {\n        following = value.charCodeAt(end)\n\n        if (!test(following)) {\n          break\n        }\n\n        characters += fromCharCode(following)\n\n        // Check if we can match a legacy named reference.\n        // If so, we cache that as the last viable named reference.\n        // This ensures we do not need to walk backwards later.\n        if (type === name && own.call(legacy, characters)) {\n          entityCharacters = characters\n          entity = legacy[characters]\n        }\n      }\n\n      terminated = value.charCodeAt(end) === semicolon\n\n      if (terminated) {\n        end++\n\n        namedEntity = type === name ? decodeEntity(characters) : false\n\n        if (namedEntity) {\n          entityCharacters = characters\n          entity = namedEntity\n        }\n      }\n\n      diff = 1 + end - start\n\n      if (!terminated && !nonTerminated) {\n        // Empty.\n      } else if (!characters) {\n        // An empty (possible) entity is valid, unless it’s numeric (thus an\n        // ampersand followed by an octothorp).\n        if (type !== name) {\n          warning(numericEmpty, diff)\n        }\n      } else if (type === name) {\n        // An ampersand followed by anything unknown, and not terminated, is\n        // invalid.\n        if (terminated && !entity) {\n          warning(namedUnknown, 1)\n        } else {\n          // If theres something after an entity name which is not known, cap\n          // the reference.\n          if (entityCharacters !== characters) {\n            end = begin + entityCharacters.length\n            diff = 1 + end - begin\n            terminated = false\n          }\n\n          // If the reference is not terminated, warn.\n          if (!terminated) {\n            reason = entityCharacters ? namedNotTerminated : namedEmpty\n\n            if (settings.attribute) {\n              following = value.charCodeAt(end)\n\n              if (following === equalsTo) {\n                warning(reason, diff)\n                entity = null\n              } else if (alphanumerical(following)) {\n                entity = null\n              } else {\n                warning(reason, diff)\n              }\n            } else {\n              warning(reason, diff)\n            }\n          }\n        }\n\n        reference = entity\n      } else {\n        if (!terminated) {\n          // All non-terminated numeric entities are not rendered, and trigger a\n          // warning.\n          warning(numericNotTerminated, diff)\n        }\n\n        // When terminated and number, parse as either hexadecimal or decimal.\n        reference = parseInt(characters, bases[type])\n\n        // Trigger a warning when the parsed number is prohibited, and replace\n        // with replacement character.\n        if (prohibited(reference)) {\n          warning(numericProhibited, diff)\n          reference = fromCharCode(replacementCharacter)\n        } else if (reference in invalid) {\n          // Trigger a warning when the parsed number is disallowed, and replace\n          // by an alternative.\n          warning(numericDisallowed, diff)\n          reference = invalid[reference]\n        } else {\n          // Parse the number.\n          output = ''\n\n          // Trigger a warning when the parsed number should not be used.\n          if (disallowed(reference)) {\n            warning(numericDisallowed, diff)\n          }\n\n          // Stringify the number.\n          if (reference > 0xffff) {\n            reference -= 0x10000\n            output += fromCharCode((reference >>> (10 & 0x3ff)) | 0xd800)\n            reference = 0xdc00 | (reference & 0x3ff)\n          }\n\n          reference = output + fromCharCode(reference)\n        }\n      }\n\n      // Found it!\n      // First eat the queued characters as normal text, then eat an entity.\n      if (reference) {\n        flush()\n\n        prev = now()\n        index = end - 1\n        column += end - start + 1\n        result.push(reference)\n        next = now()\n        next.offset++\n\n        if (handleReference) {\n          handleReference.call(\n            referenceContext,\n            reference,\n            {start: prev, end: next},\n            value.slice(start - 1, end)\n          )\n        }\n\n        prev = next\n      } else {\n        // If we could not find a reference, queue the checked characters (as\n        // normal characters), and move the pointer to their end.\n        // This is possible because we can be certain neither newlines nor\n        // ampersands are included.\n        characters = value.slice(start - 1, end)\n        queue += characters\n        column += characters.length\n        index = end - 1\n      }\n    } else {\n      // Handle anything other than an ampersand, including newlines and EOF.\n      if (\n        character === 10 // Line feed\n      ) {\n        line++\n        lines++\n        column = 0\n      }\n\n      if (character === character) {\n        queue += fromCharCode(character)\n        column++\n      } else {\n        flush()\n      }\n    }\n  }\n\n  // Return the reduced nodes.\n  return result.join('')\n\n  // Get current position.\n  function now() {\n    return {\n      line: line,\n      column: column,\n      offset: index + (pos.offset || 0)\n    }\n  }\n\n  // “Throw” a parse-error: a warning.\n  function parseError(code, offset) {\n    var position = now()\n\n    position.column += offset\n    position.offset += offset\n\n    handleWarning.call(warningContext, messages[code], position, code)\n  }\n\n  // Flush `queue` (normal text).\n  // Macro invoked before each entity and at the end of `value`.\n  // Does nothing when `queue` is empty.\n  function flush() {\n    if (queue) {\n      result.push(queue)\n\n      if (handleText) {\n        handleText.call(textContext, queue, {start: prev, end: now()})\n      }\n\n      queue = ''\n    }\n  }\n}\n\n// Check if `character` is outside the permissible unicode range.\nfunction prohibited(code) {\n  return (code >= 0xd800 && code <= 0xdfff) || code > 0x10ffff\n}\n\n// Check if `character` is disallowed.\nfunction disallowed(code) {\n  return (\n    (code >= 0x0001 && code <= 0x0008) ||\n    code === 0x000b ||\n    (code >= 0x000d && code <= 0x001f) ||\n    (code >= 0x007f && code <= 0x009f) ||\n    (code >= 0xfdd0 && code <= 0xfdef) ||\n    (code & 0xffff) === 0xffff ||\n    (code & 0xffff) === 0xfffe\n  )\n}\n","var x=String;\nvar create=function() {return {isColorSupported:false,reset:x,bold:x,dim:x,italic:x,underline:x,inverse:x,hidden:x,strikethrough:x,black:x,red:x,green:x,yellow:x,blue:x,magenta:x,cyan:x,white:x,gray:x,bgBlack:x,bgRed:x,bgGreen:x,bgYellow:x,bgBlue:x,bgMagenta:x,bgCyan:x,bgWhite:x}};\nmodule.exports=create();\nmodule.exports.createColors = create;\n","/// <reference lib=\"WebWorker\"/>\n\nvar _self = (typeof window !== 'undefined')\n\t? window   // if in browser\n\t: (\n\t\t(typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope)\n\t\t\t? self // if in worker\n\t\t\t: {}   // if in node js\n\t);\n\n/**\n * Prism: Lightweight, robust, elegant syntax highlighting\n *\n * @license MIT <https://opensource.org/licenses/MIT>\n * @author Lea Verou <https://lea.verou.me>\n * @namespace\n * @public\n */\nvar Prism = (function (_self) {\n\n\t// Private helper vars\n\tvar lang = /(?:^|\\s)lang(?:uage)?-([\\w-]+)(?=\\s|$)/i;\n\tvar uniqueId = 0;\n\n\t// The grammar object for plaintext\n\tvar plainTextGrammar = {};\n\n\n\tvar _ = {\n\t\t/**\n\t\t * By default, Prism will attempt to highlight all code elements (by calling {@link Prism.highlightAll}) on the\n\t\t * current page after the page finished loading. This might be a problem if e.g. you wanted to asynchronously load\n\t\t * additional languages or plugins yourself.\n\t\t *\n\t\t * By setting this value to `true`, Prism will not automatically highlight all code elements on the page.\n\t\t *\n\t\t * You obviously have to change this value before the automatic highlighting started. To do this, you can add an\n\t\t * empty Prism object into the global scope before loading the Prism script like this:\n\t\t *\n\t\t * ```js\n\t\t * window.Prism = window.Prism || {};\n\t\t * Prism.manual = true;\n\t\t * // add a new <script> to load Prism's script\n\t\t * ```\n\t\t *\n\t\t * @default false\n\t\t * @type {boolean}\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\tmanual: _self.Prism && _self.Prism.manual,\n\t\t/**\n\t\t * By default, if Prism is in a web worker, it assumes that it is in a worker it created itself, so it uses\n\t\t * `addEventListener` to communicate with its parent instance. However, if you're using Prism manually in your\n\t\t * own worker, you don't want it to do this.\n\t\t *\n\t\t * By setting this value to `true`, Prism will not add its own listeners to the worker.\n\t\t *\n\t\t * You obviously have to change this value before Prism executes. To do this, you can add an\n\t\t * empty Prism object into the global scope before loading the Prism script like this:\n\t\t *\n\t\t * ```js\n\t\t * window.Prism = window.Prism || {};\n\t\t * Prism.disableWorkerMessageHandler = true;\n\t\t * // Load Prism's script\n\t\t * ```\n\t\t *\n\t\t * @default false\n\t\t * @type {boolean}\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\tdisableWorkerMessageHandler: _self.Prism && _self.Prism.disableWorkerMessageHandler,\n\n\t\t/**\n\t\t * A namespace for utility methods.\n\t\t *\n\t\t * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may\n\t\t * change or disappear at any time.\n\t\t *\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t */\n\t\tutil: {\n\t\t\tencode: function encode(tokens) {\n\t\t\t\tif (tokens instanceof Token) {\n\t\t\t\t\treturn new Token(tokens.type, encode(tokens.content), tokens.alias);\n\t\t\t\t} else if (Array.isArray(tokens)) {\n\t\t\t\t\treturn tokens.map(encode);\n\t\t\t\t} else {\n\t\t\t\t\treturn tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\\u00a0/g, ' ');\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns the name of the type of the given value.\n\t\t\t *\n\t\t\t * @param {any} o\n\t\t\t * @returns {string}\n\t\t\t * @example\n\t\t\t * type(null)      === 'Null'\n\t\t\t * type(undefined) === 'Undefined'\n\t\t\t * type(123)       === 'Number'\n\t\t\t * type('foo')     === 'String'\n\t\t\t * type(true)      === 'Boolean'\n\t\t\t * type([1, 2])    === 'Array'\n\t\t\t * type({})        === 'Object'\n\t\t\t * type(String)    === 'Function'\n\t\t\t * type(/abc+/)    === 'RegExp'\n\t\t\t */\n\t\t\ttype: function (o) {\n\t\t\t\treturn Object.prototype.toString.call(o).slice(8, -1);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns a unique number for the given object. Later calls will still return the same number.\n\t\t\t *\n\t\t\t * @param {Object} obj\n\t\t\t * @returns {number}\n\t\t\t */\n\t\t\tobjId: function (obj) {\n\t\t\t\tif (!obj['__id']) {\n\t\t\t\t\tObject.defineProperty(obj, '__id', { value: ++uniqueId });\n\t\t\t\t}\n\t\t\t\treturn obj['__id'];\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Creates a deep clone of the given object.\n\t\t\t *\n\t\t\t * The main intended use of this function is to clone language definitions.\n\t\t\t *\n\t\t\t * @param {T} o\n\t\t\t * @param {Record<number, any>} [visited]\n\t\t\t * @returns {T}\n\t\t\t * @template T\n\t\t\t */\n\t\t\tclone: function deepClone(o, visited) {\n\t\t\t\tvisited = visited || {};\n\n\t\t\t\tvar clone; var id;\n\t\t\t\tswitch (_.util.type(o)) {\n\t\t\t\t\tcase 'Object':\n\t\t\t\t\t\tid = _.util.objId(o);\n\t\t\t\t\t\tif (visited[id]) {\n\t\t\t\t\t\t\treturn visited[id];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tclone = /** @type {Record<string, any>} */ ({});\n\t\t\t\t\t\tvisited[id] = clone;\n\n\t\t\t\t\t\tfor (var key in o) {\n\t\t\t\t\t\t\tif (o.hasOwnProperty(key)) {\n\t\t\t\t\t\t\t\tclone[key] = deepClone(o[key], visited);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn /** @type {any} */ (clone);\n\n\t\t\t\t\tcase 'Array':\n\t\t\t\t\t\tid = _.util.objId(o);\n\t\t\t\t\t\tif (visited[id]) {\n\t\t\t\t\t\t\treturn visited[id];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tclone = [];\n\t\t\t\t\t\tvisited[id] = clone;\n\n\t\t\t\t\t\t(/** @type {Array} */(/** @type {any} */(o))).forEach(function (v, i) {\n\t\t\t\t\t\t\tclone[i] = deepClone(v, visited);\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn /** @type {any} */ (clone);\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn o;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.\n\t\t\t *\n\t\t\t * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.\n\t\t\t *\n\t\t\t * @param {Element} element\n\t\t\t * @returns {string}\n\t\t\t */\n\t\t\tgetLanguage: function (element) {\n\t\t\t\twhile (element) {\n\t\t\t\t\tvar m = lang.exec(element.className);\n\t\t\t\t\tif (m) {\n\t\t\t\t\t\treturn m[1].toLowerCase();\n\t\t\t\t\t}\n\t\t\t\t\telement = element.parentElement;\n\t\t\t\t}\n\t\t\t\treturn 'none';\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Sets the Prism `language-xxxx` class of the given element.\n\t\t\t *\n\t\t\t * @param {Element} element\n\t\t\t * @param {string} language\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\tsetLanguage: function (element, language) {\n\t\t\t\t// remove all `language-xxxx` classes\n\t\t\t\t// (this might leave behind a leading space)\n\t\t\t\telement.className = element.className.replace(RegExp(lang, 'gi'), '');\n\n\t\t\t\t// add the new `language-xxxx` class\n\t\t\t\t// (using `classList` will automatically clean up spaces for us)\n\t\t\t\telement.classList.add('language-' + language);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns the script element that is currently executing.\n\t\t\t *\n\t\t\t * This does __not__ work for line script element.\n\t\t\t *\n\t\t\t * @returns {HTMLScriptElement | null}\n\t\t\t */\n\t\t\tcurrentScript: function () {\n\t\t\t\tif (typeof document === 'undefined') {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tif ('currentScript' in document && 1 < 2 /* hack to trip TS' flow analysis */) {\n\t\t\t\t\treturn /** @type {any} */ (document.currentScript);\n\t\t\t\t}\n\n\t\t\t\t// IE11 workaround\n\t\t\t\t// we'll get the src of the current script by parsing IE11's error stack trace\n\t\t\t\t// this will not work for inline scripts\n\n\t\t\t\ttry {\n\t\t\t\t\tthrow new Error();\n\t\t\t\t} catch (err) {\n\t\t\t\t\t// Get file src url from stack. Specifically works with the format of stack traces in IE.\n\t\t\t\t\t// A stack will look like this:\n\t\t\t\t\t//\n\t\t\t\t\t// Error\n\t\t\t\t\t//    at _.util.currentScript (http://localhost/components/prism-core.js:119:5)\n\t\t\t\t\t//    at Global code (http://localhost/components/prism-core.js:606:1)\n\n\t\t\t\t\tvar src = (/at [^(\\r\\n]*\\((.*):[^:]+:[^:]+\\)$/i.exec(err.stack) || [])[1];\n\t\t\t\t\tif (src) {\n\t\t\t\t\t\tvar scripts = document.getElementsByTagName('script');\n\t\t\t\t\t\tfor (var i in scripts) {\n\t\t\t\t\t\t\tif (scripts[i].src == src) {\n\t\t\t\t\t\t\t\treturn scripts[i];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns whether a given class is active for `element`.\n\t\t\t *\n\t\t\t * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated\n\t\t\t * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the\n\t\t\t * given class is just the given class with a `no-` prefix.\n\t\t\t *\n\t\t\t * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is\n\t\t\t * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its\n\t\t\t * ancestors have the given class or the negated version of it, then the default activation will be returned.\n\t\t\t *\n\t\t\t * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated\n\t\t\t * version of it, the class is considered active.\n\t\t\t *\n\t\t\t * @param {Element} element\n\t\t\t * @param {string} className\n\t\t\t * @param {boolean} [defaultActivation=false]\n\t\t\t * @returns {boolean}\n\t\t\t */\n\t\t\tisActive: function (element, className, defaultActivation) {\n\t\t\t\tvar no = 'no-' + className;\n\n\t\t\t\twhile (element) {\n\t\t\t\t\tvar classList = element.classList;\n\t\t\t\t\tif (classList.contains(className)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tif (classList.contains(no)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\telement = element.parentElement;\n\t\t\t\t}\n\t\t\t\treturn !!defaultActivation;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.\n\t\t *\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\tlanguages: {\n\t\t\t/**\n\t\t\t * The grammar for plain, unformatted text.\n\t\t\t */\n\t\t\tplain: plainTextGrammar,\n\t\t\tplaintext: plainTextGrammar,\n\t\t\ttext: plainTextGrammar,\n\t\t\ttxt: plainTextGrammar,\n\n\t\t\t/**\n\t\t\t * Creates a deep copy of the language with the given id and appends the given tokens.\n\t\t\t *\n\t\t\t * If a token in `redef` also appears in the copied language, then the existing token in the copied language\n\t\t\t * will be overwritten at its original position.\n\t\t\t *\n\t\t\t * ## Best practices\n\t\t\t *\n\t\t\t * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)\n\t\t\t * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to\n\t\t\t * understand the language definition because, normally, the order of tokens matters in Prism grammars.\n\t\t\t *\n\t\t\t * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.\n\t\t\t * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.\n\t\t\t *\n\t\t\t * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.\n\t\t\t * @param {Grammar} redef The new tokens to append.\n\t\t\t * @returns {Grammar} The new language created.\n\t\t\t * @public\n\t\t\t * @example\n\t\t\t * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {\n\t\t\t *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token\n\t\t\t *     // at its original position\n\t\t\t *     'comment': { ... },\n\t\t\t *     // CSS doesn't have a 'color' token, so this token will be appended\n\t\t\t *     'color': /\\b(?:red|green|blue)\\b/\n\t\t\t * });\n\t\t\t */\n\t\t\textend: function (id, redef) {\n\t\t\t\tvar lang = _.util.clone(_.languages[id]);\n\n\t\t\t\tfor (var key in redef) {\n\t\t\t\t\tlang[key] = redef[key];\n\t\t\t\t}\n\n\t\t\t\treturn lang;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Inserts tokens _before_ another token in a language definition or any other grammar.\n\t\t\t *\n\t\t\t * ## Usage\n\t\t\t *\n\t\t\t * This helper method makes it easy to modify existing languages. For example, the CSS language definition\n\t\t\t * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded\n\t\t\t * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the\n\t\t\t * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do\n\t\t\t * this:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.markup.style = {\n\t\t\t *     // token\n\t\t\t * };\n\t\t\t * ```\n\t\t\t *\n\t\t\t * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens\n\t\t\t * before existing tokens. For the CSS example above, you would use it like this:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.insertBefore('markup', 'cdata', {\n\t\t\t *     'style': {\n\t\t\t *         // token\n\t\t\t *     }\n\t\t\t * });\n\t\t\t * ```\n\t\t\t *\n\t\t\t * ## Special cases\n\t\t\t *\n\t\t\t * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar\n\t\t\t * will be ignored.\n\t\t\t *\n\t\t\t * This behavior can be used to insert tokens after `before`:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.insertBefore('markup', 'comment', {\n\t\t\t *     'comment': Prism.languages.markup.comment,\n\t\t\t *     // tokens after 'comment'\n\t\t\t * });\n\t\t\t * ```\n\t\t\t *\n\t\t\t * ## Limitations\n\t\t\t *\n\t\t\t * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object\n\t\t\t * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave\n\t\t\t * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily\n\t\t\t * deleting properties which is necessary to insert at arbitrary positions.\n\t\t\t *\n\t\t\t * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.\n\t\t\t * Instead, it will create a new object and replace all references to the target object with the new one. This\n\t\t\t * can be done without temporarily deleting properties, so the iteration order is well-defined.\n\t\t\t *\n\t\t\t * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if\n\t\t\t * you hold the target object in a variable, then the value of the variable will not change.\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * var oldMarkup = Prism.languages.markup;\n\t\t\t * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });\n\t\t\t *\n\t\t\t * assert(oldMarkup !== Prism.languages.markup);\n\t\t\t * assert(newMarkup === Prism.languages.markup);\n\t\t\t * ```\n\t\t\t *\n\t\t\t * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the\n\t\t\t * object to be modified.\n\t\t\t * @param {string} before The key to insert before.\n\t\t\t * @param {Grammar} insert An object containing the key-value pairs to be inserted.\n\t\t\t * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the\n\t\t\t * object to be modified.\n\t\t\t *\n\t\t\t * Defaults to `Prism.languages`.\n\t\t\t * @returns {Grammar} The new grammar object.\n\t\t\t * @public\n\t\t\t */\n\t\t\tinsertBefore: function (inside, before, insert, root) {\n\t\t\t\troot = root || /** @type {any} */ (_.languages);\n\t\t\t\tvar grammar = root[inside];\n\t\t\t\t/** @type {Grammar} */\n\t\t\t\tvar ret = {};\n\n\t\t\t\tfor (var token in grammar) {\n\t\t\t\t\tif (grammar.hasOwnProperty(token)) {\n\n\t\t\t\t\t\tif (token == before) {\n\t\t\t\t\t\t\tfor (var newToken in insert) {\n\t\t\t\t\t\t\t\tif (insert.hasOwnProperty(newToken)) {\n\t\t\t\t\t\t\t\t\tret[newToken] = insert[newToken];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Do not insert token which also occur in insert. See #1525\n\t\t\t\t\t\tif (!insert.hasOwnProperty(token)) {\n\t\t\t\t\t\t\tret[token] = grammar[token];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar old = root[inside];\n\t\t\t\troot[inside] = ret;\n\n\t\t\t\t// Update references in other language definitions\n\t\t\t\t_.languages.DFS(_.languages, function (key, value) {\n\t\t\t\t\tif (value === old && key != inside) {\n\t\t\t\t\t\tthis[key] = ret;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn ret;\n\t\t\t},\n\n\t\t\t// Traverse a language definition with Depth First Search\n\t\t\tDFS: function DFS(o, callback, type, visited) {\n\t\t\t\tvisited = visited || {};\n\n\t\t\t\tvar objId = _.util.objId;\n\n\t\t\t\tfor (var i in o) {\n\t\t\t\t\tif (o.hasOwnProperty(i)) {\n\t\t\t\t\t\tcallback.call(o, i, o[i], type || i);\n\n\t\t\t\t\t\tvar property = o[i];\n\t\t\t\t\t\tvar propertyType = _.util.type(property);\n\n\t\t\t\t\t\tif (propertyType === 'Object' && !visited[objId(property)]) {\n\t\t\t\t\t\t\tvisited[objId(property)] = true;\n\t\t\t\t\t\t\tDFS(property, callback, null, visited);\n\t\t\t\t\t\t} else if (propertyType === 'Array' && !visited[objId(property)]) {\n\t\t\t\t\t\t\tvisited[objId(property)] = true;\n\t\t\t\t\t\t\tDFS(property, callback, i, visited);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tplugins: {},\n\n\t\t/**\n\t\t * This is the most high-level function in Prism’s API.\n\t\t * It fetches all the elements that have a `.language-xxxx` class and then calls {@link Prism.highlightElement} on\n\t\t * each one of them.\n\t\t *\n\t\t * This is equivalent to `Prism.highlightAllUnder(document, async, callback)`.\n\t\t *\n\t\t * @param {boolean} [async=false] Same as in {@link Prism.highlightAllUnder}.\n\t\t * @param {HighlightCallback} [callback] Same as in {@link Prism.highlightAllUnder}.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thighlightAll: function (async, callback) {\n\t\t\t_.highlightAllUnder(document, async, callback);\n\t\t},\n\n\t\t/**\n\t\t * Fetches all the descendants of `container` that have a `.language-xxxx` class and then calls\n\t\t * {@link Prism.highlightElement} on each one of them.\n\t\t *\n\t\t * The following hooks will be run:\n\t\t * 1. `before-highlightall`\n\t\t * 2. `before-all-elements-highlight`\n\t\t * 3. All hooks of {@link Prism.highlightElement} for each element.\n\t\t *\n\t\t * @param {ParentNode} container The root element, whose descendants that have a `.language-xxxx` class will be highlighted.\n\t\t * @param {boolean} [async=false] Whether each element is to be highlighted asynchronously using Web Workers.\n\t\t * @param {HighlightCallback} [callback] An optional callback to be invoked on each element after its highlighting is done.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thighlightAllUnder: function (container, async, callback) {\n\t\t\tvar env = {\n\t\t\t\tcallback: callback,\n\t\t\t\tcontainer: container,\n\t\t\t\tselector: 'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'\n\t\t\t};\n\n\t\t\t_.hooks.run('before-highlightall', env);\n\n\t\t\tenv.elements = Array.prototype.slice.apply(env.container.querySelectorAll(env.selector));\n\n\t\t\t_.hooks.run('before-all-elements-highlight', env);\n\n\t\t\tfor (var i = 0, element; (element = env.elements[i++]);) {\n\t\t\t\t_.highlightElement(element, async === true, env.callback);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Highlights the code inside a single element.\n\t\t *\n\t\t * The following hooks will be run:\n\t\t * 1. `before-sanity-check`\n\t\t * 2. `before-highlight`\n\t\t * 3. All hooks of {@link Prism.highlight}. These hooks will be run by an asynchronous worker if `async` is `true`.\n\t\t * 4. `before-insert`\n\t\t * 5. `after-highlight`\n\t\t * 6. `complete`\n\t\t *\n\t\t * Some the above hooks will be skipped if the element doesn't contain any text or there is no grammar loaded for\n\t\t * the element's language.\n\t\t *\n\t\t * @param {Element} element The element containing the code.\n\t\t * It must have a class of `language-xxxx` to be processed, where `xxxx` is a valid language identifier.\n\t\t * @param {boolean} [async=false] Whether the element is to be highlighted asynchronously using Web Workers\n\t\t * to improve performance and avoid blocking the UI when highlighting very large chunks of code. This option is\n\t\t * [disabled by default](https://prismjs.com/faq.html#why-is-asynchronous-highlighting-disabled-by-default).\n\t\t *\n\t\t * Note: All language definitions required to highlight the code must be included in the main `prism.js` file for\n\t\t * asynchronous highlighting to work. You can build your own bundle on the\n\t\t * [Download page](https://prismjs.com/download.html).\n\t\t * @param {HighlightCallback} [callback] An optional callback to be invoked after the highlighting is done.\n\t\t * Mostly useful when `async` is `true`, since in that case, the highlighting is done asynchronously.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thighlightElement: function (element, async, callback) {\n\t\t\t// Find language\n\t\t\tvar language = _.util.getLanguage(element);\n\t\t\tvar grammar = _.languages[language];\n\n\t\t\t// Set language on the element, if not present\n\t\t\t_.util.setLanguage(element, language);\n\n\t\t\t// Set language on the parent, for styling\n\t\t\tvar parent = element.parentElement;\n\t\t\tif (parent && parent.nodeName.toLowerCase() === 'pre') {\n\t\t\t\t_.util.setLanguage(parent, language);\n\t\t\t}\n\n\t\t\tvar code = element.textContent;\n\n\t\t\tvar env = {\n\t\t\t\telement: element,\n\t\t\t\tlanguage: language,\n\t\t\t\tgrammar: grammar,\n\t\t\t\tcode: code\n\t\t\t};\n\n\t\t\tfunction insertHighlightedCode(highlightedCode) {\n\t\t\t\tenv.highlightedCode = highlightedCode;\n\n\t\t\t\t_.hooks.run('before-insert', env);\n\n\t\t\t\tenv.element.innerHTML = env.highlightedCode;\n\n\t\t\t\t_.hooks.run('after-highlight', env);\n\t\t\t\t_.hooks.run('complete', env);\n\t\t\t\tcallback && callback.call(env.element);\n\t\t\t}\n\n\t\t\t_.hooks.run('before-sanity-check', env);\n\n\t\t\t// plugins may change/add the parent/element\n\t\t\tparent = env.element.parentElement;\n\t\t\tif (parent && parent.nodeName.toLowerCase() === 'pre' && !parent.hasAttribute('tabindex')) {\n\t\t\t\tparent.setAttribute('tabindex', '0');\n\t\t\t}\n\n\t\t\tif (!env.code) {\n\t\t\t\t_.hooks.run('complete', env);\n\t\t\t\tcallback && callback.call(env.element);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t_.hooks.run('before-highlight', env);\n\n\t\t\tif (!env.grammar) {\n\t\t\t\tinsertHighlightedCode(_.util.encode(env.code));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (async && _self.Worker) {\n\t\t\t\tvar worker = new Worker(_.filename);\n\n\t\t\t\tworker.onmessage = function (evt) {\n\t\t\t\t\tinsertHighlightedCode(evt.data);\n\t\t\t\t};\n\n\t\t\t\tworker.postMessage(JSON.stringify({\n\t\t\t\t\tlanguage: env.language,\n\t\t\t\t\tcode: env.code,\n\t\t\t\t\timmediateClose: true\n\t\t\t\t}));\n\t\t\t} else {\n\t\t\t\tinsertHighlightedCode(_.highlight(env.code, env.grammar, env.language));\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Low-level function, only use if you know what you’re doing. It accepts a string of text as input\n\t\t * and the language definitions to use, and returns a string with the HTML produced.\n\t\t *\n\t\t * The following hooks will be run:\n\t\t * 1. `before-tokenize`\n\t\t * 2. `after-tokenize`\n\t\t * 3. `wrap`: On each {@link Token}.\n\t\t *\n\t\t * @param {string} text A string with the code to be highlighted.\n\t\t * @param {Grammar} grammar An object containing the tokens to use.\n\t\t *\n\t\t * Usually a language definition like `Prism.languages.markup`.\n\t\t * @param {string} language The name of the language definition passed to `grammar`.\n\t\t * @returns {string} The highlighted HTML.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t * @example\n\t\t * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');\n\t\t */\n\t\thighlight: function (text, grammar, language) {\n\t\t\tvar env = {\n\t\t\t\tcode: text,\n\t\t\t\tgrammar: grammar,\n\t\t\t\tlanguage: language\n\t\t\t};\n\t\t\t_.hooks.run('before-tokenize', env);\n\t\t\tif (!env.grammar) {\n\t\t\t\tthrow new Error('The language \"' + env.language + '\" has no grammar.');\n\t\t\t}\n\t\t\tenv.tokens = _.tokenize(env.code, env.grammar);\n\t\t\t_.hooks.run('after-tokenize', env);\n\t\t\treturn Token.stringify(_.util.encode(env.tokens), env.language);\n\t\t},\n\n\t\t/**\n\t\t * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input\n\t\t * and the language definitions to use, and returns an array with the tokenized code.\n\t\t *\n\t\t * When the language definition includes nested tokens, the function is called recursively on each of these tokens.\n\t\t *\n\t\t * This method could be useful in other contexts as well, as a very crude parser.\n\t\t *\n\t\t * @param {string} text A string with the code to be highlighted.\n\t\t * @param {Grammar} grammar An object containing the tokens to use.\n\t\t *\n\t\t * Usually a language definition like `Prism.languages.markup`.\n\t\t * @returns {TokenStream} An array of strings and tokens, a token stream.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t * @example\n\t\t * let code = `var foo = 0;`;\n\t\t * let tokens = Prism.tokenize(code, Prism.languages.javascript);\n\t\t * tokens.forEach(token => {\n\t\t *     if (token instanceof Prism.Token && token.type === 'number') {\n\t\t *         console.log(`Found numeric literal: ${token.content}`);\n\t\t *     }\n\t\t * });\n\t\t */\n\t\ttokenize: function (text, grammar) {\n\t\t\tvar rest = grammar.rest;\n\t\t\tif (rest) {\n\t\t\t\tfor (var token in rest) {\n\t\t\t\t\tgrammar[token] = rest[token];\n\t\t\t\t}\n\n\t\t\t\tdelete grammar.rest;\n\t\t\t}\n\n\t\t\tvar tokenList = new LinkedList();\n\t\t\taddAfter(tokenList, tokenList.head, text);\n\n\t\t\tmatchGrammar(text, tokenList, grammar, tokenList.head, 0);\n\n\t\t\treturn toArray(tokenList);\n\t\t},\n\n\t\t/**\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thooks: {\n\t\t\tall: {},\n\n\t\t\t/**\n\t\t\t * Adds the given callback to the list of callbacks for the given hook.\n\t\t\t *\n\t\t\t * The callback will be invoked when the hook it is registered for is run.\n\t\t\t * Hooks are usually directly run by a highlight function but you can also run hooks yourself.\n\t\t\t *\n\t\t\t * One callback function can be registered to multiple hooks and the same hook multiple times.\n\t\t\t *\n\t\t\t * @param {string} name The name of the hook.\n\t\t\t * @param {HookCallback} callback The callback function which is given environment variables.\n\t\t\t * @public\n\t\t\t */\n\t\t\tadd: function (name, callback) {\n\t\t\t\tvar hooks = _.hooks.all;\n\n\t\t\t\thooks[name] = hooks[name] || [];\n\n\t\t\t\thooks[name].push(callback);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Runs a hook invoking all registered callbacks with the given environment variables.\n\t\t\t *\n\t\t\t * Callbacks will be invoked synchronously and in the order in which they were registered.\n\t\t\t *\n\t\t\t * @param {string} name The name of the hook.\n\t\t\t * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.\n\t\t\t * @public\n\t\t\t */\n\t\t\trun: function (name, env) {\n\t\t\t\tvar callbacks = _.hooks.all[name];\n\n\t\t\t\tif (!callbacks || !callbacks.length) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor (var i = 0, callback; (callback = callbacks[i++]);) {\n\t\t\t\t\tcallback(env);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tToken: Token\n\t};\n\t_self.Prism = _;\n\n\n\t// Typescript note:\n\t// The following can be used to import the Token type in JSDoc:\n\t//\n\t//   @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token\n\n\t/**\n\t * Creates a new token.\n\t *\n\t * @param {string} type See {@link Token#type type}\n\t * @param {string | TokenStream} content See {@link Token#content content}\n\t * @param {string|string[]} [alias] The alias(es) of the token.\n\t * @param {string} [matchedStr=\"\"] A copy of the full string this token was created from.\n\t * @class\n\t * @global\n\t * @public\n\t */\n\tfunction Token(type, content, alias, matchedStr) {\n\t\t/**\n\t\t * The type of the token.\n\t\t *\n\t\t * This is usually the key of a pattern in a {@link Grammar}.\n\t\t *\n\t\t * @type {string}\n\t\t * @see GrammarToken\n\t\t * @public\n\t\t */\n\t\tthis.type = type;\n\t\t/**\n\t\t * The strings or tokens contained by this token.\n\t\t *\n\t\t * This will be a token stream if the pattern matched also defined an `inside` grammar.\n\t\t *\n\t\t * @type {string | TokenStream}\n\t\t * @public\n\t\t */\n\t\tthis.content = content;\n\t\t/**\n\t\t * The alias(es) of the token.\n\t\t *\n\t\t * @type {string|string[]}\n\t\t * @see GrammarToken\n\t\t * @public\n\t\t */\n\t\tthis.alias = alias;\n\t\t// Copy of the full string this token was created from\n\t\tthis.length = (matchedStr || '').length | 0;\n\t}\n\n\t/**\n\t * A token stream is an array of strings and {@link Token Token} objects.\n\t *\n\t * Token streams have to fulfill a few properties that are assumed by most functions (mostly internal ones) that process\n\t * them.\n\t *\n\t * 1. No adjacent strings.\n\t * 2. No empty strings.\n\t *\n\t *    The only exception here is the token stream that only contains the empty string and nothing else.\n\t *\n\t * @typedef {Array<string | Token>} TokenStream\n\t * @global\n\t * @public\n\t */\n\n\t/**\n\t * Converts the given token or token stream to an HTML representation.\n\t *\n\t * The following hooks will be run:\n\t * 1. `wrap`: On each {@link Token}.\n\t *\n\t * @param {string | Token | TokenStream} o The token or token stream to be converted.\n\t * @param {string} language The name of current language.\n\t * @returns {string} The HTML representation of the token or token stream.\n\t * @memberof Token\n\t * @static\n\t */\n\tToken.stringify = function stringify(o, language) {\n\t\tif (typeof o == 'string') {\n\t\t\treturn o;\n\t\t}\n\t\tif (Array.isArray(o)) {\n\t\t\tvar s = '';\n\t\t\to.forEach(function (e) {\n\t\t\t\ts += stringify(e, language);\n\t\t\t});\n\t\t\treturn s;\n\t\t}\n\n\t\tvar env = {\n\t\t\ttype: o.type,\n\t\t\tcontent: stringify(o.content, language),\n\t\t\ttag: 'span',\n\t\t\tclasses: ['token', o.type],\n\t\t\tattributes: {},\n\t\t\tlanguage: language\n\t\t};\n\n\t\tvar aliases = o.alias;\n\t\tif (aliases) {\n\t\t\tif (Array.isArray(aliases)) {\n\t\t\t\tArray.prototype.push.apply(env.classes, aliases);\n\t\t\t} else {\n\t\t\t\tenv.classes.push(aliases);\n\t\t\t}\n\t\t}\n\n\t\t_.hooks.run('wrap', env);\n\n\t\tvar attributes = '';\n\t\tfor (var name in env.attributes) {\n\t\t\tattributes += ' ' + name + '=\"' + (env.attributes[name] || '').replace(/\"/g, '&quot;') + '\"';\n\t\t}\n\n\t\treturn '<' + env.tag + ' class=\"' + env.classes.join(' ') + '\"' + attributes + '>' + env.content + '</' + env.tag + '>';\n\t};\n\n\t/**\n\t * @param {RegExp} pattern\n\t * @param {number} pos\n\t * @param {string} text\n\t * @param {boolean} lookbehind\n\t * @returns {RegExpExecArray | null}\n\t */\n\tfunction matchPattern(pattern, pos, text, lookbehind) {\n\t\tpattern.lastIndex = pos;\n\t\tvar match = pattern.exec(text);\n\t\tif (match && lookbehind && match[1]) {\n\t\t\t// change the match to remove the text matched by the Prism lookbehind group\n\t\t\tvar lookbehindLength = match[1].length;\n\t\t\tmatch.index += lookbehindLength;\n\t\t\tmatch[0] = match[0].slice(lookbehindLength);\n\t\t}\n\t\treturn match;\n\t}\n\n\t/**\n\t * @param {string} text\n\t * @param {LinkedList<string | Token>} tokenList\n\t * @param {any} grammar\n\t * @param {LinkedListNode<string | Token>} startNode\n\t * @param {number} startPos\n\t * @param {RematchOptions} [rematch]\n\t * @returns {void}\n\t * @private\n\t *\n\t * @typedef RematchOptions\n\t * @property {string} cause\n\t * @property {number} reach\n\t */\n\tfunction matchGrammar(text, tokenList, grammar, startNode, startPos, rematch) {\n\t\tfor (var token in grammar) {\n\t\t\tif (!grammar.hasOwnProperty(token) || !grammar[token]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvar patterns = grammar[token];\n\t\t\tpatterns = Array.isArray(patterns) ? patterns : [patterns];\n\n\t\t\tfor (var j = 0; j < patterns.length; ++j) {\n\t\t\t\tif (rematch && rematch.cause == token + ',' + j) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar patternObj = patterns[j];\n\t\t\t\tvar inside = patternObj.inside;\n\t\t\t\tvar lookbehind = !!patternObj.lookbehind;\n\t\t\t\tvar greedy = !!patternObj.greedy;\n\t\t\t\tvar alias = patternObj.alias;\n\n\t\t\t\tif (greedy && !patternObj.pattern.global) {\n\t\t\t\t\t// Without the global flag, lastIndex won't work\n\t\t\t\t\tvar flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];\n\t\t\t\t\tpatternObj.pattern = RegExp(patternObj.pattern.source, flags + 'g');\n\t\t\t\t}\n\n\t\t\t\t/** @type {RegExp} */\n\t\t\t\tvar pattern = patternObj.pattern || patternObj;\n\n\t\t\t\tfor ( // iterate the token list and keep track of the current token/string position\n\t\t\t\t\tvar currentNode = startNode.next, pos = startPos;\n\t\t\t\t\tcurrentNode !== tokenList.tail;\n\t\t\t\t\tpos += currentNode.value.length, currentNode = currentNode.next\n\t\t\t\t) {\n\n\t\t\t\t\tif (rematch && pos >= rematch.reach) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar str = currentNode.value;\n\n\t\t\t\t\tif (tokenList.length > text.length) {\n\t\t\t\t\t\t// Something went terribly wrong, ABORT, ABORT!\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (str instanceof Token) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar removeCount = 1; // this is the to parameter of removeBetween\n\t\t\t\t\tvar match;\n\n\t\t\t\t\tif (greedy) {\n\t\t\t\t\t\tmatch = matchPattern(pattern, pos, text, lookbehind);\n\t\t\t\t\t\tif (!match || match.index >= text.length) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar from = match.index;\n\t\t\t\t\t\tvar to = match.index + match[0].length;\n\t\t\t\t\t\tvar p = pos;\n\n\t\t\t\t\t\t// find the node that contains the match\n\t\t\t\t\t\tp += currentNode.value.length;\n\t\t\t\t\t\twhile (from >= p) {\n\t\t\t\t\t\t\tcurrentNode = currentNode.next;\n\t\t\t\t\t\t\tp += currentNode.value.length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// adjust pos (and p)\n\t\t\t\t\t\tp -= currentNode.value.length;\n\t\t\t\t\t\tpos = p;\n\n\t\t\t\t\t\t// the current node is a Token, then the match starts inside another Token, which is invalid\n\t\t\t\t\t\tif (currentNode.value instanceof Token) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// find the last node which is affected by this match\n\t\t\t\t\t\tfor (\n\t\t\t\t\t\t\tvar k = currentNode;\n\t\t\t\t\t\t\tk !== tokenList.tail && (p < to || typeof k.value === 'string');\n\t\t\t\t\t\t\tk = k.next\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tremoveCount++;\n\t\t\t\t\t\t\tp += k.value.length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tremoveCount--;\n\n\t\t\t\t\t\t// replace with the new match\n\t\t\t\t\t\tstr = text.slice(pos, p);\n\t\t\t\t\t\tmatch.index -= pos;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmatch = matchPattern(pattern, 0, str, lookbehind);\n\t\t\t\t\t\tif (!match) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// eslint-disable-next-line no-redeclare\n\t\t\t\t\tvar from = match.index;\n\t\t\t\t\tvar matchStr = match[0];\n\t\t\t\t\tvar before = str.slice(0, from);\n\t\t\t\t\tvar after = str.slice(from + matchStr.length);\n\n\t\t\t\t\tvar reach = pos + str.length;\n\t\t\t\t\tif (rematch && reach > rematch.reach) {\n\t\t\t\t\t\trematch.reach = reach;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar removeFrom = currentNode.prev;\n\n\t\t\t\t\tif (before) {\n\t\t\t\t\t\tremoveFrom = addAfter(tokenList, removeFrom, before);\n\t\t\t\t\t\tpos += before.length;\n\t\t\t\t\t}\n\n\t\t\t\t\tremoveRange(tokenList, removeFrom, removeCount);\n\n\t\t\t\t\tvar wrapped = new Token(token, inside ? _.tokenize(matchStr, inside) : matchStr, alias, matchStr);\n\t\t\t\t\tcurrentNode = addAfter(tokenList, removeFrom, wrapped);\n\n\t\t\t\t\tif (after) {\n\t\t\t\t\t\taddAfter(tokenList, currentNode, after);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (removeCount > 1) {\n\t\t\t\t\t\t// at least one Token object was removed, so we have to do some rematching\n\t\t\t\t\t\t// this can only happen if the current pattern is greedy\n\n\t\t\t\t\t\t/** @type {RematchOptions} */\n\t\t\t\t\t\tvar nestedRematch = {\n\t\t\t\t\t\t\tcause: token + ',' + j,\n\t\t\t\t\t\t\treach: reach\n\t\t\t\t\t\t};\n\t\t\t\t\t\tmatchGrammar(text, tokenList, grammar, currentNode.prev, pos, nestedRematch);\n\n\t\t\t\t\t\t// the reach might have been extended because of the rematching\n\t\t\t\t\t\tif (rematch && nestedRematch.reach > rematch.reach) {\n\t\t\t\t\t\t\trematch.reach = nestedRematch.reach;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @typedef LinkedListNode\n\t * @property {T} value\n\t * @property {LinkedListNode<T> | null} prev The previous node.\n\t * @property {LinkedListNode<T> | null} next The next node.\n\t * @template T\n\t * @private\n\t */\n\n\t/**\n\t * @template T\n\t * @private\n\t */\n\tfunction LinkedList() {\n\t\t/** @type {LinkedListNode<T>} */\n\t\tvar head = { value: null, prev: null, next: null };\n\t\t/** @type {LinkedListNode<T>} */\n\t\tvar tail = { value: null, prev: head, next: null };\n\t\thead.next = tail;\n\n\t\t/** @type {LinkedListNode<T>} */\n\t\tthis.head = head;\n\t\t/** @type {LinkedListNode<T>} */\n\t\tthis.tail = tail;\n\t\tthis.length = 0;\n\t}\n\n\t/**\n\t * Adds a new node with the given value to the list.\n\t *\n\t * @param {LinkedList<T>} list\n\t * @param {LinkedListNode<T>} node\n\t * @param {T} value\n\t * @returns {LinkedListNode<T>} The added node.\n\t * @template T\n\t */\n\tfunction addAfter(list, node, value) {\n\t\t// assumes that node != list.tail && values.length >= 0\n\t\tvar next = node.next;\n\n\t\tvar newNode = { value: value, prev: node, next: next };\n\t\tnode.next = newNode;\n\t\tnext.prev = newNode;\n\t\tlist.length++;\n\n\t\treturn newNode;\n\t}\n\t/**\n\t * Removes `count` nodes after the given node. The given node will not be removed.\n\t *\n\t * @param {LinkedList<T>} list\n\t * @param {LinkedListNode<T>} node\n\t * @param {number} count\n\t * @template T\n\t */\n\tfunction removeRange(list, node, count) {\n\t\tvar next = node.next;\n\t\tfor (var i = 0; i < count && next !== list.tail; i++) {\n\t\t\tnext = next.next;\n\t\t}\n\t\tnode.next = next;\n\t\tnext.prev = node;\n\t\tlist.length -= i;\n\t}\n\t/**\n\t * @param {LinkedList<T>} list\n\t * @returns {T[]}\n\t * @template T\n\t */\n\tfunction toArray(list) {\n\t\tvar array = [];\n\t\tvar node = list.head.next;\n\t\twhile (node !== list.tail) {\n\t\t\tarray.push(node.value);\n\t\t\tnode = node.next;\n\t\t}\n\t\treturn array;\n\t}\n\n\n\tif (!_self.document) {\n\t\tif (!_self.addEventListener) {\n\t\t\t// in Node.js\n\t\t\treturn _;\n\t\t}\n\n\t\tif (!_.disableWorkerMessageHandler) {\n\t\t\t// In worker\n\t\t\t_self.addEventListener('message', function (evt) {\n\t\t\t\tvar message = JSON.parse(evt.data);\n\t\t\t\tvar lang = message.language;\n\t\t\t\tvar code = message.code;\n\t\t\t\tvar immediateClose = message.immediateClose;\n\n\t\t\t\t_self.postMessage(_.highlight(code, _.languages[lang], lang));\n\t\t\t\tif (immediateClose) {\n\t\t\t\t\t_self.close();\n\t\t\t\t}\n\t\t\t}, false);\n\t\t}\n\n\t\treturn _;\n\t}\n\n\t// Get current script and highlight\n\tvar script = _.util.currentScript();\n\n\tif (script) {\n\t\t_.filename = script.src;\n\n\t\tif (script.hasAttribute('data-manual')) {\n\t\t\t_.manual = true;\n\t\t}\n\t}\n\n\tfunction highlightAutomaticallyCallback() {\n\t\tif (!_.manual) {\n\t\t\t_.highlightAll();\n\t\t}\n\t}\n\n\tif (!_.manual) {\n\t\t// If the document state is \"loading\", then we'll use DOMContentLoaded.\n\t\t// If the document state is \"interactive\" and the prism.js script is deferred, then we'll also use the\n\t\t// DOMContentLoaded event because there might be some plugins or languages which have also been deferred and they\n\t\t// might take longer one animation frame to execute which can create a race condition where only some plugins have\n\t\t// been loaded when Prism.highlightAll() is executed, depending on how fast resources are loaded.\n\t\t// See https://github.com/PrismJS/prism/issues/2102\n\t\tvar readyState = document.readyState;\n\t\tif (readyState === 'loading' || readyState === 'interactive' && script && script.defer) {\n\t\t\tdocument.addEventListener('DOMContentLoaded', highlightAutomaticallyCallback);\n\t\t} else {\n\t\t\tif (window.requestAnimationFrame) {\n\t\t\t\twindow.requestAnimationFrame(highlightAutomaticallyCallback);\n\t\t\t} else {\n\t\t\t\twindow.setTimeout(highlightAutomaticallyCallback, 16);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn _;\n\n}(_self));\n\nif (typeof module !== 'undefined' && module.exports) {\n\tmodule.exports = Prism;\n}\n\n// hack for components to work correctly in node.js\nif (typeof global !== 'undefined') {\n\tglobal.Prism = Prism;\n}\n\n// some additional documentation/types\n\n/**\n * The expansion of a simple `RegExp` literal to support additional properties.\n *\n * @typedef GrammarToken\n * @property {RegExp} pattern The regular expression of the token.\n * @property {boolean} [lookbehind=false] If `true`, then the first capturing group of `pattern` will (effectively)\n * behave as a lookbehind group meaning that the captured text will not be part of the matched text of the new token.\n * @property {boolean} [greedy=false] Whether the token is greedy.\n * @property {string|string[]} [alias] An optional alias or list of aliases.\n * @property {Grammar} [inside] The nested grammar of this token.\n *\n * The `inside` grammar will be used to tokenize the text value of each token of this kind.\n *\n * This can be used to make nested and even recursive language definitions.\n *\n * Note: This can cause infinite recursion. Be careful when you embed different languages or even the same language into\n * each another.\n * @global\n * @public\n */\n\n/**\n * @typedef Grammar\n * @type {Object<string, RegExp | GrammarToken | Array<RegExp | GrammarToken>>}\n * @property {Grammar} [rest] An optional grammar object that will be appended to this grammar.\n * @global\n * @public\n */\n\n/**\n * A function which will invoked after an element was successfully highlighted.\n *\n * @callback HighlightCallback\n * @param {Element} element The element successfully highlighted.\n * @returns {void}\n * @global\n * @public\n */\n\n/**\n * @callback HookCallback\n * @param {Object<string, any>} env The environment variables of the hook.\n * @returns {void}\n * @global\n * @public\n */\n","'use strict'\n\nvar normalize = require('./normalize')\nvar DefinedInfo = require('./lib/util/defined-info')\nvar Info = require('./lib/util/info')\n\nvar data = 'data'\n\nmodule.exports = find\n\nvar valid = /^data[-\\w.:]+$/i\nvar dash = /-[a-z]/g\nvar cap = /[A-Z]/g\n\nfunction find(schema, value) {\n  var normal = normalize(value)\n  var prop = value\n  var Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === data && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      prop = datasetToProperty(value)\n    } else {\n      value = datasetToAttribute(value)\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(prop, value)\n}\n\nfunction datasetToProperty(attribute) {\n  var value = attribute.slice(5).replace(dash, camelcase)\n  return data + value.charAt(0).toUpperCase() + value.slice(1)\n}\n\nfunction datasetToAttribute(property) {\n  var value = property.slice(4)\n\n  if (dash.test(value)) {\n    return property\n  }\n\n  value = value.replace(cap, kebab)\n\n  if (value.charAt(0) !== '-') {\n    value = '-' + value\n  }\n\n  return data + value\n}\n\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","'use strict'\n\nvar merge = require('./lib/util/merge')\nvar xlink = require('./lib/xlink')\nvar xml = require('./lib/xml')\nvar xmlns = require('./lib/xmlns')\nvar aria = require('./lib/aria')\nvar html = require('./lib/html')\n\nmodule.exports = merge([xml, xlink, xmlns, aria, html])\n","'use strict'\n\nvar types = require('./util/types')\nvar create = require('./util/create')\n\nvar booleanish = types.booleanish\nvar number = types.number\nvar spaceSeparated = types.spaceSeparated\n\nmodule.exports = create({\n  transform: ariaTransform,\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n})\n\nfunction ariaTransform(_, prop) {\n  return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n}\n","'use strict'\n\nvar types = require('./util/types')\nvar create = require('./util/create')\nvar caseInsensitiveTransform = require('./util/case-insensitive-transform')\n\nvar boolean = types.boolean\nvar overloadedBoolean = types.overloadedBoolean\nvar booleanish = types.booleanish\nvar number = types.number\nvar spaceSeparated = types.spaceSeparated\nvar commaSeparated = types.commaSeparated\n\nmodule.exports = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    capture: boolean,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: commaSeparated,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforePrint: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextMenu: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: commaSeparated,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n})\n","'use strict'\n\nvar caseSensitiveTransform = require('./case-sensitive-transform')\n\nmodule.exports = caseInsensitiveTransform\n\nfunction caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","'use strict'\n\nmodule.exports = caseSensitiveTransform\n\nfunction caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","'use strict'\n\nvar normalize = require('../../normalize')\nvar Schema = require('./schema')\nvar DefinedInfo = require('./defined-info')\n\nmodule.exports = create\n\nfunction create(definition) {\n  var space = definition.space\n  var mustUseProperty = definition.mustUseProperty || []\n  var attributes = definition.attributes || {}\n  var props = definition.properties\n  var transform = definition.transform\n  var property = {}\n  var normal = {}\n  var prop\n  var info\n\n  for (prop in props) {\n    info = new DefinedInfo(\n      prop,\n      transform(attributes, prop),\n      props[prop],\n      space\n    )\n\n    if (mustUseProperty.indexOf(prop) !== -1) {\n      info.mustUseProperty = true\n    }\n\n    property[prop] = info\n\n    normal[normalize(prop)] = prop\n    normal[normalize(info.attribute)] = prop\n  }\n\n  return new Schema(property, normal, space)\n}\n","'use strict'\n\nvar Info = require('./info')\nvar types = require('./types')\n\nmodule.exports = DefinedInfo\n\nDefinedInfo.prototype = new Info()\nDefinedInfo.prototype.defined = true\n\nvar checks = [\n  'boolean',\n  'booleanish',\n  'overloadedBoolean',\n  'number',\n  'commaSeparated',\n  'spaceSeparated',\n  'commaOrSpaceSeparated'\n]\nvar checksLength = checks.length\n\nfunction DefinedInfo(property, attribute, mask, space) {\n  var index = -1\n  var check\n\n  mark(this, 'space', space)\n\n  Info.call(this, property, attribute)\n\n  while (++index < checksLength) {\n    check = checks[index]\n    mark(this, check, (mask & types[check]) === types[check])\n  }\n}\n\nfunction mark(values, key, value) {\n  if (value) {\n    values[key] = value\n  }\n}\n","'use strict'\n\nmodule.exports = Info\n\nvar proto = Info.prototype\n\nproto.space = null\nproto.attribute = null\nproto.property = null\nproto.boolean = false\nproto.booleanish = false\nproto.overloadedBoolean = false\nproto.number = false\nproto.commaSeparated = false\nproto.spaceSeparated = false\nproto.commaOrSpaceSeparated = false\nproto.mustUseProperty = false\nproto.defined = false\n\nfunction Info(property, attribute) {\n  this.property = property\n  this.attribute = attribute\n}\n","'use strict'\n\nvar xtend = require('xtend')\nvar Schema = require('./schema')\n\nmodule.exports = merge\n\nfunction merge(definitions) {\n  var length = definitions.length\n  var property = []\n  var normal = []\n  var index = -1\n  var info\n  var space\n\n  while (++index < length) {\n    info = definitions[index]\n    property.push(info.property)\n    normal.push(info.normal)\n    space = info.space\n  }\n\n  return new Schema(\n    xtend.apply(null, property),\n    xtend.apply(null, normal),\n    space\n  )\n}\n","'use strict'\n\nmodule.exports = Schema\n\nvar proto = Schema.prototype\n\nproto.space = null\nproto.normal = {}\nproto.property = {}\n\nfunction Schema(property, normal, space) {\n  this.property = property\n  this.normal = normal\n\n  if (space) {\n    this.space = space\n  }\n}\n","'use strict'\n\nvar powers = 0\n\nexports.boolean = increment()\nexports.booleanish = increment()\nexports.overloadedBoolean = increment()\nexports.number = increment()\nexports.spaceSeparated = increment()\nexports.commaSeparated = increment()\nexports.commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return Math.pow(2, ++powers)\n}\n","'use strict'\n\nvar create = require('./util/create')\n\nmodule.exports = create({\n  space: 'xlink',\n  transform: xlinkTransform,\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n})\n\nfunction xlinkTransform(_, prop) {\n  return 'xlink:' + prop.slice(5).toLowerCase()\n}\n","'use strict'\n\nvar create = require('./util/create')\n\nmodule.exports = create({\n  space: 'xml',\n  transform: xmlTransform,\n  properties: {\n    xmlLang: null,\n    xmlBase: null,\n    xmlSpace: null\n  }\n})\n\nfunction xmlTransform(_, prop) {\n  return 'xml:' + prop.slice(3).toLowerCase()\n}\n","'use strict'\n\nvar create = require('./util/create')\nvar caseInsensitiveTransform = require('./util/case-insensitive-transform')\n\nmodule.exports = create({\n  space: 'xmlns',\n  attributes: {\n    xmlnsxlink: 'xmlns:xlink'\n  },\n  transform: caseInsensitiveTransform,\n  properties: {\n    xmlns: null,\n    xmlnsXLink: null\n  }\n})\n","'use strict'\n\nmodule.exports = normalize\n\nfunction normalize(value) {\n  return value.toLowerCase()\n}\n","function _objectWithoutPropertiesLoose(r, e) {\n  if (null == r) return {};\n  var t = {};\n  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {\n    if (e.includes(n)) continue;\n    t[n] = r[n];\n  }\n  return t;\n}\nexport { _objectWithoutPropertiesLoose as default };","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nfunction _objectWithoutProperties(e, t) {\n  if (null == e) return {};\n  var o,\n    r,\n    i = objectWithoutPropertiesLoose(e, t);\n  if (Object.getOwnPropertySymbols) {\n    var s = Object.getOwnPropertySymbols(e);\n    for (r = 0; r < s.length; r++) o = s[r], t.includes(o) || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);\n  }\n  return i;\n}\nexport { _objectWithoutProperties as default };","function _arrayLikeToArray(r, a) {\n  (null == a || a > r.length) && (a = r.length);\n  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n  return n;\n}\nexport { _arrayLikeToArray as default };","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nfunction _arrayWithoutHoles(r) {\n  if (Array.isArray(r)) return arrayLikeToArray(r);\n}\nexport { _arrayWithoutHoles as default };","function _iterableToArray(r) {\n  if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r);\n}\nexport { _iterableToArray as default };","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nfunction _unsupportedIterableToArray(r, a) {\n  if (r) {\n    if (\"string\" == typeof r) return arrayLikeToArray(r, a);\n    var t = {}.toString.call(r).slice(8, -1);\n    return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? arrayLikeToArray(r, a) : void 0;\n  }\n}\nexport { _unsupportedIterableToArray as default };","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _nonIterableSpread as default };","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nfunction _toConsumableArray(r) {\n  return arrayWithoutHoles(r) || iterableToArray(r) || unsupportedIterableToArray(r) || nonIterableSpread();\n}\nexport { _toConsumableArray as default };","function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nexport { _typeof as default };","import _typeof from \"./typeof.js\";\nfunction toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nexport { toPrimitive as default };","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nfunction toPropertyKey(t) {\n  var i = toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nexport { toPropertyKey as default };","import toPropertyKey from \"./toPropertyKey.js\";\nfunction _defineProperty(e, r, t) {\n  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nexport { _defineProperty as default };","function _extends() {\n  return _extends = Object.assign ? Object.assign.bind() : function (n) {\n    for (var e = 1; e < arguments.length; e++) {\n      var t = arguments[e];\n      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);\n    }\n    return n;\n  }, _extends.apply(null, arguments);\n}\nexport { _extends as default };","import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React from 'react'; // Get all possible permutations of all power sets\n//\n// Super simple, non-algorithmic solution since the\n// number of class names will not be greater than 4\n\nfunction powerSetPermutations(arr) {\n  var arrLength = arr.length;\n  if (arrLength === 0 || arrLength === 1) return arr;\n\n  if (arrLength === 2) {\n    // prettier-ignore\n    return [arr[0], arr[1], \"\".concat(arr[0], \".\").concat(arr[1]), \"\".concat(arr[1], \".\").concat(arr[0])];\n  }\n\n  if (arrLength === 3) {\n    return [arr[0], arr[1], arr[2], \"\".concat(arr[0], \".\").concat(arr[1]), \"\".concat(arr[0], \".\").concat(arr[2]), \"\".concat(arr[1], \".\").concat(arr[0]), \"\".concat(arr[1], \".\").concat(arr[2]), \"\".concat(arr[2], \".\").concat(arr[0]), \"\".concat(arr[2], \".\").concat(arr[1]), \"\".concat(arr[0], \".\").concat(arr[1], \".\").concat(arr[2]), \"\".concat(arr[0], \".\").concat(arr[2], \".\").concat(arr[1]), \"\".concat(arr[1], \".\").concat(arr[0], \".\").concat(arr[2]), \"\".concat(arr[1], \".\").concat(arr[2], \".\").concat(arr[0]), \"\".concat(arr[2], \".\").concat(arr[0], \".\").concat(arr[1]), \"\".concat(arr[2], \".\").concat(arr[1], \".\").concat(arr[0])];\n  }\n\n  if (arrLength >= 4) {\n    // Currently does not support more than 4 extra\n    // class names (after `.token` has been removed)\n    return [arr[0], arr[1], arr[2], arr[3], \"\".concat(arr[0], \".\").concat(arr[1]), \"\".concat(arr[0], \".\").concat(arr[2]), \"\".concat(arr[0], \".\").concat(arr[3]), \"\".concat(arr[1], \".\").concat(arr[0]), \"\".concat(arr[1], \".\").concat(arr[2]), \"\".concat(arr[1], \".\").concat(arr[3]), \"\".concat(arr[2], \".\").concat(arr[0]), \"\".concat(arr[2], \".\").concat(arr[1]), \"\".concat(arr[2], \".\").concat(arr[3]), \"\".concat(arr[3], \".\").concat(arr[0]), \"\".concat(arr[3], \".\").concat(arr[1]), \"\".concat(arr[3], \".\").concat(arr[2]), \"\".concat(arr[0], \".\").concat(arr[1], \".\").concat(arr[2]), \"\".concat(arr[0], \".\").concat(arr[1], \".\").concat(arr[3]), \"\".concat(arr[0], \".\").concat(arr[2], \".\").concat(arr[1]), \"\".concat(arr[0], \".\").concat(arr[2], \".\").concat(arr[3]), \"\".concat(arr[0], \".\").concat(arr[3], \".\").concat(arr[1]), \"\".concat(arr[0], \".\").concat(arr[3], \".\").concat(arr[2]), \"\".concat(arr[1], \".\").concat(arr[0], \".\").concat(arr[2]), \"\".concat(arr[1], \".\").concat(arr[0], \".\").concat(arr[3]), \"\".concat(arr[1], \".\").concat(arr[2], \".\").concat(arr[0]), \"\".concat(arr[1], \".\").concat(arr[2], \".\").concat(arr[3]), \"\".concat(arr[1], \".\").concat(arr[3], \".\").concat(arr[0]), \"\".concat(arr[1], \".\").concat(arr[3], \".\").concat(arr[2]), \"\".concat(arr[2], \".\").concat(arr[0], \".\").concat(arr[1]), \"\".concat(arr[2], \".\").concat(arr[0], \".\").concat(arr[3]), \"\".concat(arr[2], \".\").concat(arr[1], \".\").concat(arr[0]), \"\".concat(arr[2], \".\").concat(arr[1], \".\").concat(arr[3]), \"\".concat(arr[2], \".\").concat(arr[3], \".\").concat(arr[0]), \"\".concat(arr[2], \".\").concat(arr[3], \".\").concat(arr[1]), \"\".concat(arr[3], \".\").concat(arr[0], \".\").concat(arr[1]), \"\".concat(arr[3], \".\").concat(arr[0], \".\").concat(arr[2]), \"\".concat(arr[3], \".\").concat(arr[1], \".\").concat(arr[0]), \"\".concat(arr[3], \".\").concat(arr[1], \".\").concat(arr[2]), \"\".concat(arr[3], \".\").concat(arr[2], \".\").concat(arr[0]), \"\".concat(arr[3], \".\").concat(arr[2], \".\").concat(arr[1]), \"\".concat(arr[0], \".\").concat(arr[1], \".\").concat(arr[2], \".\").concat(arr[3]), \"\".concat(arr[0], \".\").concat(arr[1], \".\").concat(arr[3], \".\").concat(arr[2]), \"\".concat(arr[0], \".\").concat(arr[2], \".\").concat(arr[1], \".\").concat(arr[3]), \"\".concat(arr[0], \".\").concat(arr[2], \".\").concat(arr[3], \".\").concat(arr[1]), \"\".concat(arr[0], \".\").concat(arr[3], \".\").concat(arr[1], \".\").concat(arr[2]), \"\".concat(arr[0], \".\").concat(arr[3], \".\").concat(arr[2], \".\").concat(arr[1]), \"\".concat(arr[1], \".\").concat(arr[0], \".\").concat(arr[2], \".\").concat(arr[3]), \"\".concat(arr[1], \".\").concat(arr[0], \".\").concat(arr[3], \".\").concat(arr[2]), \"\".concat(arr[1], \".\").concat(arr[2], \".\").concat(arr[0], \".\").concat(arr[3]), \"\".concat(arr[1], \".\").concat(arr[2], \".\").concat(arr[3], \".\").concat(arr[0]), \"\".concat(arr[1], \".\").concat(arr[3], \".\").concat(arr[0], \".\").concat(arr[2]), \"\".concat(arr[1], \".\").concat(arr[3], \".\").concat(arr[2], \".\").concat(arr[0]), \"\".concat(arr[2], \".\").concat(arr[0], \".\").concat(arr[1], \".\").concat(arr[3]), \"\".concat(arr[2], \".\").concat(arr[0], \".\").concat(arr[3], \".\").concat(arr[1]), \"\".concat(arr[2], \".\").concat(arr[1], \".\").concat(arr[0], \".\").concat(arr[3]), \"\".concat(arr[2], \".\").concat(arr[1], \".\").concat(arr[3], \".\").concat(arr[0]), \"\".concat(arr[2], \".\").concat(arr[3], \".\").concat(arr[0], \".\").concat(arr[1]), \"\".concat(arr[2], \".\").concat(arr[3], \".\").concat(arr[1], \".\").concat(arr[0]), \"\".concat(arr[3], \".\").concat(arr[0], \".\").concat(arr[1], \".\").concat(arr[2]), \"\".concat(arr[3], \".\").concat(arr[0], \".\").concat(arr[2], \".\").concat(arr[1]), \"\".concat(arr[3], \".\").concat(arr[1], \".\").concat(arr[0], \".\").concat(arr[2]), \"\".concat(arr[3], \".\").concat(arr[1], \".\").concat(arr[2], \".\").concat(arr[0]), \"\".concat(arr[3], \".\").concat(arr[2], \".\").concat(arr[0], \".\").concat(arr[1]), \"\".concat(arr[3], \".\").concat(arr[2], \".\").concat(arr[1], \".\").concat(arr[0])];\n  }\n}\n\nvar classNameCombinations = {};\n\nfunction getClassNameCombinations(classNames) {\n  if (classNames.length === 0 || classNames.length === 1) return classNames;\n  var key = classNames.join('.');\n\n  if (!classNameCombinations[key]) {\n    classNameCombinations[key] = powerSetPermutations(classNames);\n  }\n\n  return classNameCombinations[key];\n}\n\nexport function createStyleObject(classNames) {\n  var elementStyle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var stylesheet = arguments.length > 2 ? arguments[2] : undefined;\n  var nonTokenClassNames = classNames.filter(function (className) {\n    return className !== 'token';\n  });\n  var classNamesCombinations = getClassNameCombinations(nonTokenClassNames);\n  return classNamesCombinations.reduce(function (styleObject, className) {\n    return _objectSpread(_objectSpread({}, styleObject), stylesheet[className]);\n  }, elementStyle);\n}\nexport function createClassNameString(classNames) {\n  return classNames.join(' ');\n}\nexport function createChildren(stylesheet, useInlineStyles) {\n  var childrenCount = 0;\n  return function (children) {\n    childrenCount += 1;\n    return children.map(function (child, i) {\n      return createElement({\n        node: child,\n        stylesheet: stylesheet,\n        useInlineStyles: useInlineStyles,\n        key: \"code-segment-\".concat(childrenCount, \"-\").concat(i)\n      });\n    });\n  };\n}\nexport default function createElement(_ref) {\n  var node = _ref.node,\n      stylesheet = _ref.stylesheet,\n      _ref$style = _ref.style,\n      style = _ref$style === void 0 ? {} : _ref$style,\n      useInlineStyles = _ref.useInlineStyles,\n      key = _ref.key;\n  var properties = node.properties,\n      type = node.type,\n      TagName = node.tagName,\n      value = node.value;\n\n  if (type === 'text') {\n    return value;\n  } else if (TagName) {\n    var childrenCreator = createChildren(stylesheet, useInlineStyles);\n    var props;\n\n    if (!useInlineStyles) {\n      props = _objectSpread(_objectSpread({}, properties), {}, {\n        className: createClassNameString(properties.className)\n      });\n    } else {\n      var allStylesheetSelectors = Object.keys(stylesheet).reduce(function (classes, selector) {\n        selector.split('.').forEach(function (className) {\n          if (!classes.includes(className)) classes.push(className);\n        });\n        return classes;\n      }, []); // For compatibility with older versions of react-syntax-highlighter\n\n      var startingClassName = properties.className && properties.className.includes('token') ? ['token'] : [];\n      var className = properties.className && startingClassName.concat(properties.className.filter(function (className) {\n        return !allStylesheetSelectors.includes(className);\n      }));\n      props = _objectSpread(_objectSpread({}, properties), {}, {\n        className: createClassNameString(className) || undefined,\n        style: createStyleObject(properties.className, Object.assign({}, properties.style, style), stylesheet)\n      });\n    }\n\n    var children = childrenCreator(node.children);\n    return /*#__PURE__*/React.createElement(TagName, _extends({\n      key: key\n    }, props), children);\n  }\n}","export default (function (astGenerator, language) {\n  var langs = astGenerator.listLanguages();\n  return langs.indexOf(language) !== -1;\n});","import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _excluded = [\"language\", \"children\", \"style\", \"customStyle\", \"codeTagProps\", \"useInlineStyles\", \"showLineNumbers\", \"showInlineLineNumbers\", \"startingLineNumber\", \"lineNumberContainerStyle\", \"lineNumberStyle\", \"wrapLines\", \"wrapLongLines\", \"lineProps\", \"renderer\", \"PreTag\", \"CodeTag\", \"code\", \"astGenerator\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React from 'react';\nimport createElement from './create-element';\nimport checkForListedLanguage from './checkForListedLanguage';\nvar newLineRegex = /\\n/g;\n\nfunction getNewLines(str) {\n  return str.match(newLineRegex);\n}\n\nfunction getAllLineNumbers(_ref) {\n  var lines = _ref.lines,\n      startingLineNumber = _ref.startingLineNumber,\n      style = _ref.style;\n  return lines.map(function (_, i) {\n    var number = i + startingLineNumber;\n    return /*#__PURE__*/React.createElement(\"span\", {\n      key: \"line-\".concat(i),\n      className: \"react-syntax-highlighter-line-number\",\n      style: typeof style === 'function' ? style(number) : style\n    }, \"\".concat(number, \"\\n\"));\n  });\n}\n\nfunction AllLineNumbers(_ref2) {\n  var codeString = _ref2.codeString,\n      codeStyle = _ref2.codeStyle,\n      _ref2$containerStyle = _ref2.containerStyle,\n      containerStyle = _ref2$containerStyle === void 0 ? {\n    \"float\": 'left',\n    paddingRight: '10px'\n  } : _ref2$containerStyle,\n      _ref2$numberStyle = _ref2.numberStyle,\n      numberStyle = _ref2$numberStyle === void 0 ? {} : _ref2$numberStyle,\n      startingLineNumber = _ref2.startingLineNumber;\n  return /*#__PURE__*/React.createElement(\"code\", {\n    style: Object.assign({}, codeStyle, containerStyle)\n  }, getAllLineNumbers({\n    lines: codeString.replace(/\\n$/, '').split('\\n'),\n    style: numberStyle,\n    startingLineNumber: startingLineNumber\n  }));\n}\n\nfunction getEmWidthOfNumber(num) {\n  return \"\".concat(num.toString().length, \".25em\");\n}\n\nfunction getInlineLineNumber(lineNumber, inlineLineNumberStyle) {\n  return {\n    type: 'element',\n    tagName: 'span',\n    properties: {\n      key: \"line-number--\".concat(lineNumber),\n      className: ['comment', 'linenumber', 'react-syntax-highlighter-line-number'],\n      style: inlineLineNumberStyle\n    },\n    children: [{\n      type: 'text',\n      value: lineNumber\n    }]\n  };\n}\n\nfunction assembleLineNumberStyles(lineNumberStyle, lineNumber, largestLineNumber) {\n  // minimally necessary styling for line numbers\n  var defaultLineNumberStyle = {\n    display: 'inline-block',\n    minWidth: getEmWidthOfNumber(largestLineNumber),\n    paddingRight: '1em',\n    textAlign: 'right',\n    userSelect: 'none'\n  }; // prep custom styling\n\n  var customLineNumberStyle = typeof lineNumberStyle === 'function' ? lineNumberStyle(lineNumber) : lineNumberStyle; // combine\n\n  var assembledStyle = _objectSpread(_objectSpread({}, defaultLineNumberStyle), customLineNumberStyle);\n\n  return assembledStyle;\n}\n\nfunction createLineElement(_ref3) {\n  var children = _ref3.children,\n      lineNumber = _ref3.lineNumber,\n      lineNumberStyle = _ref3.lineNumberStyle,\n      largestLineNumber = _ref3.largestLineNumber,\n      showInlineLineNumbers = _ref3.showInlineLineNumbers,\n      _ref3$lineProps = _ref3.lineProps,\n      lineProps = _ref3$lineProps === void 0 ? {} : _ref3$lineProps,\n      _ref3$className = _ref3.className,\n      className = _ref3$className === void 0 ? [] : _ref3$className,\n      showLineNumbers = _ref3.showLineNumbers,\n      wrapLongLines = _ref3.wrapLongLines;\n  var properties = typeof lineProps === 'function' ? lineProps(lineNumber) : lineProps;\n  properties['className'] = className;\n\n  if (lineNumber && showInlineLineNumbers) {\n    var inlineLineNumberStyle = assembleLineNumberStyles(lineNumberStyle, lineNumber, largestLineNumber);\n    children.unshift(getInlineLineNumber(lineNumber, inlineLineNumberStyle));\n  }\n\n  if (wrapLongLines & showLineNumbers) {\n    properties.style = _objectSpread(_objectSpread({}, properties.style), {}, {\n      display: 'flex'\n    });\n  }\n\n  return {\n    type: 'element',\n    tagName: 'span',\n    properties: properties,\n    children: children\n  };\n}\n\nfunction flattenCodeTree(tree) {\n  var className = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var newTree = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n  for (var i = 0; i < tree.length; i++) {\n    var node = tree[i];\n\n    if (node.type === 'text') {\n      newTree.push(createLineElement({\n        children: [node],\n        className: _toConsumableArray(new Set(className))\n      }));\n    } else if (node.children) {\n      var classNames = className.concat(node.properties.className);\n      flattenCodeTree(node.children, classNames).forEach(function (i) {\n        return newTree.push(i);\n      });\n    }\n  }\n\n  return newTree;\n}\n\nfunction processLines(codeTree, wrapLines, lineProps, showLineNumbers, showInlineLineNumbers, startingLineNumber, largestLineNumber, lineNumberStyle, wrapLongLines) {\n  var _ref4;\n\n  var tree = flattenCodeTree(codeTree.value);\n  var newTree = [];\n  var lastLineBreakIndex = -1;\n  var index = 0;\n\n  function createWrappedLine(children, lineNumber) {\n    var className = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    return createLineElement({\n      children: children,\n      lineNumber: lineNumber,\n      lineNumberStyle: lineNumberStyle,\n      largestLineNumber: largestLineNumber,\n      showInlineLineNumbers: showInlineLineNumbers,\n      lineProps: lineProps,\n      className: className,\n      showLineNumbers: showLineNumbers,\n      wrapLongLines: wrapLongLines\n    });\n  }\n\n  function createUnwrappedLine(children, lineNumber) {\n    if (showLineNumbers && lineNumber && showInlineLineNumbers) {\n      var inlineLineNumberStyle = assembleLineNumberStyles(lineNumberStyle, lineNumber, largestLineNumber);\n      children.unshift(getInlineLineNumber(lineNumber, inlineLineNumberStyle));\n    }\n\n    return children;\n  }\n\n  function createLine(children, lineNumber) {\n    var className = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    return wrapLines || className.length > 0 ? createWrappedLine(children, lineNumber, className) : createUnwrappedLine(children, lineNumber);\n  }\n\n  var _loop = function _loop() {\n    var node = tree[index];\n    var value = node.children[0].value;\n    var newLines = getNewLines(value);\n\n    if (newLines) {\n      var splitValue = value.split('\\n');\n      splitValue.forEach(function (text, i) {\n        var lineNumber = showLineNumbers && newTree.length + startingLineNumber;\n        var newChild = {\n          type: 'text',\n          value: \"\".concat(text, \"\\n\")\n        }; // if it's the first line\n\n        if (i === 0) {\n          var _children = tree.slice(lastLineBreakIndex + 1, index).concat(createLineElement({\n            children: [newChild],\n            className: node.properties.className\n          }));\n\n          var _line = createLine(_children, lineNumber);\n\n          newTree.push(_line); // if it's the last line\n        } else if (i === splitValue.length - 1) {\n          var stringChild = tree[index + 1] && tree[index + 1].children && tree[index + 1].children[0];\n          var lastLineInPreviousSpan = {\n            type: 'text',\n            value: \"\".concat(text)\n          };\n\n          if (stringChild) {\n            var newElem = createLineElement({\n              children: [lastLineInPreviousSpan],\n              className: node.properties.className\n            });\n            tree.splice(index + 1, 0, newElem);\n          } else {\n            var _children2 = [lastLineInPreviousSpan];\n\n            var _line2 = createLine(_children2, lineNumber, node.properties.className);\n\n            newTree.push(_line2);\n          } // if it's neither the first nor the last line\n\n        } else {\n          var _children3 = [newChild];\n\n          var _line3 = createLine(_children3, lineNumber, node.properties.className);\n\n          newTree.push(_line3);\n        }\n      });\n      lastLineBreakIndex = index;\n    }\n\n    index++;\n  };\n\n  while (index < tree.length) {\n    _loop();\n  }\n\n  if (lastLineBreakIndex !== tree.length - 1) {\n    var children = tree.slice(lastLineBreakIndex + 1, tree.length);\n\n    if (children && children.length) {\n      var lineNumber = showLineNumbers && newTree.length + startingLineNumber;\n      var line = createLine(children, lineNumber);\n      newTree.push(line);\n    }\n  }\n\n  return wrapLines ? newTree : (_ref4 = []).concat.apply(_ref4, newTree);\n}\n\nfunction defaultRenderer(_ref5) {\n  var rows = _ref5.rows,\n      stylesheet = _ref5.stylesheet,\n      useInlineStyles = _ref5.useInlineStyles;\n  return rows.map(function (node, i) {\n    return createElement({\n      node: node,\n      stylesheet: stylesheet,\n      useInlineStyles: useInlineStyles,\n      key: \"code-segement\".concat(i)\n    });\n  });\n} // only highlight.js has the highlightAuto method\n\n\nfunction isHighlightJs(astGenerator) {\n  return astGenerator && typeof astGenerator.highlightAuto !== 'undefined';\n}\n\nfunction getCodeTree(_ref6) {\n  var astGenerator = _ref6.astGenerator,\n      language = _ref6.language,\n      code = _ref6.code,\n      defaultCodeValue = _ref6.defaultCodeValue;\n\n  // figure out whether we're using lowlight/highlight or refractor/prism\n  // then attempt highlighting accordingly\n  // lowlight/highlight?\n  if (isHighlightJs(astGenerator)) {\n    var hasLanguage = checkForListedLanguage(astGenerator, language);\n\n    if (language === 'text') {\n      return {\n        value: defaultCodeValue,\n        language: 'text'\n      };\n    } else if (hasLanguage) {\n      return astGenerator.highlight(language, code);\n    } else {\n      return astGenerator.highlightAuto(code);\n    }\n  } // must be refractor/prism, then\n\n\n  try {\n    return language && language !== 'text' ? {\n      value: astGenerator.highlight(code, language)\n    } : {\n      value: defaultCodeValue\n    };\n  } catch (e) {\n    return {\n      value: defaultCodeValue\n    };\n  }\n}\n\nexport default function (defaultAstGenerator, defaultStyle) {\n  return function SyntaxHighlighter(_ref7) {\n    var language = _ref7.language,\n        children = _ref7.children,\n        _ref7$style = _ref7.style,\n        style = _ref7$style === void 0 ? defaultStyle : _ref7$style,\n        _ref7$customStyle = _ref7.customStyle,\n        customStyle = _ref7$customStyle === void 0 ? {} : _ref7$customStyle,\n        _ref7$codeTagProps = _ref7.codeTagProps,\n        codeTagProps = _ref7$codeTagProps === void 0 ? {\n      className: language ? \"language-\".concat(language) : undefined,\n      style: _objectSpread(_objectSpread({}, style['code[class*=\"language-\"]']), style[\"code[class*=\\\"language-\".concat(language, \"\\\"]\")])\n    } : _ref7$codeTagProps,\n        _ref7$useInlineStyles = _ref7.useInlineStyles,\n        useInlineStyles = _ref7$useInlineStyles === void 0 ? true : _ref7$useInlineStyles,\n        _ref7$showLineNumbers = _ref7.showLineNumbers,\n        showLineNumbers = _ref7$showLineNumbers === void 0 ? false : _ref7$showLineNumbers,\n        _ref7$showInlineLineN = _ref7.showInlineLineNumbers,\n        showInlineLineNumbers = _ref7$showInlineLineN === void 0 ? true : _ref7$showInlineLineN,\n        _ref7$startingLineNum = _ref7.startingLineNumber,\n        startingLineNumber = _ref7$startingLineNum === void 0 ? 1 : _ref7$startingLineNum,\n        lineNumberContainerStyle = _ref7.lineNumberContainerStyle,\n        _ref7$lineNumberStyle = _ref7.lineNumberStyle,\n        lineNumberStyle = _ref7$lineNumberStyle === void 0 ? {} : _ref7$lineNumberStyle,\n        wrapLines = _ref7.wrapLines,\n        _ref7$wrapLongLines = _ref7.wrapLongLines,\n        wrapLongLines = _ref7$wrapLongLines === void 0 ? false : _ref7$wrapLongLines,\n        _ref7$lineProps = _ref7.lineProps,\n        lineProps = _ref7$lineProps === void 0 ? {} : _ref7$lineProps,\n        renderer = _ref7.renderer,\n        _ref7$PreTag = _ref7.PreTag,\n        PreTag = _ref7$PreTag === void 0 ? 'pre' : _ref7$PreTag,\n        _ref7$CodeTag = _ref7.CodeTag,\n        CodeTag = _ref7$CodeTag === void 0 ? 'code' : _ref7$CodeTag,\n        _ref7$code = _ref7.code,\n        code = _ref7$code === void 0 ? (Array.isArray(children) ? children[0] : children) || '' : _ref7$code,\n        astGenerator = _ref7.astGenerator,\n        rest = _objectWithoutProperties(_ref7, _excluded);\n\n    astGenerator = astGenerator || defaultAstGenerator;\n    var allLineNumbers = showLineNumbers ? /*#__PURE__*/React.createElement(AllLineNumbers, {\n      containerStyle: lineNumberContainerStyle,\n      codeStyle: codeTagProps.style || {},\n      numberStyle: lineNumberStyle,\n      startingLineNumber: startingLineNumber,\n      codeString: code\n    }) : null;\n    var defaultPreStyle = style.hljs || style['pre[class*=\"language-\"]'] || {\n      backgroundColor: '#fff'\n    };\n    var generatorClassName = isHighlightJs(astGenerator) ? 'hljs' : 'prismjs';\n    var preProps = useInlineStyles ? Object.assign({}, rest, {\n      style: Object.assign({}, defaultPreStyle, customStyle)\n    }) : Object.assign({}, rest, {\n      className: rest.className ? \"\".concat(generatorClassName, \" \").concat(rest.className) : generatorClassName,\n      style: Object.assign({}, customStyle)\n    });\n\n    if (wrapLongLines) {\n      codeTagProps.style = _objectSpread(_objectSpread({}, codeTagProps.style), {}, {\n        whiteSpace: 'pre-wrap'\n      });\n    } else {\n      codeTagProps.style = _objectSpread(_objectSpread({}, codeTagProps.style), {}, {\n        whiteSpace: 'pre'\n      });\n    }\n\n    if (!astGenerator) {\n      return /*#__PURE__*/React.createElement(PreTag, preProps, allLineNumbers, /*#__PURE__*/React.createElement(CodeTag, codeTagProps, code));\n    }\n    /*\n     * Some custom renderers rely on individual row elements so we need to turn wrapLines on\n     * if renderer is provided and wrapLines is undefined.\n     */\n\n\n    if (wrapLines === undefined && renderer || wrapLongLines) wrapLines = true;\n    renderer = renderer || defaultRenderer;\n    var defaultCodeValue = [{\n      type: 'text',\n      value: code\n    }];\n    var codeTree = getCodeTree({\n      astGenerator: astGenerator,\n      language: language,\n      code: code,\n      defaultCodeValue: defaultCodeValue\n    });\n\n    if (codeTree.language === null) {\n      codeTree.value = defaultCodeValue;\n    } // determine largest line number so that we can force minWidth on all linenumber elements\n\n\n    var largestLineNumber = codeTree.value.length + startingLineNumber;\n    var rows = processLines(codeTree, wrapLines, lineProps, showLineNumbers, showInlineLineNumbers, startingLineNumber, largestLineNumber, lineNumberStyle, wrapLongLines);\n    return /*#__PURE__*/React.createElement(PreTag, preProps, /*#__PURE__*/React.createElement(CodeTag, codeTagProps, !showInlineLineNumbers && allLineNumbers, renderer({\n      rows: rows,\n      stylesheet: style,\n      useInlineStyles: useInlineStyles\n    })));\n  };\n}","export default {\n  \"code[class*=\\\"language-\\\"]\": {\n    \"color\": \"black\",\n    \"background\": \"none\",\n    \"textShadow\": \"0 1px white\",\n    \"fontFamily\": \"Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace\",\n    \"fontSize\": \"1em\",\n    \"textAlign\": \"left\",\n    \"whiteSpace\": \"pre\",\n    \"wordSpacing\": \"normal\",\n    \"wordBreak\": \"normal\",\n    \"wordWrap\": \"normal\",\n    \"lineHeight\": \"1.5\",\n    \"MozTabSize\": \"4\",\n    \"OTabSize\": \"4\",\n    \"tabSize\": \"4\",\n    \"WebkitHyphens\": \"none\",\n    \"MozHyphens\": \"none\",\n    \"msHyphens\": \"none\",\n    \"hyphens\": \"none\"\n  },\n  \"pre[class*=\\\"language-\\\"]\": {\n    \"color\": \"black\",\n    \"background\": \"#f5f2f0\",\n    \"textShadow\": \"0 1px white\",\n    \"fontFamily\": \"Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace\",\n    \"fontSize\": \"1em\",\n    \"textAlign\": \"left\",\n    \"whiteSpace\": \"pre\",\n    \"wordSpacing\": \"normal\",\n    \"wordBreak\": \"normal\",\n    \"wordWrap\": \"normal\",\n    \"lineHeight\": \"1.5\",\n    \"MozTabSize\": \"4\",\n    \"OTabSize\": \"4\",\n    \"tabSize\": \"4\",\n    \"WebkitHyphens\": \"none\",\n    \"MozHyphens\": \"none\",\n    \"msHyphens\": \"none\",\n    \"hyphens\": \"none\",\n    \"padding\": \"1em\",\n    \"margin\": \".5em 0\",\n    \"overflow\": \"auto\"\n  },\n  \"pre[class*=\\\"language-\\\"]::-moz-selection\": {\n    \"textShadow\": \"none\",\n    \"background\": \"#b3d4fc\"\n  },\n  \"pre[class*=\\\"language-\\\"] ::-moz-selection\": {\n    \"textShadow\": \"none\",\n    \"background\": \"#b3d4fc\"\n  },\n  \"code[class*=\\\"language-\\\"]::-moz-selection\": {\n    \"textShadow\": \"none\",\n    \"background\": \"#b3d4fc\"\n  },\n  \"code[class*=\\\"language-\\\"] ::-moz-selection\": {\n    \"textShadow\": \"none\",\n    \"background\": \"#b3d4fc\"\n  },\n  \"pre[class*=\\\"language-\\\"]::selection\": {\n    \"textShadow\": \"none\",\n    \"background\": \"#b3d4fc\"\n  },\n  \"pre[class*=\\\"language-\\\"] ::selection\": {\n    \"textShadow\": \"none\",\n    \"background\": \"#b3d4fc\"\n  },\n  \"code[class*=\\\"language-\\\"]::selection\": {\n    \"textShadow\": \"none\",\n    \"background\": \"#b3d4fc\"\n  },\n  \"code[class*=\\\"language-\\\"] ::selection\": {\n    \"textShadow\": \"none\",\n    \"background\": \"#b3d4fc\"\n  },\n  \":not(pre) > code[class*=\\\"language-\\\"]\": {\n    \"background\": \"#f5f2f0\",\n    \"padding\": \".1em\",\n    \"borderRadius\": \".3em\",\n    \"whiteSpace\": \"normal\"\n  },\n  \"comment\": {\n    \"color\": \"slategray\"\n  },\n  \"prolog\": {\n    \"color\": \"slategray\"\n  },\n  \"doctype\": {\n    \"color\": \"slategray\"\n  },\n  \"cdata\": {\n    \"color\": \"slategray\"\n  },\n  \"punctuation\": {\n    \"color\": \"#999\"\n  },\n  \"namespace\": {\n    \"Opacity\": \".7\"\n  },\n  \"property\": {\n    \"color\": \"#905\"\n  },\n  \"tag\": {\n    \"color\": \"#905\"\n  },\n  \"boolean\": {\n    \"color\": \"#905\"\n  },\n  \"number\": {\n    \"color\": \"#905\"\n  },\n  \"constant\": {\n    \"color\": \"#905\"\n  },\n  \"symbol\": {\n    \"color\": \"#905\"\n  },\n  \"deleted\": {\n    \"color\": \"#905\"\n  },\n  \"selector\": {\n    \"color\": \"#690\"\n  },\n  \"attr-name\": {\n    \"color\": \"#690\"\n  },\n  \"string\": {\n    \"color\": \"#690\"\n  },\n  \"char\": {\n    \"color\": \"#690\"\n  },\n  \"builtin\": {\n    \"color\": \"#690\"\n  },\n  \"inserted\": {\n    \"color\": \"#690\"\n  },\n  \"operator\": {\n    \"color\": \"#9a6e3a\",\n    \"background\": \"hsla(0, 0%, 100%, .5)\"\n  },\n  \"entity\": {\n    \"color\": \"#9a6e3a\",\n    \"background\": \"hsla(0, 0%, 100%, .5)\",\n    \"cursor\": \"help\"\n  },\n  \"url\": {\n    \"color\": \"#9a6e3a\",\n    \"background\": \"hsla(0, 0%, 100%, .5)\"\n  },\n  \".language-css .token.string\": {\n    \"color\": \"#9a6e3a\",\n    \"background\": \"hsla(0, 0%, 100%, .5)\"\n  },\n  \".style .token.string\": {\n    \"color\": \"#9a6e3a\",\n    \"background\": \"hsla(0, 0%, 100%, .5)\"\n  },\n  \"atrule\": {\n    \"color\": \"#07a\"\n  },\n  \"attr-value\": {\n    \"color\": \"#07a\"\n  },\n  \"keyword\": {\n    \"color\": \"#07a\"\n  },\n  \"function\": {\n    \"color\": \"#DD4A68\"\n  },\n  \"class-name\": {\n    \"color\": \"#DD4A68\"\n  },\n  \"regex\": {\n    \"color\": \"#e90\"\n  },\n  \"important\": {\n    \"color\": \"#e90\",\n    \"fontWeight\": \"bold\"\n  },\n  \"variable\": {\n    \"color\": \"#e90\"\n  },\n  \"bold\": {\n    \"fontWeight\": \"bold\"\n  },\n  \"italic\": {\n    \"fontStyle\": \"italic\"\n  }\n};","//\n// This file has been auto-generated by the `npm run build-languages-prism` task\n//\nexport default ['abap', 'abnf', 'actionscript', 'ada', 'agda', 'al', 'antlr4', 'apacheconf', 'apex', 'apl', 'applescript', 'aql', 'arduino', 'arff', 'asciidoc', 'asm6502', 'asmatmel', 'aspnet', 'autohotkey', 'autoit', 'avisynth', 'avro-idl', 'bash', 'basic', 'batch', 'bbcode', 'bicep', 'birb', 'bison', 'bnf', 'brainfuck', 'brightscript', 'bro', 'bsl', 'c', 'cfscript', 'chaiscript', 'cil', 'clike', 'clojure', 'cmake', 'cobol', 'coffeescript', 'concurnas', 'coq', 'cpp', 'crystal', 'csharp', 'cshtml', 'csp', 'css-extras', 'css', 'csv', 'cypher', 'd', 'dart', 'dataweave', 'dax', 'dhall', 'diff', 'django', 'dns-zone-file', 'docker', 'dot', 'ebnf', 'editorconfig', 'eiffel', 'ejs', 'elixir', 'elm', 'erb', 'erlang', 'etlua', 'excel-formula', 'factor', 'false', 'firestore-security-rules', 'flow', 'fortran', 'fsharp', 'ftl', 'gap', 'gcode', 'gdscript', 'gedcom', 'gherkin', 'git', 'glsl', 'gml', 'gn', 'go-module', 'go', 'graphql', 'groovy', 'haml', 'handlebars', 'haskell', 'haxe', 'hcl', 'hlsl', 'hoon', 'hpkp', 'hsts', 'http', 'ichigojam', 'icon', 'icu-message-format', 'idris', 'iecst', 'ignore', 'inform7', 'ini', 'io', 'j', 'java', 'javadoc', 'javadoclike', 'javascript', 'javastacktrace', 'jexl', 'jolie', 'jq', 'js-extras', 'js-templates', 'jsdoc', 'json', 'json5', 'jsonp', 'jsstacktrace', 'jsx', 'julia', 'keepalived', 'keyman', 'kotlin', 'kumir', 'kusto', 'latex', 'latte', 'less', 'lilypond', 'liquid', 'lisp', 'livescript', 'llvm', 'log', 'lolcode', 'lua', 'magma', 'makefile', 'markdown', 'markup-templating', 'markup', 'matlab', 'maxscript', 'mel', 'mermaid', 'mizar', 'mongodb', 'monkey', 'moonscript', 'n1ql', 'n4js', 'nand2tetris-hdl', 'naniscript', 'nasm', 'neon', 'nevod', 'nginx', 'nim', 'nix', 'nsis', 'objectivec', 'ocaml', 'opencl', 'openqasm', 'oz', 'parigp', 'parser', 'pascal', 'pascaligo', 'pcaxis', 'peoplecode', 'perl', 'php-extras', 'php', 'phpdoc', 'plsql', 'powerquery', 'powershell', 'processing', 'prolog', 'promql', 'properties', 'protobuf', 'psl', 'pug', 'puppet', 'pure', 'purebasic', 'purescript', 'python', 'q', 'qml', 'qore', 'qsharp', 'r', 'racket', 'reason', 'regex', 'rego', 'renpy', 'rest', 'rip', 'roboconf', 'robotframework', 'ruby', 'rust', 'sas', 'sass', 'scala', 'scheme', 'scss', 'shell-session', 'smali', 'smalltalk', 'smarty', 'sml', 'solidity', 'solution-file', 'soy', 'sparql', 'splunk-spl', 'sqf', 'sql', 'squirrel', 'stan', 'stylus', 'swift', 'systemd', 't4-cs', 't4-templating', 't4-vb', 'tap', 'tcl', 'textile', 'toml', 'tremor', 'tsx', 'tt2', 'turtle', 'twig', 'typescript', 'typoscript', 'unrealscript', 'uorazor', 'uri', 'v', 'vala', 'vbnet', 'velocity', 'verilog', 'vhdl', 'vim', 'visual-basic', 'warpscript', 'wasm', 'web-idl', 'wiki', 'wolfram', 'wren', 'xeora', 'xml-doc', 'xojo', 'xquery', 'yaml', 'yang', 'zig'];","import highlight from './highlight';\nimport defaultStyle from './styles/prism/prism';\nimport refractor from 'refractor';\nimport supportedLanguages from './languages/prism/supported-languages';\nvar highlighter = highlight(refractor, defaultStyle);\nhighlighter.supportedLanguages = supportedLanguages;\nexport default highlighter;","export default {\n  \"code[class*=\\\"language-\\\"]\": {\n    \"background\": \"hsl(230, 1%, 98%)\",\n    \"color\": \"hsl(230, 8%, 24%)\",\n    \"fontFamily\": \"\\\"Fira Code\\\", \\\"Fira Mono\\\", Menlo, Consolas, \\\"DejaVu Sans Mono\\\", monospace\",\n    \"direction\": \"ltr\",\n    \"textAlign\": \"left\",\n    \"whiteSpace\": \"pre\",\n    \"wordSpacing\": \"normal\",\n    \"wordBreak\": \"normal\",\n    \"lineHeight\": \"1.5\",\n    \"MozTabSize\": \"2\",\n    \"OTabSize\": \"2\",\n    \"tabSize\": \"2\",\n    \"WebkitHyphens\": \"none\",\n    \"MozHyphens\": \"none\",\n    \"msHyphens\": \"none\",\n    \"hyphens\": \"none\"\n  },\n  \"pre[class*=\\\"language-\\\"]\": {\n    \"background\": \"hsl(230, 1%, 98%)\",\n    \"color\": \"hsl(230, 8%, 24%)\",\n    \"fontFamily\": \"\\\"Fira Code\\\", \\\"Fira Mono\\\", Menlo, Consolas, \\\"DejaVu Sans Mono\\\", monospace\",\n    \"direction\": \"ltr\",\n    \"textAlign\": \"left\",\n    \"whiteSpace\": \"pre\",\n    \"wordSpacing\": \"normal\",\n    \"wordBreak\": \"normal\",\n    \"lineHeight\": \"1.5\",\n    \"MozTabSize\": \"2\",\n    \"OTabSize\": \"2\",\n    \"tabSize\": \"2\",\n    \"WebkitHyphens\": \"none\",\n    \"MozHyphens\": \"none\",\n    \"msHyphens\": \"none\",\n    \"hyphens\": \"none\",\n    \"padding\": \"1em\",\n    \"margin\": \"0.5em 0\",\n    \"overflow\": \"auto\",\n    \"borderRadius\": \"0.3em\"\n  },\n  \"code[class*=\\\"language-\\\"]::-moz-selection\": {\n    \"background\": \"hsl(230, 1%, 90%)\",\n    \"color\": \"inherit\"\n  },\n  \"code[class*=\\\"language-\\\"] *::-moz-selection\": {\n    \"background\": \"hsl(230, 1%, 90%)\",\n    \"color\": \"inherit\"\n  },\n  \"pre[class*=\\\"language-\\\"] *::-moz-selection\": {\n    \"background\": \"hsl(230, 1%, 90%)\",\n    \"color\": \"inherit\"\n  },\n  \"code[class*=\\\"language-\\\"]::selection\": {\n    \"background\": \"hsl(230, 1%, 90%)\",\n    \"color\": \"inherit\"\n  },\n  \"code[class*=\\\"language-\\\"] *::selection\": {\n    \"background\": \"hsl(230, 1%, 90%)\",\n    \"color\": \"inherit\"\n  },\n  \"pre[class*=\\\"language-\\\"] *::selection\": {\n    \"background\": \"hsl(230, 1%, 90%)\",\n    \"color\": \"inherit\"\n  },\n  \":not(pre) > code[class*=\\\"language-\\\"]\": {\n    \"padding\": \"0.2em 0.3em\",\n    \"borderRadius\": \"0.3em\",\n    \"whiteSpace\": \"normal\"\n  },\n  \"comment\": {\n    \"color\": \"hsl(230, 4%, 64%)\",\n    \"fontStyle\": \"italic\"\n  },\n  \"prolog\": {\n    \"color\": \"hsl(230, 4%, 64%)\"\n  },\n  \"cdata\": {\n    \"color\": \"hsl(230, 4%, 64%)\"\n  },\n  \"doctype\": {\n    \"color\": \"hsl(230, 8%, 24%)\"\n  },\n  \"punctuation\": {\n    \"color\": \"hsl(230, 8%, 24%)\"\n  },\n  \"entity\": {\n    \"color\": \"hsl(230, 8%, 24%)\",\n    \"cursor\": \"help\"\n  },\n  \"attr-name\": {\n    \"color\": \"hsl(35, 99%, 36%)\"\n  },\n  \"class-name\": {\n    \"color\": \"hsl(35, 99%, 36%)\"\n  },\n  \"boolean\": {\n    \"color\": \"hsl(35, 99%, 36%)\"\n  },\n  \"constant\": {\n    \"color\": \"hsl(35, 99%, 36%)\"\n  },\n  \"number\": {\n    \"color\": \"hsl(35, 99%, 36%)\"\n  },\n  \"atrule\": {\n    \"color\": \"hsl(35, 99%, 36%)\"\n  },\n  \"keyword\": {\n    \"color\": \"hsl(301, 63%, 40%)\"\n  },\n  \"property\": {\n    \"color\": \"hsl(5, 74%, 59%)\"\n  },\n  \"tag\": {\n    \"color\": \"hsl(5, 74%, 59%)\"\n  },\n  \"symbol\": {\n    \"color\": \"hsl(5, 74%, 59%)\"\n  },\n  \"deleted\": {\n    \"color\": \"hsl(5, 74%, 59%)\"\n  },\n  \"important\": {\n    \"color\": \"hsl(5, 74%, 59%)\"\n  },\n  \"selector\": {\n    \"color\": \"hsl(119, 34%, 47%)\"\n  },\n  \"string\": {\n    \"color\": \"hsl(119, 34%, 47%)\"\n  },\n  \"char\": {\n    \"color\": \"hsl(119, 34%, 47%)\"\n  },\n  \"builtin\": {\n    \"color\": \"hsl(119, 34%, 47%)\"\n  },\n  \"inserted\": {\n    \"color\": \"hsl(119, 34%, 47%)\"\n  },\n  \"regex\": {\n    \"color\": \"hsl(119, 34%, 47%)\"\n  },\n  \"attr-value\": {\n    \"color\": \"hsl(119, 34%, 47%)\"\n  },\n  \"attr-value > .token.punctuation\": {\n    \"color\": \"hsl(119, 34%, 47%)\"\n  },\n  \"variable\": {\n    \"color\": \"hsl(221, 87%, 60%)\"\n  },\n  \"operator\": {\n    \"color\": \"hsl(221, 87%, 60%)\"\n  },\n  \"function\": {\n    \"color\": \"hsl(221, 87%, 60%)\"\n  },\n  \"url\": {\n    \"color\": \"hsl(198, 99%, 37%)\"\n  },\n  \"attr-value > .token.punctuation.attr-equals\": {\n    \"color\": \"hsl(230, 8%, 24%)\"\n  },\n  \"special-attr > .token.attr-value > .token.value.css\": {\n    \"color\": \"hsl(230, 8%, 24%)\"\n  },\n  \".language-css .token.selector\": {\n    \"color\": \"hsl(5, 74%, 59%)\"\n  },\n  \".language-css .token.property\": {\n    \"color\": \"hsl(230, 8%, 24%)\"\n  },\n  \".language-css .token.function\": {\n    \"color\": \"hsl(198, 99%, 37%)\"\n  },\n  \".language-css .token.url > .token.function\": {\n    \"color\": \"hsl(198, 99%, 37%)\"\n  },\n  \".language-css .token.url > .token.string.url\": {\n    \"color\": \"hsl(119, 34%, 47%)\"\n  },\n  \".language-css .token.important\": {\n    \"color\": \"hsl(301, 63%, 40%)\"\n  },\n  \".language-css .token.atrule .token.rule\": {\n    \"color\": \"hsl(301, 63%, 40%)\"\n  },\n  \".language-javascript .token.operator\": {\n    \"color\": \"hsl(301, 63%, 40%)\"\n  },\n  \".language-javascript .token.template-string > .token.interpolation > .token.interpolation-punctuation.punctuation\": {\n    \"color\": \"hsl(344, 84%, 43%)\"\n  },\n  \".language-json .token.operator\": {\n    \"color\": \"hsl(230, 8%, 24%)\"\n  },\n  \".language-json .token.null.keyword\": {\n    \"color\": \"hsl(35, 99%, 36%)\"\n  },\n  \".language-markdown .token.url\": {\n    \"color\": \"hsl(230, 8%, 24%)\"\n  },\n  \".language-markdown .token.url > .token.operator\": {\n    \"color\": \"hsl(230, 8%, 24%)\"\n  },\n  \".language-markdown .token.url-reference.url > .token.string\": {\n    \"color\": \"hsl(230, 8%, 24%)\"\n  },\n  \".language-markdown .token.url > .token.content\": {\n    \"color\": \"hsl(221, 87%, 60%)\"\n  },\n  \".language-markdown .token.url > .token.url\": {\n    \"color\": \"hsl(198, 99%, 37%)\"\n  },\n  \".language-markdown .token.url-reference.url\": {\n    \"color\": \"hsl(198, 99%, 37%)\"\n  },\n  \".language-markdown .token.blockquote.punctuation\": {\n    \"color\": \"hsl(230, 4%, 64%)\",\n    \"fontStyle\": \"italic\"\n  },\n  \".language-markdown .token.hr.punctuation\": {\n    \"color\": \"hsl(230, 4%, 64%)\",\n    \"fontStyle\": \"italic\"\n  },\n  \".language-markdown .token.code-snippet\": {\n    \"color\": \"hsl(119, 34%, 47%)\"\n  },\n  \".language-markdown .token.bold .token.content\": {\n    \"color\": \"hsl(35, 99%, 36%)\"\n  },\n  \".language-markdown .token.italic .token.content\": {\n    \"color\": \"hsl(301, 63%, 40%)\"\n  },\n  \".language-markdown .token.strike .token.content\": {\n    \"color\": \"hsl(5, 74%, 59%)\"\n  },\n  \".language-markdown .token.strike .token.punctuation\": {\n    \"color\": \"hsl(5, 74%, 59%)\"\n  },\n  \".language-markdown .token.list.punctuation\": {\n    \"color\": \"hsl(5, 74%, 59%)\"\n  },\n  \".language-markdown .token.title.important > .token.punctuation\": {\n    \"color\": \"hsl(5, 74%, 59%)\"\n  },\n  \"bold\": {\n    \"fontWeight\": \"bold\"\n  },\n  \"italic\": {\n    \"fontStyle\": \"italic\"\n  },\n  \"namespace\": {\n    \"Opacity\": \"0.8\"\n  },\n  \"token.tab:not(:empty):before\": {\n    \"color\": \"hsla(230, 8%, 24%, 0.2)\"\n  },\n  \"token.cr:before\": {\n    \"color\": \"hsla(230, 8%, 24%, 0.2)\"\n  },\n  \"token.lf:before\": {\n    \"color\": \"hsla(230, 8%, 24%, 0.2)\"\n  },\n  \"token.space:before\": {\n    \"color\": \"hsla(230, 8%, 24%, 0.2)\"\n  },\n  \"div.code-toolbar > .toolbar.toolbar > .toolbar-item\": {\n    \"marginRight\": \"0.4em\"\n  },\n  \"div.code-toolbar > .toolbar.toolbar > .toolbar-item > button\": {\n    \"background\": \"hsl(230, 1%, 90%)\",\n    \"color\": \"hsl(230, 6%, 44%)\",\n    \"padding\": \"0.1em 0.4em\",\n    \"borderRadius\": \"0.3em\"\n  },\n  \"div.code-toolbar > .toolbar.toolbar > .toolbar-item > a\": {\n    \"background\": \"hsl(230, 1%, 90%)\",\n    \"color\": \"hsl(230, 6%, 44%)\",\n    \"padding\": \"0.1em 0.4em\",\n    \"borderRadius\": \"0.3em\"\n  },\n  \"div.code-toolbar > .toolbar.toolbar > .toolbar-item > span\": {\n    \"background\": \"hsl(230, 1%, 90%)\",\n    \"color\": \"hsl(230, 6%, 44%)\",\n    \"padding\": \"0.1em 0.4em\",\n    \"borderRadius\": \"0.3em\"\n  },\n  \"div.code-toolbar > .toolbar.toolbar > .toolbar-item > button:hover\": {\n    \"background\": \"hsl(230, 1%, 78%)\",\n    \"color\": \"hsl(230, 8%, 24%)\"\n  },\n  \"div.code-toolbar > .toolbar.toolbar > .toolbar-item > button:focus\": {\n    \"background\": \"hsl(230, 1%, 78%)\",\n    \"color\": \"hsl(230, 8%, 24%)\"\n  },\n  \"div.code-toolbar > .toolbar.toolbar > .toolbar-item > a:hover\": {\n    \"background\": \"hsl(230, 1%, 78%)\",\n    \"color\": \"hsl(230, 8%, 24%)\"\n  },\n  \"div.code-toolbar > .toolbar.toolbar > .toolbar-item > a:focus\": {\n    \"background\": \"hsl(230, 1%, 78%)\",\n    \"color\": \"hsl(230, 8%, 24%)\"\n  },\n  \"div.code-toolbar > .toolbar.toolbar > .toolbar-item > span:hover\": {\n    \"background\": \"hsl(230, 1%, 78%)\",\n    \"color\": \"hsl(230, 8%, 24%)\"\n  },\n  \"div.code-toolbar > .toolbar.toolbar > .toolbar-item > span:focus\": {\n    \"background\": \"hsl(230, 1%, 78%)\",\n    \"color\": \"hsl(230, 8%, 24%)\"\n  },\n  \".line-highlight.line-highlight\": {\n    \"background\": \"hsla(230, 8%, 24%, 0.05)\"\n  },\n  \".line-highlight.line-highlight:before\": {\n    \"background\": \"hsl(230, 1%, 90%)\",\n    \"color\": \"hsl(230, 8%, 24%)\",\n    \"padding\": \"0.1em 0.6em\",\n    \"borderRadius\": \"0.3em\",\n    \"boxShadow\": \"0 2px 0 0 rgba(0, 0, 0, 0.2)\"\n  },\n  \".line-highlight.line-highlight[data-end]:after\": {\n    \"background\": \"hsl(230, 1%, 90%)\",\n    \"color\": \"hsl(230, 8%, 24%)\",\n    \"padding\": \"0.1em 0.6em\",\n    \"borderRadius\": \"0.3em\",\n    \"boxShadow\": \"0 2px 0 0 rgba(0, 0, 0, 0.2)\"\n  },\n  \"pre[id].linkable-line-numbers.linkable-line-numbers span.line-numbers-rows > span:hover:before\": {\n    \"backgroundColor\": \"hsla(230, 8%, 24%, 0.05)\"\n  },\n  \".line-numbers.line-numbers .line-numbers-rows\": {\n    \"borderRightColor\": \"hsla(230, 8%, 24%, 0.2)\"\n  },\n  \".command-line .command-line-prompt\": {\n    \"borderRightColor\": \"hsla(230, 8%, 24%, 0.2)\"\n  },\n  \".line-numbers .line-numbers-rows > span:before\": {\n    \"color\": \"hsl(230, 1%, 62%)\"\n  },\n  \".command-line .command-line-prompt > span:before\": {\n    \"color\": \"hsl(230, 1%, 62%)\"\n  },\n  \".rainbow-braces .token.token.punctuation.brace-level-1\": {\n    \"color\": \"hsl(5, 74%, 59%)\"\n  },\n  \".rainbow-braces .token.token.punctuation.brace-level-5\": {\n    \"color\": \"hsl(5, 74%, 59%)\"\n  },\n  \".rainbow-braces .token.token.punctuation.brace-level-9\": {\n    \"color\": \"hsl(5, 74%, 59%)\"\n  },\n  \".rainbow-braces .token.token.punctuation.brace-level-2\": {\n    \"color\": \"hsl(119, 34%, 47%)\"\n  },\n  \".rainbow-braces .token.token.punctuation.brace-level-6\": {\n    \"color\": \"hsl(119, 34%, 47%)\"\n  },\n  \".rainbow-braces .token.token.punctuation.brace-level-10\": {\n    \"color\": \"hsl(119, 34%, 47%)\"\n  },\n  \".rainbow-braces .token.token.punctuation.brace-level-3\": {\n    \"color\": \"hsl(221, 87%, 60%)\"\n  },\n  \".rainbow-braces .token.token.punctuation.brace-level-7\": {\n    \"color\": \"hsl(221, 87%, 60%)\"\n  },\n  \".rainbow-braces .token.token.punctuation.brace-level-11\": {\n    \"color\": \"hsl(221, 87%, 60%)\"\n  },\n  \".rainbow-braces .token.token.punctuation.brace-level-4\": {\n    \"color\": \"hsl(301, 63%, 40%)\"\n  },\n  \".rainbow-braces .token.token.punctuation.brace-level-8\": {\n    \"color\": \"hsl(301, 63%, 40%)\"\n  },\n  \".rainbow-braces .token.token.punctuation.brace-level-12\": {\n    \"color\": \"hsl(301, 63%, 40%)\"\n  },\n  \"pre.diff-highlight > code .token.token.deleted:not(.prefix)\": {\n    \"backgroundColor\": \"hsla(353, 100%, 66%, 0.15)\"\n  },\n  \"pre > code.diff-highlight .token.token.deleted:not(.prefix)\": {\n    \"backgroundColor\": \"hsla(353, 100%, 66%, 0.15)\"\n  },\n  \"pre.diff-highlight > code .token.token.deleted:not(.prefix)::-moz-selection\": {\n    \"backgroundColor\": \"hsla(353, 95%, 66%, 0.25)\"\n  },\n  \"pre.diff-highlight > code .token.token.deleted:not(.prefix) *::-moz-selection\": {\n    \"backgroundColor\": \"hsla(353, 95%, 66%, 0.25)\"\n  },\n  \"pre > code.diff-highlight .token.token.deleted:not(.prefix)::-moz-selection\": {\n    \"backgroundColor\": \"hsla(353, 95%, 66%, 0.25)\"\n  },\n  \"pre > code.diff-highlight .token.token.deleted:not(.prefix) *::-moz-selection\": {\n    \"backgroundColor\": \"hsla(353, 95%, 66%, 0.25)\"\n  },\n  \"pre.diff-highlight > code .token.token.deleted:not(.prefix)::selection\": {\n    \"backgroundColor\": \"hsla(353, 95%, 66%, 0.25)\"\n  },\n  \"pre.diff-highlight > code .token.token.deleted:not(.prefix) *::selection\": {\n    \"backgroundColor\": \"hsla(353, 95%, 66%, 0.25)\"\n  },\n  \"pre > code.diff-highlight .token.token.deleted:not(.prefix)::selection\": {\n    \"backgroundColor\": \"hsla(353, 95%, 66%, 0.25)\"\n  },\n  \"pre > code.diff-highlight .token.token.deleted:not(.prefix) *::selection\": {\n    \"backgroundColor\": \"hsla(353, 95%, 66%, 0.25)\"\n  },\n  \"pre.diff-highlight > code .token.token.inserted:not(.prefix)\": {\n    \"backgroundColor\": \"hsla(137, 100%, 55%, 0.15)\"\n  },\n  \"pre > code.diff-highlight .token.token.inserted:not(.prefix)\": {\n    \"backgroundColor\": \"hsla(137, 100%, 55%, 0.15)\"\n  },\n  \"pre.diff-highlight > code .token.token.inserted:not(.prefix)::-moz-selection\": {\n    \"backgroundColor\": \"hsla(135, 73%, 55%, 0.25)\"\n  },\n  \"pre.diff-highlight > code .token.token.inserted:not(.prefix) *::-moz-selection\": {\n    \"backgroundColor\": \"hsla(135, 73%, 55%, 0.25)\"\n  },\n  \"pre > code.diff-highlight .token.token.inserted:not(.prefix)::-moz-selection\": {\n    \"backgroundColor\": \"hsla(135, 73%, 55%, 0.25)\"\n  },\n  \"pre > code.diff-highlight .token.token.inserted:not(.prefix) *::-moz-selection\": {\n    \"backgroundColor\": \"hsla(135, 73%, 55%, 0.25)\"\n  },\n  \"pre.diff-highlight > code .token.token.inserted:not(.prefix)::selection\": {\n    \"backgroundColor\": \"hsla(135, 73%, 55%, 0.25)\"\n  },\n  \"pre.diff-highlight > code .token.token.inserted:not(.prefix) *::selection\": {\n    \"backgroundColor\": \"hsla(135, 73%, 55%, 0.25)\"\n  },\n  \"pre > code.diff-highlight .token.token.inserted:not(.prefix)::selection\": {\n    \"backgroundColor\": \"hsla(135, 73%, 55%, 0.25)\"\n  },\n  \"pre > code.diff-highlight .token.token.inserted:not(.prefix) *::selection\": {\n    \"backgroundColor\": \"hsla(135, 73%, 55%, 0.25)\"\n  },\n  \".prism-previewer.prism-previewer:before\": {\n    \"borderColor\": \"hsl(0, 0, 95%)\"\n  },\n  \".prism-previewer-gradient.prism-previewer-gradient div\": {\n    \"borderColor\": \"hsl(0, 0, 95%)\",\n    \"borderRadius\": \"0.3em\"\n  },\n  \".prism-previewer-color.prism-previewer-color:before\": {\n    \"borderRadius\": \"0.3em\"\n  },\n  \".prism-previewer-easing.prism-previewer-easing:before\": {\n    \"borderRadius\": \"0.3em\"\n  },\n  \".prism-previewer.prism-previewer:after\": {\n    \"borderTopColor\": \"hsl(0, 0, 95%)\"\n  },\n  \".prism-previewer-flipped.prism-previewer-flipped.after\": {\n    \"borderBottomColor\": \"hsl(0, 0, 95%)\"\n  },\n  \".prism-previewer-angle.prism-previewer-angle:before\": {\n    \"background\": \"hsl(0, 0%, 100%)\"\n  },\n  \".prism-previewer-time.prism-previewer-time:before\": {\n    \"background\": \"hsl(0, 0%, 100%)\"\n  },\n  \".prism-previewer-easing.prism-previewer-easing\": {\n    \"background\": \"hsl(0, 0%, 100%)\"\n  },\n  \".prism-previewer-angle.prism-previewer-angle circle\": {\n    \"stroke\": \"hsl(230, 8%, 24%)\",\n    \"strokeOpacity\": \"1\"\n  },\n  \".prism-previewer-time.prism-previewer-time circle\": {\n    \"stroke\": \"hsl(230, 8%, 24%)\",\n    \"strokeOpacity\": \"1\"\n  },\n  \".prism-previewer-easing.prism-previewer-easing circle\": {\n    \"stroke\": \"hsl(230, 8%, 24%)\",\n    \"fill\": \"transparent\"\n  },\n  \".prism-previewer-easing.prism-previewer-easing path\": {\n    \"stroke\": \"hsl(230, 8%, 24%)\"\n  },\n  \".prism-previewer-easing.prism-previewer-easing line\": {\n    \"stroke\": \"hsl(230, 8%, 24%)\"\n  }\n};","'use strict'\n\n/* global window, self */\n\n// istanbul ignore next - Don't allow Prism to run on page load in browser or\n// to start messaging from workers.\nvar ctx =\n  typeof globalThis === 'object'\n    ? globalThis\n    : typeof self === 'object'\n    ? self\n    : typeof window === 'object'\n    ? window\n    : typeof global === 'object'\n    ? global\n    : {}\n\nvar restore = capture()\n\nctx.Prism = {manual: true, disableWorkerMessageHandler: true}\n\n// Load all stuff in `prism.js` itself, except for `prism-file-highlight.js`.\n// The wrapped non-leaky grammars are loaded instead of Prism’s originals.\nvar h = require('hastscript')\nvar decode = require('parse-entities')\nvar Prism = require('prismjs/components/prism-core')\nvar markup = require('./lang/markup')\nvar css = require('./lang/css')\nvar clike = require('./lang/clike')\nvar js = require('./lang/javascript')\n\nrestore()\n\nvar own = {}.hasOwnProperty\n\n// Inherit.\nfunction Refractor() {}\n\nRefractor.prototype = Prism\n\n// Construct.\nvar refract = new Refractor()\n\n// Expose.\nmodule.exports = refract\n\n// Create.\nrefract.highlight = highlight\nrefract.register = register\nrefract.alias = alias\nrefract.registered = registered\nrefract.listLanguages = listLanguages\n\n// Register bundled grammars.\nregister(markup)\nregister(css)\nregister(clike)\nregister(js)\n\nrefract.util.encode = encode\nrefract.Token.stringify = stringify\n\nfunction register(grammar) {\n  if (typeof grammar !== 'function' || !grammar.displayName) {\n    throw new Error('Expected `function` for `grammar`, got `' + grammar + '`')\n  }\n\n  // Do not duplicate registrations.\n  if (refract.languages[grammar.displayName] === undefined) {\n    grammar(refract)\n  }\n}\n\nfunction alias(name, alias) {\n  var languages = refract.languages\n  var map = name\n  var key\n  var list\n  var length\n  var index\n\n  if (alias) {\n    map = {}\n    map[name] = alias\n  }\n\n  for (key in map) {\n    list = map[key]\n    list = typeof list === 'string' ? [list] : list\n    length = list.length\n    index = -1\n\n    while (++index < length) {\n      languages[list[index]] = languages[key]\n    }\n  }\n}\n\nfunction highlight(value, name) {\n  var sup = Prism.highlight\n  var grammar\n\n  if (typeof value !== 'string') {\n    throw new Error('Expected `string` for `value`, got `' + value + '`')\n  }\n\n  // `name` is a grammar object.\n  if (refract.util.type(name) === 'Object') {\n    grammar = name\n    name = null\n  } else {\n    if (typeof name !== 'string') {\n      throw new Error('Expected `string` for `name`, got `' + name + '`')\n    }\n\n    if (own.call(refract.languages, name)) {\n      grammar = refract.languages[name]\n    } else {\n      throw new Error('Unknown language: `' + name + '` is not registered')\n    }\n  }\n\n  return sup.call(this, value, grammar, name)\n}\n\nfunction registered(language) {\n  if (typeof language !== 'string') {\n    throw new Error('Expected `string` for `language`, got `' + language + '`')\n  }\n\n  return own.call(refract.languages, language)\n}\n\nfunction listLanguages() {\n  var languages = refract.languages\n  var list = []\n  var language\n\n  for (language in languages) {\n    if (\n      own.call(languages, language) &&\n      typeof languages[language] === 'object'\n    ) {\n      list.push(language)\n    }\n  }\n\n  return list\n}\n\nfunction stringify(value, language, parent) {\n  var env\n\n  if (typeof value === 'string') {\n    return {type: 'text', value: value}\n  }\n\n  if (refract.util.type(value) === 'Array') {\n    return stringifyAll(value, language)\n  }\n\n  env = {\n    type: value.type,\n    content: refract.Token.stringify(value.content, language, parent),\n    tag: 'span',\n    classes: ['token', value.type],\n    attributes: {},\n    language: language,\n    parent: parent\n  }\n\n  if (value.alias) {\n    env.classes = env.classes.concat(value.alias)\n  }\n\n  refract.hooks.run('wrap', env)\n\n  return h(\n    env.tag + '.' + env.classes.join('.'),\n    attributes(env.attributes),\n    env.content\n  )\n}\n\nfunction stringifyAll(values, language) {\n  var result = []\n  var length = values.length\n  var index = -1\n  var value\n\n  while (++index < length) {\n    value = values[index]\n\n    if (value !== '' && value !== null && value !== undefined) {\n      result.push(value)\n    }\n  }\n\n  index = -1\n  length = result.length\n\n  while (++index < length) {\n    value = result[index]\n    result[index] = refract.Token.stringify(value, language, result)\n  }\n\n  return result\n}\n\nfunction encode(tokens) {\n  return tokens\n}\n\nfunction attributes(attrs) {\n  var key\n\n  for (key in attrs) {\n    attrs[key] = decode(attrs[key])\n  }\n\n  return attrs\n}\n\nfunction capture() {\n  var defined = 'Prism' in ctx\n  /* istanbul ignore next */\n  var current = defined ? ctx.Prism : undefined\n\n  return restore\n\n  function restore() {\n    /* istanbul ignore else - Clean leaks after Prism. */\n    if (defined) {\n      ctx.Prism = current\n    } else {\n      delete ctx.Prism\n    }\n\n    defined = undefined\n    current = undefined\n  }\n}\n","'use strict'\n\nvar refractor = require('./core.js')\n\nmodule.exports = refractor\n\nrefractor.register(require('./lang/abap.js'))\nrefractor.register(require('./lang/abnf.js'))\nrefractor.register(require('./lang/actionscript.js'))\nrefractor.register(require('./lang/ada.js'))\nrefractor.register(require('./lang/agda.js'))\nrefractor.register(require('./lang/al.js'))\nrefractor.register(require('./lang/antlr4.js'))\nrefractor.register(require('./lang/apacheconf.js'))\nrefractor.register(require('./lang/apex.js'))\nrefractor.register(require('./lang/apl.js'))\nrefractor.register(require('./lang/applescript.js'))\nrefractor.register(require('./lang/aql.js'))\nrefractor.register(require('./lang/arduino.js'))\nrefractor.register(require('./lang/arff.js'))\nrefractor.register(require('./lang/asciidoc.js'))\nrefractor.register(require('./lang/asm6502.js'))\nrefractor.register(require('./lang/asmatmel.js'))\nrefractor.register(require('./lang/aspnet.js'))\nrefractor.register(require('./lang/autohotkey.js'))\nrefractor.register(require('./lang/autoit.js'))\nrefractor.register(require('./lang/avisynth.js'))\nrefractor.register(require('./lang/avro-idl.js'))\nrefractor.register(require('./lang/bash.js'))\nrefractor.register(require('./lang/basic.js'))\nrefractor.register(require('./lang/batch.js'))\nrefractor.register(require('./lang/bbcode.js'))\nrefractor.register(require('./lang/bicep.js'))\nrefractor.register(require('./lang/birb.js'))\nrefractor.register(require('./lang/bison.js'))\nrefractor.register(require('./lang/bnf.js'))\nrefractor.register(require('./lang/brainfuck.js'))\nrefractor.register(require('./lang/brightscript.js'))\nrefractor.register(require('./lang/bro.js'))\nrefractor.register(require('./lang/bsl.js'))\nrefractor.register(require('./lang/c.js'))\nrefractor.register(require('./lang/cfscript.js'))\nrefractor.register(require('./lang/chaiscript.js'))\nrefractor.register(require('./lang/cil.js'))\nrefractor.register(require('./lang/clojure.js'))\nrefractor.register(require('./lang/cmake.js'))\nrefractor.register(require('./lang/cobol.js'))\nrefractor.register(require('./lang/coffeescript.js'))\nrefractor.register(require('./lang/concurnas.js'))\nrefractor.register(require('./lang/coq.js'))\nrefractor.register(require('./lang/cpp.js'))\nrefractor.register(require('./lang/crystal.js'))\nrefractor.register(require('./lang/csharp.js'))\nrefractor.register(require('./lang/cshtml.js'))\nrefractor.register(require('./lang/csp.js'))\nrefractor.register(require('./lang/css-extras.js'))\nrefractor.register(require('./lang/csv.js'))\nrefractor.register(require('./lang/cypher.js'))\nrefractor.register(require('./lang/d.js'))\nrefractor.register(require('./lang/dart.js'))\nrefractor.register(require('./lang/dataweave.js'))\nrefractor.register(require('./lang/dax.js'))\nrefractor.register(require('./lang/dhall.js'))\nrefractor.register(require('./lang/diff.js'))\nrefractor.register(require('./lang/django.js'))\nrefractor.register(require('./lang/dns-zone-file.js'))\nrefractor.register(require('./lang/docker.js'))\nrefractor.register(require('./lang/dot.js'))\nrefractor.register(require('./lang/ebnf.js'))\nrefractor.register(require('./lang/editorconfig.js'))\nrefractor.register(require('./lang/eiffel.js'))\nrefractor.register(require('./lang/ejs.js'))\nrefractor.register(require('./lang/elixir.js'))\nrefractor.register(require('./lang/elm.js'))\nrefractor.register(require('./lang/erb.js'))\nrefractor.register(require('./lang/erlang.js'))\nrefractor.register(require('./lang/etlua.js'))\nrefractor.register(require('./lang/excel-formula.js'))\nrefractor.register(require('./lang/factor.js'))\nrefractor.register(require('./lang/false.js'))\nrefractor.register(require('./lang/firestore-security-rules.js'))\nrefractor.register(require('./lang/flow.js'))\nrefractor.register(require('./lang/fortran.js'))\nrefractor.register(require('./lang/fsharp.js'))\nrefractor.register(require('./lang/ftl.js'))\nrefractor.register(require('./lang/gap.js'))\nrefractor.register(require('./lang/gcode.js'))\nrefractor.register(require('./lang/gdscript.js'))\nrefractor.register(require('./lang/gedcom.js'))\nrefractor.register(require('./lang/gherkin.js'))\nrefractor.register(require('./lang/git.js'))\nrefractor.register(require('./lang/glsl.js'))\nrefractor.register(require('./lang/gml.js'))\nrefractor.register(require('./lang/gn.js'))\nrefractor.register(require('./lang/go-module.js'))\nrefractor.register(require('./lang/go.js'))\nrefractor.register(require('./lang/graphql.js'))\nrefractor.register(require('./lang/groovy.js'))\nrefractor.register(require('./lang/haml.js'))\nrefractor.register(require('./lang/handlebars.js'))\nrefractor.register(require('./lang/haskell.js'))\nrefractor.register(require('./lang/haxe.js'))\nrefractor.register(require('./lang/hcl.js'))\nrefractor.register(require('./lang/hlsl.js'))\nrefractor.register(require('./lang/hoon.js'))\nrefractor.register(require('./lang/hpkp.js'))\nrefractor.register(require('./lang/hsts.js'))\nrefractor.register(require('./lang/http.js'))\nrefractor.register(require('./lang/ichigojam.js'))\nrefractor.register(require('./lang/icon.js'))\nrefractor.register(require('./lang/icu-message-format.js'))\nrefractor.register(require('./lang/idris.js'))\nrefractor.register(require('./lang/iecst.js'))\nrefractor.register(require('./lang/ignore.js'))\nrefractor.register(require('./lang/inform7.js'))\nrefractor.register(require('./lang/ini.js'))\nrefractor.register(require('./lang/io.js'))\nrefractor.register(require('./lang/j.js'))\nrefractor.register(require('./lang/java.js'))\nrefractor.register(require('./lang/javadoc.js'))\nrefractor.register(require('./lang/javadoclike.js'))\nrefractor.register(require('./lang/javastacktrace.js'))\nrefractor.register(require('./lang/jexl.js'))\nrefractor.register(require('./lang/jolie.js'))\nrefractor.register(require('./lang/jq.js'))\nrefractor.register(require('./lang/js-extras.js'))\nrefractor.register(require('./lang/js-templates.js'))\nrefractor.register(require('./lang/jsdoc.js'))\nrefractor.register(require('./lang/json.js'))\nrefractor.register(require('./lang/json5.js'))\nrefractor.register(require('./lang/jsonp.js'))\nrefractor.register(require('./lang/jsstacktrace.js'))\nrefractor.register(require('./lang/jsx.js'))\nrefractor.register(require('./lang/julia.js'))\nrefractor.register(require('./lang/keepalived.js'))\nrefractor.register(require('./lang/keyman.js'))\nrefractor.register(require('./lang/kotlin.js'))\nrefractor.register(require('./lang/kumir.js'))\nrefractor.register(require('./lang/kusto.js'))\nrefractor.register(require('./lang/latex.js'))\nrefractor.register(require('./lang/latte.js'))\nrefractor.register(require('./lang/less.js'))\nrefractor.register(require('./lang/lilypond.js'))\nrefractor.register(require('./lang/liquid.js'))\nrefractor.register(require('./lang/lisp.js'))\nrefractor.register(require('./lang/livescript.js'))\nrefractor.register(require('./lang/llvm.js'))\nrefractor.register(require('./lang/log.js'))\nrefractor.register(require('./lang/lolcode.js'))\nrefractor.register(require('./lang/lua.js'))\nrefractor.register(require('./lang/magma.js'))\nrefractor.register(require('./lang/makefile.js'))\nrefractor.register(require('./lang/markdown.js'))\nrefractor.register(require('./lang/markup-templating.js'))\nrefractor.register(require('./lang/matlab.js'))\nrefractor.register(require('./lang/maxscript.js'))\nrefractor.register(require('./lang/mel.js'))\nrefractor.register(require('./lang/mermaid.js'))\nrefractor.register(require('./lang/mizar.js'))\nrefractor.register(require('./lang/mongodb.js'))\nrefractor.register(require('./lang/monkey.js'))\nrefractor.register(require('./lang/moonscript.js'))\nrefractor.register(require('./lang/n1ql.js'))\nrefractor.register(require('./lang/n4js.js'))\nrefractor.register(require('./lang/nand2tetris-hdl.js'))\nrefractor.register(require('./lang/naniscript.js'))\nrefractor.register(require('./lang/nasm.js'))\nrefractor.register(require('./lang/neon.js'))\nrefractor.register(require('./lang/nevod.js'))\nrefractor.register(require('./lang/nginx.js'))\nrefractor.register(require('./lang/nim.js'))\nrefractor.register(require('./lang/nix.js'))\nrefractor.register(require('./lang/nsis.js'))\nrefractor.register(require('./lang/objectivec.js'))\nrefractor.register(require('./lang/ocaml.js'))\nrefractor.register(require('./lang/opencl.js'))\nrefractor.register(require('./lang/openqasm.js'))\nrefractor.register(require('./lang/oz.js'))\nrefractor.register(require('./lang/parigp.js'))\nrefractor.register(require('./lang/parser.js'))\nrefractor.register(require('./lang/pascal.js'))\nrefractor.register(require('./lang/pascaligo.js'))\nrefractor.register(require('./lang/pcaxis.js'))\nrefractor.register(require('./lang/peoplecode.js'))\nrefractor.register(require('./lang/perl.js'))\nrefractor.register(require('./lang/php-extras.js'))\nrefractor.register(require('./lang/php.js'))\nrefractor.register(require('./lang/phpdoc.js'))\nrefractor.register(require('./lang/plsql.js'))\nrefractor.register(require('./lang/powerquery.js'))\nrefractor.register(require('./lang/powershell.js'))\nrefractor.register(require('./lang/processing.js'))\nrefractor.register(require('./lang/prolog.js'))\nrefractor.register(require('./lang/promql.js'))\nrefractor.register(require('./lang/properties.js'))\nrefractor.register(require('./lang/protobuf.js'))\nrefractor.register(require('./lang/psl.js'))\nrefractor.register(require('./lang/pug.js'))\nrefractor.register(require('./lang/puppet.js'))\nrefractor.register(require('./lang/pure.js'))\nrefractor.register(require('./lang/purebasic.js'))\nrefractor.register(require('./lang/purescript.js'))\nrefractor.register(require('./lang/python.js'))\nrefractor.register(require('./lang/q.js'))\nrefractor.register(require('./lang/qml.js'))\nrefractor.register(require('./lang/qore.js'))\nrefractor.register(require('./lang/qsharp.js'))\nrefractor.register(require('./lang/r.js'))\nrefractor.register(require('./lang/racket.js'))\nrefractor.register(require('./lang/reason.js'))\nrefractor.register(require('./lang/regex.js'))\nrefractor.register(require('./lang/rego.js'))\nrefractor.register(require('./lang/renpy.js'))\nrefractor.register(require('./lang/rest.js'))\nrefractor.register(require('./lang/rip.js'))\nrefractor.register(require('./lang/roboconf.js'))\nrefractor.register(require('./lang/robotframework.js'))\nrefractor.register(require('./lang/ruby.js'))\nrefractor.register(require('./lang/rust.js'))\nrefractor.register(require('./lang/sas.js'))\nrefractor.register(require('./lang/sass.js'))\nrefractor.register(require('./lang/scala.js'))\nrefractor.register(require('./lang/scheme.js'))\nrefractor.register(require('./lang/scss.js'))\nrefractor.register(require('./lang/shell-session.js'))\nrefractor.register(require('./lang/smali.js'))\nrefractor.register(require('./lang/smalltalk.js'))\nrefractor.register(require('./lang/smarty.js'))\nrefractor.register(require('./lang/sml.js'))\nrefractor.register(require('./lang/solidity.js'))\nrefractor.register(require('./lang/solution-file.js'))\nrefractor.register(require('./lang/soy.js'))\nrefractor.register(require('./lang/sparql.js'))\nrefractor.register(require('./lang/splunk-spl.js'))\nrefractor.register(require('./lang/sqf.js'))\nrefractor.register(require('./lang/sql.js'))\nrefractor.register(require('./lang/squirrel.js'))\nrefractor.register(require('./lang/stan.js'))\nrefractor.register(require('./lang/stylus.js'))\nrefractor.register(require('./lang/swift.js'))\nrefractor.register(require('./lang/systemd.js'))\nrefractor.register(require('./lang/t4-cs.js'))\nrefractor.register(require('./lang/t4-templating.js'))\nrefractor.register(require('./lang/t4-vb.js'))\nrefractor.register(require('./lang/tap.js'))\nrefractor.register(require('./lang/tcl.js'))\nrefractor.register(require('./lang/textile.js'))\nrefractor.register(require('./lang/toml.js'))\nrefractor.register(require('./lang/tremor.js'))\nrefractor.register(require('./lang/tsx.js'))\nrefractor.register(require('./lang/tt2.js'))\nrefractor.register(require('./lang/turtle.js'))\nrefractor.register(require('./lang/twig.js'))\nrefractor.register(require('./lang/typescript.js'))\nrefractor.register(require('./lang/typoscript.js'))\nrefractor.register(require('./lang/unrealscript.js'))\nrefractor.register(require('./lang/uorazor.js'))\nrefractor.register(require('./lang/uri.js'))\nrefractor.register(require('./lang/v.js'))\nrefractor.register(require('./lang/vala.js'))\nrefractor.register(require('./lang/vbnet.js'))\nrefractor.register(require('./lang/velocity.js'))\nrefractor.register(require('./lang/verilog.js'))\nrefractor.register(require('./lang/vhdl.js'))\nrefractor.register(require('./lang/vim.js'))\nrefractor.register(require('./lang/visual-basic.js'))\nrefractor.register(require('./lang/warpscript.js'))\nrefractor.register(require('./lang/wasm.js'))\nrefractor.register(require('./lang/web-idl.js'))\nrefractor.register(require('./lang/wiki.js'))\nrefractor.register(require('./lang/wolfram.js'))\nrefractor.register(require('./lang/wren.js'))\nrefractor.register(require('./lang/xeora.js'))\nrefractor.register(require('./lang/xml-doc.js'))\nrefractor.register(require('./lang/xojo.js'))\nrefractor.register(require('./lang/xquery.js'))\nrefractor.register(require('./lang/yaml.js'))\nrefractor.register(require('./lang/yang.js'))\nrefractor.register(require('./lang/zig.js'))\n","'use strict'\n\nmodule.exports = abap\nabap.displayName = 'abap'\nabap.aliases = []\nfunction abap(Prism) {\n  Prism.languages.abap = {\n    comment: /^\\*.*/m,\n    string: /(`|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    'string-template': {\n      pattern: /([|}])(?:\\\\.|[^\\\\|{\\r\\n])*(?=[|{])/,\n      lookbehind: true,\n      alias: 'string'\n    },\n    /* End Of Line comments should not interfere with strings when the\nquote character occurs within them. We assume a string being highlighted\ninside an EOL comment is more acceptable than the opposite.\n*/\n    'eol-comment': {\n      pattern: /(^|\\s)\".*/m,\n      lookbehind: true,\n      alias: 'comment'\n    },\n    keyword: {\n      pattern:\n        /(\\s|\\.|^)(?:SCIENTIFIC_WITH_LEADING_ZERO|SCALE_PRESERVING_SCIENTIFIC|RMC_COMMUNICATION_FAILURE|END-ENHANCEMENT-SECTION|MULTIPLY-CORRESPONDING|SUBTRACT-CORRESPONDING|VERIFICATION-MESSAGE|DIVIDE-CORRESPONDING|ENHANCEMENT-SECTION|CURRENCY_CONVERSION|RMC_SYSTEM_FAILURE|START-OF-SELECTION|MOVE-CORRESPONDING|RMC_INVALID_STATUS|CUSTOMER-FUNCTION|END-OF-DEFINITION|ENHANCEMENT-POINT|SYSTEM-EXCEPTIONS|ADD-CORRESPONDING|SCALE_PRESERVING|SELECTION-SCREEN|CURSOR-SELECTION|END-OF-SELECTION|LOAD-OF-PROGRAM|SCROLL-BOUNDARY|SELECTION-TABLE|EXCEPTION-TABLE|IMPLEMENTATIONS|PARAMETER-TABLE|RIGHT-JUSTIFIED|UNIT_CONVERSION|AUTHORITY-CHECK|LIST-PROCESSING|SIGN_AS_POSTFIX|COL_BACKGROUND|IMPLEMENTATION|INTERFACE-POOL|TRANSFORMATION|IDENTIFICATION|ENDENHANCEMENT|LINE-SELECTION|INITIALIZATION|LEFT-JUSTIFIED|SELECT-OPTIONS|SELECTION-SETS|COMMUNICATION|CORRESPONDING|DECIMAL_SHIFT|PRINT-CONTROL|VALUE-REQUEST|CHAIN-REQUEST|FUNCTION-POOL|FIELD-SYMBOLS|FUNCTIONALITY|INVERTED-DATE|SELECTION-SET|CLASS-METHODS|OUTPUT-LENGTH|CLASS-CODING|COL_NEGATIVE|ERRORMESSAGE|FIELD-GROUPS|HELP-REQUEST|NO-EXTENSION|NO-TOPOFPAGE|REDEFINITION|DISPLAY-MODE|ENDINTERFACE|EXIT-COMMAND|FIELD-SYMBOL|NO-SCROLLING|SHORTDUMP-ID|ACCESSPOLICY|CLASS-EVENTS|COL_POSITIVE|DECLARATIONS|ENHANCEMENTS|FILTER-TABLE|SWITCHSTATES|SYNTAX-CHECK|TRANSPORTING|ASYNCHRONOUS|SYNTAX-TRACE|TOKENIZATION|USER-COMMAND|WITH-HEADING|ABAP-SOURCE|BREAK-POINT|CHAIN-INPUT|COMPRESSION|FIXED-POINT|NEW-SECTION|NON-UNICODE|OCCURRENCES|RESPONSIBLE|SYSTEM-CALL|TRACE-TABLE|ABBREVIATED|CHAR-TO-HEX|END-OF-FILE|ENDFUNCTION|ENVIRONMENT|ASSOCIATION|COL_HEADING|EDITOR-CALL|END-OF-PAGE|ENGINEERING|IMPLEMENTED|INTENSIFIED|RADIOBUTTON|SYSTEM-EXIT|TOP-OF-PAGE|TRANSACTION|APPLICATION|CONCATENATE|DESTINATION|ENHANCEMENT|IMMEDIATELY|NO-GROUPING|PRECOMPILED|REPLACEMENT|TITLE-LINES|ACTIVATION|BYTE-ORDER|CLASS-POOL|CONNECTION|CONVERSION|DEFINITION|DEPARTMENT|EXPIRATION|INHERITING|MESSAGE-ID|NO-HEADING|PERFORMING|QUEUE-ONLY|RIGHTSPACE|SCIENTIFIC|STATUSINFO|STRUCTURES|SYNCPOINTS|WITH-TITLE|ATTRIBUTES|BOUNDARIES|CLASS-DATA|COL_NORMAL|DD\\/MM\\/YYYY|DESCENDING|INTERFACES|LINE-COUNT|MM\\/DD\\/YYYY|NON-UNIQUE|PRESERVING|SELECTIONS|STATEMENTS|SUBROUTINE|TRUNCATION|TYPE-POOLS|ARITHMETIC|BACKGROUND|ENDPROVIDE|EXCEPTIONS|IDENTIFIER|INDEX-LINE|OBLIGATORY|PARAMETERS|PERCENTAGE|PUSHBUTTON|RESOLUTION|COMPONENTS|DEALLOCATE|DISCONNECT|DUPLICATES|FIRST-LINE|HEAD-LINES|NO-DISPLAY|OCCURRENCE|RESPECTING|RETURNCODE|SUBMATCHES|TRACE-FILE|ASCENDING|BYPASSING|ENDMODULE|EXCEPTION|EXCLUDING|EXPORTING|INCREMENT|MATCHCODE|PARAMETER|PARTIALLY|PREFERRED|REFERENCE|REPLACING|RETURNING|SELECTION|SEPARATED|SPECIFIED|STATEMENT|TIMESTAMP|TYPE-POOL|ACCEPTING|APPENDAGE|ASSIGNING|COL_GROUP|COMPARING|CONSTANTS|DANGEROUS|IMPORTING|INSTANCES|LEFTSPACE|LOG-POINT|QUICKINFO|READ-ONLY|SCROLLING|SQLSCRIPT|STEP-LOOP|TOP-LINES|TRANSLATE|APPENDING|AUTHORITY|CHARACTER|COMPONENT|CONDITION|DIRECTORY|DUPLICATE|MESSAGING|RECEIVING|SUBSCREEN|ACCORDING|COL_TOTAL|END-LINES|ENDMETHOD|ENDSELECT|EXPANDING|EXTENSION|INCLUDING|INFOTYPES|INTERFACE|INTERVALS|LINE-SIZE|PF-STATUS|PROCEDURE|PROTECTED|REQUESTED|RESUMABLE|RIGHTPLUS|SAP-SPOOL|SECONDARY|STRUCTURE|SUBSTRING|TABLEVIEW|NUMOFCHAR|ADJACENT|ANALYSIS|ASSIGNED|BACKWARD|CHANNELS|CHECKBOX|CONTINUE|CRITICAL|DATAINFO|DD\\/MM\\/YY|DURATION|ENCODING|ENDCLASS|FUNCTION|LEFTPLUS|LINEFEED|MM\\/DD\\/YY|OVERFLOW|RECEIVED|SKIPPING|SORTABLE|STANDARD|SUBTRACT|SUPPRESS|TABSTRIP|TITLEBAR|TRUNCATE|UNASSIGN|WHENEVER|ANALYZER|COALESCE|COMMENTS|CONDENSE|DECIMALS|DEFERRED|ENDWHILE|EXPLICIT|KEYWORDS|MESSAGES|POSITION|PRIORITY|RECEIVER|RENAMING|TIMEZONE|TRAILING|ALLOCATE|CENTERED|CIRCULAR|CONTROLS|CURRENCY|DELETING|DESCRIBE|DISTANCE|ENDCATCH|EXPONENT|EXTENDED|GENERATE|IGNORING|INCLUDES|INTERNAL|MAJOR-ID|MODIFIER|NEW-LINE|OPTIONAL|PROPERTY|ROLLBACK|STARTING|SUPPLIED|ABSTRACT|CHANGING|CONTEXTS|CREATING|CUSTOMER|DATABASE|DAYLIGHT|DEFINING|DISTINCT|DIVISION|ENABLING|ENDCHAIN|ESCAPING|HARMLESS|IMPLICIT|INACTIVE|LANGUAGE|MINOR-ID|MULTIPLY|NEW-PAGE|NO-TITLE|POS_HIGH|SEPARATE|TEXTPOOL|TRANSFER|SELECTOR|DBMAXLEN|ITERATOR|ARCHIVE|BIT-XOR|BYTE-CO|COLLECT|COMMENT|CURRENT|DEFAULT|DISPLAY|ENDFORM|EXTRACT|LEADING|LISTBOX|LOCATOR|MEMBERS|METHODS|NESTING|POS_LOW|PROCESS|PROVIDE|RAISING|RESERVE|SECONDS|SUMMARY|VISIBLE|BETWEEN|BIT-AND|BYTE-CS|CLEANUP|COMPUTE|CONTROL|CONVERT|DATASET|ENDCASE|FORWARD|HEADERS|HOTSPOT|INCLUDE|INVERSE|KEEPING|NO-ZERO|OBJECTS|OVERLAY|PADDING|PATTERN|PROGRAM|REFRESH|SECTION|SUMMING|TESTING|VERSION|WINDOWS|WITHOUT|BIT-NOT|BYTE-CA|BYTE-NA|CASTING|CONTEXT|COUNTRY|DYNAMIC|ENABLED|ENDLOOP|EXECUTE|FRIENDS|HANDLER|HEADING|INITIAL|\\*-INPUT|LOGFILE|MAXIMUM|MINIMUM|NO-GAPS|NO-SIGN|PRAGMAS|PRIMARY|PRIVATE|REDUCED|REPLACE|REQUEST|RESULTS|UNICODE|WARNING|ALIASES|BYTE-CN|BYTE-NS|CALLING|COL_KEY|COLUMNS|CONNECT|ENDEXEC|ENTRIES|EXCLUDE|FILTERS|FURTHER|HELP-ID|LOGICAL|MAPPING|MESSAGE|NAMETAB|OPTIONS|PACKAGE|PERFORM|RECEIVE|STATICS|VARYING|BINDING|CHARLEN|GREATER|XSTRLEN|ACCEPT|APPEND|DETAIL|ELSEIF|ENDING|ENDTRY|FORMAT|FRAMES|GIVING|HASHED|HEADER|IMPORT|INSERT|MARGIN|MODULE|NATIVE|OBJECT|OFFSET|REMOTE|RESUME|SAVING|SIMPLE|SUBMIT|TABBED|TOKENS|UNIQUE|UNPACK|UPDATE|WINDOW|YELLOW|ACTUAL|ASPECT|CENTER|CURSOR|DELETE|DIALOG|DIVIDE|DURING|ERRORS|EVENTS|EXTEND|FILTER|HANDLE|HAVING|IGNORE|LITTLE|MEMORY|NO-GAP|OCCURS|OPTION|PERSON|PLACES|PUBLIC|REDUCE|REPORT|RESULT|SINGLE|SORTED|SWITCH|SYNTAX|TARGET|VALUES|WRITER|ASSERT|BLOCKS|BOUNDS|BUFFER|CHANGE|COLUMN|COMMIT|CONCAT|COPIES|CREATE|DDMMYY|DEFINE|ENDIAN|ESCAPE|EXPAND|KERNEL|LAYOUT|LEGACY|LEVELS|MMDDYY|NUMBER|OUTPUT|RANGES|READER|RETURN|SCREEN|SEARCH|SELECT|SHARED|SOURCE|STABLE|STATIC|SUBKEY|SUFFIX|TABLES|UNWIND|YYMMDD|ASSIGN|BACKUP|BEFORE|BINARY|BIT-OR|BLANKS|CLIENT|CODING|COMMON|DEMAND|DYNPRO|EXCEPT|EXISTS|EXPORT|FIELDS|GLOBAL|GROUPS|LENGTH|LOCALE|MEDIUM|METHOD|MODIFY|NESTED|OTHERS|REJECT|SCROLL|SUPPLY|SYMBOL|ENDFOR|STRLEN|ALIGN|BEGIN|BOUND|ENDAT|ENTRY|EVENT|FINAL|FLUSH|GRANT|INNER|SHORT|USING|WRITE|AFTER|BLACK|BLOCK|CLOCK|COLOR|COUNT|DUMMY|EMPTY|ENDDO|ENDON|GREEN|INDEX|INOUT|LEAVE|LEVEL|LINES|MODIF|ORDER|OUTER|RANGE|RESET|RETRY|RIGHT|SMART|SPLIT|STYLE|TABLE|THROW|UNDER|UNTIL|UPPER|UTF-8|WHERE|ALIAS|BLANK|CLEAR|CLOSE|EXACT|FETCH|FIRST|FOUND|GROUP|LLANG|LOCAL|OTHER|REGEX|SPOOL|TITLE|TYPES|VALID|WHILE|ALPHA|BOXED|CATCH|CHAIN|CHECK|CLASS|COVER|ENDIF|EQUIV|FIELD|FLOOR|FRAME|INPUT|LOWER|MATCH|NODES|PAGES|PRINT|RAISE|ROUND|SHIFT|SPACE|SPOTS|STAMP|STATE|TASKS|TIMES|TRMAC|ULINE|UNION|VALUE|WIDTH|EQUAL|LOG10|TRUNC|BLOB|CASE|CEIL|CLOB|COND|EXIT|FILE|GAPS|HOLD|INCL|INTO|KEEP|KEYS|LAST|LINE|LONG|LPAD|MAIL|MODE|OPEN|PINK|READ|ROWS|TEST|THEN|ZERO|AREA|BACK|BADI|BYTE|CAST|EDIT|EXEC|FAIL|FIND|FKEQ|FONT|FREE|GKEQ|HIDE|INIT|ITNO|LATE|LOOP|MAIN|MARK|MOVE|NEXT|NULL|RISK|ROLE|UNIT|WAIT|ZONE|BASE|CALL|CODE|DATA|DATE|FKGE|GKGE|HIGH|KIND|LEFT|LIST|MASK|MESH|NAME|NODE|PACK|PAGE|POOL|SEND|SIGN|SIZE|SOME|STOP|TASK|TEXT|TIME|USER|VARY|WITH|WORD|BLUE|CONV|COPY|DEEP|ELSE|FORM|FROM|HINT|ICON|JOIN|LIKE|LOAD|ONLY|PART|SCAN|SKIP|SORT|TYPE|UNIX|VIEW|WHEN|WORK|ACOS|ASIN|ATAN|COSH|EACH|FRAC|LESS|RTTI|SINH|SQRT|TANH|AVG|BIT|DIV|ISO|LET|OUT|PAD|SQL|ALL|CI_|CPI|END|LOB|LPI|MAX|MIN|NEW|OLE|RUN|SET|\\?TO|YES|ABS|ADD|AND|BIG|FOR|HDB|JOB|LOW|NOT|SAP|TRY|VIA|XML|ANY|GET|IDS|KEY|MOD|OFF|PUT|RAW|RED|REF|SUM|TAB|XSD|CNT|COS|EXP|LOG|SIN|TAN|XOR|AT|CO|CP|DO|GT|ID|IF|NS|OR|BT|CA|CS|GE|NA|NB|EQ|IN|LT|NE|NO|OF|ON|PF|TO|AS|BY|CN|IS|LE|NP|UP|E|I|M|O|Z|C|X)\\b/i,\n      lookbehind: true\n    },\n    /* Numbers can be only integers. Decimal or Hex appear only as strings */\n    number: /\\b\\d+\\b/,\n    /* Operators must always be surrounded by whitespace, they cannot be put\nadjacent to operands.\n*/\n    operator: {\n      pattern: /(\\s)(?:\\*\\*?|<[=>]?|>=?|\\?=|[-+\\/=])(?=\\s)/,\n      lookbehind: true\n    },\n    'string-operator': {\n      pattern: /(\\s)&&?(?=\\s)/,\n      lookbehind: true,\n      /* The official editor highlights */\n      alias: 'keyword'\n    },\n    'token-operator': [\n      {\n        /* Special operators used to access structure components, class methods/attributes, etc. */\n        pattern: /(\\w)(?:->?|=>|[~|{}])(?=\\w)/,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      {\n        /* Special tokens used do delimit string templates */\n        pattern: /[|{}]/,\n        alias: 'punctuation'\n      }\n    ],\n    punctuation: /[,.:()]/\n  }\n}\n","'use strict'\n\nmodule.exports = abnf\nabnf.displayName = 'abnf'\nabnf.aliases = []\nfunction abnf(Prism) {\n  ;(function (Prism) {\n    var coreRules =\n      '(?:ALPHA|BIT|CHAR|CR|CRLF|CTL|DIGIT|DQUOTE|HEXDIG|HTAB|LF|LWSP|OCTET|SP|VCHAR|WSP)'\n    Prism.languages.abnf = {\n      comment: /;.*/,\n      string: {\n        pattern: /(?:%[is])?\"[^\"\\n\\r]*\"/,\n        greedy: true,\n        inside: {\n          punctuation: /^%[is]/\n        }\n      },\n      range: {\n        pattern: /%(?:b[01]+-[01]+|d\\d+-\\d+|x[A-F\\d]+-[A-F\\d]+)/i,\n        alias: 'number'\n      },\n      terminal: {\n        pattern:\n          /%(?:b[01]+(?:\\.[01]+)*|d\\d+(?:\\.\\d+)*|x[A-F\\d]+(?:\\.[A-F\\d]+)*)/i,\n        alias: 'number'\n      },\n      repetition: {\n        pattern: /(^|[^\\w-])(?:\\d*\\*\\d*|\\d+)/,\n        lookbehind: true,\n        alias: 'operator'\n      },\n      definition: {\n        pattern: /(^[ \\t]*)(?:[a-z][\\w-]*|<[^<>\\r\\n]*>)(?=\\s*=)/m,\n        lookbehind: true,\n        alias: 'keyword',\n        inside: {\n          punctuation: /<|>/\n        }\n      },\n      'core-rule': {\n        pattern: RegExp(\n          '(?:(^|[^<\\\\w-])' + coreRules + '|<' + coreRules + '>)(?![\\\\w-])',\n          'i'\n        ),\n        lookbehind: true,\n        alias: ['rule', 'constant'],\n        inside: {\n          punctuation: /<|>/\n        }\n      },\n      rule: {\n        pattern: /(^|[^<\\w-])[a-z][\\w-]*|<[^<>\\r\\n]*>/i,\n        lookbehind: true,\n        inside: {\n          punctuation: /<|>/\n        }\n      },\n      operator: /=\\/?|\\//,\n      punctuation: /[()\\[\\]]/\n    }\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = actionscript\nactionscript.displayName = 'actionscript'\nactionscript.aliases = []\nfunction actionscript(Prism) {\n  Prism.languages.actionscript = Prism.languages.extend('javascript', {\n    keyword:\n      /\\b(?:as|break|case|catch|class|const|default|delete|do|dynamic|each|else|extends|final|finally|for|function|get|if|implements|import|in|include|instanceof|interface|internal|is|namespace|native|new|null|override|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|use|var|void|while|with)\\b/,\n    operator: /\\+\\+|--|(?:[+\\-*\\/%^]|&&?|\\|\\|?|<<?|>>?>?|[!=]=?)=?|[~?@]/\n  })\n  Prism.languages.actionscript['class-name'].alias = 'function' // doesn't work with AS because AS is too complex\n  delete Prism.languages.actionscript['parameter']\n  delete Prism.languages.actionscript['literal-property']\n  if (Prism.languages.markup) {\n    Prism.languages.insertBefore('actionscript', 'string', {\n      xml: {\n        pattern:\n          /(^|[^.])<\\/?\\w+(?:\\s+[^\\s>\\/=]+=(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\])*\\2)*\\s*\\/?>/,\n        lookbehind: true,\n        inside: Prism.languages.markup\n      }\n    })\n  }\n}\n","'use strict'\n\nmodule.exports = ada\nada.displayName = 'ada'\nada.aliases = []\nfunction ada(Prism) {\n  Prism.languages.ada = {\n    comment: /--.*/,\n    string: /\"(?:\"\"|[^\"\\r\\f\\n])*\"/,\n    number: [\n      {\n        pattern:\n          /\\b\\d(?:_?\\d)*#[\\dA-F](?:_?[\\dA-F])*(?:\\.[\\dA-F](?:_?[\\dA-F])*)?#(?:E[+-]?\\d(?:_?\\d)*)?/i\n      },\n      {\n        pattern: /\\b\\d(?:_?\\d)*(?:\\.\\d(?:_?\\d)*)?(?:E[+-]?\\d(?:_?\\d)*)?\\b/i\n      }\n    ],\n    'attr-name': /\\b'\\w+/,\n    keyword:\n      /\\b(?:abort|abs|abstract|accept|access|aliased|all|and|array|at|begin|body|case|constant|declare|delay|delta|digits|do|else|elsif|end|entry|exception|exit|for|function|generic|goto|if|in|interface|is|limited|loop|mod|new|not|null|of|others|out|overriding|package|pragma|private|procedure|protected|raise|range|record|rem|renames|requeue|return|reverse|select|separate|some|subtype|synchronized|tagged|task|terminate|then|type|until|use|when|while|with|xor)\\b/i,\n    boolean: /\\b(?:false|true)\\b/i,\n    operator: /<[=>]?|>=?|=>?|:=|\\/=?|\\*\\*?|[&+-]/,\n    punctuation: /\\.\\.?|[,;():]/,\n    char: /'.'/,\n    variable: /\\b[a-z](?:\\w)*\\b/i\n  }\n}\n","'use strict'\n\nmodule.exports = agda\nagda.displayName = 'agda'\nagda.aliases = []\nfunction agda(Prism) {\n  ;(function (Prism) {\n    Prism.languages.agda = {\n      comment: /\\{-[\\s\\S]*?(?:-\\}|$)|--.*/,\n      string: {\n        pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,\n        greedy: true\n      },\n      punctuation: /[(){}⦃⦄.;@]/,\n      'class-name': {\n        pattern: /((?:data|record) +)\\S+/,\n        lookbehind: true\n      },\n      function: {\n        pattern: /(^[ \\t]*)(?!\\s)[^:\\r\\n]+(?=:)/m,\n        lookbehind: true\n      },\n      operator: {\n        pattern: /(^\\s*|\\s)(?:[=|:∀→λ\\\\?_]|->)(?=\\s)/,\n        lookbehind: true\n      },\n      keyword:\n        /\\b(?:Set|abstract|constructor|data|eta-equality|field|forall|hiding|import|in|inductive|infix|infixl|infixr|instance|let|macro|module|mutual|no-eta-equality|open|overlap|pattern|postulate|primitive|private|public|quote|quoteContext|quoteGoal|quoteTerm|record|renaming|rewrite|syntax|tactic|unquote|unquoteDecl|unquoteDef|using|variable|where|with)\\b/\n    }\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = al\nal.displayName = 'al'\nal.aliases = []\nfunction al(Prism) {\n  // based on https://github.com/microsoft/AL/blob/master/grammar/alsyntax.tmlanguage\n  Prism.languages.al = {\n    comment: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,\n    string: {\n      pattern: /'(?:''|[^'\\r\\n])*'(?!')|\"(?:\"\"|[^\"\\r\\n])*\"(?!\")/,\n      greedy: true\n    },\n    function: {\n      pattern:\n        /(\\b(?:event|procedure|trigger)\\s+|(?:^|[^.])\\.\\s*)[a-z_]\\w*(?=\\s*\\()/i,\n      lookbehind: true\n    },\n    keyword: [\n      // keywords\n      /\\b(?:array|asserterror|begin|break|case|do|downto|else|end|event|exit|for|foreach|function|if|implements|in|indataset|interface|internal|local|of|procedure|program|protected|repeat|runonclient|securityfiltering|suppressdispose|temporary|then|to|trigger|until|var|while|with|withevents)\\b/i, // objects and metadata that are used like keywords\n      /\\b(?:action|actions|addafter|addbefore|addfirst|addlast|area|assembly|chartpart|codeunit|column|controladdin|cuegroup|customizes|dataitem|dataset|dotnet|elements|enum|enumextension|extends|field|fieldattribute|fieldelement|fieldgroup|fieldgroups|fields|filter|fixed|grid|group|key|keys|label|labels|layout|modify|moveafter|movebefore|movefirst|movelast|page|pagecustomization|pageextension|part|profile|query|repeater|report|requestpage|schema|separator|systempart|table|tableelement|tableextension|textattribute|textelement|type|usercontrol|value|xmlport)\\b/i\n    ],\n    number:\n      /\\b(?:0x[\\da-f]+|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?)(?:F|LL?|U(?:LL?)?)?\\b/i,\n    boolean: /\\b(?:false|true)\\b/i,\n    variable: /\\b(?:Curr(?:FieldNo|Page|Report)|x?Rec|RequestOptionsPage)\\b/,\n    'class-name':\n      /\\b(?:automation|biginteger|bigtext|blob|boolean|byte|char|clienttype|code|completiontriggererrorlevel|connectiontype|database|dataclassification|datascope|date|dateformula|datetime|decimal|defaultlayout|dialog|dictionary|dotnetassembly|dotnettypedeclaration|duration|errorinfo|errortype|executioncontext|executionmode|fieldclass|fieldref|fieldtype|file|filterpagebuilder|guid|httpclient|httpcontent|httpheaders|httprequestmessage|httpresponsemessage|instream|integer|joker|jsonarray|jsonobject|jsontoken|jsonvalue|keyref|list|moduledependencyinfo|moduleinfo|none|notification|notificationscope|objecttype|option|outstream|pageresult|record|recordid|recordref|reportformat|securityfilter|sessionsettings|tableconnectiontype|tablefilter|testaction|testfield|testfilterfield|testpage|testpermissions|testrequestpage|text|textbuilder|textconst|textencoding|time|transactionmodel|transactiontype|variant|verbosity|version|view|views|webserviceactioncontext|webserviceactionresultcode|xmlattribute|xmlattributecollection|xmlcdata|xmlcomment|xmldeclaration|xmldocument|xmldocumenttype|xmlelement|xmlnamespacemanager|xmlnametable|xmlnode|xmlnodelist|xmlprocessinginstruction|xmlreadoptions|xmltext|xmlwriteoptions)\\b/i,\n    operator: /\\.\\.|:[=:]|[-+*/]=?|<>|[<>]=?|=|\\b(?:and|div|mod|not|or|xor)\\b/i,\n    punctuation: /[()\\[\\]{}:.;,]/\n  }\n}\n","'use strict'\n\nmodule.exports = antlr4\nantlr4.displayName = 'antlr4'\nantlr4.aliases = ['g4']\nfunction antlr4(Prism) {\n  Prism.languages.antlr4 = {\n    comment: /\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    string: {\n      pattern: /'(?:\\\\.|[^\\\\'\\r\\n])*'/,\n      greedy: true\n    },\n    'character-class': {\n      pattern: /\\[(?:\\\\.|[^\\\\\\]\\r\\n])*\\]/,\n      greedy: true,\n      alias: 'regex',\n      inside: {\n        range: {\n          pattern: /([^[]|(?:^|[^\\\\])(?:\\\\\\\\)*\\\\\\[)-(?!\\])/,\n          lookbehind: true,\n          alias: 'punctuation'\n        },\n        escape:\n          /\\\\(?:u(?:[a-fA-F\\d]{4}|\\{[a-fA-F\\d]+\\})|[pP]\\{[=\\w-]+\\}|[^\\r\\nupP])/,\n        punctuation: /[\\[\\]]/\n      }\n    },\n    action: {\n      pattern: /\\{(?:[^{}]|\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})*\\})*\\}/,\n      greedy: true,\n      inside: {\n        content: {\n          // this might be C, C++, Python, Java, C#, or any other language ANTLR4 compiles to\n          pattern: /(\\{)[\\s\\S]+(?=\\})/,\n          lookbehind: true\n        },\n        punctuation: /[{}]/\n      }\n    },\n    command: {\n      pattern:\n        /(->\\s*(?!\\s))(?:\\s*(?:,\\s*)?\\b[a-z]\\w*(?:\\s*\\([^()\\r\\n]*\\))?)+(?=\\s*;)/i,\n      lookbehind: true,\n      inside: {\n        function: /\\b\\w+(?=\\s*(?:[,(]|$))/,\n        punctuation: /[,()]/\n      }\n    },\n    annotation: {\n      pattern: /@\\w+(?:::\\w+)*/,\n      alias: 'keyword'\n    },\n    label: {\n      pattern: /#[ \\t]*\\w+/,\n      alias: 'punctuation'\n    },\n    keyword:\n      /\\b(?:catch|channels|finally|fragment|grammar|import|lexer|locals|mode|options|parser|returns|throws|tokens)\\b/,\n    definition: [\n      {\n        pattern: /\\b[a-z]\\w*(?=\\s*:)/,\n        alias: ['rule', 'class-name']\n      },\n      {\n        pattern: /\\b[A-Z]\\w*(?=\\s*:)/,\n        alias: ['token', 'constant']\n      }\n    ],\n    constant: /\\b[A-Z][A-Z_]*\\b/,\n    operator: /\\.\\.|->|[|~]|[*+?]\\??/,\n    punctuation: /[;:()=]/\n  }\n  Prism.languages.g4 = Prism.languages.antlr4\n}\n","'use strict'\n\nmodule.exports = apacheconf\napacheconf.displayName = 'apacheconf'\napacheconf.aliases = []\nfunction apacheconf(Prism) {\n  Prism.languages.apacheconf = {\n    comment: /#.*/,\n    'directive-inline': {\n      pattern:\n        /(^[\\t ]*)\\b(?:AcceptFilter|AcceptPathInfo|AccessFileName|Action|Add(?:Alt|AltByEncoding|AltByType|Charset|DefaultCharset|Description|Encoding|Handler|Icon|IconByEncoding|IconByType|InputFilter|Language|ModuleInfo|OutputFilter|OutputFilterByType|Type)|Alias|AliasMatch|Allow(?:CONNECT|EncodedSlashes|Methods|Override|OverrideList)?|Anonymous(?:_LogEmail|_MustGiveEmail|_NoUserID|_VerifyEmail)?|AsyncRequestWorkerFactor|Auth(?:BasicAuthoritative|BasicFake|BasicProvider|BasicUseDigestAlgorithm|DBDUserPWQuery|DBDUserRealmQuery|DBMGroupFile|DBMType|DBMUserFile|Digest(?:Algorithm|Domain|NonceLifetime|Provider|Qop|ShmemSize)|Form(?:Authoritative|Body|DisableNoStore|FakeBasicAuth|Location|LoginRequiredLocation|LoginSuccessLocation|LogoutLocation|Method|Mimetype|Password|Provider|SitePassphrase|Size|Username)|GroupFile|LDAP(?:AuthorizePrefix|BindAuthoritative|BindDN|BindPassword|CharsetConfig|CompareAsUser|CompareDNOnServer|DereferenceAliases|GroupAttribute|GroupAttributeIsDN|InitialBindAsUser|InitialBindPattern|MaxSubGroupDepth|RemoteUserAttribute|RemoteUserIsDN|SearchAsUser|SubGroupAttribute|SubGroupClass|Url)|Merging|Name|nCache(?:Context|Enable|ProvideFor|SOCache|Timeout)|nzFcgiCheckAuthnProvider|nzFcgiDefineProvider|Type|UserFile|zDBDLoginToReferer|zDBDQuery|zDBDRedirectQuery|zDBMType|zSendForbiddenOnFailure)|BalancerGrowth|BalancerInherit|BalancerMember|BalancerPersist|BrowserMatch|BrowserMatchNoCase|BufferedLogs|BufferSize|Cache(?:DefaultExpire|DetailHeader|DirLength|DirLevels|Disable|Enable|File|Header|IgnoreCacheControl|IgnoreHeaders|IgnoreNoLastMod|IgnoreQueryString|IgnoreURLSessionIdentifiers|KeyBaseURL|LastModifiedFactor|Lock|LockMaxAge|LockPath|MaxExpire|MaxFileSize|MinExpire|MinFileSize|NegotiatedDocs|QuickHandler|ReadSize|ReadTime|Root|Socache(?:MaxSize|MaxTime|MinTime|ReadSize|ReadTime)?|StaleOnError|StoreExpired|StoreNoStore|StorePrivate)|CGIDScriptTimeout|CGIMapExtension|CharsetDefault|CharsetOptions|CharsetSourceEnc|CheckCaseOnly|CheckSpelling|ChrootDir|ContentDigest|CookieDomain|CookieExpires|CookieName|CookieStyle|CookieTracking|CoreDumpDirectory|CustomLog|Dav|DavDepthInfinity|DavGenericLockDB|DavLockDB|DavMinTimeout|DBDExptime|DBDInitSQL|DBDKeep|DBDMax|DBDMin|DBDParams|DBDPersist|DBDPrepareSQL|DBDriver|DefaultIcon|DefaultLanguage|DefaultRuntimeDir|DefaultType|Define|Deflate(?:BufferSize|CompressionLevel|FilterNote|InflateLimitRequestBody|InflateRatio(?:Burst|Limit)|MemLevel|WindowSize)|Deny|DirectoryCheckHandler|DirectoryIndex|DirectoryIndexRedirect|DirectorySlash|DocumentRoot|DTracePrivileges|DumpIOInput|DumpIOOutput|EnableExceptionHook|EnableMMAP|EnableSendfile|Error|ErrorDocument|ErrorLog|ErrorLogFormat|Example|ExpiresActive|ExpiresByType|ExpiresDefault|ExtendedStatus|ExtFilterDefine|ExtFilterOptions|FallbackResource|FileETag|FilterChain|FilterDeclare|FilterProtocol|FilterProvider|FilterTrace|ForceLanguagePriority|ForceType|ForensicLog|GprofDir|GracefulShutdownTimeout|Group|Header|HeaderName|Heartbeat(?:Address|Listen|MaxServers|Storage)|HostnameLookups|IdentityCheck|IdentityCheckTimeout|ImapBase|ImapDefault|ImapMenu|Include|IncludeOptional|Index(?:HeadInsert|Ignore|IgnoreReset|Options|OrderDefault|StyleSheet)|InputSed|ISAPI(?:AppendLogToErrors|AppendLogToQuery|CacheFile|FakeAsync|LogNotSupported|ReadAheadBuffer)|KeepAlive|KeepAliveTimeout|KeptBodySize|LanguagePriority|LDAP(?:CacheEntries|CacheTTL|ConnectionPoolTTL|ConnectionTimeout|LibraryDebug|OpCacheEntries|OpCacheTTL|ReferralHopLimit|Referrals|Retries|RetryDelay|SharedCacheFile|SharedCacheSize|Timeout|TrustedClientCert|TrustedGlobalCert|TrustedMode|VerifyServerCert)|Limit(?:InternalRecursion|Request(?:Body|Fields|FieldSize|Line)|XMLRequestBody)|Listen|ListenBackLog|LoadFile|LoadModule|LogFormat|LogLevel|LogMessage|LuaAuthzProvider|LuaCodeCache|Lua(?:Hook(?:AccessChecker|AuthChecker|CheckUserID|Fixups|InsertFilter|Log|MapToStorage|TranslateName|TypeChecker)|Inherit|InputFilter|MapHandler|OutputFilter|PackageCPath|PackagePath|QuickHandler|Root|Scope)|Max(?:ConnectionsPerChild|KeepAliveRequests|MemFree|RangeOverlaps|RangeReversals|Ranges|RequestWorkers|SpareServers|SpareThreads|Threads)|MergeTrailers|MetaDir|MetaFiles|MetaSuffix|MimeMagicFile|MinSpareServers|MinSpareThreads|MMapFile|ModemStandard|ModMimeUsePathInfo|MultiviewsMatch|Mutex|NameVirtualHost|NoProxy|NWSSLTrustedCerts|NWSSLUpgradeable|Options|Order|OutputSed|PassEnv|PidFile|PrivilegesMode|Protocol|ProtocolEcho|Proxy(?:AddHeaders|BadHeader|Block|Domain|ErrorOverride|ExpressDBMFile|ExpressDBMType|ExpressEnable|FtpDirCharset|FtpEscapeWildcards|FtpListOnWildcard|HTML(?:BufSize|CharsetOut|DocType|Enable|Events|Extended|Fixups|Interp|Links|Meta|StripComments|URLMap)|IOBufferSize|MaxForwards|Pass(?:Inherit|InterpolateEnv|Match|Reverse|ReverseCookieDomain|ReverseCookiePath)?|PreserveHost|ReceiveBufferSize|Remote|RemoteMatch|Requests|SCGIInternalRedirect|SCGISendfile|Set|SourceAddress|Status|Timeout|Via)|ReadmeName|ReceiveBufferSize|Redirect|RedirectMatch|RedirectPermanent|RedirectTemp|ReflectorHeader|RemoteIP(?:Header|InternalProxy|InternalProxyList|ProxiesHeader|TrustedProxy|TrustedProxyList)|RemoveCharset|RemoveEncoding|RemoveHandler|RemoveInputFilter|RemoveLanguage|RemoveOutputFilter|RemoveType|RequestHeader|RequestReadTimeout|Require|Rewrite(?:Base|Cond|Engine|Map|Options|Rule)|RLimitCPU|RLimitMEM|RLimitNPROC|Satisfy|ScoreBoardFile|Script(?:Alias|AliasMatch|InterpreterSource|Log|LogBuffer|LogLength|Sock)?|SecureListen|SeeRequestTail|SendBufferSize|Server(?:Admin|Alias|Limit|Name|Path|Root|Signature|Tokens)|Session(?:Cookie(?:Name|Name2|Remove)|Crypto(?:Cipher|Driver|Passphrase|PassphraseFile)|DBD(?:CookieName|CookieName2|CookieRemove|DeleteLabel|InsertLabel|PerUser|SelectLabel|UpdateLabel)|Env|Exclude|Header|Include|MaxAge)?|SetEnv|SetEnvIf|SetEnvIfExpr|SetEnvIfNoCase|SetHandler|SetInputFilter|SetOutputFilter|SSIEndTag|SSIErrorMsg|SSIETag|SSILastModified|SSILegacyExprParser|SSIStartTag|SSITimeFormat|SSIUndefinedEcho|SSL(?:CACertificateFile|CACertificatePath|CADNRequestFile|CADNRequestPath|CARevocationCheck|CARevocationFile|CARevocationPath|CertificateChainFile|CertificateFile|CertificateKeyFile|CipherSuite|Compression|CryptoDevice|Engine|FIPS|HonorCipherOrder|InsecureRenegotiation|OCSP(?:DefaultResponder|Enable|OverrideResponder|ResponderTimeout|ResponseMaxAge|ResponseTimeSkew|UseRequestNonce)|OpenSSLConfCmd|Options|PassPhraseDialog|Protocol|Proxy(?:CACertificateFile|CACertificatePath|CARevocation(?:Check|File|Path)|CheckPeer(?:CN|Expire|Name)|CipherSuite|Engine|MachineCertificate(?:ChainFile|File|Path)|Protocol|Verify|VerifyDepth)|RandomSeed|RenegBufferSize|Require|RequireSSL|Session(?:Cache|CacheTimeout|TicketKeyFile|Tickets)|SRPUnknownUserSeed|SRPVerifierFile|Stapling(?:Cache|ErrorCacheTimeout|FakeTryLater|ForceURL|ResponderTimeout|ResponseMaxAge|ResponseTimeSkew|ReturnResponderErrors|StandardCacheTimeout)|StrictSNIVHostCheck|UserName|UseStapling|VerifyClient|VerifyDepth)|StartServers|StartThreads|Substitute|Suexec|SuexecUserGroup|ThreadLimit|ThreadsPerChild|ThreadStackSize|TimeOut|TraceEnable|TransferLog|TypesConfig|UnDefine|UndefMacro|UnsetEnv|Use|UseCanonicalName|UseCanonicalPhysicalPort|User|UserDir|VHostCGIMode|VHostCGIPrivs|VHostGroup|VHostPrivs|VHostSecure|VHostUser|Virtual(?:DocumentRoot|ScriptAlias)(?:IP)?|WatchdogInterval|XBitHack|xml2EncAlias|xml2EncDefault|xml2StartParse)\\b/im,\n      lookbehind: true,\n      alias: 'property'\n    },\n    'directive-block': {\n      pattern:\n        /<\\/?\\b(?:Auth[nz]ProviderAlias|Directory|DirectoryMatch|Else|ElseIf|Files|FilesMatch|If|IfDefine|IfModule|IfVersion|Limit|LimitExcept|Location|LocationMatch|Macro|Proxy|Require(?:All|Any|None)|VirtualHost)\\b.*>/i,\n      inside: {\n        'directive-block': {\n          pattern: /^<\\/?\\w+/,\n          inside: {\n            punctuation: /^<\\/?/\n          },\n          alias: 'tag'\n        },\n        'directive-block-parameter': {\n          pattern: /.*[^>]/,\n          inside: {\n            punctuation: /:/,\n            string: {\n              pattern: /(\"|').*\\1/,\n              inside: {\n                variable: /[$%]\\{?(?:\\w\\.?[-+:]?)+\\}?/\n              }\n            }\n          },\n          alias: 'attr-value'\n        },\n        punctuation: />/\n      },\n      alias: 'tag'\n    },\n    'directive-flags': {\n      pattern: /\\[(?:[\\w=],?)+\\]/,\n      alias: 'keyword'\n    },\n    string: {\n      pattern: /(\"|').*\\1/,\n      inside: {\n        variable: /[$%]\\{?(?:\\w\\.?[-+:]?)+\\}?/\n      }\n    },\n    variable: /[$%]\\{?(?:\\w\\.?[-+:]?)+\\}?/,\n    regex: /\\^?.*\\$|\\^.*\\$?/\n  }\n}\n","'use strict'\nvar refractorSql = require('./sql.js')\nmodule.exports = apex\napex.displayName = 'apex'\napex.aliases = []\nfunction apex(Prism) {\n  Prism.register(refractorSql)\n  ;(function (Prism) {\n    var keywords =\n      /\\b(?:(?:after|before)(?=\\s+[a-z])|abstract|activate|and|any|array|as|asc|autonomous|begin|bigdecimal|blob|boolean|break|bulk|by|byte|case|cast|catch|char|class|collect|commit|const|continue|currency|date|datetime|decimal|default|delete|desc|do|double|else|end|enum|exception|exit|export|extends|final|finally|float|for|from|get(?=\\s*[{};])|global|goto|group|having|hint|if|implements|import|in|inner|insert|instanceof|int|integer|interface|into|join|like|limit|list|long|loop|map|merge|new|not|null|nulls|number|object|of|on|or|outer|override|package|parallel|pragma|private|protected|public|retrieve|return|rollback|select|set|short|sObject|sort|static|string|super|switch|synchronized|system|testmethod|then|this|throw|time|transaction|transient|trigger|try|undelete|update|upsert|using|virtual|void|webservice|when|where|while|(?:inherited|with|without)\\s+sharing)\\b/i\n    var className =\n      /\\b(?:(?=[a-z_]\\w*\\s*[<\\[])|(?!<keyword>))[A-Z_]\\w*(?:\\s*\\.\\s*[A-Z_]\\w*)*\\b(?:\\s*(?:\\[\\s*\\]|<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>))*/.source.replace(\n        /<keyword>/g,\n        function () {\n          return keywords.source\n        }\n      )\n    /** @param {string} pattern */\n    function insertClassName(pattern) {\n      return RegExp(\n        pattern.replace(/<CLASS-NAME>/g, function () {\n          return className\n        }),\n        'i'\n      )\n    }\n    var classNameInside = {\n      keyword: keywords,\n      punctuation: /[()\\[\\]{};,:.<>]/\n    }\n    Prism.languages.apex = {\n      comment: Prism.languages.clike.comment,\n      string: Prism.languages.clike.string,\n      sql: {\n        pattern: /((?:[=,({:]|\\breturn)\\s*)\\[[^\\[\\]]*\\]/i,\n        lookbehind: true,\n        greedy: true,\n        alias: 'language-sql',\n        inside: Prism.languages.sql\n      },\n      annotation: {\n        pattern: /@\\w+\\b/,\n        alias: 'punctuation'\n      },\n      'class-name': [\n        {\n          pattern: insertClassName(\n            /(\\b(?:class|enum|extends|implements|instanceof|interface|new|trigger\\s+\\w+\\s+on)\\s+)<CLASS-NAME>/\n              .source\n          ),\n          lookbehind: true,\n          inside: classNameInside\n        },\n        {\n          // cast\n          pattern: insertClassName(\n            /(\\(\\s*)<CLASS-NAME>(?=\\s*\\)\\s*[\\w(])/.source\n          ),\n          lookbehind: true,\n          inside: classNameInside\n        },\n        {\n          // variable/parameter declaration and return types\n          pattern: insertClassName(/<CLASS-NAME>(?=\\s*\\w+\\s*[;=,(){:])/.source),\n          inside: classNameInside\n        }\n      ],\n      trigger: {\n        pattern: /(\\btrigger\\s+)\\w+\\b/i,\n        lookbehind: true,\n        alias: 'class-name'\n      },\n      keyword: keywords,\n      function: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n      boolean: /\\b(?:false|true)\\b/i,\n      number: /(?:\\B\\.\\d+|\\b\\d+(?:\\.\\d+|L)?)\\b/i,\n      operator:\n        /[!=](?:==?)?|\\?\\.?|&&|\\|\\||--|\\+\\+|[-+*/^&|]=?|:|<<?=?|>{1,3}=?/,\n      punctuation: /[()\\[\\]{};,.]/\n    }\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = apl\napl.displayName = 'apl'\napl.aliases = []\nfunction apl(Prism) {\n  Prism.languages.apl = {\n    comment: /(?:⍝|#[! ]).*$/m,\n    string: {\n      pattern: /'(?:[^'\\r\\n]|'')*'/,\n      greedy: true\n    },\n    number:\n      /¯?(?:\\d*\\.?\\b\\d+(?:e[+¯]?\\d+)?|¯|∞)(?:j¯?(?:(?:\\d+(?:\\.\\d+)?|\\.\\d+)(?:e[+¯]?\\d+)?|¯|∞))?/i,\n    statement: /:[A-Z][a-z][A-Za-z]*\\b/,\n    'system-function': {\n      pattern: /⎕[A-Z]+/i,\n      alias: 'function'\n    },\n    constant: /[⍬⌾#⎕⍞]/,\n    function: /[-+×÷⌈⌊∣|⍳⍸?*⍟○!⌹<≤=>≥≠≡≢∊⍷∪∩~∨∧⍱⍲⍴,⍪⌽⊖⍉↑↓⊂⊃⊆⊇⌷⍋⍒⊤⊥⍕⍎⊣⊢⍁⍂≈⍯↗¤→]/,\n    'monadic-operator': {\n      pattern: /[\\\\\\/⌿⍀¨⍨⌶&∥]/,\n      alias: 'operator'\n    },\n    'dyadic-operator': {\n      pattern: /[.⍣⍠⍤∘⌸@⌺⍥]/,\n      alias: 'operator'\n    },\n    assignment: {\n      pattern: /←/,\n      alias: 'keyword'\n    },\n    punctuation: /[\\[;\\]()◇⋄]/,\n    dfn: {\n      pattern: /[{}⍺⍵⍶⍹∇⍫:]/,\n      alias: 'builtin'\n    }\n  }\n}\n","'use strict'\n\nmodule.exports = applescript\napplescript.displayName = 'applescript'\napplescript.aliases = []\nfunction applescript(Prism) {\n  Prism.languages.applescript = {\n    comment: [\n      // Allow one level of nesting\n      /\\(\\*(?:\\(\\*(?:[^*]|\\*(?!\\)))*\\*\\)|(?!\\(\\*)[\\s\\S])*?\\*\\)/,\n      /--.+/,\n      /#.+/\n    ],\n    string: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n    number: /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e-?\\d+)?\\b/i,\n    operator: [\n      /[&=≠≤≥*+\\-\\/÷^]|[<>]=?/,\n      /\\b(?:(?:begin|end|start)s? with|(?:contains?|(?:does not|doesn't) contain)|(?:is|isn't|is not) (?:contained by|in)|(?:(?:is|isn't|is not) )?(?:greater|less) than(?: or equal)?(?: to)?|(?:comes|(?:does not|doesn't) come) (?:after|before)|(?:is|isn't|is not) equal(?: to)?|(?:(?:does not|doesn't) equal|equal to|equals|is not|isn't)|(?:a )?(?:ref(?: to)?|reference to)|(?:and|as|div|mod|not|or))\\b/\n    ],\n    keyword:\n      /\\b(?:about|above|after|against|apart from|around|aside from|at|back|before|beginning|behind|below|beneath|beside|between|but|by|considering|continue|copy|does|eighth|else|end|equal|error|every|exit|false|fifth|first|for|fourth|from|front|get|given|global|if|ignoring|in|instead of|into|is|it|its|last|local|me|middle|my|ninth|of|on|onto|out of|over|prop|property|put|repeat|return|returning|second|set|seventh|since|sixth|some|tell|tenth|that|the|then|third|through|thru|timeout|times|to|transaction|true|try|until|where|while|whose|with|without)\\b/,\n    'class-name':\n      /\\b(?:POSIX file|RGB color|alias|application|boolean|centimeters|centimetres|class|constant|cubic centimeters|cubic centimetres|cubic feet|cubic inches|cubic meters|cubic metres|cubic yards|date|degrees Celsius|degrees Fahrenheit|degrees Kelvin|feet|file|gallons|grams|inches|integer|kilograms|kilometers|kilometres|list|liters|litres|meters|metres|miles|number|ounces|pounds|quarts|real|record|reference|script|square feet|square kilometers|square kilometres|square meters|square metres|square miles|square yards|text|yards)\\b/,\n    punctuation: /[{}():,¬«»《》]/\n  }\n}\n","'use strict'\n\nmodule.exports = aql\naql.displayName = 'aql'\naql.aliases = []\nfunction aql(Prism) {\n  Prism.languages.aql = {\n    comment: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,\n    property: {\n      pattern:\n        /([{,]\\s*)(?:(?!\\d)\\w+|([\"'´`])(?:(?!\\2)[^\\\\\\r\\n]|\\\\.)*\\2)(?=\\s*:)/,\n      lookbehind: true,\n      greedy: true\n    },\n    string: {\n      pattern: /([\"'])(?:(?!\\1)[^\\\\\\r\\n]|\\\\.)*\\1/,\n      greedy: true\n    },\n    identifier: {\n      pattern: /([´`])(?:(?!\\1)[^\\\\\\r\\n]|\\\\.)*\\1/,\n      greedy: true\n    },\n    variable: /@@?\\w+/,\n    keyword: [\n      {\n        pattern: /(\\bWITH\\s+)COUNT(?=\\s+INTO\\b)/i,\n        lookbehind: true\n      },\n      /\\b(?:AGGREGATE|ALL|AND|ANY|ASC|COLLECT|DESC|DISTINCT|FILTER|FOR|GRAPH|IN|INBOUND|INSERT|INTO|K_PATHS|K_SHORTEST_PATHS|LET|LIKE|LIMIT|NONE|NOT|NULL|OR|OUTBOUND|REMOVE|REPLACE|RETURN|SHORTEST_PATH|SORT|UPDATE|UPSERT|WINDOW|WITH)\\b/i, // pseudo keywords get a lookbehind to avoid false positives\n      {\n        pattern: /(^|[^\\w.[])(?:KEEP|PRUNE|SEARCH|TO)\\b/i,\n        lookbehind: true\n      },\n      {\n        pattern: /(^|[^\\w.[])(?:CURRENT|NEW|OLD)\\b/,\n        lookbehind: true\n      },\n      {\n        pattern: /\\bOPTIONS(?=\\s*\\{)/i\n      }\n    ],\n    function: /\\b(?!\\d)\\w+(?=\\s*\\()/,\n    boolean: /\\b(?:false|true)\\b/i,\n    range: {\n      pattern: /\\.\\./,\n      alias: 'operator'\n    },\n    number: [\n      /\\b0b[01]+/i,\n      /\\b0x[0-9a-f]+/i,\n      /(?:\\B\\.\\d+|\\b(?:0|[1-9]\\d*)(?:\\.\\d+)?)(?:e[+-]?\\d+)?/i\n    ],\n    operator: /\\*{2,}|[=!]~|[!=<>]=?|&&|\\|\\||[-+*/%]/,\n    punctuation: /::|[?.:,;()[\\]{}]/\n  }\n}\n","'use strict'\nvar refractorCpp = require('./cpp.js')\nmodule.exports = arduino\narduino.displayName = 'arduino'\narduino.aliases = ['ino']\nfunction arduino(Prism) {\n  Prism.register(refractorCpp)\n  Prism.languages.arduino = Prism.languages.extend('cpp', {\n    keyword:\n      /\\b(?:String|array|bool|boolean|break|byte|case|catch|continue|default|do|double|else|finally|for|function|goto|if|in|instanceof|int|integer|long|loop|new|null|return|setup|string|switch|throw|try|void|while|word)\\b/,\n    constant:\n      /\\b(?:ANALOG_MESSAGE|DEFAULT|DIGITAL_MESSAGE|EXTERNAL|FIRMATA_STRING|HIGH|INPUT|INPUT_PULLUP|INTERNAL|INTERNAL1V1|INTERNAL2V56|LED_BUILTIN|LOW|OUTPUT|REPORT_ANALOG|REPORT_DIGITAL|SET_PIN_MODE|SYSEX_START|SYSTEM_RESET)\\b/,\n    builtin:\n      /\\b(?:Audio|BSSID|Bridge|Client|Console|EEPROM|Esplora|EsploraTFT|Ethernet|EthernetClient|EthernetServer|EthernetUDP|File|FileIO|FileSystem|Firmata|GPRS|GSM|GSMBand|GSMClient|GSMModem|GSMPIN|GSMScanner|GSMServer|GSMVoiceCall|GSM_SMS|HttpClient|IPAddress|IRread|Keyboard|KeyboardController|LiquidCrystal|LiquidCrystal_I2C|Mailbox|Mouse|MouseController|PImage|Process|RSSI|RobotControl|RobotMotor|SD|SPI|SSID|Scheduler|Serial|Server|Servo|SoftwareSerial|Stepper|Stream|TFT|Task|USBHost|WiFi|WiFiClient|WiFiServer|WiFiUDP|Wire|YunClient|YunServer|abs|addParameter|analogRead|analogReadResolution|analogReference|analogWrite|analogWriteResolution|answerCall|attach|attachGPRS|attachInterrupt|attached|autoscroll|available|background|beep|begin|beginPacket|beginSD|beginSMS|beginSpeaker|beginTFT|beginTransmission|beginWrite|bit|bitClear|bitRead|bitSet|bitWrite|blink|blinkVersion|buffer|changePIN|checkPIN|checkPUK|checkReg|circle|cityNameRead|cityNameWrite|clear|clearScreen|click|close|compassRead|config|connect|connected|constrain|cos|countryNameRead|countryNameWrite|createChar|cursor|debugPrint|delay|delayMicroseconds|detach|detachInterrupt|digitalRead|digitalWrite|disconnect|display|displayLogos|drawBMP|drawCompass|encryptionType|end|endPacket|endSMS|endTransmission|endWrite|exists|exitValue|fill|find|findUntil|flush|gatewayIP|get|getAsynchronously|getBand|getButton|getCurrentCarrier|getIMEI|getKey|getModifiers|getOemKey|getPINUsed|getResult|getSignalStrength|getSocket|getVoiceCallStatus|getXChange|getYChange|hangCall|height|highByte|home|image|interrupts|isActionDone|isDirectory|isListening|isPIN|isPressed|isValid|keyPressed|keyReleased|keyboardRead|knobRead|leftToRight|line|lineFollowConfig|listen|listenOnLocalhost|loadImage|localIP|lowByte|macAddress|maintain|map|max|messageAvailable|micros|millis|min|mkdir|motorsStop|motorsWrite|mouseDragged|mouseMoved|mousePressed|mouseReleased|move|noAutoscroll|noBlink|noBuffer|noCursor|noDisplay|noFill|noInterrupts|noListenOnLocalhost|noStroke|noTone|onReceive|onRequest|open|openNextFile|overflow|parseCommand|parseFloat|parseInt|parsePacket|pauseMode|peek|pinMode|playFile|playMelody|point|pointTo|position|pow|prepare|press|print|printFirmwareVersion|printVersion|println|process|processInput|pulseIn|put|random|randomSeed|read|readAccelerometer|readBlue|readButton|readBytes|readBytesUntil|readGreen|readJoystickButton|readJoystickSwitch|readJoystickX|readJoystickY|readLightSensor|readMessage|readMicrophone|readNetworks|readRed|readSlider|readString|readStringUntil|readTemperature|ready|rect|release|releaseAll|remoteIP|remoteNumber|remotePort|remove|requestFrom|retrieveCallingNumber|rewindDirectory|rightToLeft|rmdir|robotNameRead|robotNameWrite|run|runAsynchronously|runShellCommand|runShellCommandAsynchronously|running|scanNetworks|scrollDisplayLeft|scrollDisplayRight|seek|sendAnalog|sendDigitalPortPair|sendDigitalPorts|sendString|sendSysex|serialEvent|setBand|setBitOrder|setClockDivider|setCursor|setDNS|setDataMode|setFirmwareVersion|setMode|setPINUsed|setSpeed|setTextSize|setTimeout|shiftIn|shiftOut|shutdown|sin|size|sqrt|startLoop|step|stop|stroke|subnetMask|switchPIN|tan|tempoWrite|text|tone|transfer|tuneWrite|turn|updateIR|userNameRead|userNameWrite|voiceCall|waitContinue|width|write|writeBlue|writeGreen|writeJSON|writeMessage|writeMicroseconds|writeRGB|writeRed|yield)\\b/\n  })\n  Prism.languages.ino = Prism.languages.arduino\n}\n","'use strict'\n\nmodule.exports = arff\narff.displayName = 'arff'\narff.aliases = []\nfunction arff(Prism) {\n  Prism.languages.arff = {\n    comment: /%.*/,\n    string: {\n      pattern: /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true\n    },\n    keyword: /@(?:attribute|data|end|relation)\\b/i,\n    number: /\\b\\d+(?:\\.\\d+)?\\b/,\n    punctuation: /[{},]/\n  }\n}\n","'use strict'\n\nmodule.exports = asciidoc\nasciidoc.displayName = 'asciidoc'\nasciidoc.aliases = ['adoc']\nfunction asciidoc(Prism) {\n  ;(function (Prism) {\n    var attributes = {\n      pattern:\n        /(^[ \\t]*)\\[(?!\\[)(?:([\"'$`])(?:(?!\\2)[^\\\\]|\\\\.)*\\2|\\[(?:[^\\[\\]\\\\]|\\\\.)*\\]|[^\\[\\]\\\\\"'$`]|\\\\.)*\\]/m,\n      lookbehind: true,\n      inside: {\n        quoted: {\n          pattern: /([$`])(?:(?!\\1)[^\\\\]|\\\\.)*\\1/,\n          inside: {\n            punctuation: /^[$`]|[$`]$/\n          }\n        },\n        interpreted: {\n          pattern: /'(?:[^'\\\\]|\\\\.)*'/,\n          inside: {\n            punctuation: /^'|'$/ // See rest below\n          }\n        },\n        string: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n        variable: /\\w+(?==)/,\n        punctuation: /^\\[|\\]$|,/,\n        operator: /=/,\n        // The negative look-ahead prevents blank matches\n        'attr-value': /(?!^\\s+$).+/\n      }\n    }\n    var asciidoc = (Prism.languages.asciidoc = {\n      'comment-block': {\n        pattern: /^(\\/{4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1/m,\n        alias: 'comment'\n      },\n      table: {\n        pattern: /^\\|={3,}(?:(?:\\r?\\n|\\r(?!\\n)).*)*?(?:\\r?\\n|\\r)\\|={3,}$/m,\n        inside: {\n          specifiers: {\n            pattern:\n              /(?:(?:(?:\\d+(?:\\.\\d+)?|\\.\\d+)[+*](?:[<^>](?:\\.[<^>])?|\\.[<^>])?|[<^>](?:\\.[<^>])?|\\.[<^>])[a-z]*|[a-z]+)(?=\\|)/,\n            alias: 'attr-value'\n          },\n          punctuation: {\n            pattern: /(^|[^\\\\])[|!]=*/,\n            lookbehind: true\n          } // See rest below\n        }\n      },\n      'passthrough-block': {\n        pattern: /^(\\+{4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1$/m,\n        inside: {\n          punctuation: /^\\++|\\++$/ // See rest below\n        }\n      },\n      // Literal blocks and listing blocks\n      'literal-block': {\n        pattern: /^(-{4,}|\\.{4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1$/m,\n        inside: {\n          punctuation: /^(?:-+|\\.+)|(?:-+|\\.+)$/ // See rest below\n        }\n      },\n      // Sidebar blocks, quote blocks, example blocks and open blocks\n      'other-block': {\n        pattern:\n          /^(--|\\*{4,}|_{4,}|={4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1$/m,\n        inside: {\n          punctuation: /^(?:-+|\\*+|_+|=+)|(?:-+|\\*+|_+|=+)$/ // See rest below\n        }\n      },\n      // list-punctuation and list-label must appear before indented-block\n      'list-punctuation': {\n        pattern:\n          /(^[ \\t]*)(?:-|\\*{1,5}|\\.{1,5}|(?:[a-z]|\\d+)\\.|[xvi]+\\))(?= )/im,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      'list-label': {\n        pattern: /(^[ \\t]*)[a-z\\d].+(?::{2,4}|;;)(?=\\s)/im,\n        lookbehind: true,\n        alias: 'symbol'\n      },\n      'indented-block': {\n        pattern: /((\\r?\\n|\\r)\\2)([ \\t]+)\\S.*(?:(?:\\r?\\n|\\r)\\3.+)*(?=\\2{2}|$)/,\n        lookbehind: true\n      },\n      comment: /^\\/\\/.*/m,\n      title: {\n        pattern:\n          /^.+(?:\\r?\\n|\\r)(?:={3,}|-{3,}|~{3,}|\\^{3,}|\\+{3,})$|^={1,5} .+|^\\.(?![\\s.]).*/m,\n        alias: 'important',\n        inside: {\n          punctuation: /^(?:\\.|=+)|(?:=+|-+|~+|\\^+|\\++)$/ // See rest below\n        }\n      },\n      'attribute-entry': {\n        pattern: /^:[^:\\r\\n]+:(?: .*?(?: \\+(?:\\r?\\n|\\r).*?)*)?$/m,\n        alias: 'tag'\n      },\n      attributes: attributes,\n      hr: {\n        pattern: /^'{3,}$/m,\n        alias: 'punctuation'\n      },\n      'page-break': {\n        pattern: /^<{3,}$/m,\n        alias: 'punctuation'\n      },\n      admonition: {\n        pattern: /^(?:CAUTION|IMPORTANT|NOTE|TIP|WARNING):/m,\n        alias: 'keyword'\n      },\n      callout: [\n        {\n          pattern: /(^[ \\t]*)<?\\d*>/m,\n          lookbehind: true,\n          alias: 'symbol'\n        },\n        {\n          pattern: /<\\d+>/,\n          alias: 'symbol'\n        }\n      ],\n      macro: {\n        pattern:\n          /\\b[a-z\\d][a-z\\d-]*::?(?:[^\\s\\[\\]]*\\[(?:[^\\]\\\\\"']|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*\\1|\\\\.)*\\])/,\n        inside: {\n          function: /^[a-z\\d-]+(?=:)/,\n          punctuation: /^::?/,\n          attributes: {\n            pattern: /(?:\\[(?:[^\\]\\\\\"']|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*\\1|\\\\.)*\\])/,\n            inside: attributes.inside\n          }\n        }\n      },\n      inline: {\n        /*\nThe initial look-behind prevents the highlighting of escaped quoted text.\nQuoted text can be multi-line but cannot span an empty line.\nAll quoted text can have attributes before [foobar, 'foobar', baz=\"bar\"].\nFirst, we handle the constrained quotes.\nThose must be bounded by non-word chars and cannot have spaces between the delimiter and the first char.\nThey are, in order: _emphasis_, ``double quotes'', `single quotes', `monospace`, 'emphasis', *strong*, +monospace+ and #unquoted#\nThen we handle the unconstrained quotes.\nThose do not have the restrictions of the constrained quotes.\nThey are, in order: __emphasis__, **strong**, ++monospace++, +++passthrough+++, ##unquoted##, $$passthrough$$, ~subscript~, ^superscript^, {attribute-reference}, [[anchor]], [[[bibliography anchor]]], <<xref>>, (((indexes))) and ((indexes))\n*/\n        pattern:\n          /(^|[^\\\\])(?:(?:\\B\\[(?:[^\\]\\\\\"']|([\"'])(?:(?!\\2)[^\\\\]|\\\\.)*\\2|\\\\.)*\\])?(?:\\b_(?!\\s)(?: _|[^_\\\\\\r\\n]|\\\\.)+(?:(?:\\r?\\n|\\r)(?: _|[^_\\\\\\r\\n]|\\\\.)+)*_\\b|\\B``(?!\\s).+?(?:(?:\\r?\\n|\\r).+?)*''\\B|\\B`(?!\\s)(?:[^`'\\s]|\\s+\\S)+['`]\\B|\\B(['*+#])(?!\\s)(?: \\3|(?!\\3)[^\\\\\\r\\n]|\\\\.)+(?:(?:\\r?\\n|\\r)(?: \\3|(?!\\3)[^\\\\\\r\\n]|\\\\.)+)*\\3\\B)|(?:\\[(?:[^\\]\\\\\"']|([\"'])(?:(?!\\4)[^\\\\]|\\\\.)*\\4|\\\\.)*\\])?(?:(__|\\*\\*|\\+\\+\\+?|##|\\$\\$|[~^]).+?(?:(?:\\r?\\n|\\r).+?)*\\5|\\{[^}\\r\\n]+\\}|\\[\\[\\[?.+?(?:(?:\\r?\\n|\\r).+?)*\\]?\\]\\]|<<.+?(?:(?:\\r?\\n|\\r).+?)*>>|\\(\\(\\(?.+?(?:(?:\\r?\\n|\\r).+?)*\\)?\\)\\)))/m,\n        lookbehind: true,\n        inside: {\n          attributes: attributes,\n          url: {\n            pattern: /^(?:\\[\\[\\[?.+?\\]?\\]\\]|<<.+?>>)$/,\n            inside: {\n              punctuation: /^(?:\\[\\[\\[?|<<)|(?:\\]\\]\\]?|>>)$/\n            }\n          },\n          'attribute-ref': {\n            pattern: /^\\{.+\\}$/,\n            inside: {\n              variable: {\n                pattern: /(^\\{)[a-z\\d,+_-]+/,\n                lookbehind: true\n              },\n              operator: /^[=?!#%@$]|!(?=[:}])/,\n              punctuation: /^\\{|\\}$|::?/\n            }\n          },\n          italic: {\n            pattern: /^(['_])[\\s\\S]+\\1$/,\n            inside: {\n              punctuation: /^(?:''?|__?)|(?:''?|__?)$/\n            }\n          },\n          bold: {\n            pattern: /^\\*[\\s\\S]+\\*$/,\n            inside: {\n              punctuation: /^\\*\\*?|\\*\\*?$/\n            }\n          },\n          punctuation:\n            /^(?:``?|\\+{1,3}|##?|\\$\\$|[~^]|\\(\\(\\(?)|(?:''?|\\+{1,3}|##?|\\$\\$|[~^`]|\\)?\\)\\))$/\n        }\n      },\n      replacement: {\n        pattern: /\\((?:C|R|TM)\\)/,\n        alias: 'builtin'\n      },\n      entity: /&#?[\\da-z]{1,8};/i,\n      'line-continuation': {\n        pattern: /(^| )\\+$/m,\n        lookbehind: true,\n        alias: 'punctuation'\n      }\n    }) // Allow some nesting. There is no recursion though, so cloning should not be needed.\n    function copyFromAsciiDoc(keys) {\n      keys = keys.split(' ')\n      var o = {}\n      for (var i = 0, l = keys.length; i < l; i++) {\n        o[keys[i]] = asciidoc[keys[i]]\n      }\n      return o\n    }\n    attributes.inside['interpreted'].inside.rest = copyFromAsciiDoc(\n      'macro inline replacement entity'\n    )\n    asciidoc['passthrough-block'].inside.rest = copyFromAsciiDoc('macro')\n    asciidoc['literal-block'].inside.rest = copyFromAsciiDoc('callout')\n    asciidoc['table'].inside.rest = copyFromAsciiDoc(\n      'comment-block passthrough-block literal-block other-block list-punctuation indented-block comment title attribute-entry attributes hr page-break admonition list-label callout macro inline replacement entity line-continuation'\n    )\n    asciidoc['other-block'].inside.rest = copyFromAsciiDoc(\n      'table list-punctuation indented-block comment attribute-entry attributes hr page-break admonition list-label macro inline replacement entity line-continuation'\n    )\n    asciidoc['title'].inside.rest = copyFromAsciiDoc(\n      'macro inline replacement entity'\n    ) // Plugin to make entity title show the real entity, idea by Roman Komarov\n    Prism.hooks.add('wrap', function (env) {\n      if (env.type === 'entity') {\n        env.attributes['title'] = env.content.value.replace(/&amp;/, '&')\n      }\n    })\n    Prism.languages.adoc = Prism.languages.asciidoc\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = asm6502\nasm6502.displayName = 'asm6502'\nasm6502.aliases = []\nfunction asm6502(Prism) {\n  Prism.languages.asm6502 = {\n    comment: /;.*/,\n    directive: {\n      pattern: /\\.\\w+(?= )/,\n      alias: 'property'\n    },\n    string: /([\"'`])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    'op-code': {\n      pattern:\n        /\\b(?:ADC|AND|ASL|BCC|BCS|BEQ|BIT|BMI|BNE|BPL|BRK|BVC|BVS|CLC|CLD|CLI|CLV|CMP|CPX|CPY|DEC|DEX|DEY|EOR|INC|INX|INY|JMP|JSR|LDA|LDX|LDY|LSR|NOP|ORA|PHA|PHP|PLA|PLP|ROL|ROR|RTI|RTS|SBC|SEC|SED|SEI|STA|STX|STY|TAX|TAY|TSX|TXA|TXS|TYA|adc|and|asl|bcc|bcs|beq|bit|bmi|bne|bpl|brk|bvc|bvs|clc|cld|cli|clv|cmp|cpx|cpy|dec|dex|dey|eor|inc|inx|iny|jmp|jsr|lda|ldx|ldy|lsr|nop|ora|pha|php|pla|plp|rol|ror|rti|rts|sbc|sec|sed|sei|sta|stx|sty|tax|tay|tsx|txa|txs|tya)\\b/,\n      alias: 'keyword'\n    },\n    'hex-number': {\n      pattern: /#?\\$[\\da-f]{1,4}\\b/i,\n      alias: 'number'\n    },\n    'binary-number': {\n      pattern: /#?%[01]+\\b/,\n      alias: 'number'\n    },\n    'decimal-number': {\n      pattern: /#?\\b\\d+\\b/,\n      alias: 'number'\n    },\n    register: {\n      pattern: /\\b[xya]\\b/i,\n      alias: 'variable'\n    },\n    punctuation: /[(),:]/\n  }\n}\n","'use strict'\n\nmodule.exports = asmatmel\nasmatmel.displayName = 'asmatmel'\nasmatmel.aliases = []\nfunction asmatmel(Prism) {\n  Prism.languages.asmatmel = {\n    comment: {\n      pattern: /;.*/,\n      greedy: true\n    },\n    string: {\n      pattern: /([\"'`])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true\n    },\n    constant: /\\b(?:PORT[A-Z]|DDR[A-Z]|(?:DD|P)[A-Z](?:\\d|[0-2]\\d|3[01]))\\b/,\n    directive: {\n      pattern: /\\.\\w+(?= )/,\n      alias: 'property'\n    },\n    'r-register': {\n      pattern: /\\br(?:\\d|[12]\\d|3[01])\\b/,\n      alias: 'variable'\n    },\n    'op-code': {\n      pattern:\n        /\\b(?:ADC|ADD|ADIW|AND|ANDI|ASR|BCLR|BLD|BRBC|BRBS|BRCC|BRCS|BREAK|BREQ|BRGE|BRHC|BRHS|BRID|BRIE|BRLO|BRLT|BRMI|BRNE|BRPL|BRSH|BRTC|BRTS|BRVC|BRVS|BSET|BST|CALL|CBI|CBR|CLC|CLH|CLI|CLN|CLR|CLS|CLT|CLV|CLZ|COM|CP|CPC|CPI|CPSE|DEC|DES|EICALL|EIJMP|ELPM|EOR|FMUL|FMULS|FMULSU|ICALL|IJMP|IN|INC|JMP|LAC|LAS|LAT|LD|LD[A-Za-z0-9]|LPM|LSL|LSR|MOV|MOVW|MUL|MULS|MULSU|NEG|NOP|OR|ORI|OUT|POP|PUSH|RCALL|RET|RETI|RJMP|ROL|ROR|SBC|SBCI|SBI|SBIC|SBIS|SBIW|SBR|SBRC|SBRS|SEC|SEH|SEI|SEN|SER|SES|SET|SEV|SEZ|SLEEP|SPM|ST|ST[A-Z0-9]|SUB|SUBI|SWAP|TST|WDR|XCH|adc|add|adiw|and|andi|asr|bclr|bld|brbc|brbs|brcc|brcs|break|breq|brge|brhc|brhs|brid|brie|brlo|brlt|brmi|brne|brpl|brsh|brtc|brts|brvc|brvs|bset|bst|call|cbi|cbr|clc|clh|cli|cln|clr|cls|clt|clv|clz|com|cp|cpc|cpi|cpse|dec|des|eicall|eijmp|elpm|eor|fmul|fmuls|fmulsu|icall|ijmp|in|inc|jmp|lac|las|lat|ld|ld[a-z0-9]|lpm|lsl|lsr|mov|movw|mul|muls|mulsu|neg|nop|or|ori|out|pop|push|rcall|ret|reti|rjmp|rol|ror|sbc|sbci|sbi|sbic|sbis|sbiw|sbr|sbrc|sbrs|sec|seh|sei|sen|ser|ses|set|sev|sez|sleep|spm|st|st[a-zA-Z0-9]|sub|subi|swap|tst|wdr|xch)\\b/,\n      alias: 'keyword'\n    },\n    'hex-number': {\n      pattern: /#?\\$[\\da-f]{2,4}\\b/i,\n      alias: 'number'\n    },\n    'binary-number': {\n      pattern: /#?%[01]+\\b/,\n      alias: 'number'\n    },\n    'decimal-number': {\n      pattern: /#?\\b\\d+\\b/,\n      alias: 'number'\n    },\n    register: {\n      pattern: /\\b[acznvshtixy]\\b/i,\n      alias: 'variable'\n    },\n    operator: />>=?|<<=?|&&?|\\|\\|?|[-+*/%&|^!=<>?]=?/,\n    punctuation: /[(),:]/\n  }\n}\n","'use strict'\nvar refractorCsharp = require('./csharp.js')\nmodule.exports = aspnet\naspnet.displayName = 'aspnet'\naspnet.aliases = []\nfunction aspnet(Prism) {\n  Prism.register(refractorCsharp)\n  Prism.languages.aspnet = Prism.languages.extend('markup', {\n    'page-directive': {\n      pattern: /<%\\s*@.*%>/,\n      alias: 'tag',\n      inside: {\n        'page-directive': {\n          pattern:\n            /<%\\s*@\\s*(?:Assembly|Control|Implements|Import|Master(?:Type)?|OutputCache|Page|PreviousPageType|Reference|Register)?|%>/i,\n          alias: 'tag'\n        },\n        rest: Prism.languages.markup.tag.inside\n      }\n    },\n    directive: {\n      pattern: /<%.*%>/,\n      alias: 'tag',\n      inside: {\n        directive: {\n          pattern: /<%\\s*?[$=%#:]{0,2}|%>/,\n          alias: 'tag'\n        },\n        rest: Prism.languages.csharp\n      }\n    }\n  }) // Regexp copied from prism-markup, with a negative look-ahead added\n  Prism.languages.aspnet.tag.pattern =\n    /<(?!%)\\/?[^\\s>\\/]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/ // match directives of attribute value foo=\"<% Bar %>\"\n  Prism.languages.insertBefore(\n    'inside',\n    'punctuation',\n    {\n      directive: Prism.languages.aspnet['directive']\n    },\n    Prism.languages.aspnet.tag.inside['attr-value']\n  )\n  Prism.languages.insertBefore('aspnet', 'comment', {\n    'asp-comment': {\n      pattern: /<%--[\\s\\S]*?--%>/,\n      alias: ['asp', 'comment']\n    }\n  }) // script runat=\"server\" contains csharp, not javascript\n  Prism.languages.insertBefore(\n    'aspnet',\n    Prism.languages.javascript ? 'script' : 'tag',\n    {\n      'asp-script': {\n        pattern:\n          /(<script(?=.*runat=['\"]?server\\b)[^>]*>)[\\s\\S]*?(?=<\\/script>)/i,\n        lookbehind: true,\n        alias: ['asp', 'script'],\n        inside: Prism.languages.csharp || {}\n      }\n    }\n  )\n}\n","'use strict'\n\nmodule.exports = autohotkey\nautohotkey.displayName = 'autohotkey'\nautohotkey.aliases = []\nfunction autohotkey(Prism) {\n  // NOTES - follows first-first highlight method, block is locked after highlight, different from SyntaxHl\n  Prism.languages.autohotkey = {\n    comment: [\n      {\n        pattern: /(^|\\s);.*/,\n        lookbehind: true\n      },\n      {\n        pattern:\n          /(^[\\t ]*)\\/\\*(?:[\\r\\n](?![ \\t]*\\*\\/)|[^\\r\\n])*(?:[\\r\\n][ \\t]*\\*\\/)?/m,\n        lookbehind: true,\n        greedy: true\n      }\n    ],\n    tag: {\n      // labels\n      pattern: /^([ \\t]*)[^\\s,`\":]+(?=:[ \\t]*$)/m,\n      lookbehind: true\n    },\n    string: /\"(?:[^\"\\n\\r]|\"\")*\"/,\n    variable: /%\\w+%/,\n    number: /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,\n    operator:\n      /\\?|\\/\\/?=?|:=|\\|[=|]?|&[=&]?|\\+[=+]?|-[=-]?|\\*[=*]?|<(?:<=?|>|=)?|>>?=?|[.^!=~]=?|\\b(?:AND|NOT|OR)\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    selector:\n      /\\b(?:AutoTrim|BlockInput|Break|Click|ClipWait|Continue|Control|ControlClick|ControlFocus|ControlGet|ControlGetFocus|ControlGetPos|ControlGetText|ControlMove|ControlSend|ControlSendRaw|ControlSetText|CoordMode|Critical|DetectHiddenText|DetectHiddenWindows|Drive|DriveGet|DriveSpaceFree|EnvAdd|EnvDiv|EnvGet|EnvMult|EnvSet|EnvSub|EnvUpdate|Exit|ExitApp|FileAppend|FileCopy|FileCopyDir|FileCreateDir|FileCreateShortcut|FileDelete|FileEncoding|FileGetAttrib|FileGetShortcut|FileGetSize|FileGetTime|FileGetVersion|FileInstall|FileMove|FileMoveDir|FileRead|FileReadLine|FileRecycle|FileRecycleEmpty|FileRemoveDir|FileSelectFile|FileSelectFolder|FileSetAttrib|FileSetTime|FormatTime|GetKeyState|Gosub|Goto|GroupActivate|GroupAdd|GroupClose|GroupDeactivate|Gui|GuiControl|GuiControlGet|Hotkey|ImageSearch|IniDelete|IniRead|IniWrite|Input|InputBox|KeyWait|ListHotkeys|ListLines|ListVars|Loop|Menu|MouseClick|MouseClickDrag|MouseGetPos|MouseMove|MsgBox|OnExit|OutputDebug|Pause|PixelGetColor|PixelSearch|PostMessage|Process|Progress|Random|RegDelete|RegRead|RegWrite|Reload|Repeat|Return|Run|RunAs|RunWait|Send|SendEvent|SendInput|SendMessage|SendMode|SendPlay|SendRaw|SetBatchLines|SetCapslockState|SetControlDelay|SetDefaultMouseSpeed|SetEnv|SetFormat|SetKeyDelay|SetMouseDelay|SetNumlockState|SetRegView|SetScrollLockState|SetStoreCapslockMode|SetTimer|SetTitleMatchMode|SetWinDelay|SetWorkingDir|Shutdown|Sleep|Sort|SoundBeep|SoundGet|SoundGetWaveVolume|SoundPlay|SoundSet|SoundSetWaveVolume|SplashImage|SplashTextOff|SplashTextOn|SplitPath|StatusBarGetText|StatusBarWait|StringCaseSense|StringGetPos|StringLeft|StringLen|StringLower|StringMid|StringReplace|StringRight|StringSplit|StringTrimLeft|StringTrimRight|StringUpper|Suspend|SysGet|Thread|ToolTip|Transform|TrayTip|URLDownloadToFile|WinActivate|WinActivateBottom|WinClose|WinGet|WinGetActiveStats|WinGetActiveTitle|WinGetClass|WinGetPos|WinGetText|WinGetTitle|WinHide|WinKill|WinMaximize|WinMenuSelectItem|WinMinimize|WinMinimizeAll|WinMinimizeAllUndo|WinMove|WinRestore|WinSet|WinSetTitle|WinShow|WinWait|WinWaitActive|WinWaitClose|WinWaitNotActive)\\b/i,\n    constant:\n      /\\b(?:a_ahkpath|a_ahkversion|a_appdata|a_appdatacommon|a_autotrim|a_batchlines|a_caretx|a_carety|a_computername|a_controldelay|a_cursor|a_dd|a_ddd|a_dddd|a_defaultmousespeed|a_desktop|a_desktopcommon|a_detecthiddentext|a_detecthiddenwindows|a_endchar|a_eventinfo|a_exitreason|a_fileencoding|a_formatfloat|a_formatinteger|a_gui|a_guicontrol|a_guicontrolevent|a_guievent|a_guiheight|a_guiwidth|a_guix|a_guiy|a_hour|a_iconfile|a_iconhidden|a_iconnumber|a_icontip|a_index|a_ipaddress1|a_ipaddress2|a_ipaddress3|a_ipaddress4|a_is64bitos|a_isadmin|a_iscompiled|a_iscritical|a_ispaused|a_issuspended|a_isunicode|a_keydelay|a_language|a_lasterror|a_linefile|a_linenumber|a_loopfield|a_loopfileattrib|a_loopfiledir|a_loopfileext|a_loopfilefullpath|a_loopfilelongpath|a_loopfilename|a_loopfileshortname|a_loopfileshortpath|a_loopfilesize|a_loopfilesizekb|a_loopfilesizemb|a_loopfiletimeaccessed|a_loopfiletimecreated|a_loopfiletimemodified|a_loopreadline|a_loopregkey|a_loopregname|a_loopregsubkey|a_loopregtimemodified|a_loopregtype|a_mday|a_min|a_mm|a_mmm|a_mmmm|a_mon|a_mousedelay|a_msec|a_mydocuments|a_now|a_nowutc|a_numbatchlines|a_ostype|a_osversion|a_priorhotkey|a_priorkey|a_programfiles|a_programs|a_programscommon|a_ptrsize|a_regview|a_screendpi|a_screenheight|a_screenwidth|a_scriptdir|a_scriptfullpath|a_scripthwnd|a_scriptname|a_sec|a_space|a_startmenu|a_startmenucommon|a_startup|a_startupcommon|a_stringcasesense|a_tab|a_temp|a_thisfunc|a_thishotkey|a_thislabel|a_thismenu|a_thismenuitem|a_thismenuitempos|a_tickcount|a_timeidle|a_timeidlephysical|a_timesincepriorhotkey|a_timesincethishotkey|a_titlematchmode|a_titlematchmodespeed|a_username|a_wday|a_windelay|a_windir|a_workingdir|a_yday|a_year|a_yweek|a_yyyy|clipboard|clipboardall|comspec|errorlevel|programfiles)\\b/i,\n    builtin:\n      /\\b(?:abs|acos|asc|asin|atan|ceil|chr|class|comobjactive|comobjarray|comobjconnect|comobjcreate|comobjerror|comobjflags|comobjget|comobjquery|comobjtype|comobjvalue|cos|dllcall|exp|fileexist|Fileopen|floor|format|il_add|il_create|il_destroy|instr|isfunc|islabel|IsObject|ln|log|ltrim|lv_add|lv_delete|lv_deletecol|lv_getcount|lv_getnext|lv_gettext|lv_insert|lv_insertcol|lv_modify|lv_modifycol|lv_setimagelist|mod|numget|numput|onmessage|regexmatch|regexreplace|registercallback|round|rtrim|sb_seticon|sb_setparts|sb_settext|sin|sqrt|strlen|strreplace|strsplit|substr|tan|tv_add|tv_delete|tv_get|tv_getchild|tv_getcount|tv_getnext|tv_getparent|tv_getprev|tv_getselection|tv_gettext|tv_modify|varsetcapacity|winactive|winexist|__Call|__Get|__New|__Set)\\b/i,\n    symbol:\n      /\\b(?:alt|altdown|altup|appskey|backspace|browser_back|browser_favorites|browser_forward|browser_home|browser_refresh|browser_search|browser_stop|bs|capslock|ctrl|ctrlbreak|ctrldown|ctrlup|del|delete|down|end|enter|esc|escape|f1|f10|f11|f12|f13|f14|f15|f16|f17|f18|f19|f2|f20|f21|f22|f23|f24|f3|f4|f5|f6|f7|f8|f9|home|ins|insert|joy1|joy10|joy11|joy12|joy13|joy14|joy15|joy16|joy17|joy18|joy19|joy2|joy20|joy21|joy22|joy23|joy24|joy25|joy26|joy27|joy28|joy29|joy3|joy30|joy31|joy32|joy4|joy5|joy6|joy7|joy8|joy9|joyaxes|joybuttons|joyinfo|joyname|joypov|joyr|joyu|joyv|joyx|joyy|joyz|lalt|launch_app1|launch_app2|launch_mail|launch_media|lbutton|lcontrol|lctrl|left|lshift|lwin|lwindown|lwinup|mbutton|media_next|media_play_pause|media_prev|media_stop|numlock|numpad0|numpad1|numpad2|numpad3|numpad4|numpad5|numpad6|numpad7|numpad8|numpad9|numpadadd|numpadclear|numpaddel|numpaddiv|numpaddot|numpaddown|numpadend|numpadenter|numpadhome|numpadins|numpadleft|numpadmult|numpadpgdn|numpadpgup|numpadright|numpadsub|numpadup|pgdn|pgup|printscreen|ralt|rbutton|rcontrol|rctrl|right|rshift|rwin|rwindown|rwinup|scrolllock|shift|shiftdown|shiftup|space|tab|up|volume_down|volume_mute|volume_up|wheeldown|wheelleft|wheelright|wheelup|xbutton1|xbutton2)\\b/i,\n    important:\n      /#\\b(?:AllowSameLineComments|ClipboardTimeout|CommentFlag|DerefChar|ErrorStdOut|EscapeChar|HotkeyInterval|HotkeyModifierTimeout|Hotstring|If|IfTimeout|IfWinActive|IfWinExist|IfWinNotActive|IfWinNotExist|Include|IncludeAgain|InputLevel|InstallKeybdHook|InstallMouseHook|KeyHistory|MaxHotkeysPerInterval|MaxMem|MaxThreads|MaxThreadsBuffer|MaxThreadsPerHotkey|MenuMaskKey|NoEnv|NoTrayIcon|Persistent|SingleInstance|UseHook|Warn|WinActivateForce)\\b/i,\n    keyword:\n      /\\b(?:Abort|AboveNormal|Add|ahk_class|ahk_exe|ahk_group|ahk_id|ahk_pid|All|Alnum|Alpha|AltSubmit|AltTab|AltTabAndMenu|AltTabMenu|AltTabMenuDismiss|AlwaysOnTop|AutoSize|Background|BackgroundTrans|BelowNormal|between|BitAnd|BitNot|BitOr|BitShiftLeft|BitShiftRight|BitXOr|Bold|Border|Button|ByRef|Catch|Checkbox|Checked|CheckedGray|Choose|ChooseString|Close|Color|ComboBox|Contains|ControlList|Count|Date|DateTime|Days|DDL|Default|DeleteAll|Delimiter|Deref|Destroy|Digit|Disable|Disabled|DropDownList|Edit|Eject|Else|Enable|Enabled|Error|Exist|Expand|ExStyle|FileSystem|Finally|First|Flash|Float|FloatFast|Focus|Font|for|global|Grid|Group|GroupBox|GuiClose|GuiContextMenu|GuiDropFiles|GuiEscape|GuiSize|Hdr|Hidden|Hide|High|HKCC|HKCR|HKCU|HKEY_CLASSES_ROOT|HKEY_CURRENT_CONFIG|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKLM|HKU|Hours|HScroll|Icon|IconSmall|ID|IDLast|If|IfEqual|IfExist|IfGreater|IfGreaterOrEqual|IfInString|IfLess|IfLessOrEqual|IfMsgBox|IfNotEqual|IfNotExist|IfNotInString|IfWinActive|IfWinExist|IfWinNotActive|IfWinNotExist|Ignore|ImageList|in|Integer|IntegerFast|Interrupt|is|italic|Join|Label|LastFound|LastFoundExist|Limit|Lines|List|ListBox|ListView|local|Lock|Logoff|Low|Lower|Lowercase|MainWindow|Margin|Maximize|MaximizeBox|MaxSize|Minimize|MinimizeBox|MinMax|MinSize|Minutes|MonthCal|Mouse|Move|Multi|NA|No|NoActivate|NoDefault|NoHide|NoIcon|NoMainWindow|norm|Normal|NoSort|NoSortHdr|NoStandard|Not|NoTab|NoTimers|Number|Off|Ok|On|OwnDialogs|Owner|Parse|Password|Picture|Pixel|Pos|Pow|Priority|ProcessName|Radio|Range|Read|ReadOnly|Realtime|Redraw|Region|REG_BINARY|REG_DWORD|REG_EXPAND_SZ|REG_MULTI_SZ|REG_SZ|Relative|Rename|Report|Resize|Restore|Retry|RGB|Screen|Seconds|Section|Serial|SetLabel|ShiftAltTab|Show|Single|Slider|SortDesc|Standard|static|Status|StatusBar|StatusCD|strike|Style|Submit|SysMenu|Tab2|TabStop|Text|Theme|Throw|Tile|ToggleCheck|ToggleEnable|ToolWindow|Top|Topmost|TransColor|Transparent|Tray|TreeView|Try|TryAgain|Type|UnCheck|underline|Unicode|Unlock|Until|UpDown|Upper|Uppercase|UseErrorLevel|Vis|VisFirst|Visible|VScroll|Wait|WaitClose|WantCtrlA|WantF2|WantReturn|While|Wrap|Xdigit|xm|xp|xs|Yes|ym|yp|ys)\\b/i,\n    function: /[^(); \\t,\\n+*\\-=?>:\\\\\\/<&%\\[\\]]+(?=\\()/,\n    punctuation: /[{}[\\]():,]/\n  }\n}\n","'use strict'\n\nmodule.exports = autoit\nautoit.displayName = 'autoit'\nautoit.aliases = []\nfunction autoit(Prism) {\n  Prism.languages.autoit = {\n    comment: [\n      /;.*/,\n      {\n        // The multi-line comments delimiters can actually be commented out with \";\"\n        pattern:\n          /(^[\\t ]*)#(?:comments-start|cs)[\\s\\S]*?^[ \\t]*#(?:ce|comments-end)/m,\n        lookbehind: true\n      }\n    ],\n    url: {\n      pattern: /(^[\\t ]*#include\\s+)(?:<[^\\r\\n>]+>|\"[^\\r\\n\"]+\")/m,\n      lookbehind: true\n    },\n    string: {\n      pattern: /([\"'])(?:\\1\\1|(?!\\1)[^\\r\\n])*\\1/,\n      greedy: true,\n      inside: {\n        variable: /([%$@])\\w+\\1/\n      }\n    },\n    directive: {\n      pattern: /(^[\\t ]*)#[\\w-]+/m,\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    function: /\\b\\w+(?=\\()/,\n    // Variables and macros\n    variable: /[$@]\\w+/,\n    keyword:\n      /\\b(?:Case|Const|Continue(?:Case|Loop)|Default|Dim|Do|Else(?:If)?|End(?:Func|If|Select|Switch|With)|Enum|Exit(?:Loop)?|For|Func|Global|If|In|Local|Next|Null|ReDim|Select|Static|Step|Switch|Then|To|Until|Volatile|WEnd|While|With)\\b/i,\n    number: /\\b(?:0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/i,\n    boolean: /\\b(?:False|True)\\b/i,\n    operator: /<[=>]?|[-+*\\/=&>]=?|[?^]|\\b(?:And|Not|Or)\\b/i,\n    punctuation: /[\\[\\]().,:]/\n  }\n}\n","'use strict'\n\nmodule.exports = avisynth\navisynth.displayName = 'avisynth'\navisynth.aliases = ['avs']\nfunction avisynth(Prism) {\n  // http://avisynth.nl/index.php/The_full_AviSynth_grammar\n  ;(function (Prism) {\n    function replace(pattern, replacements) {\n      return pattern.replace(/<<(\\d+)>>/g, function (m, index) {\n        return replacements[+index]\n      })\n    }\n    function re(pattern, replacements, flags) {\n      return RegExp(replace(pattern, replacements), flags || '')\n    }\n    var types = /bool|clip|float|int|string|val/.source\n    var internals = [\n      // bools\n      /is(?:bool|clip|float|int|string)|defined|(?:(?:internal)?function|var)?exists?/\n        .source, // control\n      /apply|assert|default|eval|import|nop|select|undefined/.source, // global\n      /opt_(?:allowfloataudio|avipadscanlines|dwchannelmask|enable_(?:b64a|planartopackedrgb|v210|y3_10_10|y3_10_16)|usewaveextensible|vdubplanarhack)|set(?:cachemode|maxcpu|memorymax|planarlegacyalignment|workingdir)/\n        .source, // conv\n      /hex(?:value)?|value/.source, // numeric\n      /abs|ceil|continued(?:denominator|numerator)?|exp|floor|fmod|frac|log(?:10)?|max|min|muldiv|pi|pow|rand|round|sign|spline|sqrt/\n        .source, // trig\n      /a?sinh?|a?cosh?|a?tan[2h]?/.source, // bit\n      /(?:bit(?:and|not|x?or|[lr]?shift[aslu]?|sh[lr]|sa[lr]|[lr]rotatel?|ro[rl]|te?st|set(?:count)?|cl(?:ea)?r|ch(?:an)?ge?))/\n        .source, // runtime\n      /average(?:[bgr]|chroma[uv]|luma)|(?:[rgb]|chroma[uv]|luma|rgb|[yuv](?=difference(?:fromprevious|tonext)))difference(?:fromprevious|tonext)?|[yuvrgb]plane(?:median|min|max|minmaxdifference)/\n        .source, // script\n      /getprocessinfo|logmsg|script(?:dir(?:utf8)?|file(?:utf8)?|name(?:utf8)?)|setlogparams/\n        .source, // string\n      /chr|(?:fill|find|left|mid|replace|rev|right)str|format|[lu]case|ord|str(?:cmpi?|fromutf8|len|toutf8)|time|trim(?:all|left|right)/\n        .source, // version\n      /isversionorgreater|version(?:number|string)/.source, // helper\n      /buildpixeltype|colorspacenametopixeltype/.source, // avsplus\n      /addautoloaddir|on(?:cpu|cuda)|prefetch|setfiltermtmode/.source\n    ].join('|')\n    var properties = [\n      // content\n      /has(?:audio|video)/.source, // resolution\n      /height|width/.source, // framerate\n      /frame(?:count|rate)|framerate(?:denominator|numerator)/.source, // interlacing\n      /getparity|is(?:field|frame)based/.source, // color format\n      /bitspercomponent|componentsize|hasalpha|is(?:planar(?:rgba?)?|interleaved|rgb(?:24|32|48|64)?|y(?:8|u(?:va?|y2))?|yv(?:12|16|24|411)|420|422|444|packedrgb)|numcomponents|pixeltype/\n        .source, // audio\n      /audio(?:bits|channels|duration|length(?:[fs]|hi|lo)?|rate)|isaudio(?:float|int)/\n        .source\n    ].join('|')\n    var filters = [\n      // source\n      /avi(?:file)?source|directshowsource|image(?:reader|source|sourceanim)|opendmlsource|segmented(?:avisource|directshowsource)|wavsource/\n        .source, // color\n      /coloryuv|convertbacktoyuy2|convertto(?:RGB(?:24|32|48|64)|(?:planar)?RGBA?|Y8?|YV(?:12|16|24|411)|YUVA?(?:411|420|422|444)|YUY2)|fixluminance|gr[ae]yscale|invert|levels|limiter|mergea?rgb|merge(?:chroma|luma)|rgbadjust|show(?:alpha|blue|green|red)|swapuv|tweak|[uv]toy8?|ytouv/\n        .source, // overlay\n      /(?:colorkey|reset)mask|layer|mask(?:hs)?|merge|overlay|subtract/.source, // geometry\n      /addborders|(?:bicubic|bilinear|blackman|gauss|lanczos4|lanczos|point|sinc|spline(?:16|36|64))resize|crop(?:bottom)?|flip(?:horizontal|vertical)|(?:horizontal|vertical)?reduceby2|letterbox|skewrows|turn(?:180|left|right)/\n        .source, // pixel\n      /blur|fixbrokenchromaupsampling|generalconvolution|(?:spatial|temporal)soften|sharpen/\n        .source, // timeline\n      /trim|(?:un)?alignedsplice|(?:assume|assumescaled|change|convert)FPS|(?:delete|duplicate)frame|dissolve|fade(?:in|io|out)[02]?|freezeframe|interleave|loop|reverse|select(?:even|odd|(?:range)?every)/\n        .source, // interlace\n      /assume[bt]ff|assume(?:field|frame)based|bob|complementparity|doubleweave|peculiarblend|pulldown|separate(?:columns|fields|rows)|swapfields|weave(?:columns|rows)?/\n        .source, // audio\n      /amplify(?:db)?|assumesamplerate|audiodub(?:ex)?|audiotrim|convertaudioto(?:(?:8|16|24|32)bit|float)|converttomono|delayaudio|ensurevbrmp3sync|get(?:left|right)?channel|kill(?:audio|video)|mergechannels|mixaudio|monotostereo|normalize|resampleaudio|ssrc|supereq|timestretch/\n        .source, // conditional\n      /animate|applyrange|conditional(?:filter|reader|select)|frameevaluate|scriptclip|tcp(?:server|source)|writefile(?:end|if|start)?/\n        .source, // export\n      /imagewriter/.source, // debug\n      /blackness|blankclip|colorbars(?:hd)?|compare|dumpfiltergraph|echo|histogram|info|messageclip|preroll|setgraphanalysis|show(?:framenumber|smpte|time)|showfiveversions|stack(?:horizontal|vertical)|subtitle|tone|version/\n        .source\n    ].join('|')\n    var allinternals = [internals, properties, filters].join('|')\n    Prism.languages.avisynth = {\n      comment: [\n        {\n          // Matches [* *] nestable block comments, but only supports 1 level of nested comments\n          // /\\[\\*(?:[^\\[*]|\\[(?!\\*)|\\*(?!\\])|<self>)*\\*\\]/\n          pattern:\n            /(^|[^\\\\])\\[\\*(?:[^\\[*]|\\[(?!\\*)|\\*(?!\\])|\\[\\*(?:[^\\[*]|\\[(?!\\*)|\\*(?!\\]))*\\*\\])*\\*\\]/,\n          lookbehind: true,\n          greedy: true\n        },\n        {\n          // Matches /* */ block comments\n          pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n          lookbehind: true,\n          greedy: true\n        },\n        {\n          // Matches # comments\n          pattern: /(^|[^\\\\$])#.*/,\n          lookbehind: true,\n          greedy: true\n        }\n      ],\n      // Handle before strings because optional arguments are surrounded by double quotes\n      argument: {\n        pattern: re(/\\b(?:<<0>>)\\s+(\"?)\\w+\\1/.source, [types], 'i'),\n        inside: {\n          keyword: /^\\w+/\n        }\n      },\n      // Optional argument assignment\n      'argument-label': {\n        pattern: /([,(][\\s\\\\]*)\\w+\\s*=(?!=)/,\n        lookbehind: true,\n        inside: {\n          'argument-name': {\n            pattern: /^\\w+/,\n            alias: 'punctuation'\n          },\n          punctuation: /=$/\n        }\n      },\n      string: [\n        {\n          // triple double-quoted\n          pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n          greedy: true\n        },\n        {\n          // single double-quoted\n          pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n          greedy: true,\n          inside: {\n            constant: {\n              // These *are* case-sensitive!\n              pattern:\n                /\\b(?:DEFAULT_MT_MODE|(?:MAINSCRIPT|PROGRAM|SCRIPT)DIR|(?:MACHINE|USER)_(?:CLASSIC|PLUS)_PLUGINS)\\b/\n            }\n          }\n        }\n      ],\n      // The special \"last\" variable that takes the value of the last implicitly returned clip\n      variable: /\\b(?:last)\\b/i,\n      boolean: /\\b(?:false|no|true|yes)\\b/i,\n      keyword:\n        /\\b(?:catch|else|for|function|global|if|return|try|while|__END__)\\b/i,\n      constant: /\\bMT_(?:MULTI_INSTANCE|NICE_FILTER|SERIALIZED|SPECIAL_MT)\\b/,\n      // AviSynth's internal functions, filters, and properties\n      'builtin-function': {\n        pattern: re(/\\b(?:<<0>>)\\b/.source, [allinternals], 'i'),\n        alias: 'function'\n      },\n      'type-cast': {\n        pattern: re(/\\b(?:<<0>>)(?=\\s*\\()/.source, [types], 'i'),\n        alias: 'keyword'\n      },\n      // External/user-defined filters\n      function: {\n        pattern: /\\b[a-z_]\\w*(?=\\s*\\()|(\\.)[a-z_]\\w*\\b/i,\n        lookbehind: true\n      },\n      // Matches a \\ as the first or last character on a line\n      'line-continuation': {\n        pattern: /(^[ \\t]*)\\\\|\\\\(?=[ \\t]*$)/m,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      number:\n        /\\B\\$(?:[\\da-f]{6}|[\\da-f]{8})\\b|(?:(?:\\b|\\B-)\\d+(?:\\.\\d*)?\\b|\\B\\.\\d+\\b)/i,\n      operator: /\\+\\+?|[!=<>]=?|&&|\\|\\||[?:*/%-]/,\n      punctuation: /[{}\\[\\]();,.]/\n    }\n    Prism.languages.avs = Prism.languages.avisynth\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = avroIdl\navroIdl.displayName = 'avroIdl'\navroIdl.aliases = []\nfunction avroIdl(Prism) {\n  // GitHub: https://github.com/apache/avro\n  // Docs: https://avro.apache.org/docs/current/idl.html\n  Prism.languages['avro-idl'] = {\n    comment: {\n      pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,\n      greedy: true\n    },\n    string: {\n      pattern: /(^|[^\\\\])\"(?:[^\\r\\n\"\\\\]|\\\\.)*\"/,\n      lookbehind: true,\n      greedy: true\n    },\n    annotation: {\n      pattern: /@(?:[$\\w.-]|`[^\\r\\n`]+`)+/,\n      greedy: true,\n      alias: 'function'\n    },\n    'function-identifier': {\n      pattern: /`[^\\r\\n`]+`(?=\\s*\\()/,\n      greedy: true,\n      alias: 'function'\n    },\n    identifier: {\n      pattern: /`[^\\r\\n`]+`/,\n      greedy: true\n    },\n    'class-name': {\n      pattern: /(\\b(?:enum|error|protocol|record|throws)\\b\\s+)[$\\w]+/,\n      lookbehind: true,\n      greedy: true\n    },\n    keyword:\n      /\\b(?:array|boolean|bytes|date|decimal|double|enum|error|false|fixed|float|idl|import|int|local_timestamp_ms|long|map|null|oneway|protocol|record|schema|string|throws|time_ms|timestamp_ms|true|union|uuid|void)\\b/,\n    function: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n    number: [\n      {\n        pattern:\n          /(^|[^\\w.])-?(?:(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?|0x(?:[a-f0-9]+(?:\\.[a-f0-9]*)?|\\.[a-f0-9]+)(?:p[+-]?\\d+)?)[dfl]?(?![\\w.])/i,\n        lookbehind: true\n      },\n      /-?\\b(?:Infinity|NaN)\\b/\n    ],\n    operator: /=/,\n    punctuation: /[()\\[\\]{}<>.:,;-]/\n  }\n  Prism.languages.avdl = Prism.languages['avro-idl']\n}\n","'use strict'\n\nmodule.exports = bash\nbash.displayName = 'bash'\nbash.aliases = ['shell']\nfunction bash(Prism) {\n  ;(function (Prism) {\n    // $ set | grep '^[A-Z][^[:space:]]*=' | cut -d= -f1 | tr '\\n' '|'\n    // + LC_ALL, RANDOM, REPLY, SECONDS.\n    // + make sure PS1..4 are here as they are not always set,\n    // - some useless things.\n    var envVars =\n      '\\\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\\\b'\n    var commandAfterHeredoc = {\n      pattern: /(^([\"']?)\\w+\\2)[ \\t]+\\S.*/,\n      lookbehind: true,\n      alias: 'punctuation',\n      // this looks reasonably well in all themes\n      inside: null // see below\n    }\n    var insideString = {\n      bash: commandAfterHeredoc,\n      environment: {\n        pattern: RegExp('\\\\$' + envVars),\n        alias: 'constant'\n      },\n      variable: [\n        // [0]: Arithmetic Environment\n        {\n          pattern: /\\$?\\(\\([\\s\\S]+?\\)\\)/,\n          greedy: true,\n          inside: {\n            // If there is a $ sign at the beginning highlight $(( and )) as variable\n            variable: [\n              {\n                pattern: /(^\\$\\(\\([\\s\\S]+)\\)\\)/,\n                lookbehind: true\n              },\n              /^\\$\\(\\(/\n            ],\n            number:\n              /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,\n            // Operators according to https://www.gnu.org/software/bash/manual/bashref.html#Shell-Arithmetic\n            operator:\n              /--|\\+\\+|\\*\\*=?|<<=?|>>=?|&&|\\|\\||[=!+\\-*/%<>^&|]=?|[?~:]/,\n            // If there is no $ sign at the beginning highlight (( and )) as punctuation\n            punctuation: /\\(\\(?|\\)\\)?|,|;/\n          }\n        }, // [1]: Command Substitution\n        {\n          pattern: /\\$\\((?:\\([^)]+\\)|[^()])+\\)|`[^`]+`/,\n          greedy: true,\n          inside: {\n            variable: /^\\$\\(|^`|\\)$|`$/\n          }\n        }, // [2]: Brace expansion\n        {\n          pattern: /\\$\\{[^}]+\\}/,\n          greedy: true,\n          inside: {\n            operator: /:[-=?+]?|[!\\/]|##?|%%?|\\^\\^?|,,?/,\n            punctuation: /[\\[\\]]/,\n            environment: {\n              pattern: RegExp('(\\\\{)' + envVars),\n              lookbehind: true,\n              alias: 'constant'\n            }\n          }\n        },\n        /\\$(?:\\w+|[#?*!@$])/\n      ],\n      // Escape sequences from echo and printf's manuals, and escaped quotes.\n      entity:\n        /\\\\(?:[abceEfnrtv\\\\\"]|O?[0-7]{1,3}|U[0-9a-fA-F]{8}|u[0-9a-fA-F]{4}|x[0-9a-fA-F]{1,2})/\n    }\n    Prism.languages.bash = {\n      shebang: {\n        pattern: /^#!\\s*\\/.*/,\n        alias: 'important'\n      },\n      comment: {\n        pattern: /(^|[^\"{\\\\$])#.*/,\n        lookbehind: true\n      },\n      'function-name': [\n        // a) function foo {\n        // b) foo() {\n        // c) function foo() {\n        // but not “foo {”\n        {\n          // a) and c)\n          pattern: /(\\bfunction\\s+)[\\w-]+(?=(?:\\s*\\(?:\\s*\\))?\\s*\\{)/,\n          lookbehind: true,\n          alias: 'function'\n        },\n        {\n          // b)\n          pattern: /\\b[\\w-]+(?=\\s*\\(\\s*\\)\\s*\\{)/,\n          alias: 'function'\n        }\n      ],\n      // Highlight variable names as variables in for and select beginnings.\n      'for-or-select': {\n        pattern: /(\\b(?:for|select)\\s+)\\w+(?=\\s+in\\s)/,\n        alias: 'variable',\n        lookbehind: true\n      },\n      // Highlight variable names as variables in the left-hand part\n      // of assignments (“=” and “+=”).\n      'assign-left': {\n        pattern: /(^|[\\s;|&]|[<>]\\()\\w+(?=\\+?=)/,\n        inside: {\n          environment: {\n            pattern: RegExp('(^|[\\\\s;|&]|[<>]\\\\()' + envVars),\n            lookbehind: true,\n            alias: 'constant'\n          }\n        },\n        alias: 'variable',\n        lookbehind: true\n      },\n      string: [\n        // Support for Here-documents https://en.wikipedia.org/wiki/Here_document\n        {\n          pattern: /((?:^|[^<])<<-?\\s*)(\\w+)\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\2/,\n          lookbehind: true,\n          greedy: true,\n          inside: insideString\n        }, // Here-document with quotes around the tag\n        // → No expansion (so no “inside”).\n        {\n          pattern: /((?:^|[^<])<<-?\\s*)([\"'])(\\w+)\\2\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\3/,\n          lookbehind: true,\n          greedy: true,\n          inside: {\n            bash: commandAfterHeredoc\n          }\n        }, // “Normal” string\n        {\n          // https://www.gnu.org/software/bash/manual/html_node/Double-Quotes.html\n          pattern:\n            /(^|[^\\\\](?:\\\\\\\\)*)\"(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|\\$(?!\\()|`[^`]+`|[^\"\\\\`$])*\"/,\n          lookbehind: true,\n          greedy: true,\n          inside: insideString\n        },\n        {\n          // https://www.gnu.org/software/bash/manual/html_node/Single-Quotes.html\n          pattern: /(^|[^$\\\\])'[^']*'/,\n          lookbehind: true,\n          greedy: true\n        },\n        {\n          // https://www.gnu.org/software/bash/manual/html_node/ANSI_002dC-Quoting.html\n          pattern: /\\$'(?:[^'\\\\]|\\\\[\\s\\S])*'/,\n          greedy: true,\n          inside: {\n            entity: insideString.entity\n          }\n        }\n      ],\n      environment: {\n        pattern: RegExp('\\\\$?' + envVars),\n        alias: 'constant'\n      },\n      variable: insideString.variable,\n      function: {\n        pattern:\n          /(^|[\\s;|&]|[<>]\\()(?:add|apropos|apt|apt-cache|apt-get|aptitude|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|composer|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|docker|docker-compose|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|node|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|podman|podman-compose|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vcpkg|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\\s;|&])/,\n        lookbehind: true\n      },\n      keyword: {\n        pattern:\n          /(^|[\\s;|&]|[<>]\\()(?:case|do|done|elif|else|esac|fi|for|function|if|in|select|then|until|while)(?=$|[)\\s;|&])/,\n        lookbehind: true\n      },\n      // https://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html\n      builtin: {\n        pattern:\n          /(^|[\\s;|&]|[<>]\\()(?:\\.|:|alias|bind|break|builtin|caller|cd|command|continue|declare|echo|enable|eval|exec|exit|export|getopts|hash|help|let|local|logout|mapfile|printf|pwd|read|readarray|readonly|return|set|shift|shopt|source|test|times|trap|type|typeset|ulimit|umask|unalias|unset)(?=$|[)\\s;|&])/,\n        lookbehind: true,\n        // Alias added to make those easier to distinguish from strings.\n        alias: 'class-name'\n      },\n      boolean: {\n        pattern: /(^|[\\s;|&]|[<>]\\()(?:false|true)(?=$|[)\\s;|&])/,\n        lookbehind: true\n      },\n      'file-descriptor': {\n        pattern: /\\B&\\d\\b/,\n        alias: 'important'\n      },\n      operator: {\n        // Lots of redirections here, but not just that.\n        pattern:\n          /\\d?<>|>\\||\\+=|=[=~]?|!=?|<<[<-]?|[&\\d]?>>|\\d[<>]&?|[<>][&=]?|&[>&]?|\\|[&|]?/,\n        inside: {\n          'file-descriptor': {\n            pattern: /^\\d/,\n            alias: 'important'\n          }\n        }\n      },\n      punctuation: /\\$?\\(\\(?|\\)\\)?|\\.\\.|[{}[\\];\\\\]/,\n      number: {\n        pattern: /(^|\\s)(?:[1-9]\\d*|0)(?:[.,]\\d+)?\\b/,\n        lookbehind: true\n      }\n    }\n    commandAfterHeredoc.inside = Prism.languages.bash\n    /* Patterns in command substitution. */\n    var toBeCopied = [\n      'comment',\n      'function-name',\n      'for-or-select',\n      'assign-left',\n      'string',\n      'environment',\n      'function',\n      'keyword',\n      'builtin',\n      'boolean',\n      'file-descriptor',\n      'operator',\n      'punctuation',\n      'number'\n    ]\n    var inside = insideString.variable[1].inside\n    for (var i = 0; i < toBeCopied.length; i++) {\n      inside[toBeCopied[i]] = Prism.languages.bash[toBeCopied[i]]\n    }\n    Prism.languages.shell = Prism.languages.bash\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = basic\nbasic.displayName = 'basic'\nbasic.aliases = []\nfunction basic(Prism) {\n  Prism.languages.basic = {\n    comment: {\n      pattern: /(?:!|REM\\b).+/i,\n      inside: {\n        keyword: /^REM/i\n      }\n    },\n    string: {\n      pattern: /\"(?:\"\"|[!#$%&'()*,\\/:;<=>?^\\w +\\-.])*\"/,\n      greedy: true\n    },\n    number: /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:E[+-]?\\d+)?/i,\n    keyword:\n      /\\b(?:AS|BEEP|BLOAD|BSAVE|CALL(?: ABSOLUTE)?|CASE|CHAIN|CHDIR|CLEAR|CLOSE|CLS|COM|COMMON|CONST|DATA|DECLARE|DEF(?: FN| SEG|DBL|INT|LNG|SNG|STR)|DIM|DO|DOUBLE|ELSE|ELSEIF|END|ENVIRON|ERASE|ERROR|EXIT|FIELD|FILES|FOR|FUNCTION|GET|GOSUB|GOTO|IF|INPUT|INTEGER|IOCTL|KEY|KILL|LINE INPUT|LOCATE|LOCK|LONG|LOOP|LSET|MKDIR|NAME|NEXT|OFF|ON(?: COM| ERROR| KEY| TIMER)?|OPEN|OPTION BASE|OUT|POKE|PUT|READ|REDIM|REM|RESTORE|RESUME|RETURN|RMDIR|RSET|RUN|SELECT CASE|SHARED|SHELL|SINGLE|SLEEP|STATIC|STEP|STOP|STRING|SUB|SWAP|SYSTEM|THEN|TIMER|TO|TROFF|TRON|TYPE|UNLOCK|UNTIL|USING|VIEW PRINT|WAIT|WEND|WHILE|WRITE)(?:\\$|\\b)/i,\n    function:\n      /\\b(?:ABS|ACCESS|ACOS|ANGLE|AREA|ARITHMETIC|ARRAY|ASIN|ASK|AT|ATN|BASE|BEGIN|BREAK|CAUSE|CEIL|CHR|CLIP|COLLATE|COLOR|CON|COS|COSH|COT|CSC|DATE|DATUM|DEBUG|DECIMAL|DEF|DEG|DEGREES|DELETE|DET|DEVICE|DISPLAY|DOT|ELAPSED|EPS|ERASABLE|EXLINE|EXP|EXTERNAL|EXTYPE|FILETYPE|FIXED|FP|GO|GRAPH|HANDLER|IDN|IMAGE|IN|INT|INTERNAL|IP|IS|KEYED|LBOUND|LCASE|LEFT|LEN|LENGTH|LET|LINE|LINES|LOG|LOG10|LOG2|LTRIM|MARGIN|MAT|MAX|MAXNUM|MID|MIN|MISSING|MOD|NATIVE|NUL|NUMERIC|OF|OPTION|ORD|ORGANIZATION|OUTIN|OUTPUT|PI|POINT|POINTER|POINTS|POS|PRINT|PROGRAM|PROMPT|RAD|RADIANS|RANDOMIZE|RECORD|RECSIZE|RECTYPE|RELATIVE|REMAINDER|REPEAT|REST|RETRY|REWRITE|RIGHT|RND|ROUND|RTRIM|SAME|SEC|SELECT|SEQUENTIAL|SET|SETTER|SGN|SIN|SINH|SIZE|SKIP|SQR|STANDARD|STATUS|STR|STREAM|STYLE|TAB|TAN|TANH|TEMPLATE|TEXT|THERE|TIME|TIMEOUT|TRACE|TRANSFORM|TRUNCATE|UBOUND|UCASE|USE|VAL|VARIABLE|VIEWPORT|WHEN|WINDOW|WITH|ZER|ZONEWIDTH)(?:\\$|\\b)/i,\n    operator: /<[=>]?|>=?|[+\\-*\\/^=&]|\\b(?:AND|EQV|IMP|NOT|OR|XOR)\\b/i,\n    punctuation: /[,;:()]/\n  }\n}\n","'use strict'\n\nmodule.exports = batch\nbatch.displayName = 'batch'\nbatch.aliases = []\nfunction batch(Prism) {\n  ;(function (Prism) {\n    var variable = /%%?[~:\\w]+%?|!\\S+!/\n    var parameter = {\n      pattern: /\\/[a-z?]+(?=[ :]|$):?|-[a-z]\\b|--[a-z-]+\\b/im,\n      alias: 'attr-name',\n      inside: {\n        punctuation: /:/\n      }\n    }\n    var string = /\"(?:[\\\\\"]\"|[^\"])*\"(?!\")/\n    var number = /(?:\\b|-)\\d+\\b/\n    Prism.languages.batch = {\n      comment: [\n        /^::.*/m,\n        {\n          pattern: /((?:^|[&(])[ \\t]*)rem\\b(?:[^^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/im,\n          lookbehind: true\n        }\n      ],\n      label: {\n        pattern: /^:.*/m,\n        alias: 'property'\n      },\n      command: [\n        {\n          // FOR command\n          pattern:\n            /((?:^|[&(])[ \\t]*)for(?: \\/[a-z?](?:[ :](?:\"[^\"]*\"|[^\\s\"/]\\S*))?)* \\S+ in \\([^)]+\\) do/im,\n          lookbehind: true,\n          inside: {\n            keyword: /\\b(?:do|in)\\b|^for\\b/i,\n            string: string,\n            parameter: parameter,\n            variable: variable,\n            number: number,\n            punctuation: /[()',]/\n          }\n        },\n        {\n          // IF command\n          pattern:\n            /((?:^|[&(])[ \\t]*)if(?: \\/[a-z?](?:[ :](?:\"[^\"]*\"|[^\\s\"/]\\S*))?)* (?:not )?(?:cmdextversion \\d+|defined \\w+|errorlevel \\d+|exist \\S+|(?:\"[^\"]*\"|(?!\")(?:(?!==)\\S)+)?(?:==| (?:equ|geq|gtr|leq|lss|neq) )(?:\"[^\"]*\"|[^\\s\"]\\S*))/im,\n          lookbehind: true,\n          inside: {\n            keyword:\n              /\\b(?:cmdextversion|defined|errorlevel|exist|not)\\b|^if\\b/i,\n            string: string,\n            parameter: parameter,\n            variable: variable,\n            number: number,\n            operator: /\\^|==|\\b(?:equ|geq|gtr|leq|lss|neq)\\b/i\n          }\n        },\n        {\n          // ELSE command\n          pattern: /((?:^|[&()])[ \\t]*)else\\b/im,\n          lookbehind: true,\n          inside: {\n            keyword: /^else\\b/i\n          }\n        },\n        {\n          // SET command\n          pattern:\n            /((?:^|[&(])[ \\t]*)set(?: \\/[a-z](?:[ :](?:\"[^\"]*\"|[^\\s\"/]\\S*))?)* (?:[^^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/im,\n          lookbehind: true,\n          inside: {\n            keyword: /^set\\b/i,\n            string: string,\n            parameter: parameter,\n            variable: [variable, /\\w+(?=(?:[*\\/%+\\-&^|]|<<|>>)?=)/],\n            number: number,\n            operator: /[*\\/%+\\-&^|]=?|<<=?|>>=?|[!~_=]/,\n            punctuation: /[()',]/\n          }\n        },\n        {\n          // Other commands\n          pattern:\n            /((?:^|[&(])[ \\t]*@?)\\w+\\b(?:\"(?:[\\\\\"]\"|[^\"])*\"(?!\")|[^\"^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/m,\n          lookbehind: true,\n          inside: {\n            keyword: /^\\w+\\b/,\n            string: string,\n            parameter: parameter,\n            label: {\n              pattern: /(^\\s*):\\S+/m,\n              lookbehind: true,\n              alias: 'property'\n            },\n            variable: variable,\n            number: number,\n            operator: /\\^/\n          }\n        }\n      ],\n      operator: /[&@]/,\n      punctuation: /[()']/\n    }\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = bbcode\nbbcode.displayName = 'bbcode'\nbbcode.aliases = ['shortcode']\nfunction bbcode(Prism) {\n  Prism.languages.bbcode = {\n    tag: {\n      pattern:\n        /\\[\\/?[^\\s=\\]]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\"\\]=]+))?(?:\\s+[^\\s=\\]]+\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\"\\]=]+))*\\s*\\]/,\n      inside: {\n        tag: {\n          pattern: /^\\[\\/?[^\\s=\\]]+/,\n          inside: {\n            punctuation: /^\\[\\/?/\n          }\n        },\n        'attr-value': {\n          pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\"\\]=]+)/,\n          inside: {\n            punctuation: [\n              /^=/,\n              {\n                pattern: /^(\\s*)[\"']|[\"']$/,\n                lookbehind: true\n              }\n            ]\n          }\n        },\n        punctuation: /\\]/,\n        'attr-name': /[^\\s=\\]]+/\n      }\n    }\n  }\n  Prism.languages.shortcode = Prism.languages.bbcode\n}\n","'use strict'\n\nmodule.exports = bicep\nbicep.displayName = 'bicep'\nbicep.aliases = []\nfunction bicep(Prism) {\n  // based loosely upon: https://github.com/Azure/bicep/blob/main/src/textmate/bicep.tmlanguage\n  Prism.languages.bicep = {\n    comment: [\n      {\n        // multiline comments eg /* ASDF */\n        pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n        lookbehind: true,\n        greedy: true\n      },\n      {\n        // singleline comments eg // ASDF\n        pattern: /(^|[^\\\\:])\\/\\/.*/,\n        lookbehind: true,\n        greedy: true\n      }\n    ],\n    property: [\n      {\n        pattern: /([\\r\\n][ \\t]*)[a-z_]\\w*(?=[ \\t]*:)/i,\n        lookbehind: true\n      },\n      {\n        pattern: /([\\r\\n][ \\t]*)'(?:\\\\.|\\$(?!\\{)|[^'\\\\\\r\\n$])*'(?=[ \\t]*:)/,\n        lookbehind: true,\n        greedy: true\n      }\n    ],\n    string: [\n      {\n        pattern: /'''[^'][\\s\\S]*?'''/,\n        greedy: true\n      },\n      {\n        pattern: /(^|[^\\\\'])'(?:\\\\.|\\$(?!\\{)|[^'\\\\\\r\\n$])*'/,\n        lookbehind: true,\n        greedy: true\n      }\n    ],\n    'interpolated-string': {\n      pattern: /(^|[^\\\\'])'(?:\\\\.|\\$(?:(?!\\{)|\\{[^{}\\r\\n]*\\})|[^'\\\\\\r\\n$])*'/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern: /\\$\\{[^{}\\r\\n]*\\}/,\n          inside: {\n            expression: {\n              pattern: /(^\\$\\{)[\\s\\S]+(?=\\}$)/,\n              lookbehind: true\n            },\n            punctuation: /^\\$\\{|\\}$/\n          }\n        },\n        string: /[\\s\\S]+/\n      }\n    },\n    datatype: {\n      pattern: /(\\b(?:output|param)\\b[ \\t]+\\w+[ \\t]+)\\w+\\b/,\n      lookbehind: true,\n      alias: 'class-name'\n    },\n    boolean: /\\b(?:false|true)\\b/,\n    // https://github.com/Azure/bicep/blob/114a3251b4e6e30082a58729f19a8cc4e374ffa6/src/textmate/bicep.tmlanguage#L184\n    keyword:\n      /\\b(?:existing|for|if|in|module|null|output|param|resource|targetScope|var)\\b/,\n    decorator: /@\\w+\\b/,\n    function: /\\b[a-z_]\\w*(?=[ \\t]*\\()/i,\n    number: /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:E[+-]?\\d+)?/i,\n    operator:\n      /--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/,\n    punctuation: /[{}[\\];(),.:]/\n  }\n  Prism.languages.bicep['interpolated-string'].inside['interpolation'].inside[\n    'expression'\n  ].inside = Prism.languages.bicep\n}\n","'use strict'\n\nmodule.exports = birb\nbirb.displayName = 'birb'\nbirb.aliases = []\nfunction birb(Prism) {\n  Prism.languages.birb = Prism.languages.extend('clike', {\n    string: {\n      pattern: /r?(\"|')(?:\\\\.|(?!\\1)[^\\\\])*\\1/,\n      greedy: true\n    },\n    'class-name': [\n      /\\b[A-Z](?:[\\d_]*[a-zA-Z]\\w*)?\\b/, // matches variable and function return types (parameters as well).\n      /\\b(?:[A-Z]\\w*|(?!(?:var|void)\\b)[a-z]\\w*)(?=\\s+\\w+\\s*[;,=()])/\n    ],\n    keyword:\n      /\\b(?:assert|break|case|class|const|default|else|enum|final|follows|for|grab|if|nest|new|next|noSeeb|return|static|switch|throw|var|void|while)\\b/,\n    operator: /\\+\\+|--|&&|\\|\\||<<=?|>>=?|~(?:\\/=?)?|[+\\-*\\/%&^|=!<>]=?|\\?|:/,\n    variable: /\\b[a-z_]\\w*\\b/\n  })\n  Prism.languages.insertBefore('birb', 'function', {\n    metadata: {\n      pattern: /<\\w+>/,\n      greedy: true,\n      alias: 'symbol'\n    }\n  })\n}\n","'use strict'\nvar refractorC = require('./c.js')\nmodule.exports = bison\nbison.displayName = 'bison'\nbison.aliases = []\nfunction bison(Prism) {\n  Prism.register(refractorC)\n  Prism.languages.bison = Prism.languages.extend('c', {})\n  Prism.languages.insertBefore('bison', 'comment', {\n    bison: {\n      // This should match all the beginning of the file\n      // including the prologue(s), the bison declarations and\n      // the grammar rules.\n      pattern: /^(?:[^%]|%(?!%))*%%[\\s\\S]*?%%/,\n      inside: {\n        c: {\n          // Allow for one level of nested braces\n          pattern: /%\\{[\\s\\S]*?%\\}|\\{(?:\\{[^}]*\\}|[^{}])*\\}/,\n          inside: {\n            delimiter: {\n              pattern: /^%?\\{|%?\\}$/,\n              alias: 'punctuation'\n            },\n            'bison-variable': {\n              pattern: /[$@](?:<[^\\s>]+>)?[\\w$]+/,\n              alias: 'variable',\n              inside: {\n                punctuation: /<|>/\n              }\n            },\n            rest: Prism.languages.c\n          }\n        },\n        comment: Prism.languages.c.comment,\n        string: Prism.languages.c.string,\n        property: /\\S+(?=:)/,\n        keyword: /%\\w+/,\n        number: {\n          pattern: /(^|[^@])\\b(?:0x[\\da-f]+|\\d+)/i,\n          lookbehind: true\n        },\n        punctuation: /%[%?]|[|:;\\[\\]<>]/\n      }\n    }\n  })\n}\n","'use strict'\n\nmodule.exports = bnf\nbnf.displayName = 'bnf'\nbnf.aliases = ['rbnf']\nfunction bnf(Prism) {\n  Prism.languages.bnf = {\n    string: {\n      pattern: /\"[^\\r\\n\"]*\"|'[^\\r\\n']*'/\n    },\n    definition: {\n      pattern: /<[^<>\\r\\n\\t]+>(?=\\s*::=)/,\n      alias: ['rule', 'keyword'],\n      inside: {\n        punctuation: /^<|>$/\n      }\n    },\n    rule: {\n      pattern: /<[^<>\\r\\n\\t]+>/,\n      inside: {\n        punctuation: /^<|>$/\n      }\n    },\n    operator: /::=|[|()[\\]{}*+?]|\\.{3}/\n  }\n  Prism.languages.rbnf = Prism.languages.bnf\n}\n","'use strict'\n\nmodule.exports = brainfuck\nbrainfuck.displayName = 'brainfuck'\nbrainfuck.aliases = []\nfunction brainfuck(Prism) {\n  Prism.languages.brainfuck = {\n    pointer: {\n      pattern: /<|>/,\n      alias: 'keyword'\n    },\n    increment: {\n      pattern: /\\+/,\n      alias: 'inserted'\n    },\n    decrement: {\n      pattern: /-/,\n      alias: 'deleted'\n    },\n    branching: {\n      pattern: /\\[|\\]/,\n      alias: 'important'\n    },\n    operator: /[.,]/,\n    comment: /\\S+/\n  }\n}\n","'use strict'\n\nmodule.exports = brightscript\nbrightscript.displayName = 'brightscript'\nbrightscript.aliases = []\nfunction brightscript(Prism) {\n  Prism.languages.brightscript = {\n    comment: /(?:\\brem|').*/i,\n    'directive-statement': {\n      pattern: /(^[\\t ]*)#(?:const|else(?:[\\t ]+if)?|end[\\t ]+if|error|if).*/im,\n      lookbehind: true,\n      alias: 'property',\n      inside: {\n        'error-message': {\n          pattern: /(^#error).+/,\n          lookbehind: true\n        },\n        directive: {\n          pattern: /^#(?:const|else(?:[\\t ]+if)?|end[\\t ]+if|error|if)/,\n          alias: 'keyword'\n        },\n        expression: {\n          pattern: /[\\s\\S]+/,\n          inside: null // see below\n        }\n      }\n    },\n    property: {\n      pattern:\n        /([\\r\\n{,][\\t ]*)(?:(?!\\d)\\w+|\"(?:[^\"\\r\\n]|\"\")*\"(?!\"))(?=[ \\t]*:)/,\n      lookbehind: true,\n      greedy: true\n    },\n    string: {\n      pattern: /\"(?:[^\"\\r\\n]|\"\")*\"(?!\")/,\n      greedy: true\n    },\n    'class-name': {\n      pattern: /(\\bAs[\\t ]+)\\w+/i,\n      lookbehind: true\n    },\n    keyword:\n      /\\b(?:As|Dim|Each|Else|Elseif|End|Exit|For|Function|Goto|If|In|Print|Return|Step|Stop|Sub|Then|To|While)\\b/i,\n    boolean: /\\b(?:false|true)\\b/i,\n    function: /\\b(?!\\d)\\w+(?=[\\t ]*\\()/,\n    number: /(?:\\b\\d+(?:\\.\\d+)?(?:[ed][+-]\\d+)?|&h[a-f\\d]+)\\b[%&!#]?/i,\n    operator:\n      /--|\\+\\+|>>=?|<<=?|<>|[-+*/\\\\<>]=?|[:^=?]|\\b(?:and|mod|not|or)\\b/i,\n    punctuation: /[.,;()[\\]{}]/,\n    constant: /\\b(?:LINE_NUM)\\b/i\n  }\n  Prism.languages.brightscript['directive-statement'].inside.expression.inside =\n    Prism.languages.brightscript\n}\n","'use strict'\n\nmodule.exports = bro\nbro.displayName = 'bro'\nbro.aliases = []\nfunction bro(Prism) {\n  Prism.languages.bro = {\n    comment: {\n      pattern: /(^|[^\\\\$])#.*/,\n      lookbehind: true,\n      inside: {\n        italic: /\\b(?:FIXME|TODO|XXX)\\b/\n      }\n    },\n    string: {\n      pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true\n    },\n    boolean: /\\b[TF]\\b/,\n    function: {\n      pattern: /(\\b(?:event|function|hook)[ \\t]+)\\w+(?:::\\w+)?/,\n      lookbehind: true\n    },\n    builtin:\n      /(?:@(?:load(?:-(?:plugin|sigs))?|unload|prefixes|ifn?def|else|(?:end)?if|DIR|FILENAME))|(?:&?(?:add_func|create_expire|default|delete_func|encrypt|error_handler|expire_func|group|log|mergeable|optional|persistent|priority|raw_output|read_expire|redef|rotate_interval|rotate_size|synchronized|type_column|write_expire))/,\n    constant: {\n      pattern: /(\\bconst[ \\t]+)\\w+/i,\n      lookbehind: true\n    },\n    keyword:\n      /\\b(?:add|addr|alarm|any|bool|break|const|continue|count|delete|double|else|enum|event|export|file|for|function|global|hook|if|in|int|interval|local|module|next|of|opaque|pattern|port|print|record|return|schedule|set|string|subnet|table|time|timeout|using|vector|when)\\b/,\n    operator: /--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&|\\|\\|?|\\?|\\*|\\/|~|\\^|%/,\n    number: /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n    punctuation: /[{}[\\];(),.:]/\n  }\n}\n","'use strict'\n\nmodule.exports = bsl\nbsl.displayName = 'bsl'\nbsl.aliases = []\nfunction bsl(Prism) {\n  /* eslint-disable no-misleading-character-class */\n  // 1C:Enterprise\n  // https://github.com/Diversus23/\n  //\n  Prism.languages.bsl = {\n    comment: /\\/\\/.*/,\n    string: [\n      // Строки\n      // Strings\n      {\n        pattern: /\"(?:[^\"]|\"\")*\"(?!\")/,\n        greedy: true\n      }, // Дата и время\n      // Date & time\n      {\n        pattern: /'(?:[^'\\r\\n\\\\]|\\\\.)*'/\n      }\n    ],\n    keyword: [\n      {\n        // RU\n        pattern:\n          /(^|[^\\w\\u0400-\\u0484\\u0487-\\u052f\\u1d2b\\u1d78\\u2de0-\\u2dff\\ua640-\\ua69f\\ufe2e\\ufe2f])(?:пока|для|новый|прервать|попытка|исключение|вызватьисключение|иначе|конецпопытки|неопределено|функция|перем|возврат|конецфункции|если|иначеесли|процедура|конецпроцедуры|тогда|знач|экспорт|конецесли|из|каждого|истина|ложь|по|цикл|конеццикла|выполнить)(?![\\w\\u0400-\\u0484\\u0487-\\u052f\\u1d2b\\u1d78\\u2de0-\\u2dff\\ua640-\\ua69f\\ufe2e\\ufe2f])/i,\n        lookbehind: true\n      },\n      {\n        // EN\n        pattern:\n          /\\b(?:break|do|each|else|elseif|enddo|endfunction|endif|endprocedure|endtry|except|execute|export|false|for|function|if|in|new|null|procedure|raise|return|then|to|true|try|undefined|val|var|while)\\b/i\n      }\n    ],\n    number: {\n      pattern:\n        /(^(?=\\d)|[^\\w\\u0400-\\u0484\\u0487-\\u052f\\u1d2b\\u1d78\\u2de0-\\u2dff\\ua640-\\ua69f\\ufe2e\\ufe2f])(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:E[+-]?\\d+)?/i,\n      lookbehind: true\n    },\n    operator: [\n      /[<>+\\-*/]=?|[%=]/, // RU\n      {\n        pattern:\n          /(^|[^\\w\\u0400-\\u0484\\u0487-\\u052f\\u1d2b\\u1d78\\u2de0-\\u2dff\\ua640-\\ua69f\\ufe2e\\ufe2f])(?:и|или|не)(?![\\w\\u0400-\\u0484\\u0487-\\u052f\\u1d2b\\u1d78\\u2de0-\\u2dff\\ua640-\\ua69f\\ufe2e\\ufe2f])/i,\n        lookbehind: true\n      }, // EN\n      {\n        pattern: /\\b(?:and|not|or)\\b/i\n      }\n    ],\n    punctuation: /\\(\\.|\\.\\)|[()\\[\\]:;,.]/,\n    directive: [\n      // Теги препроцессора вида &Клиент, &Сервер, ...\n      // Preprocessor tags of the type &Client, &Server, ...\n      {\n        pattern: /^([ \\t]*)&.*/m,\n        lookbehind: true,\n        greedy: true,\n        alias: 'important'\n      }, // Инструкции препроцессора вида:\n      // #Если Сервер Тогда\n      // ...\n      // #КонецЕсли\n      // Preprocessor instructions of the form:\n      // #If Server Then\n      // ...\n      // #EndIf\n      {\n        pattern: /^([ \\t]*)#.*/gm,\n        lookbehind: true,\n        greedy: true,\n        alias: 'important'\n      }\n    ]\n  }\n  Prism.languages.oscript = Prism.languages['bsl']\n}\n","'use strict'\n\nmodule.exports = c\nc.displayName = 'c'\nc.aliases = []\nfunction c(Prism) {\n  Prism.languages.c = Prism.languages.extend('clike', {\n    comment: {\n      pattern:\n        /\\/\\/(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n?|\\n|(?![\\r\\n])))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n      greedy: true\n    },\n    string: {\n      // https://en.cppreference.com/w/c/language/string_literal\n      pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n      greedy: true\n    },\n    'class-name': {\n      pattern:\n        /(\\b(?:enum|struct)\\s+(?:__attribute__\\s*\\(\\([\\s\\S]*?\\)\\)\\s*)?)\\w+|\\b[a-z]\\w*_t\\b/,\n      lookbehind: true\n    },\n    keyword:\n      /\\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|__attribute__|asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|inline|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|typeof|union|unsigned|void|volatile|while)\\b/,\n    function: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n    number:\n      /(?:\\b0x(?:[\\da-f]+(?:\\.[\\da-f]*)?|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]{0,4}/i,\n    operator: />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?/\n  })\n  Prism.languages.insertBefore('c', 'string', {\n    char: {\n      // https://en.cppreference.com/w/c/language/character_constant\n      pattern: /'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n]){0,32}'/,\n      greedy: true\n    }\n  })\n  Prism.languages.insertBefore('c', 'string', {\n    macro: {\n      // allow for multiline macro definitions\n      // spaces after the # character compile fine with gcc\n      pattern:\n        /(^[\\t ]*)#\\s*[a-z](?:[^\\r\\n\\\\/]|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\\\\(?:\\r\\n|[\\s\\S]))*/im,\n      lookbehind: true,\n      greedy: true,\n      alias: 'property',\n      inside: {\n        string: [\n          {\n            // highlight the path of the include statement as a string\n            pattern: /^(#\\s*include\\s*)<[^>]+>/,\n            lookbehind: true\n          },\n          Prism.languages.c['string']\n        ],\n        char: Prism.languages.c['char'],\n        comment: Prism.languages.c['comment'],\n        'macro-name': [\n          {\n            pattern: /(^#\\s*define\\s+)\\w+\\b(?!\\()/i,\n            lookbehind: true\n          },\n          {\n            pattern: /(^#\\s*define\\s+)\\w+\\b(?=\\()/i,\n            lookbehind: true,\n            alias: 'function'\n          }\n        ],\n        // highlight macro directives as keywords\n        directive: {\n          pattern: /^(#\\s*)[a-z]+/,\n          lookbehind: true,\n          alias: 'keyword'\n        },\n        'directive-hash': /^#/,\n        punctuation: /##|\\\\(?=[\\r\\n])/,\n        expression: {\n          pattern: /\\S[\\s\\S]*/,\n          inside: Prism.languages.c\n        }\n      }\n    }\n  })\n  Prism.languages.insertBefore('c', 'function', {\n    // highlight predefined macros as constants\n    constant:\n      /\\b(?:EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|__DATE__|__FILE__|__LINE__|__TIMESTAMP__|__TIME__|__func__|stderr|stdin|stdout)\\b/\n  })\n  delete Prism.languages.c['boolean']\n}\n","'use strict'\n\nmodule.exports = cfscript\ncfscript.displayName = 'cfscript'\ncfscript.aliases = []\nfunction cfscript(Prism) {\n  // https://cfdocs.org/script\n  Prism.languages.cfscript = Prism.languages.extend('clike', {\n    comment: [\n      {\n        pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n        lookbehind: true,\n        inside: {\n          annotation: {\n            pattern: /(?:^|[^.])@[\\w\\.]+/,\n            alias: 'punctuation'\n          }\n        }\n      },\n      {\n        pattern: /(^|[^\\\\:])\\/\\/.*/,\n        lookbehind: true,\n        greedy: true\n      }\n    ],\n    keyword:\n      /\\b(?:abstract|break|catch|component|continue|default|do|else|extends|final|finally|for|function|if|in|include|package|private|property|public|remote|required|rethrow|return|static|switch|throw|try|var|while|xml)\\b(?!\\s*=)/,\n    operator: [\n      /\\+\\+|--|&&|\\|\\||::|=>|[!=]==|<=?|>=?|[-+*/%&|^!=<>]=?|\\?(?:\\.|:)?|[?:]/,\n      /\\b(?:and|contains|eq|equal|eqv|gt|gte|imp|is|lt|lte|mod|not|or|xor)\\b/\n    ],\n    scope: {\n      pattern:\n        /\\b(?:application|arguments|cgi|client|cookie|local|session|super|this|variables)\\b/,\n      alias: 'global'\n    },\n    type: {\n      pattern:\n        /\\b(?:any|array|binary|boolean|date|guid|numeric|query|string|struct|uuid|void|xml)\\b/,\n      alias: 'builtin'\n    }\n  })\n  Prism.languages.insertBefore('cfscript', 'keyword', {\n    // This must be declared before keyword because we use \"function\" inside the lookahead\n    'function-variable': {\n      pattern:\n        /[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/,\n      alias: 'function'\n    }\n  })\n  delete Prism.languages.cfscript['class-name']\n  Prism.languages.cfc = Prism.languages['cfscript']\n}\n","'use strict'\nvar refractorCpp = require('./cpp.js')\nmodule.exports = chaiscript\nchaiscript.displayName = 'chaiscript'\nchaiscript.aliases = []\nfunction chaiscript(Prism) {\n  Prism.register(refractorCpp)\n  Prism.languages.chaiscript = Prism.languages.extend('clike', {\n    string: {\n      pattern: /(^|[^\\\\])'(?:[^'\\\\]|\\\\[\\s\\S])*'/,\n      lookbehind: true,\n      greedy: true\n    },\n    'class-name': [\n      {\n        // e.g. class Rectangle { ... }\n        pattern: /(\\bclass\\s+)\\w+/,\n        lookbehind: true\n      },\n      {\n        // e.g. attr Rectangle::height, def Rectangle::area() { ... }\n        pattern: /(\\b(?:attr|def)\\s+)\\w+(?=\\s*::)/,\n        lookbehind: true\n      }\n    ],\n    keyword:\n      /\\b(?:attr|auto|break|case|catch|class|continue|def|default|else|finally|for|fun|global|if|return|switch|this|try|var|while)\\b/,\n    number: [Prism.languages.cpp.number, /\\b(?:Infinity|NaN)\\b/],\n    operator:\n      />>=?|<<=?|\\|\\||&&|:[:=]?|--|\\+\\+|[=!<>+\\-*/%|&^]=?|[?~]|`[^`\\r\\n]{1,4}`/\n  })\n  Prism.languages.insertBefore('chaiscript', 'operator', {\n    'parameter-type': {\n      // e.g. def foo(int x, Vector y) {...}\n      pattern: /([,(]\\s*)\\w+(?=\\s+\\w)/,\n      lookbehind: true,\n      alias: 'class-name'\n    }\n  })\n  Prism.languages.insertBefore('chaiscript', 'string', {\n    'string-interpolation': {\n      pattern:\n        /(^|[^\\\\])\"(?:[^\"$\\\\]|\\\\[\\s\\S]|\\$(?!\\{)|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})*\\})*\"/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern:\n            /((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})*\\}/,\n          lookbehind: true,\n          inside: {\n            'interpolation-expression': {\n              pattern: /(^\\$\\{)[\\s\\S]+(?=\\}$)/,\n              lookbehind: true,\n              inside: Prism.languages.chaiscript\n            },\n            'interpolation-punctuation': {\n              pattern: /^\\$\\{|\\}$/,\n              alias: 'punctuation'\n            }\n          }\n        },\n        string: /[\\s\\S]+/\n      }\n    }\n  })\n}\n","'use strict'\n\nmodule.exports = cil\ncil.displayName = 'cil'\ncil.aliases = []\nfunction cil(Prism) {\n  Prism.languages.cil = {\n    comment: /\\/\\/.*/,\n    string: {\n      pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true\n    },\n    directive: {\n      pattern: /(^|\\W)\\.[a-z]+(?=\\s)/,\n      lookbehind: true,\n      alias: 'class-name'\n    },\n    // Actually an assembly reference\n    variable: /\\[[\\w\\.]+\\]/,\n    keyword:\n      /\\b(?:abstract|ansi|assembly|auto|autochar|beforefieldinit|bool|bstr|byvalstr|catch|char|cil|class|currency|date|decimal|default|enum|error|explicit|extends|extern|famandassem|family|famorassem|final(?:ly)?|float32|float64|hidebysig|u?int(?:8|16|32|64)?|iant|idispatch|implements|import|initonly|instance|interface|iunknown|literal|lpstr|lpstruct|lptstr|lpwstr|managed|method|native(?:Type)?|nested|newslot|object(?:ref)?|pinvokeimpl|private|privatescope|public|reqsecobj|rtspecialname|runtime|sealed|sequential|serializable|specialname|static|string|struct|syschar|tbstr|unicode|unmanagedexp|unsigned|value(?:type)?|variant|virtual|void)\\b/,\n    function:\n      /\\b(?:(?:constrained|no|readonly|tail|unaligned|volatile)\\.)?(?:conv\\.(?:[iu][1248]?|ovf\\.[iu][1248]?(?:\\.un)?|r\\.un|r4|r8)|ldc\\.(?:i4(?:\\.\\d+|\\.[mM]1|\\.s)?|i8|r4|r8)|ldelem(?:\\.[iu][1248]?|\\.r[48]|\\.ref|a)?|ldind\\.(?:[iu][1248]?|r[48]|ref)|stelem\\.?(?:i[1248]?|r[48]|ref)?|stind\\.(?:i[1248]?|r[48]|ref)?|end(?:fault|filter|finally)|ldarg(?:\\.[0-3s]|a(?:\\.s)?)?|ldloc(?:\\.\\d+|\\.s)?|sub(?:\\.ovf(?:\\.un)?)?|mul(?:\\.ovf(?:\\.un)?)?|add(?:\\.ovf(?:\\.un)?)?|stloc(?:\\.[0-3s])?|refany(?:type|val)|blt(?:\\.un)?(?:\\.s)?|ble(?:\\.un)?(?:\\.s)?|bgt(?:\\.un)?(?:\\.s)?|bge(?:\\.un)?(?:\\.s)?|unbox(?:\\.any)?|init(?:blk|obj)|call(?:i|virt)?|brfalse(?:\\.s)?|bne\\.un(?:\\.s)?|ldloca(?:\\.s)?|brzero(?:\\.s)?|brtrue(?:\\.s)?|brnull(?:\\.s)?|brinst(?:\\.s)?|starg(?:\\.s)?|leave(?:\\.s)?|shr(?:\\.un)?|rem(?:\\.un)?|div(?:\\.un)?|clt(?:\\.un)?|alignment|castclass|ldvirtftn|beq(?:\\.s)?|ckfinite|ldsflda|ldtoken|localloc|mkrefany|rethrow|cgt\\.un|arglist|switch|stsfld|sizeof|newobj|newarr|ldsfld|ldnull|ldflda|isinst|throw|stobj|stfld|ldstr|ldobj|ldlen|ldftn|ldfld|cpobj|cpblk|break|br\\.s|xor|shl|ret|pop|not|nop|neg|jmp|dup|cgt|ceq|box|and|or|br)\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    number: /\\b-?(?:0x[0-9a-f]+|\\d+)(?:\\.[0-9a-f]+)?\\b/i,\n    punctuation: /[{}[\\];(),:=]|IL_[0-9A-Za-z]+/\n  }\n}\n","'use strict'\n\nmodule.exports = clike\nclike.displayName = 'clike'\nclike.aliases = []\nfunction clike(Prism) {\n  Prism.languages.clike = {\n    comment: [\n      {\n        pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n        lookbehind: true,\n        greedy: true\n      },\n      {\n        pattern: /(^|[^\\\\:])\\/\\/.*/,\n        lookbehind: true,\n        greedy: true\n      }\n    ],\n    string: {\n      pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true\n    },\n    'class-name': {\n      pattern:\n        /(\\b(?:class|extends|implements|instanceof|interface|new|trait)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n      lookbehind: true,\n      inside: {\n        punctuation: /[.\\\\]/\n      }\n    },\n    keyword:\n      /\\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    function: /\\b\\w+(?=\\()/,\n    number: /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n    operator: /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/,\n    punctuation: /[{}[\\];(),.:]/\n  }\n}\n","'use strict'\n\nmodule.exports = clojure\nclojure.displayName = 'clojure'\nclojure.aliases = []\nfunction clojure(Prism) {\n  // Copied from https://github.com/jeluard/prism-clojure\n  Prism.languages.clojure = {\n    comment: {\n      pattern: /;.*/,\n      greedy: true\n    },\n    string: {\n      pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n      greedy: true\n    },\n    char: /\\\\\\w+/,\n    symbol: {\n      pattern: /(^|[\\s()\\[\\]{},])::?[\\w*+!?'<>=/.-]+/,\n      lookbehind: true\n    },\n    keyword: {\n      pattern:\n        /(\\()(?:-|->|->>|\\.|\\.\\.|\\*|\\/|\\+|<|<=|=|==|>|>=|accessor|agent|agent-errors|aget|alength|all-ns|alter|and|append-child|apply|array-map|aset|aset-boolean|aset-byte|aset-char|aset-double|aset-float|aset-int|aset-long|aset-short|assert|assoc|await|await-for|bean|binding|bit-and|bit-not|bit-or|bit-shift-left|bit-shift-right|bit-xor|boolean|branch\\?|butlast|byte|cast|char|children|class|clear-agent-errors|comment|commute|comp|comparator|complement|concat|cond|conj|cons|constantly|construct-proxy|contains\\?|count|create-ns|create-struct|cycle|dec|declare|def|def-|definline|definterface|defmacro|defmethod|defmulti|defn|defn-|defonce|defproject|defprotocol|defrecord|defstruct|deftype|deref|difference|disj|dissoc|distinct|do|doall|doc|dorun|doseq|dosync|dotimes|doto|double|down|drop|drop-while|edit|end\\?|ensure|eval|every\\?|false\\?|ffirst|file-seq|filter|find|find-doc|find-ns|find-var|first|float|flush|fn|fnseq|for|frest|gensym|get|get-proxy-class|hash-map|hash-set|identical\\?|identity|if|if-let|if-not|import|in-ns|inc|index|insert-child|insert-left|insert-right|inspect-table|inspect-tree|instance\\?|int|interleave|intersection|into|into-array|iterate|join|key|keys|keyword|keyword\\?|last|lazy-cat|lazy-cons|left|lefts|let|line-seq|list|list\\*|load|load-file|locking|long|loop|macroexpand|macroexpand-1|make-array|make-node|map|map-invert|map\\?|mapcat|max|max-key|memfn|merge|merge-with|meta|min|min-key|monitor-enter|name|namespace|neg\\?|new|newline|next|nil\\?|node|not|not-any\\?|not-every\\?|not=|ns|ns-imports|ns-interns|ns-map|ns-name|ns-publics|ns-refers|ns-resolve|ns-unmap|nth|nthrest|or|parse|partial|path|peek|pop|pos\\?|pr|pr-str|print|print-str|println|println-str|prn|prn-str|project|proxy|proxy-mappings|quot|quote|rand|rand-int|range|re-find|re-groups|re-matcher|re-matches|re-pattern|re-seq|read|read-line|recur|reduce|ref|ref-set|refer|rem|remove|remove-method|remove-ns|rename|rename-keys|repeat|replace|replicate|resolve|rest|resultset-seq|reverse|rfirst|right|rights|root|rrest|rseq|second|select|select-keys|send|send-off|seq|seq-zip|seq\\?|set|set!|short|slurp|some|sort|sort-by|sorted-map|sorted-map-by|sorted-set|special-symbol\\?|split-at|split-with|str|string\\?|struct|struct-map|subs|subvec|symbol|symbol\\?|sync|take|take-nth|take-while|test|throw|time|to-array|to-array-2d|tree-seq|true\\?|try|union|up|update-proxy|val|vals|var|var-get|var-set|var\\?|vector|vector-zip|vector\\?|when|when-first|when-let|when-not|with-local-vars|with-meta|with-open|with-out-str|xml-seq|xml-zip|zero\\?|zipmap|zipper)(?=[\\s)]|$)/,\n      lookbehind: true\n    },\n    boolean: /\\b(?:false|nil|true)\\b/,\n    number: {\n      pattern:\n        /(^|[^\\w$@])(?:\\d+(?:[/.]\\d+)?(?:e[+-]?\\d+)?|0x[a-f0-9]+|[1-9]\\d?r[a-z0-9]+)[lmn]?(?![\\w$@])/i,\n      lookbehind: true\n    },\n    function: {\n      pattern: /((?:^|[^'])\\()[\\w*+!?'<>=/.-]+(?=[\\s)]|$)/,\n      lookbehind: true\n    },\n    operator: /[#@^`~]/,\n    punctuation: /[{}\\[\\](),]/\n  }\n}\n","'use strict'\n\nmodule.exports = cmake\ncmake.displayName = 'cmake'\ncmake.aliases = []\nfunction cmake(Prism) {\n  Prism.languages.cmake = {\n    comment: /#.*/,\n    string: {\n      pattern: /\"(?:[^\\\\\"]|\\\\.)*\"/,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern: /\\$\\{(?:[^{}$]|\\$\\{[^{}$]*\\})*\\}/,\n          inside: {\n            punctuation: /\\$\\{|\\}/,\n            variable: /\\w+/\n          }\n        }\n      }\n    },\n    variable:\n      /\\b(?:CMAKE_\\w+|\\w+_(?:(?:BINARY|SOURCE)_DIR|DESCRIPTION|HOMEPAGE_URL|ROOT|VERSION(?:_MAJOR|_MINOR|_PATCH|_TWEAK)?)|(?:ANDROID|APPLE|BORLAND|BUILD_SHARED_LIBS|CACHE|CPACK_(?:ABSOLUTE_DESTINATION_FILES|COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY|ERROR_ON_ABSOLUTE_INSTALL_DESTINATION|INCLUDE_TOPLEVEL_DIRECTORY|INSTALL_DEFAULT_DIRECTORY_PERMISSIONS|INSTALL_SCRIPT|PACKAGING_INSTALL_PREFIX|SET_DESTDIR|WARN_ON_ABSOLUTE_INSTALL_DESTINATION)|CTEST_(?:BINARY_DIRECTORY|BUILD_COMMAND|BUILD_NAME|BZR_COMMAND|BZR_UPDATE_OPTIONS|CHANGE_ID|CHECKOUT_COMMAND|CONFIGURATION_TYPE|CONFIGURE_COMMAND|COVERAGE_COMMAND|COVERAGE_EXTRA_FLAGS|CURL_OPTIONS|CUSTOM_(?:COVERAGE_EXCLUDE|ERROR_EXCEPTION|ERROR_MATCH|ERROR_POST_CONTEXT|ERROR_PRE_CONTEXT|MAXIMUM_FAILED_TEST_OUTPUT_SIZE|MAXIMUM_NUMBER_OF_(?:ERRORS|WARNINGS)|MAXIMUM_PASSED_TEST_OUTPUT_SIZE|MEMCHECK_IGNORE|POST_MEMCHECK|POST_TEST|PRE_MEMCHECK|PRE_TEST|TESTS_IGNORE|WARNING_EXCEPTION|WARNING_MATCH)|CVS_CHECKOUT|CVS_COMMAND|CVS_UPDATE_OPTIONS|DROP_LOCATION|DROP_METHOD|DROP_SITE|DROP_SITE_CDASH|DROP_SITE_PASSWORD|DROP_SITE_USER|EXTRA_COVERAGE_GLOB|GIT_COMMAND|GIT_INIT_SUBMODULES|GIT_UPDATE_CUSTOM|GIT_UPDATE_OPTIONS|HG_COMMAND|HG_UPDATE_OPTIONS|LABELS_FOR_SUBPROJECTS|MEMORYCHECK_(?:COMMAND|COMMAND_OPTIONS|SANITIZER_OPTIONS|SUPPRESSIONS_FILE|TYPE)|NIGHTLY_START_TIME|P4_CLIENT|P4_COMMAND|P4_OPTIONS|P4_UPDATE_OPTIONS|RUN_CURRENT_SCRIPT|SCP_COMMAND|SITE|SOURCE_DIRECTORY|SUBMIT_URL|SVN_COMMAND|SVN_OPTIONS|SVN_UPDATE_OPTIONS|TEST_LOAD|TEST_TIMEOUT|TRIGGER_SITE|UPDATE_COMMAND|UPDATE_OPTIONS|UPDATE_VERSION_ONLY|USE_LAUNCHERS)|CYGWIN|ENV|EXECUTABLE_OUTPUT_PATH|GHS-MULTI|IOS|LIBRARY_OUTPUT_PATH|MINGW|MSVC(?:10|11|12|14|60|70|71|80|90|_IDE|_TOOLSET_VERSION|_VERSION)?|MSYS|PROJECT_(?:BINARY_DIR|DESCRIPTION|HOMEPAGE_URL|NAME|SOURCE_DIR|VERSION|VERSION_(?:MAJOR|MINOR|PATCH|TWEAK))|UNIX|WIN32|WINCE|WINDOWS_PHONE|WINDOWS_STORE|XCODE|XCODE_VERSION))\\b/,\n    property:\n      /\\b(?:cxx_\\w+|(?:ARCHIVE_OUTPUT_(?:DIRECTORY|NAME)|COMPILE_DEFINITIONS|COMPILE_PDB_NAME|COMPILE_PDB_OUTPUT_DIRECTORY|EXCLUDE_FROM_DEFAULT_BUILD|IMPORTED_(?:IMPLIB|LIBNAME|LINK_DEPENDENT_LIBRARIES|LINK_INTERFACE_LANGUAGES|LINK_INTERFACE_LIBRARIES|LINK_INTERFACE_MULTIPLICITY|LOCATION|NO_SONAME|OBJECTS|SONAME)|INTERPROCEDURAL_OPTIMIZATION|LIBRARY_OUTPUT_DIRECTORY|LIBRARY_OUTPUT_NAME|LINK_FLAGS|LINK_INTERFACE_LIBRARIES|LINK_INTERFACE_MULTIPLICITY|LOCATION|MAP_IMPORTED_CONFIG|OSX_ARCHITECTURES|OUTPUT_NAME|PDB_NAME|PDB_OUTPUT_DIRECTORY|RUNTIME_OUTPUT_DIRECTORY|RUNTIME_OUTPUT_NAME|STATIC_LIBRARY_FLAGS|VS_CSHARP|VS_DOTNET_REFERENCEPROP|VS_DOTNET_REFERENCE|VS_GLOBAL_SECTION_POST|VS_GLOBAL_SECTION_PRE|VS_GLOBAL|XCODE_ATTRIBUTE)_\\w+|\\w+_(?:CLANG_TIDY|COMPILER_LAUNCHER|CPPCHECK|CPPLINT|INCLUDE_WHAT_YOU_USE|OUTPUT_NAME|POSTFIX|VISIBILITY_PRESET)|ABSTRACT|ADDITIONAL_MAKE_CLEAN_FILES|ADVANCED|ALIASED_TARGET|ALLOW_DUPLICATE_CUSTOM_TARGETS|ANDROID_(?:ANT_ADDITIONAL_OPTIONS|API|API_MIN|ARCH|ASSETS_DIRECTORIES|GUI|JAR_DEPENDENCIES|NATIVE_LIB_DEPENDENCIES|NATIVE_LIB_DIRECTORIES|PROCESS_MAX|PROGUARD|PROGUARD_CONFIG_PATH|SECURE_PROPS_PATH|SKIP_ANT_STEP|STL_TYPE)|ARCHIVE_OUTPUT_DIRECTORY|ATTACHED_FILES|ATTACHED_FILES_ON_FAIL|AUTOGEN_(?:BUILD_DIR|ORIGIN_DEPENDS|PARALLEL|SOURCE_GROUP|TARGETS_FOLDER|TARGET_DEPENDS)|AUTOMOC|AUTOMOC_(?:COMPILER_PREDEFINES|DEPEND_FILTERS|EXECUTABLE|MACRO_NAMES|MOC_OPTIONS|SOURCE_GROUP|TARGETS_FOLDER)|AUTORCC|AUTORCC_EXECUTABLE|AUTORCC_OPTIONS|AUTORCC_SOURCE_GROUP|AUTOUIC|AUTOUIC_EXECUTABLE|AUTOUIC_OPTIONS|AUTOUIC_SEARCH_PATHS|BINARY_DIR|BUILDSYSTEM_TARGETS|BUILD_RPATH|BUILD_RPATH_USE_ORIGIN|BUILD_WITH_INSTALL_NAME_DIR|BUILD_WITH_INSTALL_RPATH|BUNDLE|BUNDLE_EXTENSION|CACHE_VARIABLES|CLEAN_NO_CUSTOM|COMMON_LANGUAGE_RUNTIME|COMPATIBLE_INTERFACE_(?:BOOL|NUMBER_MAX|NUMBER_MIN|STRING)|COMPILE_(?:DEFINITIONS|FEATURES|FLAGS|OPTIONS|PDB_NAME|PDB_OUTPUT_DIRECTORY)|COST|CPACK_DESKTOP_SHORTCUTS|CPACK_NEVER_OVERWRITE|CPACK_PERMANENT|CPACK_STARTUP_SHORTCUTS|CPACK_START_MENU_SHORTCUTS|CPACK_WIX_ACL|CROSSCOMPILING_EMULATOR|CUDA_EXTENSIONS|CUDA_PTX_COMPILATION|CUDA_RESOLVE_DEVICE_SYMBOLS|CUDA_SEPARABLE_COMPILATION|CUDA_STANDARD|CUDA_STANDARD_REQUIRED|CXX_EXTENSIONS|CXX_STANDARD|CXX_STANDARD_REQUIRED|C_EXTENSIONS|C_STANDARD|C_STANDARD_REQUIRED|DEBUG_CONFIGURATIONS|DEFINE_SYMBOL|DEFINITIONS|DEPENDS|DEPLOYMENT_ADDITIONAL_FILES|DEPLOYMENT_REMOTE_DIRECTORY|DISABLED|DISABLED_FEATURES|ECLIPSE_EXTRA_CPROJECT_CONTENTS|ECLIPSE_EXTRA_NATURES|ENABLED_FEATURES|ENABLED_LANGUAGES|ENABLE_EXPORTS|ENVIRONMENT|EXCLUDE_FROM_ALL|EXCLUDE_FROM_DEFAULT_BUILD|EXPORT_NAME|EXPORT_PROPERTIES|EXTERNAL_OBJECT|EchoString|FAIL_REGULAR_EXPRESSION|FIND_LIBRARY_USE_LIB32_PATHS|FIND_LIBRARY_USE_LIB64_PATHS|FIND_LIBRARY_USE_LIBX32_PATHS|FIND_LIBRARY_USE_OPENBSD_VERSIONING|FIXTURES_CLEANUP|FIXTURES_REQUIRED|FIXTURES_SETUP|FOLDER|FRAMEWORK|Fortran_FORMAT|Fortran_MODULE_DIRECTORY|GENERATED|GENERATOR_FILE_NAME|GENERATOR_IS_MULTI_CONFIG|GHS_INTEGRITY_APP|GHS_NO_SOURCE_GROUP_FILE|GLOBAL_DEPENDS_DEBUG_MODE|GLOBAL_DEPENDS_NO_CYCLES|GNUtoMS|HAS_CXX|HEADER_FILE_ONLY|HELPSTRING|IMPLICIT_DEPENDS_INCLUDE_TRANSFORM|IMPORTED|IMPORTED_(?:COMMON_LANGUAGE_RUNTIME|CONFIGURATIONS|GLOBAL|IMPLIB|LIBNAME|LINK_DEPENDENT_LIBRARIES|LINK_INTERFACE_(?:LANGUAGES|LIBRARIES|MULTIPLICITY)|LOCATION|NO_SONAME|OBJECTS|SONAME)|IMPORT_PREFIX|IMPORT_SUFFIX|INCLUDE_DIRECTORIES|INCLUDE_REGULAR_EXPRESSION|INSTALL_NAME_DIR|INSTALL_RPATH|INSTALL_RPATH_USE_LINK_PATH|INTERFACE_(?:AUTOUIC_OPTIONS|COMPILE_DEFINITIONS|COMPILE_FEATURES|COMPILE_OPTIONS|INCLUDE_DIRECTORIES|LINK_DEPENDS|LINK_DIRECTORIES|LINK_LIBRARIES|LINK_OPTIONS|POSITION_INDEPENDENT_CODE|SOURCES|SYSTEM_INCLUDE_DIRECTORIES)|INTERPROCEDURAL_OPTIMIZATION|IN_TRY_COMPILE|IOS_INSTALL_COMBINED|JOB_POOLS|JOB_POOL_COMPILE|JOB_POOL_LINK|KEEP_EXTENSION|LABELS|LANGUAGE|LIBRARY_OUTPUT_DIRECTORY|LINKER_LANGUAGE|LINK_(?:DEPENDS|DEPENDS_NO_SHARED|DIRECTORIES|FLAGS|INTERFACE_LIBRARIES|INTERFACE_MULTIPLICITY|LIBRARIES|OPTIONS|SEARCH_END_STATIC|SEARCH_START_STATIC|WHAT_YOU_USE)|LISTFILE_STACK|LOCATION|MACOSX_BUNDLE|MACOSX_BUNDLE_INFO_PLIST|MACOSX_FRAMEWORK_INFO_PLIST|MACOSX_PACKAGE_LOCATION|MACOSX_RPATH|MACROS|MANUALLY_ADDED_DEPENDENCIES|MEASUREMENT|MODIFIED|NAME|NO_SONAME|NO_SYSTEM_FROM_IMPORTED|OBJECT_DEPENDS|OBJECT_OUTPUTS|OSX_ARCHITECTURES|OUTPUT_NAME|PACKAGES_FOUND|PACKAGES_NOT_FOUND|PARENT_DIRECTORY|PASS_REGULAR_EXPRESSION|PDB_NAME|PDB_OUTPUT_DIRECTORY|POSITION_INDEPENDENT_CODE|POST_INSTALL_SCRIPT|PREDEFINED_TARGETS_FOLDER|PREFIX|PRE_INSTALL_SCRIPT|PRIVATE_HEADER|PROCESSORS|PROCESSOR_AFFINITY|PROJECT_LABEL|PUBLIC_HEADER|REPORT_UNDEFINED_PROPERTIES|REQUIRED_FILES|RESOURCE|RESOURCE_LOCK|RULE_LAUNCH_COMPILE|RULE_LAUNCH_CUSTOM|RULE_LAUNCH_LINK|RULE_MESSAGES|RUNTIME_OUTPUT_DIRECTORY|RUN_SERIAL|SKIP_AUTOGEN|SKIP_AUTOMOC|SKIP_AUTORCC|SKIP_AUTOUIC|SKIP_BUILD_RPATH|SKIP_RETURN_CODE|SOURCES|SOURCE_DIR|SOVERSION|STATIC_LIBRARY_FLAGS|STATIC_LIBRARY_OPTIONS|STRINGS|SUBDIRECTORIES|SUFFIX|SYMBOLIC|TARGET_ARCHIVES_MAY_BE_SHARED_LIBS|TARGET_MESSAGES|TARGET_SUPPORTS_SHARED_LIBS|TESTS|TEST_INCLUDE_FILE|TEST_INCLUDE_FILES|TIMEOUT|TIMEOUT_AFTER_MATCH|TYPE|USE_FOLDERS|VALUE|VARIABLES|VERSION|VISIBILITY_INLINES_HIDDEN|VS_(?:CONFIGURATION_TYPE|COPY_TO_OUT_DIR|DEBUGGER_(?:COMMAND|COMMAND_ARGUMENTS|ENVIRONMENT|WORKING_DIRECTORY)|DEPLOYMENT_CONTENT|DEPLOYMENT_LOCATION|DOTNET_REFERENCES|DOTNET_REFERENCES_COPY_LOCAL|GLOBAL_KEYWORD|GLOBAL_PROJECT_TYPES|GLOBAL_ROOTNAMESPACE|INCLUDE_IN_VSIX|IOT_STARTUP_TASK|KEYWORD|RESOURCE_GENERATOR|SCC_AUXPATH|SCC_LOCALPATH|SCC_PROJECTNAME|SCC_PROVIDER|SDK_REFERENCES|SHADER_(?:DISABLE_OPTIMIZATIONS|ENABLE_DEBUG|ENTRYPOINT|FLAGS|MODEL|OBJECT_FILE_NAME|OUTPUT_HEADER_FILE|TYPE|VARIABLE_NAME)|STARTUP_PROJECT|TOOL_OVERRIDE|USER_PROPS|WINRT_COMPONENT|WINRT_EXTENSIONS|WINRT_REFERENCES|XAML_TYPE)|WILL_FAIL|WIN32_EXECUTABLE|WINDOWS_EXPORT_ALL_SYMBOLS|WORKING_DIRECTORY|WRAP_EXCLUDE|XCODE_(?:EMIT_EFFECTIVE_PLATFORM_NAME|EXPLICIT_FILE_TYPE|FILE_ATTRIBUTES|LAST_KNOWN_FILE_TYPE|PRODUCT_TYPE|SCHEME_(?:ADDRESS_SANITIZER|ADDRESS_SANITIZER_USE_AFTER_RETURN|ARGUMENTS|DISABLE_MAIN_THREAD_CHECKER|DYNAMIC_LIBRARY_LOADS|DYNAMIC_LINKER_API_USAGE|ENVIRONMENT|EXECUTABLE|GUARD_MALLOC|MAIN_THREAD_CHECKER_STOP|MALLOC_GUARD_EDGES|MALLOC_SCRIBBLE|MALLOC_STACK|THREAD_SANITIZER(?:_STOP)?|UNDEFINED_BEHAVIOUR_SANITIZER(?:_STOP)?|ZOMBIE_OBJECTS))|XCTEST)\\b/,\n    keyword:\n      /\\b(?:add_compile_definitions|add_compile_options|add_custom_command|add_custom_target|add_definitions|add_dependencies|add_executable|add_library|add_link_options|add_subdirectory|add_test|aux_source_directory|break|build_command|build_name|cmake_host_system_information|cmake_minimum_required|cmake_parse_arguments|cmake_policy|configure_file|continue|create_test_sourcelist|ctest_build|ctest_configure|ctest_coverage|ctest_empty_binary_directory|ctest_memcheck|ctest_read_custom_files|ctest_run_script|ctest_sleep|ctest_start|ctest_submit|ctest_test|ctest_update|ctest_upload|define_property|else|elseif|enable_language|enable_testing|endforeach|endfunction|endif|endmacro|endwhile|exec_program|execute_process|export|export_library_dependencies|file|find_file|find_library|find_package|find_path|find_program|fltk_wrap_ui|foreach|function|get_cmake_property|get_directory_property|get_filename_component|get_property|get_source_file_property|get_target_property|get_test_property|if|include|include_directories|include_external_msproject|include_guard|include_regular_expression|install|install_files|install_programs|install_targets|link_directories|link_libraries|list|load_cache|load_command|macro|make_directory|mark_as_advanced|math|message|option|output_required_files|project|qt_wrap_cpp|qt_wrap_ui|remove|remove_definitions|return|separate_arguments|set|set_directory_properties|set_property|set_source_files_properties|set_target_properties|set_tests_properties|site_name|source_group|string|subdir_depends|subdirs|target_compile_definitions|target_compile_features|target_compile_options|target_include_directories|target_link_directories|target_link_libraries|target_link_options|target_sources|try_compile|try_run|unset|use_mangled_mesa|utility_source|variable_requires|variable_watch|while|write_file)(?=\\s*\\()\\b/,\n    boolean: /\\b(?:FALSE|OFF|ON|TRUE)\\b/,\n    namespace:\n      /\\b(?:INTERFACE|PRIVATE|PROPERTIES|PUBLIC|SHARED|STATIC|TARGET_OBJECTS)\\b/,\n    operator:\n      /\\b(?:AND|DEFINED|EQUAL|GREATER|LESS|MATCHES|NOT|OR|STREQUAL|STRGREATER|STRLESS|VERSION_EQUAL|VERSION_GREATER|VERSION_LESS)\\b/,\n    inserted: {\n      pattern: /\\b\\w+::\\w+\\b/,\n      alias: 'class-name'\n    },\n    number: /\\b\\d+(?:\\.\\d+)*\\b/,\n    function: /\\b[a-z_]\\w*(?=\\s*\\()\\b/i,\n    punctuation: /[()>}]|\\$[<{]/\n  }\n}\n","'use strict'\n\nmodule.exports = cobol\ncobol.displayName = 'cobol'\ncobol.aliases = []\nfunction cobol(Prism) {\n  Prism.languages.cobol = {\n    comment: {\n      pattern: /\\*>.*|(^[ \\t]*)\\*.*/m,\n      lookbehind: true,\n      greedy: true\n    },\n    string: {\n      pattern: /[xzgn]?(?:\"(?:[^\\r\\n\"]|\"\")*\"(?!\")|'(?:[^\\r\\n']|'')*'(?!'))/i,\n      greedy: true\n    },\n    level: {\n      pattern: /(^[ \\t]*)\\d+\\b/m,\n      lookbehind: true,\n      greedy: true,\n      alias: 'number'\n    },\n    'class-name': {\n      // https://github.com/antlr/grammars-v4/blob/42edd5b687d183b5fa679e858a82297bd27141e7/cobol85/Cobol85.g4#L1015\n      pattern:\n        /(\\bpic(?:ture)?\\s+)(?:(?:[-\\w$/,:*+<>]|\\.(?!\\s|$))(?:\\(\\d+\\))?)+/i,\n      lookbehind: true,\n      inside: {\n        number: {\n          pattern: /(\\()\\d+/,\n          lookbehind: true\n        },\n        punctuation: /[()]/\n      }\n    },\n    keyword: {\n      pattern:\n        /(^|[^\\w-])(?:ABORT|ACCEPT|ACCESS|ADD|ADDRESS|ADVANCING|AFTER|ALIGNED|ALL|ALPHABET|ALPHABETIC|ALPHABETIC-LOWER|ALPHABETIC-UPPER|ALPHANUMERIC|ALPHANUMERIC-EDITED|ALSO|ALTER|ALTERNATE|ANY|ARE|AREA|AREAS|AS|ASCENDING|ASCII|ASSIGN|ASSOCIATED-DATA|ASSOCIATED-DATA-LENGTH|AT|ATTRIBUTE|AUTHOR|AUTO|AUTO-SKIP|BACKGROUND-COLOR|BACKGROUND-COLOUR|BASIS|BEEP|BEFORE|BEGINNING|BELL|BINARY|BIT|BLANK|BLINK|BLOCK|BOTTOM|BOUNDS|BY|BYFUNCTION|BYTITLE|CALL|CANCEL|CAPABLE|CCSVERSION|CD|CF|CH|CHAINING|CHANGED|CHANNEL|CHARACTER|CHARACTERS|CLASS|CLASS-ID|CLOCK-UNITS|CLOSE|CLOSE-DISPOSITION|COBOL|CODE|CODE-SET|COL|COLLATING|COLUMN|COM-REG|COMMA|COMMITMENT|COMMON|COMMUNICATION|COMP|COMP-1|COMP-2|COMP-3|COMP-4|COMP-5|COMPUTATIONAL|COMPUTATIONAL-1|COMPUTATIONAL-2|COMPUTATIONAL-3|COMPUTATIONAL-4|COMPUTATIONAL-5|COMPUTE|CONFIGURATION|CONTAINS|CONTENT|CONTINUE|CONTROL|CONTROL-POINT|CONTROLS|CONVENTION|CONVERTING|COPY|CORR|CORRESPONDING|COUNT|CRUNCH|CURRENCY|CURSOR|DATA|DATA-BASE|DATE|DATE-COMPILED|DATE-WRITTEN|DAY|DAY-OF-WEEK|DBCS|DE|DEBUG-CONTENTS|DEBUG-ITEM|DEBUG-LINE|DEBUG-NAME|DEBUG-SUB-1|DEBUG-SUB-2|DEBUG-SUB-3|DEBUGGING|DECIMAL-POINT|DECLARATIVES|DEFAULT|DEFAULT-DISPLAY|DEFINITION|DELETE|DELIMITED|DELIMITER|DEPENDING|DESCENDING|DESTINATION|DETAIL|DFHRESP|DFHVALUE|DISABLE|DISK|DISPLAY|DISPLAY-1|DIVIDE|DIVISION|DONTCARE|DOUBLE|DOWN|DUPLICATES|DYNAMIC|EBCDIC|EGCS|EGI|ELSE|EMI|EMPTY-CHECK|ENABLE|END|END-ACCEPT|END-ADD|END-CALL|END-COMPUTE|END-DELETE|END-DIVIDE|END-EVALUATE|END-IF|END-MULTIPLY|END-OF-PAGE|END-PERFORM|END-READ|END-RECEIVE|END-RETURN|END-REWRITE|END-SEARCH|END-START|END-STRING|END-SUBTRACT|END-UNSTRING|END-WRITE|ENDING|ENTER|ENTRY|ENTRY-PROCEDURE|ENVIRONMENT|EOL|EOP|EOS|ERASE|ERROR|ESCAPE|ESI|EVALUATE|EVENT|EVERY|EXCEPTION|EXCLUSIVE|EXHIBIT|EXIT|EXPORT|EXTEND|EXTENDED|EXTERNAL|FD|FILE|FILE-CONTROL|FILLER|FINAL|FIRST|FOOTING|FOR|FOREGROUND-COLOR|FOREGROUND-COLOUR|FROM|FULL|FUNCTION|FUNCTION-POINTER|FUNCTIONNAME|GENERATE|GIVING|GLOBAL|GO|GOBACK|GRID|GROUP|HEADING|HIGH-VALUE|HIGH-VALUES|HIGHLIGHT|I-O|I-O-CONTROL|ID|IDENTIFICATION|IF|IMPLICIT|IMPORT|IN|INDEX|INDEXED|INDICATE|INITIAL|INITIALIZE|INITIATE|INPUT|INPUT-OUTPUT|INSPECT|INSTALLATION|INTEGER|INTO|INVALID|INVOKE|IS|JUST|JUSTIFIED|KANJI|KEPT|KEY|KEYBOARD|LABEL|LANGUAGE|LAST|LB|LD|LEADING|LEFT|LEFTLINE|LENGTH|LENGTH-CHECK|LIBACCESS|LIBPARAMETER|LIBRARY|LIMIT|LIMITS|LINAGE|LINAGE-COUNTER|LINE|LINE-COUNTER|LINES|LINKAGE|LIST|LOCAL|LOCAL-STORAGE|LOCK|LONG-DATE|LONG-TIME|LOW-VALUE|LOW-VALUES|LOWER|LOWLIGHT|MEMORY|MERGE|MESSAGE|MMDDYYYY|MODE|MODULES|MORE-LABELS|MOVE|MULTIPLE|MULTIPLY|NAMED|NATIONAL|NATIONAL-EDITED|NATIVE|NEGATIVE|NETWORK|NEXT|NO|NO-ECHO|NULL|NULLS|NUMBER|NUMERIC|NUMERIC-DATE|NUMERIC-EDITED|NUMERIC-TIME|OBJECT-COMPUTER|OCCURS|ODT|OF|OFF|OMITTED|ON|OPEN|OPTIONAL|ORDER|ORDERLY|ORGANIZATION|OTHER|OUTPUT|OVERFLOW|OVERLINE|OWN|PACKED-DECIMAL|PADDING|PAGE|PAGE-COUNTER|PASSWORD|PERFORM|PF|PH|PIC|PICTURE|PLUS|POINTER|PORT|POSITION|POSITIVE|PRINTER|PRINTING|PRIVATE|PROCEDURE|PROCEDURE-POINTER|PROCEDURES|PROCEED|PROCESS|PROGRAM|PROGRAM-ID|PROGRAM-LIBRARY|PROMPT|PURGE|QUEUE|QUOTE|QUOTES|RANDOM|RD|READ|READER|REAL|RECEIVE|RECEIVED|RECORD|RECORDING|RECORDS|RECURSIVE|REDEFINES|REEL|REF|REFERENCE|REFERENCES|RELATIVE|RELEASE|REMAINDER|REMARKS|REMOTE|REMOVAL|REMOVE|RENAMES|REPLACE|REPLACING|REPORT|REPORTING|REPORTS|REQUIRED|RERUN|RESERVE|RESET|RETURN|RETURN-CODE|RETURNING|REVERSE-VIDEO|REVERSED|REWIND|REWRITE|RF|RH|RIGHT|ROUNDED|RUN|SAME|SAVE|SCREEN|SD|SEARCH|SECTION|SECURE|SECURITY|SEGMENT|SEGMENT-LIMIT|SELECT|SEND|SENTENCE|SEPARATE|SEQUENCE|SEQUENTIAL|SET|SHARED|SHAREDBYALL|SHAREDBYRUNUNIT|SHARING|SHIFT-IN|SHIFT-OUT|SHORT-DATE|SIGN|SIZE|SORT|SORT-CONTROL|SORT-CORE-SIZE|SORT-FILE-SIZE|SORT-MERGE|SORT-MESSAGE|SORT-MODE-SIZE|SORT-RETURN|SOURCE|SOURCE-COMPUTER|SPACE|SPACES|SPECIAL-NAMES|STANDARD|STANDARD-1|STANDARD-2|START|STATUS|STOP|STRING|SUB-QUEUE-1|SUB-QUEUE-2|SUB-QUEUE-3|SUBTRACT|SUM|SUPPRESS|SYMBOL|SYMBOLIC|SYNC|SYNCHRONIZED|TABLE|TALLY|TALLYING|TAPE|TASK|TERMINAL|TERMINATE|TEST|TEXT|THEN|THREAD|THREAD-LOCAL|THROUGH|THRU|TIME|TIMER|TIMES|TITLE|TO|TODAYS-DATE|TODAYS-NAME|TOP|TRAILING|TRUNCATED|TYPE|TYPEDEF|UNDERLINE|UNIT|UNSTRING|UNTIL|UP|UPON|USAGE|USE|USING|VALUE|VALUES|VARYING|VIRTUAL|WAIT|WHEN|WHEN-COMPILED|WITH|WORDS|WORKING-STORAGE|WRITE|YEAR|YYYYDDD|YYYYMMDD|ZERO-FILL|ZEROES|ZEROS)(?![\\w-])/i,\n      lookbehind: true\n    },\n    boolean: {\n      pattern: /(^|[^\\w-])(?:false|true)(?![\\w-])/i,\n      lookbehind: true\n    },\n    number: {\n      pattern:\n        /(^|[^\\w-])(?:[+-]?(?:(?:\\d+(?:[.,]\\d+)?|[.,]\\d+)(?:e[+-]?\\d+)?|zero))(?![\\w-])/i,\n      lookbehind: true\n    },\n    operator: [\n      /<>|[<>]=?|[=+*/&]/,\n      {\n        pattern: /(^|[^\\w-])(?:-|and|equal|greater|less|not|or|than)(?![\\w-])/i,\n        lookbehind: true\n      }\n    ],\n    punctuation: /[.:,()]/\n  }\n}\n","'use strict'\n\nmodule.exports = coffeescript\ncoffeescript.displayName = 'coffeescript'\ncoffeescript.aliases = ['coffee']\nfunction coffeescript(Prism) {\n  ;(function (Prism) {\n    // Ignore comments starting with { to privilege string interpolation highlighting\n    var comment = /#(?!\\{).+/\n    var interpolation = {\n      pattern: /#\\{[^}]+\\}/,\n      alias: 'variable'\n    }\n    Prism.languages.coffeescript = Prism.languages.extend('javascript', {\n      comment: comment,\n      string: [\n        // Strings are multiline\n        {\n          pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n          greedy: true\n        },\n        {\n          // Strings are multiline\n          pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n          greedy: true,\n          inside: {\n            interpolation: interpolation\n          }\n        }\n      ],\n      keyword:\n        /\\b(?:and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\\b/,\n      'class-member': {\n        pattern: /@(?!\\d)\\w+/,\n        alias: 'variable'\n      }\n    })\n    Prism.languages.insertBefore('coffeescript', 'comment', {\n      'multiline-comment': {\n        pattern: /###[\\s\\S]+?###/,\n        alias: 'comment'\n      },\n      // Block regexp can contain comments and interpolation\n      'block-regex': {\n        pattern: /\\/{3}[\\s\\S]*?\\/{3}/,\n        alias: 'regex',\n        inside: {\n          comment: comment,\n          interpolation: interpolation\n        }\n      }\n    })\n    Prism.languages.insertBefore('coffeescript', 'string', {\n      'inline-javascript': {\n        pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n        inside: {\n          delimiter: {\n            pattern: /^`|`$/,\n            alias: 'punctuation'\n          },\n          script: {\n            pattern: /[\\s\\S]+/,\n            alias: 'language-javascript',\n            inside: Prism.languages.javascript\n          }\n        }\n      },\n      // Block strings\n      'multiline-string': [\n        {\n          pattern: /'''[\\s\\S]*?'''/,\n          greedy: true,\n          alias: 'string'\n        },\n        {\n          pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n          greedy: true,\n          alias: 'string',\n          inside: {\n            interpolation: interpolation\n          }\n        }\n      ]\n    })\n    Prism.languages.insertBefore('coffeescript', 'keyword', {\n      // Object property\n      property: /(?!\\d)\\w+(?=\\s*:(?!:))/\n    })\n    delete Prism.languages.coffeescript['template-string']\n    Prism.languages.coffee = Prism.languages.coffeescript\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = concurnas\nconcurnas.displayName = 'concurnas'\nconcurnas.aliases = ['conc']\nfunction concurnas(Prism) {\n  Prism.languages.concurnas = {\n    comment: {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?(?:\\*\\/|$)|\\/\\/.*)/,\n      lookbehind: true,\n      greedy: true\n    },\n    langext: {\n      pattern: /\\b\\w+\\s*\\|\\|[\\s\\S]+?\\|\\|/,\n      greedy: true,\n      inside: {\n        'class-name': /^\\w+/,\n        string: {\n          pattern: /(^\\s*\\|\\|)[\\s\\S]+(?=\\|\\|$)/,\n          lookbehind: true\n        },\n        punctuation: /\\|\\|/\n      }\n    },\n    function: {\n      pattern: /((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/,\n      lookbehind: true\n    },\n    keyword:\n      /\\b(?:abstract|actor|also|annotation|assert|async|await|bool|boolean|break|byte|case|catch|changed|char|class|closed|constant|continue|def|default|del|double|elif|else|enum|every|extends|false|finally|float|for|from|global|gpudef|gpukernel|if|import|in|init|inject|int|lambda|local|long|loop|match|new|nodefault|null|of|onchange|open|out|override|package|parfor|parforsync|post|pre|private|protected|provide|provider|public|return|shared|short|single|size_t|sizeof|super|sync|this|throw|trait|trans|transient|true|try|typedef|unchecked|using|val|var|void|while|with)\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    number:\n      /\\b0b[01][01_]*L?\\b|\\b0x(?:[\\da-f_]*\\.)?[\\da-f_p+-]+\\b|(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfls]?/i,\n    punctuation: /[{}[\\];(),.:]/,\n    operator:\n      /<==|>==|=>|->|<-|<>|&==|&<>|\\?:?|\\.\\?|\\+\\+|--|[-+*/=<>]=?|[!^~]|\\b(?:and|as|band|bor|bxor|comp|is|isnot|mod|or)\\b=?/,\n    annotation: {\n      pattern: /@(?:\\w+:)?(?:\\w+|\\[[^\\]]+\\])?/,\n      alias: 'builtin'\n    }\n  }\n  Prism.languages.insertBefore('concurnas', 'langext', {\n    'regex-literal': {\n      pattern: /\\br(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern:\n            /((?:^|[^\\\\])(?:\\\\{2})*)\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\n          lookbehind: true,\n          inside: Prism.languages.concurnas\n        },\n        regex: /[\\s\\S]+/\n      }\n    },\n    'string-literal': {\n      pattern: /(?:\\B|\\bs)(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern:\n            /((?:^|[^\\\\])(?:\\\\{2})*)\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\n          lookbehind: true,\n          inside: Prism.languages.concurnas\n        },\n        string: /[\\s\\S]+/\n      }\n    }\n  })\n  Prism.languages.conc = Prism.languages.concurnas\n}\n","'use strict'\n\nmodule.exports = coq\ncoq.displayName = 'coq'\ncoq.aliases = []\nfunction coq(Prism) {\n  ;(function (Prism) {\n    // https://github.com/coq/coq\n    var commentSource = /\\(\\*(?:[^(*]|\\((?!\\*)|\\*(?!\\))|<self>)*\\*\\)/.source\n    for (var i = 0; i < 2; i++) {\n      commentSource = commentSource.replace(/<self>/g, function () {\n        return commentSource\n      })\n    }\n    commentSource = commentSource.replace(/<self>/g, '[]')\n    Prism.languages.coq = {\n      comment: RegExp(commentSource),\n      string: {\n        pattern: /\"(?:[^\"]|\"\")*\"(?!\")/,\n        greedy: true\n      },\n      attribute: [\n        {\n          pattern: RegExp(\n            /#\\[(?:[^\\[\\](\"]|\"(?:[^\"]|\"\")*\"(?!\")|\\((?!\\*)|<comment>)*\\]/.source.replace(\n              /<comment>/g,\n              function () {\n                return commentSource\n              }\n            )\n          ),\n          greedy: true,\n          alias: 'attr-name',\n          inside: {\n            comment: RegExp(commentSource),\n            string: {\n              pattern: /\"(?:[^\"]|\"\")*\"(?!\")/,\n              greedy: true\n            },\n            operator: /=/,\n            punctuation: /^#\\[|\\]$|[,()]/\n          }\n        },\n        {\n          pattern:\n            /\\b(?:Cumulative|Global|Local|Monomorphic|NonCumulative|Polymorphic|Private|Program)\\b/,\n          alias: 'attr-name'\n        }\n      ],\n      keyword:\n        /\\b(?:Abort|About|Add|Admit|Admitted|All|Arguments|As|Assumptions|Axiom|Axioms|Back|BackTo|Backtrace|BinOp|BinOpSpec|BinRel|Bind|Blacklist|Canonical|Case|Cd|Check|Class|Classes|Close|CoFixpoint|CoInductive|Coercion|Coercions|Collection|Combined|Compute|Conjecture|Conjectures|Constant|Constants|Constraint|Constructors|Context|Corollary|Create|CstOp|Custom|Cut|Debug|Declare|Defined|Definition|Delimit|Dependencies|Dependent|Derive|Diffs|Drop|Elimination|End|Entry|Equality|Eval|Example|Existential|Existentials|Existing|Export|Extern|Extraction|Fact|Fail|Field|File|Firstorder|Fixpoint|Flags|Focus|From|Funclass|Function|Functional|GC|Generalizable|Goal|Grab|Grammar|Graph|Guarded|Haskell|Heap|Hide|Hint|HintDb|Hints|Hypotheses|Hypothesis|IF|Identity|Immediate|Implicit|Implicits|Import|Include|Induction|Inductive|Infix|Info|Initial|InjTyp|Inline|Inspect|Instance|Instances|Intro|Intros|Inversion|Inversion_clear|JSON|Language|Left|Lemma|Let|Lia|Libraries|Library|Load|LoadPath|Locate|Ltac|Ltac2|ML|Match|Method|Minimality|Module|Modules|Morphism|Next|NoInline|Notation|Number|OCaml|Obligation|Obligations|Opaque|Open|Optimize|Parameter|Parameters|Parametric|Path|Paths|Prenex|Preterm|Primitive|Print|Profile|Projections|Proof|Prop|PropBinOp|PropOp|PropUOp|Property|Proposition|Pwd|Qed|Quit|Rec|Record|Recursive|Redirect|Reduction|Register|Relation|Remark|Remove|Require|Reserved|Reset|Resolve|Restart|Rewrite|Right|Ring|Rings|SProp|Saturate|Save|Scheme|Scope|Scopes|Search|SearchHead|SearchPattern|SearchRewrite|Section|Separate|Set|Setoid|Show|Signatures|Solve|Solver|Sort|Sortclass|Sorted|Spec|Step|Strategies|Strategy|String|Structure|SubClass|Subgraph|SuchThat|Tactic|Term|TestCompile|Theorem|Time|Timeout|To|Transparent|Type|Typeclasses|Types|Typing|UnOp|UnOpSpec|Undelimit|Undo|Unfocus|Unfocused|Unfold|Universe|Universes|Unshelve|Variable|Variables|Variant|Verbose|View|Visibility|Zify|_|apply|as|at|by|cofix|else|end|exists|exists2|fix|for|forall|fun|if|in|let|match|measure|move|removed|return|struct|then|using|wf|where|with)\\b/,\n      number:\n        /\\b(?:0x[a-f0-9][a-f0-9_]*(?:\\.[a-f0-9_]+)?(?:p[+-]?\\d[\\d_]*)?|\\d[\\d_]*(?:\\.[\\d_]+)?(?:e[+-]?\\d[\\d_]*)?)\\b/i,\n      punct: {\n        pattern: /@\\{|\\{\\||\\[=|:>/,\n        alias: 'punctuation'\n      },\n      operator:\n        /\\/\\\\|\\\\\\/|\\.{2,3}|:{1,2}=|\\*\\*|[-=]>|<(?:->?|[+:=>]|<:)|>(?:=|->)|\\|[-|]?|[-!%&*+/<=>?@^~']/,\n      punctuation: /\\.\\(|`\\(|@\\{|`\\{|\\{\\||\\[=|:>|[:.,;(){}\\[\\]]/\n    }\n  })(Prism)\n}\n","'use strict'\nvar refractorC = require('./c.js')\nmodule.exports = cpp\ncpp.displayName = 'cpp'\ncpp.aliases = []\nfunction cpp(Prism) {\n  Prism.register(refractorC)\n  ;(function (Prism) {\n    var keyword =\n      /\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|char8_t|class|co_await|co_return|co_yield|compl|concept|const|const_cast|consteval|constexpr|constinit|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|final|float|for|friend|goto|if|import|inline|int|int16_t|int32_t|int64_t|int8_t|long|module|mutable|namespace|new|noexcept|nullptr|operator|override|private|protected|public|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|uint16_t|uint32_t|uint64_t|uint8_t|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/\n    var modName = /\\b(?!<keyword>)\\w+(?:\\s*\\.\\s*\\w+)*\\b/.source.replace(\n      /<keyword>/g,\n      function () {\n        return keyword.source\n      }\n    )\n    Prism.languages.cpp = Prism.languages.extend('c', {\n      'class-name': [\n        {\n          pattern: RegExp(\n            /(\\b(?:class|concept|enum|struct|typename)\\s+)(?!<keyword>)\\w+/.source.replace(\n              /<keyword>/g,\n              function () {\n                return keyword.source\n              }\n            )\n          ),\n          lookbehind: true\n        }, // This is intended to capture the class name of method implementations like:\n        //   void foo::bar() const {}\n        // However! The `foo` in the above example could also be a namespace, so we only capture the class name if\n        // it starts with an uppercase letter. This approximation should give decent results.\n        /\\b[A-Z]\\w*(?=\\s*::\\s*\\w+\\s*\\()/, // This will capture the class name before destructors like:\n        //   Foo::~Foo() {}\n        /\\b[A-Z_]\\w*(?=\\s*::\\s*~\\w+\\s*\\()/i, // This also intends to capture the class name of method implementations but here the class has template\n        // parameters, so it can't be a namespace (until C++ adds generic namespaces).\n        /\\b\\w+(?=\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>\\s*::\\s*\\w+\\s*\\()/\n      ],\n      keyword: keyword,\n      number: {\n        pattern:\n          /(?:\\b0b[01']+|\\b0x(?:[\\da-f']+(?:\\.[\\da-f']*)?|\\.[\\da-f']+)(?:p[+-]?[\\d']+)?|(?:\\b[\\d']+(?:\\.[\\d']*)?|\\B\\.[\\d']+)(?:e[+-]?[\\d']+)?)[ful]{0,4}/i,\n        greedy: true\n      },\n      operator:\n        />>=?|<<=?|->|--|\\+\\+|&&|\\|\\||[?:~]|<=>|[-+*/%&|^!=<>]=?|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/,\n      boolean: /\\b(?:false|true)\\b/\n    })\n    Prism.languages.insertBefore('cpp', 'string', {\n      module: {\n        // https://en.cppreference.com/w/cpp/language/modules\n        pattern: RegExp(\n          /(\\b(?:import|module)\\s+)/.source +\n            '(?:' + // header-name\n            /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|<[^<>\\r\\n]*>/.source +\n            '|' + // module name or partition or both\n            /<mod-name>(?:\\s*:\\s*<mod-name>)?|:\\s*<mod-name>/.source.replace(\n              /<mod-name>/g,\n              function () {\n                return modName\n              }\n            ) +\n            ')'\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          string: /^[<\"][\\s\\S]+/,\n          operator: /:/,\n          punctuation: /\\./\n        }\n      },\n      'raw-string': {\n        pattern: /R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,\n        alias: 'string',\n        greedy: true\n      }\n    })\n    Prism.languages.insertBefore('cpp', 'keyword', {\n      'generic-function': {\n        pattern: /\\b(?!operator\\b)[a-z_]\\w*\\s*<(?:[^<>]|<[^<>]*>)*>(?=\\s*\\()/i,\n        inside: {\n          function: /^\\w+/,\n          generic: {\n            pattern: /<[\\s\\S]+/,\n            alias: 'class-name',\n            inside: Prism.languages.cpp\n          }\n        }\n      }\n    })\n    Prism.languages.insertBefore('cpp', 'operator', {\n      'double-colon': {\n        pattern: /::/,\n        alias: 'punctuation'\n      }\n    })\n    Prism.languages.insertBefore('cpp', 'class-name', {\n      // the base clause is an optional list of parent classes\n      // https://en.cppreference.com/w/cpp/language/class\n      'base-clause': {\n        pattern:\n          /(\\b(?:class|struct)\\s+\\w+\\s*:\\s*)[^;{}\"'\\s]+(?:\\s+[^;{}\"'\\s]+)*(?=\\s*[;{])/,\n        lookbehind: true,\n        greedy: true,\n        inside: Prism.languages.extend('cpp', {})\n      }\n    })\n    Prism.languages.insertBefore(\n      'inside',\n      'double-colon',\n      {\n        // All untokenized words that are not namespaces should be class names\n        'class-name': /\\b[a-z_]\\w*\\b(?!\\s*::)/i\n      },\n      Prism.languages.cpp['base-clause']\n    )\n  })(Prism)\n}\n","'use strict'\nvar refractorRuby = require('./ruby.js')\nmodule.exports = crystal\ncrystal.displayName = 'crystal'\ncrystal.aliases = []\nfunction crystal(Prism) {\n  Prism.register(refractorRuby)\n  ;(function (Prism) {\n    Prism.languages.crystal = Prism.languages.extend('ruby', {\n      keyword: [\n        /\\b(?:__DIR__|__END_LINE__|__FILE__|__LINE__|abstract|alias|annotation|as|asm|begin|break|case|class|def|do|else|elsif|end|ensure|enum|extend|for|fun|if|ifdef|include|instance_sizeof|lib|macro|module|next|of|out|pointerof|private|protected|ptr|require|rescue|return|select|self|sizeof|struct|super|then|type|typeof|undef|uninitialized|union|unless|until|when|while|with|yield)\\b/,\n        {\n          pattern: /(\\.\\s*)(?:is_a|responds_to)\\?/,\n          lookbehind: true\n        }\n      ],\n      number:\n        /\\b(?:0b[01_]*[01]|0o[0-7_]*[0-7]|0x[\\da-fA-F_]*[\\da-fA-F]|(?:\\d(?:[\\d_]*\\d)?)(?:\\.[\\d_]*\\d)?(?:[eE][+-]?[\\d_]*\\d)?)(?:_(?:[uif](?:8|16|32|64))?)?\\b/,\n      operator: [/->/, Prism.languages.ruby.operator],\n      punctuation: /[(){}[\\].,;\\\\]/\n    })\n    Prism.languages.insertBefore('crystal', 'string-literal', {\n      attribute: {\n        pattern: /@\\[.*?\\]/,\n        inside: {\n          delimiter: {\n            pattern: /^@\\[|\\]$/,\n            alias: 'punctuation'\n          },\n          attribute: {\n            pattern: /^(\\s*)\\w+/,\n            lookbehind: true,\n            alias: 'class-name'\n          },\n          args: {\n            pattern: /\\S(?:[\\s\\S]*\\S)?/,\n            inside: Prism.languages.crystal\n          }\n        }\n      },\n      expansion: {\n        pattern: /\\{(?:\\{.*?\\}|%.*?%)\\}/,\n        inside: {\n          content: {\n            pattern: /^(\\{.)[\\s\\S]+(?=.\\}$)/,\n            lookbehind: true,\n            inside: Prism.languages.crystal\n          },\n          delimiter: {\n            pattern: /^\\{[\\{%]|[\\}%]\\}$/,\n            alias: 'operator'\n          }\n        }\n      },\n      char: {\n        pattern:\n          /'(?:[^\\\\\\r\\n]{1,2}|\\\\(?:.|u(?:[A-Fa-f0-9]{1,4}|\\{[A-Fa-f0-9]{1,6}\\})))'/,\n        greedy: true\n      }\n    })\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = csharp\ncsharp.displayName = 'csharp'\ncsharp.aliases = ['dotnet', 'cs']\nfunction csharp(Prism) {\n  ;(function (Prism) {\n    /**\n     * Replaces all placeholders \"<<n>>\" of given pattern with the n-th replacement (zero based).\n     *\n     * Note: This is a simple text based replacement. Be careful when using backreferences!\n     *\n     * @param {string} pattern the given pattern.\n     * @param {string[]} replacements a list of replacement which can be inserted into the given pattern.\n     * @returns {string} the pattern with all placeholders replaced with their corresponding replacements.\n     * @example replace(/a<<0>>a/.source, [/b+/.source]) === /a(?:b+)a/.source\n     */\n    function replace(pattern, replacements) {\n      return pattern.replace(/<<(\\d+)>>/g, function (m, index) {\n        return '(?:' + replacements[+index] + ')'\n      })\n    }\n    /**\n     * @param {string} pattern\n     * @param {string[]} replacements\n     * @param {string} [flags]\n     * @returns {RegExp}\n     */\n    function re(pattern, replacements, flags) {\n      return RegExp(replace(pattern, replacements), flags || '')\n    }\n    /**\n     * Creates a nested pattern where all occurrences of the string `<<self>>` are replaced with the pattern itself.\n     *\n     * @param {string} pattern\n     * @param {number} depthLog2\n     * @returns {string}\n     */\n    function nested(pattern, depthLog2) {\n      for (var i = 0; i < depthLog2; i++) {\n        pattern = pattern.replace(/<<self>>/g, function () {\n          return '(?:' + pattern + ')'\n        })\n      }\n      return pattern.replace(/<<self>>/g, '[^\\\\s\\\\S]')\n    } // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/\n    var keywordKinds = {\n      // keywords which represent a return or variable type\n      type: 'bool byte char decimal double dynamic float int long object sbyte short string uint ulong ushort var void',\n      // keywords which are used to declare a type\n      typeDeclaration: 'class enum interface record struct',\n      // contextual keywords\n      // (\"var\" and \"dynamic\" are missing because they are used like types)\n      contextual:\n        'add alias and ascending async await by descending from(?=\\\\s*(?:\\\\w|$)) get global group into init(?=\\\\s*;) join let nameof not notnull on or orderby partial remove select set unmanaged value when where with(?=\\\\s*{)',\n      // all other keywords\n      other:\n        'abstract as base break case catch checked const continue default delegate do else event explicit extern finally fixed for foreach goto if implicit in internal is lock namespace new null operator out override params private protected public readonly ref return sealed sizeof stackalloc static switch this throw try typeof unchecked unsafe using virtual volatile while yield'\n    } // keywords\n    function keywordsToPattern(words) {\n      return '\\\\b(?:' + words.trim().replace(/ /g, '|') + ')\\\\b'\n    }\n    var typeDeclarationKeywords = keywordsToPattern(\n      keywordKinds.typeDeclaration\n    )\n    var keywords = RegExp(\n      keywordsToPattern(\n        keywordKinds.type +\n          ' ' +\n          keywordKinds.typeDeclaration +\n          ' ' +\n          keywordKinds.contextual +\n          ' ' +\n          keywordKinds.other\n      )\n    )\n    var nonTypeKeywords = keywordsToPattern(\n      keywordKinds.typeDeclaration +\n        ' ' +\n        keywordKinds.contextual +\n        ' ' +\n        keywordKinds.other\n    )\n    var nonContextualKeywords = keywordsToPattern(\n      keywordKinds.type +\n        ' ' +\n        keywordKinds.typeDeclaration +\n        ' ' +\n        keywordKinds.other\n    ) // types\n    var generic = nested(/<(?:[^<>;=+\\-*/%&|^]|<<self>>)*>/.source, 2) // the idea behind the other forbidden characters is to prevent false positives. Same for tupleElement.\n    var nestedRound = nested(/\\((?:[^()]|<<self>>)*\\)/.source, 2)\n    var name = /@?\\b[A-Za-z_]\\w*\\b/.source\n    var genericName = replace(/<<0>>(?:\\s*<<1>>)?/.source, [name, generic])\n    var identifier = replace(/(?!<<0>>)<<1>>(?:\\s*\\.\\s*<<1>>)*/.source, [\n      nonTypeKeywords,\n      genericName\n    ])\n    var array = /\\[\\s*(?:,\\s*)*\\]/.source\n    var typeExpressionWithoutTuple = replace(\n      /<<0>>(?:\\s*(?:\\?\\s*)?<<1>>)*(?:\\s*\\?)?/.source,\n      [identifier, array]\n    )\n    var tupleElement = replace(\n      /[^,()<>[\\];=+\\-*/%&|^]|<<0>>|<<1>>|<<2>>/.source,\n      [generic, nestedRound, array]\n    )\n    var tuple = replace(/\\(<<0>>+(?:,<<0>>+)+\\)/.source, [tupleElement])\n    var typeExpression = replace(\n      /(?:<<0>>|<<1>>)(?:\\s*(?:\\?\\s*)?<<2>>)*(?:\\s*\\?)?/.source,\n      [tuple, identifier, array]\n    )\n    var typeInside = {\n      keyword: keywords,\n      punctuation: /[<>()?,.:[\\]]/\n    } // strings & characters\n    // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#character-literals\n    // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#string-literals\n    var character = /'(?:[^\\r\\n'\\\\]|\\\\.|\\\\[Uux][\\da-fA-F]{1,8})'/.source // simplified pattern\n    var regularString = /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/.source\n    var verbatimString = /@\"(?:\"\"|\\\\[\\s\\S]|[^\\\\\"])*\"(?!\")/.source\n    Prism.languages.csharp = Prism.languages.extend('clike', {\n      string: [\n        {\n          pattern: re(/(^|[^$\\\\])<<0>>/.source, [verbatimString]),\n          lookbehind: true,\n          greedy: true\n        },\n        {\n          pattern: re(/(^|[^@$\\\\])<<0>>/.source, [regularString]),\n          lookbehind: true,\n          greedy: true\n        }\n      ],\n      'class-name': [\n        {\n          // Using static\n          // using static System.Math;\n          pattern: re(/(\\busing\\s+static\\s+)<<0>>(?=\\s*;)/.source, [\n            identifier\n          ]),\n          lookbehind: true,\n          inside: typeInside\n        },\n        {\n          // Using alias (type)\n          // using Project = PC.MyCompany.Project;\n          pattern: re(/(\\busing\\s+<<0>>\\s*=\\s*)<<1>>(?=\\s*;)/.source, [\n            name,\n            typeExpression\n          ]),\n          lookbehind: true,\n          inside: typeInside\n        },\n        {\n          // Using alias (alias)\n          // using Project = PC.MyCompany.Project;\n          pattern: re(/(\\busing\\s+)<<0>>(?=\\s*=)/.source, [name]),\n          lookbehind: true\n        },\n        {\n          // Type declarations\n          // class Foo<A, B>\n          // interface Foo<out A, B>\n          pattern: re(/(\\b<<0>>\\s+)<<1>>/.source, [\n            typeDeclarationKeywords,\n            genericName\n          ]),\n          lookbehind: true,\n          inside: typeInside\n        },\n        {\n          // Single catch exception declaration\n          // catch(Foo)\n          // (things like catch(Foo e) is covered by variable declaration)\n          pattern: re(/(\\bcatch\\s*\\(\\s*)<<0>>/.source, [identifier]),\n          lookbehind: true,\n          inside: typeInside\n        },\n        {\n          // Name of the type parameter of generic constraints\n          // where Foo : class\n          pattern: re(/(\\bwhere\\s+)<<0>>/.source, [name]),\n          lookbehind: true\n        },\n        {\n          // Casts and checks via as and is.\n          // as Foo<A>, is Bar<B>\n          // (things like if(a is Foo b) is covered by variable declaration)\n          pattern: re(/(\\b(?:is(?:\\s+not)?|as)\\s+)<<0>>/.source, [\n            typeExpressionWithoutTuple\n          ]),\n          lookbehind: true,\n          inside: typeInside\n        },\n        {\n          // Variable, field and parameter declaration\n          // (Foo bar, Bar baz, Foo[,,] bay, Foo<Bar, FooBar<Bar>> bax)\n          pattern: re(\n            /\\b<<0>>(?=\\s+(?!<<1>>|with\\s*\\{)<<2>>(?:\\s*[=,;:{)\\]]|\\s+(?:in|when)\\b))/\n              .source,\n            [typeExpression, nonContextualKeywords, name]\n          ),\n          inside: typeInside\n        }\n      ],\n      keyword: keywords,\n      // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#literals\n      number:\n        /(?:\\b0(?:x[\\da-f_]*[\\da-f]|b[01_]*[01])|(?:\\B\\.\\d+(?:_+\\d+)*|\\b\\d+(?:_+\\d+)*(?:\\.\\d+(?:_+\\d+)*)?)(?:e[-+]?\\d+(?:_+\\d+)*)?)(?:[dflmu]|lu|ul)?\\b/i,\n      operator: />>=?|<<=?|[-=]>|([-+&|])\\1|~|\\?\\?=?|[-+*/%&|^!=<>]=?/,\n      punctuation: /\\?\\.?|::|[{}[\\];(),.:]/\n    })\n    Prism.languages.insertBefore('csharp', 'number', {\n      range: {\n        pattern: /\\.\\./,\n        alias: 'operator'\n      }\n    })\n    Prism.languages.insertBefore('csharp', 'punctuation', {\n      'named-parameter': {\n        pattern: re(/([(,]\\s*)<<0>>(?=\\s*:)/.source, [name]),\n        lookbehind: true,\n        alias: 'punctuation'\n      }\n    })\n    Prism.languages.insertBefore('csharp', 'class-name', {\n      namespace: {\n        // namespace Foo.Bar {}\n        // using Foo.Bar;\n        pattern: re(\n          /(\\b(?:namespace|using)\\s+)<<0>>(?:\\s*\\.\\s*<<0>>)*(?=\\s*[;{])/.source,\n          [name]\n        ),\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      'type-expression': {\n        // default(Foo), typeof(Foo<Bar>), sizeof(int)\n        pattern: re(\n          /(\\b(?:default|sizeof|typeof)\\s*\\(\\s*(?!\\s))(?:[^()\\s]|\\s(?!\\s)|<<0>>)*(?=\\s*\\))/\n            .source,\n          [nestedRound]\n        ),\n        lookbehind: true,\n        alias: 'class-name',\n        inside: typeInside\n      },\n      'return-type': {\n        // Foo<Bar> ForBar(); Foo IFoo.Bar() => 0\n        // int this[int index] => 0; T IReadOnlyList<T>.this[int index] => this[index];\n        // int Foo => 0; int Foo { get; set } = 0;\n        pattern: re(\n          /<<0>>(?=\\s+(?:<<1>>\\s*(?:=>|[({]|\\.\\s*this\\s*\\[)|this\\s*\\[))/.source,\n          [typeExpression, identifier]\n        ),\n        inside: typeInside,\n        alias: 'class-name'\n      },\n      'constructor-invocation': {\n        // new List<Foo<Bar[]>> { }\n        pattern: re(/(\\bnew\\s+)<<0>>(?=\\s*[[({])/.source, [typeExpression]),\n        lookbehind: true,\n        inside: typeInside,\n        alias: 'class-name'\n      },\n      /*'explicit-implementation': {\n// int IFoo<Foo>.Bar => 0; void IFoo<Foo<Foo>>.Foo<T>();\npattern: replace(/\\b<<0>>(?=\\.<<1>>)/, className, methodOrPropertyDeclaration),\ninside: classNameInside,\nalias: 'class-name'\n},*/\n      'generic-method': {\n        // foo<Bar>()\n        pattern: re(/<<0>>\\s*<<1>>(?=\\s*\\()/.source, [name, generic]),\n        inside: {\n          function: re(/^<<0>>/.source, [name]),\n          generic: {\n            pattern: RegExp(generic),\n            alias: 'class-name',\n            inside: typeInside\n          }\n        }\n      },\n      'type-list': {\n        // The list of types inherited or of generic constraints\n        // class Foo<F> : Bar, IList<FooBar>\n        // where F : Bar, IList<int>\n        pattern: re(\n          /\\b((?:<<0>>\\s+<<1>>|record\\s+<<1>>\\s*<<5>>|where\\s+<<2>>)\\s*:\\s*)(?:<<3>>|<<4>>|<<1>>\\s*<<5>>|<<6>>)(?:\\s*,\\s*(?:<<3>>|<<4>>|<<6>>))*(?=\\s*(?:where|[{;]|=>|$))/\n            .source,\n          [\n            typeDeclarationKeywords,\n            genericName,\n            name,\n            typeExpression,\n            keywords.source,\n            nestedRound,\n            /\\bnew\\s*\\(\\s*\\)/.source\n          ]\n        ),\n        lookbehind: true,\n        inside: {\n          'record-arguments': {\n            pattern: re(/(^(?!new\\s*\\()<<0>>\\s*)<<1>>/.source, [\n              genericName,\n              nestedRound\n            ]),\n            lookbehind: true,\n            greedy: true,\n            inside: Prism.languages.csharp\n          },\n          keyword: keywords,\n          'class-name': {\n            pattern: RegExp(typeExpression),\n            greedy: true,\n            inside: typeInside\n          },\n          punctuation: /[,()]/\n        }\n      },\n      preprocessor: {\n        pattern: /(^[\\t ]*)#.*/m,\n        lookbehind: true,\n        alias: 'property',\n        inside: {\n          // highlight preprocessor directives as keywords\n          directive: {\n            pattern:\n              /(#)\\b(?:define|elif|else|endif|endregion|error|if|line|nullable|pragma|region|undef|warning)\\b/,\n            lookbehind: true,\n            alias: 'keyword'\n          }\n        }\n      }\n    }) // attributes\n    var regularStringOrCharacter = regularString + '|' + character\n    var regularStringCharacterOrComment = replace(\n      /\\/(?![*/])|\\/\\/[^\\r\\n]*[\\r\\n]|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|<<0>>/.source,\n      [regularStringOrCharacter]\n    )\n    var roundExpression = nested(\n      replace(/[^\"'/()]|<<0>>|\\(<<self>>*\\)/.source, [\n        regularStringCharacterOrComment\n      ]),\n      2\n    ) // https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/attributes/#attribute-targets\n    var attrTarget =\n      /\\b(?:assembly|event|field|method|module|param|property|return|type)\\b/\n        .source\n    var attr = replace(/<<0>>(?:\\s*\\(<<1>>*\\))?/.source, [\n      identifier,\n      roundExpression\n    ])\n    Prism.languages.insertBefore('csharp', 'class-name', {\n      attribute: {\n        // Attributes\n        // [Foo], [Foo(1), Bar(2, Prop = \"foo\")], [return: Foo(1), Bar(2)], [assembly: Foo(Bar)]\n        pattern: re(\n          /((?:^|[^\\s\\w>)?])\\s*\\[\\s*)(?:<<0>>\\s*:\\s*)?<<1>>(?:\\s*,\\s*<<1>>)*(?=\\s*\\])/\n            .source,\n          [attrTarget, attr]\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          target: {\n            pattern: re(/^<<0>>(?=\\s*:)/.source, [attrTarget]),\n            alias: 'keyword'\n          },\n          'attribute-arguments': {\n            pattern: re(/\\(<<0>>*\\)/.source, [roundExpression]),\n            inside: Prism.languages.csharp\n          },\n          'class-name': {\n            pattern: RegExp(identifier),\n            inside: {\n              punctuation: /\\./\n            }\n          },\n          punctuation: /[:,]/\n        }\n      }\n    }) // string interpolation\n    var formatString = /:[^}\\r\\n]+/.source // multi line\n    var mInterpolationRound = nested(\n      replace(/[^\"'/()]|<<0>>|\\(<<self>>*\\)/.source, [\n        regularStringCharacterOrComment\n      ]),\n      2\n    )\n    var mInterpolation = replace(/\\{(?!\\{)(?:(?![}:])<<0>>)*<<1>>?\\}/.source, [\n      mInterpolationRound,\n      formatString\n    ]) // single line\n    var sInterpolationRound = nested(\n      replace(\n        /[^\"'/()]|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|<<0>>|\\(<<self>>*\\)/\n          .source,\n        [regularStringOrCharacter]\n      ),\n      2\n    )\n    var sInterpolation = replace(/\\{(?!\\{)(?:(?![}:])<<0>>)*<<1>>?\\}/.source, [\n      sInterpolationRound,\n      formatString\n    ])\n    function createInterpolationInside(interpolation, interpolationRound) {\n      return {\n        interpolation: {\n          pattern: re(/((?:^|[^{])(?:\\{\\{)*)<<0>>/.source, [interpolation]),\n          lookbehind: true,\n          inside: {\n            'format-string': {\n              pattern: re(/(^\\{(?:(?![}:])<<0>>)*)<<1>>(?=\\}$)/.source, [\n                interpolationRound,\n                formatString\n              ]),\n              lookbehind: true,\n              inside: {\n                punctuation: /^:/\n              }\n            },\n            punctuation: /^\\{|\\}$/,\n            expression: {\n              pattern: /[\\s\\S]+/,\n              alias: 'language-csharp',\n              inside: Prism.languages.csharp\n            }\n          }\n        },\n        string: /[\\s\\S]+/\n      }\n    }\n    Prism.languages.insertBefore('csharp', 'string', {\n      'interpolation-string': [\n        {\n          pattern: re(\n            /(^|[^\\\\])(?:\\$@|@\\$)\"(?:\"\"|\\\\[\\s\\S]|\\{\\{|<<0>>|[^\\\\{\"])*\"/.source,\n            [mInterpolation]\n          ),\n          lookbehind: true,\n          greedy: true,\n          inside: createInterpolationInside(mInterpolation, mInterpolationRound)\n        },\n        {\n          pattern: re(/(^|[^@\\\\])\\$\"(?:\\\\.|\\{\\{|<<0>>|[^\\\\\"{])*\"/.source, [\n            sInterpolation\n          ]),\n          lookbehind: true,\n          greedy: true,\n          inside: createInterpolationInside(sInterpolation, sInterpolationRound)\n        }\n      ],\n      char: {\n        pattern: RegExp(character),\n        greedy: true\n      }\n    })\n    Prism.languages.dotnet = Prism.languages.cs = Prism.languages.csharp\n  })(Prism)\n}\n","'use strict'\nvar refractorCsharp = require('./csharp.js')\nmodule.exports = cshtml\ncshtml.displayName = 'cshtml'\ncshtml.aliases = ['razor']\nfunction cshtml(Prism) {\n  Prism.register(refractorCsharp)\n  // Docs:\n  // https://docs.microsoft.com/en-us/aspnet/core/razor-pages/?view=aspnetcore-5.0&tabs=visual-studio\n  // https://docs.microsoft.com/en-us/aspnet/core/mvc/views/razor?view=aspnetcore-5.0\n  ;(function (Prism) {\n    var commentLike = /\\/(?![/*])|\\/\\/.*[\\r\\n]|\\/\\*[^*]*(?:\\*(?!\\/)[^*]*)*\\*\\//\n      .source\n    var stringLike =\n      /@(?!\")|\"(?:[^\\r\\n\\\\\"]|\\\\.)*\"|@\"(?:[^\\\\\"]|\"\"|\\\\[\\s\\S])*\"(?!\")/.source +\n      '|' +\n      /'(?:(?:[^\\r\\n'\\\\]|\\\\.|\\\\[Uux][\\da-fA-F]{1,8})'|(?=[^\\\\](?!')))/.source\n    /**\n     * Creates a nested pattern where all occurrences of the string `<<self>>` are replaced with the pattern itself.\n     *\n     * @param {string} pattern\n     * @param {number} depthLog2\n     * @returns {string}\n     */\n    function nested(pattern, depthLog2) {\n      for (var i = 0; i < depthLog2; i++) {\n        pattern = pattern.replace(/<self>/g, function () {\n          return '(?:' + pattern + ')'\n        })\n      }\n      return pattern\n        .replace(/<self>/g, '[^\\\\s\\\\S]')\n        .replace(/<str>/g, '(?:' + stringLike + ')')\n        .replace(/<comment>/g, '(?:' + commentLike + ')')\n    }\n    var round = nested(/\\((?:[^()'\"@/]|<str>|<comment>|<self>)*\\)/.source, 2)\n    var square = nested(/\\[(?:[^\\[\\]'\"@/]|<str>|<comment>|<self>)*\\]/.source, 2)\n    var curly = nested(/\\{(?:[^{}'\"@/]|<str>|<comment>|<self>)*\\}/.source, 2)\n    var angle = nested(/<(?:[^<>'\"@/]|<str>|<comment>|<self>)*>/.source, 2) // Note about the above bracket patterns:\n    // They all ignore HTML expressions that might be in the C# code. This is a problem because HTML (like strings and\n    // comments) is parsed differently. This is a huge problem because HTML might contain brackets and quotes which\n    // messes up the bracket and string counting implemented by the above patterns.\n    //\n    // This problem is not fixable because 1) HTML expression are highly context sensitive and very difficult to detect\n    // and 2) they require one capturing group at every nested level. See the `tagRegion` pattern to admire the\n    // complexity of an HTML expression.\n    //\n    // To somewhat alleviate the problem a bit, the patterns for characters (e.g. 'a') is very permissive, it also\n    // allows invalid characters to support HTML expressions like this: <p>That's it!</p>.\n    var tagAttrs =\n      /(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?/\n        .source\n    var tagContent = /(?!\\d)[^\\s>\\/=$<%]+/.source + tagAttrs + /\\s*\\/?>/.source\n    var tagRegion =\n      /\\B@?/.source +\n      '(?:' +\n      /<([a-zA-Z][\\w:]*)/.source +\n      tagAttrs +\n      /\\s*>/.source +\n      '(?:' +\n      (/[^<]/.source +\n        '|' + // all tags that are not the start tag\n        // eslint-disable-next-line regexp/strict\n        /<\\/?(?!\\1\\b)/.source +\n        tagContent +\n        '|' + // nested start tag\n        nested(\n          // eslint-disable-next-line regexp/strict\n          /<\\1/.source +\n            tagAttrs +\n            /\\s*>/.source +\n            '(?:' +\n            (/[^<]/.source +\n              '|' + // all tags that are not the start tag\n              // eslint-disable-next-line regexp/strict\n              /<\\/?(?!\\1\\b)/.source +\n              tagContent +\n              '|' +\n              '<self>') +\n            ')*' + // eslint-disable-next-line regexp/strict\n            /<\\/\\1\\s*>/.source,\n          2\n        )) +\n      ')*' + // eslint-disable-next-line regexp/strict\n      /<\\/\\1\\s*>/.source +\n      '|' +\n      /</.source +\n      tagContent +\n      ')' // Now for the actual language definition(s):\n    //\n    // Razor as a language has 2 parts:\n    //  1) CSHTML: A markup-like language that has been extended with inline C# code expressions and blocks.\n    //  2) C#+HTML: A variant of C# that can contain CSHTML tags as expressions.\n    //\n    // In the below code, both CSHTML and C#+HTML will be create as separate language definitions that reference each\n    // other. However, only CSHTML will be exported via `Prism.languages`.\n    Prism.languages.cshtml = Prism.languages.extend('markup', {})\n    var csharpWithHtml = Prism.languages.insertBefore(\n      'csharp',\n      'string',\n      {\n        html: {\n          pattern: RegExp(tagRegion),\n          greedy: true,\n          inside: Prism.languages.cshtml\n        }\n      },\n      {\n        csharp: Prism.languages.extend('csharp', {})\n      }\n    )\n    var cs = {\n      pattern: /\\S[\\s\\S]*/,\n      alias: 'language-csharp',\n      inside: csharpWithHtml\n    }\n    Prism.languages.insertBefore('cshtml', 'prolog', {\n      'razor-comment': {\n        pattern: /@\\*[\\s\\S]*?\\*@/,\n        greedy: true,\n        alias: 'comment'\n      },\n      block: {\n        pattern: RegExp(\n          /(^|[^@])@/.source +\n            '(?:' +\n            [\n              // @{ ... }\n              curly, // @code{ ... }\n              /(?:code|functions)\\s*/.source + curly, // @for (...) { ... }\n              /(?:for|foreach|lock|switch|using|while)\\s*/.source +\n                round +\n                /\\s*/.source +\n                curly, // @do { ... } while (...);\n              /do\\s*/.source +\n                curly +\n                /\\s*while\\s*/.source +\n                round +\n                /(?:\\s*;)?/.source, // @try { ... } catch (...) { ... } finally { ... }\n              /try\\s*/.source +\n                curly +\n                /\\s*catch\\s*/.source +\n                round +\n                /\\s*/.source +\n                curly +\n                /\\s*finally\\s*/.source +\n                curly, // @if (...) {...} else if (...) {...} else {...}\n              /if\\s*/.source +\n                round +\n                /\\s*/.source +\n                curly +\n                '(?:' +\n                /\\s*else/.source +\n                '(?:' +\n                /\\s+if\\s*/.source +\n                round +\n                ')?' +\n                /\\s*/.source +\n                curly +\n                ')*'\n            ].join('|') +\n            ')'\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          keyword: /^@\\w*/,\n          csharp: cs\n        }\n      },\n      directive: {\n        pattern:\n          /^([ \\t]*)@(?:addTagHelper|attribute|implements|inherits|inject|layout|model|namespace|page|preservewhitespace|removeTagHelper|section|tagHelperPrefix|using)(?=\\s).*/m,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          keyword: /^@\\w+/,\n          csharp: cs\n        }\n      },\n      value: {\n        pattern: RegExp(\n          /(^|[^@])@/.source +\n            /(?:await\\b\\s*)?/.source +\n            '(?:' +\n            /\\w+\\b/.source +\n            '|' +\n            round +\n            ')' +\n            '(?:' +\n            /[?!]?\\.\\w+\\b/.source +\n            '|' +\n            round +\n            '|' +\n            square +\n            '|' +\n            angle +\n            round +\n            ')*'\n        ),\n        lookbehind: true,\n        greedy: true,\n        alias: 'variable',\n        inside: {\n          keyword: /^@/,\n          csharp: cs\n        }\n      },\n      'delegate-operator': {\n        pattern: /(^|[^@])@(?=<)/,\n        lookbehind: true,\n        alias: 'operator'\n      }\n    })\n    Prism.languages.razor = Prism.languages.cshtml\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = csp\ncsp.displayName = 'csp'\ncsp.aliases = []\nfunction csp(Prism) {\n  /**\n   * Original by Scott Helme.\n   *\n   * Reference: https://scotthelme.co.uk/csp-cheat-sheet/\n   *\n   * Supports the following:\n   *  - https://www.w3.org/TR/CSP1/\n   *  - https://www.w3.org/TR/CSP2/\n   *  - https://www.w3.org/TR/CSP3/\n   */\n  ;(function (Prism) {\n    /**\n     * @param {string} source\n     * @returns {RegExp}\n     */\n    function value(source) {\n      return RegExp(\n        /([ \\t])/.source + '(?:' + source + ')' + /(?=[\\s;]|$)/.source,\n        'i'\n      )\n    }\n    Prism.languages.csp = {\n      directive: {\n        pattern:\n          /(^|[\\s;])(?:base-uri|block-all-mixed-content|(?:child|connect|default|font|frame|img|manifest|media|object|prefetch|script|style|worker)-src|disown-opener|form-action|frame-(?:ancestors|options)|input-protection(?:-(?:clip|selectors))?|navigate-to|plugin-types|policy-uri|referrer|reflected-xss|report-(?:to|uri)|require-sri-for|sandbox|(?:script|style)-src-(?:attr|elem)|upgrade-insecure-requests)(?=[\\s;]|$)/i,\n        lookbehind: true,\n        alias: 'property'\n      },\n      scheme: {\n        pattern: value(/[a-z][a-z0-9.+-]*:/.source),\n        lookbehind: true\n      },\n      none: {\n        pattern: value(/'none'/.source),\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      nonce: {\n        pattern: value(/'nonce-[-+/\\w=]+'/.source),\n        lookbehind: true,\n        alias: 'number'\n      },\n      hash: {\n        pattern: value(/'sha(?:256|384|512)-[-+/\\w=]+'/.source),\n        lookbehind: true,\n        alias: 'number'\n      },\n      host: {\n        pattern: value(\n          /[a-z][a-z0-9.+-]*:\\/\\/[^\\s;,']*/.source +\n            '|' +\n            /\\*[^\\s;,']*/.source +\n            '|' +\n            /[a-z0-9-]+(?:\\.[a-z0-9-]+)+(?::[\\d*]+)?(?:\\/[^\\s;,']*)?/.source\n        ),\n        lookbehind: true,\n        alias: 'url',\n        inside: {\n          important: /\\*/\n        }\n      },\n      keyword: [\n        {\n          pattern: value(/'unsafe-[a-z-]+'/.source),\n          lookbehind: true,\n          alias: 'unsafe'\n        },\n        {\n          pattern: value(/'[a-z-]+'/.source),\n          lookbehind: true,\n          alias: 'safe'\n        }\n      ],\n      punctuation: /;/\n    }\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = cssExtras\ncssExtras.displayName = 'cssExtras'\ncssExtras.aliases = []\nfunction cssExtras(Prism) {\n  ;(function (Prism) {\n    var string = /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/\n    var selectorInside\n    Prism.languages.css.selector = {\n      pattern: Prism.languages.css.selector.pattern,\n      lookbehind: true,\n      inside: (selectorInside = {\n        'pseudo-element':\n          /:(?:after|before|first-letter|first-line|selection)|::[-\\w]+/,\n        'pseudo-class': /:[-\\w]+/,\n        class: /\\.[-\\w]+/,\n        id: /#[-\\w]+/,\n        attribute: {\n          pattern: RegExp('\\\\[(?:[^[\\\\]\"\\']|' + string.source + ')*\\\\]'),\n          greedy: true,\n          inside: {\n            punctuation: /^\\[|\\]$/,\n            'case-sensitivity': {\n              pattern: /(\\s)[si]$/i,\n              lookbehind: true,\n              alias: 'keyword'\n            },\n            namespace: {\n              pattern: /^(\\s*)(?:(?!\\s)[-*\\w\\xA0-\\uFFFF])*\\|(?!=)/,\n              lookbehind: true,\n              inside: {\n                punctuation: /\\|$/\n              }\n            },\n            'attr-name': {\n              pattern: /^(\\s*)(?:(?!\\s)[-\\w\\xA0-\\uFFFF])+/,\n              lookbehind: true\n            },\n            'attr-value': [\n              string,\n              {\n                pattern: /(=\\s*)(?:(?!\\s)[-\\w\\xA0-\\uFFFF])+(?=\\s*$)/,\n                lookbehind: true\n              }\n            ],\n            operator: /[|~*^$]?=/\n          }\n        },\n        'n-th': [\n          {\n            pattern: /(\\(\\s*)[+-]?\\d*[\\dn](?:\\s*[+-]\\s*\\d+)?(?=\\s*\\))/,\n            lookbehind: true,\n            inside: {\n              number: /[\\dn]+/,\n              operator: /[+-]/\n            }\n          },\n          {\n            pattern: /(\\(\\s*)(?:even|odd)(?=\\s*\\))/i,\n            lookbehind: true\n          }\n        ],\n        combinator: />|\\+|~|\\|\\|/,\n        // the `tag` token has been existed and removed.\n        // because we can't find a perfect tokenize to match it.\n        // if you want to add it, please read https://github.com/PrismJS/prism/pull/2373 first.\n        punctuation: /[(),]/\n      })\n    }\n    Prism.languages.css['atrule'].inside['selector-function-argument'].inside =\n      selectorInside\n    Prism.languages.insertBefore('css', 'property', {\n      variable: {\n        pattern:\n          /(^|[^-\\w\\xA0-\\uFFFF])--(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*/i,\n        lookbehind: true\n      }\n    })\n    var unit = {\n      pattern: /(\\b\\d+)(?:%|[a-z]+(?![\\w-]))/,\n      lookbehind: true\n    } // 123 -123 .123 -.123 12.3 -12.3\n    var number = {\n      pattern: /(^|[^\\w.-])-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/,\n      lookbehind: true\n    }\n    Prism.languages.insertBefore('css', 'function', {\n      operator: {\n        pattern: /(\\s)[+\\-*\\/](?=\\s)/,\n        lookbehind: true\n      },\n      // CAREFUL!\n      // Previewers and Inline color use hexcode and color.\n      hexcode: {\n        pattern: /\\B#[\\da-f]{3,8}\\b/i,\n        alias: 'color'\n      },\n      color: [\n        {\n          pattern:\n            /(^|[^\\w-])(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)(?![\\w-])/i,\n          lookbehind: true\n        },\n        {\n          pattern:\n            /\\b(?:hsl|rgb)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:hsl|rgb)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B/i,\n          inside: {\n            unit: unit,\n            number: number,\n            function: /[\\w-]+(?=\\()/,\n            punctuation: /[(),]/\n          }\n        }\n      ],\n      // it's important that there is no boundary assertion after the hex digits\n      entity: /\\\\[\\da-f]{1,8}/i,\n      unit: unit,\n      number: number\n    })\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = css\ncss.displayName = 'css'\ncss.aliases = []\nfunction css(Prism) {\n  ;(function (Prism) {\n    var string =\n      /(?:\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n])*')/\n    Prism.languages.css = {\n      comment: /\\/\\*[\\s\\S]*?\\*\\//,\n      atrule: {\n        pattern: /@[\\w-](?:[^;{\\s]|\\s+(?![\\s{]))*(?:;|(?=\\s*\\{))/,\n        inside: {\n          rule: /^@[\\w-]+/,\n          'selector-function-argument': {\n            pattern:\n              /(\\bselector\\s*\\(\\s*(?![\\s)]))(?:[^()\\s]|\\s+(?![\\s)])|\\((?:[^()]|\\([^()]*\\))*\\))+(?=\\s*\\))/,\n            lookbehind: true,\n            alias: 'selector'\n          },\n          keyword: {\n            pattern: /(^|[^\\w-])(?:and|not|only|or)(?![\\w-])/,\n            lookbehind: true\n          } // See rest below\n        }\n      },\n      url: {\n        // https://drafts.csswg.org/css-values-3/#urls\n        pattern: RegExp(\n          '\\\\burl\\\\((?:' +\n            string.source +\n            '|' +\n            /(?:[^\\\\\\r\\n()\"']|\\\\[\\s\\S])*/.source +\n            ')\\\\)',\n          'i'\n        ),\n        greedy: true,\n        inside: {\n          function: /^url/i,\n          punctuation: /^\\(|\\)$/,\n          string: {\n            pattern: RegExp('^' + string.source + '$'),\n            alias: 'url'\n          }\n        }\n      },\n      selector: {\n        pattern: RegExp(\n          '(^|[{}\\\\s])[^{}\\\\s](?:[^{};\"\\'\\\\s]|\\\\s+(?![\\\\s{])|' +\n            string.source +\n            ')*(?=\\\\s*\\\\{)'\n        ),\n        lookbehind: true\n      },\n      string: {\n        pattern: string,\n        greedy: true\n      },\n      property: {\n        pattern:\n          /(^|[^-\\w\\xA0-\\uFFFF])(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*(?=\\s*:)/i,\n        lookbehind: true\n      },\n      important: /!important\\b/i,\n      function: {\n        pattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\\()/i,\n        lookbehind: true\n      },\n      punctuation: /[(){};:,]/\n    }\n    Prism.languages.css['atrule'].inside.rest = Prism.languages.css\n    var markup = Prism.languages.markup\n    if (markup) {\n      markup.tag.addInlined('style', 'css')\n      markup.tag.addAttribute('style', 'css')\n    }\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = csv\ncsv.displayName = 'csv'\ncsv.aliases = []\nfunction csv(Prism) {\n  // https://tools.ietf.org/html/rfc4180\n  Prism.languages.csv = {\n    value: /[^\\r\\n,\"]+|\"(?:[^\"]|\"\")*\"(?!\")/,\n    punctuation: /,/\n  }\n}\n","'use strict'\n\nmodule.exports = cypher\ncypher.displayName = 'cypher'\ncypher.aliases = []\nfunction cypher(Prism) {\n  Prism.languages.cypher = {\n    // https://neo4j.com/docs/cypher-manual/current/syntax/comments/\n    comment: /\\/\\/.*/,\n    string: {\n      pattern: /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?:[^'\\\\\\r\\n]|\\\\.)*'/,\n      greedy: true\n    },\n    'class-name': {\n      pattern: /(:\\s*)(?:\\w+|`(?:[^`\\\\\\r\\n])*`)(?=\\s*[{):])/,\n      lookbehind: true,\n      greedy: true\n    },\n    relationship: {\n      pattern:\n        /(-\\[\\s*(?:\\w+\\s*|`(?:[^`\\\\\\r\\n])*`\\s*)?:\\s*|\\|\\s*:\\s*)(?:\\w+|`(?:[^`\\\\\\r\\n])*`)/,\n      lookbehind: true,\n      greedy: true,\n      alias: 'property'\n    },\n    identifier: {\n      pattern: /`(?:[^`\\\\\\r\\n])*`/,\n      greedy: true\n    },\n    variable: /\\$\\w+/,\n    // https://neo4j.com/docs/cypher-manual/current/syntax/reserved/\n    keyword:\n      /\\b(?:ADD|ALL|AND|AS|ASC|ASCENDING|ASSERT|BY|CALL|CASE|COMMIT|CONSTRAINT|CONTAINS|CREATE|CSV|DELETE|DESC|DESCENDING|DETACH|DISTINCT|DO|DROP|ELSE|END|ENDS|EXISTS|FOR|FOREACH|IN|INDEX|IS|JOIN|KEY|LIMIT|LOAD|MANDATORY|MATCH|MERGE|NODE|NOT|OF|ON|OPTIONAL|OR|ORDER(?=\\s+BY)|PERIODIC|REMOVE|REQUIRE|RETURN|SCALAR|SCAN|SET|SKIP|START|STARTS|THEN|UNION|UNIQUE|UNWIND|USING|WHEN|WHERE|WITH|XOR|YIELD)\\b/i,\n    function: /\\b\\w+\\b(?=\\s*\\()/,\n    boolean: /\\b(?:false|null|true)\\b/i,\n    number: /\\b(?:0x[\\da-fA-F]+|\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?)\\b/,\n    // https://neo4j.com/docs/cypher-manual/current/syntax/operators/\n    operator: /:|<--?|--?>?|<>|=~?|[<>]=?|[+*/%^|]|\\.\\.\\.?/,\n    punctuation: /[()[\\]{},;.]/\n  }\n}\n","'use strict'\n\nmodule.exports = d\nd.displayName = 'd'\nd.aliases = []\nfunction d(Prism) {\n  Prism.languages.d = Prism.languages.extend('clike', {\n    comment: [\n      {\n        // Shebang\n        pattern: /^\\s*#!.+/,\n        greedy: true\n      },\n      {\n        pattern: RegExp(\n          /(^|[^\\\\])/.source +\n            '(?:' +\n            [\n              // /+ comment +/\n              // Allow one level of nesting\n              /\\/\\+(?:\\/\\+(?:[^+]|\\+(?!\\/))*\\+\\/|(?!\\/\\+)[\\s\\S])*?\\+\\//.source, // // comment\n              /\\/\\/.*/.source, // /* comment */\n              /\\/\\*[\\s\\S]*?\\*\\//.source\n            ].join('|') +\n            ')'\n        ),\n        lookbehind: true,\n        greedy: true\n      }\n    ],\n    string: [\n      {\n        pattern: RegExp(\n          [\n            // r\"\", x\"\"\n            /\\b[rx]\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"[cwd]?/.source, // q\"[]\", q\"()\", q\"<>\", q\"{}\"\n            /\\bq\"(?:\\[[\\s\\S]*?\\]|\\([\\s\\S]*?\\)|<[\\s\\S]*?>|\\{[\\s\\S]*?\\})\"/.source, // q\"IDENT\n            // ...\n            // IDENT\"\n            /\\bq\"((?!\\d)\\w+)$[\\s\\S]*?^\\1\"/.source, // q\"//\", q\"||\", etc.\n            // eslint-disable-next-line regexp/strict\n            /\\bq\"(.)[\\s\\S]*?\\2\"/.source, // eslint-disable-next-line regexp/strict\n            /([\"`])(?:\\\\[\\s\\S]|(?!\\3)[^\\\\])*\\3[cwd]?/.source\n          ].join('|'),\n          'm'\n        ),\n        greedy: true\n      },\n      {\n        pattern: /\\bq\\{(?:\\{[^{}]*\\}|[^{}])*\\}/,\n        greedy: true,\n        alias: 'token-string'\n      }\n    ],\n    // In order: $, keywords and special tokens, globally defined symbols\n    keyword:\n      /\\$|\\b(?:__(?:(?:DATE|EOF|FILE|FUNCTION|LINE|MODULE|PRETTY_FUNCTION|TIMESTAMP|TIME|VENDOR|VERSION)__|gshared|parameters|traits|vector)|abstract|alias|align|asm|assert|auto|body|bool|break|byte|case|cast|catch|cdouble|cent|cfloat|char|class|const|continue|creal|dchar|debug|default|delegate|delete|deprecated|do|double|dstring|else|enum|export|extern|false|final|finally|float|for|foreach|foreach_reverse|function|goto|idouble|if|ifloat|immutable|import|inout|int|interface|invariant|ireal|lazy|long|macro|mixin|module|new|nothrow|null|out|override|package|pragma|private|protected|ptrdiff_t|public|pure|real|ref|return|scope|shared|short|size_t|static|string|struct|super|switch|synchronized|template|this|throw|true|try|typedef|typeid|typeof|ubyte|ucent|uint|ulong|union|unittest|ushort|version|void|volatile|wchar|while|with|wstring)\\b/,\n    number: [\n      // The lookbehind and the negative look-ahead try to prevent bad highlighting of the .. operator\n      // Hexadecimal numbers must be handled separately to avoid problems with exponent \"e\"\n      /\\b0x\\.?[a-f\\d_]+(?:(?!\\.\\.)\\.[a-f\\d_]*)?(?:p[+-]?[a-f\\d_]+)?[ulfi]{0,4}/i,\n      {\n        pattern:\n          /((?:\\.\\.)?)(?:\\b0b\\.?|\\b|\\.)\\d[\\d_]*(?:(?!\\.\\.)\\.[\\d_]*)?(?:e[+-]?\\d[\\d_]*)?[ulfi]{0,4}/i,\n        lookbehind: true\n      }\n    ],\n    operator:\n      /\\|[|=]?|&[&=]?|\\+[+=]?|-[-=]?|\\.?\\.\\.|=[>=]?|!(?:i[ns]\\b|<>?=?|>=?|=)?|\\bi[ns]\\b|(?:<[<>]?|>>?>?|\\^\\^|[*\\/%^~])=?/\n  })\n  Prism.languages.insertBefore('d', 'string', {\n    // Characters\n    // 'a', '\\\\', '\\n', '\\xFF', '\\377', '\\uFFFF', '\\U0010FFFF', '\\quot'\n    char: /'(?:\\\\(?:\\W|\\w+)|[^\\\\])'/\n  })\n  Prism.languages.insertBefore('d', 'keyword', {\n    property: /\\B@\\w*/\n  })\n  Prism.languages.insertBefore('d', 'function', {\n    register: {\n      // Iasm registers\n      pattern:\n        /\\b(?:[ABCD][LHX]|E?(?:BP|DI|SI|SP)|[BS]PL|[ECSDGF]S|CR[0234]|[DS]IL|DR[012367]|E[ABCD]X|X?MM[0-7]|R(?:1[0-5]|[89])[BWD]?|R[ABCD]X|R[BS]P|R[DS]I|TR[3-7]|XMM(?:1[0-5]|[89])|YMM(?:1[0-5]|\\d))\\b|\\bST(?:\\([0-7]\\)|\\b)/,\n      alias: 'variable'\n    }\n  })\n}\n","'use strict'\n\nmodule.exports = dart\ndart.displayName = 'dart'\ndart.aliases = []\nfunction dart(Prism) {\n  ;(function (Prism) {\n    var keywords = [\n      /\\b(?:async|sync|yield)\\*/,\n      /\\b(?:abstract|assert|async|await|break|case|catch|class|const|continue|covariant|default|deferred|do|dynamic|else|enum|export|extends|extension|external|factory|final|finally|for|get|hide|if|implements|import|in|interface|library|mixin|new|null|on|operator|part|rethrow|return|set|show|static|super|switch|sync|this|throw|try|typedef|var|void|while|with|yield)\\b/\n    ] // Handles named imports, such as http.Client\n    var packagePrefix = /(^|[^\\w.])(?:[a-z]\\w*\\s*\\.\\s*)*(?:[A-Z]\\w*\\s*\\.\\s*)*/\n      .source // based on the dart naming conventions\n    var className = {\n      pattern: RegExp(packagePrefix + /[A-Z](?:[\\d_A-Z]*[a-z]\\w*)?\\b/.source),\n      lookbehind: true,\n      inside: {\n        namespace: {\n          pattern: /^[a-z]\\w*(?:\\s*\\.\\s*[a-z]\\w*)*(?:\\s*\\.)?/,\n          inside: {\n            punctuation: /\\./\n          }\n        }\n      }\n    }\n    Prism.languages.dart = Prism.languages.extend('clike', {\n      'class-name': [\n        className,\n        {\n          // variables and parameters\n          // this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n          pattern: RegExp(\n            packagePrefix + /[A-Z]\\w*(?=\\s+\\w+\\s*[;,=()])/.source\n          ),\n          lookbehind: true,\n          inside: className.inside\n        }\n      ],\n      keyword: keywords,\n      operator:\n        /\\bis!|\\b(?:as|is)\\b|\\+\\+|--|&&|\\|\\||<<=?|>>=?|~(?:\\/=?)?|[+\\-*\\/%&^|=!<>]=?|\\?/\n    })\n    Prism.languages.insertBefore('dart', 'string', {\n      'string-literal': {\n        pattern:\n          /r?(?:(\"\"\"|''')[\\s\\S]*?\\1|([\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2(?!\\2))/,\n        greedy: true,\n        inside: {\n          interpolation: {\n            pattern:\n              /((?:^|[^\\\\])(?:\\\\{2})*)\\$(?:\\w+|\\{(?:[^{}]|\\{[^{}]*\\})*\\})/,\n            lookbehind: true,\n            inside: {\n              punctuation: /^\\$\\{?|\\}$/,\n              expression: {\n                pattern: /[\\s\\S]+/,\n                inside: Prism.languages.dart\n              }\n            }\n          },\n          string: /[\\s\\S]+/\n        }\n      },\n      string: undefined\n    })\n    Prism.languages.insertBefore('dart', 'class-name', {\n      metadata: {\n        pattern: /@\\w+/,\n        alias: 'function'\n      }\n    })\n    Prism.languages.insertBefore('dart', 'class-name', {\n      generics: {\n        pattern:\n          /<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<[\\w\\s,.&?]*>)*>)*>)*>/,\n        inside: {\n          'class-name': className,\n          keyword: keywords,\n          punctuation: /[<>(),.:]/,\n          operator: /[?&|]/\n        }\n      }\n    })\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = dataweave\ndataweave.displayName = 'dataweave'\ndataweave.aliases = []\nfunction dataweave(Prism) {\n  ;(function (Prism) {\n    Prism.languages.dataweave = {\n      url: /\\b[A-Za-z]+:\\/\\/[\\w/:.?=&-]+|\\burn:[\\w:.?=&-]+/,\n      property: {\n        pattern: /(?:\\b\\w+#)?(?:\"(?:\\\\.|[^\\\\\"\\r\\n])*\"|\\b\\w+)(?=\\s*[:@])/,\n        greedy: true\n      },\n      string: {\n        pattern: /([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n        greedy: true\n      },\n      'mime-type':\n        /\\b(?:application|audio|image|multipart|text|video)\\/[\\w+-]+/,\n      date: {\n        pattern: /\\|[\\w:+-]+\\|/,\n        greedy: true\n      },\n      comment: [\n        {\n          pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n          lookbehind: true,\n          greedy: true\n        },\n        {\n          pattern: /(^|[^\\\\:])\\/\\/.*/,\n          lookbehind: true,\n          greedy: true\n        }\n      ],\n      regex: {\n        pattern: /\\/(?:[^\\\\\\/\\r\\n]|\\\\[^\\r\\n])+\\//,\n        greedy: true\n      },\n      keyword:\n        /\\b(?:and|as|at|case|do|else|fun|if|input|is|match|not|ns|null|or|output|type|unless|update|using|var)\\b/,\n      function: /\\b[A-Z_]\\w*(?=\\s*\\()/i,\n      number: /-?\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n      punctuation: /[{}[\\];(),.:@]/,\n      operator: /<<|>>|->|[<>~=]=?|!=|--?-?|\\+\\+?|!|\\?/,\n      boolean: /\\b(?:false|true)\\b/\n    }\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = dax\ndax.displayName = 'dax'\ndax.aliases = []\nfunction dax(Prism) {\n  Prism.languages.dax = {\n    comment: {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:--|\\/\\/).*)/,\n      lookbehind: true\n    },\n    'data-field': {\n      pattern:\n        /'(?:[^']|'')*'(?!')(?:\\[[ \\w\\xA0-\\uFFFF]+\\])?|\\w+\\[[ \\w\\xA0-\\uFFFF]+\\]/,\n      alias: 'symbol'\n    },\n    measure: {\n      pattern: /\\[[ \\w\\xA0-\\uFFFF]+\\]/,\n      alias: 'constant'\n    },\n    string: {\n      pattern: /\"(?:[^\"]|\"\")*\"(?!\")/,\n      greedy: true\n    },\n    function:\n      /\\b(?:ABS|ACOS|ACOSH|ACOT|ACOTH|ADDCOLUMNS|ADDMISSINGITEMS|ALL|ALLCROSSFILTERED|ALLEXCEPT|ALLNOBLANKROW|ALLSELECTED|AND|APPROXIMATEDISTINCTCOUNT|ASIN|ASINH|ATAN|ATANH|AVERAGE|AVERAGEA|AVERAGEX|BETA\\.DIST|BETA\\.INV|BLANK|CALCULATE|CALCULATETABLE|CALENDAR|CALENDARAUTO|CEILING|CHISQ\\.DIST|CHISQ\\.DIST\\.RT|CHISQ\\.INV|CHISQ\\.INV\\.RT|CLOSINGBALANCEMONTH|CLOSINGBALANCEQUARTER|CLOSINGBALANCEYEAR|COALESCE|COMBIN|COMBINA|COMBINEVALUES|CONCATENATE|CONCATENATEX|CONFIDENCE\\.NORM|CONFIDENCE\\.T|CONTAINS|CONTAINSROW|CONTAINSSTRING|CONTAINSSTRINGEXACT|CONVERT|COS|COSH|COT|COTH|COUNT|COUNTA|COUNTAX|COUNTBLANK|COUNTROWS|COUNTX|CROSSFILTER|CROSSJOIN|CURRENCY|CURRENTGROUP|CUSTOMDATA|DATATABLE|DATE|DATEADD|DATEDIFF|DATESBETWEEN|DATESINPERIOD|DATESMTD|DATESQTD|DATESYTD|DATEVALUE|DAY|DEGREES|DETAILROWS|DISTINCT|DISTINCTCOUNT|DISTINCTCOUNTNOBLANK|DIVIDE|EARLIER|EARLIEST|EDATE|ENDOFMONTH|ENDOFQUARTER|ENDOFYEAR|EOMONTH|ERROR|EVEN|EXACT|EXCEPT|EXP|EXPON\\.DIST|FACT|FALSE|FILTER|FILTERS|FIND|FIRSTDATE|FIRSTNONBLANK|FIRSTNONBLANKVALUE|FIXED|FLOOR|FORMAT|GCD|GENERATE|GENERATEALL|GENERATESERIES|GEOMEAN|GEOMEANX|GROUPBY|HASONEFILTER|HASONEVALUE|HOUR|IF|IF\\.EAGER|IFERROR|IGNORE|INT|INTERSECT|ISBLANK|ISCROSSFILTERED|ISEMPTY|ISERROR|ISEVEN|ISFILTERED|ISINSCOPE|ISLOGICAL|ISNONTEXT|ISNUMBER|ISO\\.CEILING|ISODD|ISONORAFTER|ISSELECTEDMEASURE|ISSUBTOTAL|ISTEXT|KEEPFILTERS|KEYWORDMATCH|LASTDATE|LASTNONBLANK|LASTNONBLANKVALUE|LCM|LEFT|LEN|LN|LOG|LOG10|LOOKUPVALUE|LOWER|MAX|MAXA|MAXX|MEDIAN|MEDIANX|MID|MIN|MINA|MINUTE|MINX|MOD|MONTH|MROUND|NATURALINNERJOIN|NATURALLEFTOUTERJOIN|NEXTDAY|NEXTMONTH|NEXTQUARTER|NEXTYEAR|NONVISUAL|NORM\\.DIST|NORM\\.INV|NORM\\.S\\.DIST|NORM\\.S\\.INV|NOT|NOW|ODD|OPENINGBALANCEMONTH|OPENINGBALANCEQUARTER|OPENINGBALANCEYEAR|OR|PARALLELPERIOD|PATH|PATHCONTAINS|PATHITEM|PATHITEMREVERSE|PATHLENGTH|PERCENTILE\\.EXC|PERCENTILE\\.INC|PERCENTILEX\\.EXC|PERCENTILEX\\.INC|PERMUT|PI|POISSON\\.DIST|POWER|PREVIOUSDAY|PREVIOUSMONTH|PREVIOUSQUARTER|PREVIOUSYEAR|PRODUCT|PRODUCTX|QUARTER|QUOTIENT|RADIANS|RAND|RANDBETWEEN|RANK\\.EQ|RANKX|RELATED|RELATEDTABLE|REMOVEFILTERS|REPLACE|REPT|RIGHT|ROLLUP|ROLLUPADDISSUBTOTAL|ROLLUPGROUP|ROLLUPISSUBTOTAL|ROUND|ROUNDDOWN|ROUNDUP|ROW|SAMEPERIODLASTYEAR|SAMPLE|SEARCH|SECOND|SELECTCOLUMNS|SELECTEDMEASURE|SELECTEDMEASUREFORMATSTRING|SELECTEDMEASURENAME|SELECTEDVALUE|SIGN|SIN|SINH|SQRT|SQRTPI|STARTOFMONTH|STARTOFQUARTER|STARTOFYEAR|STDEV\\.P|STDEV\\.S|STDEVX\\.P|STDEVX\\.S|SUBSTITUTE|SUBSTITUTEWITHINDEX|SUM|SUMMARIZE|SUMMARIZECOLUMNS|SUMX|SWITCH|T\\.DIST|T\\.DIST\\.2T|T\\.DIST\\.RT|T\\.INV|T\\.INV\\.2T|TAN|TANH|TIME|TIMEVALUE|TODAY|TOPN|TOPNPERLEVEL|TOPNSKIP|TOTALMTD|TOTALQTD|TOTALYTD|TREATAS|TRIM|TRUE|TRUNC|UNICHAR|UNICODE|UNION|UPPER|USERELATIONSHIP|USERNAME|USEROBJECTID|USERPRINCIPALNAME|UTCNOW|UTCTODAY|VALUE|VALUES|VAR\\.P|VAR\\.S|VARX\\.P|VARX\\.S|WEEKDAY|WEEKNUM|XIRR|XNPV|YEAR|YEARFRAC)(?=\\s*\\()/i,\n    keyword:\n      /\\b(?:DEFINE|EVALUATE|MEASURE|ORDER\\s+BY|RETURN|VAR|START\\s+AT|ASC|DESC)\\b/i,\n    boolean: {\n      pattern: /\\b(?:FALSE|NULL|TRUE)\\b/i,\n      alias: 'constant'\n    },\n    number: /\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+\\b/,\n    operator: /:=|[-+*\\/=^]|&&?|\\|\\||<(?:=>?|<|>)?|>[>=]?|\\b(?:IN|NOT)\\b/i,\n    punctuation: /[;\\[\\](){}`,.]/\n  }\n}\n","'use strict'\n\nmodule.exports = dhall\ndhall.displayName = 'dhall'\ndhall.aliases = []\nfunction dhall(Prism) {\n  // ABNF grammar:\n  // https://github.com/dhall-lang/dhall-lang/blob/master/standard/dhall.abnf\n  Prism.languages.dhall = {\n    // Multi-line comments can be nested. E.g. {- foo {- bar -} -}\n    // The multi-line pattern is essentially this:\n    //   \\{-(?:[^-{]|-(?!\\})|\\{(?!-)|<SELF>)*-\\}\n    comment:\n      /--.*|\\{-(?:[^-{]|-(?!\\})|\\{(?!-)|\\{-(?:[^-{]|-(?!\\})|\\{(?!-))*-\\})*-\\}/,\n    string: {\n      pattern: /\"(?:[^\"\\\\]|\\\\.)*\"|''(?:[^']|'(?!')|'''|''\\$\\{)*''(?!'|\\$)/,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern: /\\$\\{[^{}]*\\}/,\n          inside: {\n            expression: {\n              pattern: /(^\\$\\{)[\\s\\S]+(?=\\}$)/,\n              lookbehind: true,\n              alias: 'language-dhall',\n              inside: null // see blow\n            },\n            punctuation: /\\$\\{|\\}/\n          }\n        }\n      }\n    },\n    label: {\n      pattern: /`[^`]*`/,\n      greedy: true\n    },\n    url: {\n      // https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L596\n      pattern:\n        /\\bhttps?:\\/\\/[\\w.:%!$&'*+;=@~-]+(?:\\/[\\w.:%!$&'*+;=@~-]*)*(?:\\?[/?\\w.:%!$&'*+;=@~-]*)?/,\n      greedy: true\n    },\n    env: {\n      // https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L661\n      pattern: /\\benv:(?:(?!\\d)\\w+|\"(?:[^\"\\\\=]|\\\\.)*\")/,\n      greedy: true,\n      inside: {\n        function: /^env/,\n        operator: /^:/,\n        variable: /[\\s\\S]+/\n      }\n    },\n    hash: {\n      // https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L725\n      pattern: /\\bsha256:[\\da-fA-F]{64}\\b/,\n      inside: {\n        function: /sha256/,\n        operator: /:/,\n        number: /[\\da-fA-F]{64}/\n      }\n    },\n    // https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L359\n    keyword:\n      /\\b(?:as|assert|else|forall|if|in|let|merge|missing|then|toMap|using|with)\\b|\\u2200/,\n    builtin: /\\b(?:None|Some)\\b/,\n    boolean: /\\b(?:False|True)\\b/,\n    number:\n      /\\bNaN\\b|-?\\bInfinity\\b|[+-]?\\b(?:0x[\\da-fA-F]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/,\n    operator:\n      /\\/\\\\|\\/\\/\\\\\\\\|&&|\\|\\||===|[!=]=|\\/\\/|->|\\+\\+|::|[+*#@=:?<>|\\\\\\u2227\\u2a53\\u2261\\u2afd\\u03bb\\u2192]/,\n    punctuation: /\\.\\.|[{}\\[\\](),./]/,\n    // we'll just assume that every capital word left is a type name\n    'class-name': /\\b[A-Z]\\w*\\b/\n  }\n  Prism.languages.dhall.string.inside.interpolation.inside.expression.inside =\n    Prism.languages.dhall\n}\n","'use strict'\n\nmodule.exports = diff\ndiff.displayName = 'diff'\ndiff.aliases = []\nfunction diff(Prism) {\n  ;(function (Prism) {\n    Prism.languages.diff = {\n      coord: [\n        // Match all kinds of coord lines (prefixed by \"+++\", \"---\" or \"***\").\n        /^(?:\\*{3}|-{3}|\\+{3}).*$/m, // Match \"@@ ... @@\" coord lines in unified diff.\n        /^@@.*@@$/m, // Match coord lines in normal diff (starts with a number).\n        /^\\d.*$/m\n      ] // deleted, inserted, unchanged, diff\n    }\n    /**\n     * A map from the name of a block to its line prefix.\n     *\n     * @type {Object<string, string>}\n     */\n    var PREFIXES = {\n      'deleted-sign': '-',\n      'deleted-arrow': '<',\n      'inserted-sign': '+',\n      'inserted-arrow': '>',\n      unchanged: ' ',\n      diff: '!'\n    } // add a token for each prefix\n    Object.keys(PREFIXES).forEach(function (name) {\n      var prefix = PREFIXES[name]\n      var alias = []\n      if (!/^\\w+$/.test(name)) {\n        // \"deleted-sign\" -> \"deleted\"\n        alias.push(/\\w+/.exec(name)[0])\n      }\n      if (name === 'diff') {\n        alias.push('bold')\n      }\n      Prism.languages.diff[name] = {\n        pattern: RegExp(\n          '^(?:[' + prefix + '].*(?:\\r\\n?|\\n|(?![\\\\s\\\\S])))+',\n          'm'\n        ),\n        alias: alias,\n        inside: {\n          line: {\n            pattern: /(.)(?=[\\s\\S]).*(?:\\r\\n?|\\n)?/,\n            lookbehind: true\n          },\n          prefix: {\n            pattern: /[\\s\\S]/,\n            alias: /\\w+/.exec(name)[0]\n          }\n        }\n      }\n    }) // make prefixes available to Diff plugin\n    Object.defineProperty(Prism.languages.diff, 'PREFIXES', {\n      value: PREFIXES\n    })\n  })(Prism)\n}\n","'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = django\ndjango.displayName = 'django'\ndjango.aliases = ['jinja2']\nfunction django(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  // Django/Jinja2 syntax definition for Prism.js <http://prismjs.com> syntax highlighter.\n  // Mostly it works OK but can paint code incorrectly on complex html/template tag combinations.\n  ;(function (Prism) {\n    Prism.languages.django = {\n      comment: /^\\{#[\\s\\S]*?#\\}$/,\n      tag: {\n        pattern: /(^\\{%[+-]?\\s*)\\w+/,\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      delimiter: {\n        pattern: /^\\{[{%][+-]?|[+-]?[}%]\\}$/,\n        alias: 'punctuation'\n      },\n      string: {\n        pattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: true\n      },\n      filter: {\n        pattern: /(\\|)\\w+/,\n        lookbehind: true,\n        alias: 'function'\n      },\n      test: {\n        pattern: /(\\bis\\s+(?:not\\s+)?)(?!not\\b)\\w+/,\n        lookbehind: true,\n        alias: 'function'\n      },\n      function: /\\b[a-z_]\\w+(?=\\s*\\()/i,\n      keyword:\n        /\\b(?:and|as|by|else|for|if|import|in|is|loop|not|or|recursive|with|without)\\b/,\n      operator: /[-+%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,\n      number: /\\b\\d+(?:\\.\\d+)?\\b/,\n      boolean: /[Ff]alse|[Nn]one|[Tt]rue/,\n      variable: /\\b\\w+\\b/,\n      punctuation: /[{}[\\](),.:;]/\n    }\n    var pattern = /\\{\\{[\\s\\S]*?\\}\\}|\\{%[\\s\\S]*?%\\}|\\{#[\\s\\S]*?#\\}/g\n    var markupTemplating = Prism.languages['markup-templating']\n    Prism.hooks.add('before-tokenize', function (env) {\n      markupTemplating.buildPlaceholders(env, 'django', pattern)\n    })\n    Prism.hooks.add('after-tokenize', function (env) {\n      markupTemplating.tokenizePlaceholders(env, 'django')\n    }) // Add an Jinja2 alias\n    Prism.languages.jinja2 = Prism.languages.django\n    Prism.hooks.add('before-tokenize', function (env) {\n      markupTemplating.buildPlaceholders(env, 'jinja2', pattern)\n    })\n    Prism.hooks.add('after-tokenize', function (env) {\n      markupTemplating.tokenizePlaceholders(env, 'jinja2')\n    })\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = dnsZoneFile\ndnsZoneFile.displayName = 'dnsZoneFile'\ndnsZoneFile.aliases = []\nfunction dnsZoneFile(Prism) {\n  Prism.languages['dns-zone-file'] = {\n    comment: /;.*/,\n    string: {\n      pattern: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n      greedy: true\n    },\n    variable: [\n      {\n        pattern: /(^\\$ORIGIN[ \\t]+)\\S+/m,\n        lookbehind: true\n      },\n      {\n        pattern: /(^|\\s)@(?=\\s|$)/,\n        lookbehind: true\n      }\n    ],\n    keyword: /^\\$(?:INCLUDE|ORIGIN|TTL)(?=\\s|$)/m,\n    class: {\n      // https://tools.ietf.org/html/rfc1035#page-13\n      pattern: /(^|\\s)(?:CH|CS|HS|IN)(?=\\s|$)/,\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    type: {\n      // https://en.wikipedia.org/wiki/List_of_DNS_record_types\n      pattern:\n        /(^|\\s)(?:A|A6|AAAA|AFSDB|APL|ATMA|CAA|CDNSKEY|CDS|CERT|CNAME|DHCID|DLV|DNAME|DNSKEY|DS|EID|GID|GPOS|HINFO|HIP|IPSECKEY|ISDN|KEY|KX|LOC|MAILA|MAILB|MB|MD|MF|MG|MINFO|MR|MX|NAPTR|NB|NBSTAT|NIMLOC|NINFO|NS|NSAP|NSAP-PTR|NSEC|NSEC3|NSEC3PARAM|NULL|NXT|OPENPGPKEY|PTR|PX|RKEY|RP|RRSIG|RT|SIG|SINK|SMIMEA|SOA|SPF|SRV|SSHFP|TA|TKEY|TLSA|TSIG|TXT|UID|UINFO|UNSPEC|URI|WKS|X25)(?=\\s|$)/,\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    punctuation: /[()]/\n  }\n  Prism.languages['dns-zone'] = Prism.languages['dns-zone-file']\n}\n","'use strict'\n\nmodule.exports = docker\ndocker.displayName = 'docker'\ndocker.aliases = ['dockerfile']\nfunction docker(Prism) {\n  ;(function (Prism) {\n    // Many of the following regexes will contain negated lookaheads like `[ \\t]+(?![ \\t])`. This is a trick to ensure\n    // that quantifiers behave *atomically*. Atomic quantifiers are necessary to prevent exponential backtracking.\n    var spaceAfterBackSlash =\n      /\\\\[\\r\\n](?:\\s|\\\\[\\r\\n]|#.*(?!.))*(?![\\s#]|\\\\[\\r\\n])/.source // At least one space, comment, or line break\n    var space = /(?:[ \\t]+(?![ \\t])(?:<SP_BS>)?|<SP_BS>)/.source.replace(\n      /<SP_BS>/g,\n      function () {\n        return spaceAfterBackSlash\n      }\n    )\n    var string =\n      /\"(?:[^\"\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\"|'(?:[^'\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*'/\n        .source\n    var option = /--[\\w-]+=(?:<STR>|(?![\"'])(?:[^\\s\\\\]|\\\\.)+)/.source.replace(\n      /<STR>/g,\n      function () {\n        return string\n      }\n    )\n    var stringRule = {\n      pattern: RegExp(string),\n      greedy: true\n    }\n    var commentRule = {\n      pattern: /(^[ \\t]*)#.*/m,\n      lookbehind: true,\n      greedy: true\n    }\n    /**\n     * @param {string} source\n     * @param {string} flags\n     * @returns {RegExp}\n     */\n    function re(source, flags) {\n      source = source\n        .replace(/<OPT>/g, function () {\n          return option\n        })\n        .replace(/<SP>/g, function () {\n          return space\n        })\n      return RegExp(source, flags)\n    }\n    Prism.languages.docker = {\n      instruction: {\n        pattern:\n          /(^[ \\t]*)(?:ADD|ARG|CMD|COPY|ENTRYPOINT|ENV|EXPOSE|FROM|HEALTHCHECK|LABEL|MAINTAINER|ONBUILD|RUN|SHELL|STOPSIGNAL|USER|VOLUME|WORKDIR)(?=\\s)(?:\\\\.|[^\\r\\n\\\\])*(?:\\\\$(?:\\s|#.*$)*(?![\\s#])(?:\\\\.|[^\\r\\n\\\\])*)*/im,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          options: {\n            pattern: re(\n              /(^(?:ONBUILD<SP>)?\\w+<SP>)<OPT>(?:<SP><OPT>)*/.source,\n              'i'\n            ),\n            lookbehind: true,\n            greedy: true,\n            inside: {\n              property: {\n                pattern: /(^|\\s)--[\\w-]+/,\n                lookbehind: true\n              },\n              string: [\n                stringRule,\n                {\n                  pattern: /(=)(?![\"'])(?:[^\\s\\\\]|\\\\.)+/,\n                  lookbehind: true\n                }\n              ],\n              operator: /\\\\$/m,\n              punctuation: /=/\n            }\n          },\n          keyword: [\n            {\n              // https://docs.docker.com/engine/reference/builder/#healthcheck\n              pattern: re(\n                /(^(?:ONBUILD<SP>)?HEALTHCHECK<SP>(?:<OPT><SP>)*)(?:CMD|NONE)\\b/\n                  .source,\n                'i'\n              ),\n              lookbehind: true,\n              greedy: true\n            },\n            {\n              // https://docs.docker.com/engine/reference/builder/#from\n              pattern: re(\n                /(^(?:ONBUILD<SP>)?FROM<SP>(?:<OPT><SP>)*(?!--)[^ \\t\\\\]+<SP>)AS/\n                  .source,\n                'i'\n              ),\n              lookbehind: true,\n              greedy: true\n            },\n            {\n              // https://docs.docker.com/engine/reference/builder/#onbuild\n              pattern: re(/(^ONBUILD<SP>)\\w+/.source, 'i'),\n              lookbehind: true,\n              greedy: true\n            },\n            {\n              pattern: /^\\w+/,\n              greedy: true\n            }\n          ],\n          comment: commentRule,\n          string: stringRule,\n          variable: /\\$(?:\\w+|\\{[^{}\"'\\\\]*\\})/,\n          operator: /\\\\$/m\n        }\n      },\n      comment: commentRule\n    }\n    Prism.languages.dockerfile = Prism.languages.docker\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = dot\ndot.displayName = 'dot'\ndot.aliases = ['gv']\nfunction dot(Prism) {\n  // https://www.graphviz.org/doc/info/lang.html\n  ;(function (Prism) {\n    var ID =\n      '(?:' +\n      [\n        // an identifier\n        /[a-zA-Z_\\x80-\\uFFFF][\\w\\x80-\\uFFFF]*/.source, // a number\n        /-?(?:\\.\\d+|\\d+(?:\\.\\d*)?)/.source, // a double-quoted string\n        /\"[^\"\\\\]*(?:\\\\[\\s\\S][^\"\\\\]*)*\"/.source, // HTML-like string\n        /<(?:[^<>]|(?!<!--)<(?:[^<>\"']|\"[^\"]*\"|'[^']*')+>|<!--(?:[^-]|-(?!->))*-->)*>/\n          .source\n      ].join('|') +\n      ')'\n    var IDInside = {\n      markup: {\n        pattern: /(^<)[\\s\\S]+(?=>$)/,\n        lookbehind: true,\n        alias: ['language-markup', 'language-html', 'language-xml'],\n        inside: Prism.languages.markup\n      }\n    }\n    /**\n     * @param {string} source\n     * @param {string} flags\n     * @returns {RegExp}\n     */\n    function withID(source, flags) {\n      return RegExp(\n        source.replace(/<ID>/g, function () {\n          return ID\n        }),\n        flags\n      )\n    }\n    Prism.languages.dot = {\n      comment: {\n        pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/|^#.*/m,\n        greedy: true\n      },\n      'graph-name': {\n        pattern: withID(\n          /(\\b(?:digraph|graph|subgraph)[ \\t\\r\\n]+)<ID>/.source,\n          'i'\n        ),\n        lookbehind: true,\n        greedy: true,\n        alias: 'class-name',\n        inside: IDInside\n      },\n      'attr-value': {\n        pattern: withID(/(=[ \\t\\r\\n]*)<ID>/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: IDInside\n      },\n      'attr-name': {\n        pattern: withID(/([\\[;, \\t\\r\\n])<ID>(?=[ \\t\\r\\n]*=)/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: IDInside\n      },\n      keyword: /\\b(?:digraph|edge|graph|node|strict|subgraph)\\b/i,\n      'compass-point': {\n        pattern: /(:[ \\t\\r\\n]*)(?:[ewc_]|[ns][ew]?)(?![\\w\\x80-\\uFFFF])/,\n        lookbehind: true,\n        alias: 'builtin'\n      },\n      node: {\n        pattern: withID(/(^|[^-.\\w\\x80-\\uFFFF\\\\])<ID>/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: IDInside\n      },\n      operator: /[=:]|-[->]/,\n      punctuation: /[\\[\\]{};,]/\n    }\n    Prism.languages.gv = Prism.languages.dot\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = ebnf\nebnf.displayName = 'ebnf'\nebnf.aliases = []\nfunction ebnf(Prism) {\n  Prism.languages.ebnf = {\n    comment: /\\(\\*[\\s\\S]*?\\*\\)/,\n    string: {\n      pattern: /\"[^\"\\r\\n]*\"|'[^'\\r\\n]*'/,\n      greedy: true\n    },\n    special: {\n      pattern: /\\?[^?\\r\\n]*\\?/,\n      greedy: true,\n      alias: 'class-name'\n    },\n    definition: {\n      pattern: /^([\\t ]*)[a-z]\\w*(?:[ \\t]+[a-z]\\w*)*(?=\\s*=)/im,\n      lookbehind: true,\n      alias: ['rule', 'keyword']\n    },\n    rule: /\\b[a-z]\\w*(?:[ \\t]+[a-z]\\w*)*\\b/i,\n    punctuation: /\\([:/]|[:/]\\)|[.,;()[\\]{}]/,\n    operator: /[-=|*/!]/\n  }\n}\n","'use strict'\n\nmodule.exports = editorconfig\neditorconfig.displayName = 'editorconfig'\neditorconfig.aliases = []\nfunction editorconfig(Prism) {\n  Prism.languages.editorconfig = {\n    // https://editorconfig-specification.readthedocs.io\n    comment: /[;#].*/,\n    section: {\n      pattern: /(^[ \\t]*)\\[.+\\]/m,\n      lookbehind: true,\n      alias: 'selector',\n      inside: {\n        regex: /\\\\\\\\[\\[\\]{},!?.*]/,\n        // Escape special characters with '\\\\'\n        operator: /[!?]|\\.\\.|\\*{1,2}/,\n        punctuation: /[\\[\\]{},]/\n      }\n    },\n    key: {\n      pattern: /(^[ \\t]*)[^\\s=]+(?=[ \\t]*=)/m,\n      lookbehind: true,\n      alias: 'attr-name'\n    },\n    value: {\n      pattern: /=.*/,\n      alias: 'attr-value',\n      inside: {\n        punctuation: /^=/\n      }\n    }\n  }\n}\n","'use strict'\n\nmodule.exports = eiffel\neiffel.displayName = 'eiffel'\neiffel.aliases = []\nfunction eiffel(Prism) {\n  Prism.languages.eiffel = {\n    comment: /--.*/,\n    string: [\n      // Aligned-verbatim-strings\n      {\n        pattern: /\"([^[]*)\\[[\\s\\S]*?\\]\\1\"/,\n        greedy: true\n      }, // Non-aligned-verbatim-strings\n      {\n        pattern: /\"([^{]*)\\{[\\s\\S]*?\\}\\1\"/,\n        greedy: true\n      }, // Single-line string\n      {\n        pattern: /\"(?:%(?:(?!\\n)\\s)*\\n\\s*%|%\\S|[^%\"\\r\\n])*\"/,\n        greedy: true\n      }\n    ],\n    // normal char | special char | char code\n    char: /'(?:%.|[^%'\\r\\n])+'/,\n    keyword:\n      /\\b(?:across|agent|alias|all|and|as|assign|attached|attribute|check|class|convert|create|Current|debug|deferred|detachable|do|else|elseif|end|ensure|expanded|export|external|feature|from|frozen|if|implies|inherit|inspect|invariant|like|local|loop|not|note|obsolete|old|once|or|Precursor|redefine|rename|require|rescue|Result|retry|select|separate|some|then|undefine|until|variant|Void|when|xor)\\b/i,\n    boolean: /\\b(?:False|True)\\b/i,\n    // Convention: class-names are always all upper-case characters\n    'class-name': /\\b[A-Z][\\dA-Z_]*\\b/,\n    number: [\n      // hexa | octal | bin\n      /\\b0[xcb][\\da-f](?:_*[\\da-f])*\\b/i, // Decimal\n      /(?:\\b\\d(?:_*\\d)*)?\\.(?:(?:\\d(?:_*\\d)*)?e[+-]?)?\\d(?:_*\\d)*\\b|\\b\\d(?:_*\\d)*\\b\\.?/i\n    ],\n    punctuation: /:=|<<|>>|\\(\\||\\|\\)|->|\\.(?=\\w)|[{}[\\];(),:?]/,\n    operator: /\\\\\\\\|\\|\\.\\.\\||\\.\\.|\\/[~\\/=]?|[><]=?|[-+*^=~]/\n  }\n}\n","'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = ejs\nejs.displayName = 'ejs'\nejs.aliases = ['eta']\nfunction ejs(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  ;(function (Prism) {\n    Prism.languages.ejs = {\n      delimiter: {\n        pattern: /^<%[-_=]?|[-_]?%>$/,\n        alias: 'punctuation'\n      },\n      comment: /^#[\\s\\S]*/,\n      'language-javascript': {\n        pattern: /[\\s\\S]+/,\n        inside: Prism.languages.javascript\n      }\n    }\n    Prism.hooks.add('before-tokenize', function (env) {\n      var ejsPattern = /<%(?!%)[\\s\\S]+?%>/g\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'ejs',\n        ejsPattern\n      )\n    })\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'ejs')\n    })\n    Prism.languages.eta = Prism.languages.ejs\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = elixir\nelixir.displayName = 'elixir'\nelixir.aliases = []\nfunction elixir(Prism) {\n  Prism.languages.elixir = {\n    doc: {\n      pattern:\n        /@(?:doc|moduledoc)\\s+(?:(\"\"\"|''')[\\s\\S]*?\\1|(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\2)[^\\\\\\r\\n])*\\2)/,\n      inside: {\n        attribute: /^@\\w+/,\n        string: /['\"][\\s\\S]+/\n      }\n    },\n    comment: {\n      pattern: /#.*/,\n      greedy: true\n    },\n    // ~r\"\"\"foo\"\"\" (multi-line), ~r'''foo''' (multi-line), ~r/foo/, ~r|foo|, ~r\"foo\", ~r'foo', ~r(foo), ~r[foo], ~r{foo}, ~r<foo>\n    regex: {\n      pattern:\n        /~[rR](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|[^\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[uismxfr]*/,\n      greedy: true\n    },\n    string: [\n      {\n        // ~s\"\"\"foo\"\"\" (multi-line), ~s'''foo''' (multi-line), ~s/foo/, ~s|foo|, ~s\"foo\", ~s'foo', ~s(foo), ~s[foo], ~s{foo} (with interpolation care), ~s<foo>\n        pattern:\n          /~[cCsSwW](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|#\\{[^}]+\\}|#(?!\\{)|[^#\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[csa]?/,\n        greedy: true,\n        inside: {\n          // See interpolation below\n        }\n      },\n      {\n        pattern: /(\"\"\"|''')[\\s\\S]*?\\1/,\n        greedy: true,\n        inside: {\n          // See interpolation below\n        }\n      },\n      {\n        // Multi-line strings are allowed\n        pattern: /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: true,\n        inside: {\n          // See interpolation below\n        }\n      }\n    ],\n    atom: {\n      // Look-behind prevents bad highlighting of the :: operator\n      pattern: /(^|[^:]):\\w+/,\n      lookbehind: true,\n      alias: 'symbol'\n    },\n    module: {\n      pattern: /\\b[A-Z]\\w*\\b/,\n      alias: 'class-name'\n    },\n    // Look-ahead prevents bad highlighting of the :: operator\n    'attr-name': /\\b\\w+\\??:(?!:)/,\n    argument: {\n      // Look-behind prevents bad highlighting of the && operator\n      pattern: /(^|[^&])&\\d+/,\n      lookbehind: true,\n      alias: 'variable'\n    },\n    attribute: {\n      pattern: /@\\w+/,\n      alias: 'variable'\n    },\n    function: /\\b[_a-zA-Z]\\w*[?!]?(?:(?=\\s*(?:\\.\\s*)?\\()|(?=\\/\\d))/,\n    number: /\\b(?:0[box][a-f\\d_]+|\\d[\\d_]*)(?:\\.[\\d_]+)?(?:e[+-]?[\\d_]+)?\\b/i,\n    keyword:\n      /\\b(?:after|alias|and|case|catch|cond|def(?:callback|delegate|exception|impl|macro|module|n|np|p|protocol|struct)?|do|else|end|fn|for|if|import|not|or|quote|raise|require|rescue|try|unless|unquote|use|when)\\b/,\n    boolean: /\\b(?:false|nil|true)\\b/,\n    operator: [\n      /\\bin\\b|&&?|\\|[|>]?|\\\\\\\\|::|\\.\\.\\.?|\\+\\+?|-[->]?|<[-=>]|>=|!==?|\\B!|=(?:==?|[>~])?|[*\\/^]/,\n      {\n        // We don't want to match <<\n        pattern: /([^<])<(?!<)/,\n        lookbehind: true\n      },\n      {\n        // We don't want to match >>\n        pattern: /([^>])>(?!>)/,\n        lookbehind: true\n      }\n    ],\n    punctuation: /<<|>>|[.,%\\[\\]{}()]/\n  }\n  Prism.languages.elixir.string.forEach(function (o) {\n    o.inside = {\n      interpolation: {\n        pattern: /#\\{[^}]+\\}/,\n        inside: {\n          delimiter: {\n            pattern: /^#\\{|\\}$/,\n            alias: 'punctuation'\n          },\n          rest: Prism.languages.elixir\n        }\n      }\n    }\n  })\n}\n","'use strict'\n\nmodule.exports = elm\nelm.displayName = 'elm'\nelm.aliases = []\nfunction elm(Prism) {\n  Prism.languages.elm = {\n    comment: /--.*|\\{-[\\s\\S]*?-\\}/,\n    char: {\n      pattern:\n        /'(?:[^\\\\'\\r\\n]|\\\\(?:[abfnrtv\\\\']|\\d+|x[0-9a-fA-F]+|u\\{[0-9a-fA-F]+\\}))'/,\n      greedy: true\n    },\n    string: [\n      {\n        // Multiline strings are wrapped in triple \". Quotes may appear unescaped.\n        pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n        greedy: true\n      },\n      {\n        pattern: /\"(?:[^\\\\\"\\r\\n]|\\\\.)*\"/,\n        greedy: true\n      }\n    ],\n    'import-statement': {\n      // The imported or hidden names are not included in this import\n      // statement. This is because we want to highlight those exactly like\n      // we do for the names in the program.\n      pattern:\n        /(^[\\t ]*)import\\s+[A-Z]\\w*(?:\\.[A-Z]\\w*)*(?:\\s+as\\s+(?:[A-Z]\\w*)(?:\\.[A-Z]\\w*)*)?(?:\\s+exposing\\s+)?/m,\n      lookbehind: true,\n      inside: {\n        keyword: /\\b(?:as|exposing|import)\\b/\n      }\n    },\n    keyword:\n      /\\b(?:alias|as|case|else|exposing|if|in|infixl|infixr|let|module|of|then|type)\\b/,\n    // These are builtin variables only. Constructors are highlighted later as a constant.\n    builtin:\n      /\\b(?:abs|acos|always|asin|atan|atan2|ceiling|clamp|compare|cos|curry|degrees|e|flip|floor|fromPolar|identity|isInfinite|isNaN|logBase|max|min|negate|never|not|pi|radians|rem|round|sin|sqrt|tan|toFloat|toPolar|toString|truncate|turns|uncurry|xor)\\b/,\n    // decimal integers and floating point numbers | hexadecimal integers\n    number: /\\b(?:\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?|0x[0-9a-f]+)\\b/i,\n    // Most of this is needed because of the meaning of a single '.'.\n    // If it stands alone freely, it is the function composition.\n    // It may also be a separator between a module name and an identifier => no\n    // operator. If it comes together with other special characters it is an\n    // operator too.\n    // Valid operator characters in 0.18: +-/*=.$<>:&|^?%#@~!\n    // Ref: https://groups.google.com/forum/#!msg/elm-dev/0AHSnDdkSkQ/E0SVU70JEQAJ\n    operator: /\\s\\.\\s|[+\\-/*=.$<>:&|^?%#@~!]{2,}|[+\\-/*=$<>:&|^?%#@~!]/,\n    // In Elm, nearly everything is a variable, do not highlight these.\n    hvariable: /\\b(?:[A-Z]\\w*\\.)*[a-z]\\w*\\b/,\n    constant: /\\b(?:[A-Z]\\w*\\.)*[A-Z]\\w*\\b/,\n    punctuation: /[{}[\\]|(),.:]/\n  }\n}\n","'use strict'\nvar refractorRuby = require('./ruby.js')\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = erb\nerb.displayName = 'erb'\nerb.aliases = []\nfunction erb(Prism) {\n  Prism.register(refractorRuby)\n  Prism.register(refractorMarkupTemplating)\n  ;(function (Prism) {\n    Prism.languages.erb = {\n      delimiter: {\n        pattern: /^(\\s*)<%=?|%>(?=\\s*$)/,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      ruby: {\n        pattern: /\\s*\\S[\\s\\S]*/,\n        alias: 'language-ruby',\n        inside: Prism.languages.ruby\n      }\n    }\n    Prism.hooks.add('before-tokenize', function (env) {\n      var erbPattern =\n        /<%=?(?:[^\\r\\n]|[\\r\\n](?!=begin)|[\\r\\n]=begin\\s(?:[^\\r\\n]|[\\r\\n](?!=end))*[\\r\\n]=end)+?%>/g\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'erb',\n        erbPattern\n      )\n    })\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'erb')\n    })\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = erlang\nerlang.displayName = 'erlang'\nerlang.aliases = []\nfunction erlang(Prism) {\n  Prism.languages.erlang = {\n    comment: /%.+/,\n    string: {\n      pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n      greedy: true\n    },\n    'quoted-function': {\n      pattern: /'(?:\\\\.|[^\\\\'\\r\\n])+'(?=\\()/,\n      alias: 'function'\n    },\n    'quoted-atom': {\n      pattern: /'(?:\\\\.|[^\\\\'\\r\\n])+'/,\n      alias: 'atom'\n    },\n    boolean: /\\b(?:false|true)\\b/,\n    keyword: /\\b(?:after|case|catch|end|fun|if|of|receive|try|when)\\b/,\n    number: [\n      /\\$\\\\?./,\n      /\\b\\d+#[a-z0-9]+/i,\n      /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i\n    ],\n    function: /\\b[a-z][\\w@]*(?=\\()/,\n    variable: {\n      // Look-behind is used to prevent wrong highlighting of atoms containing \"@\"\n      pattern: /(^|[^@])(?:\\b|\\?)[A-Z_][\\w@]*/,\n      lookbehind: true\n    },\n    operator: [\n      /[=\\/<>:]=|=[:\\/]=|\\+\\+?|--?|[=*\\/!]|\\b(?:and|andalso|band|bnot|bor|bsl|bsr|bxor|div|not|or|orelse|rem|xor)\\b/,\n      {\n        // We don't want to match <<\n        pattern: /(^|[^<])<(?!<)/,\n        lookbehind: true\n      },\n      {\n        // We don't want to match >>\n        pattern: /(^|[^>])>(?!>)/,\n        lookbehind: true\n      }\n    ],\n    atom: /\\b[a-z][\\w@]*/,\n    punctuation: /[()[\\]{}:;,.#|]|<<|>>/\n  }\n}\n","'use strict'\nvar refractorLua = require('./lua.js')\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = etlua\netlua.displayName = 'etlua'\netlua.aliases = []\nfunction etlua(Prism) {\n  Prism.register(refractorLua)\n  Prism.register(refractorMarkupTemplating)\n  ;(function (Prism) {\n    Prism.languages.etlua = {\n      delimiter: {\n        pattern: /^<%[-=]?|-?%>$/,\n        alias: 'punctuation'\n      },\n      'language-lua': {\n        pattern: /[\\s\\S]+/,\n        inside: Prism.languages.lua\n      }\n    }\n    Prism.hooks.add('before-tokenize', function (env) {\n      var pattern = /<%[\\s\\S]+?%>/g\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'etlua',\n        pattern\n      )\n    })\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'etlua')\n    })\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = excelFormula\nexcelFormula.displayName = 'excelFormula'\nexcelFormula.aliases = []\nfunction excelFormula(Prism) {\n  Prism.languages['excel-formula'] = {\n    comment: {\n      pattern: /(\\bN\\(\\s*)\"(?:[^\"]|\"\")*\"(?=\\s*\\))/i,\n      lookbehind: true,\n      greedy: true\n    },\n    string: {\n      pattern: /\"(?:[^\"]|\"\")*\"(?!\")/,\n      greedy: true\n    },\n    reference: {\n      // https://www.ablebits.com/office-addins-blog/2015/12/08/excel-reference-another-sheet-workbook/\n      // Sales!B2\n      // 'Winter sales'!B2\n      // [Sales.xlsx]Jan!B2:B5\n      // D:\\Reports\\[Sales.xlsx]Jan!B2:B5\n      // '[Sales.xlsx]Jan sales'!B2:B5\n      // 'D:\\Reports\\[Sales.xlsx]Jan sales'!B2:B5\n      pattern:\n        /(?:'[^']*'|(?:[^\\s()[\\]{}<>*?\"';,$&]*\\[[^^\\s()[\\]{}<>*?\"']+\\])?\\w+)!/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        operator: /!$/,\n        punctuation: /'/,\n        sheet: {\n          pattern: /[^[\\]]+$/,\n          alias: 'function'\n        },\n        file: {\n          pattern: /\\[[^[\\]]+\\]$/,\n          inside: {\n            punctuation: /[[\\]]/\n          }\n        },\n        path: /[\\s\\S]+/\n      }\n    },\n    'function-name': {\n      pattern: /\\b[A-Z]\\w*(?=\\()/i,\n      alias: 'keyword'\n    },\n    range: {\n      pattern:\n        /\\$?\\b(?:[A-Z]+\\$?\\d+:\\$?[A-Z]+\\$?\\d+|[A-Z]+:\\$?[A-Z]+|\\d+:\\$?\\d+)\\b/i,\n      alias: 'property',\n      inside: {\n        operator: /:/,\n        cell: /\\$?[A-Z]+\\$?\\d+/i,\n        column: /\\$?[A-Z]+/i,\n        row: /\\$?\\d+/\n      }\n    },\n    cell: {\n      // Excel is case insensitive, so the string \"foo1\" could be either a variable or a cell.\n      // To combat this, we match cells case insensitive, if the contain at least one \"$\", and case sensitive otherwise.\n      pattern: /\\b[A-Z]+\\d+\\b|\\$[A-Za-z]+\\$?\\d+\\b|\\b[A-Za-z]+\\$\\d+\\b/,\n      alias: 'property'\n    },\n    number: /(?:\\b\\d+(?:\\.\\d+)?|\\B\\.\\d+)(?:e[+-]?\\d+)?\\b/i,\n    boolean: /\\b(?:FALSE|TRUE)\\b/i,\n    operator: /[-+*/^%=&,]|<[=>]?|>=?/,\n    punctuation: /[[\\]();{}|]/\n  }\n  Prism.languages['xlsx'] = Prism.languages['xls'] =\n    Prism.languages['excel-formula']\n}\n","'use strict'\n\nmodule.exports = factor\nfactor.displayName = 'factor'\nfactor.aliases = []\nfunction factor(Prism) {\n  ;(function (Prism) {\n    var comment_inside = {\n      function:\n        /\\b(?:BUGS?|FIX(?:MES?)?|NOTES?|TODOS?|XX+|HACKS?|WARN(?:ING)?|\\?{2,}|!{2,})\\b/\n    }\n    var string_inside = {\n      number: /\\\\[^\\s']|%\\w/\n    }\n    var factor = {\n      comment: [\n        {\n          // ! single-line exclamation point comments with whitespace after/around the !\n          pattern: /(^|\\s)(?:! .*|!$)/,\n          lookbehind: true,\n          inside: comment_inside\n        },\n        /* from basis/multiline: */\n        {\n          // /* comment */, /* comment*/\n          pattern: /(^|\\s)\\/\\*\\s[\\s\\S]*?\\*\\/(?=\\s|$)/,\n          lookbehind: true,\n          greedy: true,\n          inside: comment_inside\n        },\n        {\n          // ![[ comment ]] , ![===[ comment]===]\n          pattern: /(^|\\s)!\\[(={0,6})\\[\\s[\\s\\S]*?\\]\\2\\](?=\\s|$)/,\n          lookbehind: true,\n          greedy: true,\n          inside: comment_inside\n        }\n      ],\n      number: [\n        {\n          // basic base 10 integers 9, -9\n          pattern: /(^|\\s)[+-]?\\d+(?=\\s|$)/,\n          lookbehind: true\n        },\n        {\n          // base prefix integers 0b010 0o70 0xad 0d10 0XAD -0xa9\n          pattern: /(^|\\s)[+-]?0(?:b[01]+|o[0-7]+|d\\d+|x[\\dA-F]+)(?=\\s|$)/i,\n          lookbehind: true\n        },\n        {\n          // fractional ratios 1/5 -1/5 and the literal float approximations 1/5. -1/5.\n          pattern: /(^|\\s)[+-]?\\d+\\/\\d+\\.?(?=\\s|$)/,\n          lookbehind: true\n        },\n        {\n          // positive mixed numbers 23+1/5 +23+1/5\n          pattern: /(^|\\s)\\+?\\d+\\+\\d+\\/\\d+(?=\\s|$)/,\n          lookbehind: true\n        },\n        {\n          // negative mixed numbers -23-1/5\n          pattern: /(^|\\s)-\\d+-\\d+\\/\\d+(?=\\s|$)/,\n          lookbehind: true\n        },\n        {\n          // basic decimal floats -0.01 0. .0 .1 -.1 -1. -12.13 +12.13\n          // and scientific notation with base 10 exponents 3e4 3e-4 .3e-4\n          pattern:\n            /(^|\\s)[+-]?(?:\\d*\\.\\d+|\\d+\\.\\d*|\\d+)(?:e[+-]?\\d+)?(?=\\s|$)/i,\n          lookbehind: true\n        },\n        {\n          // NAN literal syntax NAN: 80000deadbeef, NAN: a\n          pattern: /(^|\\s)NAN:\\s+[\\da-fA-F]+(?=\\s|$)/,\n          lookbehind: true\n        },\n        {\n          /*\nbase prefix floats 0x1.0p3 (8.0) 0b1.010p2 (5.0) 0x1.p1 0b1.11111111p11111...\n\"The normalized hex form ±0x1.MMMMMMMMMMMMM[pP]±EEEE allows any floating-point number to be specified precisely.\nThe values of MMMMMMMMMMMMM and EEEE map directly to the mantissa and exponent fields of the binary IEEE 754 representation.\"\n<https://docs.factorcode.org/content/article-syntax-floats.html>\n*/\n          pattern:\n            /(^|\\s)[+-]?0(?:b1\\.[01]*|o1\\.[0-7]*|d1\\.\\d*|x1\\.[\\dA-F]*)p\\d+(?=\\s|$)/i,\n          lookbehind: true\n        }\n      ],\n      // R/ regexp?\\/\\\\/\n      regexp: {\n        pattern:\n          /(^|\\s)R\\/\\s(?:\\\\\\S|[^\\\\/])*\\/(?:[idmsr]*|[idmsr]+-[idmsr]+)(?=\\s|$)/,\n        lookbehind: true,\n        alias: 'number',\n        inside: {\n          variable: /\\\\\\S/,\n          keyword: /[+?*\\[\\]^$(){}.|]/,\n          operator: {\n            pattern: /(\\/)[idmsr]+(?:-[idmsr]+)?/,\n            lookbehind: true\n          }\n        }\n      },\n      boolean: {\n        pattern: /(^|\\s)[tf](?=\\s|$)/,\n        lookbehind: true\n      },\n      // SBUF\" asd\", URL\" ://...\", P\" /etc/\"\n      'custom-string': {\n        pattern: /(^|\\s)[A-Z0-9\\-]+\"\\s(?:\\\\\\S|[^\"\\\\])*\"/,\n        lookbehind: true,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          number: /\\\\\\S|%\\w|\\//\n        }\n      },\n      'multiline-string': [\n        {\n          // STRING: name \\n content \\n ; -> CONSTANT: name \"content\" (symbol)\n          pattern: /(^|\\s)STRING:\\s+\\S+(?:\\n|\\r\\n).*(?:\\n|\\r\\n)\\s*;(?=\\s|$)/,\n          lookbehind: true,\n          greedy: true,\n          alias: 'string',\n          inside: {\n            number: string_inside.number,\n            // trailing semicolon on its own line\n            'semicolon-or-setlocal': {\n              pattern: /([\\r\\n][ \\t]*);(?=\\s|$)/,\n              lookbehind: true,\n              alias: 'function'\n            }\n          }\n        },\n        {\n          // HEREDOC: marker \\n content \\n marker ; -> \"content\" (immediate)\n          pattern: /(^|\\s)HEREDOC:\\s+\\S+(?:\\n|\\r\\n).*(?:\\n|\\r\\n)\\s*\\S+(?=\\s|$)/,\n          lookbehind: true,\n          greedy: true,\n          alias: 'string',\n          inside: string_inside\n        },\n        {\n          // [[ string ]], [==[ string]==]\n          pattern: /(^|\\s)\\[(={0,6})\\[\\s[\\s\\S]*?\\]\\2\\](?=\\s|$)/,\n          lookbehind: true,\n          greedy: true,\n          alias: 'string',\n          inside: string_inside\n        }\n      ],\n      'special-using': {\n        pattern: /(^|\\s)USING:(?:\\s\\S+)*(?=\\s+;(?:\\s|$))/,\n        lookbehind: true,\n        alias: 'function',\n        inside: {\n          // this is essentially a regex for vocab names, which i don't want to specify\n          // but the USING: gets picked up as a vocab name\n          string: {\n            pattern: /(\\s)[^:\\s]+/,\n            lookbehind: true\n          }\n        }\n      },\n      /* this description of stack effect literal syntax is not complete and not as specific as theoretically possible\ntrying to do better is more work and regex-computation-time than it's worth though.\n- we'd like to have the \"delimiter\" parts of the stack effect [ (, --, and ) ] be a different (less-important or comment-like) colour to the stack effect contents\n- we'd like if nested stack effects were treated as such rather than just appearing flat (with `inside`)\n- we'd like if the following variable name conventions were recognised specifically:\nspecial row variables = ..a b..\ntype and stack effect annotations end with a colon = ( quot: ( a: ( -- ) -- b ) -- x ), ( x: number -- )\nword throws unconditional error = *\nany other word-like variable name = a ? q' etc\nhttps://docs.factorcode.org/content/article-effects.html\nthese are pretty complicated to highlight properly without a real parser, and therefore out of scope\nthe old pattern, which may be later useful, was: (^|\\s)(?:call|execute|eval)?\\((?:\\s+[^\"\\r\\n\\t ]\\S*)*?\\s+--(?:\\s+[^\"\\n\\t ]\\S*)*?\\s+\\)(?=\\s|$)\n*/\n      // current solution is not great\n      'stack-effect-delimiter': [\n        {\n          // opening parenthesis\n          pattern: /(^|\\s)(?:call|eval|execute)?\\((?=\\s)/,\n          lookbehind: true,\n          alias: 'operator'\n        },\n        {\n          // middle --\n          pattern: /(\\s)--(?=\\s)/,\n          lookbehind: true,\n          alias: 'operator'\n        },\n        {\n          // closing parenthesis\n          pattern: /(\\s)\\)(?=\\s|$)/,\n          lookbehind: true,\n          alias: 'operator'\n        }\n      ],\n      combinators: {\n        pattern: null,\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      'kernel-builtin': {\n        pattern: null,\n        lookbehind: true,\n        alias: 'variable'\n      },\n      'sequences-builtin': {\n        pattern: null,\n        lookbehind: true,\n        alias: 'variable'\n      },\n      'math-builtin': {\n        pattern: null,\n        lookbehind: true,\n        alias: 'variable'\n      },\n      'constructor-word': {\n        // <array> but not <=>\n        pattern: /(^|\\s)<(?!=+>|-+>)\\S+>(?=\\s|$)/,\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      'other-builtin-syntax': {\n        pattern: null,\n        lookbehind: true,\n        alias: 'operator'\n      },\n      /*\nfull list of supported word naming conventions: (the convention appears outside of the [brackets])\nset-[x]\nchange-[x]\nwith-[x]\nnew-[x]\n>[string]\n[base]>\n[string]>[number]\n+[symbol]+\n[boolean-word]?\n?[of]\n[slot-reader]>>\n>>[slot-setter]\n[slot-writer]<<\n([implementation-detail])\n[mutater]!\n[variant]*\n[prettyprint].\n$[help-markup]\n<constructors>, SYNTAX:, etc are supported by their own patterns.\n`with` and `new` from `kernel` are their own builtins.\nsee <https://docs.factorcode.org/content/article-conventions.html>\n*/\n      'conventionally-named-word': {\n        pattern:\n          /(^|\\s)(?!\")(?:(?:change|new|set|with)-\\S+|\\$\\S+|>[^>\\s]+|[^:>\\s]+>|[^>\\s]+>[^>\\s]+|\\+[^+\\s]+\\+|[^?\\s]+\\?|\\?[^?\\s]+|[^>\\s]+>>|>>[^>\\s]+|[^<\\s]+<<|\\([^()\\s]+\\)|[^!\\s]+!|[^*\\s]\\S*\\*|[^.\\s]\\S*\\.)(?=\\s|$)/,\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      'colon-syntax': {\n        pattern: /(^|\\s)(?:[A-Z0-9\\-]+#?)?:{1,2}\\s+(?:;\\S+|(?!;)\\S+)(?=\\s|$)/,\n        lookbehind: true,\n        greedy: true,\n        alias: 'function'\n      },\n      'semicolon-or-setlocal': {\n        pattern: /(\\s)(?:;|:>)(?=\\s|$)/,\n        lookbehind: true,\n        alias: 'function'\n      },\n      // do not highlight leading } or trailing X{ at the begin/end of the file as it's invalid syntax\n      'curly-brace-literal-delimiter': [\n        {\n          // opening\n          pattern: /(^|\\s)[a-z]*\\{(?=\\s)/i,\n          lookbehind: true,\n          alias: 'operator'\n        },\n        {\n          // closing\n          pattern: /(\\s)\\}(?=\\s|$)/,\n          lookbehind: true,\n          alias: 'operator'\n        }\n      ],\n      // do not highlight leading ] or trailing [ at the begin/end of the file as it's invalid syntax\n      'quotation-delimiter': [\n        {\n          // opening\n          pattern: /(^|\\s)\\[(?=\\s)/,\n          lookbehind: true,\n          alias: 'operator'\n        },\n        {\n          // closing\n          pattern: /(\\s)\\](?=\\s|$)/,\n          lookbehind: true,\n          alias: 'operator'\n        }\n      ],\n      'normal-word': {\n        pattern: /(^|\\s)[^\"\\s]\\S*(?=\\s|$)/,\n        lookbehind: true\n      },\n      /*\nbasic first-class string \"a\"\nwith escaped double-quote \"a\\\"\"\nescaped backslash \"\\\\\"\nand general escapes since Factor has so many \"\\N\"\nsyntax that works in the reference implementation that isn't fully\nsupported because it's an implementation detail:\n\"string 1\"\"string 2\" -> 2 strings (works anyway)\n\"string\"5 -> string, 5\n\"string\"[ ] -> string, quotation\n{ \"a\"} -> array<string>\nthe rest of those examples all properly recognise the string, but not\nthe other object (number, quotation, etc)\nthis is fine for a regex-only implementation.\n*/\n      string: {\n        pattern: /\"(?:\\\\\\S|[^\"\\\\])*\"/,\n        greedy: true,\n        inside: string_inside\n      }\n    }\n    var escape = function (str) {\n      return (str + '').replace(/([.?*+\\^$\\[\\]\\\\(){}|\\-])/g, '\\\\$1')\n    }\n    var arrToWordsRegExp = function (arr) {\n      return new RegExp('(^|\\\\s)(?:' + arr.map(escape).join('|') + ')(?=\\\\s|$)')\n    }\n    var builtins = {\n      'kernel-builtin': [\n        'or',\n        '2nipd',\n        '4drop',\n        'tuck',\n        'wrapper',\n        'nip',\n        'wrapper?',\n        'callstack>array',\n        'die',\n        'dupd',\n        'callstack',\n        'callstack?',\n        '3dup',\n        'hashcode',\n        'pick',\n        '4nip',\n        'build',\n        '>boolean',\n        'nipd',\n        'clone',\n        '5nip',\n        'eq?',\n        '?',\n        '=',\n        'swapd',\n        '2over',\n        'clear',\n        '2dup',\n        'get-retainstack',\n        'not',\n        'tuple?',\n        'dup',\n        '3nipd',\n        'call',\n        '-rotd',\n        'object',\n        'drop',\n        'assert=',\n        'assert?',\n        '-rot',\n        'execute',\n        'boa',\n        'get-callstack',\n        'curried?',\n        '3drop',\n        'pickd',\n        'overd',\n        'over',\n        'roll',\n        '3nip',\n        'swap',\n        'and',\n        '2nip',\n        'rotd',\n        'throw',\n        '(clone)',\n        'hashcode*',\n        'spin',\n        'reach',\n        '4dup',\n        'equal?',\n        'get-datastack',\n        'assert',\n        '2drop',\n        '<wrapper>',\n        'boolean?',\n        'identity-hashcode',\n        'identity-tuple?',\n        'null',\n        'composed?',\n        'new',\n        '5drop',\n        'rot',\n        '-roll',\n        'xor',\n        'identity-tuple',\n        'boolean'\n      ],\n      'other-builtin-syntax': [\n        // syntax\n        '=======',\n        'recursive',\n        'flushable',\n        '>>',\n        '<<<<<<',\n        'M\\\\',\n        'B',\n        'PRIVATE>',\n        '\\\\',\n        '======',\n        'final',\n        'inline',\n        'delimiter',\n        'deprecated',\n        '<PRIVATE',\n        '>>>>>>',\n        '<<<<<<<',\n        'parse-complex',\n        'malformed-complex',\n        'read-only',\n        '>>>>>>>',\n        'call-next-method',\n        '<<',\n        'foldable', // literals\n        '$',\n        '$[',\n        '${'\n      ],\n      'sequences-builtin': [\n        'member-eq?',\n        'mismatch',\n        'append',\n        'assert-sequence=',\n        'longer',\n        'repetition',\n        'clone-like',\n        '3sequence',\n        'assert-sequence?',\n        'last-index-from',\n        'reversed',\n        'index-from',\n        'cut*',\n        'pad-tail',\n        'join-as',\n        'remove-eq!',\n        'concat-as',\n        'but-last',\n        'snip',\n        'nths',\n        'nth',\n        'sequence',\n        'longest',\n        'slice?',\n        '<slice>',\n        'remove-nth',\n        'tail-slice',\n        'empty?',\n        'tail*',\n        'member?',\n        'virtual-sequence?',\n        'set-length',\n        'drop-prefix',\n        'iota',\n        'unclip',\n        'bounds-error?',\n        'unclip-last-slice',\n        'non-negative-integer-expected',\n        'non-negative-integer-expected?',\n        'midpoint@',\n        'longer?',\n        '?set-nth',\n        '?first',\n        'rest-slice',\n        'prepend-as',\n        'prepend',\n        'fourth',\n        'sift',\n        'subseq-start',\n        'new-sequence',\n        '?last',\n        'like',\n        'first4',\n        '1sequence',\n        'reverse',\n        'slice',\n        'virtual@',\n        'repetition?',\n        'set-last',\n        'index',\n        '4sequence',\n        'max-length',\n        'set-second',\n        'immutable-sequence',\n        'first2',\n        'first3',\n        'supremum',\n        'unclip-slice',\n        'suffix!',\n        'insert-nth',\n        'tail',\n        '3append',\n        'short',\n        'suffix',\n        'concat',\n        'flip',\n        'immutable?',\n        'reverse!',\n        '2sequence',\n        'sum',\n        'delete-all',\n        'indices',\n        'snip-slice',\n        '<iota>',\n        'check-slice',\n        'sequence?',\n        'head',\n        'append-as',\n        'halves',\n        'sequence=',\n        'collapse-slice',\n        '?second',\n        'slice-error?',\n        'product',\n        'bounds-check?',\n        'bounds-check',\n        'immutable',\n        'virtual-exemplar',\n        'harvest',\n        'remove',\n        'pad-head',\n        'last',\n        'set-fourth',\n        'cartesian-product',\n        'remove-eq',\n        'shorten',\n        'shorter',\n        'reversed?',\n        'shorter?',\n        'shortest',\n        'head-slice',\n        'pop*',\n        'tail-slice*',\n        'but-last-slice',\n        'iota?',\n        'append!',\n        'cut-slice',\n        'new-resizable',\n        'head-slice*',\n        'sequence-hashcode',\n        'pop',\n        'set-nth',\n        '?nth',\n        'second',\n        'join',\n        'immutable-sequence?',\n        '<reversed>',\n        '3append-as',\n        'virtual-sequence',\n        'subseq?',\n        'remove-nth!',\n        'length',\n        'last-index',\n        'lengthen',\n        'assert-sequence',\n        'copy',\n        'move',\n        'third',\n        'first',\n        'tail?',\n        'set-first',\n        'prefix',\n        'bounds-error',\n        '<repetition>',\n        'exchange',\n        'surround',\n        'cut',\n        'min-length',\n        'set-third',\n        'push-all',\n        'head?',\n        'subseq-start-from',\n        'delete-slice',\n        'rest',\n        'sum-lengths',\n        'head*',\n        'infimum',\n        'remove!',\n        'glue',\n        'slice-error',\n        'subseq',\n        'push',\n        'replace-slice',\n        'subseq-as',\n        'unclip-last'\n      ],\n      'math-builtin': [\n        'number=',\n        'next-power-of-2',\n        '?1+',\n        'fp-special?',\n        'imaginary-part',\n        'float>bits',\n        'number?',\n        'fp-infinity?',\n        'bignum?',\n        'fp-snan?',\n        'denominator',\n        'gcd',\n        '*',\n        '+',\n        'fp-bitwise=',\n        '-',\n        'u>=',\n        '/',\n        '>=',\n        'bitand',\n        'power-of-2?',\n        'log2-expects-positive',\n        'neg?',\n        '<',\n        'log2',\n        '>',\n        'integer?',\n        'number',\n        'bits>double',\n        '2/',\n        'zero?',\n        'bits>float',\n        'float?',\n        'shift',\n        'ratio?',\n        'rect>',\n        'even?',\n        'ratio',\n        'fp-sign',\n        'bitnot',\n        '>fixnum',\n        'complex?',\n        '/i',\n        'integer>fixnum',\n        '/f',\n        'sgn',\n        '>bignum',\n        'next-float',\n        'u<',\n        'u>',\n        'mod',\n        'recip',\n        'rational',\n        '>float',\n        '2^',\n        'integer',\n        'fixnum?',\n        'neg',\n        'fixnum',\n        'sq',\n        'bignum',\n        '>rect',\n        'bit?',\n        'fp-qnan?',\n        'simple-gcd',\n        'complex',\n        '<fp-nan>',\n        'real',\n        '>fraction',\n        'double>bits',\n        'bitor',\n        'rem',\n        'fp-nan-payload',\n        'real-part',\n        'log2-expects-positive?',\n        'prev-float',\n        'align',\n        'unordered?',\n        'float',\n        'fp-nan?',\n        'abs',\n        'bitxor',\n        'integer>fixnum-strict',\n        'u<=',\n        'odd?',\n        '<=',\n        '/mod',\n        '>integer',\n        'real?',\n        'rational?',\n        'numerator'\n      ] // that's all for now\n    }\n    Object.keys(builtins).forEach(function (k) {\n      factor[k].pattern = arrToWordsRegExp(builtins[k])\n    })\n    var combinators = [\n      // kernel\n      '2bi',\n      'while',\n      '2tri',\n      'bi*',\n      '4dip',\n      'both?',\n      'same?',\n      'tri@',\n      'curry',\n      'prepose',\n      '3bi',\n      '?if',\n      'tri*',\n      '2keep',\n      '3keep',\n      'curried',\n      '2keepd',\n      'when',\n      '2bi*',\n      '2tri*',\n      '4keep',\n      'bi@',\n      'keepdd',\n      'do',\n      'unless*',\n      'tri-curry',\n      'if*',\n      'loop',\n      'bi-curry*',\n      'when*',\n      '2bi@',\n      '2tri@',\n      'with',\n      '2with',\n      'either?',\n      'bi',\n      'until',\n      '3dip',\n      '3curry',\n      'tri-curry*',\n      'tri-curry@',\n      'bi-curry',\n      'keepd',\n      'compose',\n      '2dip',\n      'if',\n      '3tri',\n      'unless',\n      'tuple',\n      'keep',\n      '2curry',\n      'tri',\n      'most',\n      'while*',\n      'dip',\n      'composed',\n      'bi-curry@', // sequences\n      'find-last-from',\n      'trim-head-slice',\n      'map-as',\n      'each-from',\n      'none?',\n      'trim-tail',\n      'partition',\n      'if-empty',\n      'accumulate*',\n      'reject!',\n      'find-from',\n      'accumulate-as',\n      'collector-for-as',\n      'reject',\n      'map',\n      'map-sum',\n      'accumulate!',\n      '2each-from',\n      'follow',\n      'supremum-by',\n      'map!',\n      'unless-empty',\n      'collector',\n      'padding',\n      'reduce-index',\n      'replicate-as',\n      'infimum-by',\n      'trim-tail-slice',\n      'count',\n      'find-index',\n      'filter',\n      'accumulate*!',\n      'reject-as',\n      'map-integers',\n      'map-find',\n      'reduce',\n      'selector',\n      'interleave',\n      '2map',\n      'filter-as',\n      'binary-reduce',\n      'map-index-as',\n      'find',\n      'produce',\n      'filter!',\n      'replicate',\n      'cartesian-map',\n      'cartesian-each',\n      'find-index-from',\n      'map-find-last',\n      '3map-as',\n      '3map',\n      'find-last',\n      'selector-as',\n      '2map-as',\n      '2map-reduce',\n      'accumulate',\n      'each',\n      'each-index',\n      'accumulate*-as',\n      'when-empty',\n      'all?',\n      'collector-as',\n      'push-either',\n      'new-like',\n      'collector-for',\n      '2selector',\n      'push-if',\n      '2all?',\n      'map-reduce',\n      '3each',\n      'any?',\n      'trim-slice',\n      '2reduce',\n      'change-nth',\n      'produce-as',\n      '2each',\n      'trim',\n      'trim-head',\n      'cartesian-find',\n      'map-index', // math\n      'if-zero',\n      'each-integer',\n      'unless-zero',\n      '(find-integer)',\n      'when-zero',\n      'find-last-integer',\n      '(all-integers?)',\n      'times',\n      '(each-integer)',\n      'find-integer',\n      'all-integers?', // math.combinators\n      'unless-negative',\n      'if-positive',\n      'when-positive',\n      'when-negative',\n      'unless-positive',\n      'if-negative', // combinators\n      'case',\n      '2cleave',\n      'cond>quot',\n      'case>quot',\n      '3cleave',\n      'wrong-values',\n      'to-fixed-point',\n      'alist>quot',\n      'cond',\n      'cleave',\n      'call-effect',\n      'recursive-hashcode',\n      'spread',\n      'deep-spread>quot', // combinators.short-circuit\n      '2||',\n      '0||',\n      'n||',\n      '0&&',\n      '2&&',\n      '3||',\n      '1||',\n      '1&&',\n      'n&&',\n      '3&&', // combinators.smart\n      'smart-unless*',\n      'keep-inputs',\n      'reduce-outputs',\n      'smart-when*',\n      'cleave>array',\n      'smart-with',\n      'smart-apply',\n      'smart-if',\n      'inputs/outputs',\n      'output>sequence-n',\n      'map-outputs',\n      'map-reduce-outputs',\n      'dropping',\n      'output>array',\n      'smart-map-reduce',\n      'smart-2map-reduce',\n      'output>array-n',\n      'nullary',\n      'input<sequence',\n      'append-outputs',\n      'drop-inputs',\n      'inputs',\n      'smart-2reduce',\n      'drop-outputs',\n      'smart-reduce',\n      'preserving',\n      'smart-when',\n      'outputs',\n      'append-outputs-as',\n      'smart-unless',\n      'smart-if*',\n      'sum-outputs',\n      'input<sequence-unsafe',\n      'output>sequence' // tafn\n    ]\n    factor.combinators.pattern = arrToWordsRegExp(combinators)\n    Prism.languages.factor = factor\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = $false\n$false.displayName = '$false'\n$false.aliases = []\nfunction $false(Prism) {\n  ;(function (Prism) {\n    /**\n     * Based on the manual by Wouter van Oortmerssen.\n     *\n     * @see {@link https://github.com/PrismJS/prism/issues/2801#issue-829717504}\n     */\n    Prism.languages['false'] = {\n      comment: {\n        pattern: /\\{[^}]*\\}/\n      },\n      string: {\n        pattern: /\"[^\"]*\"/,\n        greedy: true\n      },\n      'character-code': {\n        pattern: /'(?:[^\\r]|\\r\\n?)/,\n        alias: 'number'\n      },\n      'assembler-code': {\n        pattern: /\\d+`/,\n        alias: 'important'\n      },\n      number: /\\d+/,\n      operator: /[-!#$%&'*+,./:;=>?@\\\\^_`|~ßø]/,\n      punctuation: /\\[|\\]/,\n      variable: /[a-z]/,\n      'non-standard': {\n        pattern: /[()<BDO®]/,\n        alias: 'bold'\n      }\n    }\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = firestoreSecurityRules\nfirestoreSecurityRules.displayName = 'firestoreSecurityRules'\nfirestoreSecurityRules.aliases = []\nfunction firestoreSecurityRules(Prism) {\n  Prism.languages['firestore-security-rules'] = Prism.languages.extend(\n    'clike',\n    {\n      comment: /\\/\\/.*/,\n      keyword:\n        /\\b(?:allow|function|if|match|null|return|rules_version|service)\\b/,\n      operator: /&&|\\|\\||[<>!=]=?|[-+*/%]|\\b(?:in|is)\\b/\n    }\n  )\n  delete Prism.languages['firestore-security-rules']['class-name']\n  Prism.languages.insertBefore('firestore-security-rules', 'keyword', {\n    path: {\n      pattern:\n        /(^|[\\s(),])(?:\\/(?:[\\w\\xA0-\\uFFFF]+|\\{[\\w\\xA0-\\uFFFF]+(?:=\\*\\*)?\\}|\\$\\([\\w\\xA0-\\uFFFF.]+\\)))+/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        variable: {\n          pattern: /\\{[\\w\\xA0-\\uFFFF]+(?:=\\*\\*)?\\}|\\$\\([\\w\\xA0-\\uFFFF.]+\\)/,\n          inside: {\n            operator: /=/,\n            keyword: /\\*\\*/,\n            punctuation: /[.$(){}]/\n          }\n        },\n        punctuation: /\\//\n      }\n    },\n    method: {\n      // to make the pattern shorter, the actual method names are omitted\n      pattern: /(\\ballow\\s+)[a-z]+(?:\\s*,\\s*[a-z]+)*(?=\\s*[:;])/,\n      lookbehind: true,\n      alias: 'builtin',\n      inside: {\n        punctuation: /,/\n      }\n    }\n  })\n}\n","'use strict'\n\nmodule.exports = flow\nflow.displayName = 'flow'\nflow.aliases = []\nfunction flow(Prism) {\n  ;(function (Prism) {\n    Prism.languages.flow = Prism.languages.extend('javascript', {})\n    Prism.languages.insertBefore('flow', 'keyword', {\n      type: [\n        {\n          pattern:\n            /\\b(?:[Bb]oolean|Function|[Nn]umber|[Ss]tring|any|mixed|null|void)\\b/,\n          alias: 'tag'\n        }\n      ]\n    })\n    Prism.languages.flow['function-variable'].pattern =\n      /(?!\\s)[_$a-z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=\\s*(?:function\\b|(?:\\([^()]*\\)(?:\\s*:\\s*\\w+)?|(?!\\s)[_$a-z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/i\n    delete Prism.languages.flow['parameter']\n    Prism.languages.insertBefore('flow', 'operator', {\n      'flow-punctuation': {\n        pattern: /\\{\\||\\|\\}/,\n        alias: 'punctuation'\n      }\n    })\n    if (!Array.isArray(Prism.languages.flow.keyword)) {\n      Prism.languages.flow.keyword = [Prism.languages.flow.keyword]\n    }\n    Prism.languages.flow.keyword.unshift(\n      {\n        pattern: /(^|[^$]\\b)(?:Class|declare|opaque|type)\\b(?!\\$)/,\n        lookbehind: true\n      },\n      {\n        pattern:\n          /(^|[^$]\\B)\\$(?:Diff|Enum|Exact|Keys|ObjMap|PropertyType|Record|Shape|Subtype|Supertype|await)\\b(?!\\$)/,\n        lookbehind: true\n      }\n    )\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = fortran\nfortran.displayName = 'fortran'\nfortran.aliases = []\nfunction fortran(Prism) {\n  Prism.languages.fortran = {\n    'quoted-number': {\n      pattern: /[BOZ](['\"])[A-F0-9]+\\1/i,\n      alias: 'number'\n    },\n    string: {\n      pattern:\n        /(?:\\b\\w+_)?(['\"])(?:\\1\\1|&(?:\\r\\n?|\\n)(?:[ \\t]*!.*(?:\\r\\n?|\\n)|(?![ \\t]*!))|(?!\\1).)*(?:\\1|&)/,\n      inside: {\n        comment: {\n          pattern: /(&(?:\\r\\n?|\\n)\\s*)!.*/,\n          lookbehind: true\n        }\n      }\n    },\n    comment: {\n      pattern: /!.*/,\n      greedy: true\n    },\n    boolean: /\\.(?:FALSE|TRUE)\\.(?:_\\w+)?/i,\n    number: /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[ED][+-]?\\d+)?(?:_\\w+)?/i,\n    keyword: [\n      // Types\n      /\\b(?:CHARACTER|COMPLEX|DOUBLE ?PRECISION|INTEGER|LOGICAL|REAL)\\b/i, // END statements\n      /\\b(?:END ?)?(?:BLOCK ?DATA|DO|FILE|FORALL|FUNCTION|IF|INTERFACE|MODULE(?! PROCEDURE)|PROGRAM|SELECT|SUBROUTINE|TYPE|WHERE)\\b/i, // Statements\n      /\\b(?:ALLOCATABLE|ALLOCATE|BACKSPACE|CALL|CASE|CLOSE|COMMON|CONTAINS|CONTINUE|CYCLE|DATA|DEALLOCATE|DIMENSION|DO|END|EQUIVALENCE|EXIT|EXTERNAL|FORMAT|GO ?TO|IMPLICIT(?: NONE)?|INQUIRE|INTENT|INTRINSIC|MODULE PROCEDURE|NAMELIST|NULLIFY|OPEN|OPTIONAL|PARAMETER|POINTER|PRINT|PRIVATE|PUBLIC|READ|RETURN|REWIND|SAVE|SELECT|STOP|TARGET|WHILE|WRITE)\\b/i, // Others\n      /\\b(?:ASSIGNMENT|DEFAULT|ELEMENTAL|ELSE|ELSEIF|ELSEWHERE|ENTRY|IN|INCLUDE|INOUT|KIND|NULL|ONLY|OPERATOR|OUT|PURE|RECURSIVE|RESULT|SEQUENCE|STAT|THEN|USE)\\b/i\n    ],\n    operator: [\n      /\\*\\*|\\/\\/|=>|[=\\/]=|[<>]=?|::|[+\\-*=%]|\\.[A-Z]+\\./i,\n      {\n        // Use lookbehind to prevent confusion with (/ /)\n        pattern: /(^|(?!\\().)\\/(?!\\))/,\n        lookbehind: true\n      }\n    ],\n    punctuation: /\\(\\/|\\/\\)|[(),;:&]/\n  }\n}\n","'use strict'\n\nmodule.exports = fsharp\nfsharp.displayName = 'fsharp'\nfsharp.aliases = []\nfunction fsharp(Prism) {\n  Prism.languages.fsharp = Prism.languages.extend('clike', {\n    comment: [\n      {\n        pattern: /(^|[^\\\\])\\(\\*(?!\\))[\\s\\S]*?\\*\\)/,\n        lookbehind: true,\n        greedy: true\n      },\n      {\n        pattern: /(^|[^\\\\:])\\/\\/.*/,\n        lookbehind: true,\n        greedy: true\n      }\n    ],\n    string: {\n      pattern: /(?:\"\"\"[\\s\\S]*?\"\"\"|@\"(?:\"\"|[^\"])*\"|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")B?/,\n      greedy: true\n    },\n    'class-name': {\n      pattern:\n        /(\\b(?:exception|inherit|interface|new|of|type)\\s+|\\w\\s*:\\s*|\\s:\\??>\\s*)[.\\w]+\\b(?:\\s*(?:->|\\*)\\s*[.\\w]+\\b)*(?!\\s*[:.])/,\n      lookbehind: true,\n      inside: {\n        operator: /->|\\*/,\n        punctuation: /\\./\n      }\n    },\n    keyword:\n      /\\b(?:let|return|use|yield)(?:!\\B|\\b)|\\b(?:abstract|and|as|asr|assert|atomic|base|begin|break|checked|class|component|const|constraint|constructor|continue|default|delegate|do|done|downcast|downto|eager|elif|else|end|event|exception|extern|external|false|finally|fixed|for|fun|function|functor|global|if|in|include|inherit|inline|interface|internal|land|lazy|lor|lsl|lsr|lxor|match|member|method|mixin|mod|module|mutable|namespace|new|not|null|object|of|open|or|override|parallel|private|process|protected|public|pure|rec|sealed|select|sig|static|struct|tailcall|then|to|trait|true|try|type|upcast|val|virtual|void|volatile|when|while|with)\\b/,\n    number: [\n      /\\b0x[\\da-fA-F]+(?:LF|lf|un)?\\b/,\n      /\\b0b[01]+(?:uy|y)?\\b/,\n      /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[fm]|e[+-]?\\d+)?\\b/i,\n      /\\b\\d+(?:[IlLsy]|UL|u[lsy]?)?\\b/\n    ],\n    operator:\n      /([<>~&^])\\1\\1|([*.:<>&])\\2|<-|->|[!=:]=|<?\\|{1,3}>?|\\??(?:<=|>=|<>|[-+*/%=<>])\\??|[!?^&]|~[+~-]|:>|:\\?>?/\n  })\n  Prism.languages.insertBefore('fsharp', 'keyword', {\n    preprocessor: {\n      pattern: /(^[\\t ]*)#.*/m,\n      lookbehind: true,\n      alias: 'property',\n      inside: {\n        directive: {\n          pattern: /(^#)\\b(?:else|endif|if|light|line|nowarn)\\b/,\n          lookbehind: true,\n          alias: 'keyword'\n        }\n      }\n    }\n  })\n  Prism.languages.insertBefore('fsharp', 'punctuation', {\n    'computation-expression': {\n      pattern: /\\b[_a-z]\\w*(?=\\s*\\{)/i,\n      alias: 'keyword'\n    }\n  })\n  Prism.languages.insertBefore('fsharp', 'string', {\n    annotation: {\n      pattern: /\\[<.+?>\\]/,\n      greedy: true,\n      inside: {\n        punctuation: /^\\[<|>\\]$/,\n        'class-name': {\n          pattern: /^\\w+$|(^|;\\s*)[A-Z]\\w*(?=\\()/,\n          lookbehind: true\n        },\n        'annotation-content': {\n          pattern: /[\\s\\S]+/,\n          inside: Prism.languages.fsharp\n        }\n      }\n    },\n    char: {\n      pattern:\n        /'(?:[^\\\\']|\\\\(?:.|\\d{3}|x[a-fA-F\\d]{2}|u[a-fA-F\\d]{4}|U[a-fA-F\\d]{8}))'B?/,\n      greedy: true\n    }\n  })\n}\n","'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = ftl\nftl.displayName = 'ftl'\nftl.aliases = []\nfunction ftl(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  ;(function (Prism) {\n    // https://freemarker.apache.org/docs/dgui_template_exp.html\n    // FTL expression with 4 levels of nesting supported\n    var FTL_EXPR =\n      /[^<()\"']|\\((?:<expr>)*\\)|<(?!#--)|<#--(?:[^-]|-(?!->))*-->|\"(?:[^\\\\\"]|\\\\.)*\"|'(?:[^\\\\']|\\\\.)*'/\n        .source\n    for (var i = 0; i < 2; i++) {\n      FTL_EXPR = FTL_EXPR.replace(/<expr>/g, function () {\n        return FTL_EXPR\n      })\n    }\n    FTL_EXPR = FTL_EXPR.replace(/<expr>/g, /[^\\s\\S]/.source)\n    var ftl = {\n      comment: /<#--[\\s\\S]*?-->/,\n      string: [\n        {\n          // raw string\n          pattern: /\\br(\"|')(?:(?!\\1)[^\\\\]|\\\\.)*\\1/,\n          greedy: true\n        },\n        {\n          pattern: RegExp(\n            /(\"|')(?:(?!\\1|\\$\\{)[^\\\\]|\\\\.|\\$\\{(?:(?!\\})(?:<expr>))*\\})*\\1/.source.replace(\n              /<expr>/g,\n              function () {\n                return FTL_EXPR\n              }\n            )\n          ),\n          greedy: true,\n          inside: {\n            interpolation: {\n              pattern: RegExp(\n                /((?:^|[^\\\\])(?:\\\\\\\\)*)\\$\\{(?:(?!\\})(?:<expr>))*\\}/.source.replace(\n                  /<expr>/g,\n                  function () {\n                    return FTL_EXPR\n                  }\n                )\n              ),\n              lookbehind: true,\n              inside: {\n                'interpolation-punctuation': {\n                  pattern: /^\\$\\{|\\}$/,\n                  alias: 'punctuation'\n                },\n                rest: null\n              }\n            }\n          }\n        }\n      ],\n      keyword: /\\b(?:as)\\b/,\n      boolean: /\\b(?:false|true)\\b/,\n      'builtin-function': {\n        pattern: /((?:^|[^?])\\?\\s*)\\w+/,\n        lookbehind: true,\n        alias: 'function'\n      },\n      function: /\\b\\w+(?=\\s*\\()/,\n      number: /\\b\\d+(?:\\.\\d+)?\\b/,\n      operator:\n        /\\.\\.[<*!]?|->|--|\\+\\+|&&|\\|\\||\\?{1,2}|[-+*/%!=<>]=?|\\b(?:gt|gte|lt|lte)\\b/,\n      punctuation: /[,;.:()[\\]{}]/\n    }\n    ftl.string[1].inside.interpolation.inside.rest = ftl\n    Prism.languages.ftl = {\n      'ftl-comment': {\n        // the pattern is shortened to be more efficient\n        pattern: /^<#--[\\s\\S]*/,\n        alias: 'comment'\n      },\n      'ftl-directive': {\n        pattern: /^<[\\s\\S]+>$/,\n        inside: {\n          directive: {\n            pattern: /(^<\\/?)[#@][a-z]\\w*/i,\n            lookbehind: true,\n            alias: 'keyword'\n          },\n          punctuation: /^<\\/?|\\/?>$/,\n          content: {\n            pattern: /\\s*\\S[\\s\\S]*/,\n            alias: 'ftl',\n            inside: ftl\n          }\n        }\n      },\n      'ftl-interpolation': {\n        pattern: /^\\$\\{[\\s\\S]*\\}$/,\n        inside: {\n          punctuation: /^\\$\\{|\\}$/,\n          content: {\n            pattern: /\\s*\\S[\\s\\S]*/,\n            alias: 'ftl',\n            inside: ftl\n          }\n        }\n      }\n    }\n    Prism.hooks.add('before-tokenize', function (env) {\n      // eslint-disable-next-line regexp/no-useless-lazy\n      var pattern = RegExp(\n        /<#--[\\s\\S]*?-->|<\\/?[#@][a-zA-Z](?:<expr>)*?>|\\$\\{(?:<expr>)*?\\}/.source.replace(\n          /<expr>/g,\n          function () {\n            return FTL_EXPR\n          }\n        ),\n        'gi'\n      )\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'ftl',\n        pattern\n      )\n    })\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'ftl')\n    })\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = gap\ngap.displayName = 'gap'\ngap.aliases = []\nfunction gap(Prism) {\n  // https://www.gap-system.org/Manuals/doc/ref/chap4.html\n  // https://www.gap-system.org/Manuals/doc/ref/chap27.html\n  Prism.languages.gap = {\n    shell: {\n      pattern: /^gap>[\\s\\S]*?(?=^gap>|$(?![\\s\\S]))/m,\n      greedy: true,\n      inside: {\n        gap: {\n          pattern: /^(gap>).+(?:(?:\\r(?:\\n|(?!\\n))|\\n)>.*)*/,\n          lookbehind: true,\n          inside: null // see below\n        },\n        punctuation: /^gap>/\n      }\n    },\n    comment: {\n      pattern: /#.*/,\n      greedy: true\n    },\n    string: {\n      pattern:\n        /(^|[^\\\\'\"])(?:'(?:[^\\r\\n\\\\']|\\\\.){1,10}'|\"(?:[^\\r\\n\\\\\"]|\\\\.)*\"(?!\")|\"\"\"[\\s\\S]*?\"\"\")/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        continuation: {\n          pattern: /([\\r\\n])>/,\n          lookbehind: true,\n          alias: 'punctuation'\n        }\n      }\n    },\n    keyword:\n      /\\b(?:Assert|Info|IsBound|QUIT|TryNextMethod|Unbind|and|atomic|break|continue|do|elif|else|end|fi|for|function|if|in|local|mod|not|od|or|quit|readonly|readwrite|rec|repeat|return|then|until|while)\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    function: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n    number: {\n      pattern:\n        /(^|[^\\w.]|\\.\\.)(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:[eE][+-]?\\d+)?(?:_[a-z]?)?(?=$|[^\\w.]|\\.\\.)/,\n      lookbehind: true\n    },\n    continuation: {\n      pattern: /([\\r\\n])>/,\n      lookbehind: true,\n      alias: 'punctuation'\n    },\n    operator: /->|[-+*/^~=!]|<>|[<>]=?|:=|\\.\\./,\n    punctuation: /[()[\\]{},;.:]/\n  }\n  Prism.languages.gap.shell.inside.gap.inside = Prism.languages.gap\n}\n","'use strict'\n\nmodule.exports = gcode\ngcode.displayName = 'gcode'\ngcode.aliases = []\nfunction gcode(Prism) {\n  Prism.languages.gcode = {\n    comment: /;.*|\\B\\(.*?\\)\\B/,\n    string: {\n      pattern: /\"(?:\"\"|[^\"])*\"/,\n      greedy: true\n    },\n    keyword: /\\b[GM]\\d+(?:\\.\\d+)?\\b/,\n    property: /\\b[A-Z]/,\n    checksum: {\n      pattern: /(\\*)\\d+/,\n      lookbehind: true,\n      alias: 'number'\n    },\n    // T0:0:0\n    punctuation: /[:*]/\n  }\n}\n","'use strict'\n\nmodule.exports = gdscript\ngdscript.displayName = 'gdscript'\ngdscript.aliases = []\nfunction gdscript(Prism) {\n  Prism.languages.gdscript = {\n    comment: /#.*/,\n    string: {\n      pattern:\n        /@?(?:(\"|')(?:(?!\\1)[^\\n\\\\]|\\\\[\\s\\S])*\\1(?!\"|')|\"\"\"(?:[^\\\\]|\\\\[\\s\\S])*?\"\"\")/,\n      greedy: true\n    },\n    'class-name': {\n      // class_name Foo, extends Bar, class InnerClass\n      // export(int) var baz, export(int, 0) var i\n      // as Node\n      // const FOO: int = 9, var bar: bool = true\n      // func add(reference: Item, amount: int) -> Item:\n      pattern:\n        /(^(?:class|class_name|extends)[ \\t]+|^export\\([ \\t]*|\\bas[ \\t]+|(?:\\b(?:const|var)[ \\t]|[,(])[ \\t]*\\w+[ \\t]*:[ \\t]*|->[ \\t]*)[a-zA-Z_]\\w*/m,\n      lookbehind: true\n    },\n    keyword:\n      /\\b(?:and|as|assert|break|breakpoint|class|class_name|const|continue|elif|else|enum|export|extends|for|func|if|in|is|master|mastersync|match|not|null|onready|or|pass|preload|puppet|puppetsync|remote|remotesync|return|self|setget|signal|static|tool|var|while|yield)\\b/,\n    function: /\\b[a-z_]\\w*(?=[ \\t]*\\()/i,\n    variable: /\\$\\w+/,\n    number: [\n      /\\b0b[01_]+\\b|\\b0x[\\da-fA-F_]+\\b|(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.[\\d_]+)(?:e[+-]?[\\d_]+)?\\b/,\n      /\\b(?:INF|NAN|PI|TAU)\\b/\n    ],\n    constant: /\\b[A-Z][A-Z_\\d]*\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    operator: /->|:=|&&|\\|\\||<<|>>|[-+*/%&|!<>=]=?|[~^]/,\n    punctuation: /[.:,;()[\\]{}]/\n  }\n}\n","'use strict'\n\nmodule.exports = gedcom\ngedcom.displayName = 'gedcom'\ngedcom.aliases = []\nfunction gedcom(Prism) {\n  Prism.languages.gedcom = {\n    'line-value': {\n      // Preceded by level, optional pointer, and tag\n      pattern:\n        /(^[\\t ]*\\d+ +(?:@\\w[\\w!\"$%&'()*+,\\-./:;<=>?[\\\\\\]^`{|}~\\x80-\\xfe #]*@ +)?\\w+ ).+/m,\n      lookbehind: true,\n      inside: {\n        pointer: {\n          pattern: /^@\\w[\\w!\"$%&'()*+,\\-./:;<=>?[\\\\\\]^`{|}~\\x80-\\xfe #]*@$/,\n          alias: 'variable'\n        }\n      }\n    },\n    tag: {\n      // Preceded by level and optional pointer\n      pattern:\n        /(^[\\t ]*\\d+ +(?:@\\w[\\w!\"$%&'()*+,\\-./:;<=>?[\\\\\\]^`{|}~\\x80-\\xfe #]*@ +)?)\\w+/m,\n      lookbehind: true,\n      alias: 'string'\n    },\n    level: {\n      pattern: /(^[\\t ]*)\\d+/m,\n      lookbehind: true,\n      alias: 'number'\n    },\n    pointer: {\n      pattern: /@\\w[\\w!\"$%&'()*+,\\-./:;<=>?[\\\\\\]^`{|}~\\x80-\\xfe #]*@/,\n      alias: 'variable'\n    }\n  }\n}\n","'use strict'\n\nmodule.exports = gherkin\ngherkin.displayName = 'gherkin'\ngherkin.aliases = []\nfunction gherkin(Prism) {\n  ;(function (Prism) {\n    var tableRow = /(?:\\r?\\n|\\r)[ \\t]*\\|.+\\|(?:(?!\\|).)*/.source\n    Prism.languages.gherkin = {\n      pystring: {\n        pattern: /(\"\"\"|''')[\\s\\S]+?\\1/,\n        alias: 'string'\n      },\n      comment: {\n        pattern: /(^[ \\t]*)#.*/m,\n        lookbehind: true\n      },\n      tag: {\n        pattern: /(^[ \\t]*)@\\S*/m,\n        lookbehind: true\n      },\n      feature: {\n        pattern:\n          /((?:^|\\r?\\n|\\r)[ \\t]*)(?:Ability|Ahoy matey!|Arwedd|Aspekt|Besigheid Behoefte|Business Need|Caracteristica|Característica|Egenskab|Egenskap|Eiginleiki|Feature|Fīča|Fitur|Fonctionnalité|Fonksyonalite|Funcionalidade|Funcionalitat|Functionalitate|Funcţionalitate|Funcționalitate|Functionaliteit|Fungsi|Funkcia|Funkcija|Funkcionalitāte|Funkcionalnost|Funkcja|Funksie|Funktionalität|Funktionalitéit|Funzionalità|Hwaet|Hwæt|Jellemző|Karakteristik|Lastnost|Mak|Mogucnost|laH|Mogućnost|Moznosti|Možnosti|OH HAI|Omadus|Ominaisuus|Osobina|Özellik|Potrzeba biznesowa|perbogh|poQbogh malja'|Požadavek|Požiadavka|Pretty much|Qap|Qu'meH 'ut|Savybė|Tính năng|Trajto|Vermoë|Vlastnosť|Właściwość|Značilnost|Δυνατότητα|Λειτουργία|Могућност|Мөмкинлек|Особина|Свойство|Үзенчәлеклелек|Функционал|Функционалност|Функция|Функціонал|תכונה|خاصية|خصوصیت|صلاحیت|کاروبار کی ضرورت|وِیژگی|रूप लेख|ਖਾਸੀਅਤ|ਨਕਸ਼ ਨੁਹਾਰ|ਮੁਹਾਂਦਰਾ|గుణము|ಹೆಚ್ಚಳ|ความต้องการทางธุรกิจ|ความสามารถ|โครงหลัก|기능|フィーチャ|功能|機能):(?:[^:\\r\\n]+(?:\\r?\\n|\\r|$))*/,\n        lookbehind: true,\n        inside: {\n          important: {\n            pattern: /(:)[^\\r\\n]+/,\n            lookbehind: true\n          },\n          keyword: /[^:\\r\\n]+:/\n        }\n      },\n      scenario: {\n        pattern:\n          /(^[ \\t]*)(?:Abstract Scenario|Abstrakt Scenario|Achtergrond|Aer|Ær|Agtergrond|All y'all|Antecedentes|Antecedents|Atburðarás|Atburðarásir|Awww, look mate|B4|Background|Baggrund|Bakgrund|Bakgrunn|Bakgrunnur|Beispiele|Beispiller|Bối cảnh|Cefndir|Cenario|Cenário|Cenario de Fundo|Cenário de Fundo|Cenarios|Cenários|Contesto|Context|Contexte|Contexto|Conto|Contoh|Contone|Dæmi|Dasar|Dead men tell no tales|Delineacao do Cenario|Delineação do Cenário|Dis is what went down|Dữ liệu|Dyagram Senaryo|Dyagram senaryo|Egzanp|Ejemplos|Eksempler|Ekzemploj|Enghreifftiau|Esbozo do escenario|Escenari|Escenario|Esempi|Esquema de l'escenari|Esquema del escenario|Esquema do Cenario|Esquema do Cenário|EXAMPLZ|Examples|Exempel|Exemple|Exemples|Exemplos|First off|Fono|Forgatókönyv|Forgatókönyv vázlat|Fundo|Geçmiş|Grundlage|Hannergrond|ghantoH|Háttér|Heave to|Istorik|Juhtumid|Keadaan|Khung kịch bản|Khung tình huống|Kịch bản|Koncept|Konsep skenario|Kontèks|Kontekst|Kontekstas|Konteksts|Kontext|Konturo de la scenaro|Latar Belakang|lut chovnatlh|lut|lutmey|Lýsing Atburðarásar|Lýsing Dæma|MISHUN SRSLY|MISHUN|Menggariskan Senario|mo'|Náčrt Scenára|Náčrt Scénáře|Náčrt Scenáru|Oris scenarija|Örnekler|Osnova|Osnova Scenára|Osnova scénáře|Osnutek|Ozadje|Paraugs|Pavyzdžiai|Példák|Piemēri|Plan du scénario|Plan du Scénario|Plan Senaryo|Plan senaryo|Plang vum Szenario|Pozadí|Pozadie|Pozadina|Príklady|Příklady|Primer|Primeri|Primjeri|Przykłady|Raamstsenaarium|Reckon it's like|Rerefons|Scenár|Scénář|Scenarie|Scenarij|Scenarijai|Scenarijaus šablonas|Scenariji|Scenārijs|Scenārijs pēc parauga|Scenarijus|Scenario|Scénario|Scenario Amlinellol|Scenario Outline|Scenario Template|Scenariomal|Scenariomall|Scenarios|Scenariu|Scenariusz|Scenaro|Schema dello scenario|Se ðe|Se the|Se þe|Senario|Senaryo Deskripsyon|Senaryo deskripsyon|Senaryo|Senaryo taslağı|Shiver me timbers|Situācija|Situai|Situasie Uiteensetting|Situasie|Skenario konsep|Skenario|Skica|Structura scenariu|Structură scenariu|Struktura scenarija|Stsenaarium|Swa hwaer swa|Swa|Swa hwær swa|Szablon scenariusza|Szenario|Szenariogrundriss|Tapaukset|Tapaus|Tapausaihio|Taust|Tausta|Template Keadaan|Template Senario|Template Situai|The thing of it is|Tình huống|Variantai|Voorbeelde|Voorbeelden|Wharrimean is|Yo-ho-ho|You'll wanna|Założenia|Παραδείγματα|Περιγραφή Σεναρίου|Σενάρια|Σενάριο|Υπόβαθρο|Кереш|Контекст|Концепт|Мисаллар|Мисоллар|Основа|Передумова|Позадина|Предистория|Предыстория|Приклади|Пример|Примери|Примеры|Рамка на сценарий|Скица|Структура сценарија|Структура сценария|Структура сценарію|Сценарий|Сценарий структураси|Сценарийның төзелеше|Сценарији|Сценарио|Сценарій|Тарих|Үрнәкләр|דוגמאות|רקע|תבנית תרחיש|תרחיש|الخلفية|الگوی سناریو|امثلة|پس منظر|زمینه|سناریو|سيناريو|سيناريو مخطط|مثالیں|منظر نامے کا خاکہ|منظرنامہ|نمونه ها|उदाहरण|परिदृश्य|परिदृश्य रूपरेखा|पृष्ठभूमि|ਉਦਾਹਰਨਾਂ|ਪਟਕਥਾ|ਪਟਕਥਾ ਢਾਂਚਾ|ਪਟਕਥਾ ਰੂਪ ਰੇਖਾ|ਪਿਛੋਕੜ|ఉదాహరణలు|కథనం|నేపథ్యం|సన్నివేశం|ಉದಾಹರಣೆಗಳು|ಕಥಾಸಾರಾಂಶ|ವಿವರಣೆ|ಹಿನ್ನೆಲೆ|โครงสร้างของเหตุการณ์|ชุดของตัวอย่าง|ชุดของเหตุการณ์|แนวคิด|สรุปเหตุการณ์|เหตุการณ์|배경|시나리오|시나리오 개요|예|サンプル|シナリオ|シナリオアウトライン|シナリオテンプレ|シナリオテンプレート|テンプレ|例|例子|剧本|剧本大纲|劇本|劇本大綱|场景|场景大纲|場景|場景大綱|背景):[^:\\r\\n]*/m,\n        lookbehind: true,\n        inside: {\n          important: {\n            pattern: /(:)[^\\r\\n]*/,\n            lookbehind: true\n          },\n          keyword: /[^:\\r\\n]+:/\n        }\n      },\n      'table-body': {\n        // Look-behind is used to skip the table head, which has the same format as any table row\n        pattern: RegExp('(' + tableRow + ')(?:' + tableRow + ')+'),\n        lookbehind: true,\n        inside: {\n          outline: {\n            pattern: /<[^>]+>/,\n            alias: 'variable'\n          },\n          td: {\n            pattern: /\\s*[^\\s|][^|]*/,\n            alias: 'string'\n          },\n          punctuation: /\\|/\n        }\n      },\n      'table-head': {\n        pattern: RegExp(tableRow),\n        inside: {\n          th: {\n            pattern: /\\s*[^\\s|][^|]*/,\n            alias: 'variable'\n          },\n          punctuation: /\\|/\n        }\n      },\n      atrule: {\n        pattern:\n          /(^[ \\t]+)(?:'a|'ach|'ej|7|a|A také|A taktiež|A tiež|A zároveň|Aber|Ac|Adott|Akkor|Ak|Aleshores|Ale|Ali|Allora|Alors|Als|Ama|Amennyiben|Amikor|Ampak|an|AN|Ananging|And y'all|And|Angenommen|Anrhegedig a|An|Apabila|Atès|Atesa|Atunci|Avast!|Aye|A|awer|Bagi|Banjur|Bet|Biết|Blimey!|Buh|But at the end of the day I reckon|But y'all|But|BUT|Cal|Când|Cand|Cando|Ce|Cuando|Če|Ða ðe|Ða|Dadas|Dada|Dados|Dado|DaH ghu' bejlu'|dann|Dann|Dano|Dan|Dar|Dat fiind|Data|Date fiind|Date|Dati fiind|Dati|Daţi fiind|Dați fiind|DEN|Dato|De|Den youse gotta|Dengan|Diberi|Diyelim ki|Donada|Donat|Donitaĵo|Do|Dun|Duota|Ðurh|Eeldades|Ef|Eğer ki|Entao|Então|Entón|E|En|Entonces|Epi|És|Etant donnée|Etant donné|Et|Étant données|Étant donnée|Étant donné|Etant données|Etant donnés|Étant donnés|Fakat|Gangway!|Gdy|Gegeben seien|Gegeben sei|Gegeven|Gegewe|ghu' noblu'|Gitt|Given y'all|Given|Givet|Givun|Ha|Cho|I CAN HAZ|In|Ir|It's just unbelievable|I|Ja|Jeśli|Jeżeli|Kad|Kada|Kadar|Kai|Kaj|Když|Keď|Kemudian|Ketika|Khi|Kiedy|Ko|Kuid|Kui|Kun|Lan|latlh|Le sa a|Let go and haul|Le|Lè sa a|Lè|Logo|Lorsqu'<|Lorsque|mä|Maar|Mais|Mając|Ma|Majd|Maka|Manawa|Mas|Men|Menawa|Mutta|Nalika|Nalikaning|Nanging|Når|När|Nato|Nhưng|Niin|Njuk|O zaman|Och|Og|Oletetaan|Ond|Onda|Oraz|Pak|Pero|Però|Podano|Pokiaľ|Pokud|Potem|Potom|Privzeto|Pryd|Quan|Quand|Quando|qaSDI'|Så|Sed|Se|Siis|Sipoze ke|Sipoze Ke|Sipoze|Si|Şi|Și|Soit|Stel|Tada|Tad|Takrat|Tak|Tapi|Ter|Tetapi|Tha the|Tha|Then y'all|Then|Thì|Thurh|Toda|Too right|Un|Und|ugeholl|Và|vaj|Vendar|Ve|wann|Wanneer|WEN|Wenn|When y'all|When|Wtedy|Wun|Y'know|Yeah nah|Yna|Youse know like when|Youse know when youse got|Y|Za predpokladu|Za předpokladu|Zadan|Zadani|Zadano|Zadate|Zadato|Zakładając|Zaradi|Zatati|Þa þe|Þa|Þá|Þegar|Þurh|Αλλά|Δεδομένου|Και|Όταν|Τότε|А також|Агар|Але|Али|Аммо|А|Әгәр|Әйтик|Әмма|Бирок|Ва|Вә|Дадено|Дано|Допустим|Если|Задате|Задати|Задато|И|І|К тому же|Када|Кад|Когато|Когда|Коли|Ләкин|Лекин|Нәтиҗәдә|Нехай|Но|Онда|Припустимо, що|Припустимо|Пусть|Также|Та|Тогда|Тоді|То|Унда|Һәм|Якщо|אבל|אזי|אז|בהינתן|וגם|כאשר|آنگاه|اذاً|اگر|اما|اور|با فرض|بالفرض|بفرض|پھر|تب|ثم|جب|عندما|فرض کیا|لكن|لیکن|متى|هنگامی|و|अगर|और|कदा|किन्तु|चूंकि|जब|तथा|तदा|तब|परन्तु|पर|यदि|ਅਤੇ|ਜਦੋਂ|ਜਿਵੇਂ ਕਿ|ਜੇਕਰ|ਤਦ|ਪਰ|అప్పుడు|ఈ పరిస్థితిలో|కాని|చెప్పబడినది|మరియు|ಆದರೆ|ನಂತರ|ನೀಡಿದ|ಮತ್ತು|ಸ್ಥಿತಿಯನ್ನು|กำหนดให้|ดังนั้น|แต่|เมื่อ|และ|그러면<|그리고<|단<|만약<|만일<|먼저<|조건<|하지만<|かつ<|しかし<|ただし<|ならば<|もし<|並且<|但し<|但是<|假如<|假定<|假設<|假设<|前提<|同时<|同時<|并且<|当<|當<|而且<|那么<|那麼<)(?=[ \\t])/m,\n        lookbehind: true\n      },\n      string: {\n        pattern: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"|'(?:\\\\.|[^'\\\\\\r\\n])*'/,\n        inside: {\n          outline: {\n            pattern: /<[^>]+>/,\n            alias: 'variable'\n          }\n        }\n      },\n      outline: {\n        pattern: /<[^>]+>/,\n        alias: 'variable'\n      }\n    }\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = git\ngit.displayName = 'git'\ngit.aliases = []\nfunction git(Prism) {\n  Prism.languages.git = {\n    /*\n     * A simple one line comment like in a git status command\n     * For instance:\n     * $ git status\n     * # On branch infinite-scroll\n     * # Your branch and 'origin/sharedBranches/frontendTeam/infinite-scroll' have diverged,\n     * # and have 1 and 2 different commits each, respectively.\n     * nothing to commit (working directory clean)\n     */\n    comment: /^#.*/m,\n    /*\n     * Regexp to match the changed lines in a git diff output. Check the example below.\n     */\n    deleted: /^[-–].*/m,\n    inserted: /^\\+.*/m,\n    /*\n     * a string (double and simple quote)\n     */\n    string: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    /*\n     * a git command. It starts with a random prompt finishing by a $, then \"git\" then some other parameters\n     * For instance:\n     * $ git add file.txt\n     */\n    command: {\n      pattern: /^.*\\$ git .*$/m,\n      inside: {\n        /*\n         * A git command can contain a parameter starting by a single or a double dash followed by a string\n         * For instance:\n         * $ git diff --cached\n         * $ git log -p\n         */\n        parameter: /\\s--?\\w+/\n      }\n    },\n    /*\n     * Coordinates displayed in a git diff command\n     * For instance:\n     * $ git diff\n     * diff --git file.txt file.txt\n     * index 6214953..1d54a52 100644\n     * --- file.txt\n     * +++ file.txt\n     * @@ -1 +1,2 @@\n     * -Here's my tetx file\n     * +Here's my text file\n     * +And this is the second line\n     */\n    coord: /^@@.*@@$/m,\n    /*\n     * Match a \"commit [SHA1]\" line in a git log output.\n     * For instance:\n     * $ git log\n     * commit a11a14ef7e26f2ca62d4b35eac455ce636d0dc09\n     * Author: lgiraudel\n     * Date:   Mon Feb 17 11:18:34 2014 +0100\n     *\n     *     Add of a new line\n     */\n    'commit-sha1': /^commit \\w{40}$/m\n  }\n}\n","'use strict'\nvar refractorC = require('./c.js')\nmodule.exports = glsl\nglsl.displayName = 'glsl'\nglsl.aliases = []\nfunction glsl(Prism) {\n  Prism.register(refractorC)\n  Prism.languages.glsl = Prism.languages.extend('c', {\n    keyword:\n      /\\b(?:active|asm|atomic_uint|attribute|[ibdu]?vec[234]|bool|break|buffer|case|cast|centroid|class|coherent|common|const|continue|d?mat[234](?:x[234])?|default|discard|do|double|else|enum|extern|external|false|filter|fixed|flat|float|for|fvec[234]|goto|half|highp|hvec[234]|[iu]?sampler2DMS(?:Array)?|[iu]?sampler2DRect|[iu]?samplerBuffer|[iu]?samplerCube|[iu]?samplerCubeArray|[iu]?sampler[123]D|[iu]?sampler[12]DArray|[iu]?image2DMS(?:Array)?|[iu]?image2DRect|[iu]?imageBuffer|[iu]?imageCube|[iu]?imageCubeArray|[iu]?image[123]D|[iu]?image[12]DArray|if|in|inline|inout|input|int|interface|invariant|layout|long|lowp|mediump|namespace|noinline|noperspective|out|output|partition|patch|precise|precision|public|readonly|resource|restrict|return|sample|sampler[12]DArrayShadow|sampler[12]DShadow|sampler2DRectShadow|sampler3DRect|samplerCubeArrayShadow|samplerCubeShadow|shared|short|sizeof|smooth|static|struct|subroutine|superp|switch|template|this|true|typedef|uint|uniform|union|unsigned|using|varying|void|volatile|while|writeonly)\\b/\n  })\n}\n","'use strict'\n\nmodule.exports = gml\ngml.displayName = 'gml'\ngml.aliases = []\nfunction gml(Prism) {\n  Prism.languages.gamemakerlanguage = Prism.languages.gml =\n    Prism.languages.extend('clike', {\n      keyword:\n        /\\b(?:break|case|continue|default|do|else|enum|exit|for|globalvar|if|repeat|return|switch|until|var|while)\\b/,\n      number:\n        /(?:\\b0x[\\da-f]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ulf]{0,4}/i,\n      operator:\n        /--|\\+\\+|[-+%/=]=?|!=|\\*\\*?=?|<[<=>]?|>[=>]?|&&?|\\^\\^?|\\|\\|?|~|\\b(?:and|at|not|or|with|xor)\\b/,\n      constant:\n        /\\b(?:GM_build_date|GM_version|action_(?:continue|restart|reverse|stop)|all|gamespeed_(?:fps|microseconds)|global|local|noone|other|pi|pointer_(?:invalid|null)|self|timezone_(?:local|utc)|undefined|ev_(?:create|destroy|step|alarm|keyboard|mouse|collision|other|draw|draw_(?:begin|end|post|pre)|keypress|keyrelease|trigger|(?:left|middle|no|right)_button|(?:left|middle|right)_press|(?:left|middle|right)_release|mouse_(?:enter|leave|wheel_down|wheel_up)|global_(?:left|middle|right)_button|global_(?:left|middle|right)_press|global_(?:left|middle|right)_release|joystick(?:1|2)_(?:button1|button2|button3|button4|button5|button6|button7|button8|down|left|right|up)|outside|boundary|game_start|game_end|room_start|room_end|no_more_lives|animation_end|end_of_path|no_more_health|user\\d|gui|gui_begin|gui_end|step_(?:begin|end|normal))|vk_(?:alt|anykey|backspace|control|delete|down|end|enter|escape|home|insert|left|nokey|pagedown|pageup|pause|printscreen|return|right|shift|space|tab|up|f\\d|numpad\\d|add|decimal|divide|lalt|lcontrol|lshift|multiply|ralt|rcontrol|rshift|subtract)|achievement_(?:filter_(?:all_players|favorites_only|friends_only)|friends_info|info|leaderboard_info|our_info|pic_loaded|show_(?:achievement|bank|friend_picker|leaderboard|profile|purchase_prompt|ui)|type_challenge|type_score_challenge)|asset_(?:font|object|path|room|script|shader|sound|sprite|tiles|timeline|unknown)|audio_(?:3d|falloff_(?:exponent_distance|exponent_distance_clamped|inverse_distance|inverse_distance_clamped|linear_distance|linear_distance_clamped|none)|mono|new_system|old_system|stereo)|bm_(?:add|complex|dest_alpha|dest_color|dest_colour|inv_dest_alpha|inv_dest_color|inv_dest_colour|inv_src_alpha|inv_src_color|inv_src_colour|max|normal|one|src_alpha|src_alpha_sat|src_color|src_colour|subtract|zero)|browser_(?:chrome|firefox|ie|ie_mobile|not_a_browser|opera|safari|safari_mobile|tizen|unknown|windows_store)|buffer_(?:bool|f16|f32|f64|fast|fixed|generalerror|grow|invalidtype|network|outofbounds|outofspace|s16|s32|s8|seek_end|seek_relative|seek_start|string|text|u16|u32|u64|u8|vbuffer|wrap)|c_(?:aqua|black|blue|dkgray|fuchsia|gray|green|lime|ltgray|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow)|cmpfunc_(?:always|equal|greater|greaterequal|less|lessequal|never|notequal)|cr_(?:appstart|arrow|beam|cross|default|drag|handpoint|hourglass|none|size_all|size_nesw|size_ns|size_nwse|size_we|uparrow)|cull_(?:clockwise|counterclockwise|noculling)|device_(?:emulator|tablet)|device_ios_(?:ipad|ipad_retina|iphone|iphone5|iphone6|iphone6plus|iphone_retina|unknown)|display_(?:landscape|landscape_flipped|portrait|portrait_flipped)|dll_(?:cdecl|cdel|stdcall)|ds_type_(?:grid|list|map|priority|queue|stack)|ef_(?:cloud|ellipse|explosion|firework|flare|rain|ring|smoke|smokeup|snow|spark|star)|fa_(?:archive|bottom|center|directory|hidden|left|middle|readonly|right|sysfile|top|volumeid)|fb_login_(?:default|fallback_to_webview|forcing_safari|forcing_webview|no_fallback_to_webview|use_system_account)|iap_(?:available|canceled|ev_consume|ev_product|ev_purchase|ev_restore|ev_storeload|failed|purchased|refunded|status_available|status_loading|status_processing|status_restoring|status_unavailable|status_uninitialised|storeload_failed|storeload_ok|unavailable)|leaderboard_type_(?:number|time_mins_secs)|lighttype_(?:dir|point)|matrix_(?:projection|view|world)|mb_(?:any|left|middle|none|right)|network_(?:config_(?:connect_timeout|disable_reliable_udp|enable_reliable_udp|use_non_blocking_socket)|socket_(?:bluetooth|tcp|udp)|type_(?:connect|data|disconnect|non_blocking_connect))|of_challenge_(?:lose|tie|win)|os_(?:android|ios|linux|macosx|ps3|ps4|psvita|unknown|uwp|win32|win8native|windows|winphone|xboxone)|phy_debug_render_(?:aabb|collision_pairs|coms|core_shapes|joints|obb|shapes)|phy_joint_(?:anchor_1_x|anchor_1_y|anchor_2_x|anchor_2_y|angle|angle_limits|damping_ratio|frequency|length_1|length_2|lower_angle_limit|max_force|max_length|max_motor_force|max_motor_torque|max_torque|motor_force|motor_speed|motor_torque|reaction_force_x|reaction_force_y|reaction_torque|speed|translation|upper_angle_limit)|phy_particle_data_flag_(?:category|color|colour|position|typeflags|velocity)|phy_particle_flag_(?:colormixing|colourmixing|elastic|powder|spring|tensile|viscous|wall|water|zombie)|phy_particle_group_flag_(?:rigid|solid)|pr_(?:linelist|linestrip|pointlist|trianglefan|trianglelist|trianglestrip)|ps_(?:distr|shape)_(?:diamond|ellipse|gaussian|invgaussian|line|linear|rectangle)|pt_shape_(?:circle|cloud|disk|explosion|flare|line|pixel|ring|smoke|snow|spark|sphere|square|star)|ty_(?:real|string)|gp_(?:face\\d|axislh|axislv|axisrh|axisrv|padd|padl|padr|padu|select|shoulderl|shoulderlb|shoulderr|shoulderrb|start|stickl|stickr)|lb_disp_(?:none|numeric|time_ms|time_sec)|lb_sort_(?:ascending|descending|none)|ov_(?:achievements|community|friends|gamegroup|players|settings)|ugc_(?:filetype_(?:community|microtrans)|list_(?:Favorited|Followed|Published|Subscribed|UsedOrPlayed|VotedDown|VotedOn|VotedUp|WillVoteLater)|match_(?:AllGuides|Artwork|Collections|ControllerBindings|IntegratedGuides|Items|Items_Mtx|Items_ReadyToUse|Screenshots|UsableInGame|Videos|WebGuides)|query_(?:AcceptedForGameRankedByAcceptanceDate|CreatedByFriendsRankedByPublicationDate|FavoritedByFriendsRankedByPublicationDate|NotYetRated)|query_RankedBy(?:NumTimesReported|PublicationDate|TextSearch|TotalVotesAsc|Trend|Vote|VotesUp)|result_success|sortorder_CreationOrder(?:Asc|Desc)|sortorder_(?:ForModeration|LastUpdatedDesc|SubscriptionDateDesc|TitleAsc|VoteScoreDesc)|visibility_(?:friends_only|private|public))|vertex_usage_(?:binormal|blendindices|blendweight|color|colour|depth|fog|normal|position|psize|sample|tangent|texcoord|textcoord)|vertex_type_(?:float\\d|color|colour|ubyte4)|input_type|layerelementtype_(?:background|instance|oldtilemap|particlesystem|sprite|tile|tilemap|undefined)|se_(?:chorus|compressor|echo|equalizer|flanger|gargle|none|reverb)|text_type|tile_(?:flip|index_mask|mirror|rotate)|(?:obj|rm|scr|spr)\\w+)\\b/,\n      variable:\n        /\\b(?:alarm|application_surface|async_load|background_(?:alpha|blend|color|colour|foreground|height|hspeed|htiled|index|showcolor|showcolour|visible|vspeed|vtiled|width|x|xscale|y|yscale)|bbox_(?:bottom|left|right|top)|browser_(?:height|width)|caption_(?:health|lives|score)|current_(?:day|hour|minute|month|second|time|weekday|year)|cursor_sprite|debug_mode|delta_time|direction|display_aa|error_(?:last|occurred)|event_(?:action|number|object|type)|fps|fps_real|friction|game_(?:display|project|save)_(?:id|name)|gamemaker_(?:pro|registered|version)|gravity|gravity_direction|(?:h|v)speed|health|iap_data|id|image_(?:alpha|angle|blend|depth|index|number|speed|xscale|yscale)|instance_(?:count|id)|keyboard_(?:key|lastchar|lastkey|string)|layer|lives|mask_index|mouse_(?:button|lastbutton|x|y)|object_index|os_(?:browser|device|type|version)|path_(?:endaction|index|orientation|position|positionprevious|scale|speed)|persistent|phy_(?:rotation|(?:col_normal|collision|com|linear_velocity|position|speed)_(?:x|y)|angular_(?:damping|velocity)|position_(?:x|y)previous|speed|linear_damping|bullet|fixed_rotation|active|mass|inertia|dynamic|kinematic|sleeping|collision_points)|pointer_(?:invalid|null)|room|room_(?:caption|first|height|last|persistent|speed|width)|score|secure_mode|show_(?:health|lives|score)|solid|speed|sprite_(?:height|index|width|xoffset|yoffset)|temp_directory|timeline_(?:index|loop|position|running|speed)|transition_(?:color|kind|steps)|undefined|view_(?:angle|current|enabled|(?:h|v)(?:border|speed)|(?:h|w|x|y)port|(?:h|w|x|y)view|object|surface_id|visible)|visible|webgl_enabled|working_directory|(?:x|y)(?:previous|start)|x|y|argument(?:_relitive|_count|\\d)|argument|global|local|other|self)\\b/\n    })\n}\n","'use strict'\n\nmodule.exports = gn\ngn.displayName = 'gn'\ngn.aliases = ['gni']\nfunction gn(Prism) {\n  // https://gn.googlesource.com/gn/+/refs/heads/main/docs/reference.md#grammar\n  Prism.languages.gn = {\n    comment: {\n      pattern: /#.*/,\n      greedy: true\n    },\n    'string-literal': {\n      pattern: /(^|[^\\\\\"])\"(?:[^\\r\\n\"\\\\]|\\\\.)*\"/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern:\n            /((?:^|[^\\\\])(?:\\\\{2})*)\\$(?:\\{[\\s\\S]*?\\}|[a-zA-Z_]\\w*|0x[a-fA-F0-9]{2})/,\n          lookbehind: true,\n          inside: {\n            number: /^\\$0x[\\s\\S]{2}$/,\n            variable: /^\\$\\w+$/,\n            'interpolation-punctuation': {\n              pattern: /^\\$\\{|\\}$/,\n              alias: 'punctuation'\n            },\n            expression: {\n              pattern: /[\\s\\S]+/,\n              inside: null // see below\n            }\n          }\n        },\n        string: /[\\s\\S]+/\n      }\n    },\n    keyword: /\\b(?:else|if)\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    'builtin-function': {\n      // a few functions get special highlighting to improve readability\n      pattern:\n        /\\b(?:assert|defined|foreach|import|pool|print|template|tool|toolchain)(?=\\s*\\()/i,\n      alias: 'keyword'\n    },\n    function: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n    constant:\n      /\\b(?:current_cpu|current_os|current_toolchain|default_toolchain|host_cpu|host_os|root_build_dir|root_gen_dir|root_out_dir|target_cpu|target_gen_dir|target_os|target_out_dir)\\b/,\n    number: /-?\\b\\d+\\b/,\n    operator: /[-+!=<>]=?|&&|\\|\\|/,\n    punctuation: /[(){}[\\],.]/\n  }\n  Prism.languages.gn['string-literal'].inside['interpolation'].inside[\n    'expression'\n  ].inside = Prism.languages.gn\n  Prism.languages.gni = Prism.languages.gn\n}\n","'use strict'\n\nmodule.exports = goModule\ngoModule.displayName = 'goModule'\ngoModule.aliases = []\nfunction goModule(Prism) {\n  // https://go.dev/ref/mod#go-mod-file-module\n  Prism.languages['go-mod'] = Prism.languages['go-module'] = {\n    comment: {\n      pattern: /\\/\\/.*/,\n      greedy: true\n    },\n    version: {\n      pattern: /(^|[\\s()[\\],])v\\d+\\.\\d+\\.\\d+(?:[+-][-+.\\w]*)?(?![^\\s()[\\],])/,\n      lookbehind: true,\n      alias: 'number'\n    },\n    'go-version': {\n      pattern: /((?:^|\\s)go\\s+)\\d+(?:\\.\\d+){1,2}/,\n      lookbehind: true,\n      alias: 'number'\n    },\n    keyword: {\n      pattern: /^([ \\t]*)(?:exclude|go|module|replace|require|retract)\\b/m,\n      lookbehind: true\n    },\n    operator: /=>/,\n    punctuation: /[()[\\],]/\n  }\n}\n","'use strict'\n\nmodule.exports = go\ngo.displayName = 'go'\ngo.aliases = []\nfunction go(Prism) {\n  Prism.languages.go = Prism.languages.extend('clike', {\n    string: {\n      pattern: /(^|[^\\\\])\"(?:\\\\.|[^\"\\\\\\r\\n])*\"|`[^`]*`/,\n      lookbehind: true,\n      greedy: true\n    },\n    keyword:\n      /\\b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(?:to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\\b/,\n    boolean: /\\b(?:_|false|iota|nil|true)\\b/,\n    number: [\n      // binary and octal integers\n      /\\b0(?:b[01_]+|o[0-7_]+)i?\\b/i, // hexadecimal integers and floats\n      /\\b0x(?:[a-f\\d_]+(?:\\.[a-f\\d_]*)?|\\.[a-f\\d_]+)(?:p[+-]?\\d+(?:_\\d+)*)?i?(?!\\w)/i, // decimal integers and floats\n      /(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?[\\d_]+)?i?(?!\\w)/i\n    ],\n    operator:\n      /[*\\/%^!=]=?|\\+[=+]?|-[=-]?|\\|[=|]?|&(?:=|&|\\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\\.\\.\\./,\n    builtin:\n      /\\b(?:append|bool|byte|cap|close|complex|complex(?:64|128)|copy|delete|error|float(?:32|64)|u?int(?:8|16|32|64)?|imag|len|make|new|panic|print(?:ln)?|real|recover|rune|string|uintptr)\\b/\n  })\n  Prism.languages.insertBefore('go', 'string', {\n    char: {\n      pattern: /'(?:\\\\.|[^'\\\\\\r\\n]){0,10}'/,\n      greedy: true\n    }\n  })\n  delete Prism.languages.go['class-name']\n}\n","'use strict'\n\nmodule.exports = graphql\ngraphql.displayName = 'graphql'\ngraphql.aliases = []\nfunction graphql(Prism) {\n  Prism.languages.graphql = {\n    comment: /#.*/,\n    description: {\n      pattern:\n        /(?:\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")(?=\\s*[a-z_])/i,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        'language-markdown': {\n          pattern: /(^\"(?:\"\")?)(?!\\1)[\\s\\S]+(?=\\1$)/,\n          lookbehind: true,\n          inside: Prism.languages.markdown\n        }\n      }\n    },\n    string: {\n      pattern: /\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n      greedy: true\n    },\n    number: /(?:\\B-|\\b)\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n    boolean: /\\b(?:false|true)\\b/,\n    variable: /\\$[a-z_]\\w*/i,\n    directive: {\n      pattern: /@[a-z_]\\w*/i,\n      alias: 'function'\n    },\n    'attr-name': {\n      pattern: /\\b[a-z_]\\w*(?=\\s*(?:\\((?:[^()\"]|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")*\\))?:)/i,\n      greedy: true\n    },\n    'atom-input': {\n      pattern: /\\b[A-Z]\\w*Input\\b/,\n      alias: 'class-name'\n    },\n    scalar: /\\b(?:Boolean|Float|ID|Int|String)\\b/,\n    constant: /\\b[A-Z][A-Z_\\d]*\\b/,\n    'class-name': {\n      pattern:\n        /(\\b(?:enum|implements|interface|on|scalar|type|union)\\s+|&\\s*|:\\s*|\\[)[A-Z_]\\w*/,\n      lookbehind: true\n    },\n    fragment: {\n      pattern: /(\\bfragment\\s+|\\.{3}\\s*(?!on\\b))[a-zA-Z_]\\w*/,\n      lookbehind: true,\n      alias: 'function'\n    },\n    'definition-mutation': {\n      pattern: /(\\bmutation\\s+)[a-zA-Z_]\\w*/,\n      lookbehind: true,\n      alias: 'function'\n    },\n    'definition-query': {\n      pattern: /(\\bquery\\s+)[a-zA-Z_]\\w*/,\n      lookbehind: true,\n      alias: 'function'\n    },\n    keyword:\n      /\\b(?:directive|enum|extend|fragment|implements|input|interface|mutation|on|query|repeatable|scalar|schema|subscription|type|union)\\b/,\n    operator: /[!=|&]|\\.{3}/,\n    'property-query': /\\w+(?=\\s*\\()/,\n    object: /\\w+(?=\\s*\\{)/,\n    punctuation: /[!(){}\\[\\]:=,]/,\n    property: /\\w+/\n  }\n  Prism.hooks.add('after-tokenize', function afterTokenizeGraphql(env) {\n    if (env.language !== 'graphql') {\n      return\n    }\n    /**\n     * get the graphql token stream that we want to customize\n     *\n     * @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token\n     * @type {Token[]}\n     */\n    var validTokens = env.tokens.filter(function (token) {\n      return (\n        typeof token !== 'string' &&\n        token.type !== 'comment' &&\n        token.type !== 'scalar'\n      )\n    })\n    var currentIndex = 0\n    /**\n     * Returns whether the token relative to the current index has the given type.\n     *\n     * @param {number} offset\n     * @returns {Token | undefined}\n     */\n    function getToken(offset) {\n      return validTokens[currentIndex + offset]\n    }\n    /**\n     * Returns whether the token relative to the current index has the given type.\n     *\n     * @param {readonly string[]} types\n     * @param {number} [offset=0]\n     * @returns {boolean}\n     */\n    function isTokenType(types, offset) {\n      offset = offset || 0\n      for (var i = 0; i < types.length; i++) {\n        var token = getToken(i + offset)\n        if (!token || token.type !== types[i]) {\n          return false\n        }\n      }\n      return true\n    }\n    /**\n     * Returns the index of the closing bracket to an opening bracket.\n     *\n     * It is assumed that `token[currentIndex - 1]` is an opening bracket.\n     *\n     * If no closing bracket could be found, `-1` will be returned.\n     *\n     * @param {RegExp} open\n     * @param {RegExp} close\n     * @returns {number}\n     */\n    function findClosingBracket(open, close) {\n      var stackHeight = 1\n      for (var i = currentIndex; i < validTokens.length; i++) {\n        var token = validTokens[i]\n        var content = token.content\n        if (token.type === 'punctuation' && typeof content === 'string') {\n          if (open.test(content)) {\n            stackHeight++\n          } else if (close.test(content)) {\n            stackHeight--\n            if (stackHeight === 0) {\n              return i\n            }\n          }\n        }\n      }\n      return -1\n    }\n    /**\n     * Adds an alias to the given token.\n     *\n     * @param {Token} token\n     * @param {string} alias\n     * @returns {void}\n     */\n    function addAlias(token, alias) {\n      var aliases = token.alias\n      if (!aliases) {\n        token.alias = aliases = []\n      } else if (!Array.isArray(aliases)) {\n        token.alias = aliases = [aliases]\n      }\n      aliases.push(alias)\n    }\n    for (; currentIndex < validTokens.length; ) {\n      var startToken = validTokens[currentIndex++] // add special aliases for mutation tokens\n      if (startToken.type === 'keyword' && startToken.content === 'mutation') {\n        // any array of the names of all input variables (if any)\n        var inputVariables = []\n        if (\n          isTokenType(['definition-mutation', 'punctuation']) &&\n          getToken(1).content === '('\n        ) {\n          // definition\n          currentIndex += 2 // skip 'definition-mutation' and 'punctuation'\n          var definitionEnd = findClosingBracket(/^\\($/, /^\\)$/)\n          if (definitionEnd === -1) {\n            continue\n          } // find all input variables\n          for (; currentIndex < definitionEnd; currentIndex++) {\n            var t = getToken(0)\n            if (t.type === 'variable') {\n              addAlias(t, 'variable-input')\n              inputVariables.push(t.content)\n            }\n          }\n          currentIndex = definitionEnd + 1\n        }\n        if (\n          isTokenType(['punctuation', 'property-query']) &&\n          getToken(0).content === '{'\n        ) {\n          currentIndex++ // skip opening bracket\n          addAlias(getToken(0), 'property-mutation')\n          if (inputVariables.length > 0) {\n            var mutationEnd = findClosingBracket(/^\\{$/, /^\\}$/)\n            if (mutationEnd === -1) {\n              continue\n            } // give references to input variables a special alias\n            for (var i = currentIndex; i < mutationEnd; i++) {\n              var varToken = validTokens[i]\n              if (\n                varToken.type === 'variable' &&\n                inputVariables.indexOf(varToken.content) >= 0\n              ) {\n                addAlias(varToken, 'variable-input')\n              }\n            }\n          }\n        }\n      }\n    }\n  })\n}\n","'use strict'\n\nmodule.exports = groovy\ngroovy.displayName = 'groovy'\ngroovy.aliases = []\nfunction groovy(Prism) {\n  Prism.languages.groovy = Prism.languages.extend('clike', {\n    string: [\n      {\n        // https://groovy-lang.org/syntax.html#_dollar_slashy_string\n        pattern:\n          /(\"\"\"|''')(?:[^\\\\]|\\\\[\\s\\S])*?\\1|\\$\\/(?:[^/$]|\\$(?:[/$]|(?![/$]))|\\/(?!\\$))*\\/\\$/,\n        greedy: true\n      },\n      {\n        // TODO: Slash strings (e.g. /foo/) can contain line breaks but this will cause a lot of trouble with\n        // simple division (see JS regex), so find a fix maybe?\n        pattern: /([\"'/])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: true\n      }\n    ],\n    keyword:\n      /\\b(?:abstract|as|assert|boolean|break|byte|case|catch|char|class|const|continue|def|default|do|double|else|enum|extends|final|finally|float|for|goto|if|implements|import|in|instanceof|int|interface|long|native|new|package|private|protected|public|return|short|static|strictfp|super|switch|synchronized|this|throw|throws|trait|transient|try|void|volatile|while)\\b/,\n    number:\n      /\\b(?:0b[01_]+|0x[\\da-f_]+(?:\\.[\\da-f_p\\-]+)?|[\\d_]+(?:\\.[\\d_]+)?(?:e[+-]?\\d+)?)[glidf]?\\b/i,\n    operator: {\n      pattern:\n        /(^|[^.])(?:~|==?~?|\\?[.:]?|\\*(?:[.=]|\\*=?)?|\\.[@&]|\\.\\.<|\\.\\.(?!\\.)|-[-=>]?|\\+[+=]?|!=?|<(?:<=?|=>?)?|>(?:>>?=?|=)?|&[&=]?|\\|[|=]?|\\/=?|\\^=?|%=?)/,\n      lookbehind: true\n    },\n    punctuation: /\\.+|[{}[\\];(),:$]/\n  })\n  Prism.languages.insertBefore('groovy', 'string', {\n    shebang: {\n      pattern: /#!.+/,\n      alias: 'comment'\n    }\n  })\n  Prism.languages.insertBefore('groovy', 'punctuation', {\n    'spock-block': /\\b(?:and|cleanup|expect|given|setup|then|when|where):/\n  })\n  Prism.languages.insertBefore('groovy', 'function', {\n    annotation: {\n      pattern: /(^|[^.])@\\w+/,\n      lookbehind: true,\n      alias: 'punctuation'\n    }\n  }) // Handle string interpolation\n  Prism.hooks.add('wrap', function (env) {\n    if (env.language === 'groovy' && env.type === 'string') {\n      var delimiter = env.content.value[0]\n      if (delimiter != \"'\") {\n        var pattern = /([^\\\\])(?:\\$(?:\\{.*?\\}|[\\w.]+))/\n        if (delimiter === '$') {\n          pattern = /([^\\$])(?:\\$(?:\\{.*?\\}|[\\w.]+))/\n        } // To prevent double HTML-encoding we have to decode env.content first\n        env.content.value = env.content.value\n          .replace(/&lt;/g, '<')\n          .replace(/&amp;/g, '&')\n        env.content = Prism.highlight(env.content.value, {\n          expression: {\n            pattern: pattern,\n            lookbehind: true,\n            inside: Prism.languages.groovy\n          }\n        })\n        env.classes.push(delimiter === '/' ? 'regex' : 'gstring')\n      }\n    }\n  })\n}\n","'use strict'\nvar refractorRuby = require('./ruby.js')\nmodule.exports = haml\nhaml.displayName = 'haml'\nhaml.aliases = []\nfunction haml(Prism) {\n  Prism.register(refractorRuby)\n  /* TODO\nHandle multiline code after tag\n%foo= some |\nmultiline |\ncode |\n*/\n  ;(function (Prism) {\n    Prism.languages.haml = {\n      // Multiline stuff should appear before the rest\n      'multiline-comment': {\n        pattern:\n          /((?:^|\\r?\\n|\\r)([\\t ]*))(?:\\/|-#).*(?:(?:\\r?\\n|\\r)\\2[\\t ].+)*/,\n        lookbehind: true,\n        alias: 'comment'\n      },\n      'multiline-code': [\n        {\n          pattern:\n            /((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*,[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ].*,[\\t ]*)*(?:(?:\\r?\\n|\\r)\\2[\\t ].+)/,\n          lookbehind: true,\n          inside: Prism.languages.ruby\n        },\n        {\n          pattern:\n            /((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*\\|[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ].*\\|[\\t ]*)*/,\n          lookbehind: true,\n          inside: Prism.languages.ruby\n        }\n      ],\n      // See at the end of the file for known filters\n      filter: {\n        pattern:\n          /((?:^|\\r?\\n|\\r)([\\t ]*)):[\\w-]+(?:(?:\\r?\\n|\\r)(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/,\n        lookbehind: true,\n        inside: {\n          'filter-name': {\n            pattern: /^:[\\w-]+/,\n            alias: 'symbol'\n          }\n        }\n      },\n      markup: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)<.+/,\n        lookbehind: true,\n        inside: Prism.languages.markup\n      },\n      doctype: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)!!!(?: .+)?/,\n        lookbehind: true\n      },\n      tag: {\n        // Allows for one nested group of braces\n        pattern:\n          /((?:^|\\r?\\n|\\r)[\\t ]*)[%.#][\\w\\-#.]*[\\w\\-](?:\\([^)]+\\)|\\{(?:\\{[^}]+\\}|[^{}])+\\}|\\[[^\\]]+\\])*[\\/<>]*/,\n        lookbehind: true,\n        inside: {\n          attributes: [\n            {\n              // Lookbehind tries to prevent interpolations from breaking it all\n              // Allows for one nested group of braces\n              pattern: /(^|[^#])\\{(?:\\{[^}]+\\}|[^{}])+\\}/,\n              lookbehind: true,\n              inside: Prism.languages.ruby\n            },\n            {\n              pattern: /\\([^)]+\\)/,\n              inside: {\n                'attr-value': {\n                  pattern: /(=\\s*)(?:\"(?:\\\\.|[^\\\\\"\\r\\n])*\"|[^)\\s]+)/,\n                  lookbehind: true\n                },\n                'attr-name': /[\\w:-]+(?=\\s*!?=|\\s*[,)])/,\n                punctuation: /[=(),]/\n              }\n            },\n            {\n              pattern: /\\[[^\\]]+\\]/,\n              inside: Prism.languages.ruby\n            }\n          ],\n          punctuation: /[<>]/\n        }\n      },\n      code: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*(?:[~-]|[&!]?=)).+/,\n        lookbehind: true,\n        inside: Prism.languages.ruby\n      },\n      // Interpolations in plain text\n      interpolation: {\n        pattern: /#\\{[^}]+\\}/,\n        inside: {\n          delimiter: {\n            pattern: /^#\\{|\\}$/,\n            alias: 'punctuation'\n          },\n          ruby: {\n            pattern: /[\\s\\S]+/,\n            inside: Prism.languages.ruby\n          }\n        }\n      },\n      punctuation: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)[~=\\-&!]+/,\n        lookbehind: true\n      }\n    }\n    var filter_pattern =\n      '((?:^|\\\\r?\\\\n|\\\\r)([\\\\t ]*)):{{filter_name}}(?:(?:\\\\r?\\\\n|\\\\r)(?:\\\\2[\\\\t ].+|\\\\s*?(?=\\\\r?\\\\n|\\\\r)))+' // Non exhaustive list of available filters and associated languages\n    var filters = [\n      'css',\n      {\n        filter: 'coffee',\n        language: 'coffeescript'\n      },\n      'erb',\n      'javascript',\n      'less',\n      'markdown',\n      'ruby',\n      'scss',\n      'textile'\n    ]\n    var all_filters = {}\n    for (var i = 0, l = filters.length; i < l; i++) {\n      var filter = filters[i]\n      filter =\n        typeof filter === 'string'\n          ? {\n              filter: filter,\n              language: filter\n            }\n          : filter\n      if (Prism.languages[filter.language]) {\n        all_filters['filter-' + filter.filter] = {\n          pattern: RegExp(\n            filter_pattern.replace('{{filter_name}}', function () {\n              return filter.filter\n            })\n          ),\n          lookbehind: true,\n          inside: {\n            'filter-name': {\n              pattern: /^:[\\w-]+/,\n              alias: 'symbol'\n            },\n            text: {\n              pattern: /[\\s\\S]+/,\n              alias: [filter.language, 'language-' + filter.language],\n              inside: Prism.languages[filter.language]\n            }\n          }\n        }\n      }\n    }\n    Prism.languages.insertBefore('haml', 'filter', all_filters)\n  })(Prism)\n}\n","'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = handlebars\nhandlebars.displayName = 'handlebars'\nhandlebars.aliases = ['hbs']\nfunction handlebars(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  ;(function (Prism) {\n    Prism.languages.handlebars = {\n      comment: /\\{\\{![\\s\\S]*?\\}\\}/,\n      delimiter: {\n        pattern: /^\\{\\{\\{?|\\}\\}\\}?$/,\n        alias: 'punctuation'\n      },\n      string: /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      number: /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,\n      boolean: /\\b(?:false|true)\\b/,\n      block: {\n        pattern: /^(\\s*(?:~\\s*)?)[#\\/]\\S+?(?=\\s*(?:~\\s*)?$|\\s)/,\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      brackets: {\n        pattern: /\\[[^\\]]+\\]/,\n        inside: {\n          punctuation: /\\[|\\]/,\n          variable: /[\\s\\S]+/\n        }\n      },\n      punctuation: /[!\"#%&':()*+,.\\/;<=>@\\[\\\\\\]^`{|}~]/,\n      variable: /[^!\"#%&'()*+,\\/;<=>@\\[\\\\\\]^`{|}~\\s]+/\n    }\n    Prism.hooks.add('before-tokenize', function (env) {\n      var handlebarsPattern = /\\{\\{\\{[\\s\\S]+?\\}\\}\\}|\\{\\{[\\s\\S]+?\\}\\}/g\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'handlebars',\n        handlebarsPattern\n      )\n    })\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(\n        env,\n        'handlebars'\n      )\n    })\n    Prism.languages.hbs = Prism.languages.handlebars\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = haskell\nhaskell.displayName = 'haskell'\nhaskell.aliases = ['hs']\nfunction haskell(Prism) {\n  Prism.languages.haskell = {\n    comment: {\n      pattern:\n        /(^|[^-!#$%*+=?&@|~.:<>^\\\\\\/])(?:--(?:(?=.)[^-!#$%*+=?&@|~.:<>^\\\\\\/].*|$)|\\{-[\\s\\S]*?-\\})/m,\n      lookbehind: true\n    },\n    char: {\n      pattern:\n        /'(?:[^\\\\']|\\\\(?:[abfnrtv\\\\\"'&]|\\^[A-Z@[\\]^_]|ACK|BEL|BS|CAN|CR|DC1|DC2|DC3|DC4|DEL|DLE|EM|ENQ|EOT|ESC|ETB|ETX|FF|FS|GS|HT|LF|NAK|NUL|RS|SI|SO|SOH|SP|STX|SUB|SYN|US|VT|\\d+|o[0-7]+|x[0-9a-fA-F]+))'/,\n      alias: 'string'\n    },\n    string: {\n      pattern: /\"(?:[^\\\\\"]|\\\\(?:\\S|\\s+\\\\))*\"/,\n      greedy: true\n    },\n    keyword:\n      /\\b(?:case|class|data|deriving|do|else|if|in|infixl|infixr|instance|let|module|newtype|of|primitive|then|type|where)\\b/,\n    'import-statement': {\n      // The imported or hidden names are not included in this import\n      // statement. This is because we want to highlight those exactly like\n      // we do for the names in the program.\n      pattern:\n        /(^[\\t ]*)import\\s+(?:qualified\\s+)?(?:[A-Z][\\w']*)(?:\\.[A-Z][\\w']*)*(?:\\s+as\\s+(?:[A-Z][\\w']*)(?:\\.[A-Z][\\w']*)*)?(?:\\s+hiding\\b)?/m,\n      lookbehind: true,\n      inside: {\n        keyword: /\\b(?:as|hiding|import|qualified)\\b/,\n        punctuation: /\\./\n      }\n    },\n    // These are builtin variables only. Constructors are highlighted later as a constant.\n    builtin:\n      /\\b(?:abs|acos|acosh|all|and|any|appendFile|approxRational|asTypeOf|asin|asinh|atan|atan2|atanh|basicIORun|break|catch|ceiling|chr|compare|concat|concatMap|const|cos|cosh|curry|cycle|decodeFloat|denominator|digitToInt|div|divMod|drop|dropWhile|either|elem|encodeFloat|enumFrom|enumFromThen|enumFromThenTo|enumFromTo|error|even|exp|exponent|fail|filter|flip|floatDigits|floatRadix|floatRange|floor|fmap|foldl|foldl1|foldr|foldr1|fromDouble|fromEnum|fromInt|fromInteger|fromIntegral|fromRational|fst|gcd|getChar|getContents|getLine|group|head|id|inRange|index|init|intToDigit|interact|ioError|isAlpha|isAlphaNum|isAscii|isControl|isDenormalized|isDigit|isHexDigit|isIEEE|isInfinite|isLower|isNaN|isNegativeZero|isOctDigit|isPrint|isSpace|isUpper|iterate|last|lcm|length|lex|lexDigits|lexLitChar|lines|log|logBase|lookup|map|mapM|mapM_|max|maxBound|maximum|maybe|min|minBound|minimum|mod|negate|not|notElem|null|numerator|odd|or|ord|otherwise|pack|pi|pred|primExitWith|print|product|properFraction|putChar|putStr|putStrLn|quot|quotRem|range|rangeSize|read|readDec|readFile|readFloat|readHex|readIO|readInt|readList|readLitChar|readLn|readOct|readParen|readSigned|reads|readsPrec|realToFrac|recip|rem|repeat|replicate|return|reverse|round|scaleFloat|scanl|scanl1|scanr|scanr1|seq|sequence|sequence_|show|showChar|showInt|showList|showLitChar|showParen|showSigned|showString|shows|showsPrec|significand|signum|sin|sinh|snd|sort|span|splitAt|sqrt|subtract|succ|sum|tail|take|takeWhile|tan|tanh|threadToIOResult|toEnum|toInt|toInteger|toLower|toRational|toUpper|truncate|uncurry|undefined|unlines|until|unwords|unzip|unzip3|userError|words|writeFile|zip|zip3|zipWith|zipWith3)\\b/,\n    // decimal integers and floating point numbers | octal integers | hexadecimal integers\n    number: /\\b(?:\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?|0o[0-7]+|0x[0-9a-f]+)\\b/i,\n    operator: [\n      {\n        // infix operator\n        pattern: /`(?:[A-Z][\\w']*\\.)*[_a-z][\\w']*`/,\n        greedy: true\n      },\n      {\n        // function composition\n        pattern: /(\\s)\\.(?=\\s)/,\n        lookbehind: true\n      }, // Most of this is needed because of the meaning of a single '.'.\n      // If it stands alone freely, it is the function composition.\n      // It may also be a separator between a module name and an identifier => no\n      // operator. If it comes together with other special characters it is an\n      // operator too.\n      //\n      // This regex means: /[-!#$%*+=?&@|~.:<>^\\\\\\/]+/ without /\\./.\n      /[-!#$%*+=?&@|~:<>^\\\\\\/][-!#$%*+=?&@|~.:<>^\\\\\\/]*|\\.[-!#$%*+=?&@|~.:<>^\\\\\\/]+/\n    ],\n    // In Haskell, nearly everything is a variable, do not highlight these.\n    hvariable: {\n      pattern: /\\b(?:[A-Z][\\w']*\\.)*[_a-z][\\w']*/,\n      inside: {\n        punctuation: /\\./\n      }\n    },\n    constant: {\n      pattern: /\\b(?:[A-Z][\\w']*\\.)*[A-Z][\\w']*/,\n      inside: {\n        punctuation: /\\./\n      }\n    },\n    punctuation: /[{}[\\];(),.:]/\n  }\n  Prism.languages.hs = Prism.languages.haskell\n}\n","'use strict'\n\nmodule.exports = haxe\nhaxe.displayName = 'haxe'\nhaxe.aliases = []\nfunction haxe(Prism) {\n  Prism.languages.haxe = Prism.languages.extend('clike', {\n    string: {\n      // Strings can be multi-line\n      pattern: /\"(?:[^\"\\\\]|\\\\[\\s\\S])*\"/,\n      greedy: true\n    },\n    'class-name': [\n      {\n        pattern:\n          /(\\b(?:abstract|class|enum|extends|implements|interface|new|typedef)\\s+)[A-Z_]\\w*/,\n        lookbehind: true\n      }, // based on naming convention\n      /\\b[A-Z]\\w*/\n    ],\n    // The final look-ahead prevents highlighting of keywords if expressions such as \"haxe.macro.Expr\"\n    keyword:\n      /\\bthis\\b|\\b(?:abstract|as|break|case|cast|catch|class|continue|default|do|dynamic|else|enum|extends|extern|final|for|from|function|if|implements|import|in|inline|interface|macro|new|null|operator|overload|override|package|private|public|return|static|super|switch|throw|to|try|typedef|untyped|using|var|while)(?!\\.)\\b/,\n    function: {\n      pattern: /\\b[a-z_]\\w*(?=\\s*(?:<[^<>]*>\\s*)?\\()/i,\n      greedy: true\n    },\n    operator: /\\.{3}|\\+\\+|--|&&|\\|\\||->|=>|(?:<<?|>{1,3}|[-+*/%!=&|^])=?|[?:~]/\n  })\n  Prism.languages.insertBefore('haxe', 'string', {\n    'string-interpolation': {\n      pattern: /'(?:[^'\\\\]|\\\\[\\s\\S])*'/,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern: /(^|[^\\\\])\\$(?:\\w+|\\{[^{}]+\\})/,\n          lookbehind: true,\n          inside: {\n            'interpolation-punctuation': {\n              pattern: /^\\$\\{?|\\}$/,\n              alias: 'punctuation'\n            },\n            expression: {\n              pattern: /[\\s\\S]+/,\n              inside: Prism.languages.haxe\n            }\n          }\n        },\n        string: /[\\s\\S]+/\n      }\n    }\n  })\n  Prism.languages.insertBefore('haxe', 'class-name', {\n    regex: {\n      pattern: /~\\/(?:[^\\/\\\\\\r\\n]|\\\\.)+\\/[a-z]*/,\n      greedy: true,\n      inside: {\n        'regex-flags': /\\b[a-z]+$/,\n        'regex-source': {\n          pattern: /^(~\\/)[\\s\\S]+(?=\\/$)/,\n          lookbehind: true,\n          alias: 'language-regex',\n          inside: Prism.languages.regex\n        },\n        'regex-delimiter': /^~\\/|\\/$/\n      }\n    }\n  })\n  Prism.languages.insertBefore('haxe', 'keyword', {\n    preprocessor: {\n      pattern: /#(?:else|elseif|end|if)\\b.*/,\n      alias: 'property'\n    },\n    metadata: {\n      pattern: /@:?[\\w.]+/,\n      alias: 'symbol'\n    },\n    reification: {\n      pattern: /\\$(?:\\w+|(?=\\{))/,\n      alias: 'important'\n    }\n  })\n}\n","'use strict'\n\nmodule.exports = hcl\nhcl.displayName = 'hcl'\nhcl.aliases = []\nfunction hcl(Prism) {\n  Prism.languages.hcl = {\n    comment: /(?:\\/\\/|#).*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    heredoc: {\n      pattern: /<<-?(\\w+\\b)[\\s\\S]*?^[ \\t]*\\1/m,\n      greedy: true,\n      alias: 'string'\n    },\n    keyword: [\n      {\n        pattern:\n          /(?:data|resource)\\s+(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")(?=\\s+\"[\\w-]+\"\\s+\\{)/i,\n        inside: {\n          type: {\n            pattern: /(resource|data|\\s+)(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")/i,\n            lookbehind: true,\n            alias: 'variable'\n          }\n        }\n      },\n      {\n        pattern:\n          /(?:backend|module|output|provider|provisioner|variable)\\s+(?:[\\w-]+|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")\\s+(?=\\{)/i,\n        inside: {\n          type: {\n            pattern:\n              /(backend|module|output|provider|provisioner|variable)\\s+(?:[\\w-]+|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")\\s+/i,\n            lookbehind: true,\n            alias: 'variable'\n          }\n        }\n      },\n      /[\\w-]+(?=\\s+\\{)/\n    ],\n    property: [/[-\\w\\.]+(?=\\s*=(?!=))/, /\"(?:\\\\[\\s\\S]|[^\\\\\"])+\"(?=\\s*[:=])/],\n    string: {\n      pattern:\n        /\"(?:[^\\\\$\"]|\\\\[\\s\\S]|\\$(?:(?=\")|\\$+(?!\\$)|[^\"${])|\\$\\{(?:[^{}\"]|\"(?:[^\\\\\"]|\\\\[\\s\\S])*\")*\\})*\"/,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern: /(^|[^$])\\$\\{(?:[^{}\"]|\"(?:[^\\\\\"]|\\\\[\\s\\S])*\")*\\}/,\n          lookbehind: true,\n          inside: {\n            type: {\n              pattern:\n                /(\\b(?:count|data|local|module|path|self|terraform|var)\\b\\.)[\\w\\*]+/i,\n              lookbehind: true,\n              alias: 'variable'\n            },\n            keyword: /\\b(?:count|data|local|module|path|self|terraform|var)\\b/i,\n            function: /\\w+(?=\\()/,\n            string: {\n              pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n              greedy: true\n            },\n            number: /\\b0x[\\da-f]+\\b|\\b\\d+(?:\\.\\d*)?(?:e[+-]?\\d+)?/i,\n            punctuation: /[!\\$#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~?:]/\n          }\n        }\n      }\n    },\n    number: /\\b0x[\\da-f]+\\b|\\b\\d+(?:\\.\\d*)?(?:e[+-]?\\d+)?/i,\n    boolean: /\\b(?:false|true)\\b/i,\n    punctuation: /[=\\[\\]{}]/\n  }\n}\n","'use strict'\nvar refractorC = require('./c.js')\nmodule.exports = hlsl\nhlsl.displayName = 'hlsl'\nhlsl.aliases = []\nfunction hlsl(Prism) {\n  Prism.register(refractorC)\n  Prism.languages.hlsl = Prism.languages.extend('c', {\n    // Regarding keywords and class names:\n    // The list of all keywords was split into 'keyword' and 'class-name' tokens based on whether they are capitalized.\n    // https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-appendix-keywords\n    // https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-appendix-reserved-words\n    'class-name': [\n      Prism.languages.c['class-name'],\n      /\\b(?:AppendStructuredBuffer|BlendState|Buffer|ByteAddressBuffer|CompileShader|ComputeShader|ConsumeStructuredBuffer|DepthStencilState|DepthStencilView|DomainShader|GeometryShader|Hullshader|InputPatch|LineStream|OutputPatch|PixelShader|PointStream|RWBuffer|RWByteAddressBuffer|RWStructuredBuffer|RWTexture(?:1D|1DArray|2D|2DArray|3D)|RasterizerState|RenderTargetView|SamplerComparisonState|SamplerState|StructuredBuffer|Texture(?:1D|1DArray|2D|2DArray|2DMS|2DMSArray|3D|Cube|CubeArray)|TriangleStream|VertexShader)\\b/\n    ],\n    keyword: [\n      // HLSL keyword\n      /\\b(?:asm|asm_fragment|auto|break|case|catch|cbuffer|centroid|char|class|column_major|compile|compile_fragment|const|const_cast|continue|default|delete|discard|do|dynamic_cast|else|enum|explicit|export|extern|for|friend|fxgroup|goto|groupshared|if|in|inline|inout|interface|line|lineadj|linear|long|matrix|mutable|namespace|new|nointerpolation|noperspective|operator|out|packoffset|pass|pixelfragment|point|precise|private|protected|public|register|reinterpret_cast|return|row_major|sample|sampler|shared|short|signed|sizeof|snorm|stateblock|stateblock_state|static|static_cast|string|struct|switch|tbuffer|technique|technique10|technique11|template|texture|this|throw|triangle|triangleadj|try|typedef|typename|uniform|union|unorm|unsigned|using|vector|vertexfragment|virtual|void|volatile|while)\\b/, // scalar, vector, and matrix types\n      /\\b(?:bool|double|dword|float|half|int|min(?:10float|12int|16(?:float|int|uint))|uint)(?:[1-4](?:x[1-4])?)?\\b/\n    ],\n    // https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-appendix-grammar#floating-point-numbers\n    number:\n      /(?:(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[eE][+-]?\\d+)?|\\b0x[\\da-fA-F]+)[fFhHlLuU]?\\b/,\n    boolean: /\\b(?:false|true)\\b/\n  })\n}\n","'use strict'\n\nmodule.exports = hoon\nhoon.displayName = 'hoon'\nhoon.aliases = []\nfunction hoon(Prism) {\n  Prism.languages.hoon = {\n    comment: {\n      pattern: /::.*/,\n      greedy: true\n    },\n    string: {\n      pattern: /\"[^\"]*\"|'[^']*'/,\n      greedy: true\n    },\n    constant: /%(?:\\.[ny]|[\\w-]+)/,\n    'class-name': /@(?:[a-z0-9-]*[a-z0-9])?|\\*/i,\n    function: /(?:\\+[-+] {2})?(?:[a-z](?:[a-z0-9-]*[a-z0-9])?)/,\n    keyword:\n      /\\.[\\^\\+\\*=\\?]|![><:\\.=\\?!]|=[>|:,\\.\\-\\^<+;/~\\*\\?]|\\?[>|:\\.\\-\\^<\\+&~=@!]|\\|[\\$_%:\\.\\-\\^~\\*=@\\?]|\\+[|\\$\\+\\*]|:[_\\-\\^\\+~\\*]|%[_:\\.\\-\\^\\+~\\*=]|\\^[|:\\.\\-\\+&~\\*=\\?]|\\$[|_%:<>\\-\\^&~@=\\?]|;[:<\\+;\\/~\\*=]|~[>|\\$_%<\\+\\/&=\\?!]|--|==/\n  }\n}\n","'use strict'\n\nmodule.exports = hpkp\nhpkp.displayName = 'hpkp'\nhpkp.aliases = []\nfunction hpkp(Prism) {\n  /**\n   * Original by Scott Helme.\n   *\n   * Reference: https://scotthelme.co.uk/hpkp-cheat-sheet/\n   */\n  Prism.languages.hpkp = {\n    directive: {\n      pattern:\n        /\\b(?:includeSubDomains|max-age|pin-sha256|preload|report-to|report-uri|strict)(?=[\\s;=]|$)/i,\n      alias: 'property'\n    },\n    operator: /=/,\n    punctuation: /;/\n  }\n}\n","'use strict'\n\nmodule.exports = hsts\nhsts.displayName = 'hsts'\nhsts.aliases = []\nfunction hsts(Prism) {\n  /**\n   * Original by Scott Helme.\n   *\n   * Reference: https://scotthelme.co.uk/hsts-cheat-sheet/\n   */\n  Prism.languages.hsts = {\n    directive: {\n      pattern: /\\b(?:includeSubDomains|max-age|preload)(?=[\\s;=]|$)/i,\n      alias: 'property'\n    },\n    operator: /=/,\n    punctuation: /;/\n  }\n}\n","'use strict'\n\nmodule.exports = http\nhttp.displayName = 'http'\nhttp.aliases = []\nfunction http(Prism) {\n  ;(function (Prism) {\n    /**\n     * @param {string} name\n     * @returns {RegExp}\n     */\n    function headerValueOf(name) {\n      return RegExp('(^(?:' + name + '):[ \\t]*(?![ \\t]))[^]+', 'i')\n    }\n    Prism.languages.http = {\n      'request-line': {\n        pattern:\n          /^(?:CONNECT|DELETE|GET|HEAD|OPTIONS|PATCH|POST|PRI|PUT|SEARCH|TRACE)\\s(?:https?:\\/\\/|\\/)\\S*\\sHTTP\\/[\\d.]+/m,\n        inside: {\n          // HTTP Method\n          method: {\n            pattern: /^[A-Z]+\\b/,\n            alias: 'property'\n          },\n          // Request Target e.g. http://example.com, /path/to/file\n          'request-target': {\n            pattern: /^(\\s)(?:https?:\\/\\/|\\/)\\S*(?=\\s)/,\n            lookbehind: true,\n            alias: 'url',\n            inside: Prism.languages.uri\n          },\n          // HTTP Version\n          'http-version': {\n            pattern: /^(\\s)HTTP\\/[\\d.]+/,\n            lookbehind: true,\n            alias: 'property'\n          }\n        }\n      },\n      'response-status': {\n        pattern: /^HTTP\\/[\\d.]+ \\d+ .+/m,\n        inside: {\n          // HTTP Version\n          'http-version': {\n            pattern: /^HTTP\\/[\\d.]+/,\n            alias: 'property'\n          },\n          // Status Code\n          'status-code': {\n            pattern: /^(\\s)\\d+(?=\\s)/,\n            lookbehind: true,\n            alias: 'number'\n          },\n          // Reason Phrase\n          'reason-phrase': {\n            pattern: /^(\\s).+/,\n            lookbehind: true,\n            alias: 'string'\n          }\n        }\n      },\n      header: {\n        pattern: /^[\\w-]+:.+(?:(?:\\r\\n?|\\n)[ \\t].+)*/m,\n        inside: {\n          'header-value': [\n            {\n              pattern: headerValueOf(/Content-Security-Policy/.source),\n              lookbehind: true,\n              alias: ['csp', 'languages-csp'],\n              inside: Prism.languages.csp\n            },\n            {\n              pattern: headerValueOf(/Public-Key-Pins(?:-Report-Only)?/.source),\n              lookbehind: true,\n              alias: ['hpkp', 'languages-hpkp'],\n              inside: Prism.languages.hpkp\n            },\n            {\n              pattern: headerValueOf(/Strict-Transport-Security/.source),\n              lookbehind: true,\n              alias: ['hsts', 'languages-hsts'],\n              inside: Prism.languages.hsts\n            },\n            {\n              pattern: headerValueOf(/[^:]+/.source),\n              lookbehind: true\n            }\n          ],\n          'header-name': {\n            pattern: /^[^:]+/,\n            alias: 'keyword'\n          },\n          punctuation: /^:/\n        }\n      }\n    } // Create a mapping of Content-Type headers to language definitions\n    var langs = Prism.languages\n    var httpLanguages = {\n      'application/javascript': langs.javascript,\n      'application/json': langs.json || langs.javascript,\n      'application/xml': langs.xml,\n      'text/xml': langs.xml,\n      'text/html': langs.html,\n      'text/css': langs.css,\n      'text/plain': langs.plain\n    } // Declare which types can also be suffixes\n    var suffixTypes = {\n      'application/json': true,\n      'application/xml': true\n    }\n    /**\n     * Returns a pattern for the given content type which matches it and any type which has it as a suffix.\n     *\n     * @param {string} contentType\n     * @returns {string}\n     */\n    function getSuffixPattern(contentType) {\n      var suffix = contentType.replace(/^[a-z]+\\//, '')\n      var suffixPattern = '\\\\w+/(?:[\\\\w.-]+\\\\+)+' + suffix + '(?![+\\\\w.-])'\n      return '(?:' + contentType + '|' + suffixPattern + ')'\n    } // Insert each content type parser that has its associated language\n    // currently loaded.\n    var options\n    for (var contentType in httpLanguages) {\n      if (httpLanguages[contentType]) {\n        options = options || {}\n        var pattern = suffixTypes[contentType]\n          ? getSuffixPattern(contentType)\n          : contentType\n        options[contentType.replace(/\\//g, '-')] = {\n          pattern: RegExp(\n            '(' +\n              /content-type:\\s*/.source +\n              pattern +\n              /(?:(?:\\r\\n?|\\n)[\\w-].*)*(?:\\r(?:\\n|(?!\\n))|\\n)/.source +\n              ')' + // This is a little interesting:\n              // The HTTP format spec required 1 empty line before the body to make everything unambiguous.\n              // However, when writing code by hand (e.g. to display on a website) people can forget about this,\n              // so we want to be liberal here. We will allow the empty line to be omitted if the first line of\n              // the body does not start with a [\\w-] character (as headers do).\n              /[^ \\t\\w-][\\s\\S]*/.source,\n            'i'\n          ),\n          lookbehind: true,\n          inside: httpLanguages[contentType]\n        }\n      }\n    }\n    if (options) {\n      Prism.languages.insertBefore('http', 'header', options)\n    }\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = ichigojam\nichigojam.displayName = 'ichigojam'\nichigojam.aliases = []\nfunction ichigojam(Prism) {\n  // according to the offical reference (EN)\n  // https://ichigojam.net/IchigoJam-en.html\n  Prism.languages.ichigojam = {\n    comment: /(?:\\B'|REM)(?:[^\\n\\r]*)/i,\n    string: {\n      pattern: /\"(?:\"\"|[!#$%&'()*,\\/:;<=>?^\\w +\\-.])*\"/,\n      greedy: true\n    },\n    number: /\\B#[0-9A-F]+|\\B`[01]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:E[+-]?\\d+)?/i,\n    keyword:\n      /\\b(?:BEEP|BPS|CASE|CLEAR|CLK|CLO|CLP|CLS|CLT|CLV|CONT|COPY|ELSE|END|FILE|FILES|FOR|GOSUB|GOTO|GSB|IF|INPUT|KBD|LED|LET|LIST|LOAD|LOCATE|LRUN|NEW|NEXT|OUT|PLAY|POKE|PRINT|PWM|REM|RENUM|RESET|RETURN|RIGHT|RTN|RUN|SAVE|SCROLL|SLEEP|SRND|STEP|STOP|SUB|TEMPO|THEN|TO|UART|VIDEO|WAIT)(?:\\$|\\b)/i,\n    function:\n      /\\b(?:ABS|ANA|ASC|BIN|BTN|DEC|END|FREE|HELP|HEX|I2CR|I2CW|IN|INKEY|LEN|LINE|PEEK|RND|SCR|SOUND|STR|TICK|USR|VER|VPEEK|ZER)(?:\\$|\\b)/i,\n    label: /(?:\\B@\\S+)/,\n    operator: /<[=>]?|>=?|\\|\\||&&|[+\\-*\\/=|&^~!]|\\b(?:AND|NOT|OR)\\b/i,\n    punctuation: /[\\[,;:()\\]]/\n  }\n}\n","'use strict'\n\nmodule.exports = icon\nicon.displayName = 'icon'\nicon.aliases = []\nfunction icon(Prism) {\n  Prism.languages.icon = {\n    comment: /#.*/,\n    string: {\n      pattern: /([\"'])(?:(?!\\1)[^\\\\\\r\\n_]|\\\\.|_(?!\\1)(?:\\r\\n|[\\s\\S]))*\\1/,\n      greedy: true\n    },\n    number: /\\b(?:\\d+r[a-z\\d]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b|\\.\\d+\\b/i,\n    'builtin-keyword': {\n      pattern:\n        /&(?:allocated|ascii|clock|collections|cset|current|date|dateline|digits|dump|e|error(?:number|text|value)?|errout|fail|features|file|host|input|lcase|letters|level|line|main|null|output|phi|pi|pos|progname|random|regions|source|storage|subject|time|trace|ucase|version)\\b/,\n      alias: 'variable'\n    },\n    directive: {\n      pattern: /\\$\\w+/,\n      alias: 'builtin'\n    },\n    keyword:\n      /\\b(?:break|by|case|create|default|do|else|end|every|fail|global|if|initial|invocable|link|local|next|not|of|procedure|record|repeat|return|static|suspend|then|to|until|while)\\b/,\n    function: /\\b(?!\\d)\\w+(?=\\s*[({]|\\s*!\\s*\\[)/,\n    operator:\n      /[+-]:(?!=)|(?:[\\/?@^%&]|\\+\\+?|--?|==?=?|~==?=?|\\*\\*?|\\|\\|\\|?|<(?:->?|<?=?)|>>?=?)(?::=)?|:(?:=:?)?|[!.\\\\|~]/,\n    punctuation: /[\\[\\](){},;]/\n  }\n}\n","'use strict'\n\nmodule.exports = icuMessageFormat\nicuMessageFormat.displayName = 'icuMessageFormat'\nicuMessageFormat.aliases = []\nfunction icuMessageFormat(Prism) {\n  // https://unicode-org.github.io/icu/userguide/format_parse/messages/\n  // https://unicode-org.github.io/icu-docs/apidoc/released/icu4j/com/ibm/icu/text/MessageFormat.html\n  ;(function (Prism) {\n    /**\n     * @param {string} source\n     * @param {number} level\n     * @returns {string}\n     */\n    function nested(source, level) {\n      if (level <= 0) {\n        return /[]/.source\n      } else {\n        return source.replace(/<SELF>/g, function () {\n          return nested(source, level - 1)\n        })\n      }\n    }\n    var stringPattern = /'[{}:=,](?:[^']|'')*'(?!')/\n    var escape = {\n      pattern: /''/,\n      greedy: true,\n      alias: 'operator'\n    }\n    var string = {\n      pattern: stringPattern,\n      greedy: true,\n      inside: {\n        escape: escape\n      }\n    }\n    var argumentSource = nested(\n      /\\{(?:[^{}']|'(?![{},'])|''|<STR>|<SELF>)*\\}/.source.replace(\n        /<STR>/g,\n        function () {\n          return stringPattern.source\n        }\n      ),\n      8\n    )\n    var nestedMessage = {\n      pattern: RegExp(argumentSource),\n      inside: {\n        message: {\n          pattern: /^(\\{)[\\s\\S]+(?=\\}$)/,\n          lookbehind: true,\n          inside: null // see below\n        },\n        'message-delimiter': {\n          pattern: /./,\n          alias: 'punctuation'\n        }\n      }\n    }\n    Prism.languages['icu-message-format'] = {\n      argument: {\n        pattern: RegExp(argumentSource),\n        greedy: true,\n        inside: {\n          content: {\n            pattern: /^(\\{)[\\s\\S]+(?=\\}$)/,\n            lookbehind: true,\n            inside: {\n              'argument-name': {\n                pattern: /^(\\s*)[^{}:=,\\s]+/,\n                lookbehind: true\n              },\n              'choice-style': {\n                // https://unicode-org.github.io/icu-docs/apidoc/released/icu4c/classicu_1_1ChoiceFormat.html#details\n                pattern: /^(\\s*,\\s*choice\\s*,\\s*)\\S(?:[\\s\\S]*\\S)?/,\n                lookbehind: true,\n                inside: {\n                  punctuation: /\\|/,\n                  range: {\n                    pattern: /^(\\s*)[+-]?(?:\\d+(?:\\.\\d*)?|\\u221e)\\s*[<#\\u2264]/,\n                    lookbehind: true,\n                    inside: {\n                      operator: /[<#\\u2264]/,\n                      number: /\\S+/\n                    }\n                  },\n                  rest: null // see below\n                }\n              },\n              'plural-style': {\n                // https://unicode-org.github.io/icu-docs/apidoc/released/icu4j/com/ibm/icu/text/PluralFormat.html#:~:text=Patterns%20and%20Their%20Interpretation\n                pattern:\n                  /^(\\s*,\\s*(?:plural|selectordinal)\\s*,\\s*)\\S(?:[\\s\\S]*\\S)?/,\n                lookbehind: true,\n                inside: {\n                  offset: /^offset:\\s*\\d+/,\n                  'nested-message': nestedMessage,\n                  selector: {\n                    pattern: /=\\d+|[^{}:=,\\s]+/,\n                    inside: {\n                      keyword: /^(?:few|many|one|other|two|zero)$/\n                    }\n                  }\n                }\n              },\n              'select-style': {\n                // https://unicode-org.github.io/icu-docs/apidoc/released/icu4j/com/ibm/icu/text/SelectFormat.html#:~:text=Patterns%20and%20Their%20Interpretation\n                pattern: /^(\\s*,\\s*select\\s*,\\s*)\\S(?:[\\s\\S]*\\S)?/,\n                lookbehind: true,\n                inside: {\n                  'nested-message': nestedMessage,\n                  selector: {\n                    pattern: /[^{}:=,\\s]+/,\n                    inside: {\n                      keyword: /^other$/\n                    }\n                  }\n                }\n              },\n              keyword: /\\b(?:choice|plural|select|selectordinal)\\b/,\n              'arg-type': {\n                pattern: /\\b(?:date|duration|number|ordinal|spellout|time)\\b/,\n                alias: 'keyword'\n              },\n              'arg-skeleton': {\n                pattern: /(,\\s*)::[^{}:=,\\s]+/,\n                lookbehind: true\n              },\n              'arg-style': {\n                pattern:\n                  /(,\\s*)(?:currency|full|integer|long|medium|percent|short)(?=\\s*$)/,\n                lookbehind: true\n              },\n              'arg-style-text': {\n                pattern: RegExp(\n                  /(^\\s*,\\s*(?=\\S))/.source +\n                    nested(/(?:[^{}']|'[^']*'|\\{(?:<SELF>)?\\})+/.source, 8) +\n                    '$'\n                ),\n                lookbehind: true,\n                alias: 'string'\n              },\n              punctuation: /,/\n            }\n          },\n          'argument-delimiter': {\n            pattern: /./,\n            alias: 'operator'\n          }\n        }\n      },\n      escape: escape,\n      string: string\n    }\n    nestedMessage.inside.message.inside = Prism.languages['icu-message-format']\n    Prism.languages['icu-message-format'].argument.inside.content.inside[\n      'choice-style'\n    ].inside.rest = Prism.languages['icu-message-format']\n  })(Prism)\n}\n","'use strict'\nvar refractorHaskell = require('./haskell.js')\nmodule.exports = idris\nidris.displayName = 'idris'\nidris.aliases = ['idr']\nfunction idris(Prism) {\n  Prism.register(refractorHaskell)\n  Prism.languages.idris = Prism.languages.extend('haskell', {\n    comment: {\n      pattern: /(?:(?:--|\\|\\|\\|).*$|\\{-[\\s\\S]*?-\\})/m\n    },\n    keyword:\n      /\\b(?:Type|case|class|codata|constructor|corecord|data|do|dsl|else|export|if|implementation|implicit|import|impossible|in|infix|infixl|infixr|instance|interface|let|module|mutual|namespace|of|parameters|partial|postulate|private|proof|public|quoteGoal|record|rewrite|syntax|then|total|using|where|with)\\b/,\n    builtin: undefined\n  })\n  Prism.languages.insertBefore('idris', 'keyword', {\n    'import-statement': {\n      pattern: /(^\\s*import\\s+)(?:[A-Z][\\w']*)(?:\\.[A-Z][\\w']*)*/m,\n      lookbehind: true,\n      inside: {\n        punctuation: /\\./\n      }\n    }\n  })\n  Prism.languages.idr = Prism.languages.idris\n}\n","'use strict'\n\nmodule.exports = iecst\niecst.displayName = 'iecst'\niecst.aliases = []\nfunction iecst(Prism) {\n  Prism.languages.iecst = {\n    comment: [\n      {\n        pattern:\n          /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?(?:\\*\\/|$)|\\(\\*[\\s\\S]*?(?:\\*\\)|$)|\\{[\\s\\S]*?(?:\\}|$))/,\n        lookbehind: true,\n        greedy: true\n      },\n      {\n        pattern: /(^|[^\\\\:])\\/\\/.*/,\n        lookbehind: true,\n        greedy: true\n      }\n    ],\n    string: {\n      pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true\n    },\n    keyword: [\n      /\\b(?:END_)?(?:PROGRAM|CONFIGURATION|INTERFACE|FUNCTION_BLOCK|FUNCTION|ACTION|TRANSITION|TYPE|STRUCT|(?:INITIAL_)?STEP|NAMESPACE|LIBRARY|CHANNEL|FOLDER|RESOURCE|VAR_(?:ACCESS|CONFIG|EXTERNAL|GLOBAL|INPUT|IN_OUT|OUTPUT|TEMP)|VAR|METHOD|PROPERTY)\\b/i,\n      /\\b(?:AT|BY|(?:END_)?(?:CASE|FOR|IF|REPEAT|WHILE)|CONSTANT|CONTINUE|DO|ELSE|ELSIF|EXIT|EXTENDS|FROM|GET|GOTO|IMPLEMENTS|JMP|NON_RETAIN|OF|PRIVATE|PROTECTED|PUBLIC|RETAIN|RETURN|SET|TASK|THEN|TO|UNTIL|USING|WITH|__CATCH|__ENDTRY|__FINALLY|__TRY)\\b/\n    ],\n    'class-name':\n      /\\b(?:ANY|ARRAY|BOOL|BYTE|U?(?:D|L|S)?INT|(?:D|L)?WORD|DATE(?:_AND_TIME)?|DT|L?REAL|POINTER|STRING|TIME(?:_OF_DAY)?|TOD)\\b/,\n    address: {\n      pattern: /%[IQM][XBWDL][\\d.]*|%[IQ][\\d.]*/,\n      alias: 'symbol'\n    },\n    number:\n      /\\b(?:16#[\\da-f]+|2#[01_]+|0x[\\da-f]+)\\b|\\b(?:D|DT|T|TOD)#[\\d_shmd:]*|\\b[A-Z]*#[\\d.,_]*|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n    boolean: /\\b(?:FALSE|NULL|TRUE)\\b/,\n    operator:\n      /S?R?:?=>?|&&?|\\*\\*?|<[=>]?|>=?|[-:^/+#]|\\b(?:AND|EQ|EXPT|GE|GT|LE|LT|MOD|NE|NOT|OR|XOR)\\b/,\n    function: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n    punctuation: /[()[\\].,;]/\n  }\n}\n","'use strict'\n\nmodule.exports = ignore\nignore.displayName = 'ignore'\nignore.aliases = ['gitignore', 'hgignore', 'npmignore']\nfunction ignore(Prism) {\n  ;(function (Prism) {\n    Prism.languages.ignore = {\n      // https://git-scm.com/docs/gitignore\n      comment: /^#.*/m,\n      entry: {\n        pattern: /\\S(?:.*(?:(?:\\\\ )|\\S))?/,\n        alias: 'string',\n        inside: {\n          operator: /^!|\\*\\*?|\\?/,\n          regex: {\n            pattern: /(^|[^\\\\])\\[[^\\[\\]]*\\]/,\n            lookbehind: true\n          },\n          punctuation: /\\//\n        }\n      }\n    }\n    Prism.languages.gitignore = Prism.languages.ignore\n    Prism.languages.hgignore = Prism.languages.ignore\n    Prism.languages.npmignore = Prism.languages.ignore\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = inform7\ninform7.displayName = 'inform7'\ninform7.aliases = []\nfunction inform7(Prism) {\n  Prism.languages.inform7 = {\n    string: {\n      pattern: /\"[^\"]*\"/,\n      inside: {\n        substitution: {\n          pattern: /\\[[^\\[\\]]+\\]/,\n          inside: {\n            delimiter: {\n              pattern: /\\[|\\]/,\n              alias: 'punctuation'\n            } // See rest below\n          }\n        }\n      }\n    },\n    comment: {\n      pattern: /\\[[^\\[\\]]+\\]/,\n      greedy: true\n    },\n    title: {\n      pattern: /^[ \\t]*(?:book|chapter|part(?! of)|section|table|volume)\\b.+/im,\n      alias: 'important'\n    },\n    number: {\n      pattern:\n        /(^|[^-])(?:\\b\\d+(?:\\.\\d+)?(?:\\^\\d+)?(?:(?!\\d)\\w+)?|\\b(?:eight|eleven|five|four|nine|one|seven|six|ten|three|twelve|two))\\b(?!-)/i,\n      lookbehind: true\n    },\n    verb: {\n      pattern:\n        /(^|[^-])\\b(?:answering|applying to|are|asking|attacking|be(?:ing)?|burning|buying|called|carries|carry(?! out)|carrying|climbing|closing|conceal(?:ing|s)?|consulting|contain(?:ing|s)?|cutting|drinking|dropping|eating|enclos(?:es?|ing)|entering|examining|exiting|getting|giving|going|ha(?:s|ve|ving)|hold(?:ing|s)?|impl(?:ies|y)|incorporat(?:es?|ing)|inserting|is|jumping|kissing|listening|locking|looking|mean(?:ing|s)?|opening|provid(?:es?|ing)|pulling|pushing|putting|relat(?:es?|ing)|removing|searching|see(?:ing|s)?|setting|showing|singing|sleeping|smelling|squeezing|support(?:ing|s)?|swearing|switching|taking|tasting|telling|thinking|throwing|touching|turning|tying|unlock(?:ing|s)?|var(?:ies|y|ying)|waiting|waking|waving|wear(?:ing|s)?)\\b(?!-)/i,\n      lookbehind: true,\n      alias: 'operator'\n    },\n    keyword: {\n      pattern:\n        /(^|[^-])\\b(?:after|before|carry out|check|continue the action|definition(?= *:)|do nothing|else|end (?:if|the story|unless)|every turn|if|include|instead(?: of)?|let|move|no|now|otherwise|repeat|report|resume the story|rule for|running through|say(?:ing)?|stop the action|test|try(?:ing)?|understand|unless|use|when|while|yes)\\b(?!-)/i,\n      lookbehind: true\n    },\n    property: {\n      pattern:\n        /(^|[^-])\\b(?:adjacent(?! to)|carried|closed|concealed|contained|dark|described|edible|empty|enclosed|enterable|even|female|fixed in place|full|handled|held|improper-named|incorporated|inedible|invisible|lighted|lit|lock(?:able|ed)|male|marked for listing|mentioned|negative|neuter|non-(?:empty|full|recurring)|odd|opaque|open(?:able)?|plural-named|portable|positive|privately-named|proper-named|provided|publically-named|pushable between rooms|recurring|related|rubbing|scenery|seen|singular-named|supported|swinging|switch(?:able|ed(?: off| on)?)|touch(?:able|ed)|transparent|unconcealed|undescribed|unlit|unlocked|unmarked for listing|unmentioned|unopenable|untouchable|unvisited|variable|visible|visited|wearable|worn)\\b(?!-)/i,\n      lookbehind: true,\n      alias: 'symbol'\n    },\n    position: {\n      pattern:\n        /(^|[^-])\\b(?:above|adjacent to|back side of|below|between|down|east|everywhere|front side|here|in|inside(?: from)?|north(?:east|west)?|nowhere|on(?: top of)?|other side|outside(?: from)?|parts? of|regionally in|south(?:east|west)?|through|up|west|within)\\b(?!-)/i,\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    type: {\n      pattern:\n        /(^|[^-])\\b(?:actions?|activit(?:ies|y)|actors?|animals?|backdrops?|containers?|devices?|directions?|doors?|holders?|kinds?|lists?|m[ae]n|nobody|nothing|nouns?|numbers?|objects?|people|persons?|player(?:'s holdall)?|regions?|relations?|rooms?|rule(?:book)?s?|scenes?|someone|something|supporters?|tables?|texts?|things?|time|vehicles?|wom[ae]n)\\b(?!-)/i,\n      lookbehind: true,\n      alias: 'variable'\n    },\n    punctuation: /[.,:;(){}]/\n  }\n  Prism.languages.inform7['string'].inside['substitution'].inside.rest =\n    Prism.languages.inform7 // We don't want the remaining text in the substitution to be highlighted as the string.\n  Prism.languages.inform7['string'].inside['substitution'].inside.rest.text = {\n    pattern: /\\S(?:\\s*\\S)*/,\n    alias: 'comment'\n  }\n}\n","'use strict'\n\nmodule.exports = ini\nini.displayName = 'ini'\nini.aliases = []\nfunction ini(Prism) {\n  Prism.languages.ini = {\n    /**\n     * The component mimics the behavior of the Win32 API parser.\n     *\n     * @see {@link https://github.com/PrismJS/prism/issues/2775#issuecomment-787477723}\n     */\n    comment: {\n      pattern: /(^[ \\f\\t\\v]*)[#;][^\\n\\r]*/m,\n      lookbehind: true\n    },\n    section: {\n      pattern: /(^[ \\f\\t\\v]*)\\[[^\\n\\r\\]]*\\]?/m,\n      lookbehind: true,\n      inside: {\n        'section-name': {\n          pattern: /(^\\[[ \\f\\t\\v]*)[^ \\f\\t\\v\\]]+(?:[ \\f\\t\\v]+[^ \\f\\t\\v\\]]+)*/,\n          lookbehind: true,\n          alias: 'selector'\n        },\n        punctuation: /\\[|\\]/\n      }\n    },\n    key: {\n      pattern:\n        /(^[ \\f\\t\\v]*)[^ \\f\\n\\r\\t\\v=]+(?:[ \\f\\t\\v]+[^ \\f\\n\\r\\t\\v=]+)*(?=[ \\f\\t\\v]*=)/m,\n      lookbehind: true,\n      alias: 'attr-name'\n    },\n    value: {\n      pattern: /(=[ \\f\\t\\v]*)[^ \\f\\n\\r\\t\\v]+(?:[ \\f\\t\\v]+[^ \\f\\n\\r\\t\\v]+)*/,\n      lookbehind: true,\n      alias: 'attr-value',\n      inside: {\n        'inner-value': {\n          pattern: /^(\"|').+(?=\\1$)/,\n          lookbehind: true\n        }\n      }\n    },\n    punctuation: /=/\n  }\n}\n","'use strict'\n\nmodule.exports = io\nio.displayName = 'io'\nio.aliases = []\nfunction io(Prism) {\n  Prism.languages.io = {\n    comment: {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?(?:\\*\\/|$)|\\/\\/.*|#.*)/,\n      lookbehind: true,\n      greedy: true\n    },\n    'triple-quoted-string': {\n      pattern: /\"\"\"(?:\\\\[\\s\\S]|(?!\"\"\")[^\\\\])*\"\"\"/,\n      greedy: true,\n      alias: 'string'\n    },\n    string: {\n      pattern: /\"(?:\\\\.|[^\\\\\\r\\n\"])*\"/,\n      greedy: true\n    },\n    keyword:\n      /\\b(?:activate|activeCoroCount|asString|block|break|call|catch|clone|collectGarbage|compileString|continue|do|doFile|doMessage|doString|else|elseif|exit|for|foreach|forward|getEnvironmentVariable|getSlot|hasSlot|if|ifFalse|ifNil|ifNilEval|ifTrue|isActive|isNil|isResumable|list|message|method|parent|pass|pause|perform|performWithArgList|print|println|proto|raise|raiseResumable|removeSlot|resend|resume|schedulerSleepSeconds|self|sender|setSchedulerSleepSeconds|setSlot|shallowCopy|slotNames|super|system|then|thisBlock|thisContext|try|type|uniqueId|updateSlot|wait|while|write|yield)\\b/,\n    builtin:\n      /\\b(?:Array|AudioDevice|AudioMixer|BigNum|Block|Box|Buffer|CFunction|CGI|Color|Curses|DBM|DNSResolver|DOConnection|DOProxy|DOServer|Date|Directory|Duration|DynLib|Error|Exception|FFT|File|Fnmatch|Font|Future|GL|GLE|GLScissor|GLU|GLUCylinder|GLUQuadric|GLUSphere|GLUT|Host|Image|Importer|LinkList|List|Lobby|Locals|MD5|MP3Decoder|MP3Encoder|Map|Message|Movie|Notification|Number|Object|OpenGL|Point|Protos|Random|Regex|SGML|SGMLElement|SGMLParser|SQLite|Sequence|Server|ShowMessage|SleepyCat|SleepyCatCursor|Socket|SocketManager|Sound|Soup|Store|String|Tree|UDPSender|UPDReceiver|URL|User|Warning|WeakLink)\\b/,\n    boolean: /\\b(?:false|nil|true)\\b/,\n    number: /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e-?\\d+)?/i,\n    operator:\n      /[=!*/%+\\-^&|]=|>>?=?|<<?=?|:?:?=|\\+\\+?|--?|\\*\\*?|\\/\\/?|%|\\|\\|?|&&?|\\b(?:and|not|or|return)\\b|@@?|\\?\\??|\\.\\./,\n    punctuation: /[{}[\\];(),.:]/\n  }\n}\n","'use strict'\n\nmodule.exports = j\nj.displayName = 'j'\nj.aliases = []\nfunction j(Prism) {\n  Prism.languages.j = {\n    comment: {\n      pattern: /\\bNB\\..*/,\n      greedy: true\n    },\n    string: {\n      pattern: /'(?:''|[^'\\r\\n])*'/,\n      greedy: true\n    },\n    keyword:\n      /\\b(?:(?:CR|LF|adverb|conjunction|def|define|dyad|monad|noun|verb)\\b|(?:assert|break|case|catch[dt]?|continue|do|else|elseif|end|fcase|for|for_\\w+|goto_\\w+|if|label_\\w+|return|select|throw|try|while|whilst)\\.)/,\n    verb: {\n      // Negative look-ahead prevents bad highlighting\n      // of ^: ;. =. =: !. !:\n      pattern:\n        /(?!\\^:|;\\.|[=!][.:])(?:\\{(?:\\.|::?)?|p(?:\\.\\.?|:)|[=!\\]]|[<>+*\\-%$|,#][.:]?|[?^]\\.?|[;\\[]:?|[~}\"i][.:]|[ACeEIjLor]\\.|(?:[_\\/\\\\qsux]|_?\\d):)/,\n      alias: 'keyword'\n    },\n    number:\n      /\\b_?(?:(?!\\d:)\\d+(?:\\.\\d+)?(?:(?:ad|ar|[ejpx])_?\\d+(?:\\.\\d+)?)*(?:b_?[\\da-z]+(?:\\.[\\da-z]+)?)?|_\\b(?!\\.))/,\n    adverb: {\n      pattern: /[~}]|[\\/\\\\]\\.?|[bfM]\\.|t[.:]/,\n      alias: 'builtin'\n    },\n    operator: /[=a][.:]|_\\./,\n    conjunction: {\n      pattern: /&(?:\\.:?|:)?|[.:@][.:]?|[!D][.:]|[;dHT]\\.|`:?|[\\^LS]:|\"/,\n      alias: 'variable'\n    },\n    punctuation: /[()]/\n  }\n}\n","'use strict'\n\nmodule.exports = java\njava.displayName = 'java'\njava.aliases = []\nfunction java(Prism) {\n  ;(function (Prism) {\n    var keywords =\n      /\\b(?:abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|exports|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|module|native|new|non-sealed|null|open|opens|package|permits|private|protected|provides|public|record|requires|return|sealed|short|static|strictfp|super|switch|synchronized|this|throw|throws|to|transient|transitive|try|uses|var|void|volatile|while|with|yield)\\b/ // full package (optional) + parent classes (optional)\n    var classNamePrefix = /(^|[^\\w.])(?:[a-z]\\w*\\s*\\.\\s*)*(?:[A-Z]\\w*\\s*\\.\\s*)*/\n      .source // based on the java naming conventions\n    var className = {\n      pattern: RegExp(classNamePrefix + /[A-Z](?:[\\d_A-Z]*[a-z]\\w*)?\\b/.source),\n      lookbehind: true,\n      inside: {\n        namespace: {\n          pattern: /^[a-z]\\w*(?:\\s*\\.\\s*[a-z]\\w*)*(?:\\s*\\.)?/,\n          inside: {\n            punctuation: /\\./\n          }\n        },\n        punctuation: /\\./\n      }\n    }\n    Prism.languages.java = Prism.languages.extend('clike', {\n      string: {\n        pattern: /(^|[^\\\\])\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n        lookbehind: true,\n        greedy: true\n      },\n      'class-name': [\n        className,\n        {\n          // variables and parameters\n          // this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n          pattern: RegExp(\n            classNamePrefix + /[A-Z]\\w*(?=\\s+\\w+\\s*[;,=()])/.source\n          ),\n          lookbehind: true,\n          inside: className.inside\n        }\n      ],\n      keyword: keywords,\n      function: [\n        Prism.languages.clike.function,\n        {\n          pattern: /(::\\s*)[a-z_]\\w*/,\n          lookbehind: true\n        }\n      ],\n      number:\n        /\\b0b[01][01_]*L?\\b|\\b0x(?:\\.[\\da-f_p+-]+|[\\da-f_]+(?:\\.[\\da-f_p+-]+)?)\\b|(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfl]?/i,\n      operator: {\n        pattern:\n          /(^|[^.])(?:<<=?|>>>?=?|->|--|\\+\\+|&&|\\|\\||::|[?:~]|[-+*/%&|^!=<>]=?)/m,\n        lookbehind: true\n      }\n    })\n    Prism.languages.insertBefore('java', 'string', {\n      'triple-quoted-string': {\n        // http://openjdk.java.net/jeps/355#Description\n        pattern: /\"\"\"[ \\t]*[\\r\\n](?:(?:\"|\"\")?(?:\\\\.|[^\"\\\\]))*\"\"\"/,\n        greedy: true,\n        alias: 'string'\n      },\n      char: {\n        pattern: /'(?:\\\\.|[^'\\\\\\r\\n]){1,6}'/,\n        greedy: true\n      }\n    })\n    Prism.languages.insertBefore('java', 'class-name', {\n      annotation: {\n        pattern: /(^|[^.])@\\w+(?:\\s*\\.\\s*\\w+)*/,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      generics: {\n        pattern:\n          /<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&))*>)*>)*>)*>/,\n        inside: {\n          'class-name': className,\n          keyword: keywords,\n          punctuation: /[<>(),.:]/,\n          operator: /[?&|]/\n        }\n      },\n      namespace: {\n        pattern: RegExp(\n          /(\\b(?:exports|import(?:\\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\\s+)(?!<keyword>)[a-z]\\w*(?:\\.[a-z]\\w*)*\\.?/.source.replace(\n            /<keyword>/g,\n            function () {\n              return keywords.source\n            }\n          )\n        ),\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      }\n    })\n  })(Prism)\n}\n","'use strict'\nvar refractorJava = require('./java.js')\nvar refractorJavadoclike = require('./javadoclike.js')\nmodule.exports = javadoc\njavadoc.displayName = 'javadoc'\njavadoc.aliases = []\nfunction javadoc(Prism) {\n  Prism.register(refractorJava)\n  Prism.register(refractorJavadoclike)\n  ;(function (Prism) {\n    var codeLinePattern = /(^(?:[\\t ]*(?:\\*\\s*)*))[^*\\s].*$/m\n    var memberReference = /#\\s*\\w+(?:\\s*\\([^()]*\\))?/.source\n    var reference =\n      /(?:\\b[a-zA-Z]\\w+\\s*\\.\\s*)*\\b[A-Z]\\w*(?:\\s*<mem>)?|<mem>/.source.replace(\n        /<mem>/g,\n        function () {\n          return memberReference\n        }\n      )\n    Prism.languages.javadoc = Prism.languages.extend('javadoclike', {})\n    Prism.languages.insertBefore('javadoc', 'keyword', {\n      reference: {\n        pattern: RegExp(\n          /(@(?:exception|link|linkplain|see|throws|value)\\s+(?:\\*\\s*)?)/\n            .source +\n            '(?:' +\n            reference +\n            ')'\n        ),\n        lookbehind: true,\n        inside: {\n          function: {\n            pattern: /(#\\s*)\\w+(?=\\s*\\()/,\n            lookbehind: true\n          },\n          field: {\n            pattern: /(#\\s*)\\w+/,\n            lookbehind: true\n          },\n          namespace: {\n            pattern: /\\b(?:[a-z]\\w*\\s*\\.\\s*)+/,\n            inside: {\n              punctuation: /\\./\n            }\n          },\n          'class-name': /\\b[A-Z]\\w*/,\n          keyword: Prism.languages.java.keyword,\n          punctuation: /[#()[\\],.]/\n        }\n      },\n      'class-name': {\n        // @param <T> the first generic type parameter\n        pattern: /(@param\\s+)<[A-Z]\\w*>/,\n        lookbehind: true,\n        inside: {\n          punctuation: /[.<>]/\n        }\n      },\n      'code-section': [\n        {\n          pattern:\n            /(\\{@code\\s+(?!\\s))(?:[^\\s{}]|\\s+(?![\\s}])|\\{(?:[^{}]|\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})*\\})*\\})+(?=\\s*\\})/,\n          lookbehind: true,\n          inside: {\n            code: {\n              // there can't be any HTML inside of {@code} tags\n              pattern: codeLinePattern,\n              lookbehind: true,\n              inside: Prism.languages.java,\n              alias: 'language-java'\n            }\n          }\n        },\n        {\n          pattern:\n            /(<(code|pre|tt)>(?!<code>)\\s*)\\S(?:\\S|\\s+\\S)*?(?=\\s*<\\/\\2>)/,\n          lookbehind: true,\n          inside: {\n            line: {\n              pattern: codeLinePattern,\n              lookbehind: true,\n              inside: {\n                // highlight HTML tags and entities\n                tag: Prism.languages.markup.tag,\n                entity: Prism.languages.markup.entity,\n                code: {\n                  // everything else is Java code\n                  pattern: /.+/,\n                  inside: Prism.languages.java,\n                  alias: 'language-java'\n                }\n              }\n            }\n          }\n        }\n      ],\n      tag: Prism.languages.markup.tag,\n      entity: Prism.languages.markup.entity\n    })\n    Prism.languages.javadoclike.addSupport('java', Prism.languages.javadoc)\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = javadoclike\njavadoclike.displayName = 'javadoclike'\njavadoclike.aliases = []\nfunction javadoclike(Prism) {\n  ;(function (Prism) {\n    var javaDocLike = (Prism.languages.javadoclike = {\n      parameter: {\n        pattern:\n          /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:arg|arguments|param)\\s+)\\w+/m,\n        lookbehind: true\n      },\n      keyword: {\n        // keywords are the first word in a line preceded be an `@` or surrounded by curly braces.\n        // @word, {@word}\n        pattern: /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,\n        lookbehind: true\n      },\n      punctuation: /[{}]/\n    })\n    /**\n     * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.\n     *\n     * @param {string} lang the language add doc comment support to.\n     * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.\n     */\n    function docCommentSupport(lang, callback) {\n      var tokenName = 'doc-comment'\n      var grammar = Prism.languages[lang]\n      if (!grammar) {\n        return\n      }\n      var token = grammar[tokenName]\n      if (!token) {\n        // add doc comment: /** */\n        var definition = {}\n        definition[tokenName] = {\n          pattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,\n          lookbehind: true,\n          alias: 'comment'\n        }\n        grammar = Prism.languages.insertBefore(lang, 'comment', definition)\n        token = grammar[tokenName]\n      }\n      if (token instanceof RegExp) {\n        // convert regex to object\n        token = grammar[tokenName] = {\n          pattern: token\n        }\n      }\n      if (Array.isArray(token)) {\n        for (var i = 0, l = token.length; i < l; i++) {\n          if (token[i] instanceof RegExp) {\n            token[i] = {\n              pattern: token[i]\n            }\n          }\n          callback(token[i])\n        }\n      } else {\n        callback(token)\n      }\n    }\n    /**\n     * Adds doc-comment support to the given languages for the given documentation language.\n     *\n     * @param {string[]|string} languages\n     * @param {Object} docLanguage\n     */\n    function addSupport(languages, docLanguage) {\n      if (typeof languages === 'string') {\n        languages = [languages]\n      }\n      languages.forEach(function (lang) {\n        docCommentSupport(lang, function (pattern) {\n          if (!pattern.inside) {\n            pattern.inside = {}\n          }\n          pattern.inside.rest = docLanguage\n        })\n      })\n    }\n    Object.defineProperty(javaDocLike, 'addSupport', {\n      value: addSupport\n    })\n    javaDocLike.addSupport(['java', 'javascript', 'php'], javaDocLike)\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = javascript\njavascript.displayName = 'javascript'\njavascript.aliases = ['js']\nfunction javascript(Prism) {\n  Prism.languages.javascript = Prism.languages.extend('clike', {\n    'class-name': [\n      Prism.languages.clike['class-name'],\n      {\n        pattern:\n          /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$A-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\.(?:constructor|prototype))/,\n        lookbehind: true\n      }\n    ],\n    keyword: [\n      {\n        pattern: /((?:^|\\})\\s*)catch\\b/,\n        lookbehind: true\n      },\n      {\n        pattern:\n          /(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|assert(?=\\s*\\{)|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\\s*(?:\\{|$))|for|from(?=\\s*(?:['\"]|$))|function|(?:get|set)(?=\\s*(?:[#\\[$\\w\\xA0-\\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n        lookbehind: true\n      }\n    ],\n    // Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\n    function:\n      /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n    number: {\n      pattern: RegExp(\n        /(^|[^\\w$])/.source +\n          '(?:' + // constant\n          (/NaN|Infinity/.source +\n            '|' + // binary integer\n            /0[bB][01]+(?:_[01]+)*n?/.source +\n            '|' + // octal integer\n            /0[oO][0-7]+(?:_[0-7]+)*n?/.source +\n            '|' + // hexadecimal integer\n            /0[xX][\\dA-Fa-f]+(?:_[\\dA-Fa-f]+)*n?/.source +\n            '|' + // decimal bigint\n            /\\d+(?:_\\d+)*n/.source +\n            '|' + // decimal number (integer or float) but no bigint\n            /(?:\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\.\\d+(?:_\\d+)*)(?:[Ee][+-]?\\d+(?:_\\d+)*)?/\n              .source) +\n          ')' +\n          /(?![\\w$])/.source\n      ),\n      lookbehind: true\n    },\n    operator:\n      /--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/\n  })\n  Prism.languages.javascript['class-name'][0].pattern =\n    /(\\b(?:class|extends|implements|instanceof|interface|new)\\s+)[\\w.\\\\]+/\n  Prism.languages.insertBefore('javascript', 'keyword', {\n    regex: {\n      // eslint-disable-next-line regexp/no-dupe-characters-character-class\n      pattern:\n        /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)\\/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?:$|[\\r\\n,.;:})\\]]|\\/\\/))/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'regex-source': {\n          pattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,\n          lookbehind: true,\n          alias: 'language-regex',\n          inside: Prism.languages.regex\n        },\n        'regex-delimiter': /^\\/|\\/$/,\n        'regex-flags': /^[a-z]+$/\n      }\n    },\n    // This must be declared before keyword because we use \"function\" inside the look-forward\n    'function-variable': {\n      pattern:\n        /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/,\n      alias: 'function'\n    },\n    parameter: [\n      {\n        pattern:\n          /(function(?:\\s+(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)?\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\))/,\n        lookbehind: true,\n        inside: Prism.languages.javascript\n      },\n      {\n        pattern:\n          /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$a-z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=>)/i,\n        lookbehind: true,\n        inside: Prism.languages.javascript\n      },\n      {\n        pattern:\n          /(\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*=>)/,\n        lookbehind: true,\n        inside: Prism.languages.javascript\n      },\n      {\n        pattern:\n          /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*)\\(\\s*|\\]\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*\\{)/,\n        lookbehind: true,\n        inside: Prism.languages.javascript\n      }\n    ],\n    constant: /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n  })\n  Prism.languages.insertBefore('javascript', 'string', {\n    hashbang: {\n      pattern: /^#!.*/,\n      greedy: true,\n      alias: 'comment'\n    },\n    'template-string': {\n      pattern:\n        /`(?:\\\\[\\s\\S]|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}|(?!\\$\\{)[^\\\\`])*`/,\n      greedy: true,\n      inside: {\n        'template-punctuation': {\n          pattern: /^`|`$/,\n          alias: 'string'\n        },\n        interpolation: {\n          pattern:\n            /((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\n          lookbehind: true,\n          inside: {\n            'interpolation-punctuation': {\n              pattern: /^\\$\\{|\\}$/,\n              alias: 'punctuation'\n            },\n            rest: Prism.languages.javascript\n          }\n        },\n        string: /[\\s\\S]+/\n      }\n    },\n    'string-property': {\n      pattern:\n        /((?:^|[,{])[ \\t]*)([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\2)[^\\\\\\r\\n])*\\2(?=\\s*:)/m,\n      lookbehind: true,\n      greedy: true,\n      alias: 'property'\n    }\n  })\n  Prism.languages.insertBefore('javascript', 'operator', {\n    'literal-property': {\n      pattern:\n        /((?:^|[,{])[ \\t]*)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*:)/m,\n      lookbehind: true,\n      alias: 'property'\n    }\n  })\n  if (Prism.languages.markup) {\n    Prism.languages.markup.tag.addInlined('script', 'javascript') // add attribute support for all DOM events.\n    // https://developer.mozilla.org/en-US/docs/Web/Events#Standard_events\n    Prism.languages.markup.tag.addAttribute(\n      /on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/\n        .source,\n      'javascript'\n    )\n  }\n  Prism.languages.js = Prism.languages.javascript\n}\n","'use strict'\n\nmodule.exports = javastacktrace\njavastacktrace.displayName = 'javastacktrace'\njavastacktrace.aliases = []\nfunction javastacktrace(Prism) {\n  // Specification:\n  // https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/lang/Throwable.html#printStackTrace()\n  Prism.languages.javastacktrace = {\n    // java.sql.SQLException: Violation of unique constraint MY_ENTITY_UK_1: duplicate value(s) for column(s) MY_COLUMN in statement [...]\n    // Caused by: java.sql.SQLException: Violation of unique constraint MY_ENTITY_UK_1: duplicate value(s) for column(s) MY_COLUMN in statement [...]\n    // Caused by: com.example.myproject.MyProjectServletException\n    // Caused by: MidLevelException: LowLevelException\n    // Suppressed: Resource$CloseFailException: Resource ID = 0\n    summary: {\n      pattern:\n        /^([\\t ]*)(?:(?:Caused by:|Suppressed:|Exception in thread \"[^\"]*\")[\\t ]+)?[\\w$.]+(?::.*)?$/m,\n      lookbehind: true,\n      inside: {\n        keyword: {\n          pattern:\n            /^([\\t ]*)(?:(?:Caused by|Suppressed)(?=:)|Exception in thread)/m,\n          lookbehind: true\n        },\n        // the current thread if the summary starts with 'Exception in thread'\n        string: {\n          pattern: /^(\\s*)\"[^\"]*\"/,\n          lookbehind: true\n        },\n        exceptions: {\n          pattern: /^(:?\\s*)[\\w$.]+(?=:|$)/,\n          lookbehind: true,\n          inside: {\n            'class-name': /[\\w$]+$/,\n            namespace: /\\b[a-z]\\w*\\b/,\n            punctuation: /\\./\n          }\n        },\n        message: {\n          pattern: /(:\\s*)\\S.*/,\n          lookbehind: true,\n          alias: 'string'\n        },\n        punctuation: /:/\n      }\n    },\n    // at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1166)\n    // at org.hsqldb.jdbc.Util.throwError(Unknown Source) here could be some notes\n    // at java.base/java.lang.Class.forName0(Native Method)\n    // at Util.<init>(Unknown Source)\n    // at com.foo.loader/foo@9.0/com.foo.Main.run(Main.java:101)\n    // at com.foo.loader//com.foo.bar.App.run(App.java:12)\n    // at acme@2.1/org.acme.Lib.test(Lib.java:80)\n    // at MyClass.mash(MyClass.java:9)\n    //\n    // More information:\n    // https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/lang/StackTraceElement.html#toString()\n    //\n    // A valid Java module name is defined as:\n    //   \"A module name consists of one or more Java identifiers (§3.8) separated by \".\" tokens.\"\n    // https://docs.oracle.com/javase/specs/jls/se9/html/jls-6.html#jls-ModuleName\n    //\n    // A Java module version is defined by this class:\n    // https://docs.oracle.com/javase/9/docs/api/java/lang/module/ModuleDescriptor.Version.html\n    // This is the implementation of the `parse` method in JDK13:\n    // https://github.com/matcdac/jdk/blob/2305df71d1b7710266ae0956d73927a225132c0f/src/java.base/share/classes/java/lang/module/ModuleDescriptor.java#L1108\n    // However, to keep this simple, a version will be matched by the pattern /@[\\w$.+-]*/.\n    'stack-frame': {\n      pattern: /^([\\t ]*)at (?:[\\w$./]|@[\\w$.+-]*\\/)+(?:<init>)?\\([^()]*\\)/m,\n      lookbehind: true,\n      inside: {\n        keyword: {\n          pattern: /^(\\s*)at(?= )/,\n          lookbehind: true\n        },\n        source: [\n          // (Main.java:15)\n          // (Main.scala:15)\n          {\n            pattern: /(\\()\\w+\\.\\w+:\\d+(?=\\))/,\n            lookbehind: true,\n            inside: {\n              file: /^\\w+\\.\\w+/,\n              punctuation: /:/,\n              'line-number': {\n                pattern: /\\b\\d+\\b/,\n                alias: 'number'\n              }\n            }\n          }, // (Unknown Source)\n          // (Native Method)\n          // (...something...)\n          {\n            pattern: /(\\()[^()]*(?=\\))/,\n            lookbehind: true,\n            inside: {\n              keyword: /^(?:Native Method|Unknown Source)$/\n            }\n          }\n        ],\n        'class-name': /[\\w$]+(?=\\.(?:<init>|[\\w$]+)\\()/,\n        function: /(?:<init>|[\\w$]+)(?=\\()/,\n        'class-loader': {\n          pattern: /(\\s)[a-z]\\w*(?:\\.[a-z]\\w*)*(?=\\/[\\w@$.]*\\/)/,\n          lookbehind: true,\n          alias: 'namespace',\n          inside: {\n            punctuation: /\\./\n          }\n        },\n        module: {\n          pattern: /([\\s/])[a-z]\\w*(?:\\.[a-z]\\w*)*(?:@[\\w$.+-]*)?(?=\\/)/,\n          lookbehind: true,\n          inside: {\n            version: {\n              pattern: /(@)[\\s\\S]+/,\n              lookbehind: true,\n              alias: 'number'\n            },\n            punctuation: /[@.]/\n          }\n        },\n        namespace: {\n          pattern: /(?:\\b[a-z]\\w*\\.)+/,\n          inside: {\n            punctuation: /\\./\n          }\n        },\n        punctuation: /[()/.]/\n      }\n    },\n    // ... 32 more\n    // ... 32 common frames omitted\n    more: {\n      pattern: /^([\\t ]*)\\.{3} \\d+ [a-z]+(?: [a-z]+)*/m,\n      lookbehind: true,\n      inside: {\n        punctuation: /\\.{3}/,\n        number: /\\d+/,\n        keyword: /\\b[a-z]+(?: [a-z]+)*\\b/\n      }\n    }\n  }\n}\n","'use strict'\n\nmodule.exports = jexl\njexl.displayName = 'jexl'\njexl.aliases = []\nfunction jexl(Prism) {\n  Prism.languages.jexl = {\n    string: /([\"'])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n    transform: {\n      pattern:\n        /(\\|\\s*)[a-zA-Zа-яА-Я_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u00FF$][\\wа-яА-Я\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u00FF$]*/,\n      alias: 'function',\n      lookbehind: true\n    },\n    function:\n      /[a-zA-Zа-яА-Я_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u00FF$][\\wа-яА-Я\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u00FF$]*\\s*(?=\\()/,\n    number: /\\b\\d+(?:\\.\\d+)?\\b|\\B\\.\\d+\\b/,\n    operator: /[<>!]=?|-|\\+|&&|==|\\|\\|?|\\/\\/?|[?:*^%]/,\n    boolean: /\\b(?:false|true)\\b/,\n    keyword: /\\bin\\b/,\n    punctuation: /[{}[\\](),.]/\n  }\n}\n","'use strict'\n\nmodule.exports = jolie\njolie.displayName = 'jolie'\njolie.aliases = []\nfunction jolie(Prism) {\n  Prism.languages.jolie = Prism.languages.extend('clike', {\n    string: {\n      pattern: /(^|[^\\\\])\"(?:\\\\[\\s\\S]|[^\"\\\\])*\"/,\n      lookbehind: true,\n      greedy: true\n    },\n    'class-name': {\n      pattern:\n        /((?:\\b(?:as|courier|embed|in|inputPort|outputPort|service)\\b|@)[ \\t]*)\\w+/,\n      lookbehind: true\n    },\n    keyword:\n      /\\b(?:as|cH|comp|concurrent|constants|courier|cset|csets|default|define|else|embed|embedded|execution|exit|extender|for|foreach|forward|from|global|if|import|in|include|init|inputPort|install|instanceof|interface|is_defined|linkIn|linkOut|main|new|nullProcess|outputPort|over|private|provide|public|scope|sequential|service|single|spawn|synchronized|this|throw|throws|type|undef|until|while|with)\\b/,\n    function: /\\b[a-z_]\\w*(?=[ \\t]*[@(])/i,\n    number: /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?l?/i,\n    operator: /-[-=>]?|\\+[+=]?|<[<=]?|[>=*!]=?|&&|\\|\\||[?\\/%^@|]/,\n    punctuation: /[()[\\]{},;.:]/,\n    builtin:\n      /\\b(?:Byte|any|bool|char|double|enum|float|int|length|long|ranges|regex|string|undefined|void)\\b/\n  })\n  Prism.languages.insertBefore('jolie', 'keyword', {\n    aggregates: {\n      pattern:\n        /(\\bAggregates\\s*:\\s*)(?:\\w+(?:\\s+with\\s+\\w+)?\\s*,\\s*)*\\w+(?:\\s+with\\s+\\w+)?/,\n      lookbehind: true,\n      inside: {\n        keyword: /\\bwith\\b/,\n        'class-name': /\\w+/,\n        punctuation: /,/\n      }\n    },\n    redirects: {\n      pattern:\n        /(\\bRedirects\\s*:\\s*)(?:\\w+\\s*=>\\s*\\w+\\s*,\\s*)*(?:\\w+\\s*=>\\s*\\w+)/,\n      lookbehind: true,\n      inside: {\n        punctuation: /,/,\n        'class-name': /\\w+/,\n        operator: /=>/\n      }\n    },\n    property: {\n      pattern:\n        /\\b(?:Aggregates|[Ii]nterfaces|Java|Javascript|Jolie|[Ll]ocation|OneWay|[Pp]rotocol|Redirects|RequestResponse)\\b(?=[ \\t]*:)/\n    }\n  })\n}\n","'use strict'\n\nmodule.exports = jq\njq.displayName = 'jq'\njq.aliases = []\nfunction jq(Prism) {\n  ;(function (Prism) {\n    var interpolation = /\\\\\\((?:[^()]|\\([^()]*\\))*\\)/.source\n    var string = RegExp(\n      /(^|[^\\\\])\"(?:[^\"\\r\\n\\\\]|\\\\[^\\r\\n(]|__)*\"/.source.replace(\n        /__/g,\n        function () {\n          return interpolation\n        }\n      )\n    )\n    var stringInterpolation = {\n      interpolation: {\n        pattern: RegExp(/((?:^|[^\\\\])(?:\\\\{2})*)/.source + interpolation),\n        lookbehind: true,\n        inside: {\n          content: {\n            pattern: /^(\\\\\\()[\\s\\S]+(?=\\)$)/,\n            lookbehind: true,\n            inside: null // see below\n          },\n          punctuation: /^\\\\\\(|\\)$/\n        }\n      }\n    }\n    var jq = (Prism.languages.jq = {\n      comment: /#.*/,\n      property: {\n        pattern: RegExp(string.source + /(?=\\s*:(?!:))/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: stringInterpolation\n      },\n      string: {\n        pattern: string,\n        lookbehind: true,\n        greedy: true,\n        inside: stringInterpolation\n      },\n      function: {\n        pattern: /(\\bdef\\s+)[a-z_]\\w+/i,\n        lookbehind: true\n      },\n      variable: /\\B\\$\\w+/,\n      'property-literal': {\n        pattern: /\\b[a-z_]\\w*(?=\\s*:(?!:))/i,\n        alias: 'property'\n      },\n      keyword:\n        /\\b(?:as|break|catch|def|elif|else|end|foreach|if|import|include|label|module|modulemeta|null|reduce|then|try|while)\\b/,\n      boolean: /\\b(?:false|true)\\b/,\n      number: /(?:\\b\\d+\\.|\\B\\.)?\\b\\d+(?:[eE][+-]?\\d+)?\\b/,\n      operator: [\n        {\n          pattern: /\\|=?/,\n          alias: 'pipe'\n        },\n        /\\.\\.|[!=<>]?=|\\?\\/\\/|\\/\\/=?|[-+*/%]=?|[<>?]|\\b(?:and|not|or)\\b/\n      ],\n      'c-style-function': {\n        pattern: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n        alias: 'function'\n      },\n      punctuation: /::|[()\\[\\]{},:;]|\\.(?=\\s*[\\[\\w$])/,\n      dot: {\n        pattern: /\\./,\n        alias: 'important'\n      }\n    })\n    stringInterpolation.interpolation.inside.content.inside = jq\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = jsExtras\njsExtras.displayName = 'jsExtras'\njsExtras.aliases = []\nfunction jsExtras(Prism) {\n  ;(function (Prism) {\n    Prism.languages.insertBefore('javascript', 'function-variable', {\n      'method-variable': {\n        pattern: RegExp(\n          '(\\\\.\\\\s*)' +\n            Prism.languages.javascript['function-variable'].pattern.source\n        ),\n        lookbehind: true,\n        alias: ['function-variable', 'method', 'function', 'property-access']\n      }\n    })\n    Prism.languages.insertBefore('javascript', 'function', {\n      method: {\n        pattern: RegExp(\n          '(\\\\.\\\\s*)' + Prism.languages.javascript['function'].source\n        ),\n        lookbehind: true,\n        alias: ['function', 'property-access']\n      }\n    })\n    Prism.languages.insertBefore('javascript', 'constant', {\n      'known-class-name': [\n        {\n          // standard built-ins\n          // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\n          pattern:\n            /\\b(?:(?:Float(?:32|64)|(?:Int|Uint)(?:8|16|32)|Uint8Clamped)?Array|ArrayBuffer|BigInt|Boolean|DataView|Date|Error|Function|Intl|JSON|(?:Weak)?(?:Map|Set)|Math|Number|Object|Promise|Proxy|Reflect|RegExp|String|Symbol|WebAssembly)\\b/,\n          alias: 'class-name'\n        },\n        {\n          // errors\n          pattern: /\\b(?:[A-Z]\\w*)Error\\b/,\n          alias: 'class-name'\n        }\n      ]\n    })\n    /**\n     * Replaces the `<ID>` placeholder in the given pattern with a pattern for general JS identifiers.\n     *\n     * @param {string} source\n     * @param {string} [flags]\n     * @returns {RegExp}\n     */\n    function withId(source, flags) {\n      return RegExp(\n        source.replace(/<ID>/g, function () {\n          return /(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/.source\n        }),\n        flags\n      )\n    }\n    Prism.languages.insertBefore('javascript', 'keyword', {\n      imports: {\n        // https://tc39.es/ecma262/#sec-imports\n        pattern: withId(\n          /(\\bimport\\b\\s*)(?:<ID>(?:\\s*,\\s*(?:\\*\\s*as\\s+<ID>|\\{[^{}]*\\}))?|\\*\\s*as\\s+<ID>|\\{[^{}]*\\})(?=\\s*\\bfrom\\b)/\n            .source\n        ),\n        lookbehind: true,\n        inside: Prism.languages.javascript\n      },\n      exports: {\n        // https://tc39.es/ecma262/#sec-exports\n        pattern: withId(\n          /(\\bexport\\b\\s*)(?:\\*(?:\\s*as\\s+<ID>)?(?=\\s*\\bfrom\\b)|\\{[^{}]*\\})/\n            .source\n        ),\n        lookbehind: true,\n        inside: Prism.languages.javascript\n      }\n    })\n    Prism.languages.javascript['keyword'].unshift(\n      {\n        pattern: /\\b(?:as|default|export|from|import)\\b/,\n        alias: 'module'\n      },\n      {\n        pattern:\n          /\\b(?:await|break|catch|continue|do|else|finally|for|if|return|switch|throw|try|while|yield)\\b/,\n        alias: 'control-flow'\n      },\n      {\n        pattern: /\\bnull\\b/,\n        alias: ['null', 'nil']\n      },\n      {\n        pattern: /\\bundefined\\b/,\n        alias: 'nil'\n      }\n    )\n    Prism.languages.insertBefore('javascript', 'operator', {\n      spread: {\n        pattern: /\\.{3}/,\n        alias: 'operator'\n      },\n      arrow: {\n        pattern: /=>/,\n        alias: 'operator'\n      }\n    })\n    Prism.languages.insertBefore('javascript', 'punctuation', {\n      'property-access': {\n        pattern: withId(/(\\.\\s*)#?<ID>/.source),\n        lookbehind: true\n      },\n      'maybe-class-name': {\n        pattern: /(^|[^$\\w\\xA0-\\uFFFF])[A-Z][$\\w\\xA0-\\uFFFF]+/,\n        lookbehind: true\n      },\n      dom: {\n        // this contains only a few commonly used DOM variables\n        pattern:\n          /\\b(?:document|(?:local|session)Storage|location|navigator|performance|window)\\b/,\n        alias: 'variable'\n      },\n      console: {\n        pattern: /\\bconsole(?=\\s*\\.)/,\n        alias: 'class-name'\n      }\n    }) // add 'maybe-class-name' to tokens which might be a class name\n    var maybeClassNameTokens = [\n      'function',\n      'function-variable',\n      'method',\n      'method-variable',\n      'property-access'\n    ]\n    for (var i = 0; i < maybeClassNameTokens.length; i++) {\n      var token = maybeClassNameTokens[i]\n      var value = Prism.languages.javascript[token] // convert regex to object\n      if (Prism.util.type(value) === 'RegExp') {\n        value = Prism.languages.javascript[token] = {\n          pattern: value\n        }\n      } // keep in mind that we don't support arrays\n      var inside = value.inside || {}\n      value.inside = inside\n      inside['maybe-class-name'] = /^[A-Z][\\s\\S]*/\n    }\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = jsTemplates\njsTemplates.displayName = 'jsTemplates'\njsTemplates.aliases = []\nfunction jsTemplates(Prism) {\n  ;(function (Prism) {\n    var templateString = Prism.languages.javascript['template-string'] // see the pattern in prism-javascript.js\n    var templateLiteralPattern = templateString.pattern.source\n    var interpolationObject = templateString.inside['interpolation']\n    var interpolationPunctuationObject =\n      interpolationObject.inside['interpolation-punctuation']\n    var interpolationPattern = interpolationObject.pattern.source\n    /**\n     * Creates a new pattern to match a template string with a special tag.\n     *\n     * This will return `undefined` if there is no grammar with the given language id.\n     *\n     * @param {string} language The language id of the embedded language. E.g. `markdown`.\n     * @param {string} tag The regex pattern to match the tag.\n     * @returns {object | undefined}\n     * @example\n     * createTemplate('css', /\\bcss/.source);\n     */\n    function createTemplate(language, tag) {\n      if (!Prism.languages[language]) {\n        return undefined\n      }\n      return {\n        pattern: RegExp('((?:' + tag + ')\\\\s*)' + templateLiteralPattern),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          'template-punctuation': {\n            pattern: /^`|`$/,\n            alias: 'string'\n          },\n          'embedded-code': {\n            pattern: /[\\s\\S]+/,\n            alias: language\n          }\n        }\n      }\n    }\n    Prism.languages.javascript['template-string'] = [\n      // styled-jsx:\n      //   css`a { color: #25F; }`\n      // styled-components:\n      //   styled.h1`color: red;`\n      createTemplate(\n        'css',\n        /\\b(?:styled(?:\\([^)]*\\))?(?:\\s*\\.\\s*\\w+(?:\\([^)]*\\))*)*|css(?:\\s*\\.\\s*(?:global|resolve))?|createGlobalStyle|keyframes)/\n          .source\n      ), // html`<p></p>`\n      // div.innerHTML = `<p></p>`\n      createTemplate('html', /\\bhtml|\\.\\s*(?:inner|outer)HTML\\s*\\+?=/.source), // svg`<path fill=\"#fff\" d=\"M55.37 ...\"/>`\n      createTemplate('svg', /\\bsvg/.source), // md`# h1`, markdown`## h2`\n      createTemplate('markdown', /\\b(?:markdown|md)/.source), // gql`...`, graphql`...`, graphql.experimental`...`\n      createTemplate(\n        'graphql',\n        /\\b(?:gql|graphql(?:\\s*\\.\\s*experimental)?)/.source\n      ), // sql`...`\n      createTemplate('sql', /\\bsql/.source), // vanilla template string\n      templateString\n    ].filter(Boolean)\n    /**\n     * Returns a specific placeholder literal for the given language.\n     *\n     * @param {number} counter\n     * @param {string} language\n     * @returns {string}\n     */\n    function getPlaceholder(counter, language) {\n      return '___' + language.toUpperCase() + '_' + counter + '___'\n    }\n    /**\n     * Returns the tokens of `Prism.tokenize` but also runs the `before-tokenize` and `after-tokenize` hooks.\n     *\n     * @param {string} code\n     * @param {any} grammar\n     * @param {string} language\n     * @returns {(string|Token)[]}\n     */\n    function tokenizeWithHooks(code, grammar, language) {\n      var env = {\n        code: code,\n        grammar: grammar,\n        language: language\n      }\n      Prism.hooks.run('before-tokenize', env)\n      env.tokens = Prism.tokenize(env.code, env.grammar)\n      Prism.hooks.run('after-tokenize', env)\n      return env.tokens\n    }\n    /**\n     * Returns the token of the given JavaScript interpolation expression.\n     *\n     * @param {string} expression The code of the expression. E.g. `\"${42}\"`\n     * @returns {Token}\n     */\n    function tokenizeInterpolationExpression(expression) {\n      var tempGrammar = {}\n      tempGrammar['interpolation-punctuation'] = interpolationPunctuationObject\n      /** @type {Array} */\n      var tokens = Prism.tokenize(expression, tempGrammar)\n      if (tokens.length === 3) {\n        /**\n         * The token array will look like this\n         * [\n         *     [\"interpolation-punctuation\", \"${\"]\n         *     \"...\" // JavaScript expression of the interpolation\n         *     [\"interpolation-punctuation\", \"}\"]\n         * ]\n         */\n        var args = [1, 1]\n        args.push.apply(\n          args,\n          tokenizeWithHooks(tokens[1], Prism.languages.javascript, 'javascript')\n        )\n        tokens.splice.apply(tokens, args)\n      }\n      return new Prism.Token(\n        'interpolation',\n        tokens,\n        interpolationObject.alias,\n        expression\n      )\n    }\n    /**\n     * Tokenizes the given code with support for JavaScript interpolation expressions mixed in.\n     *\n     * This function has 3 phases:\n     *\n     * 1. Replace all JavaScript interpolation expression with a placeholder.\n     *    The placeholder will have the syntax of a identify of the target language.\n     * 2. Tokenize the code with placeholders.\n     * 3. Tokenize the interpolation expressions and re-insert them into the tokenize code.\n     *    The insertion only works if a placeholder hasn't been \"ripped apart\" meaning that the placeholder has been\n     *    tokenized as two tokens by the grammar of the embedded language.\n     *\n     * @param {string} code\n     * @param {object} grammar\n     * @param {string} language\n     * @returns {Token}\n     */\n    function tokenizeEmbedded(code, grammar, language) {\n      // 1. First filter out all interpolations\n      // because they might be escaped, we need a lookbehind, so we use Prism\n      /** @type {(Token|string)[]} */\n      var _tokens = Prism.tokenize(code, {\n        interpolation: {\n          pattern: RegExp(interpolationPattern),\n          lookbehind: true\n        }\n      }) // replace all interpolations with a placeholder which is not in the code already\n      var placeholderCounter = 0\n      /** @type {Object<string, string>} */\n      var placeholderMap = {}\n      var embeddedCode = _tokens\n        .map(function (token) {\n          if (typeof token === 'string') {\n            return token\n          } else {\n            var interpolationExpression = token.content\n            var placeholder\n            while (\n              code.indexOf(\n                (placeholder = getPlaceholder(placeholderCounter++, language))\n              ) !== -1\n            ) {\n              /* noop */\n            }\n            placeholderMap[placeholder] = interpolationExpression\n            return placeholder\n          }\n        })\n        .join('') // 2. Tokenize the embedded code\n      var embeddedTokens = tokenizeWithHooks(embeddedCode, grammar, language) // 3. Re-insert the interpolation\n      var placeholders = Object.keys(placeholderMap)\n      placeholderCounter = 0\n      /**\n       *\n       * @param {(Token|string)[]} tokens\n       * @returns {void}\n       */\n      function walkTokens(tokens) {\n        for (var i = 0; i < tokens.length; i++) {\n          if (placeholderCounter >= placeholders.length) {\n            return\n          }\n          var token = tokens[i]\n          if (typeof token === 'string' || typeof token.content === 'string') {\n            var placeholder = placeholders[placeholderCounter]\n            var s =\n              typeof token === 'string'\n                ? token\n                : /** @type {string} */\n                  token.content\n            var index = s.indexOf(placeholder)\n            if (index !== -1) {\n              ++placeholderCounter\n              var before = s.substring(0, index)\n              var middle = tokenizeInterpolationExpression(\n                placeholderMap[placeholder]\n              )\n              var after = s.substring(index + placeholder.length)\n              var replacement = []\n              if (before) {\n                replacement.push(before)\n              }\n              replacement.push(middle)\n              if (after) {\n                var afterTokens = [after]\n                walkTokens(afterTokens)\n                replacement.push.apply(replacement, afterTokens)\n              }\n              if (typeof token === 'string') {\n                tokens.splice.apply(tokens, [i, 1].concat(replacement))\n                i += replacement.length - 1\n              } else {\n                token.content = replacement\n              }\n            }\n          } else {\n            var content = token.content\n            if (Array.isArray(content)) {\n              walkTokens(content)\n            } else {\n              walkTokens([content])\n            }\n          }\n        }\n      }\n      walkTokens(embeddedTokens)\n      return new Prism.Token(\n        language,\n        embeddedTokens,\n        'language-' + language,\n        code\n      )\n    }\n    /**\n     * The languages for which JS templating will handle tagged template literals.\n     *\n     * JS templating isn't active for only JavaScript but also related languages like TypeScript, JSX, and TSX.\n     */\n    var supportedLanguages = {\n      javascript: true,\n      js: true,\n      typescript: true,\n      ts: true,\n      jsx: true,\n      tsx: true\n    }\n    Prism.hooks.add('after-tokenize', function (env) {\n      if (!(env.language in supportedLanguages)) {\n        return\n      }\n      /**\n       * Finds and tokenizes all template strings with an embedded languages.\n       *\n       * @param {(Token | string)[]} tokens\n       * @returns {void}\n       */\n      function findTemplateStrings(tokens) {\n        for (var i = 0, l = tokens.length; i < l; i++) {\n          var token = tokens[i]\n          if (typeof token === 'string') {\n            continue\n          }\n          var content = token.content\n          if (!Array.isArray(content)) {\n            if (typeof content !== 'string') {\n              findTemplateStrings([content])\n            }\n            continue\n          }\n          if (token.type === 'template-string') {\n            /**\n             * A JavaScript template-string token will look like this:\n             *\n             * [\"template-string\", [\n             *     [\"template-punctuation\", \"`\"],\n             *     (\n             *         An array of \"string\" and \"interpolation\" tokens. This is the simple string case.\n             *         or\n             *         [\"embedded-code\", \"...\"] This is the token containing the embedded code.\n             *                                  It also has an alias which is the language of the embedded code.\n             *     ),\n             *     [\"template-punctuation\", \"`\"]\n             * ]]\n             */\n            var embedded = content[1]\n            if (\n              content.length === 3 &&\n              typeof embedded !== 'string' &&\n              embedded.type === 'embedded-code'\n            ) {\n              // get string content\n              var code = stringContent(embedded)\n              var alias = embedded.alias\n              var language = Array.isArray(alias) ? alias[0] : alias\n              var grammar = Prism.languages[language]\n              if (!grammar) {\n                // the embedded language isn't registered.\n                continue\n              }\n              content[1] = tokenizeEmbedded(code, grammar, language)\n            }\n          } else {\n            findTemplateStrings(content)\n          }\n        }\n      }\n      findTemplateStrings(env.tokens)\n    })\n    /**\n     * Returns the string content of a token or token stream.\n     *\n     * @param {string | Token | (string | Token)[]} value\n     * @returns {string}\n     */\n    function stringContent(value) {\n      if (typeof value === 'string') {\n        return value\n      } else if (Array.isArray(value)) {\n        return value.map(stringContent).join('')\n      } else {\n        return stringContent(value.content)\n      }\n    }\n  })(Prism)\n}\n","'use strict'\nvar refractorJavadoclike = require('./javadoclike.js')\nvar refractorTypescript = require('./typescript.js')\nmodule.exports = jsdoc\njsdoc.displayName = 'jsdoc'\njsdoc.aliases = []\nfunction jsdoc(Prism) {\n  Prism.register(refractorJavadoclike)\n  Prism.register(refractorTypescript)\n  ;(function (Prism) {\n    var javascript = Prism.languages.javascript\n    var type = /\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})+\\}/.source\n    var parameterPrefix =\n      '(@(?:arg|argument|param|property)\\\\s+(?:' + type + '\\\\s+)?)'\n    Prism.languages.jsdoc = Prism.languages.extend('javadoclike', {\n      parameter: {\n        // @param {string} foo - foo bar\n        pattern: RegExp(\n          parameterPrefix + /(?:(?!\\s)[$\\w\\xA0-\\uFFFF.])+(?=\\s|$)/.source\n        ),\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      }\n    })\n    Prism.languages.insertBefore('jsdoc', 'keyword', {\n      'optional-parameter': {\n        // @param {string} [baz.foo=\"bar\"] foo bar\n        pattern: RegExp(\n          parameterPrefix +\n            /\\[(?:(?!\\s)[$\\w\\xA0-\\uFFFF.])+(?:=[^[\\]]+)?\\](?=\\s|$)/.source\n        ),\n        lookbehind: true,\n        inside: {\n          parameter: {\n            pattern: /(^\\[)[$\\w\\xA0-\\uFFFF\\.]+/,\n            lookbehind: true,\n            inside: {\n              punctuation: /\\./\n            }\n          },\n          code: {\n            pattern: /(=)[\\s\\S]*(?=\\]$)/,\n            lookbehind: true,\n            inside: javascript,\n            alias: 'language-javascript'\n          },\n          punctuation: /[=[\\]]/\n        }\n      },\n      'class-name': [\n        {\n          pattern: RegExp(\n            /(@(?:augments|class|extends|interface|memberof!?|template|this|typedef)\\s+(?:<TYPE>\\s+)?)[A-Z]\\w*(?:\\.[A-Z]\\w*)*/.source.replace(\n              /<TYPE>/g,\n              function () {\n                return type\n              }\n            )\n          ),\n          lookbehind: true,\n          inside: {\n            punctuation: /\\./\n          }\n        },\n        {\n          pattern: RegExp('(@[a-z]+\\\\s+)' + type),\n          lookbehind: true,\n          inside: {\n            string: javascript.string,\n            number: javascript.number,\n            boolean: javascript.boolean,\n            keyword: Prism.languages.typescript.keyword,\n            operator: /=>|\\.\\.\\.|[&|?:*]/,\n            punctuation: /[.,;=<>{}()[\\]]/\n          }\n        }\n      ],\n      example: {\n        pattern:\n          /(@example\\s+(?!\\s))(?:[^@\\s]|\\s+(?!\\s))+?(?=\\s*(?:\\*\\s*)?(?:@\\w|\\*\\/))/,\n        lookbehind: true,\n        inside: {\n          code: {\n            pattern: /^([\\t ]*(?:\\*\\s*)?)\\S.*$/m,\n            lookbehind: true,\n            inside: javascript,\n            alias: 'language-javascript'\n          }\n        }\n      }\n    })\n    Prism.languages.javadoclike.addSupport('javascript', Prism.languages.jsdoc)\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = json\njson.displayName = 'json'\njson.aliases = ['webmanifest']\nfunction json(Prism) {\n  // https://www.json.org/json-en.html\n  Prism.languages.json = {\n    property: {\n      pattern: /(^|[^\\\\])\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?=\\s*:)/,\n      lookbehind: true,\n      greedy: true\n    },\n    string: {\n      pattern: /(^|[^\\\\])\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?!\\s*:)/,\n      lookbehind: true,\n      greedy: true\n    },\n    comment: {\n      pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n      greedy: true\n    },\n    number: /-?\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n    punctuation: /[{}[\\],]/,\n    operator: /:/,\n    boolean: /\\b(?:false|true)\\b/,\n    null: {\n      pattern: /\\bnull\\b/,\n      alias: 'keyword'\n    }\n  }\n  Prism.languages.webmanifest = Prism.languages.json\n}\n","'use strict'\nvar refractorJson = require('./json.js')\nmodule.exports = json5\njson5.displayName = 'json5'\njson5.aliases = []\nfunction json5(Prism) {\n  Prism.register(refractorJson)\n  ;(function (Prism) {\n    var string = /(\"|')(?:\\\\(?:\\r\\n?|\\n|.)|(?!\\1)[^\\\\\\r\\n])*\\1/\n    Prism.languages.json5 = Prism.languages.extend('json', {\n      property: [\n        {\n          pattern: RegExp(string.source + '(?=\\\\s*:)'),\n          greedy: true\n        },\n        {\n          pattern:\n            /(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*:)/,\n          alias: 'unquoted'\n        }\n      ],\n      string: {\n        pattern: string,\n        greedy: true\n      },\n      number:\n        /[+-]?\\b(?:NaN|Infinity|0x[a-fA-F\\d]+)\\b|[+-]?(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[eE][+-]?\\d+\\b)?/\n    })\n  })(Prism)\n}\n","'use strict'\nvar refractorJson = require('./json.js')\nmodule.exports = jsonp\njsonp.displayName = 'jsonp'\njsonp.aliases = []\nfunction jsonp(Prism) {\n  Prism.register(refractorJson)\n  Prism.languages.jsonp = Prism.languages.extend('json', {\n    punctuation: /[{}[\\]();,.]/\n  })\n  Prism.languages.insertBefore('jsonp', 'punctuation', {\n    function: /(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*\\()/\n  })\n}\n","'use strict'\n\nmodule.exports = jsstacktrace\njsstacktrace.displayName = 'jsstacktrace'\njsstacktrace.aliases = []\nfunction jsstacktrace(Prism) {\n  Prism.languages.jsstacktrace = {\n    'error-message': {\n      pattern: /^\\S.*/m,\n      alias: 'string'\n    },\n    'stack-frame': {\n      pattern: /(^[ \\t]+)at[ \\t].*/m,\n      lookbehind: true,\n      inside: {\n        'not-my-code': {\n          pattern:\n            /^at[ \\t]+(?!\\s)(?:node\\.js|<unknown>|.*(?:node_modules|\\(<anonymous>\\)|\\(<unknown>|<anonymous>$|\\(internal\\/|\\(node\\.js)).*/m,\n          alias: 'comment'\n        },\n        filename: {\n          pattern: /(\\bat\\s+(?!\\s)|\\()(?:[a-zA-Z]:)?[^():]+(?=:)/,\n          lookbehind: true,\n          alias: 'url'\n        },\n        function: {\n          pattern:\n            /(\\bat\\s+(?:new\\s+)?)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF<][.$\\w\\xA0-\\uFFFF<>]*/,\n          lookbehind: true,\n          inside: {\n            punctuation: /\\./\n          }\n        },\n        punctuation: /[()]/,\n        keyword: /\\b(?:at|new)\\b/,\n        alias: {\n          pattern: /\\[(?:as\\s+)?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*\\]/,\n          alias: 'variable'\n        },\n        'line-number': {\n          pattern: /:\\d+(?::\\d+)?\\b/,\n          alias: 'number',\n          inside: {\n            punctuation: /:/\n          }\n        }\n      }\n    }\n  }\n}\n","'use strict'\n\nmodule.exports = jsx\njsx.displayName = 'jsx'\njsx.aliases = []\nfunction jsx(Prism) {\n  ;(function (Prism) {\n    var javascript = Prism.util.clone(Prism.languages.javascript)\n    var space = /(?:\\s|\\/\\/.*(?!.)|\\/\\*(?:[^*]|\\*(?!\\/))\\*\\/)/.source\n    var braces = /(?:\\{(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])*\\})/.source\n    var spread = /(?:\\{<S>*\\.{3}(?:[^{}]|<BRACES>)*\\})/.source\n    /**\n     * @param {string} source\n     * @param {string} [flags]\n     */\n    function re(source, flags) {\n      source = source\n        .replace(/<S>/g, function () {\n          return space\n        })\n        .replace(/<BRACES>/g, function () {\n          return braces\n        })\n        .replace(/<SPREAD>/g, function () {\n          return spread\n        })\n      return RegExp(source, flags)\n    }\n    spread = re(spread).source\n    Prism.languages.jsx = Prism.languages.extend('markup', javascript)\n    Prism.languages.jsx.tag.pattern = re(\n      /<\\/?(?:[\\w.:-]+(?:<S>+(?:[\\w.:$-]+(?:=(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s{'\"/>=]+|<BRACES>))?|<SPREAD>))*<S>*\\/?)?>/\n        .source\n    )\n    Prism.languages.jsx.tag.inside['tag'].pattern = /^<\\/?[^\\s>\\/]*/\n    Prism.languages.jsx.tag.inside['attr-value'].pattern =\n      /=(?!\\{)(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s'\">]+)/\n    Prism.languages.jsx.tag.inside['tag'].inside['class-name'] =\n      /^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/\n    Prism.languages.jsx.tag.inside['comment'] = javascript['comment']\n    Prism.languages.insertBefore(\n      'inside',\n      'attr-name',\n      {\n        spread: {\n          pattern: re(/<SPREAD>/.source),\n          inside: Prism.languages.jsx\n        }\n      },\n      Prism.languages.jsx.tag\n    )\n    Prism.languages.insertBefore(\n      'inside',\n      'special-attr',\n      {\n        script: {\n          // Allow for two levels of nesting\n          pattern: re(/=<BRACES>/.source),\n          alias: 'language-javascript',\n          inside: {\n            'script-punctuation': {\n              pattern: /^=(?=\\{)/,\n              alias: 'punctuation'\n            },\n            rest: Prism.languages.jsx\n          }\n        }\n      },\n      Prism.languages.jsx.tag\n    ) // The following will handle plain text inside tags\n    var stringifyToken = function (token) {\n      if (!token) {\n        return ''\n      }\n      if (typeof token === 'string') {\n        return token\n      }\n      if (typeof token.content === 'string') {\n        return token.content\n      }\n      return token.content.map(stringifyToken).join('')\n    }\n    var walkTokens = function (tokens) {\n      var openedTags = []\n      for (var i = 0; i < tokens.length; i++) {\n        var token = tokens[i]\n        var notTagNorBrace = false\n        if (typeof token !== 'string') {\n          if (\n            token.type === 'tag' &&\n            token.content[0] &&\n            token.content[0].type === 'tag'\n          ) {\n            // We found a tag, now find its kind\n            if (token.content[0].content[0].content === '</') {\n              // Closing tag\n              if (\n                openedTags.length > 0 &&\n                openedTags[openedTags.length - 1].tagName ===\n                  stringifyToken(token.content[0].content[1])\n              ) {\n                // Pop matching opening tag\n                openedTags.pop()\n              }\n            } else {\n              if (token.content[token.content.length - 1].content === '/>') {\n                // Autoclosed tag, ignore\n              } else {\n                // Opening tag\n                openedTags.push({\n                  tagName: stringifyToken(token.content[0].content[1]),\n                  openedBraces: 0\n                })\n              }\n            }\n          } else if (\n            openedTags.length > 0 &&\n            token.type === 'punctuation' &&\n            token.content === '{'\n          ) {\n            // Here we might have entered a JSX context inside a tag\n            openedTags[openedTags.length - 1].openedBraces++\n          } else if (\n            openedTags.length > 0 &&\n            openedTags[openedTags.length - 1].openedBraces > 0 &&\n            token.type === 'punctuation' &&\n            token.content === '}'\n          ) {\n            // Here we might have left a JSX context inside a tag\n            openedTags[openedTags.length - 1].openedBraces--\n          } else {\n            notTagNorBrace = true\n          }\n        }\n        if (notTagNorBrace || typeof token === 'string') {\n          if (\n            openedTags.length > 0 &&\n            openedTags[openedTags.length - 1].openedBraces === 0\n          ) {\n            // Here we are inside a tag, and not inside a JSX context.\n            // That's plain text: drop any tokens matched.\n            var plainText = stringifyToken(token) // And merge text with adjacent text\n            if (\n              i < tokens.length - 1 &&\n              (typeof tokens[i + 1] === 'string' ||\n                tokens[i + 1].type === 'plain-text')\n            ) {\n              plainText += stringifyToken(tokens[i + 1])\n              tokens.splice(i + 1, 1)\n            }\n            if (\n              i > 0 &&\n              (typeof tokens[i - 1] === 'string' ||\n                tokens[i - 1].type === 'plain-text')\n            ) {\n              plainText = stringifyToken(tokens[i - 1]) + plainText\n              tokens.splice(i - 1, 1)\n              i--\n            }\n            tokens[i] = new Prism.Token(\n              'plain-text',\n              plainText,\n              null,\n              plainText\n            )\n          }\n        }\n        if (token.content && typeof token.content !== 'string') {\n          walkTokens(token.content)\n        }\n      }\n    }\n    Prism.hooks.add('after-tokenize', function (env) {\n      if (env.language !== 'jsx' && env.language !== 'tsx') {\n        return\n      }\n      walkTokens(env.tokens)\n    })\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = julia\njulia.displayName = 'julia'\njulia.aliases = []\nfunction julia(Prism) {\n  Prism.languages.julia = {\n    comment: {\n      // support one level of nested comments\n      // https://github.com/JuliaLang/julia/pull/6128\n      pattern:\n        /(^|[^\\\\])(?:#=(?:[^#=]|=(?!#)|#(?!=)|#=(?:[^#=]|=(?!#)|#(?!=))*=#)*=#|#.*)/,\n      lookbehind: true\n    },\n    regex: {\n      // https://docs.julialang.org/en/v1/manual/strings/#Regular-Expressions-1\n      pattern: /r\"(?:\\\\.|[^\"\\\\\\r\\n])*\"[imsx]{0,4}/,\n      greedy: true\n    },\n    string: {\n      // https://docs.julialang.org/en/v1/manual/strings/#String-Basics-1\n      // https://docs.julialang.org/en/v1/manual/strings/#non-standard-string-literals-1\n      // https://docs.julialang.org/en/v1/manual/running-external-programs/#Running-External-Programs-1\n      pattern:\n        /\"\"\"[\\s\\S]+?\"\"\"|(?:\\b\\w+)?\"(?:\\\\.|[^\"\\\\\\r\\n])*\"|`(?:[^\\\\`\\r\\n]|\\\\.)*`/,\n      greedy: true\n    },\n    char: {\n      // https://docs.julialang.org/en/v1/manual/strings/#man-characters-1\n      pattern: /(^|[^\\w'])'(?:\\\\[^\\r\\n][^'\\r\\n]*|[^\\\\\\r\\n])'/,\n      lookbehind: true,\n      greedy: true\n    },\n    keyword:\n      /\\b(?:abstract|baremodule|begin|bitstype|break|catch|ccall|const|continue|do|else|elseif|end|export|finally|for|function|global|if|immutable|import|importall|in|let|local|macro|module|print|println|quote|return|struct|try|type|typealias|using|while)\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    number:\n      /(?:\\b(?=\\d)|\\B(?=\\.))(?:0[box])?(?:[\\da-f]+(?:_[\\da-f]+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\.\\d+(?:_\\d+)*)(?:[efp][+-]?\\d+(?:_\\d+)*)?j?/i,\n    // https://docs.julialang.org/en/v1/manual/mathematical-operations/\n    // https://docs.julialang.org/en/v1/manual/mathematical-operations/#Operator-Precedence-and-Associativity-1\n    operator:\n      /&&|\\|\\||[-+*^%÷⊻&$\\\\]=?|\\/[\\/=]?|!=?=?|\\|[=>]?|<(?:<=?|[=:|])?|>(?:=|>>?=?)?|==?=?|[~≠≤≥'√∛]/,\n    punctuation: /::?|[{}[\\]();,.?]/,\n    // https://docs.julialang.org/en/v1/base/numbers/#Base.im\n    constant: /\\b(?:(?:Inf|NaN)(?:16|32|64)?|im|pi)\\b|[πℯ]/\n  }\n}\n","'use strict'\n\nmodule.exports = keepalived\nkeepalived.displayName = 'keepalived'\nkeepalived.aliases = []\nfunction keepalived(Prism) {\n  Prism.languages.keepalived = {\n    comment: {\n      pattern: /[#!].*/,\n      greedy: true\n    },\n    string: {\n      pattern:\n        /(^|[^\\\\])(?:\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n])*')/,\n      lookbehind: true,\n      greedy: true\n    },\n    // support IPv4, IPv6, subnet mask\n    ip: {\n      pattern: RegExp(\n        /\\b(?:(?:(?:[\\da-f]{1,4}:){7}[\\da-f]{1,4}|(?:[\\da-f]{1,4}:){6}:[\\da-f]{1,4}|(?:[\\da-f]{1,4}:){5}:(?:[\\da-f]{1,4}:)?[\\da-f]{1,4}|(?:[\\da-f]{1,4}:){4}:(?:[\\da-f]{1,4}:){0,2}[\\da-f]{1,4}|(?:[\\da-f]{1,4}:){3}:(?:[\\da-f]{1,4}:){0,3}[\\da-f]{1,4}|(?:[\\da-f]{1,4}:){2}:(?:[\\da-f]{1,4}:){0,4}[\\da-f]{1,4}|(?:[\\da-f]{1,4}:){6}<ipv4>|(?:[\\da-f]{1,4}:){0,5}:<ipv4>|::(?:[\\da-f]{1,4}:){0,5}<ipv4>|[\\da-f]{1,4}::(?:[\\da-f]{1,4}:){0,5}[\\da-f]{1,4}|::(?:[\\da-f]{1,4}:){0,6}[\\da-f]{1,4}|(?:[\\da-f]{1,4}:){1,7}:)(?:\\/\\d{1,3})?|<ipv4>(?:\\/\\d{1,2})?)\\b/.source.replace(\n          /<ipv4>/g,\n          function () {\n            return /(?:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d))/\n              .source\n          }\n        ),\n        'i'\n      ),\n      alias: 'number'\n    },\n    // support *nix / Windows, directory / file\n    path: {\n      pattern:\n        /(\\s)\\/(?:[^\\/\\s]+\\/)*[^\\/\\s]*|\\b[a-zA-Z]:\\\\(?:[^\\\\\\s]+\\\\)*[^\\\\\\s]*/,\n      lookbehind: true,\n      alias: 'string'\n    },\n    variable: /\\$\\{?\\w+\\}?/,\n    email: {\n      pattern: /[\\w-]+@[\\w-]+(?:\\.[\\w-]{2,3}){1,2}/,\n      alias: 'string'\n    },\n    'conditional-configuration': {\n      pattern: /@\\^?[\\w-]+/,\n      alias: 'variable'\n    },\n    operator: /=/,\n    property:\n      /\\b(?:BFD_CHECK|DNS_CHECK|FILE_CHECK|HTTP_GET|MISC_CHECK|NAME|PING_CHECK|SCRIPTS|SMTP_CHECK|SSL|SSL_GET|TCP_CHECK|UDP_CHECK|accept|advert_int|alpha|auth_pass|auth_type|authentication|bfd_cpu_affinity|bfd_instance|bfd_no_swap|bfd_priority|bfd_process_name|bfd_rlimit_rttime|bfd_rt_priority|bind_if|bind_port|bindto|ca|certificate|check_unicast_src|checker|checker_cpu_affinity|checker_log_all_failures|checker_no_swap|checker_priority|checker_rlimit_rttime|checker_rt_priority|child_wait_time|connect_ip|connect_port|connect_timeout|dbus_service_name|debug|default_interface|delay|delay_before_retry|delay_loop|digest|dont_track_primary|dynamic|dynamic_interfaces|enable_(?:dbus|script_security|sni|snmp_checker|snmp_rfc|snmp_rfcv2|snmp_rfcv3|snmp_vrrp|traps)|end|fall|fast_recovery|file|flag-[123]|fork_delay|full_command|fwmark|garp_group|garp_interval|garp_lower_prio_delay|garp_lower_prio_repeat|garp_master_delay|garp_master_refresh|garp_master_refresh_repeat|garp_master_repeat|global_defs|global_tracking|gna_interval|group|ha_suspend|hashed|helo_name|higher_prio_send_advert|hoplimit|http_protocol|hysteresis|idle_tx|include|inhibit_on_failure|init_fail|init_file|instance|interface|interfaces|interval|ip_family|ipvs_process_name|keepalived.conf|kernel_rx_buf_size|key|linkbeat_interfaces|linkbeat_use_polling|log_all_failures|log_unknown_vrids|lower_prio_no_advert|lthreshold|lvs_flush|lvs_flush_onstop|lvs_method|lvs_netlink_cmd_rcv_bufs|lvs_netlink_cmd_rcv_bufs_force|lvs_netlink_monitor_rcv_bufs|lvs_netlink_monitor_rcv_bufs_force|lvs_notify_fifo|lvs_notify_fifo_script|lvs_sched|lvs_sync_daemon|max_auto_priority|max_hops|mcast_src_ip|mh-fallback|mh-port|min_auto_priority_delay|min_rx|min_tx|misc_dynamic|misc_path|misc_timeout|multiplier|name|namespace_with_ipsets|native_ipv6|neighbor_ip|net_namespace|net_namespace_ipvs|nftables|nftables_counters|nftables_ifindex|nftables_priority|no_accept|no_checker_emails|no_email_faults|nopreempt|notification_email|notification_email_from|notify|notify_backup|notify_deleted|notify_down|notify_fault|notify_fifo|notify_fifo_script|notify_master|notify_master_rx_lower_pri|notify_priority_changes|notify_stop|notify_up|old_unicast_checksum|omega|ops|param_match|passive|password|path|persistence_engine|persistence_granularity|persistence_timeout|preempt|preempt_delay|priority|process|process_monitor_rcv_bufs|process_monitor_rcv_bufs_force|process_name|process_names|promote_secondaries|protocol|proxy_arp|proxy_arp_pvlan|quorum|quorum_down|quorum_max|quorum_up|random_seed|real_server|regex|regex_max_offset|regex_min_offset|regex_no_match|regex_options|regex_stack|reload_repeat|reload_time_file|require_reply|retry|rise|router_id|rs_init_notifies|script|script_user|sh-fallback|sh-port|shutdown_script|shutdown_script_timeout|skip_check_adv_addr|smtp_alert|smtp_alert_checker|smtp_alert_vrrp|smtp_connect_timeout|smtp_helo_name|smtp_server|snmp_socket|sorry_server|sorry_server_inhibit|sorry_server_lvs_method|source_ip|start|startup_script|startup_script_timeout|state|static_ipaddress|static_routes|static_rules|status_code|step|strict_mode|sync_group_tracking_weight|terminate_delay|timeout|track_bfd|track_file|track_group|track_interface|track_process|track_script|track_src_ip|ttl|type|umask|unicast_peer|unicast_src_ip|unicast_ttl|url|use_ipvlan|use_pid_dir|use_vmac|user|uthreshold|val[123]|version|virtual_ipaddress|virtual_ipaddress_excluded|virtual_router_id|virtual_routes|virtual_rules|virtual_server|virtual_server_group|virtualhost|vmac_xmit_base|vrrp|vrrp_(?:check_unicast_src|cpu_affinity|garp_interval|garp_lower_prio_delay|garp_lower_prio_repeat|garp_master_delay|garp_master_refresh|garp_master_refresh_repeat|garp_master_repeat|gna_interval|higher_prio_send_advert|instance|ipsets|iptables|lower_prio_no_advert|mcast_group4|mcast_group6|min_garp|netlink_cmd_rcv_bufs|netlink_cmd_rcv_bufs_force|netlink_monitor_rcv_bufs|netlink_monitor_rcv_bufs_force|no_swap|notify_fifo|notify_fifo_script|notify_priority_changes|priority|process_name|rlimit_rttime|rt_priority|rx_bufs_multiplier|rx_bufs_policy|script|skip_check_adv_addr|startup_delay|strict|sync_group|track_process|version)|warmup|weight)\\b/,\n    constant:\n      /\\b(?:A|AAAA|AH|BACKUP|CNAME|DR|MASTER|MX|NAT|NS|PASS|SCTP|SOA|TCP|TUN|TXT|UDP|dh|fo|lblc|lblcr|lc|mh|nq|ovf|rr|sed|sh|wlc|wrr)\\b/,\n    number: {\n      pattern: /(^|[^\\w.-])-?\\d+(?:\\.\\d+)?/,\n      lookbehind: true\n    },\n    boolean: /\\b(?:false|no|off|on|true|yes)\\b/,\n    punctuation: /[\\{\\}]/\n  }\n}\n","'use strict'\n\nmodule.exports = keyman\nkeyman.displayName = 'keyman'\nkeyman.aliases = []\nfunction keyman(Prism) {\n  Prism.languages.keyman = {\n    comment: {\n      pattern: /\\bc .*/i,\n      greedy: true\n    },\n    string: {\n      pattern: /\"[^\"\\r\\n]*\"|'[^'\\r\\n]*'/,\n      greedy: true\n    },\n    'virtual-key': {\n      pattern:\n        /\\[\\s*(?:(?:ALT|CAPS|CTRL|LALT|LCTRL|NCAPS|RALT|RCTRL|SHIFT)\\s+)*(?:[TKU]_[\\w?]+|[A-E]\\d\\d?|\"[^\"\\r\\n]*\"|'[^'\\r\\n]*')\\s*\\]/i,\n      greedy: true,\n      alias: 'function' // alias for styles\n    },\n    // https://help.keyman.com/developer/language/guide/headers\n    'header-keyword': {\n      pattern: /&\\w+/,\n      alias: 'bold' // alias for styles\n    },\n    'header-statement': {\n      pattern:\n        /\\b(?:bitmap|bitmaps|caps always off|caps on only|copyright|hotkey|language|layout|message|name|shift frees caps|version)\\b/i,\n      alias: 'bold' // alias for styles\n    },\n    'rule-keyword': {\n      pattern:\n        /\\b(?:any|baselayout|beep|call|context|deadkey|dk|if|index|layer|notany|nul|outs|platform|reset|return|save|set|store|use)\\b/i,\n      alias: 'keyword'\n    },\n    'structural-keyword': {\n      pattern: /\\b(?:ansi|begin|group|match|nomatch|unicode|using keys)\\b/i,\n      alias: 'keyword'\n    },\n    'compile-target': {\n      pattern: /\\$(?:keyman|keymanonly|keymanweb|kmfl|weaver):/i,\n      alias: 'property'\n    },\n    // U+####, x###, d### characters and numbers\n    number: /\\b(?:U\\+[\\dA-F]+|d\\d+|x[\\da-f]+|\\d+)\\b/i,\n    operator: /[+>\\\\$]|\\.\\./,\n    punctuation: /[()=,]/\n  }\n}\n","'use strict'\n\nmodule.exports = kotlin\nkotlin.displayName = 'kotlin'\nkotlin.aliases = ['kt', 'kts']\nfunction kotlin(Prism) {\n  ;(function (Prism) {\n    Prism.languages.kotlin = Prism.languages.extend('clike', {\n      keyword: {\n        // The lookbehind prevents wrong highlighting of e.g. kotlin.properties.get\n        pattern:\n          /(^|[^.])\\b(?:abstract|actual|annotation|as|break|by|catch|class|companion|const|constructor|continue|crossinline|data|do|dynamic|else|enum|expect|external|final|finally|for|fun|get|if|import|in|infix|init|inline|inner|interface|internal|is|lateinit|noinline|null|object|open|operator|out|override|package|private|protected|public|reified|return|sealed|set|super|suspend|tailrec|this|throw|to|try|typealias|val|var|vararg|when|where|while)\\b/,\n        lookbehind: true\n      },\n      function: [\n        {\n          pattern: /(?:`[^\\r\\n`]+`|\\b\\w+)(?=\\s*\\()/,\n          greedy: true\n        },\n        {\n          pattern: /(\\.)(?:`[^\\r\\n`]+`|\\w+)(?=\\s*\\{)/,\n          lookbehind: true,\n          greedy: true\n        }\n      ],\n      number:\n        /\\b(?:0[xX][\\da-fA-F]+(?:_[\\da-fA-F]+)*|0[bB][01]+(?:_[01]+)*|\\d+(?:_\\d+)*(?:\\.\\d+(?:_\\d+)*)?(?:[eE][+-]?\\d+(?:_\\d+)*)?[fFL]?)\\b/,\n      operator:\n        /\\+[+=]?|-[-=>]?|==?=?|!(?:!|==?)?|[\\/*%<>]=?|[?:]:?|\\.\\.|&&|\\|\\||\\b(?:and|inv|or|shl|shr|ushr|xor)\\b/\n    })\n    delete Prism.languages.kotlin['class-name']\n    var interpolationInside = {\n      'interpolation-punctuation': {\n        pattern: /^\\$\\{?|\\}$/,\n        alias: 'punctuation'\n      },\n      expression: {\n        pattern: /[\\s\\S]+/,\n        inside: Prism.languages.kotlin\n      }\n    }\n    Prism.languages.insertBefore('kotlin', 'string', {\n      // https://kotlinlang.org/spec/expressions.html#string-interpolation-expressions\n      'string-literal': [\n        {\n          pattern: /\"\"\"(?:[^$]|\\$(?:(?!\\{)|\\{[^{}]*\\}))*?\"\"\"/,\n          alias: 'multiline',\n          inside: {\n            interpolation: {\n              pattern: /\\$(?:[a-z_]\\w*|\\{[^{}]*\\})/i,\n              inside: interpolationInside\n            },\n            string: /[\\s\\S]+/\n          }\n        },\n        {\n          pattern: /\"(?:[^\"\\\\\\r\\n$]|\\\\.|\\$(?:(?!\\{)|\\{[^{}]*\\}))*\"/,\n          alias: 'singleline',\n          inside: {\n            interpolation: {\n              pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$(?:[a-z_]\\w*|\\{[^{}]*\\})/i,\n              lookbehind: true,\n              inside: interpolationInside\n            },\n            string: /[\\s\\S]+/\n          }\n        }\n      ],\n      char: {\n        // https://kotlinlang.org/spec/expressions.html#character-literals\n        pattern: /'(?:[^'\\\\\\r\\n]|\\\\(?:.|u[a-fA-F0-9]{0,4}))'/,\n        greedy: true\n      }\n    })\n    delete Prism.languages.kotlin['string']\n    Prism.languages.insertBefore('kotlin', 'keyword', {\n      annotation: {\n        pattern: /\\B@(?:\\w+:)?(?:[A-Z]\\w*|\\[[^\\]]+\\])/,\n        alias: 'builtin'\n      }\n    })\n    Prism.languages.insertBefore('kotlin', 'function', {\n      label: {\n        pattern: /\\b\\w+@|@\\w+\\b/,\n        alias: 'symbol'\n      }\n    })\n    Prism.languages.kt = Prism.languages.kotlin\n    Prism.languages.kts = Prism.languages.kotlin\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = kumir\nkumir.displayName = 'kumir'\nkumir.aliases = ['kum']\nfunction kumir(Prism) {\n  /* eslint-disable regexp/no-dupe-characters-character-class */\n  ;(function (Prism) {\n    /**\n     * Regular expression for characters that are not allowed in identifiers.\n     *\n     * @type {string}\n     */\n    var nonId = /\\s\\x00-\\x1f\\x22-\\x2f\\x3a-\\x3f\\x5b-\\x5e\\x60\\x7b-\\x7e/.source\n    /**\n     * Surround a regular expression for IDs with patterns for non-ID sequences.\n     *\n     * @param {string} pattern A regular expression for identifiers.\n     * @param {string} [flags] The regular expression flags.\n     * @returns {RegExp} A wrapped regular expression for identifiers.\n     */\n    function wrapId(pattern, flags) {\n      return RegExp(pattern.replace(/<nonId>/g, nonId), flags)\n    }\n    Prism.languages.kumir = {\n      comment: {\n        pattern: /\\|.*/\n      },\n      prolog: {\n        pattern: /#.*/,\n        greedy: true\n      },\n      string: {\n        pattern: /\"[^\\n\\r\"]*\"|'[^\\n\\r']*'/,\n        greedy: true\n      },\n      boolean: {\n        pattern: wrapId(/(^|[<nonId>])(?:да|нет)(?=[<nonId>]|$)/.source),\n        lookbehind: true\n      },\n      'operator-word': {\n        pattern: wrapId(/(^|[<nonId>])(?:и|или|не)(?=[<nonId>]|$)/.source),\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      'system-variable': {\n        pattern: wrapId(/(^|[<nonId>])знач(?=[<nonId>]|$)/.source),\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      type: [\n        {\n          pattern: wrapId(\n            /(^|[<nonId>])(?:вещ|лит|лог|сим|цел)(?:\\x20*таб)?(?=[<nonId>]|$)/\n              .source\n          ),\n          lookbehind: true,\n          alias: 'builtin'\n        },\n        {\n          pattern: wrapId(\n            /(^|[<nonId>])(?:компл|сканкод|файл|цвет)(?=[<nonId>]|$)/.source\n          ),\n          lookbehind: true,\n          alias: 'important'\n        }\n      ],\n      /**\n       * Should be performed after searching for type names because of \"таб\".\n       * \"таб\" is a reserved word, but never used without a preceding type name.\n       * \"НАЗНАЧИТЬ\", \"Фввод\", and \"Фвывод\" are not reserved words.\n       */\n      keyword: {\n        pattern: wrapId(\n          /(^|[<nonId>])(?:алг|арг(?:\\x20*рез)?|ввод|ВКЛЮЧИТЬ|вс[её]|выбор|вывод|выход|дано|для|до|дс|если|иначе|исп|использовать|кон(?:(?:\\x20+|_)исп)?|кц(?:(?:\\x20+|_)при)?|надо|нач|нс|нц|от|пауза|пока|при|раза?|рез|стоп|таб|то|утв|шаг)(?=[<nonId>]|$)/\n            .source\n        ),\n        lookbehind: true\n      },\n      /** Should be performed after searching for reserved words. */\n      name: {\n        // eslint-disable-next-line regexp/no-super-linear-backtracking\n        pattern: wrapId(\n          /(^|[<nonId>])[^\\d<nonId>][^<nonId>]*(?:\\x20+[^<nonId>]+)*(?=[<nonId>]|$)/\n            .source\n        ),\n        lookbehind: true\n      },\n      /** Should be performed after searching for names. */\n      number: {\n        pattern: wrapId(\n          /(^|[<nonId>])(?:\\B\\$[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)(?=[<nonId>]|$)/\n            .source,\n          'i'\n        ),\n        lookbehind: true\n      },\n      /** Should be performed after searching for words. */\n      punctuation: /:=|[(),:;\\[\\]]/,\n      /**\n       * Should be performed after searching for\n       * - numeric constants (because of \"+\" and \"-\");\n       * - punctuation marks (because of \":=\" and \"=\").\n       */\n      'operator-char': {\n        pattern: /\\*\\*?|<[=>]?|>=?|[-+/=]/,\n        alias: 'operator'\n      }\n    }\n    Prism.languages.kum = Prism.languages.kumir\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = kusto\nkusto.displayName = 'kusto'\nkusto.aliases = []\nfunction kusto(Prism) {\n  Prism.languages.kusto = {\n    comment: {\n      pattern: /\\/\\/.*/,\n      greedy: true\n    },\n    string: {\n      pattern:\n        /```[\\s\\S]*?```|[hH]?(?:\"(?:[^\\r\\n\\\\\"]|\\\\.)*\"|'(?:[^\\r\\n\\\\']|\\\\.)*'|@(?:\"[^\\r\\n\"]*\"|'[^\\r\\n']*'))/,\n      greedy: true\n    },\n    verb: {\n      pattern: /(\\|\\s*)[a-z][\\w-]*/i,\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    command: {\n      pattern: /\\.[a-z][a-z\\d-]*\\b/,\n      alias: 'keyword'\n    },\n    'class-name':\n      /\\b(?:bool|datetime|decimal|dynamic|guid|int|long|real|string|timespan)\\b/,\n    keyword:\n      /\\b(?:access|alias|and|anti|as|asc|auto|between|by|(?:contains|(?:ends|starts)with|has(?:perfix|suffix)?)(?:_cs)?|database|declare|desc|external|from|fullouter|has_all|in|ingestion|inline|inner|innerunique|into|(?:left|right)(?:anti(?:semi)?|inner|outer|semi)?|let|like|local|not|of|on|or|pattern|print|query_parameters|range|restrict|schema|set|step|table|tables|to|view|where|with|matches\\s+regex|nulls\\s+(?:first|last))(?![\\w-])/,\n    boolean: /\\b(?:false|null|true)\\b/,\n    function: /\\b[a-z_]\\w*(?=\\s*\\()/,\n    datetime: [\n      {\n        // RFC 822 + RFC 850\n        pattern:\n          /\\b(?:(?:Fri|Friday|Mon|Monday|Sat|Saturday|Sun|Sunday|Thu|Thursday|Tue|Tuesday|Wed|Wednesday)\\s*,\\s*)?\\d{1,2}(?:\\s+|-)(?:Apr|Aug|Dec|Feb|Jan|Jul|Jun|Mar|May|Nov|Oct|Sep)(?:\\s+|-)\\d{2}\\s+\\d{2}:\\d{2}(?::\\d{2})?(?:\\s*(?:\\b(?:[A-Z]|(?:[ECMT][DS]|GM|U)T)|[+-]\\d{4}))?\\b/,\n        alias: 'number'\n      },\n      {\n        // ISO 8601\n        pattern:\n          /[+-]?\\b(?:\\d{4}-\\d{2}-\\d{2}(?:[ T]\\d{2}:\\d{2}(?::\\d{2}(?:\\.\\d+)?)?)?|\\d{2}:\\d{2}(?::\\d{2}(?:\\.\\d+)?)?)Z?/,\n        alias: 'number'\n      }\n    ],\n    number:\n      /\\b(?:0x[0-9A-Fa-f]+|\\d+(?:\\.\\d+)?(?:[Ee][+-]?\\d+)?)(?:(?:min|sec|[mnµ]s|[dhms]|microsecond|tick)\\b)?|[+-]?\\binf\\b/,\n    operator: /=>|[!=]~|[!=<>]=?|[-+*/%|]|\\.\\./,\n    punctuation: /[()\\[\\]{},;.:]/\n  }\n}\n","'use strict'\n\nmodule.exports = latex\nlatex.displayName = 'latex'\nlatex.aliases = ['tex', 'context']\nfunction latex(Prism) {\n  ;(function (Prism) {\n    var funcPattern = /\\\\(?:[^a-z()[\\]]|[a-z*]+)/i\n    var insideEqu = {\n      'equation-command': {\n        pattern: funcPattern,\n        alias: 'regex'\n      }\n    }\n    Prism.languages.latex = {\n      comment: /%.*/,\n      // the verbatim environment prints whitespace to the document\n      cdata: {\n        pattern:\n          /(\\\\begin\\{((?:lstlisting|verbatim)\\*?)\\})[\\s\\S]*?(?=\\\\end\\{\\2\\})/,\n        lookbehind: true\n      },\n      /*\n       * equations can be between $$ $$ or $ $ or \\( \\) or \\[ \\]\n       * (all are multiline)\n       */\n      equation: [\n        {\n          pattern:\n            /\\$\\$(?:\\\\[\\s\\S]|[^\\\\$])+\\$\\$|\\$(?:\\\\[\\s\\S]|[^\\\\$])+\\$|\\\\\\([\\s\\S]*?\\\\\\)|\\\\\\[[\\s\\S]*?\\\\\\]/,\n          inside: insideEqu,\n          alias: 'string'\n        },\n        {\n          pattern:\n            /(\\\\begin\\{((?:align|eqnarray|equation|gather|math|multline)\\*?)\\})[\\s\\S]*?(?=\\\\end\\{\\2\\})/,\n          lookbehind: true,\n          inside: insideEqu,\n          alias: 'string'\n        }\n      ],\n      /*\n       * arguments which are keywords or references are highlighted\n       * as keywords\n       */\n      keyword: {\n        pattern:\n          /(\\\\(?:begin|cite|documentclass|end|label|ref|usepackage)(?:\\[[^\\]]+\\])?\\{)[^}]+(?=\\})/,\n        lookbehind: true\n      },\n      url: {\n        pattern: /(\\\\url\\{)[^}]+(?=\\})/,\n        lookbehind: true\n      },\n      /*\n       * section or chapter headlines are highlighted as bold so that\n       * they stand out more\n       */\n      headline: {\n        pattern:\n          /(\\\\(?:chapter|frametitle|paragraph|part|section|subparagraph|subsection|subsubparagraph|subsubsection|subsubsubparagraph)\\*?(?:\\[[^\\]]+\\])?\\{)[^}]+(?=\\})/,\n        lookbehind: true,\n        alias: 'class-name'\n      },\n      function: {\n        pattern: funcPattern,\n        alias: 'selector'\n      },\n      punctuation: /[[\\]{}&]/\n    }\n    Prism.languages.tex = Prism.languages.latex\n    Prism.languages.context = Prism.languages.latex\n  })(Prism)\n}\n","'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nvar refractorPhp = require('./php.js')\nmodule.exports = latte\nlatte.displayName = 'latte'\nlatte.aliases = []\nfunction latte(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  Prism.register(refractorPhp)\n  ;(function (Prism) {\n    Prism.languages.latte = {\n      comment: /^\\{\\*[\\s\\S]*/,\n      'latte-tag': {\n        // https://latte.nette.org/en/tags\n        pattern: /(^\\{(?:\\/(?=[a-z]))?)(?:[=_]|[a-z]\\w*\\b(?!\\())/i,\n        lookbehind: true,\n        alias: 'important'\n      },\n      delimiter: {\n        pattern: /^\\{\\/?|\\}$/,\n        alias: 'punctuation'\n      },\n      php: {\n        pattern: /\\S(?:[\\s\\S]*\\S)?/,\n        alias: 'language-php',\n        inside: Prism.languages.php\n      }\n    }\n    var markupLatte = Prism.languages.extend('markup', {})\n    Prism.languages.insertBefore(\n      'inside',\n      'attr-value',\n      {\n        'n-attr': {\n          pattern: /n:[\\w-]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+))?/,\n          inside: {\n            'attr-name': {\n              pattern: /^[^\\s=]+/,\n              alias: 'important'\n            },\n            'attr-value': {\n              pattern: /=[\\s\\S]+/,\n              inside: {\n                punctuation: [\n                  /^=/,\n                  {\n                    pattern: /^(\\s*)[\"']|[\"']$/,\n                    lookbehind: true\n                  }\n                ],\n                php: {\n                  pattern: /\\S(?:[\\s\\S]*\\S)?/,\n                  inside: Prism.languages.php\n                }\n              }\n            }\n          }\n        }\n      },\n      markupLatte.tag\n    )\n    Prism.hooks.add('before-tokenize', function (env) {\n      if (env.language !== 'latte') {\n        return\n      }\n      var lattePattern =\n        /\\{\\*[\\s\\S]*?\\*\\}|\\{[^'\"\\s{}*](?:[^\"'/{}]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*\\}/g\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'latte',\n        lattePattern\n      )\n      env.grammar = markupLatte\n    })\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'latte')\n    })\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = less\nless.displayName = 'less'\nless.aliases = []\nfunction less(Prism) {\n  /* FIXME :\n:extend() is not handled specifically : its highlighting is buggy.\nMixin usage must be inside a ruleset to be highlighted.\nAt-rules (e.g. import) containing interpolations are buggy.\nDetached rulesets are highlighted as at-rules.\nA comment before a mixin usage prevents the latter to be properly highlighted.\n*/\n  Prism.languages.less = Prism.languages.extend('css', {\n    comment: [\n      /\\/\\*[\\s\\S]*?\\*\\//,\n      {\n        pattern: /(^|[^\\\\])\\/\\/.*/,\n        lookbehind: true\n      }\n    ],\n    atrule: {\n      pattern:\n        /@[\\w-](?:\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,\n      inside: {\n        punctuation: /[:()]/\n      }\n    },\n    // selectors and mixins are considered the same\n    selector: {\n      pattern:\n        /(?:@\\{[\\w-]+\\}|[^{};\\s@])(?:@\\{[\\w-]+\\}|\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};@\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,\n      inside: {\n        // mixin parameters\n        variable: /@+[\\w-]+/\n      }\n    },\n    property: /(?:@\\{[\\w-]+\\}|[\\w-])+(?:\\+_?)?(?=\\s*:)/,\n    operator: /[+\\-*\\/]/\n  })\n  Prism.languages.insertBefore('less', 'property', {\n    variable: [\n      // Variable declaration (the colon must be consumed!)\n      {\n        pattern: /@[\\w-]+\\s*:/,\n        inside: {\n          punctuation: /:/\n        }\n      }, // Variable usage\n      /@@?[\\w-]+/\n    ],\n    'mixin-usage': {\n      pattern: /([{;]\\s*)[.#](?!\\d)[\\w-].*?(?=[(;])/,\n      lookbehind: true,\n      alias: 'function'\n    }\n  })\n}\n","'use strict'\nvar refractorScheme = require('./scheme.js')\nmodule.exports = lilypond\nlilypond.displayName = 'lilypond'\nlilypond.aliases = []\nfunction lilypond(Prism) {\n  Prism.register(refractorScheme)\n  ;(function (Prism) {\n    var schemeExpression =\n      /\\((?:[^();\"#\\\\]|\\\\[\\s\\S]|;.*(?!.)|\"(?:[^\"\\\\]|\\\\.)*\"|#(?:\\{(?:(?!#\\})[\\s\\S])*#\\}|[^{])|<expr>)*\\)/\n        .source // allow for up to pow(2, recursivenessLog2) many levels of recursive brace expressions\n    // For some reason, this can't be 4\n    var recursivenessLog2 = 5\n    for (var i = 0; i < recursivenessLog2; i++) {\n      schemeExpression = schemeExpression.replace(/<expr>/g, function () {\n        return schemeExpression\n      })\n    }\n    schemeExpression = schemeExpression.replace(/<expr>/g, /[^\\s\\S]/.source)\n    var lilypond = (Prism.languages.lilypond = {\n      comment: /%(?:(?!\\{).*|\\{[\\s\\S]*?%\\})/,\n      'embedded-scheme': {\n        pattern: RegExp(\n          /(^|[=\\s])#(?:\"(?:[^\"\\\\]|\\\\.)*\"|[^\\s()\"]*(?:[^\\s()]|<expr>))/.source.replace(\n            /<expr>/g,\n            function () {\n              return schemeExpression\n            }\n          ),\n          'm'\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          scheme: {\n            pattern: /^(#)[\\s\\S]+$/,\n            lookbehind: true,\n            alias: 'language-scheme',\n            inside: {\n              'embedded-lilypond': {\n                pattern: /#\\{[\\s\\S]*?#\\}/,\n                greedy: true,\n                inside: {\n                  punctuation: /^#\\{|#\\}$/,\n                  lilypond: {\n                    pattern: /[\\s\\S]+/,\n                    alias: 'language-lilypond',\n                    inside: null // see below\n                  }\n                }\n              },\n              rest: Prism.languages.scheme\n            }\n          },\n          punctuation: /#/\n        }\n      },\n      string: {\n        pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n        greedy: true\n      },\n      'class-name': {\n        pattern: /(\\\\new\\s+)[\\w-]+/,\n        lookbehind: true\n      },\n      keyword: {\n        pattern: /\\\\[a-z][-\\w]*/i,\n        inside: {\n          punctuation: /^\\\\/\n        }\n      },\n      operator: /[=|]|<<|>>/,\n      punctuation: {\n        pattern:\n          /(^|[a-z\\d])(?:'+|,+|[_^]?-[_^]?(?:[-+^!>._]|(?=\\d))|[_^]\\.?|[.!])|[{}()[\\]<>^~]|\\\\[()[\\]<>\\\\!]|--|__/,\n        lookbehind: true\n      },\n      number: /\\b\\d+(?:\\/\\d+)?\\b/\n    })\n    lilypond['embedded-scheme'].inside['scheme'].inside[\n      'embedded-lilypond'\n    ].inside['lilypond'].inside = lilypond\n    Prism.languages.ly = lilypond\n  })(Prism)\n}\n","'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = liquid\nliquid.displayName = 'liquid'\nliquid.aliases = []\nfunction liquid(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  Prism.languages.liquid = {\n    comment: {\n      pattern: /(^\\{%\\s*comment\\s*%\\})[\\s\\S]+(?=\\{%\\s*endcomment\\s*%\\}$)/,\n      lookbehind: true\n    },\n    delimiter: {\n      pattern: /^\\{(?:\\{\\{|[%\\{])-?|-?(?:\\}\\}|[%\\}])\\}$/,\n      alias: 'punctuation'\n    },\n    string: {\n      pattern: /\"[^\"]*\"|'[^']*'/,\n      greedy: true\n    },\n    keyword:\n      /\\b(?:as|assign|break|(?:end)?(?:capture|case|comment|for|form|if|paginate|raw|style|tablerow|unless)|continue|cycle|decrement|echo|else|elsif|in|include|increment|limit|liquid|offset|range|render|reversed|section|when|with)\\b/,\n    object:\n      /\\b(?:address|all_country_option_tags|article|block|blog|cart|checkout|collection|color|country|country_option_tags|currency|current_page|current_tags|customer|customer_address|date|discount_allocation|discount_application|external_video|filter|filter_value|font|forloop|fulfillment|generic_file|gift_card|group|handle|image|line_item|link|linklist|localization|location|measurement|media|metafield|model|model_source|order|page|page_description|page_image|page_title|part|policy|product|product_option|recommendations|request|robots|routes|rule|script|search|selling_plan|selling_plan_allocation|selling_plan_group|shipping_method|shop|shop_locale|sitemap|store_availability|tax_line|template|theme|transaction|unit_price_measurement|user_agent|variant|video|video_source)\\b/,\n    function: [\n      {\n        pattern: /(\\|\\s*)\\w+/,\n        lookbehind: true,\n        alias: 'filter'\n      },\n      {\n        // array functions\n        pattern: /(\\.\\s*)(?:first|last|size)/,\n        lookbehind: true\n      }\n    ],\n    boolean: /\\b(?:false|nil|true)\\b/,\n    range: {\n      pattern: /\\.\\./,\n      alias: 'operator'\n    },\n    // https://github.com/Shopify/liquid/blob/698f5e0d967423e013f6169d9111bd969bd78337/lib/liquid/lexer.rb#L21\n    number: /\\b\\d+(?:\\.\\d+)?\\b/,\n    operator: /[!=]=|<>|[<>]=?|[|?:=-]|\\b(?:and|contains(?=\\s)|or)\\b/,\n    punctuation: /[.,\\[\\]()]/,\n    empty: {\n      pattern: /\\bempty\\b/,\n      alias: 'keyword'\n    }\n  }\n  Prism.hooks.add('before-tokenize', function (env) {\n    var liquidPattern =\n      /\\{%\\s*comment\\s*%\\}[\\s\\S]*?\\{%\\s*endcomment\\s*%\\}|\\{(?:%[\\s\\S]*?%|\\{\\{[\\s\\S]*?\\}\\}|\\{[\\s\\S]*?\\})\\}/g\n    var insideRaw = false\n    Prism.languages['markup-templating'].buildPlaceholders(\n      env,\n      'liquid',\n      liquidPattern,\n      function (match) {\n        var tagMatch = /^\\{%-?\\s*(\\w+)/.exec(match)\n        if (tagMatch) {\n          var tag = tagMatch[1]\n          if (tag === 'raw' && !insideRaw) {\n            insideRaw = true\n            return true\n          } else if (tag === 'endraw') {\n            insideRaw = false\n            return true\n          }\n        }\n        return !insideRaw\n      }\n    )\n  })\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'liquid')\n  })\n}\n","'use strict'\n\nmodule.exports = lisp\nlisp.displayName = 'lisp'\nlisp.aliases = []\nfunction lisp(Prism) {\n  ;(function (Prism) {\n    /**\n     * Functions to construct regular expressions\n     * e.g. (interactive ... or (interactive)\n     *\n     * @param {string} name\n     * @returns {RegExp}\n     */\n    function simple_form(name) {\n      return RegExp(/(\\()/.source + '(?:' + name + ')' + /(?=[\\s\\)])/.source)\n    }\n    /**\n     * booleans and numbers\n     *\n     * @param {string} pattern\n     * @returns {RegExp}\n     */\n    function primitive(pattern) {\n      return RegExp(\n        /([\\s([])/.source + '(?:' + pattern + ')' + /(?=[\\s)])/.source\n      )\n    } // Patterns in regular expressions\n    // Symbol name. See https://www.gnu.org/software/emacs/manual/html_node/elisp/Symbol-Type.html\n    // & and : are excluded as they are usually used for special purposes\n    var symbol = /(?!\\d)[-+*/~!@$%^=<>{}\\w]+/.source // symbol starting with & used in function arguments\n    var marker = '&' + symbol // Open parenthesis for look-behind\n    var par = '(\\\\()'\n    var endpar = '(?=\\\\))' // End the pattern with look-ahead space\n    var space = '(?=\\\\s)'\n    var nestedPar =\n      /(?:[^()]|\\((?:[^()]|\\((?:[^()]|\\((?:[^()]|\\((?:[^()]|\\([^()]*\\))*\\))*\\))*\\))*\\))*/\n        .source\n    var language = {\n      // Three or four semicolons are considered a heading.\n      // See https://www.gnu.org/software/emacs/manual/html_node/elisp/Comment-Tips.html\n      heading: {\n        pattern: /;;;.*/,\n        alias: ['comment', 'title']\n      },\n      comment: /;.*/,\n      string: {\n        pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n        greedy: true,\n        inside: {\n          argument: /[-A-Z]+(?=[.,\\s])/,\n          symbol: RegExp('`' + symbol + \"'\")\n        }\n      },\n      'quoted-symbol': {\n        pattern: RegExp(\"#?'\" + symbol),\n        alias: ['variable', 'symbol']\n      },\n      'lisp-property': {\n        pattern: RegExp(':' + symbol),\n        alias: 'property'\n      },\n      splice: {\n        pattern: RegExp(',@?' + symbol),\n        alias: ['symbol', 'variable']\n      },\n      keyword: [\n        {\n          pattern: RegExp(\n            par +\n              '(?:and|(?:cl-)?letf|cl-loop|cond|cons|error|if|(?:lexical-)?let\\\\*?|message|not|null|or|provide|require|setq|unless|use-package|when|while)' +\n              space\n          ),\n          lookbehind: true\n        },\n        {\n          pattern: RegExp(\n            par +\n              '(?:append|by|collect|concat|do|finally|for|in|return)' +\n              space\n          ),\n          lookbehind: true\n        }\n      ],\n      declare: {\n        pattern: simple_form(/declare/.source),\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      interactive: {\n        pattern: simple_form(/interactive/.source),\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      boolean: {\n        pattern: primitive(/nil|t/.source),\n        lookbehind: true\n      },\n      number: {\n        pattern: primitive(/[-+]?\\d+(?:\\.\\d*)?/.source),\n        lookbehind: true\n      },\n      defvar: {\n        pattern: RegExp(par + 'def(?:const|custom|group|var)\\\\s+' + symbol),\n        lookbehind: true,\n        inside: {\n          keyword: /^def[a-z]+/,\n          variable: RegExp(symbol)\n        }\n      },\n      defun: {\n        pattern: RegExp(\n          par +\n            /(?:cl-)?(?:defmacro|defun\\*?)\\s+/.source +\n            symbol +\n            /\\s+\\(/.source +\n            nestedPar +\n            /\\)/.source\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          keyword: /^(?:cl-)?def\\S+/,\n          // See below, this property needs to be defined later so that it can\n          // reference the language object.\n          arguments: null,\n          function: {\n            pattern: RegExp('(^\\\\s)' + symbol),\n            lookbehind: true\n          },\n          punctuation: /[()]/\n        }\n      },\n      lambda: {\n        pattern: RegExp(\n          par +\n            'lambda\\\\s+\\\\(\\\\s*(?:&?' +\n            symbol +\n            '(?:\\\\s+&?' +\n            symbol +\n            ')*\\\\s*)?\\\\)'\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          keyword: /^lambda/,\n          // See below, this property needs to be defined later so that it can\n          // reference the language object.\n          arguments: null,\n          punctuation: /[()]/\n        }\n      },\n      car: {\n        pattern: RegExp(par + symbol),\n        lookbehind: true\n      },\n      punctuation: [\n        // open paren, brackets, and close paren\n        /(?:['`,]?\\(|[)\\[\\]])/, // cons\n        {\n          pattern: /(\\s)\\.(?=\\s)/,\n          lookbehind: true\n        }\n      ]\n    }\n    var arg = {\n      'lisp-marker': RegExp(marker),\n      varform: {\n        pattern: RegExp(\n          /\\(/.source + symbol + /\\s+(?=\\S)/.source + nestedPar + /\\)/.source\n        ),\n        inside: language\n      },\n      argument: {\n        pattern: RegExp(/(^|[\\s(])/.source + symbol),\n        lookbehind: true,\n        alias: 'variable'\n      },\n      rest: language\n    }\n    var forms = '\\\\S+(?:\\\\s+\\\\S+)*'\n    var arglist = {\n      pattern: RegExp(par + nestedPar + endpar),\n      lookbehind: true,\n      inside: {\n        'rest-vars': {\n          pattern: RegExp('&(?:body|rest)\\\\s+' + forms),\n          inside: arg\n        },\n        'other-marker-vars': {\n          pattern: RegExp('&(?:aux|optional)\\\\s+' + forms),\n          inside: arg\n        },\n        keys: {\n          pattern: RegExp('&key\\\\s+' + forms + '(?:\\\\s+&allow-other-keys)?'),\n          inside: arg\n        },\n        argument: {\n          pattern: RegExp(symbol),\n          alias: 'variable'\n        },\n        punctuation: /[()]/\n      }\n    }\n    language['lambda'].inside.arguments = arglist\n    language['defun'].inside.arguments = Prism.util.clone(arglist)\n    language['defun'].inside.arguments.inside.sublist = arglist\n    Prism.languages.lisp = language\n    Prism.languages.elisp = language\n    Prism.languages.emacs = language\n    Prism.languages['emacs-lisp'] = language\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = livescript\nlivescript.displayName = 'livescript'\nlivescript.aliases = []\nfunction livescript(Prism) {\n  Prism.languages.livescript = {\n    comment: [\n      {\n        pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n        lookbehind: true\n      },\n      {\n        pattern: /(^|[^\\\\])#.*/,\n        lookbehind: true\n      }\n    ],\n    'interpolated-string': {\n      /* Look-behind and look-ahead prevents wrong behavior of the greedy pattern\n       * forcing it to match \"\"\"-quoted string when it would otherwise match \"-quoted first. */\n      pattern: /(^|[^\"])(\"\"\"|\")(?:\\\\[\\s\\S]|(?!\\2)[^\\\\])*\\2(?!\")/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        variable: {\n          pattern: /(^|[^\\\\])#[a-z_](?:-?[a-z]|[\\d_])*/m,\n          lookbehind: true\n        },\n        interpolation: {\n          pattern: /(^|[^\\\\])#\\{[^}]+\\}/m,\n          lookbehind: true,\n          inside: {\n            'interpolation-punctuation': {\n              pattern: /^#\\{|\\}$/,\n              alias: 'variable'\n            } // See rest below\n          }\n        },\n        string: /[\\s\\S]+/\n      }\n    },\n    string: [\n      {\n        pattern: /('''|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n        greedy: true\n      },\n      {\n        pattern: /<\\[[\\s\\S]*?\\]>/,\n        greedy: true\n      },\n      /\\\\[^\\s,;\\])}]+/\n    ],\n    regex: [\n      {\n        pattern: /\\/\\/(?:\\[[^\\r\\n\\]]*\\]|\\\\.|(?!\\/\\/)[^\\\\\\[])+\\/\\/[gimyu]{0,5}/,\n        greedy: true,\n        inside: {\n          comment: {\n            pattern: /(^|[^\\\\])#.*/,\n            lookbehind: true\n          }\n        }\n      },\n      {\n        pattern: /\\/(?:\\[[^\\r\\n\\]]*\\]|\\\\.|[^/\\\\\\r\\n\\[])+\\/[gimyu]{0,5}/,\n        greedy: true\n      }\n    ],\n    keyword: {\n      pattern:\n        /(^|(?!-).)\\b(?:break|case|catch|class|const|continue|default|do|else|extends|fallthrough|finally|for(?: ever)?|function|if|implements|it|let|loop|new|null|otherwise|own|return|super|switch|that|then|this|throw|try|unless|until|var|void|when|while|yield)(?!-)\\b/m,\n      lookbehind: true\n    },\n    'keyword-operator': {\n      pattern:\n        /(^|[^-])\\b(?:(?:delete|require|typeof)!|(?:and|by|delete|export|from|import(?: all)?|in|instanceof|is(?: not|nt)?|not|of|or|til|to|typeof|with|xor)(?!-)\\b)/m,\n      lookbehind: true,\n      alias: 'operator'\n    },\n    boolean: {\n      pattern: /(^|[^-])\\b(?:false|no|off|on|true|yes)(?!-)\\b/m,\n      lookbehind: true\n    },\n    argument: {\n      // Don't match .&. nor &&\n      pattern: /(^|(?!\\.&\\.)[^&])&(?!&)\\d*/m,\n      lookbehind: true,\n      alias: 'variable'\n    },\n    number: /\\b(?:\\d+~[\\da-z]+|\\d[\\d_]*(?:\\.\\d[\\d_]*)?(?:[a-z]\\w*)?)/i,\n    identifier: /[a-z_](?:-?[a-z]|[\\d_])*/i,\n    operator: [\n      // Spaced .\n      {\n        pattern: /( )\\.(?= )/,\n        lookbehind: true\n      }, // Full list, in order:\n      // .= .~ .. ...\n      // .&. .^. .<<. .>>. .>>>.\n      // := :: ::=\n      // &&\n      // || |>\n      // < << <<< <<<<\n      // <- <-- <-! <--!\n      // <~ <~~ <~! <~~!\n      // <| <= <?\n      // > >> >= >?\n      // - -- -> -->\n      // + ++\n      // @ @@\n      // % %%\n      // * **\n      // ! != !~=\n      // !~> !~~>\n      // !-> !-->\n      // ~ ~> ~~> ~=\n      // = ==\n      // ^ ^^\n      // / ?\n      /\\.(?:[=~]|\\.\\.?)|\\.(?:[&|^]|<<|>>>?)\\.|:(?:=|:=?)|&&|\\|[|>]|<(?:<<?<?|--?!?|~~?!?|[|=?])?|>[>=?]?|-(?:->?|>)?|\\+\\+?|@@?|%%?|\\*\\*?|!(?:~?=|--?>|~?~>)?|~(?:~?>|=)?|==?|\\^\\^?|[\\/?]/\n    ],\n    punctuation: /[(){}\\[\\]|.,:;`]/\n  }\n  Prism.languages.livescript['interpolated-string'].inside[\n    'interpolation'\n  ].inside.rest = Prism.languages.livescript\n}\n","'use strict'\n\nmodule.exports = llvm\nllvm.displayName = 'llvm'\nllvm.aliases = []\nfunction llvm(Prism) {\n  ;(function (Prism) {\n    Prism.languages.llvm = {\n      comment: /;.*/,\n      string: {\n        pattern: /\"[^\"]*\"/,\n        greedy: true\n      },\n      boolean: /\\b(?:false|true)\\b/,\n      variable: /[%@!#](?:(?!\\d)(?:[-$.\\w]|\\\\[a-f\\d]{2})+|\\d+)/i,\n      label: /(?!\\d)(?:[-$.\\w]|\\\\[a-f\\d]{2})+:/i,\n      type: {\n        pattern:\n          /\\b(?:double|float|fp128|half|i[1-9]\\d*|label|metadata|ppc_fp128|token|void|x86_fp80|x86_mmx)\\b/,\n        alias: 'class-name'\n      },\n      keyword: /\\b[a-z_][a-z_0-9]*\\b/,\n      number:\n        /[+-]?\\b\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?\\b|\\b0x[\\dA-Fa-f]+\\b|\\b0xK[\\dA-Fa-f]{20}\\b|\\b0x[ML][\\dA-Fa-f]{32}\\b|\\b0xH[\\dA-Fa-f]{4}\\b/,\n      punctuation: /[{}[\\];(),.!*=<>]/\n    }\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = log\nlog.displayName = 'log'\nlog.aliases = []\nfunction log(Prism) {\n  // This is a language definition for generic log files.\n  // Since there is no one log format, this language definition has to support all formats to some degree.\n  //\n  // Based on https://github.com/MTDL9/vim-log-highlighting\n  Prism.languages.log = {\n    string: {\n      // Single-quoted strings must not be confused with plain text. E.g. Can't isn't Susan's Chris' toy\n      pattern: /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?![st] | \\w)(?:[^'\\\\\\r\\n]|\\\\.)*'/,\n      greedy: true\n    },\n    exception: {\n      pattern:\n        /(^|[^\\w.])[a-z][\\w.]*(?:Error|Exception):.*(?:(?:\\r\\n?|\\n)[ \\t]*(?:at[ \\t].+|\\.{3}.*|Caused by:.*))+(?:(?:\\r\\n?|\\n)[ \\t]*\\.\\.\\. .*)?/,\n      lookbehind: true,\n      greedy: true,\n      alias: ['javastacktrace', 'language-javastacktrace'],\n      inside: Prism.languages['javastacktrace'] || {\n        keyword: /\\bat\\b/,\n        function: /[a-z_][\\w$]*(?=\\()/,\n        punctuation: /[.:()]/\n      }\n    },\n    level: [\n      {\n        pattern:\n          /\\b(?:ALERT|CRIT|CRITICAL|EMERG|EMERGENCY|ERR|ERROR|FAILURE|FATAL|SEVERE)\\b/,\n        alias: ['error', 'important']\n      },\n      {\n        pattern: /\\b(?:WARN|WARNING|WRN)\\b/,\n        alias: ['warning', 'important']\n      },\n      {\n        pattern: /\\b(?:DISPLAY|INF|INFO|NOTICE|STATUS)\\b/,\n        alias: ['info', 'keyword']\n      },\n      {\n        pattern: /\\b(?:DBG|DEBUG|FINE)\\b/,\n        alias: ['debug', 'keyword']\n      },\n      {\n        pattern: /\\b(?:FINER|FINEST|TRACE|TRC|VERBOSE|VRB)\\b/,\n        alias: ['trace', 'comment']\n      }\n    ],\n    property: {\n      pattern:\n        /((?:^|[\\]|])[ \\t]*)[a-z_](?:[\\w-]|\\b\\/\\b)*(?:[. ]\\(?\\w(?:[\\w-]|\\b\\/\\b)*\\)?)*:(?=\\s)/im,\n      lookbehind: true\n    },\n    separator: {\n      pattern: /(^|[^-+])-{3,}|={3,}|\\*{3,}|- - /m,\n      lookbehind: true,\n      alias: 'comment'\n    },\n    url: /\\b(?:file|ftp|https?):\\/\\/[^\\s|,;'\"]*[^\\s|,;'\">.]/,\n    email: {\n      pattern: /(^|\\s)[-\\w+.]+@[a-z][a-z0-9-]*(?:\\.[a-z][a-z0-9-]*)+(?=\\s)/,\n      lookbehind: true,\n      alias: 'url'\n    },\n    'ip-address': {\n      pattern: /\\b(?:\\d{1,3}(?:\\.\\d{1,3}){3})\\b/,\n      alias: 'constant'\n    },\n    'mac-address': {\n      pattern: /\\b[a-f0-9]{2}(?::[a-f0-9]{2}){5}\\b/i,\n      alias: 'constant'\n    },\n    domain: {\n      pattern:\n        /(^|\\s)[a-z][a-z0-9-]*(?:\\.[a-z][a-z0-9-]*)*\\.[a-z][a-z0-9-]+(?=\\s)/,\n      lookbehind: true,\n      alias: 'constant'\n    },\n    uuid: {\n      pattern:\n        /\\b[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\\b/i,\n      alias: 'constant'\n    },\n    hash: {\n      pattern: /\\b(?:[a-f0-9]{32}){1,2}\\b/i,\n      alias: 'constant'\n    },\n    'file-path': {\n      pattern:\n        /\\b[a-z]:[\\\\/][^\\s|,;:(){}\\[\\]\"']+|(^|[\\s:\\[\\](>|])\\.{0,2}\\/\\w[^\\s|,;:(){}\\[\\]\"']*/i,\n      lookbehind: true,\n      greedy: true,\n      alias: 'string'\n    },\n    date: {\n      pattern: RegExp(\n        /\\b\\d{4}[-/]\\d{2}[-/]\\d{2}(?:T(?=\\d{1,2}:)|(?=\\s\\d{1,2}:))/.source +\n          '|' +\n          /\\b\\d{1,4}[-/ ](?:\\d{1,2}|Apr|Aug|Dec|Feb|Jan|Jul|Jun|Mar|May|Nov|Oct|Sep)[-/ ]\\d{2,4}T?\\b/\n            .source +\n          '|' +\n          /\\b(?:(?:Fri|Mon|Sat|Sun|Thu|Tue|Wed)(?:\\s{1,2}(?:Apr|Aug|Dec|Feb|Jan|Jul|Jun|Mar|May|Nov|Oct|Sep))?|Apr|Aug|Dec|Feb|Jan|Jul|Jun|Mar|May|Nov|Oct|Sep)\\s{1,2}\\d{1,2}\\b/\n            .source,\n        'i'\n      ),\n      alias: 'number'\n    },\n    time: {\n      pattern:\n        /\\b\\d{1,2}:\\d{1,2}:\\d{1,2}(?:[.,:]\\d+)?(?:\\s?[+-]\\d{2}:?\\d{2}|Z)?\\b/,\n      alias: 'number'\n    },\n    boolean: /\\b(?:false|null|true)\\b/i,\n    number: {\n      pattern:\n        /(^|[^.\\w])(?:0x[a-f0-9]+|0o[0-7]+|0b[01]+|v?\\d[\\da-f]*(?:\\.\\d+)*(?:e[+-]?\\d+)?[a-z]{0,3}\\b)\\b(?!\\.\\w)/i,\n      lookbehind: true\n    },\n    operator: /[;:?<=>~/@!$%&+\\-|^(){}*#]/,\n    punctuation: /[\\[\\].,]/\n  }\n}\n","'use strict'\n\nmodule.exports = lolcode\nlolcode.displayName = 'lolcode'\nlolcode.aliases = []\nfunction lolcode(Prism) {\n  Prism.languages.lolcode = {\n    comment: [/\\bOBTW\\s[\\s\\S]*?\\sTLDR\\b/, /\\bBTW.+/],\n    string: {\n      pattern: /\"(?::.|[^\":])*\"/,\n      inside: {\n        variable: /:\\{[^}]+\\}/,\n        symbol: [/:\\([a-f\\d]+\\)/i, /:\\[[^\\]]+\\]/, /:[)>o\":]/]\n      },\n      greedy: true\n    },\n    number: /(?:\\B-)?(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)/,\n    symbol: {\n      pattern: /(^|\\s)(?:A )?(?:BUKKIT|NOOB|NUMBAR|NUMBR|TROOF|YARN)(?=\\s|,|$)/,\n      lookbehind: true,\n      inside: {\n        keyword: /A(?=\\s)/\n      }\n    },\n    label: {\n      pattern: /((?:^|\\s)(?:IM IN YR|IM OUTTA YR) )[a-zA-Z]\\w*/,\n      lookbehind: true,\n      alias: 'string'\n    },\n    function: {\n      pattern: /((?:^|\\s)(?:HOW IZ I|I IZ|IZ) )[a-zA-Z]\\w*/,\n      lookbehind: true\n    },\n    keyword: [\n      {\n        pattern:\n          /(^|\\s)(?:AN|FOUND YR|GIMMEH|GTFO|HAI|HAS A|HOW IZ I|I HAS A|I IZ|IF U SAY SO|IM IN YR|IM OUTTA YR|IS NOW(?: A)?|ITZ(?: A)?|IZ|KTHX|KTHXBYE|LIEK(?: A)?|MAEK|MEBBE|MKAY|NERFIN|NO WAI|O HAI IM|O RLY\\?|OIC|OMG|OMGWTF|R|SMOOSH|SRS|TIL|UPPIN|VISIBLE|WILE|WTF\\?|YA RLY|YR)(?=\\s|,|$)/,\n        lookbehind: true\n      },\n      /'Z(?=\\s|,|$)/\n    ],\n    boolean: {\n      pattern: /(^|\\s)(?:FAIL|WIN)(?=\\s|,|$)/,\n      lookbehind: true\n    },\n    variable: {\n      pattern: /(^|\\s)IT(?=\\s|,|$)/,\n      lookbehind: true\n    },\n    operator: {\n      pattern:\n        /(^|\\s)(?:NOT|BOTH SAEM|DIFFRINT|(?:ALL|ANY|BIGGR|BOTH|DIFF|EITHER|MOD|PRODUKT|QUOSHUNT|SMALLR|SUM|WON) OF)(?=\\s|,|$)/,\n      lookbehind: true\n    },\n    punctuation: /\\.{3}|…|,|!/\n  }\n}\n","'use strict'\n\nmodule.exports = lua\nlua.displayName = 'lua'\nlua.aliases = []\nfunction lua(Prism) {\n  Prism.languages.lua = {\n    comment: /^#!.+|--(?:\\[(=*)\\[[\\s\\S]*?\\]\\1\\]|.*)/m,\n    // \\z may be used to skip the following space\n    string: {\n      pattern:\n        /([\"'])(?:(?!\\1)[^\\\\\\r\\n]|\\\\z(?:\\r\\n|\\s)|\\\\(?:\\r\\n|[^z]))*\\1|\\[(=*)\\[[\\s\\S]*?\\]\\2\\]/,\n      greedy: true\n    },\n    number:\n      /\\b0x[a-f\\d]+(?:\\.[a-f\\d]*)?(?:p[+-]?\\d+)?\\b|\\b\\d+(?:\\.\\B|(?:\\.\\d*)?(?:e[+-]?\\d+)?\\b)|\\B\\.\\d+(?:e[+-]?\\d+)?\\b/i,\n    keyword:\n      /\\b(?:and|break|do|else|elseif|end|false|for|function|goto|if|in|local|nil|not|or|repeat|return|then|true|until|while)\\b/,\n    function: /(?!\\d)\\w+(?=\\s*(?:[({]))/,\n    operator: [\n      /[-+*%^&|#]|\\/\\/?|<[<=]?|>[>=]?|[=~]=?/,\n      {\n        // Match \"..\" but don't break \"...\"\n        pattern: /(^|[^.])\\.\\.(?!\\.)/,\n        lookbehind: true\n      }\n    ],\n    punctuation: /[\\[\\](){},;]|\\.+|:+/\n  }\n}\n","'use strict'\n\nmodule.exports = magma\nmagma.displayName = 'magma'\nmagma.aliases = []\nfunction magma(Prism) {\n  Prism.languages.magma = {\n    output: {\n      pattern:\n        /^(>.*(?:\\r(?:\\n|(?!\\n))|\\n))(?!>)(?:.+|(?:\\r(?:\\n|(?!\\n))|\\n)(?!>).*)(?:(?:\\r(?:\\n|(?!\\n))|\\n)(?!>).*)*/m,\n      lookbehind: true,\n      greedy: true\n    },\n    comment: {\n      pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,\n      greedy: true\n    },\n    string: {\n      pattern: /(^|[^\\\\\"])\"(?:[^\\r\\n\\\\\"]|\\\\.)*\"/,\n      lookbehind: true,\n      greedy: true\n    },\n    // http://magma.maths.usyd.edu.au/magma/handbook/text/82\n    keyword:\n      /\\b(?:_|adj|and|assert|assert2|assert3|assigned|break|by|case|cat|catch|clear|cmpeq|cmpne|continue|declare|default|delete|diff|div|do|elif|else|end|eq|error|eval|exists|exit|for|forall|forward|fprintf|freeze|function|ge|gt|if|iload|import|in|intrinsic|is|join|le|load|local|lt|meet|mod|ne|not|notadj|notin|notsubset|or|print|printf|procedure|quit|random|read|readi|repeat|require|requirege|requirerange|restore|return|save|sdiff|select|subset|then|time|to|try|until|vprint|vprintf|vtime|when|where|while|xor)\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    generator: {\n      pattern: /\\b[a-z_]\\w*(?=\\s*<)/i,\n      alias: 'class-name'\n    },\n    function: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n    number: {\n      pattern:\n        /(^|[^\\w.]|\\.\\.)(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:[eE][+-]?\\d+)?(?:_[a-z]?)?(?=$|[^\\w.]|\\.\\.)/,\n      lookbehind: true\n    },\n    operator: /->|[-+*/^~!|#=]|:=|\\.\\./,\n    punctuation: /[()[\\]{}<>,;.:]/\n  }\n}\n","'use strict'\n\nmodule.exports = makefile\nmakefile.displayName = 'makefile'\nmakefile.aliases = []\nfunction makefile(Prism) {\n  Prism.languages.makefile = {\n    comment: {\n      pattern: /(^|[^\\\\])#(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])*/,\n      lookbehind: true\n    },\n    string: {\n      pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true\n    },\n    'builtin-target': {\n      pattern: /\\.[A-Z][^:#=\\s]+(?=\\s*:(?!=))/,\n      alias: 'builtin'\n    },\n    target: {\n      pattern: /^(?:[^:=\\s]|[ \\t]+(?![\\s:]))+(?=\\s*:(?!=))/m,\n      alias: 'symbol',\n      inside: {\n        variable: /\\$+(?:(?!\\$)[^(){}:#=\\s]+|(?=[({]))/\n      }\n    },\n    variable: /\\$+(?:(?!\\$)[^(){}:#=\\s]+|\\([@*%<^+?][DF]\\)|(?=[({]))/,\n    // Directives\n    keyword:\n      /-include\\b|\\b(?:define|else|endef|endif|export|ifn?def|ifn?eq|include|override|private|sinclude|undefine|unexport|vpath)\\b/,\n    function: {\n      pattern:\n        /(\\()(?:abspath|addsuffix|and|basename|call|dir|error|eval|file|filter(?:-out)?|findstring|firstword|flavor|foreach|guile|if|info|join|lastword|load|notdir|or|origin|patsubst|realpath|shell|sort|strip|subst|suffix|value|warning|wildcard|word(?:list|s)?)(?=[ \\t])/,\n      lookbehind: true\n    },\n    operator: /(?:::|[?:+!])?=|[|@]/,\n    punctuation: /[:;(){}]/\n  }\n}\n","'use strict'\n\nmodule.exports = markdown\nmarkdown.displayName = 'markdown'\nmarkdown.aliases = ['md']\nfunction markdown(Prism) {\n  ;(function (Prism) {\n    // Allow only one line break\n    var inner = /(?:\\\\.|[^\\\\\\n\\r]|(?:\\n|\\r\\n?)(?![\\r\\n]))/.source\n    /**\n     * This function is intended for the creation of the bold or italic pattern.\n     *\n     * This also adds a lookbehind group to the given pattern to ensure that the pattern is not backslash-escaped.\n     *\n     * _Note:_ Keep in mind that this adds a capturing group.\n     *\n     * @param {string} pattern\n     * @returns {RegExp}\n     */\n    function createInline(pattern) {\n      pattern = pattern.replace(/<inner>/g, function () {\n        return inner\n      })\n      return RegExp(/((?:^|[^\\\\])(?:\\\\{2})*)/.source + '(?:' + pattern + ')')\n    }\n    var tableCell = /(?:\\\\.|``(?:[^`\\r\\n]|`(?!`))+``|`[^`\\r\\n]+`|[^\\\\|\\r\\n`])+/\n      .source\n    var tableRow =\n      /\\|?__(?:\\|__)+\\|?(?:(?:\\n|\\r\\n?)|(?![\\s\\S]))/.source.replace(\n        /__/g,\n        function () {\n          return tableCell\n        }\n      )\n    var tableLine =\n      /\\|?[ \\t]*:?-{3,}:?[ \\t]*(?:\\|[ \\t]*:?-{3,}:?[ \\t]*)+\\|?(?:\\n|\\r\\n?)/\n        .source\n    Prism.languages.markdown = Prism.languages.extend('markup', {})\n    Prism.languages.insertBefore('markdown', 'prolog', {\n      'front-matter-block': {\n        pattern: /(^(?:\\s*[\\r\\n])?)---(?!.)[\\s\\S]*?[\\r\\n]---(?!.)/,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          punctuation: /^---|---$/,\n          'front-matter': {\n            pattern: /\\S+(?:\\s+\\S+)*/,\n            alias: ['yaml', 'language-yaml'],\n            inside: Prism.languages.yaml\n          }\n        }\n      },\n      blockquote: {\n        // > ...\n        pattern: /^>(?:[\\t ]*>)*/m,\n        alias: 'punctuation'\n      },\n      table: {\n        pattern: RegExp(\n          '^' + tableRow + tableLine + '(?:' + tableRow + ')*',\n          'm'\n        ),\n        inside: {\n          'table-data-rows': {\n            pattern: RegExp(\n              '^(' + tableRow + tableLine + ')(?:' + tableRow + ')*$'\n            ),\n            lookbehind: true,\n            inside: {\n              'table-data': {\n                pattern: RegExp(tableCell),\n                inside: Prism.languages.markdown\n              },\n              punctuation: /\\|/\n            }\n          },\n          'table-line': {\n            pattern: RegExp('^(' + tableRow + ')' + tableLine + '$'),\n            lookbehind: true,\n            inside: {\n              punctuation: /\\||:?-{3,}:?/\n            }\n          },\n          'table-header-row': {\n            pattern: RegExp('^' + tableRow + '$'),\n            inside: {\n              'table-header': {\n                pattern: RegExp(tableCell),\n                alias: 'important',\n                inside: Prism.languages.markdown\n              },\n              punctuation: /\\|/\n            }\n          }\n        }\n      },\n      code: [\n        {\n          // Prefixed by 4 spaces or 1 tab and preceded by an empty line\n          pattern:\n            /((?:^|\\n)[ \\t]*\\n|(?:^|\\r\\n?)[ \\t]*\\r\\n?)(?: {4}|\\t).+(?:(?:\\n|\\r\\n?)(?: {4}|\\t).+)*/,\n          lookbehind: true,\n          alias: 'keyword'\n        },\n        {\n          // ```optional language\n          // code block\n          // ```\n          pattern: /^```[\\s\\S]*?^```$/m,\n          greedy: true,\n          inside: {\n            'code-block': {\n              pattern: /^(```.*(?:\\n|\\r\\n?))[\\s\\S]+?(?=(?:\\n|\\r\\n?)^```$)/m,\n              lookbehind: true\n            },\n            'code-language': {\n              pattern: /^(```).+/,\n              lookbehind: true\n            },\n            punctuation: /```/\n          }\n        }\n      ],\n      title: [\n        {\n          // title 1\n          // =======\n          // title 2\n          // -------\n          pattern: /\\S.*(?:\\n|\\r\\n?)(?:==+|--+)(?=[ \\t]*$)/m,\n          alias: 'important',\n          inside: {\n            punctuation: /==+$|--+$/\n          }\n        },\n        {\n          // # title 1\n          // ###### title 6\n          pattern: /(^\\s*)#.+/m,\n          lookbehind: true,\n          alias: 'important',\n          inside: {\n            punctuation: /^#+|#+$/\n          }\n        }\n      ],\n      hr: {\n        // ***\n        // ---\n        // * * *\n        // -----------\n        pattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      list: {\n        // * item\n        // + item\n        // - item\n        // 1. item\n        pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      'url-reference': {\n        // [id]: http://example.com \"Optional title\"\n        // [id]: http://example.com 'Optional title'\n        // [id]: http://example.com (Optional title)\n        // [id]: <http://example.com> \"Optional title\"\n        pattern:\n          /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n        inside: {\n          variable: {\n            pattern: /^(!?\\[)[^\\]]+/,\n            lookbehind: true\n          },\n          string:\n            /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n          punctuation: /^[\\[\\]!:]|[<>]/\n        },\n        alias: 'url'\n      },\n      bold: {\n        // **strong**\n        // __strong__\n        // allow one nested instance of italic text using the same delimiter\n        pattern: createInline(\n          /\\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\\b|\\*\\*(?:(?!\\*)<inner>|\\*(?:(?!\\*)<inner>)+\\*)+\\*\\*/\n            .source\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          content: {\n            pattern: /(^..)[\\s\\S]+(?=..$)/,\n            lookbehind: true,\n            inside: {} // see below\n          },\n          punctuation: /\\*\\*|__/\n        }\n      },\n      italic: {\n        // *em*\n        // _em_\n        // allow one nested instance of bold text using the same delimiter\n        pattern: createInline(\n          /\\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\\b|\\*(?:(?!\\*)<inner>|\\*\\*(?:(?!\\*)<inner>)+\\*\\*)+\\*/\n            .source\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          content: {\n            pattern: /(^.)[\\s\\S]+(?=.$)/,\n            lookbehind: true,\n            inside: {} // see below\n          },\n          punctuation: /[*_]/\n        }\n      },\n      strike: {\n        // ~~strike through~~\n        // ~strike~\n        // eslint-disable-next-line regexp/strict\n        pattern: createInline(/(~~?)(?:(?!~)<inner>)+\\2/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          content: {\n            pattern: /(^~~?)[\\s\\S]+(?=\\1$)/,\n            lookbehind: true,\n            inside: {} // see below\n          },\n          punctuation: /~~?/\n        }\n      },\n      'code-snippet': {\n        // `code`\n        // ``code``\n        pattern:\n          /(^|[^\\\\`])(?:``[^`\\r\\n]+(?:`[^`\\r\\n]+)*``(?!`)|`[^`\\r\\n]+`(?!`))/,\n        lookbehind: true,\n        greedy: true,\n        alias: ['code', 'keyword']\n      },\n      url: {\n        // [example](http://example.com \"Optional title\")\n        // [example][id]\n        // [example] [id]\n        pattern: createInline(\n          /!?\\[(?:(?!\\])<inner>)+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)|[ \\t]?\\[(?:(?!\\])<inner>)+\\])/\n            .source\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          operator: /^!/,\n          content: {\n            pattern: /(^\\[)[^\\]]+(?=\\])/,\n            lookbehind: true,\n            inside: {} // see below\n          },\n          variable: {\n            pattern: /(^\\][ \\t]?\\[)[^\\]]+(?=\\]$)/,\n            lookbehind: true\n          },\n          url: {\n            pattern: /(^\\]\\()[^\\s)]+/,\n            lookbehind: true\n          },\n          string: {\n            pattern: /(^[ \\t]+)\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/,\n            lookbehind: true\n          }\n        }\n      }\n    })\n    ;['url', 'bold', 'italic', 'strike'].forEach(function (token) {\n      ;['url', 'bold', 'italic', 'strike', 'code-snippet'].forEach(function (\n        inside\n      ) {\n        if (token !== inside) {\n          Prism.languages.markdown[token].inside.content.inside[inside] =\n            Prism.languages.markdown[inside]\n        }\n      })\n    })\n    Prism.hooks.add('after-tokenize', function (env) {\n      if (env.language !== 'markdown' && env.language !== 'md') {\n        return\n      }\n      function walkTokens(tokens) {\n        if (!tokens || typeof tokens === 'string') {\n          return\n        }\n        for (var i = 0, l = tokens.length; i < l; i++) {\n          var token = tokens[i]\n          if (token.type !== 'code') {\n            walkTokens(token.content)\n            continue\n          }\n          /*\n           * Add the correct `language-xxxx` class to this code block. Keep in mind that the `code-language` token\n           * is optional. But the grammar is defined so that there is only one case we have to handle:\n           *\n           * token.content = [\n           *     <span class=\"punctuation\">```</span>,\n           *     <span class=\"code-language\">xxxx</span>,\n           *     '\\n', // exactly one new lines (\\r or \\n or \\r\\n)\n           *     <span class=\"code-block\">...</span>,\n           *     '\\n', // exactly one new lines again\n           *     <span class=\"punctuation\">```</span>\n           * ];\n           */\n          var codeLang = token.content[1]\n          var codeBlock = token.content[3]\n          if (\n            codeLang &&\n            codeBlock &&\n            codeLang.type === 'code-language' &&\n            codeBlock.type === 'code-block' &&\n            typeof codeLang.content === 'string'\n          ) {\n            // this might be a language that Prism does not support\n            // do some replacements to support C++, C#, and F#\n            var lang = codeLang.content\n              .replace(/\\b#/g, 'sharp')\n              .replace(/\\b\\+\\+/g, 'pp') // only use the first word\n            lang = (/[a-z][\\w-]*/i.exec(lang) || [''])[0].toLowerCase()\n            var alias = 'language-' + lang // add alias\n            if (!codeBlock.alias) {\n              codeBlock.alias = [alias]\n            } else if (typeof codeBlock.alias === 'string') {\n              codeBlock.alias = [codeBlock.alias, alias]\n            } else {\n              codeBlock.alias.push(alias)\n            }\n          }\n        }\n      }\n      walkTokens(env.tokens)\n    })\n    Prism.hooks.add('wrap', function (env) {\n      if (env.type !== 'code-block') {\n        return\n      }\n      var codeLang = ''\n      for (var i = 0, l = env.classes.length; i < l; i++) {\n        var cls = env.classes[i]\n        var match = /language-(.+)/.exec(cls)\n        if (match) {\n          codeLang = match[1]\n          break\n        }\n      }\n      var grammar = Prism.languages[codeLang]\n      if (!grammar) {\n        if (codeLang && codeLang !== 'none' && Prism.plugins.autoloader) {\n          var id =\n            'md-' +\n            new Date().valueOf() +\n            '-' +\n            Math.floor(Math.random() * 1e16)\n          env.attributes['id'] = id\n          Prism.plugins.autoloader.loadLanguages(codeLang, function () {\n            var ele = document.getElementById(id)\n            if (ele) {\n              ele.innerHTML = Prism.highlight(\n                ele.textContent,\n                Prism.languages[codeLang],\n                codeLang\n              )\n            }\n          })\n        }\n      } else {\n        env.content = Prism.highlight(\n          textContent(env.content.value),\n          grammar,\n          codeLang\n        )\n      }\n    })\n    var tagPattern = RegExp(Prism.languages.markup.tag.pattern.source, 'gi')\n    /**\n     * A list of known entity names.\n     *\n     * This will always be incomplete to save space. The current list is the one used by lowdash's unescape function.\n     *\n     * @see {@link https://github.com/lodash/lodash/blob/2da024c3b4f9947a48517639de7560457cd4ec6c/unescape.js#L2}\n     */\n    var KNOWN_ENTITY_NAMES = {\n      amp: '&',\n      lt: '<',\n      gt: '>',\n      quot: '\"'\n    } // IE 11 doesn't support `String.fromCodePoint`\n    var fromCodePoint = String.fromCodePoint || String.fromCharCode\n    /**\n     * Returns the text content of a given HTML source code string.\n     *\n     * @param {string} html\n     * @returns {string}\n     */\n    function textContent(html) {\n      // remove all tags\n      var text = html.replace(tagPattern, '') // decode known entities\n      text = text.replace(/&(\\w{1,8}|#x?[\\da-f]{1,8});/gi, function (m, code) {\n        code = code.toLowerCase()\n        if (code[0] === '#') {\n          var value\n          if (code[1] === 'x') {\n            value = parseInt(code.slice(2), 16)\n          } else {\n            value = Number(code.slice(1))\n          }\n          return fromCodePoint(value)\n        } else {\n          var known = KNOWN_ENTITY_NAMES[code]\n          if (known) {\n            return known\n          } // unable to decode\n          return m\n        }\n      })\n      return text\n    }\n    Prism.languages.md = Prism.languages.markdown\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = markupTemplating\nmarkupTemplating.displayName = 'markupTemplating'\nmarkupTemplating.aliases = []\nfunction markupTemplating(Prism) {\n  ;(function (Prism) {\n    /**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */\n    function getPlaceholder(language, index) {\n      return '___' + language.toUpperCase() + index + '___'\n    }\n    Object.defineProperties((Prism.languages['markup-templating'] = {}), {\n      buildPlaceholders: {\n        /**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */\n        value: function (env, language, placeholderPattern, replaceFilter) {\n          if (env.language !== language) {\n            return\n          }\n          var tokenStack = (env.tokenStack = [])\n          env.code = env.code.replace(placeholderPattern, function (match) {\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n              return match\n            }\n            var i = tokenStack.length\n            var placeholder // Check for existing strings\n            while (\n              env.code.indexOf((placeholder = getPlaceholder(language, i))) !==\n              -1\n            ) {\n              ++i\n            } // Create a sparse array\n            tokenStack[i] = match\n            return placeholder\n          }) // Switch the grammar to markup\n          env.grammar = Prism.languages.markup\n        }\n      },\n      tokenizePlaceholders: {\n        /**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */\n        value: function (env, language) {\n          if (env.language !== language || !env.tokenStack) {\n            return\n          } // Switch the grammar back\n          env.grammar = Prism.languages[language]\n          var j = 0\n          var keys = Object.keys(env.tokenStack)\n          function walkTokens(tokens) {\n            for (var i = 0; i < tokens.length; i++) {\n              // all placeholders are replaced already\n              if (j >= keys.length) {\n                break\n              }\n              var token = tokens[i]\n              if (\n                typeof token === 'string' ||\n                (token.content && typeof token.content === 'string')\n              ) {\n                var k = keys[j]\n                var t = env.tokenStack[k]\n                var s = typeof token === 'string' ? token : token.content\n                var placeholder = getPlaceholder(language, k)\n                var index = s.indexOf(placeholder)\n                if (index > -1) {\n                  ++j\n                  var before = s.substring(0, index)\n                  var middle = new Prism.Token(\n                    language,\n                    Prism.tokenize(t, env.grammar),\n                    'language-' + language,\n                    t\n                  )\n                  var after = s.substring(index + placeholder.length)\n                  var replacement = []\n                  if (before) {\n                    replacement.push.apply(replacement, walkTokens([before]))\n                  }\n                  replacement.push(middle)\n                  if (after) {\n                    replacement.push.apply(replacement, walkTokens([after]))\n                  }\n                  if (typeof token === 'string') {\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement))\n                  } else {\n                    token.content = replacement\n                  }\n                }\n              } else if (\n                token.content\n                /* && typeof token.content !== 'string' */\n              ) {\n                walkTokens(token.content)\n              }\n            }\n            return tokens\n          }\n          walkTokens(env.tokens)\n        }\n      }\n    })\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = markup\nmarkup.displayName = 'markup'\nmarkup.aliases = ['html', 'mathml', 'svg', 'xml', 'ssml', 'atom', 'rss']\nfunction markup(Prism) {\n  Prism.languages.markup = {\n    comment: {\n      pattern: /<!--(?:(?!<!--)[\\s\\S])*?-->/,\n      greedy: true\n    },\n    prolog: {\n      pattern: /<\\?[\\s\\S]+?\\?>/,\n      greedy: true\n    },\n    doctype: {\n      // https://www.w3.org/TR/xml/#NT-doctypedecl\n      pattern:\n        /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,\n      greedy: true,\n      inside: {\n        'internal-subset': {\n          pattern: /(^[^\\[]*\\[)[\\s\\S]+(?=\\]>$)/,\n          lookbehind: true,\n          greedy: true,\n          inside: null // see below\n        },\n        string: {\n          pattern: /\"[^\"]*\"|'[^']*'/,\n          greedy: true\n        },\n        punctuation: /^<!|>$|[[\\]]/,\n        'doctype-tag': /^DOCTYPE/i,\n        name: /[^\\s<>'\"]+/\n      }\n    },\n    cdata: {\n      pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n      greedy: true\n    },\n    tag: {\n      pattern:\n        /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,\n      greedy: true,\n      inside: {\n        tag: {\n          pattern: /^<\\/?[^\\s>\\/]+/,\n          inside: {\n            punctuation: /^<\\/?/,\n            namespace: /^[^\\s>\\/:]+:/\n          }\n        },\n        'special-attr': [],\n        'attr-value': {\n          pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\n          inside: {\n            punctuation: [\n              {\n                pattern: /^=/,\n                alias: 'attr-equals'\n              },\n              /\"|'/\n            ]\n          }\n        },\n        punctuation: /\\/?>/,\n        'attr-name': {\n          pattern: /[^\\s>\\/]+/,\n          inside: {\n            namespace: /^[^\\s>\\/:]+:/\n          }\n        }\n      }\n    },\n    entity: [\n      {\n        pattern: /&[\\da-z]{1,8};/i,\n        alias: 'named-entity'\n      },\n      /&#x?[\\da-f]{1,8};/i\n    ]\n  }\n  Prism.languages.markup['tag'].inside['attr-value'].inside['entity'] =\n    Prism.languages.markup['entity']\n  Prism.languages.markup['doctype'].inside['internal-subset'].inside =\n    Prism.languages.markup // Plugin to make entity title show the real entity, idea by Roman Komarov\n  Prism.hooks.add('wrap', function (env) {\n    if (env.type === 'entity') {\n      env.attributes['title'] = env.content.value.replace(/&amp;/, '&')\n    }\n  })\n  Object.defineProperty(Prism.languages.markup.tag, 'addInlined', {\n    /**\n     * Adds an inlined language to markup.\n     *\n     * An example of an inlined language is CSS with `<style>` tags.\n     *\n     * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n     * case insensitive.\n     * @param {string} lang The language key.\n     * @example\n     * addInlined('style', 'css');\n     */\n    value: function addInlined(tagName, lang) {\n      var includedCdataInside = {}\n      includedCdataInside['language-' + lang] = {\n        pattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n        lookbehind: true,\n        inside: Prism.languages[lang]\n      }\n      includedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i\n      var inside = {\n        'included-cdata': {\n          pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n          inside: includedCdataInside\n        }\n      }\n      inside['language-' + lang] = {\n        pattern: /[\\s\\S]+/,\n        inside: Prism.languages[lang]\n      }\n      var def = {}\n      def[tagName] = {\n        pattern: RegExp(\n          /(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(\n            /__/g,\n            function () {\n              return tagName\n            }\n          ),\n          'i'\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: inside\n      }\n      Prism.languages.insertBefore('markup', 'cdata', def)\n    }\n  })\n  Object.defineProperty(Prism.languages.markup.tag, 'addAttribute', {\n    /**\n     * Adds an pattern to highlight languages embedded in HTML attributes.\n     *\n     * An example of an inlined language is CSS with `style` attributes.\n     *\n     * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as\n     * case insensitive.\n     * @param {string} lang The language key.\n     * @example\n     * addAttribute('style', 'css');\n     */\n    value: function (attrName, lang) {\n      Prism.languages.markup.tag.inside['special-attr'].push({\n        pattern: RegExp(\n          /(^|[\"'\\s])/.source +\n            '(?:' +\n            attrName +\n            ')' +\n            /\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))/.source,\n          'i'\n        ),\n        lookbehind: true,\n        inside: {\n          'attr-name': /^[^\\s=]+/,\n          'attr-value': {\n            pattern: /=[\\s\\S]+/,\n            inside: {\n              value: {\n                pattern: /(^=\\s*([\"']|(?![\"'])))\\S[\\s\\S]*(?=\\2$)/,\n                lookbehind: true,\n                alias: [lang, 'language-' + lang],\n                inside: Prism.languages[lang]\n              },\n              punctuation: [\n                {\n                  pattern: /^=/,\n                  alias: 'attr-equals'\n                },\n                /\"|'/\n              ]\n            }\n          }\n        }\n      })\n    }\n  })\n  Prism.languages.html = Prism.languages.markup\n  Prism.languages.mathml = Prism.languages.markup\n  Prism.languages.svg = Prism.languages.markup\n  Prism.languages.xml = Prism.languages.extend('markup', {})\n  Prism.languages.ssml = Prism.languages.xml\n  Prism.languages.atom = Prism.languages.xml\n  Prism.languages.rss = Prism.languages.xml\n}\n","'use strict'\n\nmodule.exports = matlab\nmatlab.displayName = 'matlab'\nmatlab.aliases = []\nfunction matlab(Prism) {\n  Prism.languages.matlab = {\n    comment: [/%\\{[\\s\\S]*?\\}%/, /%.+/],\n    string: {\n      pattern: /\\B'(?:''|[^'\\r\\n])*'/,\n      greedy: true\n    },\n    // FIXME We could handle imaginary numbers as a whole\n    number: /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[eE][+-]?\\d+)?(?:[ij])?|\\b[ij]\\b/,\n    keyword:\n      /\\b(?:NaN|break|case|catch|continue|else|elseif|end|for|function|if|inf|otherwise|parfor|pause|pi|return|switch|try|while)\\b/,\n    function: /\\b(?!\\d)\\w+(?=\\s*\\()/,\n    operator: /\\.?[*^\\/\\\\']|[+\\-:@]|[<>=~]=?|&&?|\\|\\|?/,\n    punctuation: /\\.{3}|[.,;\\[\\](){}!]/\n  }\n}\n","'use strict'\n\nmodule.exports = maxscript\nmaxscript.displayName = 'maxscript'\nmaxscript.aliases = []\nfunction maxscript(Prism) {\n  ;(function (Prism) {\n    var keywords =\n      /\\b(?:about|and|animate|as|at|attributes|by|case|catch|collect|continue|coordsys|do|else|exit|fn|for|from|function|global|if|in|local|macroscript|mapped|max|not|of|off|on|or|parameters|persistent|plugin|rcmenu|return|rollout|set|struct|then|throw|to|tool|try|undo|utility|when|where|while|with)\\b/i\n    Prism.languages.maxscript = {\n      comment: {\n        pattern: /\\/\\*[\\s\\S]*?(?:\\*\\/|$)|--.*/,\n        greedy: true\n      },\n      string: {\n        pattern: /(^|[^\"\\\\@])(?:\"(?:[^\"\\\\]|\\\\[\\s\\S])*\"|@\"[^\"]*\")/,\n        lookbehind: true,\n        greedy: true\n      },\n      path: {\n        pattern: /\\$(?:[\\w/\\\\.*?]|'[^']*')*/,\n        greedy: true,\n        alias: 'string'\n      },\n      'function-call': {\n        pattern: RegExp(\n          '((?:' + // start of line\n            (/^/.source +\n              '|' + // operators and other language constructs\n              /[;=<>+\\-*/^({\\[]/.source +\n              '|' + // keywords as part of statements\n              /\\b(?:and|by|case|catch|collect|do|else|if|in|not|or|return|then|to|try|where|while|with)\\b/\n                .source) +\n            ')[ \\t]*)' +\n            '(?!' +\n            keywords.source +\n            ')' +\n            /[a-z_]\\w*\\b/.source +\n            '(?=[ \\t]*(?:' + // variable\n            ('(?!' +\n              keywords.source +\n              ')' +\n              /[a-z_]/.source +\n              '|' + // number\n              /\\d|-\\.?\\d/.source +\n              '|' + // other expressions or literals\n              /[({'\"$@#?]/.source) +\n            '))',\n          'im'\n        ),\n        lookbehind: true,\n        greedy: true,\n        alias: 'function'\n      },\n      'function-definition': {\n        pattern: /(\\b(?:fn|function)\\s+)\\w+\\b/i,\n        lookbehind: true,\n        alias: 'function'\n      },\n      argument: {\n        pattern: /\\b[a-z_]\\w*(?=:)/i,\n        alias: 'attr-name'\n      },\n      keyword: keywords,\n      boolean: /\\b(?:false|true)\\b/,\n      time: {\n        pattern:\n          /(^|[^\\w.])(?:(?:(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:[eEdD][+-]\\d+|[LP])?[msft])+|\\d+:\\d+(?:\\.\\d*)?)(?![\\w.:])/,\n        lookbehind: true,\n        alias: 'number'\n      },\n      number: [\n        {\n          pattern:\n            /(^|[^\\w.])(?:(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:[eEdD][+-]\\d+|[LP])?|0x[a-fA-F0-9]+)(?![\\w.:])/,\n          lookbehind: true\n        },\n        /\\b(?:e|pi)\\b/\n      ],\n      constant: /\\b(?:dontcollect|ok|silentValue|undefined|unsupplied)\\b/,\n      color: {\n        pattern: /\\b(?:black|blue|brown|gray|green|orange|red|white|yellow)\\b/i,\n        alias: 'constant'\n      },\n      operator: /[-+*/<>=!]=?|[&^?]|#(?!\\()/,\n      punctuation: /[()\\[\\]{}.:,;]|#(?=\\()|\\\\$/m\n    }\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = mel\nmel.displayName = 'mel'\nmel.aliases = []\nfunction mel(Prism) {\n  Prism.languages.mel = {\n    comment: /\\/\\/.*/,\n    code: {\n      pattern: /`(?:\\\\.|[^\\\\`\\r\\n])*`/,\n      greedy: true,\n      alias: 'italic',\n      inside: {\n        delimiter: {\n          pattern: /^`|`$/,\n          alias: 'punctuation'\n        } // See rest below\n      }\n    },\n    string: {\n      pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n      greedy: true\n    },\n    variable: /\\$\\w+/,\n    number: /\\b0x[\\da-fA-F]+\\b|\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+/,\n    flag: {\n      pattern: /-[^\\d\\W]\\w*/,\n      alias: 'operator'\n    },\n    keyword:\n      /\\b(?:break|case|continue|default|do|else|float|for|global|if|in|int|matrix|proc|return|string|switch|vector|while)\\b/,\n    function:\n      /\\b\\w+(?=\\()|\\b(?:CBG|HfAddAttractorToAS|HfAssignAS|HfBuildEqualMap|HfBuildFurFiles|HfBuildFurImages|HfCancelAFR|HfConnectASToHF|HfCreateAttractor|HfDeleteAS|HfEditAS|HfPerformCreateAS|HfRemoveAttractorFromAS|HfSelectAttached|HfSelectAttractors|HfUnAssignAS|Mayatomr|about|abs|addAttr|addAttributeEditorNodeHelp|addDynamic|addNewShelfTab|addPP|addPanelCategory|addPrefixToName|advanceToNextDrivenKey|affectedNet|affects|aimConstraint|air|alias|aliasAttr|align|alignCtx|alignCurve|alignSurface|allViewFit|ambientLight|angle|angleBetween|animCone|animCurveEditor|animDisplay|animView|annotate|appendStringArray|applicationName|applyAttrPreset|applyTake|arcLenDimContext|arcLengthDimension|arclen|arrayMapper|art3dPaintCtx|artAttrCtx|artAttrPaintVertexCtx|artAttrSkinPaintCtx|artAttrTool|artBuildPaintMenu|artFluidAttrCtx|artPuttyCtx|artSelectCtx|artSetPaintCtx|artUserPaintCtx|assignCommand|assignInputDevice|assignViewportFactories|attachCurve|attachDeviceAttr|attachSurface|attrColorSliderGrp|attrCompatibility|attrControlGrp|attrEnumOptionMenu|attrEnumOptionMenuGrp|attrFieldGrp|attrFieldSliderGrp|attrNavigationControlGrp|attrPresetEditWin|attributeExists|attributeInfo|attributeMenu|attributeQuery|autoKeyframe|autoPlace|bakeClip|bakeFluidShading|bakePartialHistory|bakeResults|bakeSimulation|basename|basenameEx|batchRender|bessel|bevel|bevelPlus|binMembership|bindSkin|blend2|blendShape|blendShapeEditor|blendShapePanel|blendTwoAttr|blindDataType|boneLattice|boundary|boxDollyCtx|boxZoomCtx|bufferCurve|buildBookmarkMenu|buildKeyframeMenu|button|buttonManip|cacheFile|cacheFileCombine|cacheFileMerge|cacheFileTrack|camera|cameraView|canCreateManip|canvas|capitalizeString|catch|catchQuiet|ceil|changeSubdivComponentDisplayLevel|changeSubdivRegion|channelBox|character|characterMap|characterOutlineEditor|characterize|chdir|checkBox|checkBoxGrp|checkDefaultRenderGlobals|choice|circle|circularFillet|clamp|clear|clearCache|clip|clipEditor|clipEditorCurrentTimeCtx|clipSchedule|clipSchedulerOutliner|clipTrimBefore|closeCurve|closeSurface|cluster|cmdFileOutput|cmdScrollFieldExecuter|cmdScrollFieldReporter|cmdShell|coarsenSubdivSelectionList|collision|color|colorAtPoint|colorEditor|colorIndex|colorIndexSliderGrp|colorSliderButtonGrp|colorSliderGrp|columnLayout|commandEcho|commandLine|commandPort|compactHairSystem|componentEditor|compositingInterop|computePolysetVolume|condition|cone|confirmDialog|connectAttr|connectControl|connectDynamic|connectJoint|connectionInfo|constrain|constrainValue|constructionHistory|container|containsMultibyte|contextInfo|control|convertFromOldLayers|convertIffToPsd|convertLightmap|convertSolidTx|convertTessellation|convertUnit|copyArray|copyFlexor|copyKey|copySkinWeights|cos|cpButton|cpCache|cpClothSet|cpCollision|cpConstraint|cpConvClothToMesh|cpForces|cpGetSolverAttr|cpPanel|cpProperty|cpRigidCollisionFilter|cpSeam|cpSetEdit|cpSetSolverAttr|cpSolver|cpSolverTypes|cpTool|cpUpdateClothUVs|createDisplayLayer|createDrawCtx|createEditor|createLayeredPsdFile|createMotionField|createNewShelf|createNode|createRenderLayer|createSubdivRegion|cross|crossProduct|ctxAbort|ctxCompletion|ctxEditMode|ctxTraverse|currentCtx|currentTime|currentTimeCtx|currentUnit|curve|curveAddPtCtx|curveCVCtx|curveEPCtx|curveEditorCtx|curveIntersect|curveMoveEPCtx|curveOnSurface|curveSketchCtx|cutKey|cycleCheck|cylinder|dagPose|date|defaultLightListCheckBox|defaultNavigation|defineDataServer|defineVirtualDevice|deformer|deg_to_rad|delete|deleteAttr|deleteShadingGroupsAndMaterials|deleteShelfTab|deleteUI|deleteUnusedBrushes|delrandstr|detachCurve|detachDeviceAttr|detachSurface|deviceEditor|devicePanel|dgInfo|dgdirty|dgeval|dgtimer|dimWhen|directKeyCtx|directionalLight|dirmap|dirname|disable|disconnectAttr|disconnectJoint|diskCache|displacementToPoly|displayAffected|displayColor|displayCull|displayLevelOfDetail|displayPref|displayRGBColor|displaySmoothness|displayStats|displayString|displaySurface|distanceDimContext|distanceDimension|doBlur|dolly|dollyCtx|dopeSheetEditor|dot|dotProduct|doubleProfileBirailSurface|drag|dragAttrContext|draggerContext|dropoffLocator|duplicate|duplicateCurve|duplicateSurface|dynCache|dynControl|dynExport|dynExpression|dynGlobals|dynPaintEditor|dynParticleCtx|dynPref|dynRelEdPanel|dynRelEditor|dynamicLoad|editAttrLimits|editDisplayLayerGlobals|editDisplayLayerMembers|editRenderLayerAdjustment|editRenderLayerGlobals|editRenderLayerMembers|editor|editorTemplate|effector|emit|emitter|enableDevice|encodeString|endString|endsWith|env|equivalent|equivalentTol|erf|error|eval|evalDeferred|evalEcho|event|exactWorldBoundingBox|exclusiveLightCheckBox|exec|executeForEachObject|exists|exp|expression|expressionEditorListen|extendCurve|extendSurface|extrude|fcheck|fclose|feof|fflush|fgetline|fgetword|file|fileBrowserDialog|fileDialog|fileExtension|fileInfo|filetest|filletCurve|filter|filterCurve|filterExpand|filterStudioImport|findAllIntersections|findAnimCurves|findKeyframe|findMenuItem|findRelatedSkinCluster|finder|firstParentOf|fitBspline|flexor|floatEq|floatField|floatFieldGrp|floatScrollBar|floatSlider|floatSlider2|floatSliderButtonGrp|floatSliderGrp|floor|flow|fluidCacheInfo|fluidEmitter|fluidVoxelInfo|flushUndo|fmod|fontDialog|fopen|formLayout|format|fprint|frameLayout|fread|freeFormFillet|frewind|fromNativePath|fwrite|gamma|gauss|geometryConstraint|getApplicationVersionAsFloat|getAttr|getClassification|getDefaultBrush|getFileList|getFluidAttr|getInputDeviceRange|getMayaPanelTypes|getModifiers|getPanel|getParticleAttr|getPluginResource|getenv|getpid|glRender|glRenderEditor|globalStitch|gmatch|goal|gotoBindPose|grabColor|gradientControl|gradientControlNoAttr|graphDollyCtx|graphSelectContext|graphTrackCtx|gravity|grid|gridLayout|group|groupObjectsByName|hardenPointCurve|hardware|hardwareRenderPanel|headsUpDisplay|headsUpMessage|help|helpLine|hermite|hide|hilite|hitTest|hotBox|hotkey|hotkeyCheck|hsv_to_rgb|hudButton|hudSlider|hudSliderButton|hwReflectionMap|hwRender|hwRenderLoad|hyperGraph|hyperPanel|hyperShade|hypot|iconTextButton|iconTextCheckBox|iconTextRadioButton|iconTextRadioCollection|iconTextScrollList|iconTextStaticLabel|ikHandle|ikHandleCtx|ikHandleDisplayScale|ikSolver|ikSplineHandleCtx|ikSystem|ikSystemInfo|ikfkDisplayMethod|illustratorCurves|image|imfPlugins|inheritTransform|insertJoint|insertJointCtx|insertKeyCtx|insertKnotCurve|insertKnotSurface|instance|instanceable|instancer|intField|intFieldGrp|intScrollBar|intSlider|intSliderGrp|interToUI|internalVar|intersect|iprEngine|isAnimCurve|isConnected|isDirty|isParentOf|isSameObject|isTrue|isValidObjectName|isValidString|isValidUiName|isolateSelect|itemFilter|itemFilterAttr|itemFilterRender|itemFilterType|joint|jointCluster|jointCtx|jointDisplayScale|jointLattice|keyTangent|keyframe|keyframeOutliner|keyframeRegionCurrentTimeCtx|keyframeRegionDirectKeyCtx|keyframeRegionDollyCtx|keyframeRegionInsertKeyCtx|keyframeRegionMoveKeyCtx|keyframeRegionScaleKeyCtx|keyframeRegionSelectKeyCtx|keyframeRegionSetKeyCtx|keyframeRegionTrackCtx|keyframeStats|lassoContext|lattice|latticeDeformKeyCtx|launch|launchImageEditor|layerButton|layeredShaderPort|layeredTexturePort|layout|layoutDialog|lightList|lightListEditor|lightListPanel|lightlink|lineIntersection|linearPrecision|linstep|listAnimatable|listAttr|listCameras|listConnections|listDeviceAttachments|listHistory|listInputDeviceAxes|listInputDeviceButtons|listInputDevices|listMenuAnnotation|listNodeTypes|listPanelCategories|listRelatives|listSets|listTransforms|listUnselected|listerEditor|loadFluid|loadNewShelf|loadPlugin|loadPluginLanguageResources|loadPrefObjects|localizedPanelLabel|lockNode|loft|log|longNameOf|lookThru|ls|lsThroughFilter|lsType|lsUI|mag|makeIdentity|makeLive|makePaintable|makeRoll|makeSingleSurface|makeTubeOn|makebot|manipMoveContext|manipMoveLimitsCtx|manipOptions|manipRotateContext|manipRotateLimitsCtx|manipScaleContext|manipScaleLimitsCtx|marker|match|max|memory|menu|menuBarLayout|menuEditor|menuItem|menuItemToShelf|menuSet|menuSetPref|messageLine|min|minimizeApp|mirrorJoint|modelCurrentTimeCtx|modelEditor|modelPanel|mouse|movIn|movOut|move|moveIKtoFK|moveKeyCtx|moveVertexAlongDirection|multiProfileBirailSurface|mute|nParticle|nameCommand|nameField|namespace|namespaceInfo|newPanelItems|newton|nodeCast|nodeIconButton|nodeOutliner|nodePreset|nodeType|noise|nonLinear|normalConstraint|normalize|nurbsBoolean|nurbsCopyUVSet|nurbsCube|nurbsEditUV|nurbsPlane|nurbsSelect|nurbsSquare|nurbsToPoly|nurbsToPolygonsPref|nurbsToSubdiv|nurbsToSubdivPref|nurbsUVSet|nurbsViewDirectionVector|objExists|objectCenter|objectLayer|objectType|objectTypeUI|obsoleteProc|oceanNurbsPreviewPlane|offsetCurve|offsetCurveOnSurface|offsetSurface|openGLExtension|openMayaPref|optionMenu|optionMenuGrp|optionVar|orbit|orbitCtx|orientConstraint|outlinerEditor|outlinerPanel|overrideModifier|paintEffectsDisplay|pairBlend|palettePort|paneLayout|panel|panelConfiguration|panelHistory|paramDimContext|paramDimension|paramLocator|parent|parentConstraint|particle|particleExists|particleInstancer|particleRenderInfo|partition|pasteKey|pathAnimation|pause|pclose|percent|performanceOptions|pfxstrokes|pickWalk|picture|pixelMove|planarSrf|plane|play|playbackOptions|playblast|plugAttr|plugNode|pluginInfo|pluginResourceUtil|pointConstraint|pointCurveConstraint|pointLight|pointMatrixMult|pointOnCurve|pointOnSurface|pointPosition|poleVectorConstraint|polyAppend|polyAppendFacetCtx|polyAppendVertex|polyAutoProjection|polyAverageNormal|polyAverageVertex|polyBevel|polyBlendColor|polyBlindData|polyBoolOp|polyBridgeEdge|polyCacheMonitor|polyCheck|polyChipOff|polyClipboard|polyCloseBorder|polyCollapseEdge|polyCollapseFacet|polyColorBlindData|polyColorDel|polyColorPerVertex|polyColorSet|polyCompare|polyCone|polyCopyUV|polyCrease|polyCreaseCtx|polyCreateFacet|polyCreateFacetCtx|polyCube|polyCut|polyCutCtx|polyCylinder|polyCylindricalProjection|polyDelEdge|polyDelFacet|polyDelVertex|polyDuplicateAndConnect|polyDuplicateEdge|polyEditUV|polyEditUVShell|polyEvaluate|polyExtrudeEdge|polyExtrudeFacet|polyExtrudeVertex|polyFlipEdge|polyFlipUV|polyForceUV|polyGeoSampler|polyHelix|polyInfo|polyInstallAction|polyLayoutUV|polyListComponentConversion|polyMapCut|polyMapDel|polyMapSew|polyMapSewMove|polyMergeEdge|polyMergeEdgeCtx|polyMergeFacet|polyMergeFacetCtx|polyMergeUV|polyMergeVertex|polyMirrorFace|polyMoveEdge|polyMoveFacet|polyMoveFacetUV|polyMoveUV|polyMoveVertex|polyNormal|polyNormalPerVertex|polyNormalizeUV|polyOptUvs|polyOptions|polyOutput|polyPipe|polyPlanarProjection|polyPlane|polyPlatonicSolid|polyPoke|polyPrimitive|polyPrism|polyProjection|polyPyramid|polyQuad|polyQueryBlindData|polyReduce|polySelect|polySelectConstraint|polySelectConstraintMonitor|polySelectCtx|polySelectEditCtx|polySeparate|polySetToFaceNormal|polySewEdge|polyShortestPathCtx|polySmooth|polySoftEdge|polySphere|polySphericalProjection|polySplit|polySplitCtx|polySplitEdge|polySplitRing|polySplitVertex|polyStraightenUVBorder|polySubdivideEdge|polySubdivideFacet|polyToSubdiv|polyTorus|polyTransfer|polyTriangulate|polyUVSet|polyUnite|polyWedgeFace|popen|popupMenu|pose|pow|preloadRefEd|print|progressBar|progressWindow|projFileViewer|projectCurve|projectTangent|projectionContext|projectionManip|promptDialog|propModCtx|propMove|psdChannelOutliner|psdEditTextureFile|psdExport|psdTextureFile|putenv|pwd|python|querySubdiv|quit|rad_to_deg|radial|radioButton|radioButtonGrp|radioCollection|radioMenuItemCollection|rampColorPort|rand|randomizeFollicles|randstate|rangeControl|readTake|rebuildCurve|rebuildSurface|recordAttr|recordDevice|redo|reference|referenceEdit|referenceQuery|refineSubdivSelectionList|refresh|refreshAE|registerPluginResource|rehash|reloadImage|removeJoint|removeMultiInstance|removePanelCategory|rename|renameAttr|renameSelectionList|renameUI|render|renderGlobalsNode|renderInfo|renderLayerButton|renderLayerParent|renderLayerPostProcess|renderLayerUnparent|renderManip|renderPartition|renderQualityNode|renderSettings|renderThumbnailUpdate|renderWindowEditor|renderWindowSelectContext|renderer|reorder|reorderDeformers|requires|reroot|resampleFluid|resetAE|resetPfxToPolyCamera|resetTool|resolutionNode|retarget|reverseCurve|reverseSurface|revolve|rgb_to_hsv|rigidBody|rigidSolver|roll|rollCtx|rootOf|rot|rotate|rotationInterpolation|roundConstantRadius|rowColumnLayout|rowLayout|runTimeCommand|runup|sampleImage|saveAllShelves|saveAttrPreset|saveFluid|saveImage|saveInitialState|saveMenu|savePrefObjects|savePrefs|saveShelf|saveToolSettings|scale|scaleBrushBrightness|scaleComponents|scaleConstraint|scaleKey|scaleKeyCtx|sceneEditor|sceneUIReplacement|scmh|scriptCtx|scriptEditorInfo|scriptJob|scriptNode|scriptTable|scriptToShelf|scriptedPanel|scriptedPanelType|scrollField|scrollLayout|sculpt|searchPathArray|seed|selLoadSettings|select|selectContext|selectCurveCV|selectKey|selectKeyCtx|selectKeyframeRegionCtx|selectMode|selectPref|selectPriority|selectType|selectedNodes|selectionConnection|separator|setAttr|setAttrEnumResource|setAttrMapping|setAttrNiceNameResource|setConstraintRestPosition|setDefaultShadingGroup|setDrivenKeyframe|setDynamic|setEditCtx|setEditor|setFluidAttr|setFocus|setInfinity|setInputDeviceMapping|setKeyCtx|setKeyPath|setKeyframe|setKeyframeBlendshapeTargetWts|setMenuMode|setNodeNiceNameResource|setNodeTypeFlag|setParent|setParticleAttr|setPfxToPolyCamera|setPluginResource|setProject|setStampDensity|setStartupMessage|setState|setToolTo|setUITemplate|setXformManip|sets|shadingConnection|shadingGeometryRelCtx|shadingLightRelCtx|shadingNetworkCompare|shadingNode|shapeCompare|shelfButton|shelfLayout|shelfTabLayout|shellField|shortNameOf|showHelp|showHidden|showManipCtx|showSelectionInTitle|showShadingGroupAttrEditor|showWindow|sign|simplify|sin|singleProfileBirailSurface|size|sizeBytes|skinCluster|skinPercent|smoothCurve|smoothTangentSurface|smoothstep|snap2to2|snapKey|snapMode|snapTogetherCtx|snapshot|soft|softMod|softModCtx|sort|sound|soundControl|source|spaceLocator|sphere|sphrand|spotLight|spotLightPreviewPort|spreadSheetEditor|spring|sqrt|squareSurface|srtContext|stackTrace|startString|startsWith|stitchAndExplodeShell|stitchSurface|stitchSurfacePoints|strcmp|stringArrayCatenate|stringArrayContains|stringArrayCount|stringArrayInsertAtIndex|stringArrayIntersector|stringArrayRemove|stringArrayRemoveAtIndex|stringArrayRemoveDuplicates|stringArrayRemoveExact|stringArrayToString|stringToStringArray|strip|stripPrefixFromName|stroke|subdAutoProjection|subdCleanTopology|subdCollapse|subdDuplicateAndConnect|subdEditUV|subdListComponentConversion|subdMapCut|subdMapSewMove|subdMatchTopology|subdMirror|subdToBlind|subdToPoly|subdTransferUVsToCache|subdiv|subdivCrease|subdivDisplaySmoothness|substitute|substituteAllString|substituteGeometry|substring|surface|surfaceSampler|surfaceShaderList|swatchDisplayPort|switchTable|symbolButton|symbolCheckBox|sysFile|system|tabLayout|tan|tangentConstraint|texLatticeDeformContext|texManipContext|texMoveContext|texMoveUVShellContext|texRotateContext|texScaleContext|texSelectContext|texSelectShortestPathCtx|texSmudgeUVContext|texWinToolCtx|text|textCurves|textField|textFieldButtonGrp|textFieldGrp|textManip|textScrollList|textToShelf|textureDisplacePlane|textureHairColor|texturePlacementContext|textureWindow|threadCount|threePointArcCtx|timeControl|timePort|timerX|toNativePath|toggle|toggleAxis|toggleWindowVisibility|tokenize|tokenizeList|tolerance|tolower|toolButton|toolCollection|toolDropped|toolHasOptions|toolPropertyWindow|torus|toupper|trace|track|trackCtx|transferAttributes|transformCompare|transformLimits|translator|trim|trunc|truncateFluidCache|truncateHairCache|tumble|tumbleCtx|turbulence|twoPointArcCtx|uiRes|uiTemplate|unassignInputDevice|undo|undoInfo|ungroup|uniform|unit|unloadPlugin|untangleUV|untitledFileName|untrim|upAxis|updateAE|userCtx|uvLink|uvSnapshot|validateShelfName|vectorize|view2dToolCtx|viewCamera|viewClipPlane|viewFit|viewHeadOn|viewLookAt|viewManip|viewPlace|viewSet|visor|volumeAxis|vortex|waitCursor|warning|webBrowser|webBrowserPrefs|whatIs|window|windowPref|wire|wireContext|workspace|wrinkle|wrinkleContext|writeTake|xbmLangPathList|xform)\\b/,\n    operator: [\n      /\\+[+=]?|-[-=]?|&&|\\|\\||[<>]=|[*\\/!=]=?|[%^]/,\n      {\n        // We don't want to match <<\n        pattern: /(^|[^<])<(?!<)/,\n        lookbehind: true\n      },\n      {\n        // We don't want to match >>\n        pattern: /(^|[^>])>(?!>)/,\n        lookbehind: true\n      }\n    ],\n    punctuation: /<<|>>|[.,:;?\\[\\](){}]/\n  }\n  Prism.languages.mel['code'].inside.rest = Prism.languages.mel\n}\n","'use strict'\n\nmodule.exports = mermaid\nmermaid.displayName = 'mermaid'\nmermaid.aliases = []\nfunction mermaid(Prism) {\n  Prism.languages.mermaid = {\n    comment: {\n      pattern: /%%.*/,\n      greedy: true\n    },\n    style: {\n      pattern:\n        /^([ \\t]*(?:classDef|linkStyle|style)[ \\t]+[\\w$-]+[ \\t]+)\\w.*[^\\s;]/m,\n      lookbehind: true,\n      inside: {\n        property: /\\b\\w[\\w-]*(?=[ \\t]*:)/,\n        operator: /:/,\n        punctuation: /,/\n      }\n    },\n    'inter-arrow-label': {\n      pattern:\n        /([^<>ox.=-])(?:-[-.]|==)(?![<>ox.=-])[ \\t]*(?:\"[^\"\\r\\n]*\"|[^\\s\".=-](?:[^\\r\\n.=-]*[^\\s.=-])?)[ \\t]*(?:\\.+->?|--+[->]|==+[=>])(?![<>ox.=-])/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        arrow: {\n          pattern: /(?:\\.+->?|--+[->]|==+[=>])$/,\n          alias: 'operator'\n        },\n        label: {\n          pattern: /^([\\s\\S]{2}[ \\t]*)\\S(?:[\\s\\S]*\\S)?/,\n          lookbehind: true,\n          alias: 'property'\n        },\n        'arrow-head': {\n          pattern: /^\\S+/,\n          alias: ['arrow', 'operator']\n        }\n      }\n    },\n    arrow: [\n      // This might look complex but it really isn't.\n      // There are many possible arrows (see tests) and it's impossible to fit all of them into one pattern. The\n      // problem is that we only have one lookbehind per pattern. However, we cannot disallow too many arrow\n      // characters in the one lookbehind because that would create too many false negatives. So we have to split the\n      // arrows into different patterns.\n      {\n        // ER diagram\n        pattern: /(^|[^{}|o.-])[|}][|o](?:--|\\.\\.)[|o][|{](?![{}|o.-])/,\n        lookbehind: true,\n        alias: 'operator'\n      },\n      {\n        // flow chart\n        // (?:==+|--+|-\\.*-)\n        pattern:\n          /(^|[^<>ox.=-])(?:[<ox](?:==+|--+|-\\.*-)[>ox]?|(?:==+|--+|-\\.*-)[>ox]|===+|---+|-\\.+-)(?![<>ox.=-])/,\n        lookbehind: true,\n        alias: 'operator'\n      },\n      {\n        // sequence diagram\n        pattern:\n          /(^|[^<>()x-])(?:--?(?:>>|[x>)])(?![<>()x])|(?:<<|[x<(])--?(?!-))/,\n        lookbehind: true,\n        alias: 'operator'\n      },\n      {\n        // class diagram\n        pattern:\n          /(^|[^<>|*o.-])(?:[*o]--|--[*o]|<\\|?(?:--|\\.\\.)|(?:--|\\.\\.)\\|?>|--|\\.\\.)(?![<>|*o.-])/,\n        lookbehind: true,\n        alias: 'operator'\n      }\n    ],\n    label: {\n      pattern: /(^|[^|<])\\|(?:[^\\r\\n\"|]|\"[^\"\\r\\n]*\")+\\|/,\n      lookbehind: true,\n      greedy: true,\n      alias: 'property'\n    },\n    text: {\n      pattern: /(?:[(\\[{]+|\\b>)(?:[^\\r\\n\"()\\[\\]{}]|\"[^\"\\r\\n]*\")+(?:[)\\]}]+|>)/,\n      alias: 'string'\n    },\n    string: {\n      pattern: /\"[^\"\\r\\n]*\"/,\n      greedy: true\n    },\n    annotation: {\n      pattern:\n        /<<(?:abstract|choice|enumeration|fork|interface|join|service)>>|\\[\\[(?:choice|fork|join)\\]\\]/i,\n      alias: 'important'\n    },\n    keyword: [\n      // This language has both case-sensitive and case-insensitive keywords\n      {\n        pattern:\n          /(^[ \\t]*)(?:action|callback|class|classDef|classDiagram|click|direction|erDiagram|flowchart|gantt|gitGraph|graph|journey|link|linkStyle|pie|requirementDiagram|sequenceDiagram|stateDiagram|stateDiagram-v2|style|subgraph)(?![\\w$-])/m,\n        lookbehind: true,\n        greedy: true\n      },\n      {\n        pattern:\n          /(^[ \\t]*)(?:activate|alt|and|as|autonumber|deactivate|else|end(?:[ \\t]+note)?|loop|opt|par|participant|rect|state|note[ \\t]+(?:over|(?:left|right)[ \\t]+of))(?![\\w$-])/im,\n        lookbehind: true,\n        greedy: true\n      }\n    ],\n    entity: /#[a-z0-9]+;/,\n    operator: {\n      pattern: /(\\w[ \\t]*)&(?=[ \\t]*\\w)|:::|:/,\n      lookbehind: true\n    },\n    punctuation: /[(){};]/\n  }\n}\n","'use strict'\n\nmodule.exports = mizar\nmizar.displayName = 'mizar'\nmizar.aliases = []\nfunction mizar(Prism) {\n  Prism.languages.mizar = {\n    comment: /::.+/,\n    keyword:\n      /@proof\\b|\\b(?:according|aggregate|all|and|antonym|are|as|associativity|assume|asymmetry|attr|be|begin|being|by|canceled|case|cases|clusters?|coherence|commutativity|compatibility|connectedness|consider|consistency|constructors|contradiction|correctness|def|deffunc|define|definitions?|defpred|do|does|end|environ|equals|ex|exactly|existence|for|from|func|given|hence|hereby|holds|idempotence|identity|iff?|implies|involutiveness|irreflexivity|is|it|let|means|mode|non|not|notations?|now|of|or|otherwise|over|per|pred|prefix|projectivity|proof|provided|qua|reconsider|redefine|reduce|reducibility|reflexivity|registrations?|requirements|reserve|sch|schemes?|section|selector|set|sethood|st|struct|such|suppose|symmetry|synonym|take|that|the|then|theorems?|thesis|thus|to|transitivity|uniqueness|vocabular(?:ies|y)|when|where|with|wrt)\\b/,\n    parameter: {\n      pattern: /\\$(?:10|\\d)/,\n      alias: 'variable'\n    },\n    variable: /\\b\\w+(?=:)/,\n    number: /(?:\\b|-)\\d+\\b/,\n    operator: /\\.\\.\\.|->|&|\\.?=/,\n    punctuation: /\\(#|#\\)|[,:;\\[\\](){}]/\n  }\n}\n","'use strict'\n\nmodule.exports = mongodb\nmongodb.displayName = 'mongodb'\nmongodb.aliases = []\nfunction mongodb(Prism) {\n  ;(function (Prism) {\n    var operators = [\n      // query and projection\n      '$eq',\n      '$gt',\n      '$gte',\n      '$in',\n      '$lt',\n      '$lte',\n      '$ne',\n      '$nin',\n      '$and',\n      '$not',\n      '$nor',\n      '$or',\n      '$exists',\n      '$type',\n      '$expr',\n      '$jsonSchema',\n      '$mod',\n      '$regex',\n      '$text',\n      '$where',\n      '$geoIntersects',\n      '$geoWithin',\n      '$near',\n      '$nearSphere',\n      '$all',\n      '$elemMatch',\n      '$size',\n      '$bitsAllClear',\n      '$bitsAllSet',\n      '$bitsAnyClear',\n      '$bitsAnySet',\n      '$comment',\n      '$elemMatch',\n      '$meta',\n      '$slice', // update\n      '$currentDate',\n      '$inc',\n      '$min',\n      '$max',\n      '$mul',\n      '$rename',\n      '$set',\n      '$setOnInsert',\n      '$unset',\n      '$addToSet',\n      '$pop',\n      '$pull',\n      '$push',\n      '$pullAll',\n      '$each',\n      '$position',\n      '$slice',\n      '$sort',\n      '$bit', // aggregation pipeline stages\n      '$addFields',\n      '$bucket',\n      '$bucketAuto',\n      '$collStats',\n      '$count',\n      '$currentOp',\n      '$facet',\n      '$geoNear',\n      '$graphLookup',\n      '$group',\n      '$indexStats',\n      '$limit',\n      '$listLocalSessions',\n      '$listSessions',\n      '$lookup',\n      '$match',\n      '$merge',\n      '$out',\n      '$planCacheStats',\n      '$project',\n      '$redact',\n      '$replaceRoot',\n      '$replaceWith',\n      '$sample',\n      '$set',\n      '$skip',\n      '$sort',\n      '$sortByCount',\n      '$unionWith',\n      '$unset',\n      '$unwind',\n      '$setWindowFields', // aggregation pipeline operators\n      '$abs',\n      '$accumulator',\n      '$acos',\n      '$acosh',\n      '$add',\n      '$addToSet',\n      '$allElementsTrue',\n      '$and',\n      '$anyElementTrue',\n      '$arrayElemAt',\n      '$arrayToObject',\n      '$asin',\n      '$asinh',\n      '$atan',\n      '$atan2',\n      '$atanh',\n      '$avg',\n      '$binarySize',\n      '$bsonSize',\n      '$ceil',\n      '$cmp',\n      '$concat',\n      '$concatArrays',\n      '$cond',\n      '$convert',\n      '$cos',\n      '$dateFromParts',\n      '$dateToParts',\n      '$dateFromString',\n      '$dateToString',\n      '$dayOfMonth',\n      '$dayOfWeek',\n      '$dayOfYear',\n      '$degreesToRadians',\n      '$divide',\n      '$eq',\n      '$exp',\n      '$filter',\n      '$first',\n      '$floor',\n      '$function',\n      '$gt',\n      '$gte',\n      '$hour',\n      '$ifNull',\n      '$in',\n      '$indexOfArray',\n      '$indexOfBytes',\n      '$indexOfCP',\n      '$isArray',\n      '$isNumber',\n      '$isoDayOfWeek',\n      '$isoWeek',\n      '$isoWeekYear',\n      '$last',\n      '$last',\n      '$let',\n      '$literal',\n      '$ln',\n      '$log',\n      '$log10',\n      '$lt',\n      '$lte',\n      '$ltrim',\n      '$map',\n      '$max',\n      '$mergeObjects',\n      '$meta',\n      '$min',\n      '$millisecond',\n      '$minute',\n      '$mod',\n      '$month',\n      '$multiply',\n      '$ne',\n      '$not',\n      '$objectToArray',\n      '$or',\n      '$pow',\n      '$push',\n      '$radiansToDegrees',\n      '$range',\n      '$reduce',\n      '$regexFind',\n      '$regexFindAll',\n      '$regexMatch',\n      '$replaceOne',\n      '$replaceAll',\n      '$reverseArray',\n      '$round',\n      '$rtrim',\n      '$second',\n      '$setDifference',\n      '$setEquals',\n      '$setIntersection',\n      '$setIsSubset',\n      '$setUnion',\n      '$size',\n      '$sin',\n      '$slice',\n      '$split',\n      '$sqrt',\n      '$stdDevPop',\n      '$stdDevSamp',\n      '$strcasecmp',\n      '$strLenBytes',\n      '$strLenCP',\n      '$substr',\n      '$substrBytes',\n      '$substrCP',\n      '$subtract',\n      '$sum',\n      '$switch',\n      '$tan',\n      '$toBool',\n      '$toDate',\n      '$toDecimal',\n      '$toDouble',\n      '$toInt',\n      '$toLong',\n      '$toObjectId',\n      '$toString',\n      '$toLower',\n      '$toUpper',\n      '$trim',\n      '$trunc',\n      '$type',\n      '$week',\n      '$year',\n      '$zip',\n      '$count',\n      '$dateAdd',\n      '$dateDiff',\n      '$dateSubtract',\n      '$dateTrunc',\n      '$getField',\n      '$rand',\n      '$sampleRate',\n      '$setField',\n      '$unsetField', // aggregation pipeline query modifiers\n      '$comment',\n      '$explain',\n      '$hint',\n      '$max',\n      '$maxTimeMS',\n      '$min',\n      '$orderby',\n      '$query',\n      '$returnKey',\n      '$showDiskLoc',\n      '$natural'\n    ]\n    var builtinFunctions = [\n      'ObjectId',\n      'Code',\n      'BinData',\n      'DBRef',\n      'Timestamp',\n      'NumberLong',\n      'NumberDecimal',\n      'MaxKey',\n      'MinKey',\n      'RegExp',\n      'ISODate',\n      'UUID'\n    ]\n    operators = operators.map(function (operator) {\n      return operator.replace('$', '\\\\$')\n    })\n    var operatorsSource = '(?:' + operators.join('|') + ')\\\\b'\n    Prism.languages.mongodb = Prism.languages.extend('javascript', {})\n    Prism.languages.insertBefore('mongodb', 'string', {\n      property: {\n        pattern:\n          /(?:([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)(?=\\s*:)/,\n        greedy: true,\n        inside: {\n          keyword: RegExp('^([\\'\"])?' + operatorsSource + '(?:\\\\1)?$')\n        }\n      }\n    })\n    Prism.languages.mongodb.string.inside = {\n      url: {\n        // url pattern\n        pattern:\n          /https?:\\/\\/[-\\w@:%.+~#=]{1,256}\\.[a-z0-9()]{1,6}\\b[-\\w()@:%+.~#?&/=]*/i,\n        greedy: true\n      },\n      entity: {\n        // ipv4\n        pattern:\n          /\\b(?:(?:[01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.){3}(?:[01]?\\d\\d?|2[0-4]\\d|25[0-5])\\b/,\n        greedy: true\n      }\n    }\n    Prism.languages.insertBefore('mongodb', 'constant', {\n      builtin: {\n        pattern: RegExp('\\\\b(?:' + builtinFunctions.join('|') + ')\\\\b'),\n        alias: 'keyword'\n      }\n    })\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = monkey\nmonkey.displayName = 'monkey'\nmonkey.aliases = []\nfunction monkey(Prism) {\n  Prism.languages.monkey = {\n    comment: {\n      pattern: /^#Rem\\s[\\s\\S]*?^#End|'.+/im,\n      greedy: true\n    },\n    string: {\n      pattern: /\"[^\"\\r\\n]*\"/,\n      greedy: true\n    },\n    preprocessor: {\n      pattern: /(^[ \\t]*)#.+/m,\n      lookbehind: true,\n      greedy: true,\n      alias: 'property'\n    },\n    function: /\\b\\w+(?=\\()/,\n    'type-char': {\n      pattern: /\\b[?%#$]/,\n      alias: 'class-name'\n    },\n    number: {\n      pattern:\n        /((?:\\.\\.)?)(?:(?:\\b|\\B-\\.?|\\B\\.)\\d+(?:(?!\\.\\.)\\.\\d*)?|\\$[\\da-f]+)/i,\n      lookbehind: true\n    },\n    keyword:\n      /\\b(?:Abstract|Array|Bool|Case|Catch|Class|Const|Continue|Default|Eachin|Else|ElseIf|End|EndIf|Exit|Extends|Extern|False|Field|Final|Float|For|Forever|Function|Global|If|Implements|Import|Inline|Int|Interface|Local|Method|Module|New|Next|Null|Object|Private|Property|Public|Repeat|Return|Select|Self|Step|Strict|String|Super|Then|Throw|To|True|Try|Until|Void|Wend|While)\\b/i,\n    operator:\n      /\\.\\.|<[=>]?|>=?|:?=|(?:[+\\-*\\/&~|]|\\b(?:Mod|Shl|Shr)\\b)=?|\\b(?:And|Not|Or)\\b/i,\n    punctuation: /[.,:;()\\[\\]]/\n  }\n}\n","'use strict'\n\nmodule.exports = moonscript\nmoonscript.displayName = 'moonscript'\nmoonscript.aliases = ['moon']\nfunction moonscript(Prism) {\n  Prism.languages.moonscript = {\n    comment: /--.*/,\n    string: [\n      {\n        pattern: /'[^']*'|\\[(=*)\\[[\\s\\S]*?\\]\\1\\]/,\n        greedy: true\n      },\n      {\n        pattern: /\"[^\"]*\"/,\n        greedy: true,\n        inside: {\n          interpolation: {\n            pattern: /#\\{[^{}]*\\}/,\n            inside: {\n              moonscript: {\n                pattern: /(^#\\{)[\\s\\S]+(?=\\})/,\n                lookbehind: true,\n                inside: null // see beow\n              },\n              'interpolation-punctuation': {\n                pattern: /#\\{|\\}/,\n                alias: 'punctuation'\n              }\n            }\n          }\n        }\n      }\n    ],\n    'class-name': [\n      {\n        pattern: /(\\b(?:class|extends)[ \\t]+)\\w+/,\n        lookbehind: true\n      }, // class-like names start with a capital letter\n      /\\b[A-Z]\\w*/\n    ],\n    keyword:\n      /\\b(?:class|continue|do|else|elseif|export|extends|for|from|if|import|in|local|nil|return|self|super|switch|then|unless|using|when|while|with)\\b/,\n    variable: /@@?\\w*/,\n    property: {\n      pattern: /\\b(?!\\d)\\w+(?=:)|(:)(?!\\d)\\w+/,\n      lookbehind: true\n    },\n    function: {\n      pattern:\n        /\\b(?:_G|_VERSION|assert|collectgarbage|coroutine\\.(?:create|resume|running|status|wrap|yield)|debug\\.(?:debug|getfenv|gethook|getinfo|getlocal|getmetatable|getregistry|getupvalue|setfenv|sethook|setlocal|setmetatable|setupvalue|traceback)|dofile|error|getfenv|getmetatable|io\\.(?:close|flush|input|lines|open|output|popen|read|stderr|stdin|stdout|tmpfile|type|write)|ipairs|load|loadfile|loadstring|math\\.(?:abs|acos|asin|atan|atan2|ceil|cos|cosh|deg|exp|floor|fmod|frexp|ldexp|log|log10|max|min|modf|pi|pow|rad|random|randomseed|sin|sinh|sqrt|tan|tanh)|module|next|os\\.(?:clock|date|difftime|execute|exit|getenv|remove|rename|setlocale|time|tmpname)|package\\.(?:cpath|loaded|loadlib|path|preload|seeall)|pairs|pcall|print|rawequal|rawget|rawset|require|select|setfenv|setmetatable|string\\.(?:byte|char|dump|find|format|gmatch|gsub|len|lower|match|rep|reverse|sub|upper)|table\\.(?:concat|insert|maxn|remove|sort)|tonumber|tostring|type|unpack|xpcall)\\b/,\n      inside: {\n        punctuation: /\\./\n      }\n    },\n    boolean: /\\b(?:false|true)\\b/,\n    number:\n      /(?:\\B\\.\\d+|\\b\\d+\\.\\d+|\\b\\d+(?=[eE]))(?:[eE][-+]?\\d+)?\\b|\\b(?:0x[a-fA-F\\d]+|\\d+)(?:U?LL)?\\b/,\n    operator:\n      /\\.{3}|[-=]>|~=|(?:[-+*/%<>!=]|\\.\\.)=?|[:#^]|\\b(?:and|or)\\b=?|\\b(?:not)\\b/,\n    punctuation: /[.,()[\\]{}\\\\]/\n  }\n  Prism.languages.moonscript.string[1].inside.interpolation.inside.moonscript.inside =\n    Prism.languages.moonscript\n  Prism.languages.moon = Prism.languages.moonscript\n}\n","'use strict'\n\nmodule.exports = n1ql\nn1ql.displayName = 'n1ql'\nn1ql.aliases = []\nfunction n1ql(Prism) {\n  // https://docs.couchbase.com/server/current/n1ql/n1ql-language-reference/index.html\n  Prism.languages.n1ql = {\n    comment: {\n      pattern: /\\/\\*[\\s\\S]*?(?:$|\\*\\/)|--.*/,\n      greedy: true\n    },\n    string: {\n      pattern: /([\"'])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\]|\\1\\1)*\\1/,\n      greedy: true\n    },\n    identifier: {\n      pattern: /`(?:\\\\[\\s\\S]|[^\\\\`]|``)*`/,\n      greedy: true\n    },\n    parameter: /\\$[\\w.]+/,\n    // https://docs.couchbase.com/server/current/n1ql/n1ql-language-reference/reservedwords.html#n1ql-reserved-words\n    keyword:\n      /\\b(?:ADVISE|ALL|ALTER|ANALYZE|AS|ASC|AT|BEGIN|BINARY|BOOLEAN|BREAK|BUCKET|BUILD|BY|CALL|CAST|CLUSTER|COLLATE|COLLECTION|COMMIT|COMMITTED|CONNECT|CONTINUE|CORRELATE|CORRELATED|COVER|CREATE|CURRENT|DATABASE|DATASET|DATASTORE|DECLARE|DECREMENT|DELETE|DERIVED|DESC|DESCRIBE|DISTINCT|DO|DROP|EACH|ELEMENT|EXCEPT|EXCLUDE|EXECUTE|EXPLAIN|FETCH|FILTER|FLATTEN|FLUSH|FOLLOWING|FOR|FORCE|FROM|FTS|FUNCTION|GOLANG|GRANT|GROUP|GROUPS|GSI|HASH|HAVING|IF|IGNORE|ILIKE|INCLUDE|INCREMENT|INDEX|INFER|INLINE|INNER|INSERT|INTERSECT|INTO|IS|ISOLATION|JAVASCRIPT|JOIN|KEY|KEYS|KEYSPACE|KNOWN|LANGUAGE|LAST|LEFT|LET|LETTING|LEVEL|LIMIT|LSM|MAP|MAPPING|MATCHED|MATERIALIZED|MERGE|MINUS|MISSING|NAMESPACE|NEST|NL|NO|NTH_VALUE|NULL|NULLS|NUMBER|OBJECT|OFFSET|ON|OPTION|OPTIONS|ORDER|OTHERS|OUTER|OVER|PARSE|PARTITION|PASSWORD|PATH|POOL|PRECEDING|PREPARE|PRIMARY|PRIVATE|PRIVILEGE|PROBE|PROCEDURE|PUBLIC|RANGE|RAW|REALM|REDUCE|RENAME|RESPECT|RETURN|RETURNING|REVOKE|RIGHT|ROLE|ROLLBACK|ROW|ROWS|SATISFIES|SAVEPOINT|SCHEMA|SCOPE|SELECT|SELF|SEMI|SET|SHOW|SOME|START|STATISTICS|STRING|SYSTEM|TIES|TO|TRAN|TRANSACTION|TRIGGER|TRUNCATE|UNBOUNDED|UNDER|UNION|UNIQUE|UNKNOWN|UNNEST|UNSET|UPDATE|UPSERT|USE|USER|USING|VALIDATE|VALUE|VALUES|VIA|VIEW|WHERE|WHILE|WINDOW|WITH|WORK|XOR)\\b/i,\n    function: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n    boolean: /\\b(?:FALSE|TRUE)\\b/i,\n    number: /(?:\\b\\d+\\.|\\B\\.)\\d+e[+\\-]?\\d+\\b|\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+\\b/i,\n    operator:\n      /[-+*\\/%]|!=|==?|\\|\\||<[>=]?|>=?|\\b(?:AND|ANY|ARRAY|BETWEEN|CASE|ELSE|END|EVERY|EXISTS|FIRST|IN|LIKE|NOT|OR|THEN|VALUED|WHEN|WITHIN)\\b/i,\n    punctuation: /[;[\\](),.{}:]/\n  }\n}\n","'use strict'\n\nmodule.exports = n4js\nn4js.displayName = 'n4js'\nn4js.aliases = ['n4jsd']\nfunction n4js(Prism) {\n  Prism.languages.n4js = Prism.languages.extend('javascript', {\n    // Keywords from N4JS language spec: https://numberfour.github.io/n4js/spec/N4JSSpec.html\n    keyword:\n      /\\b(?:Array|any|boolean|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|false|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|module|new|null|number|package|private|protected|public|return|set|static|string|super|switch|this|throw|true|try|typeof|var|void|while|with|yield)\\b/\n  })\n  Prism.languages.insertBefore('n4js', 'constant', {\n    // Annotations in N4JS spec: https://numberfour.github.io/n4js/spec/N4JSSpec.html#_annotations\n    annotation: {\n      pattern: /@+\\w+/,\n      alias: 'operator'\n    }\n  })\n  Prism.languages.n4jsd = Prism.languages.n4js\n}\n","'use strict'\n\nmodule.exports = nand2tetrisHdl\nnand2tetrisHdl.displayName = 'nand2tetrisHdl'\nnand2tetrisHdl.aliases = []\nfunction nand2tetrisHdl(Prism) {\n  Prism.languages['nand2tetris-hdl'] = {\n    comment: /\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    keyword: /\\b(?:BUILTIN|CHIP|CLOCKED|IN|OUT|PARTS)\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    function: /\\b[A-Za-z][A-Za-z0-9]*(?=\\()/,\n    number: /\\b\\d+\\b/,\n    operator: /=|\\.\\./,\n    punctuation: /[{}[\\];(),:]/\n  }\n}\n","'use strict'\n\nmodule.exports = naniscript\nnaniscript.displayName = 'naniscript'\nnaniscript.aliases = []\nfunction naniscript(Prism) {\n  ;(function (Prism) {\n    var expressionDef = /\\{[^\\r\\n\\[\\]{}]*\\}/\n    var params = {\n      'quoted-string': {\n        pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n        alias: 'operator'\n      },\n      'command-param-id': {\n        pattern: /(\\s)\\w+:/,\n        lookbehind: true,\n        alias: 'property'\n      },\n      'command-param-value': [\n        {\n          pattern: expressionDef,\n          alias: 'selector'\n        },\n        {\n          pattern: /([\\t ])\\S+/,\n          lookbehind: true,\n          greedy: true,\n          alias: 'operator'\n        },\n        {\n          pattern: /\\S(?:.*\\S)?/,\n          alias: 'operator'\n        }\n      ]\n    }\n    Prism.languages.naniscript = {\n      // ; ...\n      comment: {\n        pattern: /^([\\t ]*);.*/m,\n        lookbehind: true\n      },\n      // > ...\n      // Define is a control line starting with '>' followed by a word, a space and a text.\n      define: {\n        pattern: /^>.+/m,\n        alias: 'tag',\n        inside: {\n          value: {\n            pattern: /(^>\\w+[\\t ]+)(?!\\s)[^{}\\r\\n]+/,\n            lookbehind: true,\n            alias: 'operator'\n          },\n          key: {\n            pattern: /(^>)\\w+/,\n            lookbehind: true\n          }\n        }\n      },\n      // # ...\n      label: {\n        pattern: /^([\\t ]*)#[\\t ]*\\w+[\\t ]*$/m,\n        lookbehind: true,\n        alias: 'regex'\n      },\n      command: {\n        pattern: /^([\\t ]*)@\\w+(?=[\\t ]|$).*/m,\n        lookbehind: true,\n        alias: 'function',\n        inside: {\n          'command-name': /^@\\w+/,\n          expression: {\n            pattern: expressionDef,\n            greedy: true,\n            alias: 'selector'\n          },\n          'command-params': {\n            pattern: /\\s*\\S[\\s\\S]*/,\n            inside: params\n          }\n        }\n      },\n      // Generic is any line that doesn't start with operators: ;>#@\n      'generic-text': {\n        pattern: /(^[ \\t]*)[^#@>;\\s].*/m,\n        lookbehind: true,\n        alias: 'punctuation',\n        inside: {\n          // \\{ ... \\} ... \\[ ... \\] ... \\\"\n          'escaped-char': /\\\\[{}\\[\\]\"]/,\n          expression: {\n            pattern: expressionDef,\n            greedy: true,\n            alias: 'selector'\n          },\n          'inline-command': {\n            pattern: /\\[[\\t ]*\\w[^\\r\\n\\[\\]]*\\]/,\n            greedy: true,\n            alias: 'function',\n            inside: {\n              'command-params': {\n                pattern: /(^\\[[\\t ]*\\w+\\b)[\\s\\S]+(?=\\]$)/,\n                lookbehind: true,\n                inside: params\n              },\n              'command-param-name': {\n                pattern: /^(\\[[\\t ]*)\\w+/,\n                lookbehind: true,\n                alias: 'name'\n              },\n              'start-stop-char': /[\\[\\]]/\n            }\n          }\n        }\n      }\n    }\n    Prism.languages.nani = Prism.languages['naniscript']\n    /** @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token */\n    /**\n     * This hook is used to validate generic-text tokens for balanced brackets.\n     * Mark token as bad-line when contains not balanced brackets: {},[]\n     */\n    Prism.hooks.add('after-tokenize', function (env) {\n      /** @type {(Token | string)[]} */\n      var tokens = env.tokens\n      tokens.forEach(function (token) {\n        if (typeof token !== 'string' && token.type === 'generic-text') {\n          var content = getTextContent(token)\n          if (!isBracketsBalanced(content)) {\n            token.type = 'bad-line'\n            token.content = content\n          }\n        }\n      })\n    })\n    /**\n     * @param {string} input\n     * @returns {boolean}\n     */\n    function isBracketsBalanced(input) {\n      var brackets = '[]{}'\n      var stack = []\n      for (var i = 0; i < input.length; i++) {\n        var bracket = input[i]\n        var bracketsIndex = brackets.indexOf(bracket)\n        if (bracketsIndex !== -1) {\n          if (bracketsIndex % 2 === 0) {\n            stack.push(bracketsIndex + 1)\n          } else if (stack.pop() !== bracketsIndex) {\n            return false\n          }\n        }\n      }\n      return stack.length === 0\n    }\n    /**\n     * @param {string | Token | (string | Token)[]} token\n     * @returns {string}\n     */\n    function getTextContent(token) {\n      if (typeof token === 'string') {\n        return token\n      } else if (Array.isArray(token)) {\n        return token.map(getTextContent).join('')\n      } else {\n        return getTextContent(token.content)\n      }\n    }\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = nasm\nnasm.displayName = 'nasm'\nnasm.aliases = []\nfunction nasm(Prism) {\n  Prism.languages.nasm = {\n    comment: /;.*$/m,\n    string: /([\"'`])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    label: {\n      pattern: /(^\\s*)[A-Za-z._?$][\\w.?$@~#]*:/m,\n      lookbehind: true,\n      alias: 'function'\n    },\n    keyword: [\n      /\\[?BITS (?:16|32|64)\\]?/,\n      {\n        pattern: /(^\\s*)section\\s*[a-z.]+:?/im,\n        lookbehind: true\n      },\n      /(?:extern|global)[^;\\r\\n]*/i,\n      /(?:CPU|DEFAULT|FLOAT).*$/m\n    ],\n    register: {\n      pattern:\n        /\\b(?:st\\d|[xyz]mm\\d\\d?|[cdt]r\\d|r\\d\\d?[bwd]?|[er]?[abcd]x|[abcd][hl]|[er]?(?:bp|di|si|sp)|[cdefgs]s)\\b/i,\n      alias: 'variable'\n    },\n    number:\n      /(?:\\b|(?=\\$))(?:0[hx](?:\\.[\\da-f]+|[\\da-f]+(?:\\.[\\da-f]+)?)(?:p[+-]?\\d+)?|\\d[\\da-f]+[hx]|\\$\\d[\\da-f]*|0[oq][0-7]+|[0-7]+[oq]|0[by][01]+|[01]+[by]|0[dt]\\d+|(?:\\d+(?:\\.\\d+)?|\\.\\d+)(?:\\.?e[+-]?\\d+)?[dt]?)\\b/i,\n    operator: /[\\[\\]*+\\-\\/%<>=&|$!]/\n  }\n}\n","'use strict'\n\nmodule.exports = neon\nneon.displayName = 'neon'\nneon.aliases = []\nfunction neon(Prism) {\n  Prism.languages.neon = {\n    comment: {\n      pattern: /#.*/,\n      greedy: true\n    },\n    datetime: {\n      pattern:\n        /(^|[[{(=:,\\s])\\d\\d\\d\\d-\\d\\d?-\\d\\d?(?:(?:[Tt]| +)\\d\\d?:\\d\\d:\\d\\d(?:\\.\\d*)? *(?:Z|[-+]\\d\\d?(?::?\\d\\d)?)?)?(?=$|[\\]}),\\s])/,\n      lookbehind: true,\n      alias: 'number'\n    },\n    key: {\n      pattern: /(^|[[{(,\\s])[^,:=[\\]{}()'\"\\s]+(?=\\s*:(?:$|[\\]}),\\s])|\\s*=)/,\n      lookbehind: true,\n      alias: 'atrule'\n    },\n    number: {\n      pattern:\n        /(^|[[{(=:,\\s])[+-]?(?:0x[\\da-fA-F]+|0o[0-7]+|0b[01]+|(?:\\d+(?:\\.\\d*)?|\\.?\\d+)(?:[eE][+-]?\\d+)?)(?=$|[\\]}),:=\\s])/,\n      lookbehind: true\n    },\n    boolean: {\n      pattern: /(^|[[{(=:,\\s])(?:false|no|true|yes)(?=$|[\\]}),:=\\s])/i,\n      lookbehind: true\n    },\n    null: {\n      pattern: /(^|[[{(=:,\\s])(?:null)(?=$|[\\]}),:=\\s])/i,\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    string: {\n      pattern:\n        /(^|[[{(=:,\\s])(?:('''|\"\"\")\\r?\\n(?:(?:[^\\r\\n]|\\r?\\n(?![\\t ]*\\2))*\\r?\\n)?[\\t ]*\\2|'[^'\\r\\n]*'|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")/,\n      lookbehind: true,\n      greedy: true\n    },\n    literal: {\n      pattern:\n        /(^|[[{(=:,\\s])(?:[^#\"',:=[\\]{}()\\s`-]|[:-][^\"',=[\\]{}()\\s])(?:[^,:=\\]})(\\s]|:(?![\\s,\\]})]|$)|[ \\t]+[^#,:=\\]})(\\s])*/,\n      lookbehind: true,\n      alias: 'string'\n    },\n    punctuation: /[,:=[\\]{}()-]/\n  }\n}\n","'use strict'\n\nmodule.exports = nevod\nnevod.displayName = 'nevod'\nnevod.aliases = []\nfunction nevod(Prism) {\n  Prism.languages.nevod = {\n    comment: /\\/\\/.*|(?:\\/\\*[\\s\\S]*?(?:\\*\\/|$))/,\n    string: {\n      pattern: /(?:\"(?:\"\"|[^\"])*\"(?!\")|'(?:''|[^'])*'(?!'))!?\\*?/,\n      greedy: true,\n      inside: {\n        'string-attrs': /!$|!\\*$|\\*$/\n      }\n    },\n    namespace: {\n      pattern: /(@namespace\\s+)[a-zA-Z0-9\\-.]+(?=\\s*\\{)/,\n      lookbehind: true\n    },\n    pattern: {\n      pattern:\n        /(@pattern\\s+)?#?[a-zA-Z0-9\\-.]+(?:\\s*\\(\\s*(?:~\\s*)?[a-zA-Z0-9\\-.]+\\s*(?:,\\s*(?:~\\s*)?[a-zA-Z0-9\\-.]*)*\\))?(?=\\s*=)/,\n      lookbehind: true,\n      inside: {\n        'pattern-name': {\n          pattern: /^#?[a-zA-Z0-9\\-.]+/,\n          alias: 'class-name'\n        },\n        fields: {\n          pattern: /\\(.*\\)/,\n          inside: {\n            'field-name': {\n              pattern: /[a-zA-Z0-9\\-.]+/,\n              alias: 'variable'\n            },\n            punctuation: /[,()]/,\n            operator: {\n              pattern: /~/,\n              alias: 'field-hidden-mark'\n            }\n          }\n        }\n      }\n    },\n    search: {\n      pattern: /(@search\\s+|#)[a-zA-Z0-9\\-.]+(?:\\.\\*)?(?=\\s*;)/,\n      alias: 'function',\n      lookbehind: true\n    },\n    keyword:\n      /@(?:having|inside|namespace|outside|pattern|require|search|where)\\b/,\n    'standard-pattern': {\n      pattern:\n        /\\b(?:Alpha|AlphaNum|Any|Blank|End|LineBreak|Num|NumAlpha|Punct|Space|Start|Symbol|Word|WordBreak)\\b(?:\\([a-zA-Z0-9\\-.,\\s+]*\\))?/,\n      inside: {\n        'standard-pattern-name': {\n          pattern: /^[a-zA-Z0-9\\-.]+/,\n          alias: 'builtin'\n        },\n        quantifier: {\n          pattern: /\\b\\d+(?:\\s*\\+|\\s*-\\s*\\d+)?(?!\\w)/,\n          alias: 'number'\n        },\n        'standard-pattern-attr': {\n          pattern: /[a-zA-Z0-9\\-.]+/,\n          alias: 'builtin'\n        },\n        punctuation: /[,()]/\n      }\n    },\n    quantifier: {\n      pattern: /\\b\\d+(?:\\s*\\+|\\s*-\\s*\\d+)?(?!\\w)/,\n      alias: 'number'\n    },\n    operator: [\n      {\n        pattern: /=/,\n        alias: 'pattern-def'\n      },\n      {\n        pattern: /&/,\n        alias: 'conjunction'\n      },\n      {\n        pattern: /~/,\n        alias: 'exception'\n      },\n      {\n        pattern: /\\?/,\n        alias: 'optionality'\n      },\n      {\n        pattern: /[[\\]]/,\n        alias: 'repetition'\n      },\n      {\n        pattern: /[{}]/,\n        alias: 'variation'\n      },\n      {\n        pattern: /[+_]/,\n        alias: 'sequence'\n      },\n      {\n        pattern: /\\.{2,3}/,\n        alias: 'span'\n      }\n    ],\n    'field-capture': [\n      {\n        pattern:\n          /([a-zA-Z0-9\\-.]+\\s*\\()\\s*[a-zA-Z0-9\\-.]+\\s*:\\s*[a-zA-Z0-9\\-.]+(?:\\s*,\\s*[a-zA-Z0-9\\-.]+\\s*:\\s*[a-zA-Z0-9\\-.]+)*(?=\\s*\\))/,\n        lookbehind: true,\n        inside: {\n          'field-name': {\n            pattern: /[a-zA-Z0-9\\-.]+/,\n            alias: 'variable'\n          },\n          colon: /:/\n        }\n      },\n      {\n        pattern: /[a-zA-Z0-9\\-.]+\\s*:/,\n        inside: {\n          'field-name': {\n            pattern: /[a-zA-Z0-9\\-.]+/,\n            alias: 'variable'\n          },\n          colon: /:/\n        }\n      }\n    ],\n    punctuation: /[:;,()]/,\n    name: /[a-zA-Z0-9\\-.]+/\n  }\n}\n","'use strict'\n\nmodule.exports = nginx\nnginx.displayName = 'nginx'\nnginx.aliases = []\nfunction nginx(Prism) {\n  ;(function (Prism) {\n    var variable =\n      /\\$(?:\\w[a-z\\d]*(?:_[^\\x00-\\x1F\\s\"'\\\\()$]*)?|\\{[^}\\s\"'\\\\]+\\})/i\n    Prism.languages.nginx = {\n      comment: {\n        pattern: /(^|[\\s{};])#.*/,\n        lookbehind: true,\n        greedy: true\n      },\n      directive: {\n        pattern:\n          /(^|\\s)\\w(?:[^;{}\"'\\\\\\s]|\\\\.|\"(?:[^\"\\\\]|\\\\.)*\"|'(?:[^'\\\\]|\\\\.)*'|\\s+(?:#.*(?!.)|(?![#\\s])))*?(?=\\s*[;{])/,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          string: {\n            pattern:\n              /((?:^|[^\\\\])(?:\\\\\\\\)*)(?:\"(?:[^\"\\\\]|\\\\.)*\"|'(?:[^'\\\\]|\\\\.)*')/,\n            lookbehind: true,\n            greedy: true,\n            inside: {\n              escape: {\n                pattern: /\\\\[\"'\\\\nrt]/,\n                alias: 'entity'\n              },\n              variable: variable\n            }\n          },\n          comment: {\n            pattern: /(\\s)#.*/,\n            lookbehind: true,\n            greedy: true\n          },\n          keyword: {\n            pattern: /^\\S+/,\n            greedy: true\n          },\n          // other patterns\n          boolean: {\n            pattern: /(\\s)(?:off|on)(?!\\S)/,\n            lookbehind: true\n          },\n          number: {\n            pattern: /(\\s)\\d+[a-z]*(?!\\S)/i,\n            lookbehind: true\n          },\n          variable: variable\n        }\n      },\n      punctuation: /[{};]/\n    }\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = nim\nnim.displayName = 'nim'\nnim.aliases = []\nfunction nim(Prism) {\n  Prism.languages.nim = {\n    comment: {\n      pattern: /#.*/,\n      greedy: true\n    },\n    string: {\n      // Double-quoted strings can be prefixed by an identifier (Generalized raw string literals)\n      pattern:\n        /(?:\\b(?!\\d)(?:\\w|\\\\x[89a-fA-F][0-9a-fA-F])+)?(?:\"\"\"[\\s\\S]*?\"\"\"(?!\")|\"(?:\\\\[\\s\\S]|\"\"|[^\"\\\\])*\")/,\n      greedy: true\n    },\n    char: {\n      // Character literals are handled specifically to prevent issues with numeric type suffixes\n      pattern: /'(?:\\\\(?:\\d+|x[\\da-fA-F]{0,2}|.)|[^'])'/,\n      greedy: true\n    },\n    function: {\n      pattern:\n        /(?:(?!\\d)(?:\\w|\\\\x[89a-fA-F][0-9a-fA-F])+|`[^`\\r\\n]+`)\\*?(?:\\[[^\\]]+\\])?(?=\\s*\\()/,\n      greedy: true,\n      inside: {\n        operator: /\\*$/\n      }\n    },\n    // We don't want to highlight operators (and anything really) inside backticks\n    identifier: {\n      pattern: /`[^`\\r\\n]+`/,\n      greedy: true,\n      inside: {\n        punctuation: /`/\n      }\n    },\n    // The negative look ahead prevents wrong highlighting of the .. operator\n    number:\n      /\\b(?:0[xXoObB][\\da-fA-F_]+|\\d[\\d_]*(?:(?!\\.\\.)\\.[\\d_]*)?(?:[eE][+-]?\\d[\\d_]*)?)(?:'?[iuf]\\d*)?/,\n    keyword:\n      /\\b(?:addr|as|asm|atomic|bind|block|break|case|cast|concept|const|continue|converter|defer|discard|distinct|do|elif|else|end|enum|except|export|finally|for|from|func|generic|if|import|include|interface|iterator|let|macro|method|mixin|nil|object|out|proc|ptr|raise|ref|return|static|template|try|tuple|type|using|var|when|while|with|without|yield)\\b/,\n    operator: {\n      // Look behind and look ahead prevent wrong highlighting of punctuations [. .] {. .} (. .)\n      // but allow the slice operator .. to take precedence over them\n      // One can define his own operators in Nim so all combination of operators might be an operator.\n      pattern:\n        /(^|[({\\[](?=\\.\\.)|(?![({\\[]\\.).)(?:(?:[=+\\-*\\/<>@$~&%|!?^:\\\\]|\\.\\.|\\.(?![)}\\]]))+|\\b(?:and|div|in|is|isnot|mod|not|notin|of|or|shl|shr|xor)\\b)/m,\n      lookbehind: true\n    },\n    punctuation: /[({\\[]\\.|\\.[)}\\]]|[`(){}\\[\\],:]/\n  }\n}\n","'use strict'\n\nmodule.exports = nix\nnix.displayName = 'nix'\nnix.aliases = []\nfunction nix(Prism) {\n  Prism.languages.nix = {\n    comment: {\n      pattern: /\\/\\*[\\s\\S]*?\\*\\/|#.*/,\n      greedy: true\n    },\n    string: {\n      pattern: /\"(?:[^\"\\\\]|\\\\[\\s\\S])*\"|''(?:(?!'')[\\s\\S]|''(?:'|\\\\|\\$\\{))*''/,\n      greedy: true,\n      inside: {\n        interpolation: {\n          // The lookbehind ensures the ${} is not preceded by \\ or ''\n          pattern: /(^|(?:^|(?!'').)[^\\\\])\\$\\{(?:[^{}]|\\{[^}]*\\})*\\}/,\n          lookbehind: true,\n          inside: null // see below\n        }\n      }\n    },\n    url: [\n      /\\b(?:[a-z]{3,7}:\\/\\/)[\\w\\-+%~\\/.:#=?&]+/,\n      {\n        pattern:\n          /([^\\/])(?:[\\w\\-+%~.:#=?&]*(?!\\/\\/)[\\w\\-+%~\\/.:#=?&])?(?!\\/\\/)\\/[\\w\\-+%~\\/.:#=?&]*/,\n        lookbehind: true\n      }\n    ],\n    antiquotation: {\n      pattern: /\\$(?=\\{)/,\n      alias: 'important'\n    },\n    number: /\\b\\d+\\b/,\n    keyword: /\\b(?:assert|builtins|else|if|in|inherit|let|null|or|then|with)\\b/,\n    function:\n      /\\b(?:abort|add|all|any|attrNames|attrValues|baseNameOf|compareVersions|concatLists|currentSystem|deepSeq|derivation|dirOf|div|elem(?:At)?|fetch(?:Tarball|url)|filter(?:Source)?|fromJSON|genList|getAttr|getEnv|hasAttr|hashString|head|import|intersectAttrs|is(?:Attrs|Bool|Function|Int|List|Null|String)|length|lessThan|listToAttrs|map|mul|parseDrvName|pathExists|read(?:Dir|File)|removeAttrs|replaceStrings|seq|sort|stringLength|sub(?:string)?|tail|throw|to(?:File|JSON|Path|String|XML)|trace|typeOf)\\b|\\bfoldl'\\B/,\n    boolean: /\\b(?:false|true)\\b/,\n    operator: /[=!<>]=?|\\+\\+?|\\|\\||&&|\\/\\/|->?|[?@]/,\n    punctuation: /[{}()[\\].,:;]/\n  }\n  Prism.languages.nix.string.inside.interpolation.inside = Prism.languages.nix\n}\n","'use strict'\n\nmodule.exports = nsis\nnsis.displayName = 'nsis'\nnsis.aliases = []\nfunction nsis(Prism) {\n  /**\n   * Original by Jan T. Sott (http://github.com/idleberg)\n   *\n   * Includes all commands and plug-ins shipped with NSIS 3.08\n   */\n  Prism.languages.nsis = {\n    comment: {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|[#;].*)/,\n      lookbehind: true,\n      greedy: true\n    },\n    string: {\n      pattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true\n    },\n    keyword: {\n      pattern:\n        /(^[\\t ]*)(?:Abort|Add(?:BrandingImage|Size)|AdvSplash|Allow(?:RootDirInstall|SkipFiles)|AutoCloseWindow|BG(?:Font|Gradient|Image)|Banner|BrandingText|BringToFront|CRCCheck|Call(?:InstDLL)?|Caption|ChangeUI|CheckBitmap|ClearErrors|CompletedText|ComponentText|CopyFiles|Create(?:Directory|Font|ShortCut)|Delete(?:INISec|INIStr|RegKey|RegValue)?|Detail(?:Print|sButtonText)|Dialer|Dir(?:Text|Var|Verify)|EnableWindow|Enum(?:RegKey|RegValue)|Exch|Exec(?:Shell(?:Wait)?|Wait)?|ExpandEnvStrings|File(?:BufSize|Close|ErrorText|Open|Read|ReadByte|ReadUTF16LE|ReadWord|Seek|Write|WriteByte|WriteUTF16LE|WriteWord)?|Find(?:Close|First|Next|Window)|FlushINI|Get(?:CurInstType|CurrentAddress|DLLVersion(?:Local)?|DlgItem|ErrorLevel|FileTime(?:Local)?|FullPathName|Function(?:Address|End)?|InstDirError|LabelAddress|TempFileName)|Goto|HideWindow|Icon|If(?:Abort|Errors|FileExists|RebootFlag|Silent)|InitPluginsDir|InstProgressFlags|Inst(?:Type(?:GetText|SetText)?)|Install(?:ButtonText|Colors|Dir(?:RegKey)?)|Int(?:64|Ptr)?CmpU?|Int(?:64)?Fmt|Int(?:Ptr)?Op|IsWindow|Lang(?:DLL|String)|License(?:BkColor|Data|ForceSelection|LangString|Text)|LoadLanguageFile|LockWindow|Log(?:Set|Text)|Manifest(?:DPIAware|SupportedOS)|Math|MessageBox|MiscButtonText|NSISdl|Name|Nop|OutFile|PE(?:DllCharacteristics|SubsysVer)|Page(?:Callbacks)?|Pop|Push|Quit|RMDir|Read(?:EnvStr|INIStr|RegDWORD|RegStr)|Reboot|RegDLL|Rename|RequestExecutionLevel|ReserveFile|Return|SearchPath|Section(?:End|GetFlags|GetInstTypes|GetSize|GetText|Group|In|SetFlags|SetInstTypes|SetSize|SetText)?|SendMessage|Set(?:AutoClose|BrandingImage|Compress|Compressor(?:DictSize)?|CtlColors|CurInstType|DatablockOptimize|DateSave|Details(?:Print|View)|ErrorLevel|Errors|FileAttributes|Font|OutPath|Overwrite|PluginUnload|RebootFlag|RegView|ShellVarContext|Silent)|Show(?:InstDetails|UninstDetails|Window)|Silent(?:Install|UnInstall)|Sleep|SpaceTexts|Splash|StartMenu|Str(?:CmpS?|Cpy|Len)|SubCaption|System|UnRegDLL|Unicode|UninstPage|Uninstall(?:ButtonText|Caption|Icon|SubCaption|Text)|UserInfo|VI(?:AddVersionKey|FileVersion|ProductVersion)|VPatch|Var|WindowIcon|Write(?:INIStr|Reg(?:Bin|DWORD|ExpandStr|MultiStr|None|Str)|Uninstaller)|XPStyle|ns(?:Dialogs|Exec))\\b/m,\n      lookbehind: true\n    },\n    property:\n      /\\b(?:ARCHIVE|FILE_(?:ATTRIBUTE_ARCHIVE|ATTRIBUTE_NORMAL|ATTRIBUTE_OFFLINE|ATTRIBUTE_READONLY|ATTRIBUTE_SYSTEM|ATTRIBUTE_TEMPORARY)|HK(?:(?:CR|CU|LM)(?:32|64)?|DD|PD|U)|HKEY_(?:CLASSES_ROOT|CURRENT_CONFIG|CURRENT_USER|DYN_DATA|LOCAL_MACHINE|PERFORMANCE_DATA|USERS)|ID(?:ABORT|CANCEL|IGNORE|NO|OK|RETRY|YES)|MB_(?:ABORTRETRYIGNORE|DEFBUTTON1|DEFBUTTON2|DEFBUTTON3|DEFBUTTON4|ICONEXCLAMATION|ICONINFORMATION|ICONQUESTION|ICONSTOP|OK|OKCANCEL|RETRYCANCEL|RIGHT|RTLREADING|SETFOREGROUND|TOPMOST|USERICON|YESNO)|NORMAL|OFFLINE|READONLY|SHCTX|SHELL_CONTEXT|SYSTEM|TEMPORARY|admin|all|auto|both|colored|false|force|hide|highest|lastused|leave|listonly|none|normal|notset|off|on|open|print|show|silent|silentlog|smooth|textonly|true|user)\\b/,\n    constant: /\\$\\{[!\\w\\.:\\^-]+\\}|\\$\\([!\\w\\.:\\^-]+\\)/,\n    variable: /\\$\\w[\\w\\.]*/,\n    number: /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,\n    operator: /--?|\\+\\+?|<=?|>=?|==?=?|&&?|\\|\\|?|[?*\\/~^%]/,\n    punctuation: /[{}[\\];(),.:]/,\n    important: {\n      pattern:\n        /(^[\\t ]*)!(?:addincludedir|addplugindir|appendfile|cd|define|delfile|echo|else|endif|error|execute|finalize|getdllversion|gettlbversion|if|ifdef|ifmacrodef|ifmacrondef|ifndef|include|insertmacro|macro|macroend|makensis|packhdr|pragma|searchparse|searchreplace|system|tempfile|undef|verbose|warning)\\b/im,\n      lookbehind: true\n    }\n  }\n}\n","'use strict'\nvar refractorC = require('./c.js')\nmodule.exports = objectivec\nobjectivec.displayName = 'objectivec'\nobjectivec.aliases = ['objc']\nfunction objectivec(Prism) {\n  Prism.register(refractorC)\n  Prism.languages.objectivec = Prism.languages.extend('c', {\n    string: {\n      pattern: /@?\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n      greedy: true\n    },\n    keyword:\n      /\\b(?:asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|in|inline|int|long|register|return|self|short|signed|sizeof|static|struct|super|switch|typedef|typeof|union|unsigned|void|volatile|while)\\b|(?:@interface|@end|@implementation|@protocol|@class|@public|@protected|@private|@property|@try|@catch|@finally|@throw|@synthesize|@dynamic|@selector)\\b/,\n    operator: /-[->]?|\\+\\+?|!=?|<<?=?|>>?=?|==?|&&?|\\|\\|?|[~^%?*\\/@]/\n  })\n  delete Prism.languages.objectivec['class-name']\n  Prism.languages.objc = Prism.languages.objectivec\n}\n","'use strict'\n\nmodule.exports = ocaml\nocaml.displayName = 'ocaml'\nocaml.aliases = []\nfunction ocaml(Prism) {\n  // https://ocaml.org/manual/lex.html\n  Prism.languages.ocaml = {\n    comment: {\n      pattern: /\\(\\*[\\s\\S]*?\\*\\)/,\n      greedy: true\n    },\n    char: {\n      pattern: /'(?:[^\\\\\\r\\n']|\\\\(?:.|[ox]?[0-9a-f]{1,3}))'/i,\n      greedy: true\n    },\n    string: [\n      {\n        pattern: /\"(?:\\\\(?:[\\s\\S]|\\r\\n)|[^\\\\\\r\\n\"])*\"/,\n        greedy: true\n      },\n      {\n        pattern: /\\{([a-z_]*)\\|[\\s\\S]*?\\|\\1\\}/,\n        greedy: true\n      }\n    ],\n    number: [\n      // binary and octal\n      /\\b(?:0b[01][01_]*|0o[0-7][0-7_]*)\\b/i, // hexadecimal\n      /\\b0x[a-f0-9][a-f0-9_]*(?:\\.[a-f0-9_]*)?(?:p[+-]?\\d[\\d_]*)?(?!\\w)/i, // decimal\n      /\\b\\d[\\d_]*(?:\\.[\\d_]*)?(?:e[+-]?\\d[\\d_]*)?(?!\\w)/i\n    ],\n    directive: {\n      pattern: /\\B#\\w+/,\n      alias: 'property'\n    },\n    label: {\n      pattern: /\\B~\\w+/,\n      alias: 'property'\n    },\n    'type-variable': {\n      pattern: /\\B'\\w+/,\n      alias: 'function'\n    },\n    variant: {\n      pattern: /`\\w+/,\n      alias: 'symbol'\n    },\n    // For the list of keywords and operators,\n    // see: http://caml.inria.fr/pub/docs/manual-ocaml/lex.html#sec84\n    keyword:\n      /\\b(?:as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|nonrec|object|of|open|private|rec|sig|struct|then|to|try|type|val|value|virtual|when|where|while|with)\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    'operator-like-punctuation': {\n      pattern: /\\[[<>|]|[>|]\\]|\\{<|>\\}/,\n      alias: 'punctuation'\n    },\n    // Custom operators are allowed\n    operator:\n      /\\.[.~]|:[=>]|[=<>@^|&+\\-*\\/$%!?~][!$%&*+\\-.\\/:<=>?@^|~]*|\\b(?:and|asr|land|lor|lsl|lsr|lxor|mod|or)\\b/,\n    punctuation: /;;|::|[(){}\\[\\].,:;#]|\\b_\\b/\n  }\n}\n","'use strict'\nvar refractorC = require('./c.js')\nmodule.exports = opencl\nopencl.displayName = 'opencl'\nopencl.aliases = []\nfunction opencl(Prism) {\n  Prism.register(refractorC)\n  ;(function (Prism) {\n    /* OpenCL kernel language */\n    Prism.languages.opencl = Prism.languages.extend('c', {\n      // Extracted from the official specs (2.0) and http://streamcomputing.eu/downloads/?opencl.lang (opencl-keywords, opencl-types) and http://sourceforge.net/tracker/?func=detail&aid=2957794&group_id=95717&atid=612384 (Words2, partly Words3)\n      keyword:\n        /\\b(?:(?:__)?(?:constant|global|kernel|local|private|read_only|read_write|write_only)|__attribute__|auto|(?:bool|u?(?:char|int|long|short)|half|quad)(?:2|3|4|8|16)?|break|case|complex|const|continue|(?:double|float)(?:16(?:x(?:1|2|4|8|16))?|1x(?:1|2|4|8|16)|2(?:x(?:1|2|4|8|16))?|3|4(?:x(?:1|2|4|8|16))?|8(?:x(?:1|2|4|8|16))?)?|default|do|else|enum|extern|for|goto|if|imaginary|inline|packed|pipe|register|restrict|return|signed|sizeof|static|struct|switch|typedef|uniform|union|unsigned|void|volatile|while)\\b/,\n      // Extracted from http://streamcomputing.eu/downloads/?opencl.lang (opencl-const)\n      // Math Constants: https://www.khronos.org/registry/OpenCL/sdk/2.1/docs/man/xhtml/mathConstants.html\n      // Macros and Limits: https://www.khronos.org/registry/OpenCL/sdk/2.1/docs/man/xhtml/macroLimits.html\n      number:\n        /(?:\\b0x(?:[\\da-f]+(?:\\.[\\da-f]*)?|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)[fuhl]{0,4}/i,\n      boolean: /\\b(?:false|true)\\b/,\n      'constant-opencl-kernel': {\n        pattern:\n          /\\b(?:CHAR_(?:BIT|MAX|MIN)|CLK_(?:ADDRESS_(?:CLAMP(?:_TO_EDGE)?|NONE|REPEAT)|FILTER_(?:LINEAR|NEAREST)|(?:GLOBAL|LOCAL)_MEM_FENCE|NORMALIZED_COORDS_(?:FALSE|TRUE))|CL_(?:BGRA|(?:HALF_)?FLOAT|INTENSITY|LUMINANCE|A?R?G?B?[Ax]?|(?:(?:UN)?SIGNED|[US]NORM)_(?:INT(?:8|16|32))|UNORM_(?:INT_101010|SHORT_(?:555|565)))|(?:DBL|FLT|HALF)_(?:DIG|EPSILON|(?:MAX|MIN)(?:(?:_10)?_EXP)?|MANT_DIG)|FLT_RADIX|HUGE_VALF?|(?:INT|LONG|SCHAR|SHRT)_(?:MAX|MIN)|INFINITY|MAXFLOAT|M_(?:[12]_PI|2_SQRTPI|E|LN(?:2|10)|LOG(?:2|10)E?|PI(?:_[24])?|SQRT(?:1_2|2))(?:_F|_H)?|NAN|(?:UCHAR|UINT|ULONG|USHRT)_MAX)\\b/,\n        alias: 'constant'\n      }\n    })\n    Prism.languages.insertBefore('opencl', 'class-name', {\n      // https://www.khronos.org/registry/OpenCL/sdk/2.1/docs/man/xhtml/scalarDataTypes.html\n      // https://www.khronos.org/registry/OpenCL/sdk/2.1/docs/man/xhtml/otherDataTypes.html\n      'builtin-type': {\n        pattern:\n          /\\b(?:_cl_(?:command_queue|context|device_id|event|kernel|mem|platform_id|program|sampler)|cl_(?:image_format|mem_fence_flags)|clk_event_t|event_t|image(?:1d_(?:array_|buffer_)?t|2d_(?:array_(?:depth_|msaa_depth_|msaa_)?|depth_|msaa_depth_|msaa_)?t|3d_t)|intptr_t|ndrange_t|ptrdiff_t|queue_t|reserve_id_t|sampler_t|size_t|uintptr_t)\\b/,\n        alias: 'keyword'\n      }\n    })\n    var attributes = {\n      // Extracted from http://streamcomputing.eu/downloads/?opencl_host.lang (opencl-types and opencl-host)\n      'type-opencl-host': {\n        pattern:\n          /\\b(?:cl_(?:GLenum|GLint|GLuin|addressing_mode|bitfield|bool|buffer_create_type|build_status|channel_(?:order|type)|(?:u?(?:char|int|long|short)|double|float)(?:2|3|4|8|16)?|command_(?:queue(?:_info|_properties)?|type)|context(?:_info|_properties)?|device_(?:exec_capabilities|fp_config|id|info|local_mem_type|mem_cache_type|type)|(?:event|sampler)(?:_info)?|filter_mode|half|image_info|kernel(?:_info|_work_group_info)?|map_flags|mem(?:_flags|_info|_object_type)?|platform_(?:id|info)|profiling_info|program(?:_build_info|_info)?))\\b/,\n        alias: 'keyword'\n      },\n      'boolean-opencl-host': {\n        pattern: /\\bCL_(?:FALSE|TRUE)\\b/,\n        alias: 'boolean'\n      },\n      // Extracted from cl.h (2.0) and http://streamcomputing.eu/downloads/?opencl_host.lang (opencl-const)\n      'constant-opencl-host': {\n        pattern:\n          /\\bCL_(?:A|ABGR|ADDRESS_(?:CLAMP(?:_TO_EDGE)?|MIRRORED_REPEAT|NONE|REPEAT)|ARGB|BGRA|BLOCKING|BUFFER_CREATE_TYPE_REGION|BUILD_(?:ERROR|IN_PROGRESS|NONE|PROGRAM_FAILURE|SUCCESS)|COMMAND_(?:ACQUIRE_GL_OBJECTS|BARRIER|COPY_(?:BUFFER(?:_RECT|_TO_IMAGE)?|IMAGE(?:_TO_BUFFER)?)|FILL_(?:BUFFER|IMAGE)|MAP(?:_BUFFER|_IMAGE)|MARKER|MIGRATE(?:_SVM)?_MEM_OBJECTS|NATIVE_KERNEL|NDRANGE_KERNEL|READ_(?:BUFFER(?:_RECT)?|IMAGE)|RELEASE_GL_OBJECTS|SVM_(?:FREE|MAP|MEMCPY|MEMFILL|UNMAP)|TASK|UNMAP_MEM_OBJECT|USER|WRITE_(?:BUFFER(?:_RECT)?|IMAGE))|COMPILER_NOT_AVAILABLE|COMPILE_PROGRAM_FAILURE|COMPLETE|CONTEXT_(?:DEVICES|INTEROP_USER_SYNC|NUM_DEVICES|PLATFORM|PROPERTIES|REFERENCE_COUNT)|DEPTH(?:_STENCIL)?|DEVICE_(?:ADDRESS_BITS|AFFINITY_DOMAIN_(?:L[1-4]_CACHE|NEXT_PARTITIONABLE|NUMA)|AVAILABLE|BUILT_IN_KERNELS|COMPILER_AVAILABLE|DOUBLE_FP_CONFIG|ENDIAN_LITTLE|ERROR_CORRECTION_SUPPORT|EXECUTION_CAPABILITIES|EXTENSIONS|GLOBAL_(?:MEM_(?:CACHELINE_SIZE|CACHE_SIZE|CACHE_TYPE|SIZE)|VARIABLE_PREFERRED_TOTAL_SIZE)|HOST_UNIFIED_MEMORY|IL_VERSION|IMAGE(?:2D_MAX_(?:HEIGHT|WIDTH)|3D_MAX_(?:DEPTH|HEIGHT|WIDTH)|_BASE_ADDRESS_ALIGNMENT|_MAX_ARRAY_SIZE|_MAX_BUFFER_SIZE|_PITCH_ALIGNMENT|_SUPPORT)|LINKER_AVAILABLE|LOCAL_MEM_SIZE|LOCAL_MEM_TYPE|MAX_(?:CLOCK_FREQUENCY|COMPUTE_UNITS|CONSTANT_ARGS|CONSTANT_BUFFER_SIZE|GLOBAL_VARIABLE_SIZE|MEM_ALLOC_SIZE|NUM_SUB_GROUPS|ON_DEVICE_(?:EVENTS|QUEUES)|PARAMETER_SIZE|PIPE_ARGS|READ_IMAGE_ARGS|READ_WRITE_IMAGE_ARGS|SAMPLERS|WORK_GROUP_SIZE|WORK_ITEM_DIMENSIONS|WORK_ITEM_SIZES|WRITE_IMAGE_ARGS)|MEM_BASE_ADDR_ALIGN|MIN_DATA_TYPE_ALIGN_SIZE|NAME|NATIVE_VECTOR_WIDTH_(?:CHAR|DOUBLE|FLOAT|HALF|INT|LONG|SHORT)|NOT_(?:AVAILABLE|FOUND)|OPENCL_C_VERSION|PARENT_DEVICE|PARTITION_(?:AFFINITY_DOMAIN|BY_AFFINITY_DOMAIN|BY_COUNTS|BY_COUNTS_LIST_END|EQUALLY|FAILED|MAX_SUB_DEVICES|PROPERTIES|TYPE)|PIPE_MAX_(?:ACTIVE_RESERVATIONS|PACKET_SIZE)|PLATFORM|PREFERRED_(?:GLOBAL_ATOMIC_ALIGNMENT|INTEROP_USER_SYNC|LOCAL_ATOMIC_ALIGNMENT|PLATFORM_ATOMIC_ALIGNMENT|VECTOR_WIDTH_(?:CHAR|DOUBLE|FLOAT|HALF|INT|LONG|SHORT))|PRINTF_BUFFER_SIZE|PROFILE|PROFILING_TIMER_RESOLUTION|QUEUE_(?:ON_(?:DEVICE_(?:MAX_SIZE|PREFERRED_SIZE|PROPERTIES)|HOST_PROPERTIES)|PROPERTIES)|REFERENCE_COUNT|SINGLE_FP_CONFIG|SUB_GROUP_INDEPENDENT_FORWARD_PROGRESS|SVM_(?:ATOMICS|CAPABILITIES|COARSE_GRAIN_BUFFER|FINE_GRAIN_BUFFER|FINE_GRAIN_SYSTEM)|TYPE(?:_ACCELERATOR|_ALL|_CPU|_CUSTOM|_DEFAULT|_GPU)?|VENDOR(?:_ID)?|VERSION)|DRIVER_VERSION|EVENT_(?:COMMAND_(?:EXECUTION_STATUS|QUEUE|TYPE)|CONTEXT|REFERENCE_COUNT)|EXEC_(?:KERNEL|NATIVE_KERNEL|STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST)|FILTER_(?:LINEAR|NEAREST)|FLOAT|FP_(?:CORRECTLY_ROUNDED_DIVIDE_SQRT|DENORM|FMA|INF_NAN|ROUND_TO_INF|ROUND_TO_NEAREST|ROUND_TO_ZERO|SOFT_FLOAT)|GLOBAL|HALF_FLOAT|IMAGE_(?:ARRAY_SIZE|BUFFER|DEPTH|ELEMENT_SIZE|FORMAT|FORMAT_MISMATCH|FORMAT_NOT_SUPPORTED|HEIGHT|NUM_MIP_LEVELS|NUM_SAMPLES|ROW_PITCH|SLICE_PITCH|WIDTH)|INTENSITY|INVALID_(?:ARG_INDEX|ARG_SIZE|ARG_VALUE|BINARY|BUFFER_SIZE|BUILD_OPTIONS|COMMAND_QUEUE|COMPILER_OPTIONS|CONTEXT|DEVICE|DEVICE_PARTITION_COUNT|DEVICE_QUEUE|DEVICE_TYPE|EVENT|EVENT_WAIT_LIST|GLOBAL_OFFSET|GLOBAL_WORK_SIZE|GL_OBJECT|HOST_PTR|IMAGE_DESCRIPTOR|IMAGE_FORMAT_DESCRIPTOR|IMAGE_SIZE|KERNEL|KERNEL_ARGS|KERNEL_DEFINITION|KERNEL_NAME|LINKER_OPTIONS|MEM_OBJECT|MIP_LEVEL|OPERATION|PIPE_SIZE|PLATFORM|PROGRAM|PROGRAM_EXECUTABLE|PROPERTY|QUEUE_PROPERTIES|SAMPLER|VALUE|WORK_DIMENSION|WORK_GROUP_SIZE|WORK_ITEM_SIZE)|KERNEL_(?:ARG_(?:ACCESS_(?:NONE|QUALIFIER|READ_ONLY|READ_WRITE|WRITE_ONLY)|ADDRESS_(?:CONSTANT|GLOBAL|LOCAL|PRIVATE|QUALIFIER)|INFO_NOT_AVAILABLE|NAME|TYPE_(?:CONST|NAME|NONE|PIPE|QUALIFIER|RESTRICT|VOLATILE))|ATTRIBUTES|COMPILE_NUM_SUB_GROUPS|COMPILE_WORK_GROUP_SIZE|CONTEXT|EXEC_INFO_SVM_FINE_GRAIN_SYSTEM|EXEC_INFO_SVM_PTRS|FUNCTION_NAME|GLOBAL_WORK_SIZE|LOCAL_MEM_SIZE|LOCAL_SIZE_FOR_SUB_GROUP_COUNT|MAX_NUM_SUB_GROUPS|MAX_SUB_GROUP_SIZE_FOR_NDRANGE|NUM_ARGS|PREFERRED_WORK_GROUP_SIZE_MULTIPLE|PRIVATE_MEM_SIZE|PROGRAM|REFERENCE_COUNT|SUB_GROUP_COUNT_FOR_NDRANGE|WORK_GROUP_SIZE)|LINKER_NOT_AVAILABLE|LINK_PROGRAM_FAILURE|LOCAL|LUMINANCE|MAP_(?:FAILURE|READ|WRITE|WRITE_INVALIDATE_REGION)|MEM_(?:ALLOC_HOST_PTR|ASSOCIATED_MEMOBJECT|CONTEXT|COPY_HOST_PTR|COPY_OVERLAP|FLAGS|HOST_NO_ACCESS|HOST_PTR|HOST_READ_ONLY|HOST_WRITE_ONLY|KERNEL_READ_AND_WRITE|MAP_COUNT|OBJECT_(?:ALLOCATION_FAILURE|BUFFER|IMAGE1D|IMAGE1D_ARRAY|IMAGE1D_BUFFER|IMAGE2D|IMAGE2D_ARRAY|IMAGE3D|PIPE)|OFFSET|READ_ONLY|READ_WRITE|REFERENCE_COUNT|SIZE|SVM_ATOMICS|SVM_FINE_GRAIN_BUFFER|TYPE|USES_SVM_POINTER|USE_HOST_PTR|WRITE_ONLY)|MIGRATE_MEM_OBJECT_(?:CONTENT_UNDEFINED|HOST)|MISALIGNED_SUB_BUFFER_OFFSET|NONE|NON_BLOCKING|OUT_OF_(?:HOST_MEMORY|RESOURCES)|PIPE_(?:MAX_PACKETS|PACKET_SIZE)|PLATFORM_(?:EXTENSIONS|HOST_TIMER_RESOLUTION|NAME|PROFILE|VENDOR|VERSION)|PROFILING_(?:COMMAND_(?:COMPLETE|END|QUEUED|START|SUBMIT)|INFO_NOT_AVAILABLE)|PROGRAM_(?:BINARIES|BINARY_SIZES|BINARY_TYPE(?:_COMPILED_OBJECT|_EXECUTABLE|_LIBRARY|_NONE)?|BUILD_(?:GLOBAL_VARIABLE_TOTAL_SIZE|LOG|OPTIONS|STATUS)|CONTEXT|DEVICES|IL|KERNEL_NAMES|NUM_DEVICES|NUM_KERNELS|REFERENCE_COUNT|SOURCE)|QUEUED|QUEUE_(?:CONTEXT|DEVICE|DEVICE_DEFAULT|ON_DEVICE|ON_DEVICE_DEFAULT|OUT_OF_ORDER_EXEC_MODE_ENABLE|PROFILING_ENABLE|PROPERTIES|REFERENCE_COUNT|SIZE)|R|RA|READ_(?:ONLY|WRITE)_CACHE|RG|RGB|RGBA|RGBx|RGx|RUNNING|Rx|SAMPLER_(?:ADDRESSING_MODE|CONTEXT|FILTER_MODE|LOD_MAX|LOD_MIN|MIP_FILTER_MODE|NORMALIZED_COORDS|REFERENCE_COUNT)|(?:UN)?SIGNED_INT(?:8|16|32)|SNORM_INT(?:8|16)|SUBMITTED|SUCCESS|UNORM_INT(?:8|16|24|_101010|_101010_2)|UNORM_SHORT_(?:555|565)|VERSION_(?:1_0|1_1|1_2|2_0|2_1)|sBGRA|sRGB|sRGBA|sRGBx)\\b/,\n        alias: 'constant'\n      },\n      // Extracted from cl.h (2.0) and http://streamcomputing.eu/downloads/?opencl_host.lang (opencl-host)\n      'function-opencl-host': {\n        pattern:\n          /\\bcl(?:BuildProgram|CloneKernel|CompileProgram|Create(?:Buffer|CommandQueue(?:WithProperties)?|Context|ContextFromType|Image|Image2D|Image3D|Kernel|KernelsInProgram|Pipe|ProgramWith(?:Binary|BuiltInKernels|IL|Source)|Sampler|SamplerWithProperties|SubBuffer|SubDevices|UserEvent)|Enqueue(?:(?:Barrier|Marker)(?:WithWaitList)?|Copy(?:Buffer(?:Rect|ToImage)?|Image(?:ToBuffer)?)|(?:Fill|Map)(?:Buffer|Image)|MigrateMemObjects|NDRangeKernel|NativeKernel|(?:Read|Write)(?:Buffer(?:Rect)?|Image)|SVM(?:Free|Map|MemFill|Memcpy|MigrateMem|Unmap)|Task|UnmapMemObject|WaitForEvents)|Finish|Flush|Get(?:CommandQueueInfo|ContextInfo|Device(?:AndHostTimer|IDs|Info)|Event(?:Profiling)?Info|ExtensionFunctionAddress(?:ForPlatform)?|HostTimer|ImageInfo|Kernel(?:ArgInfo|Info|SubGroupInfo|WorkGroupInfo)|MemObjectInfo|PipeInfo|Platform(?:IDs|Info)|Program(?:Build)?Info|SamplerInfo|SupportedImageFormats)|LinkProgram|(?:Release|Retain)(?:CommandQueue|Context|Device|Event|Kernel|MemObject|Program|Sampler)|SVM(?:Alloc|Free)|Set(?:CommandQueueProperty|DefaultDeviceCommandQueue|EventCallback|Kernel|Kernel(?:Arg(?:SVMPointer)?|ExecInfo)|MemObjectDestructorCallback|UserEventStatus)|Unload(?:Platform)?Compiler|WaitForEvents)\\b/,\n        alias: 'function'\n      }\n    }\n    /* OpenCL host API */\n    Prism.languages.insertBefore('c', 'keyword', attributes) // C++ includes everything from the OpenCL C host API plus the classes defined in cl2.h\n    if (Prism.languages.cpp) {\n      // Extracted from doxygen class list http://github.khronos.org/OpenCL-CLHPP/annotated.html\n      attributes['type-opencl-host-cpp'] = {\n        pattern:\n          /\\b(?:Buffer|BufferGL|BufferRenderGL|CommandQueue|Context|Device|DeviceCommandQueue|EnqueueArgs|Event|Image|Image1D|Image1DArray|Image1DBuffer|Image2D|Image2DArray|Image2DGL|Image3D|Image3DGL|ImageFormat|ImageGL|Kernel|KernelFunctor|LocalSpaceArg|Memory|NDRange|Pipe|Platform|Program|SVMAllocator|SVMTraitAtomic|SVMTraitCoarse|SVMTraitFine|SVMTraitReadOnly|SVMTraitReadWrite|SVMTraitWriteOnly|Sampler|UserEvent)\\b/,\n        alias: 'keyword'\n      }\n      Prism.languages.insertBefore('cpp', 'keyword', attributes)\n    }\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = openqasm\nopenqasm.displayName = 'openqasm'\nopenqasm.aliases = ['qasm']\nfunction openqasm(Prism) {\n  // https://qiskit.github.io/openqasm/grammar/index.html\n  Prism.languages.openqasm = {\n    comment: /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*/,\n    string: {\n      pattern: /\"[^\"\\r\\n\\t]*\"|'[^'\\r\\n\\t]*'/,\n      greedy: true\n    },\n    keyword:\n      /\\b(?:CX|OPENQASM|U|barrier|boxas|boxto|break|const|continue|ctrl|def|defcal|defcalgrammar|delay|else|end|for|gate|gphase|if|in|include|inv|kernel|lengthof|let|measure|pow|reset|return|rotary|stretchinf|while)\\b|#pragma\\b/,\n    'class-name':\n      /\\b(?:angle|bit|bool|creg|fixed|float|int|length|qreg|qubit|stretch|uint)\\b/,\n    function: /\\b(?:cos|exp|ln|popcount|rotl|rotr|sin|sqrt|tan)\\b(?=\\s*\\()/,\n    constant: /\\b(?:euler|pi|tau)\\b|π|𝜏|ℇ/,\n    number: {\n      pattern:\n        /(^|[^.\\w$])(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?(?:dt|ns|us|µs|ms|s)?/i,\n      lookbehind: true\n    },\n    operator: /->|>>=?|<<=?|&&|\\|\\||\\+\\+|--|[!=<>&|~^+\\-*/%]=?|@/,\n    punctuation: /[(){}\\[\\];,:.]/\n  }\n  Prism.languages.qasm = Prism.languages.openqasm\n}\n","'use strict'\n\nmodule.exports = oz\noz.displayName = 'oz'\noz.aliases = []\nfunction oz(Prism) {\n  Prism.languages.oz = {\n    comment: {\n      pattern: /\\/\\*[\\s\\S]*?\\*\\/|%.*/,\n      greedy: true\n    },\n    string: {\n      pattern: /\"(?:[^\"\\\\]|\\\\[\\s\\S])*\"/,\n      greedy: true\n    },\n    atom: {\n      pattern: /'(?:[^'\\\\]|\\\\[\\s\\S])*'/,\n      greedy: true,\n      alias: 'builtin'\n    },\n    keyword:\n      /\\$|\\[\\]|\\b(?:_|at|attr|case|catch|choice|class|cond|declare|define|dis|else(?:case|if)?|end|export|fail|false|feat|finally|from|fun|functor|if|import|in|local|lock|meth|nil|not|of|or|prepare|proc|prop|raise|require|self|skip|then|thread|true|try|unit)\\b/,\n    function: [\n      /\\b[a-z][A-Za-z\\d]*(?=\\()/,\n      {\n        pattern: /(\\{)[A-Z][A-Za-z\\d]*\\b/,\n        lookbehind: true\n      }\n    ],\n    number:\n      /\\b(?:0[bx][\\da-f]+|\\d+(?:\\.\\d*)?(?:e~?\\d+)?)\\b|&(?:[^\\\\]|\\\\(?:\\d{3}|.))/i,\n    variable: /`(?:[^`\\\\]|\\\\.)+`/,\n    'attr-name': /\\b\\w+(?=[ \\t]*:(?![:=]))/,\n    operator:\n      /:(?:=|::?)|<[-:=]?|=(?:=|<?:?)|>=?:?|\\\\=:?|!!?|[|#+\\-*\\/,~^@]|\\b(?:andthen|div|mod|orelse)\\b/,\n    punctuation: /[\\[\\](){}.:;?]/\n  }\n}\n","'use strict'\n\nmodule.exports = parigp\nparigp.displayName = 'parigp'\nparigp.aliases = []\nfunction parigp(Prism) {\n  Prism.languages.parigp = {\n    comment: /\\/\\*[\\s\\S]*?\\*\\/|\\\\\\\\.*/,\n    string: {\n      pattern: /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"/,\n      greedy: true\n    },\n    // PARI/GP does not care about white spaces at all\n    // so let's process the keywords to build an appropriate regexp\n    // (e.g. \"b *r *e *a *k\", etc.)\n    keyword: (function () {\n      var keywords = [\n        'breakpoint',\n        'break',\n        'dbg_down',\n        'dbg_err',\n        'dbg_up',\n        'dbg_x',\n        'forcomposite',\n        'fordiv',\n        'forell',\n        'forpart',\n        'forprime',\n        'forstep',\n        'forsubgroup',\n        'forvec',\n        'for',\n        'iferr',\n        'if',\n        'local',\n        'my',\n        'next',\n        'return',\n        'until',\n        'while'\n      ]\n      keywords = keywords\n        .map(function (keyword) {\n          return keyword.split('').join(' *')\n        })\n        .join('|')\n      return RegExp('\\\\b(?:' + keywords + ')\\\\b')\n    })(),\n    function: /\\b\\w(?:[\\w ]*\\w)?(?= *\\()/,\n    number: {\n      // The lookbehind and the negative lookahead prevent from breaking the .. operator\n      pattern:\n        /((?:\\. *\\. *)?)(?:\\b\\d(?: *\\d)*(?: *(?!\\. *\\.)\\.(?: *\\d)*)?|\\. *\\d(?: *\\d)*)(?: *e *(?:[+-] *)?\\d(?: *\\d)*)?/i,\n      lookbehind: true\n    },\n    operator:\n      /\\. *\\.|[*\\/!](?: *=)?|%(?: *=|(?: *#)?(?: *')*)?|\\+(?: *[+=])?|-(?: *[-=>])?|<(?: *>|(?: *<)?(?: *=)?)?|>(?: *>)?(?: *=)?|=(?: *=){0,2}|\\\\(?: *\\/)?(?: *=)?|&(?: *&)?|\\| *\\||['#~^]/,\n    punctuation: /[\\[\\]{}().,:;|]/\n  }\n}\n","'use strict'\n\nmodule.exports = parser\nparser.displayName = 'parser'\nparser.aliases = []\nfunction parser(Prism) {\n  ;(function (Prism) {\n    var parser = (Prism.languages.parser = Prism.languages.extend('markup', {\n      keyword: {\n        pattern:\n          /(^|[^^])(?:\\^(?:case|eval|for|if|switch|throw)\\b|@(?:BASE|CLASS|GET(?:_DEFAULT)?|OPTIONS|SET_DEFAULT|USE)\\b)/,\n        lookbehind: true\n      },\n      variable: {\n        pattern: /(^|[^^])\\B\\$(?:\\w+|(?=[.{]))(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\.|:+/\n        }\n      },\n      function: {\n        pattern: /(^|[^^])\\B[@^]\\w+(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,\n        lookbehind: true,\n        inside: {\n          keyword: {\n            pattern: /(^@)(?:GET_|SET_)/,\n            lookbehind: true\n          },\n          punctuation: /\\.|:+/\n        }\n      },\n      escape: {\n        pattern: /\\^(?:[$^;@()\\[\\]{}\"':]|#[a-f\\d]*)/i,\n        alias: 'builtin'\n      },\n      punctuation: /[\\[\\](){};]/\n    }))\n    parser = Prism.languages.insertBefore('parser', 'keyword', {\n      'parser-comment': {\n        pattern: /(\\s)#.*/,\n        lookbehind: true,\n        alias: 'comment'\n      },\n      expression: {\n        // Allow for 3 levels of depth\n        pattern: /(^|[^^])\\((?:[^()]|\\((?:[^()]|\\((?:[^()])*\\))*\\))*\\)/,\n        greedy: true,\n        lookbehind: true,\n        inside: {\n          string: {\n            pattern: /(^|[^^])([\"'])(?:(?!\\2)[^^]|\\^[\\s\\S])*\\2/,\n            lookbehind: true\n          },\n          keyword: parser.keyword,\n          variable: parser.variable,\n          function: parser.function,\n          boolean: /\\b(?:false|true)\\b/,\n          number: /\\b(?:0x[a-f\\d]+|\\d+(?:\\.\\d*)?(?:e[+-]?\\d+)?)\\b/i,\n          escape: parser.escape,\n          operator:\n            /[~+*\\/\\\\%]|!(?:\\|\\|?|=)?|&&?|\\|\\|?|==|<[<=]?|>[>=]?|-[fd]?|\\b(?:def|eq|ge|gt|in|is|le|lt|ne)\\b/,\n          punctuation: parser.punctuation\n        }\n      }\n    })\n    Prism.languages.insertBefore(\n      'inside',\n      'punctuation',\n      {\n        expression: parser.expression,\n        keyword: parser.keyword,\n        variable: parser.variable,\n        function: parser.function,\n        escape: parser.escape,\n        'parser-punctuation': {\n          pattern: parser.punctuation,\n          alias: 'punctuation'\n        }\n      },\n      parser['tag'].inside['attr-value']\n    )\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = pascal\npascal.displayName = 'pascal'\npascal.aliases = ['objectpascal']\nfunction pascal(Prism) {\n  // Based on Free Pascal\n  /* TODO\nSupport inline asm ?\n*/\n  Prism.languages.pascal = {\n    directive: {\n      pattern: /\\{\\$[\\s\\S]*?\\}/,\n      greedy: true,\n      alias: ['marco', 'property']\n    },\n    comment: {\n      pattern: /\\(\\*[\\s\\S]*?\\*\\)|\\{[\\s\\S]*?\\}|\\/\\/.*/,\n      greedy: true\n    },\n    string: {\n      pattern: /(?:'(?:''|[^'\\r\\n])*'(?!')|#[&$%]?[a-f\\d]+)+|\\^[a-z]/i,\n      greedy: true\n    },\n    asm: {\n      pattern: /(\\basm\\b)[\\s\\S]+?(?=\\bend\\s*[;[])/i,\n      lookbehind: true,\n      greedy: true,\n      inside: null // see below\n    },\n    keyword: [\n      {\n        // Turbo Pascal\n        pattern:\n          /(^|[^&])\\b(?:absolute|array|asm|begin|case|const|constructor|destructor|do|downto|else|end|file|for|function|goto|if|implementation|inherited|inline|interface|label|nil|object|of|operator|packed|procedure|program|record|reintroduce|repeat|self|set|string|then|to|type|unit|until|uses|var|while|with)\\b/i,\n        lookbehind: true\n      },\n      {\n        // Free Pascal\n        pattern: /(^|[^&])\\b(?:dispose|exit|false|new|true)\\b/i,\n        lookbehind: true\n      },\n      {\n        // Object Pascal\n        pattern:\n          /(^|[^&])\\b(?:class|dispinterface|except|exports|finalization|finally|initialization|inline|library|on|out|packed|property|raise|resourcestring|threadvar|try)\\b/i,\n        lookbehind: true\n      },\n      {\n        // Modifiers\n        pattern:\n          /(^|[^&])\\b(?:absolute|abstract|alias|assembler|bitpacked|break|cdecl|continue|cppdecl|cvar|default|deprecated|dynamic|enumerator|experimental|export|external|far|far16|forward|generic|helper|implements|index|interrupt|iochecks|local|message|name|near|nodefault|noreturn|nostackframe|oldfpccall|otherwise|overload|override|pascal|platform|private|protected|public|published|read|register|reintroduce|result|safecall|saveregisters|softfloat|specialize|static|stdcall|stored|strict|unaligned|unimplemented|varargs|virtual|write)\\b/i,\n        lookbehind: true\n      }\n    ],\n    number: [\n      // Hexadecimal, octal and binary\n      /(?:[&%]\\d+|\\$[a-f\\d]+)/i, // Decimal\n      /\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?/i\n    ],\n    operator: [\n      /\\.\\.|\\*\\*|:=|<[<=>]?|>[>=]?|[+\\-*\\/]=?|[@^=]/,\n      {\n        pattern:\n          /(^|[^&])\\b(?:and|as|div|exclude|in|include|is|mod|not|or|shl|shr|xor)\\b/,\n        lookbehind: true\n      }\n    ],\n    punctuation: /\\(\\.|\\.\\)|[()\\[\\]:;,.]/\n  }\n  Prism.languages.pascal.asm.inside = Prism.languages.extend('pascal', {\n    asm: undefined,\n    keyword: undefined,\n    operator: undefined\n  })\n  Prism.languages.objectpascal = Prism.languages.pascal\n}\n","'use strict'\n\nmodule.exports = pascaligo\npascaligo.displayName = 'pascaligo'\npascaligo.aliases = []\nfunction pascaligo(Prism) {\n  ;(function (Prism) {\n    // Pascaligo is a layer 2 smart contract language for the tezos blockchain\n    var braces = /\\((?:[^()]|\\((?:[^()]|\\([^()]*\\))*\\))*\\)/.source\n    var type = /(?:\\b\\w+(?:<braces>)?|<braces>)/.source.replace(\n      /<braces>/g,\n      function () {\n        return braces\n      }\n    )\n    var pascaligo = (Prism.languages.pascaligo = {\n      comment: /\\(\\*[\\s\\S]+?\\*\\)|\\/\\/.*/,\n      string: {\n        pattern: /([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|\\^[a-z]/i,\n        greedy: true\n      },\n      'class-name': [\n        {\n          pattern: RegExp(\n            /(\\btype\\s+\\w+\\s+is\\s+)<type>/.source.replace(\n              /<type>/g,\n              function () {\n                return type\n              }\n            ),\n            'i'\n          ),\n          lookbehind: true,\n          inside: null // see below\n        },\n        {\n          pattern: RegExp(\n            /<type>(?=\\s+is\\b)/.source.replace(/<type>/g, function () {\n              return type\n            }),\n            'i'\n          ),\n          inside: null // see below\n        },\n        {\n          pattern: RegExp(\n            /(:\\s*)<type>/.source.replace(/<type>/g, function () {\n              return type\n            })\n          ),\n          lookbehind: true,\n          inside: null // see below\n        }\n      ],\n      keyword: {\n        pattern:\n          /(^|[^&])\\b(?:begin|block|case|const|else|end|fail|for|from|function|if|is|nil|of|remove|return|skip|then|type|var|while|with)\\b/i,\n        lookbehind: true\n      },\n      boolean: {\n        pattern: /(^|[^&])\\b(?:False|True)\\b/i,\n        lookbehind: true\n      },\n      builtin: {\n        pattern: /(^|[^&])\\b(?:bool|int|list|map|nat|record|string|unit)\\b/i,\n        lookbehind: true\n      },\n      function: /\\b\\w+(?=\\s*\\()/,\n      number: [\n        // Hexadecimal, octal and binary\n        /%[01]+|&[0-7]+|\\$[a-f\\d]+/i, // Decimal\n        /\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?(?:mtz|n)?/i\n      ],\n      operator:\n        /->|=\\/=|\\.\\.|\\*\\*|:=|<[<=>]?|>[>=]?|[+\\-*\\/]=?|[@^=|]|\\b(?:and|mod|or)\\b/,\n      punctuation: /\\(\\.|\\.\\)|[()\\[\\]:;,.{}]/\n    })\n    var classNameInside = [\n      'comment',\n      'keyword',\n      'builtin',\n      'operator',\n      'punctuation'\n    ].reduce(function (accum, key) {\n      accum[key] = pascaligo[key]\n      return accum\n    }, {})\n    pascaligo['class-name'].forEach(function (p) {\n      p.inside = classNameInside\n    })\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = pcaxis\npcaxis.displayName = 'pcaxis'\npcaxis.aliases = ['px']\nfunction pcaxis(Prism) {\n  Prism.languages.pcaxis = {\n    string: /\"[^\"]*\"/,\n    keyword: {\n      pattern:\n        /((?:^|;)\\s*)[-A-Z\\d]+(?:\\s*\\[[-\\w]+\\])?(?:\\s*\\(\"[^\"]*\"(?:,\\s*\"[^\"]*\")*\\))?(?=\\s*=)/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        keyword: /^[-A-Z\\d]+/,\n        language: {\n          pattern: /^(\\s*)\\[[-\\w]+\\]/,\n          lookbehind: true,\n          inside: {\n            punctuation: /^\\[|\\]$/,\n            property: /[-\\w]+/\n          }\n        },\n        'sub-key': {\n          pattern: /^(\\s*)\\S[\\s\\S]*/,\n          lookbehind: true,\n          inside: {\n            parameter: {\n              pattern: /\"[^\"]*\"/,\n              alias: 'property'\n            },\n            punctuation: /^\\(|\\)$|,/\n          }\n        }\n      }\n    },\n    operator: /=/,\n    tlist: {\n      pattern:\n        /TLIST\\s*\\(\\s*\\w+(?:(?:\\s*,\\s*\"[^\"]*\")+|\\s*,\\s*\"[^\"]*\"-\"[^\"]*\")?\\s*\\)/,\n      greedy: true,\n      inside: {\n        function: /^TLIST/,\n        property: {\n          pattern: /^(\\s*\\(\\s*)\\w+/,\n          lookbehind: true\n        },\n        string: /\"[^\"]*\"/,\n        punctuation: /[(),]/,\n        operator: /-/\n      }\n    },\n    punctuation: /[;,]/,\n    number: {\n      pattern: /(^|\\s)\\d+(?:\\.\\d+)?(?!\\S)/,\n      lookbehind: true\n    },\n    boolean: /NO|YES/\n  }\n  Prism.languages.px = Prism.languages.pcaxis\n}\n","'use strict'\n\nmodule.exports = peoplecode\npeoplecode.displayName = 'peoplecode'\npeoplecode.aliases = ['pcode']\nfunction peoplecode(Prism) {\n  Prism.languages.peoplecode = {\n    comment: RegExp(\n      [\n        // C-style multiline comments\n        /\\/\\*[\\s\\S]*?\\*\\//.source, // REM comments\n        /\\bREM[^;]*;/.source, // Nested <* *> comments\n        /<\\*(?:[^<*]|\\*(?!>)|<(?!\\*)|<\\*(?:(?!\\*>)[\\s\\S])*\\*>)*\\*>/.source, // /+ +/ comments\n        /\\/\\+[\\s\\S]*?\\+\\//.source\n      ].join('|')\n    ),\n    string: {\n      pattern: /'(?:''|[^'\\r\\n])*'(?!')|\"(?:\"\"|[^\"\\r\\n])*\"(?!\")/,\n      greedy: true\n    },\n    variable: /%\\w+/,\n    'function-definition': {\n      pattern: /((?:^|[^\\w-])(?:function|method)\\s+)\\w+/i,\n      lookbehind: true,\n      alias: 'function'\n    },\n    'class-name': {\n      pattern:\n        /((?:^|[^-\\w])(?:as|catch|class|component|create|extends|global|implements|instance|local|of|property|returns)\\s+)\\w+(?::\\w+)*/i,\n      lookbehind: true,\n      inside: {\n        punctuation: /:/\n      }\n    },\n    keyword:\n      /\\b(?:abstract|alias|as|catch|class|component|constant|create|declare|else|end-(?:class|evaluate|for|function|get|if|method|set|try|while)|evaluate|extends|for|function|get|global|if|implements|import|instance|library|local|method|null|of|out|peopleCode|private|program|property|protected|readonly|ref|repeat|returns?|set|step|then|throw|to|try|until|value|when(?:-other)?|while)\\b/i,\n    'operator-keyword': {\n      pattern: /\\b(?:and|not|or)\\b/i,\n      alias: 'operator'\n    },\n    function: /[_a-z]\\w*(?=\\s*\\()/i,\n    boolean: /\\b(?:false|true)\\b/i,\n    number: /\\b\\d+(?:\\.\\d+)?\\b/,\n    operator: /<>|[<>]=?|!=|\\*\\*|[-+*/|=@]/,\n    punctuation: /[:.;,()[\\]]/\n  }\n  Prism.languages.pcode = Prism.languages.peoplecode\n}\n","'use strict'\n\nmodule.exports = perl\nperl.displayName = 'perl'\nperl.aliases = []\nfunction perl(Prism) {\n  ;(function (Prism) {\n    var brackets =\n      /(?:\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)|\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}|\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\]|<(?:[^<>\\\\]|\\\\[\\s\\S])*>)/\n        .source\n    Prism.languages.perl = {\n      comment: [\n        {\n          // POD\n          pattern: /(^\\s*)=\\w[\\s\\S]*?=cut.*/m,\n          lookbehind: true,\n          greedy: true\n        },\n        {\n          pattern: /(^|[^\\\\$])#.*/,\n          lookbehind: true,\n          greedy: true\n        }\n      ],\n      // TODO Could be nice to handle Heredoc too.\n      string: [\n        {\n          pattern: RegExp(\n            /\\b(?:q|qq|qw|qx)(?![a-zA-Z0-9])\\s*/.source +\n              '(?:' +\n              [\n                // q/.../\n                /([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/.source, // q a...a\n                // eslint-disable-next-line regexp/strict\n                /([a-zA-Z0-9])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2/.source, // q(...)\n                // q{...}\n                // q[...]\n                // q<...>\n                brackets\n              ].join('|') +\n              ')'\n          ),\n          greedy: true\n        }, // \"...\", `...`\n        {\n          pattern: /(\"|`)(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n          greedy: true\n        }, // '...'\n        // FIXME Multi-line single-quoted strings are not supported as they would break variables containing '\n        {\n          pattern: /'(?:[^'\\\\\\r\\n]|\\\\.)*'/,\n          greedy: true\n        }\n      ],\n      regex: [\n        {\n          pattern: RegExp(\n            /\\b(?:m|qr)(?![a-zA-Z0-9])\\s*/.source +\n              '(?:' +\n              [\n                // m/.../\n                /([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/.source, // m a...a\n                // eslint-disable-next-line regexp/strict\n                /([a-zA-Z0-9])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2/.source, // m(...)\n                // m{...}\n                // m[...]\n                // m<...>\n                brackets\n              ].join('|') +\n              ')' +\n              /[msixpodualngc]*/.source\n          ),\n          greedy: true\n        }, // The lookbehinds prevent -s from breaking\n        {\n          pattern: RegExp(\n            /(^|[^-])\\b(?:s|tr|y)(?![a-zA-Z0-9])\\s*/.source +\n              '(?:' +\n              [\n                // s/.../.../\n                // eslint-disable-next-line regexp/strict\n                /([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2/\n                  .source, // s a...a...a\n                // eslint-disable-next-line regexp/strict\n                /([a-zA-Z0-9])(?:(?!\\3)[^\\\\]|\\\\[\\s\\S])*\\3(?:(?!\\3)[^\\\\]|\\\\[\\s\\S])*\\3/\n                  .source, // s(...)(...)\n                // s{...}{...}\n                // s[...][...]\n                // s<...><...>\n                // s(...)[...]\n                brackets + /\\s*/.source + brackets\n              ].join('|') +\n              ')' +\n              /[msixpodualngcer]*/.source\n          ),\n          lookbehind: true,\n          greedy: true\n        }, // /.../\n        // The look-ahead tries to prevent two divisions on\n        // the same line from being highlighted as regex.\n        // This does not support multi-line regex.\n        {\n          pattern:\n            /\\/(?:[^\\/\\\\\\r\\n]|\\\\.)*\\/[msixpodualngc]*(?=\\s*(?:$|[\\r\\n,.;})&|\\-+*~<>!?^]|(?:and|cmp|eq|ge|gt|le|lt|ne|not|or|x|xor)\\b))/,\n          greedy: true\n        }\n      ],\n      // FIXME Not sure about the handling of ::, ', and #\n      variable: [\n        // ${^POSTMATCH}\n        /[&*$@%]\\{\\^[A-Z]+\\}/, // $^V\n        /[&*$@%]\\^[A-Z_]/, // ${...}\n        /[&*$@%]#?(?=\\{)/, // $foo\n        /[&*$@%]#?(?:(?:::)*'?(?!\\d)[\\w$]+(?![\\w$]))+(?:::)*/, // $1\n        /[&*$@%]\\d+/, // $_, @_, %!\n        // The negative lookahead prevents from breaking the %= operator\n        /(?!%=)[$@%][!\"#$%&'()*+,\\-.\\/:;<=>?@[\\\\\\]^_`{|}~]/\n      ],\n      filehandle: {\n        // <>, <FOO>, _\n        pattern: /<(?![<=])\\S*?>|\\b_\\b/,\n        alias: 'symbol'\n      },\n      'v-string': {\n        // v1.2, 1.2.3\n        pattern: /v\\d+(?:\\.\\d+)*|\\d+(?:\\.\\d+){2,}/,\n        alias: 'string'\n      },\n      function: {\n        pattern: /(\\bsub[ \\t]+)\\w+/,\n        lookbehind: true\n      },\n      keyword:\n        /\\b(?:any|break|continue|default|delete|die|do|else|elsif|eval|for|foreach|given|goto|if|last|local|my|next|our|package|print|redo|require|return|say|state|sub|switch|undef|unless|until|use|when|while)\\b/,\n      number:\n        /\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0b[01](?:_?[01])*|(?:(?:\\d(?:_?\\d)*)?\\.)?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)\\b/,\n      operator:\n        /-[rwxoRWXOezsfdlpSbctugkTBMAC]\\b|\\+[+=]?|-[-=>]?|\\*\\*?=?|\\/\\/?=?|=[=~>]?|~[~=]?|\\|\\|?=?|&&?=?|<(?:=>?|<=?)?|>>?=?|![~=]?|[%^]=?|\\.(?:=|\\.\\.?)?|[\\\\?]|\\bx(?:=|\\b)|\\b(?:and|cmp|eq|ge|gt|le|lt|ne|not|or|xor)\\b/,\n      punctuation: /[{}[\\];(),:]/\n    }\n  })(Prism)\n}\n","'use strict'\nvar refractorPhp = require('./php.js')\nmodule.exports = phpExtras\nphpExtras.displayName = 'phpExtras'\nphpExtras.aliases = []\nfunction phpExtras(Prism) {\n  Prism.register(refractorPhp)\n  Prism.languages.insertBefore('php', 'variable', {\n    this: {\n      pattern: /\\$this\\b/,\n      alias: 'keyword'\n    },\n    global:\n      /\\$(?:GLOBALS|HTTP_RAW_POST_DATA|_(?:COOKIE|ENV|FILES|GET|POST|REQUEST|SERVER|SESSION)|argc|argv|http_response_header|php_errormsg)\\b/,\n    scope: {\n      pattern: /\\b[\\w\\\\]+::/,\n      inside: {\n        keyword: /\\b(?:parent|self|static)\\b/,\n        punctuation: /::|\\\\/\n      }\n    }\n  })\n}\n","'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = php\nphp.displayName = 'php'\nphp.aliases = []\nfunction php(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  /**\n   * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\n   * Modified by Miles Johnson: http://milesj.me\n   * Rewritten by Tom Pavelec\n   *\n   * Supports PHP 5.3 - 8.0\n   */\n  ;(function (Prism) {\n    var comment = /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*|#(?!\\[).*/\n    var constant = [\n      {\n        pattern: /\\b(?:false|true)\\b/i,\n        alias: 'boolean'\n      },\n      {\n        pattern: /(::\\s*)\\b[a-z_]\\w*\\b(?!\\s*\\()/i,\n        greedy: true,\n        lookbehind: true\n      },\n      {\n        pattern: /(\\b(?:case|const)\\s+)\\b[a-z_]\\w*(?=\\s*[;=])/i,\n        greedy: true,\n        lookbehind: true\n      },\n      /\\b(?:null)\\b/i,\n      /\\b[A-Z_][A-Z0-9_]*\\b(?!\\s*\\()/\n    ]\n    var number =\n      /\\b0b[01]+(?:_[01]+)*\\b|\\b0o[0-7]+(?:_[0-7]+)*\\b|\\b0x[\\da-f]+(?:_[\\da-f]+)*\\b|(?:\\b\\d+(?:_\\d+)*\\.?(?:\\d+(?:_\\d+)*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i\n    var operator =\n      /<?=>|\\?\\?=?|\\.{3}|\\??->|[!=]=?=?|::|\\*\\*=?|--|\\+\\+|&&|\\|\\||<<|>>|[?~]|[/^|%*&<>.+-]=?/\n    var punctuation = /[{}\\[\\](),:;]/\n    Prism.languages.php = {\n      delimiter: {\n        pattern: /\\?>$|^<\\?(?:php(?=\\s)|=)?/i,\n        alias: 'important'\n      },\n      comment: comment,\n      variable: /\\$+(?:\\w+\\b|(?=\\{))/,\n      package: {\n        pattern:\n          /(namespace\\s+|use\\s+(?:function\\s+)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      },\n      'class-name-definition': {\n        pattern: /(\\b(?:class|enum|interface|trait)\\s+)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n        lookbehind: true,\n        alias: 'class-name'\n      },\n      'function-definition': {\n        pattern: /(\\bfunction\\s+)[a-z_]\\w*(?=\\s*\\()/i,\n        lookbehind: true,\n        alias: 'function'\n      },\n      keyword: [\n        {\n          pattern:\n            /(\\(\\s*)\\b(?:array|bool|boolean|float|int|integer|object|string)\\b(?=\\s*\\))/i,\n          alias: 'type-casting',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern:\n            /([(,?]\\s*)\\b(?:array(?!\\s*\\()|bool|callable|(?:false|null)(?=\\s*\\|)|float|int|iterable|mixed|object|self|static|string)\\b(?=\\s*\\$)/i,\n          alias: 'type-hint',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern:\n            /(\\)\\s*:\\s*(?:\\?\\s*)?)\\b(?:array(?!\\s*\\()|bool|callable|(?:false|null)(?=\\s*\\|)|float|int|iterable|mixed|object|self|static|string|void)\\b/i,\n          alias: 'return-type',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern:\n            /\\b(?:array(?!\\s*\\()|bool|float|int|iterable|mixed|object|string|void)\\b/i,\n          alias: 'type-declaration',\n          greedy: true\n        },\n        {\n          pattern: /(\\|\\s*)(?:false|null)\\b|\\b(?:false|null)(?=\\s*\\|)/i,\n          alias: 'type-declaration',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /\\b(?:parent|self|static)(?=\\s*::)/i,\n          alias: 'static-context',\n          greedy: true\n        },\n        {\n          // yield from\n          pattern: /(\\byield\\s+)from\\b/i,\n          lookbehind: true\n        }, // `class` is always a keyword unlike other keywords\n        /\\bclass\\b/i,\n        {\n          // https://www.php.net/manual/en/reserved.keywords.php\n          //\n          // keywords cannot be preceded by \"->\"\n          // the complex lookbehind means `(?<!(?:->|::)\\s*)`\n          pattern:\n            /((?:^|[^\\s>:]|(?:^|[^-])>|(?:^|[^:]):)\\s*)\\b(?:abstract|and|array|as|break|callable|case|catch|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|enum|eval|exit|extends|final|finally|fn|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|match|namespace|new|or|parent|print|private|protected|public|require|require_once|return|self|static|switch|throw|trait|try|unset|use|var|while|xor|yield|__halt_compiler)\\b/i,\n          lookbehind: true\n        }\n      ],\n      'argument-name': {\n        pattern: /([(,]\\s+)\\b[a-z_]\\w*(?=\\s*:(?!:))/i,\n        lookbehind: true\n      },\n      'class-name': [\n        {\n          pattern:\n            /(\\b(?:extends|implements|instanceof|new(?!\\s+self|\\s+static))\\s+|\\bcatch\\s*\\()\\b[a-z_]\\w*(?!\\\\)\\b/i,\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /(\\|\\s*)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /\\b[a-z_]\\w*(?!\\\\)\\b(?=\\s*\\|)/i,\n          greedy: true\n        },\n        {\n          pattern: /(\\|\\s*)(?:\\\\?\\b[a-z_]\\w*)+\\b/i,\n          alias: 'class-name-fully-qualified',\n          greedy: true,\n          lookbehind: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern: /(?:\\\\?\\b[a-z_]\\w*)+\\b(?=\\s*\\|)/i,\n          alias: 'class-name-fully-qualified',\n          greedy: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern:\n            /(\\b(?:extends|implements|instanceof|new(?!\\s+self\\b|\\s+static\\b))\\s+|\\bcatch\\s*\\()(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n          alias: 'class-name-fully-qualified',\n          greedy: true,\n          lookbehind: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern: /\\b[a-z_]\\w*(?=\\s*\\$)/i,\n          alias: 'type-declaration',\n          greedy: true\n        },\n        {\n          pattern: /(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,\n          alias: ['class-name-fully-qualified', 'type-declaration'],\n          greedy: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern: /\\b[a-z_]\\w*(?=\\s*::)/i,\n          alias: 'static-context',\n          greedy: true\n        },\n        {\n          pattern: /(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*::)/i,\n          alias: ['class-name-fully-qualified', 'static-context'],\n          greedy: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern: /([(,?]\\s*)[a-z_]\\w*(?=\\s*\\$)/i,\n          alias: 'type-hint',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /([(,?]\\s*)(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,\n          alias: ['class-name-fully-qualified', 'type-hint'],\n          greedy: true,\n          lookbehind: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n          alias: 'return-type',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n          alias: ['class-name-fully-qualified', 'return-type'],\n          greedy: true,\n          lookbehind: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        }\n      ],\n      constant: constant,\n      function: {\n        pattern: /(^|[^\\\\\\w])\\\\?[a-z_](?:[\\w\\\\]*\\w)?(?=\\s*\\()/i,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      },\n      property: {\n        pattern: /(->\\s*)\\w+/,\n        lookbehind: true\n      },\n      number: number,\n      operator: operator,\n      punctuation: punctuation\n    }\n    var string_interpolation = {\n      pattern:\n        /\\{\\$(?:\\{(?:\\{[^{}]+\\}|[^{}]+)\\}|[^{}])+\\}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[[^\\r\\n\\[\\]]+\\]|->\\w+)?)/,\n      lookbehind: true,\n      inside: Prism.languages.php\n    }\n    var string = [\n      {\n        pattern: /<<<'([^']+)'[\\r\\n](?:.*[\\r\\n])*?\\1;/,\n        alias: 'nowdoc-string',\n        greedy: true,\n        inside: {\n          delimiter: {\n            pattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n            alias: 'symbol',\n            inside: {\n              punctuation: /^<<<'?|[';]$/\n            }\n          }\n        }\n      },\n      {\n        pattern:\n          /<<<(?:\"([^\"]+)\"[\\r\\n](?:.*[\\r\\n])*?\\1;|([a-z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?\\2;)/i,\n        alias: 'heredoc-string',\n        greedy: true,\n        inside: {\n          delimiter: {\n            pattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n            alias: 'symbol',\n            inside: {\n              punctuation: /^<<<\"?|[\";]$/\n            }\n          },\n          interpolation: string_interpolation\n        }\n      },\n      {\n        pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n        alias: 'backtick-quoted-string',\n        greedy: true\n      },\n      {\n        pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n        alias: 'single-quoted-string',\n        greedy: true\n      },\n      {\n        pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n        alias: 'double-quoted-string',\n        greedy: true,\n        inside: {\n          interpolation: string_interpolation\n        }\n      }\n    ]\n    Prism.languages.insertBefore('php', 'variable', {\n      string: string,\n      attribute: {\n        pattern:\n          /#\\[(?:[^\"'\\/#]|\\/(?![*/])|\\/\\/.*$|#(?!\\[).*$|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*')+\\](?=\\s*[a-z$#])/im,\n        greedy: true,\n        inside: {\n          'attribute-content': {\n            pattern: /^(#\\[)[\\s\\S]+(?=\\]$)/,\n            lookbehind: true,\n            // inside can appear subset of php\n            inside: {\n              comment: comment,\n              string: string,\n              'attribute-class-name': [\n                {\n                  pattern: /([^:]|^)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n                  alias: 'class-name',\n                  greedy: true,\n                  lookbehind: true\n                },\n                {\n                  pattern: /([^:]|^)(?:\\\\?\\b[a-z_]\\w*)+/i,\n                  alias: ['class-name', 'class-name-fully-qualified'],\n                  greedy: true,\n                  lookbehind: true,\n                  inside: {\n                    punctuation: /\\\\/\n                  }\n                }\n              ],\n              constant: constant,\n              number: number,\n              operator: operator,\n              punctuation: punctuation\n            }\n          },\n          delimiter: {\n            pattern: /^#\\[|\\]$/,\n            alias: 'punctuation'\n          }\n        }\n      }\n    })\n    Prism.hooks.add('before-tokenize', function (env) {\n      if (!/<\\?/.test(env.code)) {\n        return\n      }\n      var phpPattern =\n        /<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#(?!\\[))(?:[^?\\n\\r]|\\?(?!>))*(?=$|\\?>|[\\r\\n])|#\\[|\\/\\*(?:[^*]|\\*(?!\\/))*(?:\\*\\/|$))*?(?:\\?>|$)/g\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'php',\n        phpPattern\n      )\n    })\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'php')\n    })\n  })(Prism)\n}\n","'use strict'\nvar refractorPhp = require('./php.js')\nvar refractorJavadoclike = require('./javadoclike.js')\nmodule.exports = phpdoc\nphpdoc.displayName = 'phpdoc'\nphpdoc.aliases = []\nfunction phpdoc(Prism) {\n  Prism.register(refractorPhp)\n  Prism.register(refractorJavadoclike)\n  ;(function (Prism) {\n    var typeExpression = /(?:\\b[a-zA-Z]\\w*|[|\\\\[\\]])+/.source\n    Prism.languages.phpdoc = Prism.languages.extend('javadoclike', {\n      parameter: {\n        pattern: RegExp(\n          '(@(?:global|param|property(?:-read|-write)?|var)\\\\s+(?:' +\n            typeExpression +\n            '\\\\s+)?)\\\\$\\\\w+'\n        ),\n        lookbehind: true\n      }\n    })\n    Prism.languages.insertBefore('phpdoc', 'keyword', {\n      'class-name': [\n        {\n          pattern: RegExp(\n            '(@(?:global|package|param|property(?:-read|-write)?|return|subpackage|throws|var)\\\\s+)' +\n              typeExpression\n          ),\n          lookbehind: true,\n          inside: {\n            keyword:\n              /\\b(?:array|bool|boolean|callback|double|false|float|int|integer|mixed|null|object|resource|self|string|true|void)\\b/,\n            punctuation: /[|\\\\[\\]()]/\n          }\n        }\n      ]\n    })\n    Prism.languages.javadoclike.addSupport('php', Prism.languages.phpdoc)\n  })(Prism)\n}\n","'use strict'\nvar refractorSql = require('./sql.js')\nmodule.exports = plsql\nplsql.displayName = 'plsql'\nplsql.aliases = []\nfunction plsql(Prism) {\n  Prism.register(refractorSql)\n  Prism.languages.plsql = Prism.languages.extend('sql', {\n    comment: {\n      pattern: /\\/\\*[\\s\\S]*?\\*\\/|--.*/,\n      greedy: true\n    },\n    // https://docs.oracle.com/en/database/oracle/oracle-database/21/lnpls/plsql-reserved-words-keywords.html\n    keyword:\n      /\\b(?:A|ACCESSIBLE|ADD|AGENT|AGGREGATE|ALL|ALTER|AND|ANY|ARRAY|AS|ASC|AT|ATTRIBUTE|AUTHID|AVG|BEGIN|BETWEEN|BFILE_BASE|BINARY|BLOB_BASE|BLOCK|BODY|BOTH|BOUND|BULK|BY|BYTE|C|CALL|CALLING|CASCADE|CASE|CHAR|CHARACTER|CHARSET|CHARSETFORM|CHARSETID|CHAR_BASE|CHECK|CLOB_BASE|CLONE|CLOSE|CLUSTER|CLUSTERS|COLAUTH|COLLECT|COLUMNS|COMMENT|COMMIT|COMMITTED|COMPILED|COMPRESS|CONNECT|CONSTANT|CONSTRUCTOR|CONTEXT|CONTINUE|CONVERT|COUNT|CRASH|CREATE|CREDENTIAL|CURRENT|CURSOR|CUSTOMDATUM|DANGLING|DATA|DATE|DATE_BASE|DAY|DECLARE|DEFAULT|DEFINE|DELETE|DESC|DETERMINISTIC|DIRECTORY|DISTINCT|DOUBLE|DROP|DURATION|ELEMENT|ELSE|ELSIF|EMPTY|END|ESCAPE|EXCEPT|EXCEPTION|EXCEPTIONS|EXCLUSIVE|EXECUTE|EXISTS|EXIT|EXTERNAL|FETCH|FINAL|FIRST|FIXED|FLOAT|FOR|FORALL|FORCE|FROM|FUNCTION|GENERAL|GOTO|GRANT|GROUP|HASH|HAVING|HEAP|HIDDEN|HOUR|IDENTIFIED|IF|IMMEDIATE|IMMUTABLE|IN|INCLUDING|INDEX|INDEXES|INDICATOR|INDICES|INFINITE|INSERT|INSTANTIABLE|INT|INTERFACE|INTERSECT|INTERVAL|INTO|INVALIDATE|IS|ISOLATION|JAVA|LANGUAGE|LARGE|LEADING|LENGTH|LEVEL|LIBRARY|LIKE|LIKE2|LIKE4|LIKEC|LIMIT|LIMITED|LOCAL|LOCK|LONG|LOOP|MAP|MAX|MAXLEN|MEMBER|MERGE|MIN|MINUS|MINUTE|MOD|MODE|MODIFY|MONTH|MULTISET|MUTABLE|NAME|NAN|NATIONAL|NATIVE|NCHAR|NEW|NOCOMPRESS|NOCOPY|NOT|NOWAIT|NULL|NUMBER_BASE|OBJECT|OCICOLL|OCIDATE|OCIDATETIME|OCIDURATION|OCIINTERVAL|OCILOBLOCATOR|OCINUMBER|OCIRAW|OCIREF|OCIREFCURSOR|OCIROWID|OCISTRING|OCITYPE|OF|OLD|ON|ONLY|OPAQUE|OPEN|OPERATOR|OPTION|OR|ORACLE|ORADATA|ORDER|ORGANIZATION|ORLANY|ORLVARY|OTHERS|OUT|OVERLAPS|OVERRIDING|PACKAGE|PARALLEL_ENABLE|PARAMETER|PARAMETERS|PARENT|PARTITION|PASCAL|PERSISTABLE|PIPE|PIPELINED|PLUGGABLE|POLYMORPHIC|PRAGMA|PRECISION|PRIOR|PRIVATE|PROCEDURE|PUBLIC|RAISE|RANGE|RAW|READ|RECORD|REF|REFERENCE|RELIES_ON|REM|REMAINDER|RENAME|RESOURCE|RESULT|RESULT_CACHE|RETURN|RETURNING|REVERSE|REVOKE|ROLLBACK|ROW|SAMPLE|SAVE|SAVEPOINT|SB1|SB2|SB4|SECOND|SEGMENT|SELECT|SELF|SEPARATE|SEQUENCE|SERIALIZABLE|SET|SHARE|SHORT|SIZE|SIZE_T|SOME|SPARSE|SQL|SQLCODE|SQLDATA|SQLNAME|SQLSTATE|STANDARD|START|STATIC|STDDEV|STORED|STRING|STRUCT|STYLE|SUBMULTISET|SUBPARTITION|SUBSTITUTABLE|SUBTYPE|SUM|SYNONYM|TABAUTH|TABLE|TDO|THE|THEN|TIME|TIMESTAMP|TIMEZONE_ABBR|TIMEZONE_HOUR|TIMEZONE_MINUTE|TIMEZONE_REGION|TO|TRAILING|TRANSACTION|TRANSACTIONAL|TRUSTED|TYPE|UB1|UB2|UB4|UNDER|UNION|UNIQUE|UNPLUG|UNSIGNED|UNTRUSTED|UPDATE|USE|USING|VALIST|VALUE|VALUES|VARIABLE|VARIANCE|VARRAY|VARYING|VIEW|VIEWS|VOID|WHEN|WHERE|WHILE|WITH|WORK|WRAPPED|WRITE|YEAR|ZONE)\\b/i,\n    // https://docs.oracle.com/en/database/oracle/oracle-database/21/lnpls/plsql-language-fundamentals.html#GUID-96A42F7C-7A71-4B90-8255-CA9C8BD9722E\n    operator: /:=?|=>|[<>^~!]=|\\.\\.|\\|\\||\\*\\*|[-+*/%<>=@]/\n  })\n  Prism.languages.insertBefore('plsql', 'operator', {\n    label: {\n      pattern: /<<\\s*\\w+\\s*>>/,\n      alias: 'symbol'\n    }\n  })\n}\n","'use strict'\n\nmodule.exports = powerquery\npowerquery.displayName = 'powerquery'\npowerquery.aliases = []\nfunction powerquery(Prism) {\n  // https://docs.microsoft.com/en-us/powerquery-m/power-query-m-language-specification\n  Prism.languages.powerquery = {\n    comment: {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true,\n      greedy: true\n    },\n    'quoted-identifier': {\n      pattern: /#\"(?:[^\"\\r\\n]|\"\")*\"(?!\")/,\n      greedy: true\n    },\n    string: {\n      pattern: /(?:#!)?\"(?:[^\"\\r\\n]|\"\")*\"(?!\")/,\n      greedy: true\n    },\n    constant: [\n      /\\bDay\\.(?:Friday|Monday|Saturday|Sunday|Thursday|Tuesday|Wednesday)\\b/,\n      /\\bTraceLevel\\.(?:Critical|Error|Information|Verbose|Warning)\\b/,\n      /\\bOccurrence\\.(?:All|First|Last)\\b/,\n      /\\bOrder\\.(?:Ascending|Descending)\\b/,\n      /\\bRoundingMode\\.(?:AwayFromZero|Down|ToEven|TowardZero|Up)\\b/,\n      /\\bMissingField\\.(?:Error|Ignore|UseNull)\\b/,\n      /\\bQuoteStyle\\.(?:Csv|None)\\b/,\n      /\\bJoinKind\\.(?:FullOuter|Inner|LeftAnti|LeftOuter|RightAnti|RightOuter)\\b/,\n      /\\bGroupKind\\.(?:Global|Local)\\b/,\n      /\\bExtraValues\\.(?:Error|Ignore|List)\\b/,\n      /\\bJoinAlgorithm\\.(?:Dynamic|LeftHash|LeftIndex|PairwiseHash|RightHash|RightIndex|SortMerge)\\b/,\n      /\\bJoinSide\\.(?:Left|Right)\\b/,\n      /\\bPrecision\\.(?:Decimal|Double)\\b/,\n      /\\bRelativePosition\\.From(?:End|Start)\\b/,\n      /\\bTextEncoding\\.(?:Ascii|BigEndianUnicode|Unicode|Utf16|Utf8|Windows)\\b/,\n      /\\b(?:Any|Binary|Date|DateTime|DateTimeZone|Duration|Function|Int16|Int32|Int64|Int8|List|Logical|None|Number|Record|Table|Text|Time)\\.Type\\b/,\n      /\\bnull\\b/\n    ],\n    boolean: /\\b(?:false|true)\\b/,\n    keyword:\n      /\\b(?:and|as|each|else|error|if|in|is|let|meta|not|nullable|optional|or|otherwise|section|shared|then|try|type)\\b|#(?:binary|date|datetime|datetimezone|duration|infinity|nan|sections|shared|table|time)\\b/,\n    function: {\n      pattern: /(^|[^#\\w.])[a-z_][\\w.]*(?=\\s*\\()/i,\n      lookbehind: true\n    },\n    'data-type': {\n      pattern:\n        /\\b(?:any|anynonnull|binary|date|datetime|datetimezone|duration|function|list|logical|none|number|record|table|text|time)\\b/,\n      alias: 'class-name'\n    },\n    number: {\n      pattern:\n        /\\b0x[\\da-f]+\\b|(?:[+-]?(?:\\b\\d+\\.)?\\b\\d+|[+-]\\.\\d+|(^|[^.])\\B\\.\\d+)(?:e[+-]?\\d+)?\\b/i,\n      lookbehind: true\n    },\n    operator: /[-+*\\/&?@^]|<(?:=>?|>)?|>=?|=>?|\\.\\.\\.?/,\n    punctuation: /[,;\\[\\](){}]/\n  }\n  Prism.languages.pq = Prism.languages['powerquery']\n  Prism.languages.mscript = Prism.languages['powerquery']\n}\n","'use strict'\n\nmodule.exports = powershell\npowershell.displayName = 'powershell'\npowershell.aliases = []\nfunction powershell(Prism) {\n  ;(function (Prism) {\n    var powershell = (Prism.languages.powershell = {\n      comment: [\n        {\n          pattern: /(^|[^`])<#[\\s\\S]*?#>/,\n          lookbehind: true\n        },\n        {\n          pattern: /(^|[^`])#.*/,\n          lookbehind: true\n        }\n      ],\n      string: [\n        {\n          pattern: /\"(?:`[\\s\\S]|[^`\"])*\"/,\n          greedy: true,\n          inside: null // see below\n        },\n        {\n          pattern: /'(?:[^']|'')*'/,\n          greedy: true\n        }\n      ],\n      // Matches name spaces as well as casts, attribute decorators. Force starting with letter to avoid matching array indices\n      // Supports two levels of nested brackets (e.g. `[OutputType([System.Collections.Generic.List[int]])]`)\n      namespace: /\\[[a-z](?:\\[(?:\\[[^\\]]*\\]|[^\\[\\]])*\\]|[^\\[\\]])*\\]/i,\n      boolean: /\\$(?:false|true)\\b/i,\n      variable: /\\$\\w+\\b/,\n      // Cmdlets and aliases. Aliases should come last, otherwise \"write\" gets preferred over \"write-host\" for example\n      // Get-Command | ?{ $_.ModuleName -match \"Microsoft.PowerShell.(Util|Core|Management)\" }\n      // Get-Alias | ?{ $_.ReferencedCommand.Module.Name -match \"Microsoft.PowerShell.(Util|Core|Management)\" }\n      function: [\n        /\\b(?:Add|Approve|Assert|Backup|Block|Checkpoint|Clear|Close|Compare|Complete|Compress|Confirm|Connect|Convert|ConvertFrom|ConvertTo|Copy|Debug|Deny|Disable|Disconnect|Dismount|Edit|Enable|Enter|Exit|Expand|Export|Find|ForEach|Format|Get|Grant|Group|Hide|Import|Initialize|Install|Invoke|Join|Limit|Lock|Measure|Merge|Move|New|Open|Optimize|Out|Ping|Pop|Protect|Publish|Push|Read|Receive|Redo|Register|Remove|Rename|Repair|Request|Reset|Resize|Resolve|Restart|Restore|Resume|Revoke|Save|Search|Select|Send|Set|Show|Skip|Sort|Split|Start|Step|Stop|Submit|Suspend|Switch|Sync|Tee|Test|Trace|Unblock|Undo|Uninstall|Unlock|Unprotect|Unpublish|Unregister|Update|Use|Wait|Watch|Where|Write)-[a-z]+\\b/i,\n        /\\b(?:ac|cat|chdir|clc|cli|clp|clv|compare|copy|cp|cpi|cpp|cvpa|dbp|del|diff|dir|ebp|echo|epal|epcsv|epsn|erase|fc|fl|ft|fw|gal|gbp|gc|gci|gcs|gdr|gi|gl|gm|gp|gps|group|gsv|gu|gv|gwmi|iex|ii|ipal|ipcsv|ipsn|irm|iwmi|iwr|kill|lp|ls|measure|mi|mount|move|mp|mv|nal|ndr|ni|nv|ogv|popd|ps|pushd|pwd|rbp|rd|rdr|ren|ri|rm|rmdir|rni|rnp|rp|rv|rvpa|rwmi|sal|saps|sasv|sbp|sc|select|set|shcm|si|sl|sleep|sls|sort|sp|spps|spsv|start|sv|swmi|tee|trcm|type|write)\\b/i\n      ],\n      // per http://technet.microsoft.com/en-us/library/hh847744.aspx\n      keyword:\n        /\\b(?:Begin|Break|Catch|Class|Continue|Data|Define|Do|DynamicParam|Else|ElseIf|End|Exit|Filter|Finally|For|ForEach|From|Function|If|InlineScript|Parallel|Param|Process|Return|Sequence|Switch|Throw|Trap|Try|Until|Using|Var|While|Workflow)\\b/i,\n      operator: {\n        pattern:\n          /(^|\\W)(?:!|-(?:b?(?:and|x?or)|as|(?:Not)?(?:Contains|In|Like|Match)|eq|ge|gt|is(?:Not)?|Join|le|lt|ne|not|Replace|sh[lr])\\b|-[-=]?|\\+[+=]?|[*\\/%]=?)/i,\n        lookbehind: true\n      },\n      punctuation: /[|{}[\\];(),.]/\n    }) // Variable interpolation inside strings, and nested expressions\n    powershell.string[0].inside = {\n      function: {\n        // Allow for one level of nesting\n        pattern: /(^|[^`])\\$\\((?:\\$\\([^\\r\\n()]*\\)|(?!\\$\\()[^\\r\\n)])*\\)/,\n        lookbehind: true,\n        inside: powershell\n      },\n      boolean: powershell.boolean,\n      variable: powershell.variable\n    }\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = processing\nprocessing.displayName = 'processing'\nprocessing.aliases = []\nfunction processing(Prism) {\n  Prism.languages.processing = Prism.languages.extend('clike', {\n    keyword:\n      /\\b(?:break|case|catch|class|continue|default|else|extends|final|for|if|implements|import|new|null|private|public|return|static|super|switch|this|try|void|while)\\b/,\n    // Spaces are allowed between function name and parenthesis\n    function: /\\b\\w+(?=\\s*\\()/,\n    operator: /<[<=]?|>[>=]?|&&?|\\|\\|?|[%?]|[!=+\\-*\\/]=?/\n  })\n  Prism.languages.insertBefore('processing', 'number', {\n    // Special case: XML is a type\n    constant: /\\b(?!XML\\b)[A-Z][A-Z\\d_]+\\b/,\n    type: {\n      pattern: /\\b(?:boolean|byte|char|color|double|float|int|[A-Z]\\w*)\\b/,\n      alias: 'class-name'\n    }\n  })\n}\n","'use strict'\n\nmodule.exports = prolog\nprolog.displayName = 'prolog'\nprolog.aliases = []\nfunction prolog(Prism) {\n  Prism.languages.prolog = {\n    // Syntax depends on the implementation\n    comment: {\n      pattern: /\\/\\*[\\s\\S]*?\\*\\/|%.*/,\n      greedy: true\n    },\n    // Depending on the implementation, strings may allow escaped newlines and quote-escape\n    string: {\n      pattern: /([\"'])(?:\\1\\1|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1(?!\\1)/,\n      greedy: true\n    },\n    builtin: /\\b(?:fx|fy|xf[xy]?|yfx?)\\b/,\n    // FIXME: Should we list all null-ary predicates (not followed by a parenthesis) like halt, trace, etc.?\n    function: /\\b[a-z]\\w*(?:(?=\\()|\\/\\d+)/,\n    number: /\\b\\d+(?:\\.\\d*)?/,\n    // Custom operators are allowed\n    operator: /[:\\\\=><\\-?*@\\/;+^|!$.]+|\\b(?:is|mod|not|xor)\\b/,\n    punctuation: /[(){}\\[\\],]/\n  }\n}\n","'use strict'\n\nmodule.exports = promql\npromql.displayName = 'promql'\npromql.aliases = []\nfunction promql(Prism) {\n  // Thanks to: https://github.com/prometheus-community/monaco-promql/blob/master/src/promql/promql.ts\n  // As well as: https://kausal.co/blog/slate-prism-add-new-syntax-promql/\n  ;(function (Prism) {\n    // PromQL Aggregation Operators\n    // (https://prometheus.io/docs/prometheus/latest/querying/operators/#aggregation-operators)\n    var aggregations = [\n      'sum',\n      'min',\n      'max',\n      'avg',\n      'group',\n      'stddev',\n      'stdvar',\n      'count',\n      'count_values',\n      'bottomk',\n      'topk',\n      'quantile'\n    ] // PromQL vector matching + the by and without clauses\n    // (https://prometheus.io/docs/prometheus/latest/querying/operators/#vector-matching)\n    var vectorMatching = [\n      'on',\n      'ignoring',\n      'group_right',\n      'group_left',\n      'by',\n      'without'\n    ] // PromQL offset modifier\n    // (https://prometheus.io/docs/prometheus/latest/querying/basics/#offset-modifier)\n    var offsetModifier = ['offset']\n    var keywords = aggregations.concat(vectorMatching, offsetModifier)\n    Prism.languages.promql = {\n      comment: {\n        pattern: /(^[ \\t]*)#.*/m,\n        lookbehind: true\n      },\n      'vector-match': {\n        // Match the comma-separated label lists inside vector matching:\n        pattern: new RegExp(\n          '((?:' + vectorMatching.join('|') + ')\\\\s*)\\\\([^)]*\\\\)'\n        ),\n        lookbehind: true,\n        inside: {\n          'label-key': {\n            pattern: /\\b[^,]+\\b/,\n            alias: 'attr-name'\n          },\n          punctuation: /[(),]/\n        }\n      },\n      'context-labels': {\n        pattern: /\\{[^{}]*\\}/,\n        inside: {\n          'label-key': {\n            pattern: /\\b[a-z_]\\w*(?=\\s*(?:=|![=~]))/,\n            alias: 'attr-name'\n          },\n          'label-value': {\n            pattern: /([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n            greedy: true,\n            alias: 'attr-value'\n          },\n          punctuation: /\\{|\\}|=~?|![=~]|,/\n        }\n      },\n      'context-range': [\n        {\n          pattern: /\\[[\\w\\s:]+\\]/,\n          // [1m]\n          inside: {\n            punctuation: /\\[|\\]|:/,\n            'range-duration': {\n              pattern: /\\b(?:\\d+(?:[smhdwy]|ms))+\\b/i,\n              alias: 'number'\n            }\n          }\n        },\n        {\n          pattern: /(\\boffset\\s+)\\w+/,\n          // offset 1m\n          lookbehind: true,\n          inside: {\n            'range-duration': {\n              pattern: /\\b(?:\\d+(?:[smhdwy]|ms))+\\b/i,\n              alias: 'number'\n            }\n          }\n        }\n      ],\n      keyword: new RegExp('\\\\b(?:' + keywords.join('|') + ')\\\\b', 'i'),\n      function: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n      number:\n        /[-+]?(?:(?:\\b\\d+(?:\\.\\d+)?|\\B\\.\\d+)(?:e[-+]?\\d+)?\\b|\\b(?:0x[0-9a-f]+|nan|inf)\\b)/i,\n      operator: /[\\^*/%+-]|==|!=|<=|<|>=|>|\\b(?:and|or|unless)\\b/i,\n      punctuation: /[{};()`,.[\\]]/\n    }\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = properties\nproperties.displayName = 'properties'\nproperties.aliases = []\nfunction properties(Prism) {\n  Prism.languages.properties = {\n    comment: /^[ \\t]*[#!].*$/m,\n    'attr-value': {\n      pattern:\n        /(^[ \\t]*(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\s:=])+(?: *[=:] *(?! )| ))(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])+/m,\n      lookbehind: true\n    },\n    'attr-name': /^[ \\t]*(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\s:=])+(?= *[=:]| )/m,\n    punctuation: /[=:]/\n  }\n}\n","'use strict'\n\nmodule.exports = protobuf\nprotobuf.displayName = 'protobuf'\nprotobuf.aliases = []\nfunction protobuf(Prism) {\n  ;(function (Prism) {\n    var builtinTypes =\n      /\\b(?:bool|bytes|double|s?fixed(?:32|64)|float|[su]?int(?:32|64)|string)\\b/\n    Prism.languages.protobuf = Prism.languages.extend('clike', {\n      'class-name': [\n        {\n          pattern:\n            /(\\b(?:enum|extend|message|service)\\s+)[A-Za-z_]\\w*(?=\\s*\\{)/,\n          lookbehind: true\n        },\n        {\n          pattern:\n            /(\\b(?:rpc\\s+\\w+|returns)\\s*\\(\\s*(?:stream\\s+)?)\\.?[A-Za-z_]\\w*(?:\\.[A-Za-z_]\\w*)*(?=\\s*\\))/,\n          lookbehind: true\n        }\n      ],\n      keyword:\n        /\\b(?:enum|extend|extensions|import|message|oneof|option|optional|package|public|repeated|required|reserved|returns|rpc(?=\\s+\\w)|service|stream|syntax|to)\\b(?!\\s*=\\s*\\d)/,\n      function: /\\b[a-z_]\\w*(?=\\s*\\()/i\n    })\n    Prism.languages.insertBefore('protobuf', 'operator', {\n      map: {\n        pattern: /\\bmap<\\s*[\\w.]+\\s*,\\s*[\\w.]+\\s*>(?=\\s+[a-z_]\\w*\\s*[=;])/i,\n        alias: 'class-name',\n        inside: {\n          punctuation: /[<>.,]/,\n          builtin: builtinTypes\n        }\n      },\n      builtin: builtinTypes,\n      'positional-class-name': {\n        pattern: /(?:\\b|\\B\\.)[a-z_]\\w*(?:\\.[a-z_]\\w*)*(?=\\s+[a-z_]\\w*\\s*[=;])/i,\n        alias: 'class-name',\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      annotation: {\n        pattern: /(\\[\\s*)[a-z_]\\w*(?=\\s*=)/i,\n        lookbehind: true\n      }\n    })\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = psl\npsl.displayName = 'psl'\npsl.aliases = []\nfunction psl(Prism) {\n  Prism.languages.psl = {\n    comment: {\n      pattern: /#.*/,\n      greedy: true\n    },\n    string: {\n      pattern: /\"(?:\\\\.|[^\\\\\"])*\"/,\n      greedy: true,\n      inside: {\n        symbol: /\\\\[ntrbA-Z\"\\\\]/\n      }\n    },\n    'heredoc-string': {\n      pattern: /<<<([a-zA-Z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?\\1\\b/,\n      alias: 'string',\n      greedy: true\n    },\n    keyword:\n      /\\b(?:__multi|__single|case|default|do|else|elsif|exit|export|for|foreach|function|if|last|line|local|next|requires|return|switch|until|while|word)\\b/,\n    constant:\n      /\\b(?:ALARM|CHART_ADD_GRAPH|CHART_DELETE_GRAPH|CHART_DESTROY|CHART_LOAD|CHART_PRINT|EOF|OFFLINE|OK|PSL_PROF_LOG|R_CHECK_HORIZ|R_CHECK_VERT|R_CLICKER|R_COLUMN|R_FRAME|R_ICON|R_LABEL|R_LABEL_CENTER|R_LIST_MULTIPLE|R_LIST_MULTIPLE_ND|R_LIST_SINGLE|R_LIST_SINGLE_ND|R_MENU|R_POPUP|R_POPUP_SCROLLED|R_RADIO_HORIZ|R_RADIO_VERT|R_ROW|R_SCALE_HORIZ|R_SCALE_VERT|R_SEP_HORIZ|R_SEP_VERT|R_SPINNER|R_TEXT_FIELD|R_TEXT_FIELD_LABEL|R_TOGGLE|TRIM_LEADING|TRIM_LEADING_AND_TRAILING|TRIM_REDUNDANT|TRIM_TRAILING|VOID|WARN)\\b/,\n    boolean: /\\b(?:FALSE|False|NO|No|TRUE|True|YES|Yes|false|no|true|yes)\\b/,\n    variable: /\\b(?:PslDebug|errno|exit_status)\\b/,\n    builtin: {\n      pattern:\n        /\\b(?:PslExecute|PslFunctionCall|PslFunctionExists|PslSetOptions|_snmp_debug|acos|add_diary|annotate|annotate_get|ascii_to_ebcdic|asctime|asin|atan|atexit|batch_set|blackout|cat|ceil|chan_exists|change_state|close|code_cvt|cond_signal|cond_wait|console_type|convert_base|convert_date|convert_locale_date|cos|cosh|create|date|dcget_text|destroy|destroy_lock|dget_text|difference|dump_hist|ebcdic_to_ascii|encrypt|event_archive|event_catalog_get|event_check|event_query|event_range_manage|event_range_query|event_report|event_schedule|event_trigger|event_trigger2|execute|exists|exp|fabs|file|floor|fmod|fopen|fseek|ftell|full_discovery|get|get_chan_info|get_ranges|get_text|get_vars|getenv|gethostinfo|getpid|getpname|grep|history|history_get_retention|in_transition|index|int|internal|intersection|is_var|isnumber|join|kill|length|lines|lock|lock_info|log|log10|loge|matchline|msg_check|msg_get_format|msg_get_severity|msg_printf|msg_sprintf|ntharg|nthargf|nthline|nthlinef|num_bytes|num_consoles|pconfig|popen|poplines|pow|print|printf|proc_exists|process|random|read|readln|refresh_parameters|remote_check|remote_close|remote_event_query|remote_event_trigger|remote_file_send|remote_open|remove|replace|rindex|sec_check_priv|sec_store_get|sec_store_set|set|set_alarm_ranges|set_locale|share|sin|sinh|sleep|snmp_agent_config|snmp_agent_start|snmp_agent_stop|snmp_close|snmp_config|snmp_get|snmp_get_next|snmp_h_get|snmp_h_get_next|snmp_h_set|snmp_open|snmp_set|snmp_trap_ignore|snmp_trap_listen|snmp_trap_raise_std_trap|snmp_trap_receive|snmp_trap_register_im|snmp_trap_send|snmp_walk|sopen|sort|splitline|sprintf|sqrt|srandom|str_repeat|strcasecmp|subset|substr|system|tail|tan|tanh|text_domain|time|tmpnam|tolower|toupper|trace_psl_process|trim|union|unique|unlock|unset|va_arg|va_start|write)\\b/,\n      alias: 'builtin-function'\n    },\n    'foreach-variable': {\n      pattern:\n        /(\\bforeach\\s+(?:(?:\\w+\\b|\"(?:\\\\.|[^\\\\\"])*\")\\s+){0,2})[_a-zA-Z]\\w*(?=\\s*\\()/,\n      lookbehind: true,\n      greedy: true\n    },\n    function: /\\b[_a-z]\\w*\\b(?=\\s*\\()/i,\n    number: /\\b(?:0x[0-9a-f]+|\\d+(?:\\.\\d+)?)\\b/i,\n    operator: /--|\\+\\+|&&=?|\\|\\|=?|<<=?|>>=?|[=!]~|[-+*/%&|^!=<>]=?|\\.|[:?]/,\n    punctuation: /[(){}\\[\\];,]/\n  }\n}\n","'use strict'\n\nmodule.exports = pug\npug.displayName = 'pug'\npug.aliases = []\nfunction pug(Prism) {\n  ;(function (Prism) {\n    // TODO:\n    // - Add CSS highlighting inside <style> tags\n    // - Add support for multi-line code blocks\n    // - Add support for interpolation #{} and !{}\n    // - Add support for tag interpolation #[]\n    // - Add explicit support for plain text using |\n    // - Add support for markup embedded in plain text\n    Prism.languages.pug = {\n      // Multiline stuff should appear before the rest\n      // This handles both single-line and multi-line comments\n      comment: {\n        pattern: /(^([\\t ]*))\\/\\/.*(?:(?:\\r?\\n|\\r)\\2[\\t ].+)*/m,\n        lookbehind: true\n      },\n      // All the tag-related part is in lookbehind\n      // so that it can be highlighted by the \"tag\" pattern\n      'multiline-script': {\n        pattern:\n          /(^([\\t ]*)script\\b.*\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/m,\n        lookbehind: true,\n        inside: Prism.languages.javascript\n      },\n      // See at the end of the file for known filters\n      filter: {\n        pattern:\n          /(^([\\t ]*)):.+(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/m,\n        lookbehind: true,\n        inside: {\n          'filter-name': {\n            pattern: /^:[\\w-]+/,\n            alias: 'variable'\n          },\n          text: /\\S[\\s\\S]*/\n        }\n      },\n      'multiline-plain-text': {\n        pattern:\n          /(^([\\t ]*)[\\w\\-#.]+\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/m,\n        lookbehind: true\n      },\n      markup: {\n        pattern: /(^[\\t ]*)<.+/m,\n        lookbehind: true,\n        inside: Prism.languages.markup\n      },\n      doctype: {\n        pattern: /((?:^|\\n)[\\t ]*)doctype(?: .+)?/,\n        lookbehind: true\n      },\n      // This handle all conditional and loop keywords\n      'flow-control': {\n        pattern:\n          /(^[\\t ]*)(?:case|default|each|else|if|unless|when|while)\\b(?: .+)?/m,\n        lookbehind: true,\n        inside: {\n          each: {\n            pattern: /^each .+? in\\b/,\n            inside: {\n              keyword: /\\b(?:each|in)\\b/,\n              punctuation: /,/\n            }\n          },\n          branch: {\n            pattern: /^(?:case|default|else|if|unless|when|while)\\b/,\n            alias: 'keyword'\n          },\n          rest: Prism.languages.javascript\n        }\n      },\n      keyword: {\n        pattern: /(^[\\t ]*)(?:append|block|extends|include|prepend)\\b.+/m,\n        lookbehind: true\n      },\n      mixin: [\n        // Declaration\n        {\n          pattern: /(^[\\t ]*)mixin .+/m,\n          lookbehind: true,\n          inside: {\n            keyword: /^mixin/,\n            function: /\\w+(?=\\s*\\(|\\s*$)/,\n            punctuation: /[(),.]/\n          }\n        }, // Usage\n        {\n          pattern: /(^[\\t ]*)\\+.+/m,\n          lookbehind: true,\n          inside: {\n            name: {\n              pattern: /^\\+\\w+/,\n              alias: 'function'\n            },\n            rest: Prism.languages.javascript\n          }\n        }\n      ],\n      script: {\n        pattern: /(^[\\t ]*script(?:(?:&[^(]+)?\\([^)]+\\))*[\\t ]).+/m,\n        lookbehind: true,\n        inside: Prism.languages.javascript\n      },\n      'plain-text': {\n        pattern:\n          /(^[\\t ]*(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?[\\t ]).+/m,\n        lookbehind: true\n      },\n      tag: {\n        pattern: /(^[\\t ]*)(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?:?/m,\n        lookbehind: true,\n        inside: {\n          attributes: [\n            {\n              pattern: /&[^(]+\\([^)]+\\)/,\n              inside: Prism.languages.javascript\n            },\n            {\n              pattern: /\\([^)]+\\)/,\n              inside: {\n                'attr-value': {\n                  pattern: /(=\\s*(?!\\s))(?:\\{[^}]*\\}|[^,)\\r\\n]+)/,\n                  lookbehind: true,\n                  inside: Prism.languages.javascript\n                },\n                'attr-name': /[\\w-]+(?=\\s*!?=|\\s*[,)])/,\n                punctuation: /[!=(),]+/\n              }\n            }\n          ],\n          punctuation: /:/,\n          'attr-id': /#[\\w\\-]+/,\n          'attr-class': /\\.[\\w\\-]+/\n        }\n      },\n      code: [\n        {\n          pattern: /(^[\\t ]*(?:-|!?=)).+/m,\n          lookbehind: true,\n          inside: Prism.languages.javascript\n        }\n      ],\n      punctuation: /[.\\-!=|]+/\n    }\n    var filter_pattern =\n      /(^([\\t ]*)):<filter_name>(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/\n        .source // Non exhaustive list of available filters and associated languages\n    var filters = [\n      {\n        filter: 'atpl',\n        language: 'twig'\n      },\n      {\n        filter: 'coffee',\n        language: 'coffeescript'\n      },\n      'ejs',\n      'handlebars',\n      'less',\n      'livescript',\n      'markdown',\n      {\n        filter: 'sass',\n        language: 'scss'\n      },\n      'stylus'\n    ]\n    var all_filters = {}\n    for (var i = 0, l = filters.length; i < l; i++) {\n      var filter = filters[i]\n      filter =\n        typeof filter === 'string'\n          ? {\n              filter: filter,\n              language: filter\n            }\n          : filter\n      if (Prism.languages[filter.language]) {\n        all_filters['filter-' + filter.filter] = {\n          pattern: RegExp(\n            filter_pattern.replace('<filter_name>', function () {\n              return filter.filter\n            }),\n            'm'\n          ),\n          lookbehind: true,\n          inside: {\n            'filter-name': {\n              pattern: /^:[\\w-]+/,\n              alias: 'variable'\n            },\n            text: {\n              pattern: /\\S[\\s\\S]*/,\n              alias: [filter.language, 'language-' + filter.language],\n              inside: Prism.languages[filter.language]\n            }\n          }\n        }\n      }\n    }\n    Prism.languages.insertBefore('pug', 'filter', all_filters)\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = puppet\npuppet.displayName = 'puppet'\npuppet.aliases = []\nfunction puppet(Prism) {\n  ;(function (Prism) {\n    Prism.languages.puppet = {\n      heredoc: [\n        // Matches the content of a quoted heredoc string (subject to interpolation)\n        {\n          pattern:\n            /(@\\(\"([^\"\\r\\n\\/):]+)\"(?:\\/[nrts$uL]*)?\\).*(?:\\r?\\n|\\r))(?:.*(?:\\r?\\n|\\r(?!\\n)))*?[ \\t]*(?:\\|[ \\t]*)?(?:-[ \\t]*)?\\2/,\n          lookbehind: true,\n          alias: 'string',\n          inside: {\n            // Matches the end tag\n            punctuation: /(?=\\S).*\\S(?= *$)/ // See interpolation below\n          }\n        }, // Matches the content of an unquoted heredoc string (no interpolation)\n        {\n          pattern:\n            /(@\\(([^\"\\r\\n\\/):]+)(?:\\/[nrts$uL]*)?\\).*(?:\\r?\\n|\\r))(?:.*(?:\\r?\\n|\\r(?!\\n)))*?[ \\t]*(?:\\|[ \\t]*)?(?:-[ \\t]*)?\\2/,\n          lookbehind: true,\n          greedy: true,\n          alias: 'string',\n          inside: {\n            // Matches the end tag\n            punctuation: /(?=\\S).*\\S(?= *$)/\n          }\n        }, // Matches the start tag of heredoc strings\n        {\n          pattern: /@\\(\"?(?:[^\"\\r\\n\\/):]+)\"?(?:\\/[nrts$uL]*)?\\)/,\n          alias: 'string',\n          inside: {\n            punctuation: {\n              pattern: /(\\().+?(?=\\))/,\n              lookbehind: true\n            }\n          }\n        }\n      ],\n      'multiline-comment': {\n        pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n        lookbehind: true,\n        greedy: true,\n        alias: 'comment'\n      },\n      regex: {\n        // Must be prefixed with the keyword \"node\" or a non-word char\n        pattern:\n          /((?:\\bnode\\s+|[~=\\(\\[\\{,]\\s*|[=+]>\\s*|^\\s*))\\/(?:[^\\/\\\\]|\\\\[\\s\\S])+\\/(?:[imx]+\\b|\\B)/,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          // Extended regexes must have the x flag. They can contain single-line comments.\n          'extended-regex': {\n            pattern: /^\\/(?:[^\\/\\\\]|\\\\[\\s\\S])+\\/[im]*x[im]*$/,\n            inside: {\n              comment: /#.*/\n            }\n          }\n        }\n      },\n      comment: {\n        pattern: /(^|[^\\\\])#.*/,\n        lookbehind: true,\n        greedy: true\n      },\n      string: {\n        // Allow for one nested level of double quotes inside interpolation\n        pattern:\n          /([\"'])(?:\\$\\{(?:[^'\"}]|([\"'])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2)+\\}|\\$(?!\\{)|(?!\\1)[^\\\\$]|\\\\[\\s\\S])*\\1/,\n        greedy: true,\n        inside: {\n          'double-quoted': {\n            pattern: /^\"[\\s\\S]*\"$/,\n            inside: {\n              // See interpolation below\n            }\n          }\n        }\n      },\n      variable: {\n        pattern: /\\$(?:::)?\\w+(?:::\\w+)*/,\n        inside: {\n          punctuation: /::/\n        }\n      },\n      'attr-name': /(?:\\b\\w+|\\*)(?=\\s*=>)/,\n      function: [\n        {\n          pattern: /(\\.)(?!\\d)\\w+/,\n          lookbehind: true\n        },\n        /\\b(?:contain|debug|err|fail|include|info|notice|realize|require|tag|warning)\\b|\\b(?!\\d)\\w+(?=\\()/\n      ],\n      number: /\\b(?:0x[a-f\\d]+|\\d+(?:\\.\\d+)?(?:e-?\\d+)?)\\b/i,\n      boolean: /\\b(?:false|true)\\b/,\n      // Includes words reserved for future use\n      keyword:\n        /\\b(?:application|attr|case|class|consumes|default|define|else|elsif|function|if|import|inherits|node|private|produces|type|undef|unless)\\b/,\n      datatype: {\n        pattern:\n          /\\b(?:Any|Array|Boolean|Callable|Catalogentry|Class|Collection|Data|Default|Enum|Float|Hash|Integer|NotUndef|Numeric|Optional|Pattern|Regexp|Resource|Runtime|Scalar|String|Struct|Tuple|Type|Undef|Variant)\\b/,\n        alias: 'symbol'\n      },\n      operator:\n        /=[=~>]?|![=~]?|<(?:<\\|?|[=~|-])?|>[>=]?|->?|~>|\\|>?>?|[*\\/%+?]|\\b(?:and|in|or)\\b/,\n      punctuation: /[\\[\\]{}().,;]|:+/\n    }\n    var interpolation = [\n      {\n        // Allow for one nested level of braces inside interpolation\n        pattern:\n          /(^|[^\\\\])\\$\\{(?:[^'\"{}]|\\{[^}]*\\}|([\"'])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2)+\\}/,\n        lookbehind: true,\n        inside: {\n          'short-variable': {\n            // Negative look-ahead prevent wrong highlighting of functions\n            pattern: /(^\\$\\{)(?!\\w+\\()(?:::)?\\w+(?:::\\w+)*/,\n            lookbehind: true,\n            alias: 'variable',\n            inside: {\n              punctuation: /::/\n            }\n          },\n          delimiter: {\n            pattern: /^\\$/,\n            alias: 'variable'\n          },\n          rest: Prism.languages.puppet\n        }\n      },\n      {\n        pattern: /(^|[^\\\\])\\$(?:::)?\\w+(?:::\\w+)*/,\n        lookbehind: true,\n        alias: 'variable',\n        inside: {\n          punctuation: /::/\n        }\n      }\n    ]\n    Prism.languages.puppet['heredoc'][0].inside.interpolation = interpolation\n    Prism.languages.puppet['string'].inside[\n      'double-quoted'\n    ].inside.interpolation = interpolation\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = pure\npure.displayName = 'pure'\npure.aliases = []\nfunction pure(Prism) {\n  ;(function (Prism) {\n    // https://agraef.github.io/pure-docs/pure.html#lexical-matters\n    Prism.languages.pure = {\n      comment: [\n        {\n          pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n          lookbehind: true\n        },\n        {\n          pattern: /(^|[^\\\\:])\\/\\/.*/,\n          lookbehind: true\n        },\n        /#!.+/\n      ],\n      'inline-lang': {\n        pattern: /%<[\\s\\S]+?%>/,\n        greedy: true,\n        inside: {\n          lang: {\n            pattern: /(^%< *)-\\*-.+?-\\*-/,\n            lookbehind: true,\n            alias: 'comment'\n          },\n          delimiter: {\n            pattern: /^%<.*|%>$/,\n            alias: 'punctuation'\n          }\n        }\n      },\n      string: {\n        pattern: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n        greedy: true\n      },\n      number: {\n        // The look-behind prevents wrong highlighting of the .. operator\n        pattern:\n          /((?:\\.\\.)?)(?:\\b(?:inf|nan)\\b|\\b0x[\\da-f]+|(?:\\b(?:0b)?\\d+(?:\\.\\d+)?|\\B\\.\\d+)(?:e[+-]?\\d+)?L?)/i,\n        lookbehind: true\n      },\n      keyword:\n        /\\b(?:NULL|ans|break|bt|case|catch|cd|clear|const|def|del|dump|else|end|exit|extern|false|force|help|if|infix[lr]?|interface|let|ls|mem|namespace|nonfix|of|otherwise|outfix|override|postfix|prefix|private|public|pwd|quit|run|save|show|stats|then|throw|trace|true|type|underride|using|when|with)\\b/,\n      function:\n        /\\b(?:abs|add_(?:addr|constdef|(?:fundef|interface|macdef|typedef)(?:_at)?|vardef)|all|any|applp?|arity|bigintp?|blob(?:_crc|_size|p)?|boolp?|byte_c?string(?:_pointer)?|byte_(?:matrix|pointer)|calloc|cat|catmap|ceil|char[ps]?|check_ptrtag|chr|clear_sentry|clearsym|closurep?|cmatrixp?|cols?|colcat(?:map)?|colmap|colrev|colvector(?:p|seq)?|complex(?:_float_(?:matrix|pointer)|_matrix(?:_view)?|_pointer|p)?|conj|cookedp?|cst|cstring(?:_(?:dup|list|vector))?|curry3?|cyclen?|del_(?:constdef|fundef|interface|macdef|typedef|vardef)|delete|diag(?:mat)?|dim|dmatrixp?|do|double(?:_matrix(?:_view)?|_pointer|p)?|dowith3?|drop|dropwhile|eval(?:cmd)?|exactp|filter|fix|fixity|flip|float(?:_matrix|_pointer)|floor|fold[lr]1?|frac|free|funp?|functionp?|gcd|get(?:_(?:byte|constdef|double|float|fundef|int(?:64)?|interface(?:_typedef)?|long|macdef|pointer|ptrtag|sentry|short|string|typedef|vardef))?|globsym|hash|head|id|im|imatrixp?|index|inexactp|infp|init|insert|int(?:_matrix(?:_view)?|_pointer|p)?|int64_(?:matrix|pointer)|integerp?|iteraten?|iterwhile|join|keys?|lambdap?|last(?:err(?:pos)?)?|lcd|list[2p]?|listmap|make_ptrtag|malloc|map|matcat|matrixp?|max|member|min|nanp|nargs|nmatrixp?|null|numberp?|ord|pack(?:ed)?|pointer(?:_cast|_tag|_type|p)?|pow|pred|ptrtag|put(?:_(?:byte|double|float|int(?:64)?|long|pointer|short|string))?|rationalp?|re|realp?|realloc|recordp?|redim|reduce(?:_with)?|refp?|repeatn?|reverse|rlistp?|round|rows?|rowcat(?:map)?|rowmap|rowrev|rowvector(?:p|seq)?|same|scan[lr]1?|sentry|sgn|short_(?:matrix|pointer)|slice|smatrixp?|sort|split|str|strcat|stream|stride|string(?:_(?:dup|list|vector)|p)?|subdiag(?:mat)?|submat|subseq2?|substr|succ|supdiag(?:mat)?|symbolp?|tail|take|takewhile|thunkp?|transpose|trunc|tuplep?|typep|ubyte|uint(?:64)?|ulong|uncurry3?|unref|unzip3?|update|ushort|vals?|varp?|vector(?:p|seq)?|void|zip3?|zipwith3?)\\b/,\n      special: {\n        pattern: /\\b__[a-z]+__\\b/i,\n        alias: 'builtin'\n      },\n      // Any combination of operator chars can be an operator\n      // eslint-disable-next-line no-misleading-character-class\n      operator:\n        /(?:[!\"#$%&'*+,\\-.\\/:<=>?@\\\\^`|~\\u00a1-\\u00bf\\u00d7-\\u00f7\\u20d0-\\u2bff]|\\b_+\\b)+|\\b(?:and|div|mod|not|or)\\b/,\n      // FIXME: How can we prevent | and , to be highlighted as operator when they are used alone?\n      punctuation: /[(){}\\[\\];,|]/\n    }\n    var inlineLanguages = [\n      'c',\n      {\n        lang: 'c++',\n        alias: 'cpp'\n      },\n      'fortran'\n    ]\n    var inlineLanguageRe = /%< *-\\*- *<lang>\\d* *-\\*-[\\s\\S]+?%>/.source\n    inlineLanguages.forEach(function (lang) {\n      var alias = lang\n      if (typeof lang !== 'string') {\n        alias = lang.alias\n        lang = lang.lang\n      }\n      if (Prism.languages[alias]) {\n        var o = {}\n        o['inline-lang-' + alias] = {\n          pattern: RegExp(\n            inlineLanguageRe.replace(\n              '<lang>',\n              lang.replace(/([.+*?\\/\\\\(){}\\[\\]])/g, '\\\\$1')\n            ),\n            'i'\n          ),\n          inside: Prism.util.clone(Prism.languages.pure['inline-lang'].inside)\n        }\n        o['inline-lang-' + alias].inside.rest = Prism.util.clone(\n          Prism.languages[alias]\n        )\n        Prism.languages.insertBefore('pure', 'inline-lang', o)\n      }\n    }) // C is the default inline language\n    if (Prism.languages.c) {\n      Prism.languages.pure['inline-lang'].inside.rest = Prism.util.clone(\n        Prism.languages.c\n      )\n    }\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = purebasic\npurebasic.displayName = 'purebasic'\npurebasic.aliases = []\nfunction purebasic(Prism) {\n  /*\nOriginal Code by Bas Groothedde\n!!MANY THANKS!! I never would have made this, regex and me will never be best friends ;)\n==> https://codepen.io/ImagineProgramming/details/JYydBy/\nslightly changed to pass all tests\n*/\n  // PureBasic support, steal stuff from ansi-c\n  Prism.languages.purebasic = Prism.languages.extend('clike', {\n    comment: /;.*/,\n    keyword:\n      /\\b(?:align|and|as|break|calldebugger|case|compilercase|compilerdefault|compilerelse|compilerelseif|compilerendif|compilerendselect|compilererror|compilerif|compilerselect|continue|data|datasection|debug|debuglevel|declare|declarec|declarecdll|declaredll|declaremodule|default|define|dim|disableasm|disabledebugger|disableexplicit|else|elseif|enableasm|enabledebugger|enableexplicit|end|enddatasection|enddeclaremodule|endenumeration|endif|endimport|endinterface|endmacro|endmodule|endprocedure|endselect|endstructure|endstructureunion|endwith|enumeration|extends|fakereturn|for|foreach|forever|global|gosub|goto|if|import|importc|includebinary|includefile|includepath|interface|macro|module|newlist|newmap|next|not|or|procedure|procedurec|procedurecdll|proceduredll|procedurereturn|protected|prototype|prototypec|read|redim|repeat|restore|return|runtime|select|shared|static|step|structure|structureunion|swap|threaded|to|until|wend|while|with|xincludefile|xor)\\b/i,\n    function: /\\b\\w+(?:\\.\\w+)?\\s*(?=\\()/,\n    number: /(?:\\$[\\da-f]+|\\b-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)(?:e[+-]?\\d+)?)\\b/i,\n    operator:\n      /(?:@\\*?|\\?|\\*)\\w+|-[>-]?|\\+\\+?|!=?|<<?=?|>>?=?|==?|&&?|\\|?\\||[~^%?*/@]/\n  })\n  Prism.languages.insertBefore('purebasic', 'keyword', {\n    tag: /#\\w+\\$?/,\n    asm: {\n      pattern: /(^[\\t ]*)!.*/m,\n      lookbehind: true,\n      alias: 'tag',\n      inside: {\n        comment: /;.*/,\n        string: {\n          pattern: /([\"'`])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n          greedy: true\n        },\n        // Anonymous label references, i.e.: jmp @b\n        'label-reference-anonymous': {\n          pattern: /(!\\s*j[a-z]+\\s+)@[fb]/i,\n          lookbehind: true,\n          alias: 'fasm-label'\n        },\n        // Named label reference, i.e.: jne label1\n        'label-reference-addressed': {\n          pattern: /(!\\s*j[a-z]+\\s+)[A-Z._?$@][\\w.?$@~#]*/i,\n          lookbehind: true,\n          alias: 'fasm-label'\n        },\n        keyword: [\n          /\\b(?:extern|global)\\b[^;\\r\\n]*/i,\n          /\\b(?:CPU|DEFAULT|FLOAT)\\b.*/\n        ],\n        function: {\n          pattern: /^([\\t ]*!\\s*)[\\da-z]+(?=\\s|$)/im,\n          lookbehind: true\n        },\n        'function-inline': {\n          pattern: /(:\\s*)[\\da-z]+(?=\\s)/i,\n          lookbehind: true,\n          alias: 'function'\n        },\n        label: {\n          pattern: /^([\\t ]*!\\s*)[A-Za-z._?$@][\\w.?$@~#]*(?=:)/m,\n          lookbehind: true,\n          alias: 'fasm-label'\n        },\n        register:\n          /\\b(?:st\\d|[xyz]mm\\d\\d?|[cdt]r\\d|r\\d\\d?[bwd]?|[er]?[abcd]x|[abcd][hl]|[er]?(?:bp|di|si|sp)|[cdefgs]s|mm\\d+)\\b/i,\n        number:\n          /(?:\\b|-|(?=\\$))(?:0[hx](?:[\\da-f]*\\.)?[\\da-f]+(?:p[+-]?\\d+)?|\\d[\\da-f]+[hx]|\\$\\d[\\da-f]*|0[oq][0-7]+|[0-7]+[oq]|0[by][01]+|[01]+[by]|0[dt]\\d+|(?:\\d+(?:\\.\\d+)?|\\.\\d+)(?:\\.?e[+-]?\\d+)?[dt]?)\\b/i,\n        operator: /[\\[\\]*+\\-/%<>=&|$!,.:]/\n      }\n    }\n  })\n  delete Prism.languages.purebasic['class-name']\n  delete Prism.languages.purebasic['boolean']\n  Prism.languages.pbfasm = Prism.languages['purebasic']\n}\n","'use strict'\nvar refractorHaskell = require('./haskell.js')\nmodule.exports = purescript\npurescript.displayName = 'purescript'\npurescript.aliases = ['purs']\nfunction purescript(Prism) {\n  Prism.register(refractorHaskell)\n  Prism.languages.purescript = Prism.languages.extend('haskell', {\n    keyword:\n      /\\b(?:ado|case|class|data|derive|do|else|forall|if|in|infixl|infixr|instance|let|module|newtype|of|primitive|then|type|where)\\b|∀/,\n    'import-statement': {\n      // The imported or hidden names are not included in this import\n      // statement. This is because we want to highlight those exactly like\n      // we do for the names in the program.\n      pattern:\n        /(^[\\t ]*)import\\s+[A-Z][\\w']*(?:\\.[A-Z][\\w']*)*(?:\\s+as\\s+[A-Z][\\w']*(?:\\.[A-Z][\\w']*)*)?(?:\\s+hiding\\b)?/m,\n      lookbehind: true,\n      inside: {\n        keyword: /\\b(?:as|hiding|import)\\b/,\n        punctuation: /\\./\n      }\n    },\n    // These are builtin functions only. Constructors are highlighted later as a constant.\n    builtin:\n      /\\b(?:absurd|add|ap|append|apply|between|bind|bottom|clamp|compare|comparing|compose|conj|const|degree|discard|disj|div|eq|flap|flip|gcd|identity|ifM|join|lcm|liftA1|liftM1|map|max|mempty|min|mod|mul|negate|not|notEq|one|otherwise|recip|show|sub|top|unit|unless|unlessM|void|when|whenM|zero)\\b/,\n    operator: [\n      // Infix operators\n      Prism.languages.haskell.operator[0], // ASCII operators\n      Prism.languages.haskell.operator[2], // All UTF16 Unicode operator symbols\n      // This regex is equivalent to /(?=[\\x80-\\uFFFF])[\\p{gc=Math_Symbol}\\p{gc=Currency_Symbol}\\p{Modifier_Symbol}\\p{Other_Symbol}]/u\n      // See https://github.com/PrismJS/prism/issues/3006 for more details.\n      /[\\xa2-\\xa6\\xa8\\xa9\\xac\\xae-\\xb1\\xb4\\xb8\\xd7\\xf7\\u02c2-\\u02c5\\u02d2-\\u02df\\u02e5-\\u02eb\\u02ed\\u02ef-\\u02ff\\u0375\\u0384\\u0385\\u03f6\\u0482\\u058d-\\u058f\\u0606-\\u0608\\u060b\\u060e\\u060f\\u06de\\u06e9\\u06fd\\u06fe\\u07f6\\u07fe\\u07ff\\u09f2\\u09f3\\u09fa\\u09fb\\u0af1\\u0b70\\u0bf3-\\u0bfa\\u0c7f\\u0d4f\\u0d79\\u0e3f\\u0f01-\\u0f03\\u0f13\\u0f15-\\u0f17\\u0f1a-\\u0f1f\\u0f34\\u0f36\\u0f38\\u0fbe-\\u0fc5\\u0fc7-\\u0fcc\\u0fce\\u0fcf\\u0fd5-\\u0fd8\\u109e\\u109f\\u1390-\\u1399\\u166d\\u17db\\u1940\\u19de-\\u19ff\\u1b61-\\u1b6a\\u1b74-\\u1b7c\\u1fbd\\u1fbf-\\u1fc1\\u1fcd-\\u1fcf\\u1fdd-\\u1fdf\\u1fed-\\u1fef\\u1ffd\\u1ffe\\u2044\\u2052\\u207a-\\u207c\\u208a-\\u208c\\u20a0-\\u20bf\\u2100\\u2101\\u2103-\\u2106\\u2108\\u2109\\u2114\\u2116-\\u2118\\u211e-\\u2123\\u2125\\u2127\\u2129\\u212e\\u213a\\u213b\\u2140-\\u2144\\u214a-\\u214d\\u214f\\u218a\\u218b\\u2190-\\u2307\\u230c-\\u2328\\u232b-\\u2426\\u2440-\\u244a\\u249c-\\u24e9\\u2500-\\u2767\\u2794-\\u27c4\\u27c7-\\u27e5\\u27f0-\\u2982\\u2999-\\u29d7\\u29dc-\\u29fb\\u29fe-\\u2b73\\u2b76-\\u2b95\\u2b97-\\u2bff\\u2ce5-\\u2cea\\u2e50\\u2e51\\u2e80-\\u2e99\\u2e9b-\\u2ef3\\u2f00-\\u2fd5\\u2ff0-\\u2ffb\\u3004\\u3012\\u3013\\u3020\\u3036\\u3037\\u303e\\u303f\\u309b\\u309c\\u3190\\u3191\\u3196-\\u319f\\u31c0-\\u31e3\\u3200-\\u321e\\u322a-\\u3247\\u3250\\u3260-\\u327f\\u328a-\\u32b0\\u32c0-\\u33ff\\u4dc0-\\u4dff\\ua490-\\ua4c6\\ua700-\\ua716\\ua720\\ua721\\ua789\\ua78a\\ua828-\\ua82b\\ua836-\\ua839\\uaa77-\\uaa79\\uab5b\\uab6a\\uab6b\\ufb29\\ufbb2-\\ufbc1\\ufdfc\\ufdfd\\ufe62\\ufe64-\\ufe66\\ufe69\\uff04\\uff0b\\uff1c-\\uff1e\\uff3e\\uff40\\uff5c\\uff5e\\uffe0-\\uffe6\\uffe8-\\uffee\\ufffc\\ufffd]/\n    ]\n  })\n  Prism.languages.purs = Prism.languages.purescript\n}\n","'use strict'\n\nmodule.exports = python\npython.displayName = 'python'\npython.aliases = ['py']\nfunction python(Prism) {\n  Prism.languages.python = {\n    comment: {\n      pattern: /(^|[^\\\\])#.*/,\n      lookbehind: true,\n      greedy: true\n    },\n    'string-interpolation': {\n      pattern:\n        /(?:f|fr|rf)(?:(\"\"\"|''')[\\s\\S]*?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2)/i,\n      greedy: true,\n      inside: {\n        interpolation: {\n          // \"{\" <expression> <optional \"!s\", \"!r\", or \"!a\"> <optional \":\" format specifier> \"}\"\n          pattern:\n            /((?:^|[^{])(?:\\{\\{)*)\\{(?!\\{)(?:[^{}]|\\{(?!\\{)(?:[^{}]|\\{(?!\\{)(?:[^{}])+\\})+\\})+\\}/,\n          lookbehind: true,\n          inside: {\n            'format-spec': {\n              pattern: /(:)[^:(){}]+(?=\\}$)/,\n              lookbehind: true\n            },\n            'conversion-option': {\n              pattern: /![sra](?=[:}]$)/,\n              alias: 'punctuation'\n            },\n            rest: null\n          }\n        },\n        string: /[\\s\\S]+/\n      }\n    },\n    'triple-quoted-string': {\n      pattern: /(?:[rub]|br|rb)?(\"\"\"|''')[\\s\\S]*?\\1/i,\n      greedy: true,\n      alias: 'string'\n    },\n    string: {\n      pattern: /(?:[rub]|br|rb)?(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/i,\n      greedy: true\n    },\n    function: {\n      pattern: /((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/g,\n      lookbehind: true\n    },\n    'class-name': {\n      pattern: /(\\bclass\\s+)\\w+/i,\n      lookbehind: true\n    },\n    decorator: {\n      pattern: /(^[\\t ]*)@\\w+(?:\\.\\w+)*/m,\n      lookbehind: true,\n      alias: ['annotation', 'punctuation'],\n      inside: {\n        punctuation: /\\./\n      }\n    },\n    keyword:\n      /\\b(?:_(?=\\s*:)|and|as|assert|async|await|break|case|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|match|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\\b/,\n    builtin:\n      /\\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\\b/,\n    boolean: /\\b(?:False|None|True)\\b/,\n    number:\n      /\\b0(?:b(?:_?[01])+|o(?:_?[0-7])+|x(?:_?[a-f0-9])+)\\b|(?:\\b\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\B\\.\\d+(?:_\\d+)*)(?:e[+-]?\\d+(?:_\\d+)*)?j?(?!\\w)/i,\n    operator: /[-+%=]=?|!=|:=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,\n    punctuation: /[{}[\\];(),.:]/\n  }\n  Prism.languages.python['string-interpolation'].inside[\n    'interpolation'\n  ].inside.rest = Prism.languages.python\n  Prism.languages.py = Prism.languages.python\n}\n","'use strict'\n\nmodule.exports = q\nq.displayName = 'q'\nq.aliases = []\nfunction q(Prism) {\n  Prism.languages.q = {\n    string: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n    comment: [\n      // From http://code.kx.com/wiki/Reference/Slash:\n      // When / is following a space (or a right parenthesis, bracket, or brace), it is ignored with the rest of the line.\n      {\n        pattern: /([\\t )\\]}])\\/.*/,\n        lookbehind: true,\n        greedy: true\n      }, // From http://code.kx.com/wiki/Reference/Slash:\n      // A line which has / as its first character and contains at least one other non-whitespace character is a whole-line comment and is ignored entirely.\n      // A / on a line by itself begins a multiline comment which is terminated by the next \\ on a line by itself.\n      // If a / is not matched by a \\, the multiline comment is unterminated and continues to end of file.\n      // The / and \\ must be the first char on the line, but may be followed by any amount of whitespace.\n      {\n        pattern:\n          /(^|\\r?\\n|\\r)\\/[\\t ]*(?:(?:\\r?\\n|\\r)(?:.*(?:\\r?\\n|\\r(?!\\n)))*?(?:\\\\(?=[\\t ]*(?:\\r?\\n|\\r))|$)|\\S.*)/,\n        lookbehind: true,\n        greedy: true\n      }, // From http://code.kx.com/wiki/Reference/Slash:\n      // A \\ on a line by itself with no preceding matching / will comment to end of file.\n      {\n        pattern: /^\\\\[\\t ]*(?:\\r?\\n|\\r)[\\s\\S]+/m,\n        greedy: true\n      },\n      {\n        pattern: /^#!.+/m,\n        greedy: true\n      }\n    ],\n    symbol: /`(?::\\S+|[\\w.]*)/,\n    datetime: {\n      pattern:\n        /0N[mdzuvt]|0W[dtz]|\\d{4}\\.\\d\\d(?:m|\\.\\d\\d(?:T(?:\\d\\d(?::\\d\\d(?::\\d\\d(?:[.:]\\d\\d\\d)?)?)?)?)?[dz]?)|\\d\\d:\\d\\d(?::\\d\\d(?:[.:]\\d\\d\\d)?)?[uvt]?/,\n      alias: 'number'\n    },\n    // The negative look-ahead prevents bad highlighting\n    // of verbs 0: and 1:\n    number:\n      /\\b(?![01]:)(?:0N[hje]?|0W[hj]?|0[wn]|0x[\\da-fA-F]+|\\d+(?:\\.\\d*)?(?:e[+-]?\\d+)?[hjfeb]?)/,\n    keyword:\n      /\\\\\\w+\\b|\\b(?:abs|acos|aj0?|all|and|any|asc|asin|asof|atan|attr|avgs?|binr?|by|ceiling|cols|cor|cos|count|cov|cross|csv|cut|delete|deltas|desc|dev|differ|distinct|div|do|dsave|ej|enlist|eval|except|exec|exit|exp|fby|fills|first|fkeys|flip|floor|from|get|getenv|group|gtime|hclose|hcount|hdel|hopen|hsym|iasc|identity|idesc|if|ij|in|insert|inter|inv|keys?|last|like|list|ljf?|load|log|lower|lsq|ltime|ltrim|mavg|maxs?|mcount|md5|mdev|med|meta|mins?|mmax|mmin|mmu|mod|msum|neg|next|not|null|or|over|parse|peach|pj|plist|prds?|prev|prior|rand|rank|ratios|raze|read0|read1|reciprocal|reval|reverse|rload|rotate|rsave|rtrim|save|scan|scov|sdev|select|set|setenv|show|signum|sin|sqrt|ssr?|string|sublist|sums?|sv|svar|system|tables|tan|til|trim|txf|type|uj|ungroup|union|update|upper|upsert|value|var|views?|vs|wavg|where|while|within|wj1?|wsum|ww|xasc|xbar|xcols?|xdesc|xexp|xgroup|xkey|xlog|xprev|xrank)\\b/,\n    adverb: {\n      pattern: /['\\/\\\\]:?|\\beach\\b/,\n      alias: 'function'\n    },\n    verb: {\n      pattern: /(?:\\B\\.\\B|\\b[01]:|<[=>]?|>=?|[:+\\-*%,!?~=|$&#@^]):?|\\b_\\b:?/,\n      alias: 'operator'\n    },\n    punctuation: /[(){}\\[\\];.]/\n  }\n}\n","'use strict'\n\nmodule.exports = qml\nqml.displayName = 'qml'\nqml.aliases = []\nfunction qml(Prism) {\n  ;(function (Prism) {\n    var jsString = /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"|'(?:\\\\.|[^\\\\'\\r\\n])*'/.source\n    var jsComment = /\\/\\/.*(?!.)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\//.source\n    var jsExpr =\n      /(?:[^\\\\()[\\]{}\"'/]|<string>|\\/(?![*/])|<comment>|\\(<expr>*\\)|\\[<expr>*\\]|\\{<expr>*\\}|\\\\[\\s\\S])/.source\n        .replace(/<string>/g, function () {\n          return jsString\n        })\n        .replace(/<comment>/g, function () {\n          return jsComment\n        }) // the pattern will blow up, so only a few iterations\n    for (var i = 0; i < 2; i++) {\n      jsExpr = jsExpr.replace(/<expr>/g, function () {\n        return jsExpr\n      })\n    }\n    jsExpr = jsExpr.replace(/<expr>/g, '[^\\\\s\\\\S]')\n    Prism.languages.qml = {\n      comment: {\n        pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,\n        greedy: true\n      },\n      'javascript-function': {\n        pattern: RegExp(\n          /((?:^|;)[ \\t]*)function\\s+(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*\\(<js>*\\)\\s*\\{<js>*\\}/.source.replace(\n            /<js>/g,\n            function () {\n              return jsExpr\n            }\n          ),\n          'm'\n        ),\n        lookbehind: true,\n        greedy: true,\n        alias: 'language-javascript',\n        inside: Prism.languages.javascript\n      },\n      'class-name': {\n        pattern: /((?:^|[:;])[ \\t]*)(?!\\d)\\w+(?=[ \\t]*\\{|[ \\t]+on\\b)/m,\n        lookbehind: true\n      },\n      property: [\n        {\n          pattern: /((?:^|[;{])[ \\t]*)(?!\\d)\\w+(?:\\.\\w+)*(?=[ \\t]*:)/m,\n          lookbehind: true\n        },\n        {\n          pattern:\n            /((?:^|[;{])[ \\t]*)property[ \\t]+(?!\\d)\\w+(?:\\.\\w+)*[ \\t]+(?!\\d)\\w+(?:\\.\\w+)*(?=[ \\t]*:)/m,\n          lookbehind: true,\n          inside: {\n            keyword: /^property/,\n            property: /\\w+(?:\\.\\w+)*/\n          }\n        }\n      ],\n      'javascript-expression': {\n        pattern: RegExp(\n          /(:[ \\t]*)(?![\\s;}[])(?:(?!$|[;}])<js>)+/.source.replace(\n            /<js>/g,\n            function () {\n              return jsExpr\n            }\n          ),\n          'm'\n        ),\n        lookbehind: true,\n        greedy: true,\n        alias: 'language-javascript',\n        inside: Prism.languages.javascript\n      },\n      string: {\n        pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n        greedy: true\n      },\n      keyword: /\\b(?:as|import|on)\\b/,\n      punctuation: /[{}[\\]:;,]/\n    }\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = qore\nqore.displayName = 'qore'\nqore.aliases = []\nfunction qore(Prism) {\n  Prism.languages.qore = Prism.languages.extend('clike', {\n    comment: {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:\\/\\/|#).*)/,\n      lookbehind: true\n    },\n    // Overridden to allow unescaped multi-line strings\n    string: {\n      pattern: /(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n      greedy: true\n    },\n    keyword:\n      /\\b(?:abstract|any|assert|binary|bool|boolean|break|byte|case|catch|char|class|code|const|continue|data|default|do|double|else|enum|extends|final|finally|float|for|goto|hash|if|implements|import|inherits|instanceof|int|interface|long|my|native|new|nothing|null|object|our|own|private|reference|rethrow|return|short|soft(?:bool|date|float|int|list|number|string)|static|strictfp|string|sub|super|switch|synchronized|this|throw|throws|transient|try|void|volatile|while)\\b/,\n    boolean: /\\b(?:false|true)\\b/i,\n    function: /\\$?\\b(?!\\d)\\w+(?=\\()/,\n    number:\n      /\\b(?:0b[01]+|0x(?:[\\da-f]*\\.)?[\\da-fp\\-]+|(?:\\d+(?:\\.\\d+)?|\\.\\d+)(?:e\\d+)?[df]|(?:\\d+(?:\\.\\d+)?|\\.\\d+))\\b/i,\n    operator: {\n      pattern:\n        /(^|[^.])(?:\\+[+=]?|-[-=]?|[!=](?:==?|~)?|>>?=?|<(?:=>?|<=?)?|&[&=]?|\\|[|=]?|[*\\/%^]=?|[~?])/,\n      lookbehind: true\n    },\n    variable: /\\$(?!\\d)\\w+\\b/\n  })\n}\n","'use strict'\n\nmodule.exports = qsharp\nqsharp.displayName = 'qsharp'\nqsharp.aliases = ['qs']\nfunction qsharp(Prism) {\n  ;(function (Prism) {\n    /**\n     * Replaces all placeholders \"<<n>>\" of given pattern with the n-th replacement (zero based).\n     *\n     * Note: This is a simple text based replacement. Be careful when using backreferences!\n     *\n     * @param {string} pattern the given pattern.\n     * @param {string[]} replacements a list of replacement which can be inserted into the given pattern.\n     * @returns {string} the pattern with all placeholders replaced with their corresponding replacements.\n     * @example replace(/a<<0>>a/.source, [/b+/.source]) === /a(?:b+)a/.source\n     */\n    function replace(pattern, replacements) {\n      return pattern.replace(/<<(\\d+)>>/g, function (m, index) {\n        return '(?:' + replacements[+index] + ')'\n      })\n    }\n    /**\n     * @param {string} pattern\n     * @param {string[]} replacements\n     * @param {string} [flags]\n     * @returns {RegExp}\n     */\n    function re(pattern, replacements, flags) {\n      return RegExp(replace(pattern, replacements), flags || '')\n    }\n    /**\n     * Creates a nested pattern where all occurrences of the string `<<self>>` are replaced with the pattern itself.\n     *\n     * @param {string} pattern\n     * @param {number} depthLog2\n     * @returns {string}\n     */\n    function nested(pattern, depthLog2) {\n      for (var i = 0; i < depthLog2; i++) {\n        pattern = pattern.replace(/<<self>>/g, function () {\n          return '(?:' + pattern + ')'\n        })\n      }\n      return pattern.replace(/<<self>>/g, '[^\\\\s\\\\S]')\n    } // https://docs.microsoft.com/en-us/azure/quantum/user-guide/language/typesystem/\n    // https://github.com/microsoft/qsharp-language/tree/main/Specifications/Language/5_Grammar\n    var keywordKinds = {\n      // keywords which represent a return or variable type\n      type: 'Adj BigInt Bool Ctl Double false Int One Pauli PauliI PauliX PauliY PauliZ Qubit Range Result String true Unit Zero',\n      // all other keywords\n      other:\n        'Adjoint adjoint apply as auto body borrow borrowing Controlled controlled distribute elif else fail fixup for function if in internal intrinsic invert is let mutable namespace new newtype open operation repeat return self set until use using while within'\n    } // keywords\n    function keywordsToPattern(words) {\n      return '\\\\b(?:' + words.trim().replace(/ /g, '|') + ')\\\\b'\n    }\n    var keywords = RegExp(\n      keywordsToPattern(keywordKinds.type + ' ' + keywordKinds.other)\n    ) // types\n    var identifier = /\\b[A-Za-z_]\\w*\\b/.source\n    var qualifiedName = replace(/<<0>>(?:\\s*\\.\\s*<<0>>)*/.source, [identifier])\n    var typeInside = {\n      keyword: keywords,\n      punctuation: /[<>()?,.:[\\]]/\n    } // strings\n    var regularString = /\"(?:\\\\.|[^\\\\\"])*\"/.source\n    Prism.languages.qsharp = Prism.languages.extend('clike', {\n      comment: /\\/\\/.*/,\n      string: [\n        {\n          pattern: re(/(^|[^$\\\\])<<0>>/.source, [regularString]),\n          lookbehind: true,\n          greedy: true\n        }\n      ],\n      'class-name': [\n        {\n          // open Microsoft.Quantum.Canon;\n          // open Microsoft.Quantum.Canon as CN;\n          pattern: re(/(\\b(?:as|open)\\s+)<<0>>(?=\\s*(?:;|as\\b))/.source, [\n            qualifiedName\n          ]),\n          lookbehind: true,\n          inside: typeInside\n        },\n        {\n          // namespace Quantum.App1;\n          pattern: re(/(\\bnamespace\\s+)<<0>>(?=\\s*\\{)/.source, [qualifiedName]),\n          lookbehind: true,\n          inside: typeInside\n        }\n      ],\n      keyword: keywords,\n      number:\n        /(?:\\b0(?:x[\\da-f]+|b[01]+|o[0-7]+)|(?:\\B\\.\\d+|\\b\\d+(?:\\.\\d*)?)(?:e[-+]?\\d+)?)l?\\b/i,\n      operator:\n        /\\band=|\\bor=|\\band\\b|\\bnot\\b|\\bor\\b|<[-=]|[-=]>|>>>=?|<<<=?|\\^\\^\\^=?|\\|\\|\\|=?|&&&=?|w\\/=?|~~~|[*\\/+\\-^=!%]=?/,\n      punctuation: /::|[{}[\\];(),.:]/\n    })\n    Prism.languages.insertBefore('qsharp', 'number', {\n      range: {\n        pattern: /\\.\\./,\n        alias: 'operator'\n      }\n    }) // single line\n    var interpolationExpr = nested(\n      replace(/\\{(?:[^\"{}]|<<0>>|<<self>>)*\\}/.source, [regularString]),\n      2\n    )\n    Prism.languages.insertBefore('qsharp', 'string', {\n      'interpolation-string': {\n        pattern: re(/\\$\"(?:\\\\.|<<0>>|[^\\\\\"{])*\"/.source, [interpolationExpr]),\n        greedy: true,\n        inside: {\n          interpolation: {\n            pattern: re(/((?:^|[^\\\\])(?:\\\\\\\\)*)<<0>>/.source, [\n              interpolationExpr\n            ]),\n            lookbehind: true,\n            inside: {\n              punctuation: /^\\{|\\}$/,\n              expression: {\n                pattern: /[\\s\\S]+/,\n                alias: 'language-qsharp',\n                inside: Prism.languages.qsharp\n              }\n            }\n          },\n          string: /[\\s\\S]+/\n        }\n      }\n    })\n  })(Prism)\n  Prism.languages.qs = Prism.languages.qsharp\n}\n","'use strict'\n\nmodule.exports = r\nr.displayName = 'r'\nr.aliases = []\nfunction r(Prism) {\n  Prism.languages.r = {\n    comment: /#.*/,\n    string: {\n      pattern: /(['\"])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true\n    },\n    'percent-operator': {\n      // Includes user-defined operators\n      // and %%, %*%, %/%, %in%, %o%, %x%\n      pattern: /%[^%\\s]*%/,\n      alias: 'operator'\n    },\n    boolean: /\\b(?:FALSE|TRUE)\\b/,\n    ellipsis: /\\.\\.(?:\\.|\\d+)/,\n    number: [\n      /\\b(?:Inf|NaN)\\b/,\n      /(?:\\b0x[\\dA-Fa-f]+(?:\\.\\d*)?|\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[EePp][+-]?\\d+)?[iL]?/\n    ],\n    keyword:\n      /\\b(?:NA|NA_character_|NA_complex_|NA_integer_|NA_real_|NULL|break|else|for|function|if|in|next|repeat|while)\\b/,\n    operator: /->?>?|<(?:=|<?-)?|[>=!]=?|::?|&&?|\\|\\|?|[+*\\/^$@~]/,\n    punctuation: /[(){}\\[\\],;]/\n  }\n}\n","'use strict'\nvar refractorScheme = require('./scheme.js')\nmodule.exports = racket\nracket.displayName = 'racket'\nracket.aliases = ['rkt']\nfunction racket(Prism) {\n  Prism.register(refractorScheme)\n  Prism.languages.racket = Prism.languages.extend('scheme', {\n    'lambda-parameter': {\n      // the racket lambda syntax is a lot more complex, so we won't even attempt to capture it.\n      // this will just prevent false positives of the `function` pattern\n      pattern: /([(\\[]lambda\\s+[(\\[])[^()\\[\\]'\\s]+/,\n      lookbehind: true\n    }\n  })\n  Prism.languages.insertBefore('racket', 'string', {\n    lang: {\n      pattern: /^#lang.+/m,\n      greedy: true,\n      alias: 'keyword'\n    }\n  })\n  Prism.languages.rkt = Prism.languages.racket\n}\n","'use strict'\n\nmodule.exports = reason\nreason.displayName = 'reason'\nreason.aliases = []\nfunction reason(Prism) {\n  Prism.languages.reason = Prism.languages.extend('clike', {\n    string: {\n      pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,\n      greedy: true\n    },\n    // 'class-name' must be matched *after* 'constructor' defined below\n    'class-name': /\\b[A-Z]\\w*/,\n    keyword:\n      /\\b(?:and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|sig|struct|switch|then|to|try|type|val|virtual|when|while|with)\\b/,\n    operator:\n      /\\.{3}|:[:=]|\\|>|->|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\\-*\\/]\\.?|\\b(?:asr|land|lor|lsl|lsr|lxor|mod)\\b/\n  })\n  Prism.languages.insertBefore('reason', 'class-name', {\n    char: {\n      pattern: /'(?:\\\\x[\\da-f]{2}|\\\\o[0-3][0-7][0-7]|\\\\\\d{3}|\\\\.|[^'\\\\\\r\\n])'/,\n      greedy: true\n    },\n    // Negative look-ahead prevents from matching things like String.capitalize\n    constructor: /\\b[A-Z]\\w*\\b(?!\\s*\\.)/,\n    label: {\n      pattern: /\\b[a-z]\\w*(?=::)/,\n      alias: 'symbol'\n    }\n  }) // We can't match functions property, so let's not even try.\n  delete Prism.languages.reason.function\n}\n","'use strict'\n\nmodule.exports = regex\nregex.displayName = 'regex'\nregex.aliases = []\nfunction regex(Prism) {\n  ;(function (Prism) {\n    var specialEscape = {\n      pattern: /\\\\[\\\\(){}[\\]^$+*?|.]/,\n      alias: 'escape'\n    }\n    var escape =\n      /\\\\(?:x[\\da-fA-F]{2}|u[\\da-fA-F]{4}|u\\{[\\da-fA-F]+\\}|0[0-7]{0,2}|[123][0-7]{2}|c[a-zA-Z]|.)/\n    var charSet = {\n      pattern: /\\.|\\\\[wsd]|\\\\p\\{[^{}]+\\}/i,\n      alias: 'class-name'\n    }\n    var charSetWithoutDot = {\n      pattern: /\\\\[wsd]|\\\\p\\{[^{}]+\\}/i,\n      alias: 'class-name'\n    }\n    var rangeChar = '(?:[^\\\\\\\\-]|' + escape.source + ')'\n    var range = RegExp(rangeChar + '-' + rangeChar) // the name of a capturing group\n    var groupName = {\n      pattern: /(<|')[^<>']+(?=[>']$)/,\n      lookbehind: true,\n      alias: 'variable'\n    }\n    Prism.languages.regex = {\n      'char-class': {\n        pattern: /((?:^|[^\\\\])(?:\\\\\\\\)*)\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*\\]/,\n        lookbehind: true,\n        inside: {\n          'char-class-negation': {\n            pattern: /(^\\[)\\^/,\n            lookbehind: true,\n            alias: 'operator'\n          },\n          'char-class-punctuation': {\n            pattern: /^\\[|\\]$/,\n            alias: 'punctuation'\n          },\n          range: {\n            pattern: range,\n            inside: {\n              escape: escape,\n              'range-punctuation': {\n                pattern: /-/,\n                alias: 'operator'\n              }\n            }\n          },\n          'special-escape': specialEscape,\n          'char-set': charSetWithoutDot,\n          escape: escape\n        }\n      },\n      'special-escape': specialEscape,\n      'char-set': charSet,\n      backreference: [\n        {\n          // a backreference which is not an octal escape\n          pattern: /\\\\(?![123][0-7]{2})[1-9]/,\n          alias: 'keyword'\n        },\n        {\n          pattern: /\\\\k<[^<>']+>/,\n          alias: 'keyword',\n          inside: {\n            'group-name': groupName\n          }\n        }\n      ],\n      anchor: {\n        pattern: /[$^]|\\\\[ABbGZz]/,\n        alias: 'function'\n      },\n      escape: escape,\n      group: [\n        {\n          // https://docs.oracle.com/javase/10/docs/api/java/util/regex/Pattern.html\n          // https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference?view=netframework-4.7.2#grouping-constructs\n          // (), (?<name>), (?'name'), (?>), (?:), (?=), (?!), (?<=), (?<!), (?is-m), (?i-m:)\n          pattern:\n            /\\((?:\\?(?:<[^<>']+>|'[^<>']+'|[>:]|<?[=!]|[idmnsuxU]+(?:-[idmnsuxU]+)?:?))?/,\n          alias: 'punctuation',\n          inside: {\n            'group-name': groupName\n          }\n        },\n        {\n          pattern: /\\)/,\n          alias: 'punctuation'\n        }\n      ],\n      quantifier: {\n        pattern: /(?:[+*?]|\\{\\d+(?:,\\d*)?\\})[?+]?/,\n        alias: 'number'\n      },\n      alternation: {\n        pattern: /\\|/,\n        alias: 'keyword'\n      }\n    }\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = rego\nrego.displayName = 'rego'\nrego.aliases = []\nfunction rego(Prism) {\n  // https://www.openpolicyagent.org/docs/latest/policy-reference/\n  Prism.languages.rego = {\n    comment: /#.*/,\n    property: {\n      pattern:\n        /(^|[^\\\\.])(?:\"(?:\\\\.|[^\\\\\"\\r\\n])*\"|`[^`]*`|\\b[a-z_]\\w*\\b)(?=\\s*:(?!=))/i,\n      lookbehind: true,\n      greedy: true\n    },\n    string: {\n      pattern: /(^|[^\\\\])\"(?:\\\\.|[^\\\\\"\\r\\n])*\"|`[^`]*`/,\n      lookbehind: true,\n      greedy: true\n    },\n    keyword:\n      /\\b(?:as|default|else|import|not|null|package|set(?=\\s*\\()|some|with)\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    function: {\n      pattern: /\\b[a-z_]\\w*\\b(?:\\s*\\.\\s*\\b[a-z_]\\w*\\b)*(?=\\s*\\()/i,\n      inside: {\n        namespace: /\\b\\w+\\b(?=\\s*\\.)/,\n        punctuation: /\\./\n      }\n    },\n    number: /-?\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n    operator: /[-+*/%|&]|[<>:=]=?|!=|\\b_\\b/,\n    punctuation: /[,;.\\[\\]{}()]/\n  }\n}\n","'use strict'\n\nmodule.exports = renpy\nrenpy.displayName = 'renpy'\nrenpy.aliases = ['rpy']\nfunction renpy(Prism) {\n  Prism.languages.renpy = {\n    comment: {\n      pattern: /(^|[^\\\\])#.+/,\n      lookbehind: true\n    },\n    string: {\n      pattern:\n        /(\"\"\"|''')[\\s\\S]+?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\])*\\2|(?:^#?(?:(?:[0-9a-fA-F]){3}|[0-9a-fA-F]{6})$)/m,\n      greedy: true\n    },\n    function: /\\b[a-z_]\\w*(?=\\()/i,\n    property:\n      /\\b(?:Update|UpdateVersion|action|activate_sound|adv_nvl_transition|after_load_transition|align|alpha|alt|anchor|antialias|area|auto|background|bar_invert|bar_resizing|bar_vertical|black_color|bold|bottom_bar|bottom_gutter|bottom_margin|bottom_padding|box_reverse|box_wrap|can_update|caret|child|color|crop|default_afm_enable|default_afm_time|default_fullscreen|default_text_cps|developer|directory_name|drag_handle|drag_joined|drag_name|drag_raise|draggable|dragged|drop_shadow|drop_shadow_color|droppable|dropped|easein|easeout|edgescroll|end_game_transition|end_splash_transition|enter_replay_transition|enter_sound|enter_transition|enter_yesno_transition|executable_name|exit_replay_transition|exit_sound|exit_transition|exit_yesno_transition|fadein|fadeout|first_indent|first_spacing|fit_first|focus|focus_mask|font|foreground|game_main_transition|get_installed_packages|google_play_key|google_play_salt|ground|has_music|has_sound|has_voice|height|help|hinting|hover|hover_background|hover_color|hover_sound|hovered|hyperlink_functions|idle|idle_color|image_style|include_update|insensitive|insensitive_background|insensitive_color|inside|intra_transition|italic|justify|kerning|keyboard_focus|language|layer_clipping|layers|layout|left_bar|left_gutter|left_margin|left_padding|length|line_leading|line_overlap_split|line_spacing|linear|main_game_transition|main_menu_music|maximum|min_width|minimum|minwidth|modal|mouse|mousewheel|name|narrator_menu|newline_indent|nvl_adv_transition|offset|order_reverse|outlines|overlay_functions|pos|position|prefix|radius|range|rest_indent|right_bar|right_gutter|right_margin|right_padding|rotate|rotate_pad|ruby_style|sample_sound|save_directory|say_attribute_transition|screen_height|screen_width|scrollbars|selected_hover|selected_hover_color|selected_idle|selected_idle_color|selected_insensitive|show_side_image|show_two_window|side_spacing|side_xpos|side_ypos|size|size_group|slow_cps|slow_cps_multiplier|spacing|strikethrough|subpixel|text_align|text_style|text_xpos|text_y_fudge|text_ypos|thumb|thumb_offset|thumb_shadow|thumbnail_height|thumbnail_width|time|top_bar|top_gutter|top_margin|top_padding|translations|underline|unscrollable|update|value|version|version_name|version_tuple|vertical|width|window_hide_transition|window_icon|window_left_padding|window_show_transition|window_title|windows_icon|xadjustment|xalign|xanchor|xanchoraround|xaround|xcenter|xfill|xinitial|xmargin|xmaximum|xminimum|xoffset|xofsset|xpadding|xpos|xsize|xzoom|yadjustment|yalign|yanchor|yanchoraround|yaround|ycenter|yfill|yinitial|ymargin|ymaximum|yminimum|yoffset|ypadding|ypos|ysize|ysizexysize|yzoom|zoom|zorder)\\b/,\n    tag: /\\b(?:bar|block|button|buttoscreenn|drag|draggroup|fixed|frame|grid|[hv]box|hotbar|hotspot|image|imagebutton|imagemap|input|key|label|menu|mm_menu_frame|mousearea|nvl|parallel|screen|self|side|tag|text|textbutton|timer|vbar|viewport|window)\\b|\\$/,\n    keyword:\n      /\\b(?:None|add|adjustment|alignaround|allow|angle|animation|around|as|assert|behind|box_layout|break|build|cache|call|center|changed|child_size|choice|circles|class|clear|clicked|clipping|clockwise|config|contains|continue|corner1|corner2|counterclockwise|def|default|define|del|delay|disabled|disabled_text|dissolve|elif|else|event|except|exclude|exec|expression|fade|finally|for|from|function|global|gm_root|has|hide|id|if|import|in|init|is|jump|knot|lambda|left|less_rounded|mm_root|movie|music|null|on|onlayer|pass|pause|persistent|play|print|python|queue|raise|random|renpy|repeat|return|right|rounded_window|scene|scope|set|show|slow|slow_abortable|slow_done|sound|stop|store|style|style_group|substitute|suffix|theme|transform|transform_anchor|transpose|try|ui|unhovered|updater|use|voice|while|widget|widget_hover|widget_selected|widget_text|yield)\\b/,\n    boolean: /\\b(?:[Ff]alse|[Tt]rue)\\b/,\n    number:\n      /(?:\\b(?:0[bo])?(?:(?:\\d|0x[\\da-f])[\\da-f]*(?:\\.\\d*)?)|\\B\\.\\d+)(?:e[+-]?\\d+)?j?/i,\n    operator:\n      /[-+%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]|\\b(?:and|at|not|or|with)\\b/,\n    punctuation: /[{}[\\];(),.:]/\n  }\n  Prism.languages.rpy = Prism.languages.renpy\n}\n","'use strict'\n\nmodule.exports = rest\nrest.displayName = 'rest'\nrest.aliases = []\nfunction rest(Prism) {\n  Prism.languages.rest = {\n    table: [\n      {\n        pattern:\n          /(^[\\t ]*)(?:\\+[=-]+)+\\+(?:\\r?\\n|\\r)(?:\\1[+|].+[+|](?:\\r?\\n|\\r))+\\1(?:\\+[=-]+)+\\+/m,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\||(?:\\+[=-]+)+\\+/\n        }\n      },\n      {\n        pattern:\n          /(^[\\t ]*)=+ [ =]*=(?:(?:\\r?\\n|\\r)\\1.+)+(?:\\r?\\n|\\r)\\1=+ [ =]*=(?=(?:\\r?\\n|\\r){2}|\\s*$)/m,\n        lookbehind: true,\n        inside: {\n          punctuation: /[=-]+/\n        }\n      }\n    ],\n    // Directive-like patterns\n    'substitution-def': {\n      pattern: /(^[\\t ]*\\.\\. )\\|(?:[^|\\s](?:[^|]*[^|\\s])?)\\| [^:]+::/m,\n      lookbehind: true,\n      inside: {\n        substitution: {\n          pattern: /^\\|(?:[^|\\s]|[^|\\s][^|]*[^|\\s])\\|/,\n          alias: 'attr-value',\n          inside: {\n            punctuation: /^\\||\\|$/\n          }\n        },\n        directive: {\n          pattern: /( )(?! )[^:]+::/,\n          lookbehind: true,\n          alias: 'function',\n          inside: {\n            punctuation: /::$/\n          }\n        }\n      }\n    },\n    'link-target': [\n      {\n        pattern: /(^[\\t ]*\\.\\. )\\[[^\\]]+\\]/m,\n        lookbehind: true,\n        alias: 'string',\n        inside: {\n          punctuation: /^\\[|\\]$/\n        }\n      },\n      {\n        pattern: /(^[\\t ]*\\.\\. )_(?:`[^`]+`|(?:[^:\\\\]|\\\\.)+):/m,\n        lookbehind: true,\n        alias: 'string',\n        inside: {\n          punctuation: /^_|:$/\n        }\n      }\n    ],\n    directive: {\n      pattern: /(^[\\t ]*\\.\\. )[^:]+::/m,\n      lookbehind: true,\n      alias: 'function',\n      inside: {\n        punctuation: /::$/\n      }\n    },\n    comment: {\n      // The two alternatives try to prevent highlighting of blank comments\n      pattern:\n        /(^[\\t ]*\\.\\.)(?:(?: .+)?(?:(?:\\r?\\n|\\r).+)+| .+)(?=(?:\\r?\\n|\\r){2}|$)/m,\n      lookbehind: true\n    },\n    title: [\n      // Overlined and underlined\n      {\n        pattern:\n          /^(([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~])\\2+)(?:\\r?\\n|\\r).+(?:\\r?\\n|\\r)\\1$/m,\n        inside: {\n          punctuation:\n            /^[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~]+|[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~]+$/,\n          important: /.+/\n        }\n      }, // Underlined only\n      {\n        pattern:\n          /(^|(?:\\r?\\n|\\r){2}).+(?:\\r?\\n|\\r)([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~])\\2+(?=\\r?\\n|\\r|$)/,\n        lookbehind: true,\n        inside: {\n          punctuation: /[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~]+$/,\n          important: /.+/\n        }\n      }\n    ],\n    hr: {\n      pattern:\n        /((?:\\r?\\n|\\r){2})([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~])\\2{3,}(?=(?:\\r?\\n|\\r){2})/,\n      lookbehind: true,\n      alias: 'punctuation'\n    },\n    field: {\n      pattern: /(^[\\t ]*):[^:\\r\\n]+:(?= )/m,\n      lookbehind: true,\n      alias: 'attr-name'\n    },\n    'command-line-option': {\n      pattern:\n        /(^[\\t ]*)(?:[+-][a-z\\d]|(?:--|\\/)[a-z\\d-]+)(?:[ =](?:[a-z][\\w-]*|<[^<>]+>))?(?:, (?:[+-][a-z\\d]|(?:--|\\/)[a-z\\d-]+)(?:[ =](?:[a-z][\\w-]*|<[^<>]+>))?)*(?=(?:\\r?\\n|\\r)? {2,}\\S)/im,\n      lookbehind: true,\n      alias: 'symbol'\n    },\n    'literal-block': {\n      pattern: /::(?:\\r?\\n|\\r){2}([ \\t]+)(?![ \\t]).+(?:(?:\\r?\\n|\\r)\\1.+)*/,\n      inside: {\n        'literal-block-punctuation': {\n          pattern: /^::/,\n          alias: 'punctuation'\n        }\n      }\n    },\n    'quoted-literal-block': {\n      pattern:\n        /::(?:\\r?\\n|\\r){2}([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~]).*(?:(?:\\r?\\n|\\r)\\1.*)*/,\n      inside: {\n        'literal-block-punctuation': {\n          pattern: /^(?:::|([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~])\\1*)/m,\n          alias: 'punctuation'\n        }\n      }\n    },\n    'list-bullet': {\n      pattern:\n        /(^[\\t ]*)(?:[*+\\-•‣⁃]|\\(?(?:\\d+|[a-z]|[ivxdclm]+)\\)|(?:\\d+|[a-z]|[ivxdclm]+)\\.)(?= )/im,\n      lookbehind: true,\n      alias: 'punctuation'\n    },\n    'doctest-block': {\n      pattern: /(^[\\t ]*)>>> .+(?:(?:\\r?\\n|\\r).+)*/m,\n      lookbehind: true,\n      inside: {\n        punctuation: /^>>>/\n      }\n    },\n    inline: [\n      {\n        pattern:\n          /(^|[\\s\\-:\\/'\"<(\\[{])(?::[^:]+:`.*?`|`.*?`:[^:]+:|(\\*\\*?|``?|\\|)(?!\\s)(?:(?!\\2).)*\\S\\2(?=[\\s\\-.,:;!?\\\\\\/'\")\\]}]|$))/m,\n        lookbehind: true,\n        inside: {\n          bold: {\n            pattern: /(^\\*\\*).+(?=\\*\\*$)/,\n            lookbehind: true\n          },\n          italic: {\n            pattern: /(^\\*).+(?=\\*$)/,\n            lookbehind: true\n          },\n          'inline-literal': {\n            pattern: /(^``).+(?=``$)/,\n            lookbehind: true,\n            alias: 'symbol'\n          },\n          role: {\n            pattern: /^:[^:]+:|:[^:]+:$/,\n            alias: 'function',\n            inside: {\n              punctuation: /^:|:$/\n            }\n          },\n          'interpreted-text': {\n            pattern: /(^`).+(?=`$)/,\n            lookbehind: true,\n            alias: 'attr-value'\n          },\n          substitution: {\n            pattern: /(^\\|).+(?=\\|$)/,\n            lookbehind: true,\n            alias: 'attr-value'\n          },\n          punctuation: /\\*\\*?|``?|\\|/\n        }\n      }\n    ],\n    link: [\n      {\n        pattern: /\\[[^\\[\\]]+\\]_(?=[\\s\\-.,:;!?\\\\\\/'\")\\]}]|$)/,\n        alias: 'string',\n        inside: {\n          punctuation: /^\\[|\\]_$/\n        }\n      },\n      {\n        pattern:\n          /(?:\\b[a-z\\d]+(?:[_.:+][a-z\\d]+)*_?_|`[^`]+`_?_|_`[^`]+`)(?=[\\s\\-.,:;!?\\\\\\/'\")\\]}]|$)/i,\n        alias: 'string',\n        inside: {\n          punctuation: /^_?`|`$|`?_?_$/\n        }\n      }\n    ],\n    // Line block start,\n    // quote attribution,\n    // explicit markup start,\n    // and anonymous hyperlink target shortcut (__)\n    punctuation: {\n      pattern: /(^[\\t ]*)(?:\\|(?= |$)|(?:---?|—|\\.\\.|__)(?= )|\\.\\.$)/m,\n      lookbehind: true\n    }\n  }\n}\n","'use strict'\n\nmodule.exports = rip\nrip.displayName = 'rip'\nrip.aliases = []\nfunction rip(Prism) {\n  Prism.languages.rip = {\n    comment: {\n      pattern: /#.*/,\n      greedy: true\n    },\n    char: {\n      pattern: /\\B`[^\\s`'\",.:;#\\/\\\\()<>\\[\\]{}]\\b/,\n      greedy: true\n    },\n    string: {\n      pattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true\n    },\n    regex: {\n      pattern:\n        /(^|[^/])\\/(?!\\/)(?:\\[[^\\n\\r\\]]*\\]|\\\\.|[^/\\\\\\r\\n\\[])+\\/(?=\\s*(?:$|[\\r\\n,.;})]))/,\n      lookbehind: true,\n      greedy: true\n    },\n    keyword:\n      /(?:=>|->)|\\b(?:case|catch|class|else|exit|finally|if|raise|return|switch|try)\\b/,\n    builtin: /@|\\bSystem\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    date: /\\b\\d{4}-\\d{2}-\\d{2}\\b/,\n    time: /\\b\\d{2}:\\d{2}:\\d{2}\\b/,\n    datetime: /\\b\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\b/,\n    symbol: /:[^\\d\\s`'\",.:;#\\/\\\\()<>\\[\\]{}][^\\s`'\",.:;#\\/\\\\()<>\\[\\]{}]*/,\n    number: /[+-]?\\b(?:\\d+\\.\\d+|\\d+)\\b/,\n    punctuation: /(?:\\.{2,3})|[`,.:;=\\/\\\\()<>\\[\\]{}]/,\n    reference: /[^\\d\\s`'\",.:;#\\/\\\\()<>\\[\\]{}][^\\s`'\",.:;#\\/\\\\()<>\\[\\]{}]*/\n  }\n}\n","'use strict'\n\nmodule.exports = roboconf\nroboconf.displayName = 'roboconf'\nroboconf.aliases = []\nfunction roboconf(Prism) {\n  Prism.languages.roboconf = {\n    comment: /#.*/,\n    keyword: {\n      pattern:\n        /(^|\\s)(?:(?:external|import)\\b|(?:facet|instance of)(?=[ \\t]+[\\w-]+[ \\t]*\\{))/,\n      lookbehind: true\n    },\n    component: {\n      pattern: /[\\w-]+(?=[ \\t]*\\{)/,\n      alias: 'variable'\n    },\n    property: /[\\w.-]+(?=[ \\t]*:)/,\n    value: {\n      pattern: /(=[ \\t]*(?![ \\t]))[^,;]+/,\n      lookbehind: true,\n      alias: 'attr-value'\n    },\n    optional: {\n      pattern: /\\(optional\\)/,\n      alias: 'builtin'\n    },\n    wildcard: {\n      pattern: /(\\.)\\*/,\n      lookbehind: true,\n      alias: 'operator'\n    },\n    punctuation: /[{},.;:=]/\n  }\n}\n","'use strict'\n\nmodule.exports = robotframework\nrobotframework.displayName = 'robotframework'\nrobotframework.aliases = []\nfunction robotframework(Prism) {\n  ;(function (Prism) {\n    var comment = {\n      pattern: /(^[ \\t]*| {2}|\\t)#.*/m,\n      lookbehind: true,\n      greedy: true\n    }\n    var variable = {\n      pattern: /((?:^|[^\\\\])(?:\\\\{2})*)[$@&%]\\{(?:[^{}\\r\\n]|\\{[^{}\\r\\n]*\\})*\\}/,\n      lookbehind: true,\n      inside: {\n        punctuation: /^[$@&%]\\{|\\}$/\n      }\n    }\n    function createSection(name, inside) {\n      var extendecInside = {}\n      extendecInside['section-header'] = {\n        pattern: /^ ?\\*{3}.+?\\*{3}/,\n        alias: 'keyword'\n      } // copy inside tokens\n      for (var token in inside) {\n        extendecInside[token] = inside[token]\n      }\n      extendecInside['tag'] = {\n        pattern: /([\\r\\n](?: {2}|\\t)[ \\t]*)\\[[-\\w]+\\]/,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\[|\\]/\n        }\n      }\n      extendecInside['variable'] = variable\n      extendecInside['comment'] = comment\n      return {\n        pattern: RegExp(\n          /^ ?\\*{3}[ \\t]*<name>[ \\t]*\\*{3}(?:.|[\\r\\n](?!\\*{3}))*/.source.replace(\n            /<name>/g,\n            function () {\n              return name\n            }\n          ),\n          'im'\n        ),\n        alias: 'section',\n        inside: extendecInside\n      }\n    }\n    var docTag = {\n      pattern:\n        /(\\[Documentation\\](?: {2}|\\t)[ \\t]*)(?![ \\t]|#)(?:.|(?:\\r\\n?|\\n)[ \\t]*\\.{3})+/,\n      lookbehind: true,\n      alias: 'string'\n    }\n    var testNameLike = {\n      pattern: /([\\r\\n] ?)(?!#)(?:\\S(?:[ \\t]\\S)*)+/,\n      lookbehind: true,\n      alias: 'function',\n      inside: {\n        variable: variable\n      }\n    }\n    var testPropertyLike = {\n      pattern: /([\\r\\n](?: {2}|\\t)[ \\t]*)(?!\\[|\\.{3}|#)(?:\\S(?:[ \\t]\\S)*)+/,\n      lookbehind: true,\n      inside: {\n        variable: variable\n      }\n    }\n    Prism.languages['robotframework'] = {\n      settings: createSection('Settings', {\n        documentation: {\n          pattern:\n            /([\\r\\n] ?Documentation(?: {2}|\\t)[ \\t]*)(?![ \\t]|#)(?:.|(?:\\r\\n?|\\n)[ \\t]*\\.{3})+/,\n          lookbehind: true,\n          alias: 'string'\n        },\n        property: {\n          pattern: /([\\r\\n] ?)(?!\\.{3}|#)(?:\\S(?:[ \\t]\\S)*)+/,\n          lookbehind: true\n        }\n      }),\n      variables: createSection('Variables'),\n      'test-cases': createSection('Test Cases', {\n        'test-name': testNameLike,\n        documentation: docTag,\n        property: testPropertyLike\n      }),\n      keywords: createSection('Keywords', {\n        'keyword-name': testNameLike,\n        documentation: docTag,\n        property: testPropertyLike\n      }),\n      tasks: createSection('Tasks', {\n        'task-name': testNameLike,\n        documentation: docTag,\n        property: testPropertyLike\n      }),\n      comment: comment\n    }\n    Prism.languages.robot = Prism.languages['robotframework']\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = ruby\nruby.displayName = 'ruby'\nruby.aliases = ['rb']\nfunction ruby(Prism) {\n  /**\n   * Original by Samuel Flores\n   *\n   * Adds the following new token classes:\n   *     constant, builtin, variable, symbol, regex\n   */\n  ;(function (Prism) {\n    Prism.languages.ruby = Prism.languages.extend('clike', {\n      comment: {\n        pattern: /#.*|^=begin\\s[\\s\\S]*?^=end/m,\n        greedy: true\n      },\n      'class-name': {\n        pattern:\n          /(\\b(?:class|module)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+|\\b[A-Z_]\\w*(?=\\s*\\.\\s*new\\b)/,\n        lookbehind: true,\n        inside: {\n          punctuation: /[.\\\\]/\n        }\n      },\n      keyword:\n        /\\b(?:BEGIN|END|alias|and|begin|break|case|class|def|define_method|defined|do|each|else|elsif|end|ensure|extend|for|if|in|include|module|new|next|nil|not|or|prepend|private|protected|public|raise|redo|require|rescue|retry|return|self|super|then|throw|undef|unless|until|when|while|yield)\\b/,\n      operator:\n        /\\.{2,3}|&\\.|===|<?=>|[!=]?~|(?:&&|\\|\\||<<|>>|\\*\\*|[+\\-*/%<>!^&|=])=?|[?:]/,\n      punctuation: /[(){}[\\].,;]/\n    })\n    Prism.languages.insertBefore('ruby', 'operator', {\n      'double-colon': {\n        pattern: /::/,\n        alias: 'punctuation'\n      }\n    })\n    var interpolation = {\n      pattern: /((?:^|[^\\\\])(?:\\\\{2})*)#\\{(?:[^{}]|\\{[^{}]*\\})*\\}/,\n      lookbehind: true,\n      inside: {\n        content: {\n          pattern: /^(#\\{)[\\s\\S]+(?=\\}$)/,\n          lookbehind: true,\n          inside: Prism.languages.ruby\n        },\n        delimiter: {\n          pattern: /^#\\{|\\}$/,\n          alias: 'punctuation'\n        }\n      }\n    }\n    delete Prism.languages.ruby.function\n    var percentExpression =\n      '(?:' +\n      [\n        /([^a-zA-Z0-9\\s{(\\[<=])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/.source,\n        /\\((?:[^()\\\\]|\\\\[\\s\\S]|\\((?:[^()\\\\]|\\\\[\\s\\S])*\\))*\\)/.source,\n        /\\{(?:[^{}\\\\]|\\\\[\\s\\S]|\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\})*\\}/.source,\n        /\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S]|\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\])*\\]/.source,\n        /<(?:[^<>\\\\]|\\\\[\\s\\S]|<(?:[^<>\\\\]|\\\\[\\s\\S])*>)*>/.source\n      ].join('|') +\n      ')'\n    var symbolName =\n      /(?:\"(?:\\\\.|[^\"\\\\\\r\\n])*\"|(?:\\b[a-zA-Z_]\\w*|[^\\s\\0-\\x7F]+)[?!]?|\\$.)/\n        .source\n    Prism.languages.insertBefore('ruby', 'keyword', {\n      'regex-literal': [\n        {\n          pattern: RegExp(\n            /%r/.source + percentExpression + /[egimnosux]{0,6}/.source\n          ),\n          greedy: true,\n          inside: {\n            interpolation: interpolation,\n            regex: /[\\s\\S]+/\n          }\n        },\n        {\n          pattern:\n            /(^|[^/])\\/(?!\\/)(?:\\[[^\\r\\n\\]]+\\]|\\\\.|[^[/\\\\\\r\\n])+\\/[egimnosux]{0,6}(?=\\s*(?:$|[\\r\\n,.;})#]))/,\n          lookbehind: true,\n          greedy: true,\n          inside: {\n            interpolation: interpolation,\n            regex: /[\\s\\S]+/\n          }\n        }\n      ],\n      variable: /[@$]+[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n      symbol: [\n        {\n          pattern: RegExp(/(^|[^:]):/.source + symbolName),\n          lookbehind: true,\n          greedy: true\n        },\n        {\n          pattern: RegExp(\n            /([\\r\\n{(,][ \\t]*)/.source + symbolName + /(?=:(?!:))/.source\n          ),\n          lookbehind: true,\n          greedy: true\n        }\n      ],\n      'method-definition': {\n        pattern: /(\\bdef\\s+)\\w+(?:\\s*\\.\\s*\\w+)?/,\n        lookbehind: true,\n        inside: {\n          function: /\\b\\w+$/,\n          keyword: /^self\\b/,\n          'class-name': /^\\w+/,\n          punctuation: /\\./\n        }\n      }\n    })\n    Prism.languages.insertBefore('ruby', 'string', {\n      'string-literal': [\n        {\n          pattern: RegExp(/%[qQiIwWs]?/.source + percentExpression),\n          greedy: true,\n          inside: {\n            interpolation: interpolation,\n            string: /[\\s\\S]+/\n          }\n        },\n        {\n          pattern:\n            /(\"|')(?:#\\{[^}]+\\}|#(?!\\{)|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\#\\r\\n])*\\1/,\n          greedy: true,\n          inside: {\n            interpolation: interpolation,\n            string: /[\\s\\S]+/\n          }\n        },\n        {\n          pattern: /<<[-~]?([a-z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?[\\t ]*\\1/i,\n          alias: 'heredoc-string',\n          greedy: true,\n          inside: {\n            delimiter: {\n              pattern: /^<<[-~]?[a-z_]\\w*|\\b[a-z_]\\w*$/i,\n              inside: {\n                symbol: /\\b\\w+/,\n                punctuation: /^<<[-~]?/\n              }\n            },\n            interpolation: interpolation,\n            string: /[\\s\\S]+/\n          }\n        },\n        {\n          pattern: /<<[-~]?'([a-z_]\\w*)'[\\r\\n](?:.*[\\r\\n])*?[\\t ]*\\1/i,\n          alias: 'heredoc-string',\n          greedy: true,\n          inside: {\n            delimiter: {\n              pattern: /^<<[-~]?'[a-z_]\\w*'|\\b[a-z_]\\w*$/i,\n              inside: {\n                symbol: /\\b\\w+/,\n                punctuation: /^<<[-~]?'|'$/\n              }\n            },\n            string: /[\\s\\S]+/\n          }\n        }\n      ],\n      'command-literal': [\n        {\n          pattern: RegExp(/%x/.source + percentExpression),\n          greedy: true,\n          inside: {\n            interpolation: interpolation,\n            command: {\n              pattern: /[\\s\\S]+/,\n              alias: 'string'\n            }\n          }\n        },\n        {\n          pattern: /`(?:#\\{[^}]+\\}|#(?!\\{)|\\\\(?:\\r\\n|[\\s\\S])|[^\\\\`#\\r\\n])*`/,\n          greedy: true,\n          inside: {\n            interpolation: interpolation,\n            command: {\n              pattern: /[\\s\\S]+/,\n              alias: 'string'\n            }\n          }\n        }\n      ]\n    })\n    delete Prism.languages.ruby.string\n    Prism.languages.insertBefore('ruby', 'number', {\n      builtin:\n        /\\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Fixnum|Float|Hash|IO|Integer|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|Stat|String|Struct|Symbol|TMS|Thread|ThreadGroup|Time|TrueClass)\\b/,\n      constant: /\\b[A-Z][A-Z0-9_]*(?:[?!]|\\b)/\n    })\n    Prism.languages.rb = Prism.languages.ruby\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = rust\nrust.displayName = 'rust'\nrust.aliases = []\nfunction rust(Prism) {\n  ;(function (Prism) {\n    var multilineComment = /\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|<self>)*\\*\\//.source\n    for (var i = 0; i < 2; i++) {\n      // support 4 levels of nested comments\n      multilineComment = multilineComment.replace(/<self>/g, function () {\n        return multilineComment\n      })\n    }\n    multilineComment = multilineComment.replace(/<self>/g, function () {\n      return /[^\\s\\S]/.source\n    })\n    Prism.languages.rust = {\n      comment: [\n        {\n          pattern: RegExp(/(^|[^\\\\])/.source + multilineComment),\n          lookbehind: true,\n          greedy: true\n        },\n        {\n          pattern: /(^|[^\\\\:])\\/\\/.*/,\n          lookbehind: true,\n          greedy: true\n        }\n      ],\n      string: {\n        pattern: /b?\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|b?r(#*)\"(?:[^\"]|\"(?!\\1))*\"\\1/,\n        greedy: true\n      },\n      char: {\n        pattern:\n          /b?'(?:\\\\(?:x[0-7][\\da-fA-F]|u\\{(?:[\\da-fA-F]_*){1,6}\\}|.)|[^\\\\\\r\\n\\t'])'/,\n        greedy: true\n      },\n      attribute: {\n        pattern: /#!?\\[(?:[^\\[\\]\"]|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")*\\]/,\n        greedy: true,\n        alias: 'attr-name',\n        inside: {\n          string: null // see below\n        }\n      },\n      // Closure params should not be confused with bitwise OR |\n      'closure-params': {\n        pattern: /([=(,:]\\s*|\\bmove\\s*)\\|[^|]*\\||\\|[^|]*\\|(?=\\s*(?:\\{|->))/,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          'closure-punctuation': {\n            pattern: /^\\||\\|$/,\n            alias: 'punctuation'\n          },\n          rest: null // see below\n        }\n      },\n      'lifetime-annotation': {\n        pattern: /'\\w+/,\n        alias: 'symbol'\n      },\n      'fragment-specifier': {\n        pattern: /(\\$\\w+:)[a-z]+/,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      variable: /\\$\\w+/,\n      'function-definition': {\n        pattern: /(\\bfn\\s+)\\w+/,\n        lookbehind: true,\n        alias: 'function'\n      },\n      'type-definition': {\n        pattern: /(\\b(?:enum|struct|trait|type|union)\\s+)\\w+/,\n        lookbehind: true,\n        alias: 'class-name'\n      },\n      'module-declaration': [\n        {\n          pattern: /(\\b(?:crate|mod)\\s+)[a-z][a-z_\\d]*/,\n          lookbehind: true,\n          alias: 'namespace'\n        },\n        {\n          pattern:\n            /(\\b(?:crate|self|super)\\s*)::\\s*[a-z][a-z_\\d]*\\b(?:\\s*::(?:\\s*[a-z][a-z_\\d]*\\s*::)*)?/,\n          lookbehind: true,\n          alias: 'namespace',\n          inside: {\n            punctuation: /::/\n          }\n        }\n      ],\n      keyword: [\n        // https://github.com/rust-lang/reference/blob/master/src/keywords.md\n        /\\b(?:Self|abstract|as|async|await|become|box|break|const|continue|crate|do|dyn|else|enum|extern|final|fn|for|if|impl|in|let|loop|macro|match|mod|move|mut|override|priv|pub|ref|return|self|static|struct|super|trait|try|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\\b/, // primitives and str\n        // https://doc.rust-lang.org/stable/rust-by-example/primitives.html\n        /\\b(?:bool|char|f(?:32|64)|[ui](?:8|16|32|64|128|size)|str)\\b/\n      ],\n      // functions can technically start with an upper-case letter, but this will introduce a lot of false positives\n      // and Rust's naming conventions recommend snake_case anyway.\n      // https://doc.rust-lang.org/1.0.0/style/style/naming/README.html\n      function: /\\b[a-z_]\\w*(?=\\s*(?:::\\s*<|\\())/,\n      macro: {\n        pattern: /\\b\\w+!/,\n        alias: 'property'\n      },\n      constant: /\\b[A-Z_][A-Z_\\d]+\\b/,\n      'class-name': /\\b[A-Z]\\w*\\b/,\n      namespace: {\n        pattern: /(?:\\b[a-z][a-z_\\d]*\\s*::\\s*)*\\b[a-z][a-z_\\d]*\\s*::(?!\\s*<)/,\n        inside: {\n          punctuation: /::/\n        }\n      },\n      // Hex, oct, bin, dec numbers with visual separators and type suffix\n      number:\n        /\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0o[0-7](?:_?[0-7])*|0b[01](?:_?[01])*|(?:(?:\\d(?:_?\\d)*)?\\.)?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)(?:_?(?:f32|f64|[iu](?:8|16|32|64|size)?))?\\b/,\n      boolean: /\\b(?:false|true)\\b/,\n      punctuation: /->|\\.\\.=|\\.{1,3}|::|[{}[\\];(),:]/,\n      operator: /[-+*\\/%!^]=?|=[=>]?|&[&=]?|\\|[|=]?|<<?=?|>>?=?|[@?]/\n    }\n    Prism.languages.rust['closure-params'].inside.rest = Prism.languages.rust\n    Prism.languages.rust['attribute'].inside['string'] =\n      Prism.languages.rust['string']\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = sas\nsas.displayName = 'sas'\nsas.aliases = []\nfunction sas(Prism) {\n  ;(function (Prism) {\n    var stringPattern = /(?:\"(?:\"\"|[^\"])*\"(?!\")|'(?:''|[^'])*'(?!'))/.source\n    var number = /\\b(?:\\d[\\da-f]*x|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/i\n    var numericConstant = {\n      pattern: RegExp(stringPattern + '[bx]'),\n      alias: 'number'\n    }\n    var macroVariable = {\n      pattern: /&[a-z_]\\w*/i\n    }\n    var macroKeyword = {\n      pattern:\n        /((?:^|\\s|=|\\())%(?:ABORT|BY|CMS|COPY|DISPLAY|DO|ELSE|END|EVAL|GLOBAL|GO|GOTO|IF|INC|INCLUDE|INDEX|INPUT|KTRIM|LENGTH|LET|LIST|LOCAL|PUT|QKTRIM|QSCAN|QSUBSTR|QSYSFUNC|QUPCASE|RETURN|RUN|SCAN|SUBSTR|SUPERQ|SYMDEL|SYMEXIST|SYMGLOBL|SYMLOCAL|SYSCALL|SYSEVALF|SYSEXEC|SYSFUNC|SYSGET|SYSRPUT|THEN|TO|TSO|UNQUOTE|UNTIL|UPCASE|WHILE|WINDOW)\\b/i,\n      lookbehind: true,\n      alias: 'keyword'\n    }\n    var step = {\n      pattern: /(^|\\s)(?:proc\\s+\\w+|data(?!=)|quit|run)\\b/i,\n      alias: 'keyword',\n      lookbehind: true\n    }\n    var comment = [\n      /\\/\\*[\\s\\S]*?\\*\\//,\n      {\n        pattern: /(^[ \\t]*|;\\s*)\\*[^;]*;/m,\n        lookbehind: true\n      }\n    ]\n    var string = {\n      pattern: RegExp(stringPattern),\n      greedy: true\n    }\n    var punctuation = /[$%@.(){}\\[\\];,\\\\]/\n    var func = {\n      pattern: /%?\\b\\w+(?=\\()/,\n      alias: 'keyword'\n    }\n    var args = {\n      function: func,\n      'arg-value': {\n        pattern: /(=\\s*)[A-Z\\.]+/i,\n        lookbehind: true\n      },\n      operator: /=/,\n      'macro-variable': macroVariable,\n      arg: {\n        pattern: /[A-Z]+/i,\n        alias: 'keyword'\n      },\n      number: number,\n      'numeric-constant': numericConstant,\n      punctuation: punctuation,\n      string: string\n    }\n    var format = {\n      pattern: /\\b(?:format|put)\\b=?[\\w'$.]+/i,\n      inside: {\n        keyword: /^(?:format|put)(?==)/i,\n        equals: /=/,\n        format: {\n          pattern: /(?:\\w|\\$\\d)+\\.\\d?/,\n          alias: 'number'\n        }\n      }\n    }\n    var altformat = {\n      pattern: /\\b(?:format|put)\\s+[\\w']+(?:\\s+[$.\\w]+)+(?=;)/i,\n      inside: {\n        keyword: /^(?:format|put)/i,\n        format: {\n          pattern: /[\\w$]+\\.\\d?/,\n          alias: 'number'\n        }\n      }\n    }\n    var globalStatements = {\n      pattern:\n        /((?:^|\\s)=?)(?:catname|checkpoint execute_always|dm|endsas|filename|footnote|%include|libname|%list|lock|missing|options|page|resetline|%run|sasfile|skip|sysecho|title\\d?)\\b/i,\n      lookbehind: true,\n      alias: 'keyword'\n    }\n    var submitStatement = {\n      pattern: /(^|\\s)(?:submit(?:\\s+(?:load|norun|parseonly))?|endsubmit)\\b/i,\n      lookbehind: true,\n      alias: 'keyword'\n    }\n    var actionSets =\n      /aStore|accessControl|aggregation|audio|autotune|bayesianNetClassifier|bioMedImage|boolRule|builtins|cardinality|cdm|clustering|conditionalRandomFields|configuration|copula|countreg|dataDiscovery|dataPreprocess|dataSciencePilot|dataStep|decisionTree|deduplication|deepLearn|deepNeural|deepRnn|ds2|ecm|entityRes|espCluster|explainModel|factmac|fastKnn|fcmpact|fedSql|freqTab|gVarCluster|gam|gleam|graphSemiSupLearn|hiddenMarkovModel|hyperGroup|ica|image|iml|kernalPca|langModel|ldaTopic|loadStreams|mbc|mixed|mlTools|modelPublishing|network|neuralNet|nmf|nonParametricBayes|nonlinear|optNetwork|optimization|panel|pca|percentile|phreg|pls|qkb|qlim|quantreg|recommend|regression|reinforcementLearn|robustPca|ruleMining|sampling|sandwich|sccasl|search(?:Analytics)?|sentimentAnalysis|sequence|session(?:Prop)?|severity|simSystem|simple|smartData|sparkEmbeddedProcess|sparseML|spatialreg|spc|stabilityMonitoring|svDataDescription|svm|table|text(?:Filters|Frequency|Mining|Parse|Rule(?:Develop|Score)|Topic|Util)|timeData|transpose|tsInfo|tsReconcile|uniTimeSeries|varReduce/\n        .source\n    var casActions = {\n      pattern: RegExp(\n        /(^|\\s)(?:action\\s+)?(?:<act>)\\.[a-z]+\\b[^;]+/.source.replace(\n          /<act>/g,\n          function () {\n            return actionSets\n          }\n        ),\n        'i'\n      ),\n      lookbehind: true,\n      inside: {\n        keyword: RegExp(\n          /(?:<act>)\\.[a-z]+\\b/.source.replace(/<act>/g, function () {\n            return actionSets\n          }),\n          'i'\n        ),\n        action: {\n          pattern: /(?:action)/i,\n          alias: 'keyword'\n        },\n        comment: comment,\n        function: func,\n        'arg-value': args['arg-value'],\n        operator: args.operator,\n        argument: args.arg,\n        number: number,\n        'numeric-constant': numericConstant,\n        punctuation: punctuation,\n        string: string\n      }\n    }\n    var keywords = {\n      pattern:\n        /((?:^|\\s)=?)(?:after|analysis|and|array|barchart|barwidth|begingraph|by|call|cas|cbarline|cfill|class(?:lev)?|close|column|computed?|contains|continue|data(?==)|define|delete|describe|document|do\\s+over|do|dol|drop|dul|else|end(?:comp|source)?|entryTitle|eval(?:uate)?|exec(?:ute)?|exit|file(?:name)?|fill(?:attrs)?|flist|fnc|function(?:list)?|global|goto|group(?:by)?|headline|headskip|histogram|if|infile|keep|keylabel|keyword|label|layout|leave|legendlabel|length|libname|loadactionset|merge|midpoints|_?null_|name|noobs|nowd|ods|options|or|otherwise|out(?:put)?|over(?:lay)?|plot|print|put|raise|ranexp|rannor|rbreak|retain|return|select|session|sessref|set|source|statgraph|sum|summarize|table|temp|terminate|then\\s+do|then|title\\d?|to|var|when|where|xaxisopts|y2axisopts|yaxisopts)\\b/i,\n      lookbehind: true\n    }\n    Prism.languages.sas = {\n      datalines: {\n        pattern: /^([ \\t]*)(?:cards|(?:data)?lines);[\\s\\S]+?^[ \\t]*;/im,\n        lookbehind: true,\n        alias: 'string',\n        inside: {\n          keyword: {\n            pattern: /^(?:cards|(?:data)?lines)/i\n          },\n          punctuation: /;/\n        }\n      },\n      'proc-sql': {\n        pattern:\n          /(^proc\\s+(?:fed)?sql(?:\\s+[\\w|=]+)?;)[\\s\\S]+?(?=^(?:proc\\s+\\w+|data|quit|run);|(?![\\s\\S]))/im,\n        lookbehind: true,\n        inside: {\n          sql: {\n            pattern: RegExp(\n              /^[ \\t]*(?:select|alter\\s+table|(?:create|describe|drop)\\s+(?:index|table(?:\\s+constraints)?|view)|create\\s+unique\\s+index|insert\\s+into|update)(?:<str>|[^;\"'])+;/.source.replace(\n                /<str>/g,\n                function () {\n                  return stringPattern\n                }\n              ),\n              'im'\n            ),\n            alias: 'language-sql',\n            inside: Prism.languages.sql\n          },\n          'global-statements': globalStatements,\n          'sql-statements': {\n            pattern:\n              /(^|\\s)(?:disconnect\\s+from|begin|commit|exec(?:ute)?|reset|rollback|validate)\\b/i,\n            lookbehind: true,\n            alias: 'keyword'\n          },\n          number: number,\n          'numeric-constant': numericConstant,\n          punctuation: punctuation,\n          string: string\n        }\n      },\n      'proc-groovy': {\n        pattern:\n          /(^proc\\s+groovy(?:\\s+[\\w|=]+)?;)[\\s\\S]+?(?=^(?:proc\\s+\\w+|data|quit|run);|(?![\\s\\S]))/im,\n        lookbehind: true,\n        inside: {\n          comment: comment,\n          groovy: {\n            pattern: RegExp(\n              /(^[ \\t]*submit(?:\\s+(?:load|norun|parseonly))?)(?:<str>|[^\"'])+?(?=endsubmit;)/.source.replace(\n                /<str>/g,\n                function () {\n                  return stringPattern\n                }\n              ),\n              'im'\n            ),\n            lookbehind: true,\n            alias: 'language-groovy',\n            inside: Prism.languages.groovy\n          },\n          keyword: keywords,\n          'submit-statement': submitStatement,\n          'global-statements': globalStatements,\n          number: number,\n          'numeric-constant': numericConstant,\n          punctuation: punctuation,\n          string: string\n        }\n      },\n      'proc-lua': {\n        pattern:\n          /(^proc\\s+lua(?:\\s+[\\w|=]+)?;)[\\s\\S]+?(?=^(?:proc\\s+\\w+|data|quit|run);|(?![\\s\\S]))/im,\n        lookbehind: true,\n        inside: {\n          comment: comment,\n          lua: {\n            pattern: RegExp(\n              /(^[ \\t]*submit(?:\\s+(?:load|norun|parseonly))?)(?:<str>|[^\"'])+?(?=endsubmit;)/.source.replace(\n                /<str>/g,\n                function () {\n                  return stringPattern\n                }\n              ),\n              'im'\n            ),\n            lookbehind: true,\n            alias: 'language-lua',\n            inside: Prism.languages.lua\n          },\n          keyword: keywords,\n          'submit-statement': submitStatement,\n          'global-statements': globalStatements,\n          number: number,\n          'numeric-constant': numericConstant,\n          punctuation: punctuation,\n          string: string\n        }\n      },\n      'proc-cas': {\n        pattern:\n          /(^proc\\s+cas(?:\\s+[\\w|=]+)?;)[\\s\\S]+?(?=^(?:proc\\s+\\w+|quit|data);|(?![\\s\\S]))/im,\n        lookbehind: true,\n        inside: {\n          comment: comment,\n          'statement-var': {\n            pattern: /((?:^|\\s)=?)saveresult\\s[^;]+/im,\n            lookbehind: true,\n            inside: {\n              statement: {\n                pattern: /^saveresult\\s+\\S+/i,\n                inside: {\n                  keyword: /^(?:saveresult)/i\n                }\n              },\n              rest: args\n            }\n          },\n          'cas-actions': casActions,\n          statement: {\n            pattern:\n              /((?:^|\\s)=?)(?:default|(?:un)?set|on|output|upload)[^;]+/im,\n            lookbehind: true,\n            inside: args\n          },\n          step: step,\n          keyword: keywords,\n          function: func,\n          format: format,\n          altformat: altformat,\n          'global-statements': globalStatements,\n          number: number,\n          'numeric-constant': numericConstant,\n          punctuation: punctuation,\n          string: string\n        }\n      },\n      'proc-args': {\n        pattern: RegExp(\n          /(^proc\\s+\\w+\\s+)(?!\\s)(?:[^;\"']|<str>)+;/.source.replace(\n            /<str>/g,\n            function () {\n              return stringPattern\n            }\n          ),\n          'im'\n        ),\n        lookbehind: true,\n        inside: args\n      },\n      /*Special keywords within macros*/\n      'macro-keyword': macroKeyword,\n      'macro-variable': macroVariable,\n      'macro-string-functions': {\n        pattern:\n          /((?:^|\\s|=))%(?:BQUOTE|NRBQUOTE|NRQUOTE|NRSTR|QUOTE|STR)\\(.*?(?:[^%]\\))/i,\n        lookbehind: true,\n        inside: {\n          function: {\n            pattern: /%(?:BQUOTE|NRBQUOTE|NRQUOTE|NRSTR|QUOTE|STR)/i,\n            alias: 'keyword'\n          },\n          'macro-keyword': macroKeyword,\n          'macro-variable': macroVariable,\n          'escaped-char': {\n            pattern: /%['\"()<>=¬^~;,#]/\n          },\n          punctuation: punctuation\n        }\n      },\n      'macro-declaration': {\n        pattern: /^%macro[^;]+(?=;)/im,\n        inside: {\n          keyword: /%macro/i\n        }\n      },\n      'macro-end': {\n        pattern: /^%mend[^;]+(?=;)/im,\n        inside: {\n          keyword: /%mend/i\n        }\n      },\n      /*%_zscore(headcir, _lhc, _mhc, _shc, headcz, headcpct, _Fheadcz); */\n      macro: {\n        pattern: /%_\\w+(?=\\()/,\n        alias: 'keyword'\n      },\n      input: {\n        pattern: /\\binput\\s[-\\w\\s/*.$&]+;/i,\n        inside: {\n          input: {\n            alias: 'keyword',\n            pattern: /^input/i\n          },\n          comment: comment,\n          number: number,\n          'numeric-constant': numericConstant\n        }\n      },\n      'options-args': {\n        pattern: /(^options)[-'\"|/\\\\<>*+=:()\\w\\s]*(?=;)/im,\n        lookbehind: true,\n        inside: args\n      },\n      'cas-actions': casActions,\n      comment: comment,\n      function: func,\n      format: format,\n      altformat: altformat,\n      'numeric-constant': numericConstant,\n      datetime: {\n        // '1jan2013'd, '9:25:19pm't, '18jan2003:9:27:05am'dt\n        pattern: RegExp(stringPattern + '(?:dt?|t)'),\n        alias: 'number'\n      },\n      string: string,\n      step: step,\n      keyword: keywords,\n      // In SAS Studio syntax highlighting, these operators are styled like keywords\n      'operator-keyword': {\n        pattern: /\\b(?:eq|ge|gt|in|le|lt|ne|not)\\b/i,\n        alias: 'operator'\n      },\n      // Decimal (1.2e23), hexadecimal (0c1x)\n      number: number,\n      operator: /\\*\\*?|\\|\\|?|!!?|¦¦?|<[>=]?|>[<=]?|[-+\\/=&]|[~¬^]=?/,\n      punctuation: punctuation\n    }\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = sass\nsass.displayName = 'sass'\nsass.aliases = []\nfunction sass(Prism) {\n  ;(function (Prism) {\n    Prism.languages.sass = Prism.languages.extend('css', {\n      // Sass comments don't need to be closed, only indented\n      comment: {\n        pattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t].+)*/m,\n        lookbehind: true,\n        greedy: true\n      }\n    })\n    Prism.languages.insertBefore('sass', 'atrule', {\n      // We want to consume the whole line\n      'atrule-line': {\n        // Includes support for = and + shortcuts\n        pattern: /^(?:[ \\t]*)[@+=].+/m,\n        greedy: true,\n        inside: {\n          atrule: /(?:@[\\w-]+|[+=])/\n        }\n      }\n    })\n    delete Prism.languages.sass.atrule\n    var variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    var operator = [\n      /[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|not|or)\\b/,\n      {\n        pattern: /(\\s)-(?=\\s)/,\n        lookbehind: true\n      }\n    ]\n    Prism.languages.insertBefore('sass', 'property', {\n      // We want to consume the whole line\n      'variable-line': {\n        pattern: /^[ \\t]*\\$.+/m,\n        greedy: true,\n        inside: {\n          punctuation: /:/,\n          variable: variable,\n          operator: operator\n        }\n      },\n      // We want to consume the whole line\n      'property-line': {\n        pattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s].*)/m,\n        greedy: true,\n        inside: {\n          property: [\n            /[^:\\s]+(?=\\s*:)/,\n            {\n              pattern: /(:)[^:\\s]+/,\n              lookbehind: true\n            }\n          ],\n          punctuation: /:/,\n          variable: variable,\n          operator: operator,\n          important: Prism.languages.sass.important\n        }\n      }\n    })\n    delete Prism.languages.sass.property\n    delete Prism.languages.sass.important // Now that whole lines for other patterns are consumed,\n    // what's left should be selectors\n    Prism.languages.insertBefore('sass', 'punctuation', {\n      selector: {\n        pattern:\n          /^([ \\t]*)\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*)*/m,\n        lookbehind: true,\n        greedy: true\n      }\n    })\n  })(Prism)\n}\n","'use strict'\nvar refractorJava = require('./java.js')\nmodule.exports = scala\nscala.displayName = 'scala'\nscala.aliases = []\nfunction scala(Prism) {\n  Prism.register(refractorJava)\n  Prism.languages.scala = Prism.languages.extend('java', {\n    'triple-quoted-string': {\n      pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n      greedy: true,\n      alias: 'string'\n    },\n    string: {\n      pattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true\n    },\n    keyword:\n      /<-|=>|\\b(?:abstract|case|catch|class|def|do|else|extends|final|finally|for|forSome|if|implicit|import|lazy|match|new|null|object|override|package|private|protected|return|sealed|self|super|this|throw|trait|try|type|val|var|while|with|yield)\\b/,\n    number:\n      /\\b0x(?:[\\da-f]*\\.)?[\\da-f]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e\\d+)?[dfl]?/i,\n    builtin:\n      /\\b(?:Any|AnyRef|AnyVal|Boolean|Byte|Char|Double|Float|Int|Long|Nothing|Short|String|Unit)\\b/,\n    symbol: /'[^\\d\\s\\\\]\\w*/\n  })\n  Prism.languages.insertBefore('scala', 'triple-quoted-string', {\n    'string-interpolation': {\n      pattern:\n        /\\b[a-z]\\w*(?:\"\"\"(?:[^$]|\\$(?:[^{]|\\{(?:[^{}]|\\{[^{}]*\\})*\\}))*?\"\"\"|\"(?:[^$\"\\r\\n]|\\$(?:[^{]|\\{(?:[^{}]|\\{[^{}]*\\})*\\}))*\")/i,\n      greedy: true,\n      inside: {\n        id: {\n          pattern: /^\\w+/,\n          greedy: true,\n          alias: 'function'\n        },\n        escape: {\n          pattern: /\\\\\\$\"|\\$[$\"]/,\n          greedy: true,\n          alias: 'symbol'\n        },\n        interpolation: {\n          pattern: /\\$(?:\\w+|\\{(?:[^{}]|\\{[^{}]*\\})*\\})/,\n          greedy: true,\n          inside: {\n            punctuation: /^\\$\\{?|\\}$/,\n            expression: {\n              pattern: /[\\s\\S]+/,\n              inside: Prism.languages.scala\n            }\n          }\n        },\n        string: /[\\s\\S]+/\n      }\n    }\n  })\n  delete Prism.languages.scala['class-name']\n  delete Prism.languages.scala['function']\n}\n","'use strict'\n\nmodule.exports = scheme\nscheme.displayName = 'scheme'\nscheme.aliases = []\nfunction scheme(Prism) {\n  ;(function (Prism) {\n    Prism.languages.scheme = {\n      // this supports \"normal\" single-line comments:\n      //   ; comment\n      // and (potentially nested) multiline comments:\n      //   #| comment #| nested |# still comment |#\n      // (only 1 level of nesting is supported)\n      comment:\n        /;.*|#;\\s*(?:\\((?:[^()]|\\([^()]*\\))*\\)|\\[(?:[^\\[\\]]|\\[[^\\[\\]]*\\])*\\])|#\\|(?:[^#|]|#(?!\\|)|\\|(?!#)|#\\|(?:[^#|]|#(?!\\|)|\\|(?!#))*\\|#)*\\|#/,\n      string: {\n        pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n        greedy: true\n      },\n      symbol: {\n        pattern: /'[^()\\[\\]#'\\s]+/,\n        greedy: true\n      },\n      char: {\n        pattern:\n          /#\\\\(?:[ux][a-fA-F\\d]+\\b|[-a-zA-Z]+\\b|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|\\S)/,\n        greedy: true\n      },\n      'lambda-parameter': [\n        // https://www.cs.cmu.edu/Groups/AI/html/r4rs/r4rs_6.html#SEC30\n        {\n          pattern:\n            /((?:^|[^'`#])[(\\[]lambda\\s+)(?:[^|()\\[\\]'\\s]+|\\|(?:[^\\\\|]|\\\\.)*\\|)/,\n          lookbehind: true\n        },\n        {\n          pattern: /((?:^|[^'`#])[(\\[]lambda\\s+[(\\[])[^()\\[\\]']+/,\n          lookbehind: true\n        }\n      ],\n      keyword: {\n        pattern:\n          /((?:^|[^'`#])[(\\[])(?:begin|case(?:-lambda)?|cond(?:-expand)?|define(?:-library|-macro|-record-type|-syntax|-values)?|defmacro|delay(?:-force)?|do|else|except|export|guard|if|import|include(?:-ci|-library-declarations)?|lambda|let(?:rec)?(?:-syntax|-values|\\*)?|let\\*-values|only|parameterize|prefix|(?:quasi-?)?quote|rename|set!|syntax-(?:case|rules)|unless|unquote(?:-splicing)?|when)(?=[()\\[\\]\\s]|$)/,\n        lookbehind: true\n      },\n      builtin: {\n        // all functions of the base library of R7RS plus some of built-ins of R5Rs\n        pattern:\n          /((?:^|[^'`#])[(\\[])(?:abs|and|append|apply|assoc|ass[qv]|binary-port\\?|boolean=?\\?|bytevector(?:-append|-copy|-copy!|-length|-u8-ref|-u8-set!|\\?)?|caar|cadr|call-with-(?:current-continuation|port|values)|call\\/cc|car|cdar|cddr|cdr|ceiling|char(?:->integer|-ready\\?|\\?|<\\?|<=\\?|=\\?|>\\?|>=\\?)|close-(?:input-port|output-port|port)|complex\\?|cons|current-(?:error|input|output)-port|denominator|dynamic-wind|eof-object\\??|eq\\?|equal\\?|eqv\\?|error|error-object(?:-irritants|-message|\\?)|eval|even\\?|exact(?:-integer-sqrt|-integer\\?|\\?)?|expt|features|file-error\\?|floor(?:-quotient|-remainder|\\/)?|flush-output-port|for-each|gcd|get-output-(?:bytevector|string)|inexact\\??|input-port(?:-open\\?|\\?)|integer(?:->char|\\?)|lcm|length|list(?:->string|->vector|-copy|-ref|-set!|-tail|\\?)?|make-(?:bytevector|list|parameter|string|vector)|map|max|member|memq|memv|min|modulo|negative\\?|newline|not|null\\?|number(?:->string|\\?)|numerator|odd\\?|open-(?:input|output)-(?:bytevector|string)|or|output-port(?:-open\\?|\\?)|pair\\?|peek-char|peek-u8|port\\?|positive\\?|procedure\\?|quotient|raise|raise-continuable|rational\\?|rationalize|read-(?:bytevector|bytevector!|char|error\\?|line|string|u8)|real\\?|remainder|reverse|round|set-c[ad]r!|square|string(?:->list|->number|->symbol|->utf8|->vector|-append|-copy|-copy!|-fill!|-for-each|-length|-map|-ref|-set!|\\?|<\\?|<=\\?|=\\?|>\\?|>=\\?)?|substring|symbol(?:->string|\\?|=\\?)|syntax-error|textual-port\\?|truncate(?:-quotient|-remainder|\\/)?|u8-ready\\?|utf8->string|values|vector(?:->list|->string|-append|-copy|-copy!|-fill!|-for-each|-length|-map|-ref|-set!|\\?)?|with-exception-handler|write-(?:bytevector|char|string|u8)|zero\\?)(?=[()\\[\\]\\s]|$)/,\n        lookbehind: true\n      },\n      operator: {\n        pattern: /((?:^|[^'`#])[(\\[])(?:[-+*%/]|[<>]=?|=>?)(?=[()\\[\\]\\s]|$)/,\n        lookbehind: true\n      },\n      number: {\n        // The number pattern from [the R7RS spec](https://small.r7rs.org/attachment/r7rs.pdf).\n        //\n        // <number>      := <num 2>|<num 8>|<num 10>|<num 16>\n        // <num R>       := <prefix R><complex R>\n        // <complex R>   := <real R>(?:@<real R>|<imaginary R>)?|<imaginary R>\n        // <imaginary R> := [+-](?:<ureal R>|(?:inf|nan)\\.0)?i\n        // <real R>      := [+-]?<ureal R>|[+-](?:inf|nan)\\.0\n        // <ureal R>     := <uint R>(?:\\/<uint R>)?\n        //                | <decimal R>\n        //\n        // <decimal 10>  := (?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?\n        // <uint R>      := <digit R>+\n        // <prefix R>    := <radix R>(?:#[ei])?|(?:#[ei])?<radix R>\n        // <radix 2>     := #b\n        // <radix 8>     := #o\n        // <radix 10>    := (?:#d)?\n        // <radix 16>    := #x\n        // <digit 2>     := [01]\n        // <digit 8>     := [0-7]\n        // <digit 10>    := \\d\n        // <digit 16>    := [0-9a-f]\n        //\n        // The problem with this grammar is that the resulting regex is way to complex, so we simplify by grouping all\n        // non-decimal bases together. This results in a decimal (dec) and combined binary, octal, and hexadecimal (box)\n        // pattern:\n        pattern: RegExp(\n          SortedBNF({\n            '<ureal dec>':\n              /\\d+(?:\\/\\d+)|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:[esfdl][+-]?\\d+)?/.source,\n            '<real dec>': /[+-]?<ureal dec>|[+-](?:inf|nan)\\.0/.source,\n            '<imaginary dec>': /[+-](?:<ureal dec>|(?:inf|nan)\\.0)?i/.source,\n            '<complex dec>':\n              /<real dec>(?:@<real dec>|<imaginary dec>)?|<imaginary dec>/\n                .source,\n            '<num dec>': /(?:#d(?:#[ei])?|#[ei](?:#d)?)?<complex dec>/.source,\n            '<ureal box>': /[0-9a-f]+(?:\\/[0-9a-f]+)?/.source,\n            '<real box>': /[+-]?<ureal box>|[+-](?:inf|nan)\\.0/.source,\n            '<imaginary box>': /[+-](?:<ureal box>|(?:inf|nan)\\.0)?i/.source,\n            '<complex box>':\n              /<real box>(?:@<real box>|<imaginary box>)?|<imaginary box>/\n                .source,\n            '<num box>': /#[box](?:#[ei])?|(?:#[ei])?#[box]<complex box>/\n              .source,\n            '<number>': /(^|[()\\[\\]\\s])(?:<num dec>|<num box>)(?=[()\\[\\]\\s]|$)/\n              .source\n          }),\n          'i'\n        ),\n        lookbehind: true\n      },\n      boolean: {\n        pattern: /(^|[()\\[\\]\\s])#(?:[ft]|false|true)(?=[()\\[\\]\\s]|$)/,\n        lookbehind: true\n      },\n      function: {\n        pattern:\n          /((?:^|[^'`#])[(\\[])(?:[^|()\\[\\]'\\s]+|\\|(?:[^\\\\|]|\\\\.)*\\|)(?=[()\\[\\]\\s]|$)/,\n        lookbehind: true\n      },\n      identifier: {\n        pattern: /(^|[()\\[\\]\\s])\\|(?:[^\\\\|]|\\\\.)*\\|(?=[()\\[\\]\\s]|$)/,\n        lookbehind: true,\n        greedy: true\n      },\n      punctuation: /[()\\[\\]']/\n    }\n    /**\n     * Given a topologically sorted BNF grammar, this will return the RegExp source of last rule of the grammar.\n     *\n     * @param {Record<string, string>} grammar\n     * @returns {string}\n     */\n    function SortedBNF(grammar) {\n      for (var key in grammar) {\n        grammar[key] = grammar[key].replace(/<[\\w\\s]+>/g, function (key) {\n          return '(?:' + grammar[key].trim() + ')'\n        })\n      } // return the last item\n      return grammar[key]\n    }\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = scss\nscss.displayName = 'scss'\nscss.aliases = []\nfunction scss(Prism) {\n  Prism.languages.scss = Prism.languages.extend('css', {\n    comment: {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true\n    },\n    atrule: {\n      pattern: /@[\\w-](?:\\([^()]+\\)|[^()\\s]|\\s+(?!\\s))*?(?=\\s+[{;])/,\n      inside: {\n        rule: /@[\\w-]+/ // See rest below\n      }\n    },\n    // url, compassified\n    url: /(?:[-a-z]+-)?url(?=\\()/i,\n    // CSS selector regex is not appropriate for Sass\n    // since there can be lot more things (var, @ directive, nesting..)\n    // a selector must start at the end of a property or after a brace (end of other rules or nesting)\n    // it can contain some characters that aren't used for defining rules or end of selector, & (parent selector), or interpolated variable\n    // the end of a selector is found when there is no rules in it ( {} or {\\s}) or if there is a property (because an interpolated var\n    // can \"pass\" as a selector- e.g: proper#{$erty})\n    // this one was hard to do, so please be careful if you edit this one :)\n    selector: {\n      // Initial look-ahead is used to prevent matching of blank selectors\n      pattern:\n        /(?=\\S)[^@;{}()]?(?:[^@;{}()\\s]|\\s+(?!\\s)|#\\{\\$[-\\w]+\\})+(?=\\s*\\{(?:\\}|\\s|[^}][^:{}]*[:{][^}]))/,\n      inside: {\n        parent: {\n          pattern: /&/,\n          alias: 'important'\n        },\n        placeholder: /%[-\\w]+/,\n        variable: /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n      }\n    },\n    property: {\n      pattern: /(?:[-\\w]|\\$[-\\w]|#\\{\\$[-\\w]+\\})+(?=\\s*:)/,\n      inside: {\n        variable: /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n      }\n    }\n  })\n  Prism.languages.insertBefore('scss', 'atrule', {\n    keyword: [\n      /@(?:content|debug|each|else(?: if)?|extend|for|forward|function|if|import|include|mixin|return|use|warn|while)\\b/i,\n      {\n        pattern: /( )(?:from|through)(?= )/,\n        lookbehind: true\n      }\n    ]\n  })\n  Prism.languages.insertBefore('scss', 'important', {\n    // var and interpolated vars\n    variable: /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n  })\n  Prism.languages.insertBefore('scss', 'function', {\n    'module-modifier': {\n      pattern: /\\b(?:as|hide|show|with)\\b/i,\n      alias: 'keyword'\n    },\n    placeholder: {\n      pattern: /%[-\\w]+/,\n      alias: 'selector'\n    },\n    statement: {\n      pattern: /\\B!(?:default|optional)\\b/i,\n      alias: 'keyword'\n    },\n    boolean: /\\b(?:false|true)\\b/,\n    null: {\n      pattern: /\\bnull\\b/,\n      alias: 'keyword'\n    },\n    operator: {\n      pattern: /(\\s)(?:[-+*\\/%]|[=!]=|<=?|>=?|and|not|or)(?=\\s)/,\n      lookbehind: true\n    }\n  })\n  Prism.languages.scss['atrule'].inside.rest = Prism.languages.scss\n}\n","'use strict'\nvar refractorBash = require('./bash.js')\nmodule.exports = shellSession\nshellSession.displayName = 'shellSession'\nshellSession.aliases = []\nfunction shellSession(Prism) {\n  Prism.register(refractorBash)\n  ;(function (Prism) {\n    // CAREFUL!\n    // The following patterns are concatenated, so the group referenced by a back reference is non-obvious!\n    var strings = [\n      // normal string\n      /\"(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|\\$(?!\\()|`[^`]+`|[^\"\\\\`$])*\"/.source,\n      /'[^']*'/.source,\n      /\\$'(?:[^'\\\\]|\\\\[\\s\\S])*'/.source, // here doc\n      // 2 capturing groups\n      /<<-?\\s*([\"']?)(\\w+)\\1\\s[\\s\\S]*?[\\r\\n]\\2/.source\n    ].join('|')\n    Prism.languages['shell-session'] = {\n      command: {\n        pattern: RegExp(\n          // user info\n          /^/.source +\n            '(?:' + // <user> \":\" ( <path> )?\n            (/[^\\s@:$#%*!/\\\\]+@[^\\r\\n@:$#%*!/\\\\]+(?::[^\\0-\\x1F$#%*?\"<>:;|]+)?/\n              .source +\n              '|' + // <path>\n              // Since the path pattern is quite general, we will require it to start with a special character to\n              // prevent false positives.\n              /[/~.][^\\0-\\x1F$#%*?\"<>@:;|]*/.source) +\n            ')?' + // shell symbol\n            /[$#%](?=\\s)/.source + // bash command\n            /(?:[^\\\\\\r\\n \\t'\"<$]|[ \\t](?:(?!#)|#.*$)|\\\\(?:[^\\r]|\\r\\n?)|\\$(?!')|<(?!<)|<<str>>)+/.source.replace(\n              /<<str>>/g,\n              function () {\n                return strings\n              }\n            ),\n          'm'\n        ),\n        greedy: true,\n        inside: {\n          info: {\n            // foo@bar:~/files$ exit\n            // foo@bar$ exit\n            // ~/files$ exit\n            pattern: /^[^#$%]+/,\n            alias: 'punctuation',\n            inside: {\n              user: /^[^\\s@:$#%*!/\\\\]+@[^\\r\\n@:$#%*!/\\\\]+/,\n              punctuation: /:/,\n              path: /[\\s\\S]+/\n            }\n          },\n          bash: {\n            pattern: /(^[$#%]\\s*)\\S[\\s\\S]*/,\n            lookbehind: true,\n            alias: 'language-bash',\n            inside: Prism.languages.bash\n          },\n          'shell-symbol': {\n            pattern: /^[$#%]/,\n            alias: 'important'\n          }\n        }\n      },\n      output: /.(?:.*(?:[\\r\\n]|.$))*/\n    }\n    Prism.languages['sh-session'] = Prism.languages['shellsession'] =\n      Prism.languages['shell-session']\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = smali\nsmali.displayName = 'smali'\nsmali.aliases = []\nfunction smali(Prism) {\n  // Test files for the parser itself:\n  // https://github.com/JesusFreke/smali/tree/master/smali/src/test/resources/LexerTest\n  Prism.languages.smali = {\n    comment: /#.*/,\n    string: {\n      pattern: /\"(?:[^\\r\\n\\\\\"]|\\\\.)*\"|'(?:[^\\r\\n\\\\']|\\\\(?:.|u[\\da-fA-F]{4}))'/,\n      greedy: true\n    },\n    'class-name': {\n      pattern:\n        /(^|[^L])L(?:(?:\\w+|`[^`\\r\\n]*`)\\/)*(?:[\\w$]+|`[^`\\r\\n]*`)(?=\\s*;)/,\n      lookbehind: true,\n      inside: {\n        'class-name': {\n          pattern: /(^L|\\/)(?:[\\w$]+|`[^`\\r\\n]*`)$/,\n          lookbehind: true\n        },\n        namespace: {\n          pattern: /^(L)(?:(?:\\w+|`[^`\\r\\n]*`)\\/)+/,\n          lookbehind: true,\n          inside: {\n            punctuation: /\\//\n          }\n        },\n        builtin: /^L/\n      }\n    },\n    builtin: [\n      {\n        // Reference: https://github.com/JesusFreke/smali/wiki/TypesMethodsAndFields#types\n        pattern: /([();\\[])[BCDFIJSVZ]+/,\n        lookbehind: true\n      },\n      {\n        // e.g. .field mWifiOnUid:I\n        pattern: /([\\w$>]:)[BCDFIJSVZ]/,\n        lookbehind: true\n      }\n    ],\n    keyword: [\n      {\n        pattern: /(\\.end\\s+)[\\w-]+/,\n        lookbehind: true\n      },\n      {\n        pattern: /(^|[^\\w.-])\\.(?!\\d)[\\w-]+/,\n        lookbehind: true\n      },\n      {\n        pattern:\n          /(^|[^\\w.-])(?:abstract|annotation|bridge|constructor|enum|final|interface|private|protected|public|runtime|static|synthetic|system|transient)(?![\\w.-])/,\n        lookbehind: true\n      }\n    ],\n    function: {\n      pattern: /(^|[^\\w.-])(?:\\w+|<[\\w$-]+>)(?=\\()/,\n      lookbehind: true\n    },\n    field: {\n      pattern: /[\\w$]+(?=:)/,\n      alias: 'variable'\n    },\n    register: {\n      pattern: /(^|[^\\w.-])[vp]\\d(?![\\w.-])/,\n      lookbehind: true,\n      alias: 'variable'\n    },\n    boolean: {\n      pattern: /(^|[^\\w.-])(?:false|true)(?![\\w.-])/,\n      lookbehind: true\n    },\n    number: {\n      pattern:\n        /(^|[^/\\w.-])-?(?:NAN|INFINITY|0x(?:[\\dA-F]+(?:\\.[\\dA-F]*)?|\\.[\\dA-F]+)(?:p[+-]?[\\dA-F]+)?|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?)[dflst]?(?![\\w.-])/i,\n      lookbehind: true\n    },\n    label: {\n      pattern: /(:)\\w+/,\n      lookbehind: true,\n      alias: 'property'\n    },\n    operator: /->|\\.\\.|[\\[=]/,\n    punctuation: /[{}(),;:]/\n  }\n}\n","'use strict'\n\nmodule.exports = smalltalk\nsmalltalk.displayName = 'smalltalk'\nsmalltalk.aliases = []\nfunction smalltalk(Prism) {\n  Prism.languages.smalltalk = {\n    comment: {\n      pattern: /\"(?:\"\"|[^\"])*\"/,\n      greedy: true\n    },\n    char: {\n      pattern: /\\$./,\n      greedy: true\n    },\n    string: {\n      pattern: /'(?:''|[^'])*'/,\n      greedy: true\n    },\n    symbol: /#[\\da-z]+|#(?:-|([+\\/\\\\*~<>=@%|&?!])\\1?)|#(?=\\()/i,\n    'block-arguments': {\n      pattern: /(\\[\\s*):[^\\[|]*\\|/,\n      lookbehind: true,\n      inside: {\n        variable: /:[\\da-z]+/i,\n        punctuation: /\\|/\n      }\n    },\n    'temporary-variables': {\n      pattern: /\\|[^|]+\\|/,\n      inside: {\n        variable: /[\\da-z]+/i,\n        punctuation: /\\|/\n      }\n    },\n    keyword: /\\b(?:new|nil|self|super)\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    number: [\n      /\\d+r-?[\\dA-Z]+(?:\\.[\\dA-Z]+)?(?:e-?\\d+)?/,\n      /\\b\\d+(?:\\.\\d+)?(?:e-?\\d+)?/\n    ],\n    operator: /[<=]=?|:=|~[~=]|\\/\\/?|\\\\\\\\|>[>=]?|[!^+\\-*&|,@]/,\n    punctuation: /[.;:?\\[\\](){}]/\n  }\n}\n","'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = smarty\nsmarty.displayName = 'smarty'\nsmarty.aliases = []\nfunction smarty(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  ;(function (Prism) {\n    Prism.languages.smarty = {\n      comment: {\n        pattern: /^\\{\\*[\\s\\S]*?\\*\\}/,\n        greedy: true\n      },\n      'embedded-php': {\n        pattern: /^\\{php\\}[\\s\\S]*?\\{\\/php\\}/,\n        greedy: true,\n        inside: {\n          smarty: {\n            pattern: /^\\{php\\}|\\{\\/php\\}$/,\n            inside: null // see below\n          },\n          php: {\n            pattern: /[\\s\\S]+/,\n            alias: 'language-php',\n            inside: Prism.languages.php\n          }\n        }\n      },\n      string: [\n        {\n          pattern: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n          greedy: true,\n          inside: {\n            interpolation: {\n              pattern: /\\{[^{}]*\\}|`[^`]*`/,\n              inside: {\n                'interpolation-punctuation': {\n                  pattern: /^[{`]|[`}]$/,\n                  alias: 'punctuation'\n                },\n                expression: {\n                  pattern: /[\\s\\S]+/,\n                  inside: null // see below\n                }\n              }\n            },\n            variable: /\\$\\w+/\n          }\n        },\n        {\n          pattern: /'(?:\\\\.|[^'\\\\\\r\\n])*'/,\n          greedy: true\n        }\n      ],\n      keyword: {\n        pattern: /(^\\{\\/?)[a-z_]\\w*\\b(?!\\()/i,\n        lookbehind: true,\n        greedy: true\n      },\n      delimiter: {\n        pattern: /^\\{\\/?|\\}$/,\n        greedy: true,\n        alias: 'punctuation'\n      },\n      number: /\\b0x[\\dA-Fa-f]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee][-+]?\\d+)?/,\n      variable: [\n        /\\$(?!\\d)\\w+/,\n        /#(?!\\d)\\w+#/,\n        {\n          pattern: /(\\.|->|\\w\\s*=)(?!\\d)\\w+\\b(?!\\()/,\n          lookbehind: true\n        },\n        {\n          pattern: /(\\[)(?!\\d)\\w+(?=\\])/,\n          lookbehind: true\n        }\n      ],\n      function: {\n        pattern: /(\\|\\s*)@?[a-z_]\\w*|\\b[a-z_]\\w*(?=\\()/i,\n        lookbehind: true\n      },\n      'attr-name': /\\b[a-z_]\\w*(?=\\s*=)/i,\n      boolean: /\\b(?:false|no|off|on|true|yes)\\b/,\n      punctuation: /[\\[\\](){}.,:`]|->/,\n      operator: [\n        /[+\\-*\\/%]|==?=?|[!<>]=?|&&|\\|\\|?/,\n        /\\bis\\s+(?:not\\s+)?(?:div|even|odd)(?:\\s+by)?\\b/,\n        /\\b(?:and|eq|gt?e|gt|lt?e|lt|mod|neq?|not|or)\\b/\n      ]\n    }\n    Prism.languages.smarty['embedded-php'].inside.smarty.inside =\n      Prism.languages.smarty\n    Prism.languages.smarty.string[0].inside.interpolation.inside.expression.inside =\n      Prism.languages.smarty\n    var string = /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"|'(?:\\\\.|[^'\\\\\\r\\n])*'/\n    var smartyPattern = RegExp(\n      // comments\n      /\\{\\*[\\s\\S]*?\\*\\}/.source +\n        '|' + // php tags\n        /\\{php\\}[\\s\\S]*?\\{\\/php\\}/.source +\n        '|' + // smarty blocks\n        /\\{(?:[^{}\"']|<str>|\\{(?:[^{}\"']|<str>|\\{(?:[^{}\"']|<str>)*\\})*\\})*\\}/.source.replace(\n          /<str>/g,\n          function () {\n            return string.source\n          }\n        ),\n      'g'\n    ) // Tokenize all inline Smarty expressions\n    Prism.hooks.add('before-tokenize', function (env) {\n      var smartyLiteralStart = '{literal}'\n      var smartyLiteralEnd = '{/literal}'\n      var smartyLiteralMode = false\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'smarty',\n        smartyPattern,\n        function (match) {\n          // Smarty tags inside {literal} block are ignored\n          if (match === smartyLiteralEnd) {\n            smartyLiteralMode = false\n          }\n          if (!smartyLiteralMode) {\n            if (match === smartyLiteralStart) {\n              smartyLiteralMode = true\n            }\n            return true\n          }\n          return false\n        }\n      )\n    }) // Re-insert the tokens after tokenizing\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'smarty')\n    })\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = sml\nsml.displayName = 'sml'\nsml.aliases = ['smlnj']\nfunction sml(Prism) {\n  // https://smlfamily.github.io/sml97-defn.pdf\n  // https://people.mpi-sws.org/~rossberg/sml.html\n  ;(function (Prism) {\n    var keywords =\n      /\\b(?:abstype|and|andalso|as|case|datatype|do|else|end|eqtype|exception|fn|fun|functor|handle|if|in|include|infix|infixr|let|local|nonfix|of|op|open|orelse|raise|rec|sharing|sig|signature|struct|structure|then|type|val|where|while|with|withtype)\\b/i\n    Prism.languages.sml = {\n      // allow one level of nesting\n      comment:\n        /\\(\\*(?:[^*(]|\\*(?!\\))|\\((?!\\*)|\\(\\*(?:[^*(]|\\*(?!\\))|\\((?!\\*))*\\*\\))*\\*\\)/,\n      string: {\n        pattern: /#?\"(?:[^\"\\\\]|\\\\.)*\"/,\n        greedy: true\n      },\n      'class-name': [\n        {\n          // This is only an approximation since the real grammar is context-free\n          //\n          // Why the main loop so complex?\n          // The main loop is approximately the same as /(?:\\s*(?:[*,]|->)\\s*<TERMINAL>)*/ which is, obviously, a lot\n          // simpler. The difference is that if a comma is the last iteration of the loop, then the terminal must be\n          // followed by a long identifier.\n          pattern: RegExp(\n            /((?:^|[^:]):\\s*)<TERMINAL>(?:\\s*(?:(?:\\*|->)\\s*<TERMINAL>|,\\s*<TERMINAL>(?:(?=<NOT-LAST>)|(?!<NOT-LAST>)\\s+<LONG-ID>)))*/.source\n              .replace(/<NOT-LAST>/g, function () {\n                return /\\s*(?:[*,]|->)/.source\n              })\n              .replace(/<TERMINAL>/g, function () {\n                return /(?:'[\\w']*|<LONG-ID>|\\((?:[^()]|\\([^()]*\\))*\\)|\\{(?:[^{}]|\\{[^{}]*\\})*\\})(?:\\s+<LONG-ID>)*/\n                  .source\n              })\n              .replace(/<LONG-ID>/g, function () {\n                return /(?!<KEYWORD>)[a-z\\d_][\\w'.]*/.source\n              })\n              .replace(/<KEYWORD>/g, function () {\n                return keywords.source\n              }),\n            'i'\n          ),\n          lookbehind: true,\n          greedy: true,\n          inside: null // see below\n        },\n        {\n          pattern:\n            /((?:^|[^\\w'])(?:datatype|exception|functor|signature|structure|type)\\s+)[a-z_][\\w'.]*/i,\n          lookbehind: true\n        }\n      ],\n      function: {\n        pattern: /((?:^|[^\\w'])fun\\s+)[a-z_][\\w'.]*/i,\n        lookbehind: true\n      },\n      keyword: keywords,\n      variable: {\n        pattern: /(^|[^\\w'])'[\\w']*/,\n        lookbehind: true\n      },\n      number: /~?\\b(?:\\d+(?:\\.\\d+)?(?:e~?\\d+)?|0x[\\da-f]+)\\b/i,\n      word: {\n        pattern: /\\b0w(?:\\d+|x[\\da-f]+)\\b/i,\n        alias: 'constant'\n      },\n      boolean: /\\b(?:false|true)\\b/i,\n      operator: /\\.\\.\\.|:[>=:]|=>?|->|[<>]=?|[!+\\-*/^#|@~]/,\n      punctuation: /[(){}\\[\\].:,;]/\n    }\n    Prism.languages.sml['class-name'][0].inside = Prism.languages.sml\n    Prism.languages.smlnj = Prism.languages.sml\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = solidity\nsolidity.displayName = 'solidity'\nsolidity.aliases = ['sol']\nfunction solidity(Prism) {\n  Prism.languages.solidity = Prism.languages.extend('clike', {\n    'class-name': {\n      pattern:\n        /(\\b(?:contract|enum|interface|library|new|struct|using)\\s+)(?!\\d)[\\w$]+/,\n      lookbehind: true\n    },\n    keyword:\n      /\\b(?:_|anonymous|as|assembly|assert|break|calldata|case|constant|constructor|continue|contract|default|delete|do|else|emit|enum|event|external|for|from|function|if|import|indexed|inherited|interface|internal|is|let|library|mapping|memory|modifier|new|payable|pragma|private|public|pure|require|returns?|revert|selfdestruct|solidity|storage|struct|suicide|switch|this|throw|using|var|view|while)\\b/,\n    operator: /=>|->|:=|=:|\\*\\*|\\+\\+|--|\\|\\||&&|<<=?|>>=?|[-+*/%^&|<>!=]=?|[~?]/\n  })\n  Prism.languages.insertBefore('solidity', 'keyword', {\n    builtin:\n      /\\b(?:address|bool|byte|u?int(?:8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?|string|bytes(?:[1-9]|[12]\\d|3[0-2])?)\\b/\n  })\n  Prism.languages.insertBefore('solidity', 'number', {\n    version: {\n      pattern: /([<>]=?|\\^)\\d+\\.\\d+\\.\\d+\\b/,\n      lookbehind: true,\n      alias: 'number'\n    }\n  })\n  Prism.languages.sol = Prism.languages.solidity\n}\n","'use strict'\n\nmodule.exports = solutionFile\nsolutionFile.displayName = 'solutionFile'\nsolutionFile.aliases = []\nfunction solutionFile(Prism) {\n  ;(function (Prism) {\n    var guid = {\n      // https://en.wikipedia.org/wiki/Universally_unique_identifier#Format\n      pattern: /\\{[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12}\\}/i,\n      alias: 'constant',\n      inside: {\n        punctuation: /[{}]/\n      }\n    }\n    Prism.languages['solution-file'] = {\n      comment: {\n        pattern: /#.*/,\n        greedy: true\n      },\n      string: {\n        pattern: /\"[^\"\\r\\n]*\"|'[^'\\r\\n]*'/,\n        greedy: true,\n        inside: {\n          guid: guid\n        }\n      },\n      object: {\n        // Foo\n        //   Bar(\"abs\") = 9\n        //   EndBar\n        //   Prop = TRUE\n        // EndFoo\n        pattern:\n          /^([ \\t]*)(?:([A-Z]\\w*)\\b(?=.*(?:\\r\\n?|\\n)(?:\\1[ \\t].*(?:\\r\\n?|\\n))*\\1End\\2(?=[ \\t]*$))|End[A-Z]\\w*(?=[ \\t]*$))/m,\n        lookbehind: true,\n        greedy: true,\n        alias: 'keyword'\n      },\n      property: {\n        pattern: /^([ \\t]*)(?!\\s)[^\\r\\n\"#=()]*[^\\s\"#=()](?=\\s*=)/m,\n        lookbehind: true,\n        inside: {\n          guid: guid\n        }\n      },\n      guid: guid,\n      number: /\\b\\d+(?:\\.\\d+)*\\b/,\n      boolean: /\\b(?:FALSE|TRUE)\\b/,\n      operator: /=/,\n      punctuation: /[(),]/\n    }\n    Prism.languages['sln'] = Prism.languages['solution-file']\n  })(Prism)\n}\n","'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = soy\nsoy.displayName = 'soy'\nsoy.aliases = []\nfunction soy(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  ;(function (Prism) {\n    var stringPattern = /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/\n    var numberPattern = /\\b\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?\\b|\\b0x[\\dA-F]+\\b/\n    Prism.languages.soy = {\n      comment: [\n        /\\/\\*[\\s\\S]*?\\*\\//,\n        {\n          pattern: /(\\s)\\/\\/.*/,\n          lookbehind: true,\n          greedy: true\n        }\n      ],\n      'command-arg': {\n        pattern:\n          /(\\{+\\/?\\s*(?:alias|call|delcall|delpackage|deltemplate|namespace|template)\\s+)\\.?[\\w.]+/,\n        lookbehind: true,\n        alias: 'string',\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      parameter: {\n        pattern: /(\\{+\\/?\\s*@?param\\??\\s+)\\.?[\\w.]+/,\n        lookbehind: true,\n        alias: 'variable'\n      },\n      keyword: [\n        {\n          pattern:\n            /(\\{+\\/?[^\\S\\r\\n]*)(?:\\\\[nrt]|alias|call|case|css|default|delcall|delpackage|deltemplate|else(?:if)?|fallbackmsg|for(?:each)?|if(?:empty)?|lb|let|literal|msg|namespace|nil|@?param\\??|rb|sp|switch|template|xid)/,\n          lookbehind: true\n        },\n        /\\b(?:any|as|attributes|bool|css|float|html|in|int|js|list|map|null|number|string|uri)\\b/\n      ],\n      delimiter: {\n        pattern: /^\\{+\\/?|\\/?\\}+$/,\n        alias: 'punctuation'\n      },\n      property: /\\w+(?==)/,\n      variable: {\n        pattern: /\\$[^\\W\\d]\\w*(?:\\??(?:\\.\\w+|\\[[^\\]]+\\]))*/,\n        inside: {\n          string: {\n            pattern: stringPattern,\n            greedy: true\n          },\n          number: numberPattern,\n          punctuation: /[\\[\\].?]/\n        }\n      },\n      string: {\n        pattern: stringPattern,\n        greedy: true\n      },\n      function: [\n        /\\w+(?=\\()/,\n        {\n          pattern: /(\\|[^\\S\\r\\n]*)\\w+/,\n          lookbehind: true\n        }\n      ],\n      boolean: /\\b(?:false|true)\\b/,\n      number: numberPattern,\n      operator: /\\?:?|<=?|>=?|==?|!=|[+*/%-]|\\b(?:and|not|or)\\b/,\n      punctuation: /[{}()\\[\\]|.,:]/\n    } // Tokenize all inline Soy expressions\n    Prism.hooks.add('before-tokenize', function (env) {\n      var soyPattern = /\\{\\{.+?\\}\\}|\\{.+?\\}|\\s\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//g\n      var soyLitteralStart = '{literal}'\n      var soyLitteralEnd = '{/literal}'\n      var soyLitteralMode = false\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'soy',\n        soyPattern,\n        function (match) {\n          // Soy tags inside {literal} block are ignored\n          if (match === soyLitteralEnd) {\n            soyLitteralMode = false\n          }\n          if (!soyLitteralMode) {\n            if (match === soyLitteralStart) {\n              soyLitteralMode = true\n            }\n            return true\n          }\n          return false\n        }\n      )\n    }) // Re-insert the tokens after tokenizing\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'soy')\n    })\n  })(Prism)\n}\n","'use strict'\nvar refractorTurtle = require('./turtle.js')\nmodule.exports = sparql\nsparql.displayName = 'sparql'\nsparql.aliases = ['rq']\nfunction sparql(Prism) {\n  Prism.register(refractorTurtle)\n  Prism.languages.sparql = Prism.languages.extend('turtle', {\n    boolean: /\\b(?:false|true)\\b/i,\n    variable: {\n      pattern: /[?$]\\w+/,\n      greedy: true\n    }\n  })\n  Prism.languages.insertBefore('sparql', 'punctuation', {\n    keyword: [\n      /\\b(?:A|ADD|ALL|AS|ASC|ASK|BNODE|BY|CLEAR|CONSTRUCT|COPY|CREATE|DATA|DEFAULT|DELETE|DESC|DESCRIBE|DISTINCT|DROP|EXISTS|FILTER|FROM|GROUP|HAVING|INSERT|INTO|LIMIT|LOAD|MINUS|MOVE|NAMED|NOT|NOW|OFFSET|OPTIONAL|ORDER|RAND|REDUCED|SELECT|SEPARATOR|SERVICE|SILENT|STRUUID|UNION|USING|UUID|VALUES|WHERE)\\b/i,\n      /\\b(?:ABS|AVG|BIND|BOUND|CEIL|COALESCE|CONCAT|CONTAINS|COUNT|DATATYPE|DAY|ENCODE_FOR_URI|FLOOR|GROUP_CONCAT|HOURS|IF|IRI|isBLANK|isIRI|isLITERAL|isNUMERIC|isURI|LANG|LANGMATCHES|LCASE|MAX|MD5|MIN|MINUTES|MONTH|REGEX|REPLACE|ROUND|sameTerm|SAMPLE|SECONDS|SHA1|SHA256|SHA384|SHA512|STR|STRAFTER|STRBEFORE|STRDT|STRENDS|STRLANG|STRLEN|STRSTARTS|SUBSTR|SUM|TIMEZONE|TZ|UCASE|URI|YEAR)\\b(?=\\s*\\()/i,\n      /\\b(?:BASE|GRAPH|PREFIX)\\b/i\n    ]\n  })\n  Prism.languages.rq = Prism.languages.sparql\n}\n","'use strict'\n\nmodule.exports = splunkSpl\nsplunkSpl.displayName = 'splunkSpl'\nsplunkSpl.aliases = []\nfunction splunkSpl(Prism) {\n  Prism.languages['splunk-spl'] = {\n    comment: /`comment\\(\"(?:\\\\.|[^\\\\\"])*\"\\)`/,\n    string: {\n      pattern: /\"(?:\\\\.|[^\\\\\"])*\"/,\n      greedy: true\n    },\n    // https://docs.splunk.com/Documentation/Splunk/7.3.0/SearchReference/ListOfSearchCommands\n    keyword:\n      /\\b(?:abstract|accum|addcoltotals|addinfo|addtotals|analyzefields|anomalies|anomalousvalue|anomalydetection|append|appendcols|appendcsv|appendlookup|appendpipe|arules|associate|audit|autoregress|bin|bucket|bucketdir|chart|cluster|cofilter|collect|concurrency|contingency|convert|correlate|datamodel|dbinspect|dedup|delete|delta|diff|erex|eval|eventcount|eventstats|extract|fieldformat|fields|fieldsummary|filldown|fillnull|findtypes|folderize|foreach|format|from|gauge|gentimes|geom|geomfilter|geostats|head|highlight|history|iconify|input|inputcsv|inputlookup|iplocation|join|kmeans|kv|kvform|loadjob|localize|localop|lookup|makecontinuous|makemv|makeresults|map|mcollect|metadata|metasearch|meventcollect|mstats|multikv|multisearch|mvcombine|mvexpand|nomv|outlier|outputcsv|outputlookup|outputtext|overlap|pivot|predict|rangemap|rare|regex|relevancy|reltime|rename|replace|rest|return|reverse|rex|rtorder|run|savedsearch|script|scrub|search|searchtxn|selfjoin|sendemail|set|setfields|sichart|sirare|sistats|sitimechart|sitop|sort|spath|stats|strcat|streamstats|table|tags|tail|timechart|timewrap|top|transaction|transpose|trendline|tscollect|tstats|typeahead|typelearner|typer|union|uniq|untable|where|x11|xmlkv|xmlunescape|xpath|xyseries)\\b/i,\n    'operator-word': {\n      pattern: /\\b(?:and|as|by|not|or|xor)\\b/i,\n      alias: 'operator'\n    },\n    function: /\\b\\w+(?=\\s*\\()/,\n    property: /\\b\\w+(?=\\s*=(?!=))/,\n    date: {\n      // MM/DD/YYYY(:HH:MM:SS)?\n      pattern: /\\b\\d{1,2}\\/\\d{1,2}\\/\\d{1,4}(?:(?::\\d{1,2}){3})?\\b/,\n      alias: 'number'\n    },\n    number: /\\b\\d+(?:\\.\\d+)?\\b/,\n    boolean: /\\b(?:f|false|t|true)\\b/i,\n    operator: /[<>=]=?|[-+*/%|]/,\n    punctuation: /[()[\\],]/\n  }\n}\n","'use strict'\n\nmodule.exports = sqf\nsqf.displayName = 'sqf'\nsqf.aliases = []\nfunction sqf(Prism) {\n  Prism.languages.sqf = Prism.languages.extend('clike', {\n    string: {\n      pattern: /\"(?:(?:\"\")?[^\"])*\"(?!\")|'(?:[^'])*'/,\n      greedy: true\n    },\n    keyword:\n      /\\b(?:breakOut|breakTo|call|case|catch|default|do|echo|else|execFSM|execVM|exitWith|for|forEach|forEachMember|forEachMemberAgent|forEachMemberTeam|from|goto|if|nil|preprocessFile|preprocessFileLineNumbers|private|scopeName|spawn|step|switch|then|throw|to|try|while|with)\\b/i,\n    boolean: /\\b(?:false|true)\\b/i,\n    function:\n      /\\b(?:abs|accTime|acos|action|actionIDs|actionKeys|actionKeysImages|actionKeysNames|actionKeysNamesArray|actionName|actionParams|activateAddons|activatedAddons|activateKey|add3DENConnection|add3DENEventHandler|add3DENLayer|addAction|addBackpack|addBackpackCargo|addBackpackCargoGlobal|addBackpackGlobal|addCamShake|addCuratorAddons|addCuratorCameraArea|addCuratorEditableObjects|addCuratorEditingArea|addCuratorPoints|addEditorObject|addEventHandler|addForce|addForceGeneratorRTD|addGoggles|addGroupIcon|addHandgunItem|addHeadgear|addItem|addItemCargo|addItemCargoGlobal|addItemPool|addItemToBackpack|addItemToUniform|addItemToVest|addLiveStats|addMagazine|addMagazineAmmoCargo|addMagazineCargo|addMagazineCargoGlobal|addMagazineGlobal|addMagazinePool|addMagazines|addMagazineTurret|addMenu|addMenuItem|addMissionEventHandler|addMPEventHandler|addMusicEventHandler|addOwnedMine|addPlayerScores|addPrimaryWeaponItem|addPublicVariableEventHandler|addRating|addResources|addScore|addScoreSide|addSecondaryWeaponItem|addSwitchableUnit|addTeamMember|addToRemainsCollector|addTorque|addUniform|addVehicle|addVest|addWaypoint|addWeapon|addWeaponCargo|addWeaponCargoGlobal|addWeaponGlobal|addWeaponItem|addWeaponPool|addWeaponTurret|admin|agent|agents|AGLToASL|aimedAtTarget|aimPos|airDensityCurveRTD|airDensityRTD|airplaneThrottle|airportSide|AISFinishHeal|alive|all3DENEntities|allAirports|allControls|allCurators|allCutLayers|allDead|allDeadMen|allDisplays|allGroups|allMapMarkers|allMines|allMissionObjects|allow3DMode|allowCrewInImmobile|allowCuratorLogicIgnoreAreas|allowDamage|allowDammage|allowFileOperations|allowFleeing|allowGetIn|allowSprint|allPlayers|allSimpleObjects|allSites|allTurrets|allUnits|allUnitsUAV|allVariables|ammo|ammoOnPylon|animate|animateBay|animateDoor|animatePylon|animateSource|animationNames|animationPhase|animationSourcePhase|animationState|append|apply|armoryPoints|arrayIntersect|asin|ASLToAGL|ASLToATL|assert|assignAsCargo|assignAsCargoIndex|assignAsCommander|assignAsDriver|assignAsGunner|assignAsTurret|assignCurator|assignedCargo|assignedCommander|assignedDriver|assignedGunner|assignedItems|assignedTarget|assignedTeam|assignedVehicle|assignedVehicleRole|assignItem|assignTeam|assignToAirport|atan|atan2|atg|ATLToASL|attachedObject|attachedObjects|attachedTo|attachObject|attachTo|attackEnabled|backpack|backpackCargo|backpackContainer|backpackItems|backpackMagazines|backpackSpaceFor|behaviour|benchmark|binocular|blufor|boundingBox|boundingBoxReal|boundingCenter|briefingName|buildingExit|buildingPos|buldozer_EnableRoadDiag|buldozer_IsEnabledRoadDiag|buldozer_LoadNewRoads|buldozer_reloadOperMap|buttonAction|buttonSetAction|cadetMode|callExtension|camCommand|camCommit|camCommitPrepared|camCommitted|camConstuctionSetParams|camCreate|camDestroy|cameraEffect|cameraEffectEnableHUD|cameraInterest|cameraOn|cameraView|campaignConfigFile|camPreload|camPreloaded|camPrepareBank|camPrepareDir|camPrepareDive|camPrepareFocus|camPrepareFov|camPrepareFovRange|camPreparePos|camPrepareRelPos|camPrepareTarget|camSetBank|camSetDir|camSetDive|camSetFocus|camSetFov|camSetFovRange|camSetPos|camSetRelPos|camSetTarget|camTarget|camUseNVG|canAdd|canAddItemToBackpack|canAddItemToUniform|canAddItemToVest|cancelSimpleTaskDestination|canFire|canMove|canSlingLoad|canStand|canSuspend|canTriggerDynamicSimulation|canUnloadInCombat|canVehicleCargo|captive|captiveNum|cbChecked|cbSetChecked|ceil|channelEnabled|cheatsEnabled|checkAIFeature|checkVisibility|civilian|className|clear3DENAttribute|clear3DENInventory|clearAllItemsFromBackpack|clearBackpackCargo|clearBackpackCargoGlobal|clearForcesRTD|clearGroupIcons|clearItemCargo|clearItemCargoGlobal|clearItemPool|clearMagazineCargo|clearMagazineCargoGlobal|clearMagazinePool|clearOverlay|clearRadio|clearVehicleInit|clearWeaponCargo|clearWeaponCargoGlobal|clearWeaponPool|clientOwner|closeDialog|closeDisplay|closeOverlay|collapseObjectTree|collect3DENHistory|collectiveRTD|combatMode|commandArtilleryFire|commandChat|commander|commandFire|commandFollow|commandFSM|commandGetOut|commandingMenu|commandMove|commandRadio|commandStop|commandSuppressiveFire|commandTarget|commandWatch|comment|commitOverlay|compile|compileFinal|completedFSM|composeText|configClasses|configFile|configHierarchy|configName|configNull|configProperties|configSourceAddonList|configSourceMod|configSourceModList|confirmSensorTarget|connectTerminalToUAV|controlNull|controlsGroupCtrl|copyFromClipboard|copyToClipboard|copyWaypoints|cos|count|countEnemy|countFriendly|countSide|countType|countUnknown|create3DENComposition|create3DENEntity|createAgent|createCenter|createDialog|createDiaryLink|createDiaryRecord|createDiarySubject|createDisplay|createGearDialog|createGroup|createGuardedPoint|createLocation|createMarker|createMarkerLocal|createMenu|createMine|createMissionDisplay|createMPCampaignDisplay|createSimpleObject|createSimpleTask|createSite|createSoundSource|createTask|createTeam|createTrigger|createUnit|createVehicle|createVehicleCrew|createVehicleLocal|crew|ctAddHeader|ctAddRow|ctClear|ctCurSel|ctData|ctFindHeaderRows|ctFindRowHeader|ctHeaderControls|ctHeaderCount|ctRemoveHeaders|ctRemoveRows|ctrlActivate|ctrlAddEventHandler|ctrlAngle|ctrlAutoScrollDelay|ctrlAutoScrollRewind|ctrlAutoScrollSpeed|ctrlChecked|ctrlClassName|ctrlCommit|ctrlCommitted|ctrlCreate|ctrlDelete|ctrlEnable|ctrlEnabled|ctrlFade|ctrlHTMLLoaded|ctrlIDC|ctrlIDD|ctrlMapAnimAdd|ctrlMapAnimClear|ctrlMapAnimCommit|ctrlMapAnimDone|ctrlMapCursor|ctrlMapMouseOver|ctrlMapScale|ctrlMapScreenToWorld|ctrlMapWorldToScreen|ctrlModel|ctrlModelDirAndUp|ctrlModelScale|ctrlParent|ctrlParentControlsGroup|ctrlPosition|ctrlRemoveAllEventHandlers|ctrlRemoveEventHandler|ctrlScale|ctrlSetActiveColor|ctrlSetAngle|ctrlSetAutoScrollDelay|ctrlSetAutoScrollRewind|ctrlSetAutoScrollSpeed|ctrlSetBackgroundColor|ctrlSetChecked|ctrlSetDisabledColor|ctrlSetEventHandler|ctrlSetFade|ctrlSetFocus|ctrlSetFont|ctrlSetFontH1|ctrlSetFontH1B|ctrlSetFontH2|ctrlSetFontH2B|ctrlSetFontH3|ctrlSetFontH3B|ctrlSetFontH4|ctrlSetFontH4B|ctrlSetFontH5|ctrlSetFontH5B|ctrlSetFontH6|ctrlSetFontH6B|ctrlSetFontHeight|ctrlSetFontHeightH1|ctrlSetFontHeightH2|ctrlSetFontHeightH3|ctrlSetFontHeightH4|ctrlSetFontHeightH5|ctrlSetFontHeightH6|ctrlSetFontHeightSecondary|ctrlSetFontP|ctrlSetFontPB|ctrlSetFontSecondary|ctrlSetForegroundColor|ctrlSetModel|ctrlSetModelDirAndUp|ctrlSetModelScale|ctrlSetPixelPrecision|ctrlSetPosition|ctrlSetScale|ctrlSetStructuredText|ctrlSetText|ctrlSetTextColor|ctrlSetTextColorSecondary|ctrlSetTextSecondary|ctrlSetTooltip|ctrlSetTooltipColorBox|ctrlSetTooltipColorShade|ctrlSetTooltipColorText|ctrlShow|ctrlShown|ctrlText|ctrlTextHeight|ctrlTextSecondary|ctrlTextWidth|ctrlType|ctrlVisible|ctRowControls|ctRowCount|ctSetCurSel|ctSetData|ctSetHeaderTemplate|ctSetRowTemplate|ctSetValue|ctValue|curatorAddons|curatorCamera|curatorCameraArea|curatorCameraAreaCeiling|curatorCoef|curatorEditableObjects|curatorEditingArea|curatorEditingAreaType|curatorMouseOver|curatorPoints|curatorRegisteredObjects|curatorSelected|curatorWaypointCost|current3DENOperation|currentChannel|currentCommand|currentMagazine|currentMagazineDetail|currentMagazineDetailTurret|currentMagazineTurret|currentMuzzle|currentNamespace|currentTask|currentTasks|currentThrowable|currentVisionMode|currentWaypoint|currentWeapon|currentWeaponMode|currentWeaponTurret|currentZeroing|cursorObject|cursorTarget|customChat|customRadio|cutFadeOut|cutObj|cutRsc|cutText|damage|date|dateToNumber|daytime|deActivateKey|debriefingText|debugFSM|debugLog|deg|delete3DENEntities|deleteAt|deleteCenter|deleteCollection|deleteEditorObject|deleteGroup|deleteGroupWhenEmpty|deleteIdentity|deleteLocation|deleteMarker|deleteMarkerLocal|deleteRange|deleteResources|deleteSite|deleteStatus|deleteTeam|deleteVehicle|deleteVehicleCrew|deleteWaypoint|detach|detectedMines|diag_activeMissionFSMs|diag_activeScripts|diag_activeSQFScripts|diag_activeSQSScripts|diag_captureFrame|diag_captureFrameToFile|diag_captureSlowFrame|diag_codePerformance|diag_drawMode|diag_dynamicSimulationEnd|diag_enable|diag_enabled|diag_fps|diag_fpsMin|diag_frameNo|diag_lightNewLoad|diag_list|diag_log|diag_logSlowFrame|diag_mergeConfigFile|diag_recordTurretLimits|diag_setLightNew|diag_tickTime|diag_toggle|dialog|diarySubjectExists|didJIP|didJIPOwner|difficulty|difficultyEnabled|difficultyEnabledRTD|difficultyOption|direction|directSay|disableAI|disableCollisionWith|disableConversation|disableDebriefingStats|disableMapIndicators|disableNVGEquipment|disableRemoteSensors|disableSerialization|disableTIEquipment|disableUAVConnectability|disableUserInput|displayAddEventHandler|displayCtrl|displayNull|displayParent|displayRemoveAllEventHandlers|displayRemoveEventHandler|displaySetEventHandler|dissolveTeam|distance|distance2D|distanceSqr|distributionRegion|do3DENAction|doArtilleryFire|doFire|doFollow|doFSM|doGetOut|doMove|doorPhase|doStop|doSuppressiveFire|doTarget|doWatch|drawArrow|drawEllipse|drawIcon|drawIcon3D|drawLine|drawLine3D|drawLink|drawLocation|drawPolygon|drawRectangle|drawTriangle|driver|drop|dynamicSimulationDistance|dynamicSimulationDistanceCoef|dynamicSimulationEnabled|dynamicSimulationSystemEnabled|east|edit3DENMissionAttributes|editObject|editorSetEventHandler|effectiveCommander|emptyPositions|enableAI|enableAIFeature|enableAimPrecision|enableAttack|enableAudioFeature|enableAutoStartUpRTD|enableAutoTrimRTD|enableCamShake|enableCaustics|enableChannel|enableCollisionWith|enableCopilot|enableDebriefingStats|enableDiagLegend|enableDynamicSimulation|enableDynamicSimulationSystem|enableEndDialog|enableEngineArtillery|enableEnvironment|enableFatigue|enableGunLights|enableInfoPanelComponent|enableIRLasers|enableMimics|enablePersonTurret|enableRadio|enableReload|enableRopeAttach|enableSatNormalOnDetail|enableSaving|enableSentences|enableSimulation|enableSimulationGlobal|enableStamina|enableStressDamage|enableTeamSwitch|enableTraffic|enableUAVConnectability|enableUAVWaypoints|enableVehicleCargo|enableVehicleSensor|enableWeaponDisassembly|endl|endLoadingScreen|endMission|engineOn|enginesIsOnRTD|enginesPowerRTD|enginesRpmRTD|enginesTorqueRTD|entities|environmentEnabled|estimatedEndServerTime|estimatedTimeLeft|evalObjectArgument|everyBackpack|everyContainer|exec|execEditorScript|exp|expectedDestination|exportJIPMessages|eyeDirection|eyePos|face|faction|fadeMusic|fadeRadio|fadeSound|fadeSpeech|failMission|fillWeaponsFromPool|find|findCover|findDisplay|findEditorObject|findEmptyPosition|findEmptyPositionReady|findIf|findNearestEnemy|finishMissionInit|finite|fire|fireAtTarget|firstBackpack|flag|flagAnimationPhase|flagOwner|flagSide|flagTexture|fleeing|floor|flyInHeight|flyInHeightASL|fog|fogForecast|fogParams|forceAddUniform|forceAtPositionRTD|forcedMap|forceEnd|forceFlagTexture|forceFollowRoad|forceGeneratorRTD|forceMap|forceRespawn|forceSpeed|forceWalk|forceWeaponFire|forceWeatherChange|forgetTarget|format|formation|formationDirection|formationLeader|formationMembers|formationPosition|formationTask|formatText|formLeader|freeLook|fromEditor|fuel|fullCrew|gearIDCAmmoCount|gearSlotAmmoCount|gearSlotData|get3DENActionState|get3DENAttribute|get3DENCamera|get3DENConnections|get3DENEntity|get3DENEntityID|get3DENGrid|get3DENIconsVisible|get3DENLayerEntities|get3DENLinesVisible|get3DENMissionAttribute|get3DENMouseOver|get3DENSelected|getAimingCoef|getAllEnvSoundControllers|getAllHitPointsDamage|getAllOwnedMines|getAllSoundControllers|getAmmoCargo|getAnimAimPrecision|getAnimSpeedCoef|getArray|getArtilleryAmmo|getArtilleryComputerSettings|getArtilleryETA|getAssignedCuratorLogic|getAssignedCuratorUnit|getBackpackCargo|getBleedingRemaining|getBurningValue|getCameraViewDirection|getCargoIndex|getCenterOfMass|getClientState|getClientStateNumber|getCompatiblePylonMagazines|getConnectedUAV|getContainerMaxLoad|getCursorObjectParams|getCustomAimCoef|getDammage|getDescription|getDir|getDirVisual|getDLCAssetsUsage|getDLCAssetsUsageByName|getDLCs|getDLCUsageTime|getEditorCamera|getEditorMode|getEditorObjectScope|getElevationOffset|getEngineTargetRpmRTD|getEnvSoundController|getFatigue|getFieldManualStartPage|getForcedFlagTexture|getFriend|getFSMVariable|getFuelCargo|getGroupIcon|getGroupIconParams|getGroupIcons|getHideFrom|getHit|getHitIndex|getHitPointDamage|getItemCargo|getMagazineCargo|getMarkerColor|getMarkerPos|getMarkerSize|getMarkerType|getMass|getMissionConfig|getMissionConfigValue|getMissionDLCs|getMissionLayerEntities|getMissionLayers|getModelInfo|getMousePosition|getMusicPlayedTime|getNumber|getObjectArgument|getObjectChildren|getObjectDLC|getObjectMaterials|getObjectProxy|getObjectTextures|getObjectType|getObjectViewDistance|getOxygenRemaining|getPersonUsedDLCs|getPilotCameraDirection|getPilotCameraPosition|getPilotCameraRotation|getPilotCameraTarget|getPlateNumber|getPlayerChannel|getPlayerScores|getPlayerUID|getPlayerUIDOld|getPos|getPosASL|getPosASLVisual|getPosASLW|getPosATL|getPosATLVisual|getPosVisual|getPosWorld|getPylonMagazines|getRelDir|getRelPos|getRemoteSensorsDisabled|getRepairCargo|getResolution|getRotorBrakeRTD|getShadowDistance|getShotParents|getSlingLoad|getSoundController|getSoundControllerResult|getSpeed|getStamina|getStatValue|getSuppression|getTerrainGrid|getTerrainHeightASL|getText|getTotalDLCUsageTime|getTrimOffsetRTD|getUnitLoadout|getUnitTrait|getUserMFDText|getUserMFDValue|getVariable|getVehicleCargo|getWeaponCargo|getWeaponSway|getWingsOrientationRTD|getWingsPositionRTD|getWPPos|glanceAt|globalChat|globalRadio|goggles|group|groupChat|groupFromNetId|groupIconSelectable|groupIconsVisible|groupId|groupOwner|groupRadio|groupSelectedUnits|groupSelectUnit|grpNull|gunner|gusts|halt|handgunItems|handgunMagazine|handgunWeapon|handsHit|hasInterface|hasPilotCamera|hasWeapon|hcAllGroups|hcGroupParams|hcLeader|hcRemoveAllGroups|hcRemoveGroup|hcSelected|hcSelectGroup|hcSetGroup|hcShowBar|hcShownBar|headgear|hideBody|hideObject|hideObjectGlobal|hideSelection|hint|hintC|hintCadet|hintSilent|hmd|hostMission|htmlLoad|HUDMovementLevels|humidity|image|importAllGroups|importance|in|inArea|inAreaArray|incapacitatedState|independent|inflame|inflamed|infoPanel|infoPanelComponentEnabled|infoPanelComponents|infoPanels|inGameUISetEventHandler|inheritsFrom|initAmbientLife|inPolygon|inputAction|inRangeOfArtillery|insertEditorObject|intersect|is3DEN|is3DENMultiplayer|isAbleToBreathe|isAgent|isAimPrecisionEnabled|isArray|isAutoHoverOn|isAutonomous|isAutoStartUpEnabledRTD|isAutotest|isAutoTrimOnRTD|isBleeding|isBurning|isClass|isCollisionLightOn|isCopilotEnabled|isDamageAllowed|isDedicated|isDLCAvailable|isEngineOn|isEqualTo|isEqualType|isEqualTypeAll|isEqualTypeAny|isEqualTypeArray|isEqualTypeParams|isFilePatchingEnabled|isFlashlightOn|isFlatEmpty|isForcedWalk|isFormationLeader|isGroupDeletedWhenEmpty|isHidden|isInRemainsCollector|isInstructorFigureEnabled|isIRLaserOn|isKeyActive|isKindOf|isLaserOn|isLightOn|isLocalized|isManualFire|isMarkedForCollection|isMultiplayer|isMultiplayerSolo|isNil|isNull|isNumber|isObjectHidden|isObjectRTD|isOnRoad|isPipEnabled|isPlayer|isRealTime|isRemoteExecuted|isRemoteExecutedJIP|isServer|isShowing3DIcons|isSimpleObject|isSprintAllowed|isStaminaEnabled|isSteamMission|isStreamFriendlyUIEnabled|isStressDamageEnabled|isText|isTouchingGround|isTurnedOut|isTutHintsEnabled|isUAVConnectable|isUAVConnected|isUIContext|isUniformAllowed|isVehicleCargo|isVehicleRadarOn|isVehicleSensorEnabled|isWalking|isWeaponDeployed|isWeaponRested|itemCargo|items|itemsWithMagazines|join|joinAs|joinAsSilent|joinSilent|joinString|kbAddDatabase|kbAddDatabaseTargets|kbAddTopic|kbHasTopic|kbReact|kbRemoveTopic|kbTell|kbWasSaid|keyImage|keyName|knowsAbout|land|landAt|landResult|language|laserTarget|lbAdd|lbClear|lbColor|lbColorRight|lbCurSel|lbData|lbDelete|lbIsSelected|lbPicture|lbPictureRight|lbSelection|lbSetColor|lbSetColorRight|lbSetCurSel|lbSetData|lbSetPicture|lbSetPictureColor|lbSetPictureColorDisabled|lbSetPictureColorSelected|lbSetPictureRight|lbSetPictureRightColor|lbSetPictureRightColorDisabled|lbSetPictureRightColorSelected|lbSetSelectColor|lbSetSelectColorRight|lbSetSelected|lbSetText|lbSetTextRight|lbSetTooltip|lbSetValue|lbSize|lbSort|lbSortByValue|lbText|lbTextRight|lbValue|leader|leaderboardDeInit|leaderboardGetRows|leaderboardInit|leaderboardRequestRowsFriends|leaderboardRequestRowsGlobal|leaderboardRequestRowsGlobalAroundUser|leaderboardsRequestUploadScore|leaderboardsRequestUploadScoreKeepBest|leaderboardState|leaveVehicle|libraryCredits|libraryDisclaimers|lifeState|lightAttachObject|lightDetachObject|lightIsOn|lightnings|limitSpeed|linearConversion|lineBreak|lineIntersects|lineIntersectsObjs|lineIntersectsSurfaces|lineIntersectsWith|linkItem|list|listObjects|listRemoteTargets|listVehicleSensors|ln|lnbAddArray|lnbAddColumn|lnbAddRow|lnbClear|lnbColor|lnbColorRight|lnbCurSelRow|lnbData|lnbDeleteColumn|lnbDeleteRow|lnbGetColumnsPosition|lnbPicture|lnbPictureRight|lnbSetColor|lnbSetColorRight|lnbSetColumnsPos|lnbSetCurSelRow|lnbSetData|lnbSetPicture|lnbSetPictureColor|lnbSetPictureColorRight|lnbSetPictureColorSelected|lnbSetPictureColorSelectedRight|lnbSetPictureRight|lnbSetText|lnbSetTextRight|lnbSetValue|lnbSize|lnbSort|lnbSortByValue|lnbText|lnbTextRight|lnbValue|load|loadAbs|loadBackpack|loadFile|loadGame|loadIdentity|loadMagazine|loadOverlay|loadStatus|loadUniform|loadVest|local|localize|locationNull|locationPosition|lock|lockCameraTo|lockCargo|lockDriver|locked|lockedCargo|lockedDriver|lockedTurret|lockIdentity|lockTurret|lockWP|log|logEntities|logNetwork|logNetworkTerminate|lookAt|lookAtPos|magazineCargo|magazines|magazinesAllTurrets|magazinesAmmo|magazinesAmmoCargo|magazinesAmmoFull|magazinesDetail|magazinesDetailBackpack|magazinesDetailUniform|magazinesDetailVest|magazinesTurret|magazineTurretAmmo|mapAnimAdd|mapAnimClear|mapAnimCommit|mapAnimDone|mapCenterOnCamera|mapGridPosition|markAsFinishedOnSteam|markerAlpha|markerBrush|markerColor|markerDir|markerPos|markerShape|markerSize|markerText|markerType|max|members|menuAction|menuAdd|menuChecked|menuClear|menuCollapse|menuData|menuDelete|menuEnable|menuEnabled|menuExpand|menuHover|menuPicture|menuSetAction|menuSetCheck|menuSetData|menuSetPicture|menuSetValue|menuShortcut|menuShortcutText|menuSize|menuSort|menuText|menuURL|menuValue|min|mineActive|mineDetectedBy|missionConfigFile|missionDifficulty|missionName|missionNamespace|missionStart|missionVersion|modelToWorld|modelToWorldVisual|modelToWorldVisualWorld|modelToWorldWorld|modParams|moonIntensity|moonPhase|morale|move|move3DENCamera|moveInAny|moveInCargo|moveInCommander|moveInDriver|moveInGunner|moveInTurret|moveObjectToEnd|moveOut|moveTime|moveTo|moveToCompleted|moveToFailed|musicVolume|name|nameSound|nearEntities|nearestBuilding|nearestLocation|nearestLocations|nearestLocationWithDubbing|nearestObject|nearestObjects|nearestTerrainObjects|nearObjects|nearObjectsReady|nearRoads|nearSupplies|nearTargets|needReload|netId|netObjNull|newOverlay|nextMenuItemIndex|nextWeatherChange|nMenuItems|numberOfEnginesRTD|numberToDate|objectCurators|objectFromNetId|objectParent|objNull|objStatus|onBriefingGear|onBriefingGroup|onBriefingNotes|onBriefingPlan|onBriefingTeamSwitch|onCommandModeChanged|onDoubleClick|onEachFrame|onGroupIconClick|onGroupIconOverEnter|onGroupIconOverLeave|onHCGroupSelectionChanged|onMapSingleClick|onPlayerConnected|onPlayerDisconnected|onPreloadFinished|onPreloadStarted|onShowNewObject|onTeamSwitch|openCuratorInterface|openDLCPage|openDSInterface|openMap|openSteamApp|openYoutubeVideo|opfor|orderGetIn|overcast|overcastForecast|owner|param|params|parseNumber|parseSimpleArray|parseText|parsingNamespace|particlesQuality|pi|pickWeaponPool|pitch|pixelGrid|pixelGridBase|pixelGridNoUIScale|pixelH|pixelW|playableSlotsNumber|playableUnits|playAction|playActionNow|player|playerRespawnTime|playerSide|playersNumber|playGesture|playMission|playMove|playMoveNow|playMusic|playScriptedMission|playSound|playSound3D|position|positionCameraToWorld|posScreenToWorld|posWorldToScreen|ppEffectAdjust|ppEffectCommit|ppEffectCommitted|ppEffectCreate|ppEffectDestroy|ppEffectEnable|ppEffectEnabled|ppEffectForceInNVG|precision|preloadCamera|preloadObject|preloadSound|preloadTitleObj|preloadTitleRsc|primaryWeapon|primaryWeaponItems|primaryWeaponMagazine|priority|processDiaryLink|processInitCommands|productVersion|profileName|profileNamespace|profileNameSteam|progressLoadingScreen|progressPosition|progressSetPosition|publicVariable|publicVariableClient|publicVariableServer|pushBack|pushBackUnique|putWeaponPool|queryItemsPool|queryMagazinePool|queryWeaponPool|rad|radioChannelAdd|radioChannelCreate|radioChannelRemove|radioChannelSetCallSign|radioChannelSetLabel|radioVolume|rain|rainbow|random|rank|rankId|rating|rectangular|registeredTasks|registerTask|reload|reloadEnabled|remoteControl|remoteExec|remoteExecCall|remoteExecutedOwner|remove3DENConnection|remove3DENEventHandler|remove3DENLayer|removeAction|removeAll3DENEventHandlers|removeAllActions|removeAllAssignedItems|removeAllContainers|removeAllCuratorAddons|removeAllCuratorCameraAreas|removeAllCuratorEditingAreas|removeAllEventHandlers|removeAllHandgunItems|removeAllItems|removeAllItemsWithMagazines|removeAllMissionEventHandlers|removeAllMPEventHandlers|removeAllMusicEventHandlers|removeAllOwnedMines|removeAllPrimaryWeaponItems|removeAllWeapons|removeBackpack|removeBackpackGlobal|removeCuratorAddons|removeCuratorCameraArea|removeCuratorEditableObjects|removeCuratorEditingArea|removeDrawIcon|removeDrawLinks|removeEventHandler|removeFromRemainsCollector|removeGoggles|removeGroupIcon|removeHandgunItem|removeHeadgear|removeItem|removeItemFromBackpack|removeItemFromUniform|removeItemFromVest|removeItems|removeMagazine|removeMagazineGlobal|removeMagazines|removeMagazinesTurret|removeMagazineTurret|removeMenuItem|removeMissionEventHandler|removeMPEventHandler|removeMusicEventHandler|removeOwnedMine|removePrimaryWeaponItem|removeSecondaryWeaponItem|removeSimpleTask|removeSwitchableUnit|removeTeamMember|removeUniform|removeVest|removeWeapon|removeWeaponAttachmentCargo|removeWeaponCargo|removeWeaponGlobal|removeWeaponTurret|reportRemoteTarget|requiredVersion|resetCamShake|resetSubgroupDirection|resistance|resize|resources|respawnVehicle|restartEditorCamera|reveal|revealMine|reverse|reversedMouseY|roadAt|roadsConnectedTo|roleDescription|ropeAttachedObjects|ropeAttachedTo|ropeAttachEnabled|ropeAttachTo|ropeCreate|ropeCut|ropeDestroy|ropeDetach|ropeEndPosition|ropeLength|ropes|ropeUnwind|ropeUnwound|rotorsForcesRTD|rotorsRpmRTD|round|runInitScript|safeZoneH|safeZoneW|safeZoneWAbs|safeZoneX|safeZoneXAbs|safeZoneY|save3DENInventory|saveGame|saveIdentity|saveJoysticks|saveOverlay|saveProfileNamespace|saveStatus|saveVar|savingEnabled|say|say2D|say3D|score|scoreSide|screenshot|screenToWorld|scriptDone|scriptName|scriptNull|scudState|secondaryWeapon|secondaryWeaponItems|secondaryWeaponMagazine|select|selectBestPlaces|selectDiarySubject|selectedEditorObjects|selectEditorObject|selectionNames|selectionPosition|selectLeader|selectMax|selectMin|selectNoPlayer|selectPlayer|selectRandom|selectRandomWeighted|selectWeapon|selectWeaponTurret|sendAUMessage|sendSimpleCommand|sendTask|sendTaskResult|sendUDPMessage|serverCommand|serverCommandAvailable|serverCommandExecutable|serverName|serverTime|set|set3DENAttribute|set3DENAttributes|set3DENGrid|set3DENIconsVisible|set3DENLayer|set3DENLinesVisible|set3DENLogicType|set3DENMissionAttribute|set3DENMissionAttributes|set3DENModelsVisible|set3DENObjectType|set3DENSelected|setAccTime|setActualCollectiveRTD|setAirplaneThrottle|setAirportSide|setAmmo|setAmmoCargo|setAmmoOnPylon|setAnimSpeedCoef|setAperture|setApertureNew|setArmoryPoints|setAttributes|setAutonomous|setBehaviour|setBleedingRemaining|setBrakesRTD|setCameraInterest|setCamShakeDefParams|setCamShakeParams|setCamUseTI|setCaptive|setCenterOfMass|setCollisionLight|setCombatMode|setCompassOscillation|setConvoySeparation|setCuratorCameraAreaCeiling|setCuratorCoef|setCuratorEditingAreaType|setCuratorWaypointCost|setCurrentChannel|setCurrentTask|setCurrentWaypoint|setCustomAimCoef|setCustomWeightRTD|setDamage|setDammage|setDate|setDebriefingText|setDefaultCamera|setDestination|setDetailMapBlendPars|setDir|setDirection|setDrawIcon|setDriveOnPath|setDropInterval|setDynamicSimulationDistance|setDynamicSimulationDistanceCoef|setEditorMode|setEditorObjectScope|setEffectCondition|setEngineRpmRTD|setFace|setFaceAnimation|setFatigue|setFeatureType|setFlagAnimationPhase|setFlagOwner|setFlagSide|setFlagTexture|setFog|setForceGeneratorRTD|setFormation|setFormationTask|setFormDir|setFriend|setFromEditor|setFSMVariable|setFuel|setFuelCargo|setGroupIcon|setGroupIconParams|setGroupIconsSelectable|setGroupIconsVisible|setGroupId|setGroupIdGlobal|setGroupOwner|setGusts|setHideBehind|setHit|setHitIndex|setHitPointDamage|setHorizonParallaxCoef|setHUDMovementLevels|setIdentity|setImportance|setInfoPanel|setLeader|setLightAmbient|setLightAttenuation|setLightBrightness|setLightColor|setLightDayLight|setLightFlareMaxDistance|setLightFlareSize|setLightIntensity|setLightnings|setLightUseFlare|setLocalWindParams|setMagazineTurretAmmo|setMarkerAlpha|setMarkerAlphaLocal|setMarkerBrush|setMarkerBrushLocal|setMarkerColor|setMarkerColorLocal|setMarkerDir|setMarkerDirLocal|setMarkerPos|setMarkerPosLocal|setMarkerShape|setMarkerShapeLocal|setMarkerSize|setMarkerSizeLocal|setMarkerText|setMarkerTextLocal|setMarkerType|setMarkerTypeLocal|setMass|setMimic|setMousePosition|setMusicEffect|setMusicEventHandler|setName|setNameSound|setObjectArguments|setObjectMaterial|setObjectMaterialGlobal|setObjectProxy|setObjectTexture|setObjectTextureGlobal|setObjectViewDistance|setOvercast|setOwner|setOxygenRemaining|setParticleCircle|setParticleClass|setParticleFire|setParticleParams|setParticleRandom|setPilotCameraDirection|setPilotCameraRotation|setPilotCameraTarget|setPilotLight|setPiPEffect|setPitch|setPlateNumber|setPlayable|setPlayerRespawnTime|setPos|setPosASL|setPosASL2|setPosASLW|setPosATL|setPosition|setPosWorld|setPylonLoadOut|setPylonsPriority|setRadioMsg|setRain|setRainbow|setRandomLip|setRank|setRectangular|setRepairCargo|setRotorBrakeRTD|setShadowDistance|setShotParents|setSide|setSimpleTaskAlwaysVisible|setSimpleTaskCustomData|setSimpleTaskDescription|setSimpleTaskDestination|setSimpleTaskTarget|setSimpleTaskType|setSimulWeatherLayers|setSize|setSkill|setSlingLoad|setSoundEffect|setSpeaker|setSpeech|setSpeedMode|setStamina|setStaminaScheme|setStatValue|setSuppression|setSystemOfUnits|setTargetAge|setTaskMarkerOffset|setTaskResult|setTaskState|setTerrainGrid|setText|setTimeMultiplier|setTitleEffect|setToneMapping|setToneMappingParams|setTrafficDensity|setTrafficDistance|setTrafficGap|setTrafficSpeed|setTriggerActivation|setTriggerArea|setTriggerStatements|setTriggerText|setTriggerTimeout|setTriggerType|setType|setUnconscious|setUnitAbility|setUnitLoadout|setUnitPos|setUnitPosWeak|setUnitRank|setUnitRecoilCoefficient|setUnitTrait|setUnloadInCombat|setUserActionText|setUserMFDText|setUserMFDValue|setVariable|setVectorDir|setVectorDirAndUp|setVectorUp|setVehicleAmmo|setVehicleAmmoDef|setVehicleArmor|setVehicleCargo|setVehicleId|setVehicleInit|setVehicleLock|setVehiclePosition|setVehicleRadar|setVehicleReceiveRemoteTargets|setVehicleReportOwnPosition|setVehicleReportRemoteTargets|setVehicleTIPars|setVehicleVarName|setVelocity|setVelocityModelSpace|setVelocityTransformation|setViewDistance|setVisibleIfTreeCollapsed|setWantedRpmRTD|setWaves|setWaypointBehaviour|setWaypointCombatMode|setWaypointCompletionRadius|setWaypointDescription|setWaypointForceBehaviour|setWaypointFormation|setWaypointHousePosition|setWaypointLoiterRadius|setWaypointLoiterType|setWaypointName|setWaypointPosition|setWaypointScript|setWaypointSpeed|setWaypointStatements|setWaypointTimeout|setWaypointType|setWaypointVisible|setWeaponReloadingTime|setWind|setWindDir|setWindForce|setWindStr|setWingForceScaleRTD|setWPPos|show3DIcons|showChat|showCinemaBorder|showCommandingMenu|showCompass|showCuratorCompass|showGPS|showHUD|showLegend|showMap|shownArtilleryComputer|shownChat|shownCompass|shownCuratorCompass|showNewEditorObject|shownGPS|shownHUD|shownMap|shownPad|shownRadio|shownScoretable|shownUAVFeed|shownWarrant|shownWatch|showPad|showRadio|showScoretable|showSubtitles|showUAVFeed|showWarrant|showWatch|showWaypoint|showWaypoints|side|sideAmbientLife|sideChat|sideEmpty|sideEnemy|sideFriendly|sideLogic|sideRadio|sideUnknown|simpleTasks|simulationEnabled|simulCloudDensity|simulCloudOcclusion|simulInClouds|simulWeatherSync|sin|size|sizeOf|skill|skillFinal|skipTime|sleep|sliderPosition|sliderRange|sliderSetPosition|sliderSetRange|sliderSetSpeed|sliderSpeed|slingLoadAssistantShown|soldierMagazines|someAmmo|sort|soundVolume|speaker|speed|speedMode|splitString|sqrt|squadParams|stance|startLoadingScreen|stop|stopEngineRTD|stopped|str|sunOrMoon|supportInfo|suppressFor|surfaceIsWater|surfaceNormal|surfaceType|swimInDepth|switchableUnits|switchAction|switchCamera|switchGesture|switchLight|switchMove|synchronizedObjects|synchronizedTriggers|synchronizedWaypoints|synchronizeObjectsAdd|synchronizeObjectsRemove|synchronizeTrigger|synchronizeWaypoint|systemChat|systemOfUnits|tan|targetKnowledge|targets|targetsAggregate|targetsQuery|taskAlwaysVisible|taskChildren|taskCompleted|taskCustomData|taskDescription|taskDestination|taskHint|taskMarkerOffset|taskNull|taskParent|taskResult|taskState|taskType|teamMember|teamMemberNull|teamName|teams|teamSwitch|teamSwitchEnabled|teamType|terminate|terrainIntersect|terrainIntersectASL|terrainIntersectAtASL|text|textLog|textLogFormat|tg|time|timeMultiplier|titleCut|titleFadeOut|titleObj|titleRsc|titleText|toArray|toFixed|toLower|toString|toUpper|triggerActivated|triggerActivation|triggerArea|triggerAttachedVehicle|triggerAttachObject|triggerAttachVehicle|triggerDynamicSimulation|triggerStatements|triggerText|triggerTimeout|triggerTimeoutCurrent|triggerType|turretLocal|turretOwner|turretUnit|tvAdd|tvClear|tvCollapse|tvCollapseAll|tvCount|tvCurSel|tvData|tvDelete|tvExpand|tvExpandAll|tvPicture|tvPictureRight|tvSetColor|tvSetCurSel|tvSetData|tvSetPicture|tvSetPictureColor|tvSetPictureColorDisabled|tvSetPictureColorSelected|tvSetPictureRight|tvSetPictureRightColor|tvSetPictureRightColorDisabled|tvSetPictureRightColorSelected|tvSetSelectColor|tvSetText|tvSetTooltip|tvSetValue|tvSort|tvSortByValue|tvText|tvTooltip|tvValue|type|typeName|typeOf|UAVControl|uiNamespace|uiSleep|unassignCurator|unassignItem|unassignTeam|unassignVehicle|underwater|uniform|uniformContainer|uniformItems|uniformMagazines|unitAddons|unitAimPosition|unitAimPositionVisual|unitBackpack|unitIsUAV|unitPos|unitReady|unitRecoilCoefficient|units|unitsBelowHeight|unlinkItem|unlockAchievement|unregisterTask|updateDrawIcon|updateMenuItem|updateObjectTree|useAIOperMapObstructionTest|useAISteeringComponent|useAudioTimeForMoves|userInputDisabled|vectorAdd|vectorCos|vectorCrossProduct|vectorDiff|vectorDir|vectorDirVisual|vectorDistance|vectorDistanceSqr|vectorDotProduct|vectorFromTo|vectorMagnitude|vectorMagnitudeSqr|vectorModelToWorld|vectorModelToWorldVisual|vectorMultiply|vectorNormalized|vectorUp|vectorUpVisual|vectorWorldToModel|vectorWorldToModelVisual|vehicle|vehicleCargoEnabled|vehicleChat|vehicleRadio|vehicleReceiveRemoteTargets|vehicleReportOwnPosition|vehicleReportRemoteTargets|vehicles|vehicleVarName|velocity|velocityModelSpace|verifySignature|vest|vestContainer|vestItems|vestMagazines|viewDistance|visibleCompass|visibleGPS|visibleMap|visiblePosition|visiblePositionASL|visibleScoretable|visibleWatch|waitUntil|waves|waypointAttachedObject|waypointAttachedVehicle|waypointAttachObject|waypointAttachVehicle|waypointBehaviour|waypointCombatMode|waypointCompletionRadius|waypointDescription|waypointForceBehaviour|waypointFormation|waypointHousePosition|waypointLoiterRadius|waypointLoiterType|waypointName|waypointPosition|waypoints|waypointScript|waypointsEnabledUAV|waypointShow|waypointSpeed|waypointStatements|waypointTimeout|waypointTimeoutCurrent|waypointType|waypointVisible|weaponAccessories|weaponAccessoriesCargo|weaponCargo|weaponDirection|weaponInertia|weaponLowered|weapons|weaponsItems|weaponsItemsCargo|weaponState|weaponsTurret|weightRTD|west|WFSideText|wind|windDir|windRTD|windStr|wingsForcesRTD|worldName|worldSize|worldToModel|worldToModelVisual|worldToScreen)\\b/i,\n    number:\n      /(?:\\$|\\b0x)[\\da-f]+\\b|(?:\\B\\.\\d+|\\b\\d+(?:\\.\\d+)?)(?:e[+-]?\\d+)?\\b/i,\n    operator: /##|>>|&&|\\|\\||[!=<>]=?|[-+*/%#^]|\\b(?:and|mod|not|or)\\b/i,\n    'magic-variable': {\n      pattern:\n        /\\b(?:this|thisList|thisTrigger|_exception|_fnc_scriptName|_fnc_scriptNameParent|_forEachIndex|_this|_thisEventHandler|_thisFSM|_thisScript|_x)\\b/i,\n      alias: 'keyword'\n    },\n    constant: /\\bDIK(?:_[a-z\\d]+)+\\b/i\n  })\n  Prism.languages.insertBefore('sqf', 'string', {\n    macro: {\n      pattern: /(^[ \\t]*)#[a-z](?:[^\\r\\n\\\\]|\\\\(?:\\r\\n|[\\s\\S]))*/im,\n      lookbehind: true,\n      greedy: true,\n      alias: 'property',\n      inside: {\n        directive: {\n          pattern: /#[a-z]+\\b/i,\n          alias: 'keyword'\n        },\n        comment: Prism.languages.sqf.comment\n      }\n    }\n  })\n  delete Prism.languages.sqf['class-name']\n}\n","'use strict'\n\nmodule.exports = sql\nsql.displayName = 'sql'\nsql.aliases = []\nfunction sql(Prism) {\n  Prism.languages.sql = {\n    comment: {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:--|\\/\\/|#).*)/,\n      lookbehind: true\n    },\n    variable: [\n      {\n        pattern: /@([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1/,\n        greedy: true\n      },\n      /@[\\w.$]+/\n    ],\n    string: {\n      pattern: /(^|[^@\\\\])(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\]|\\2\\2)*\\2/,\n      greedy: true,\n      lookbehind: true\n    },\n    identifier: {\n      pattern: /(^|[^@\\\\])`(?:\\\\[\\s\\S]|[^`\\\\]|``)*`/,\n      greedy: true,\n      lookbehind: true,\n      inside: {\n        punctuation: /^`|`$/\n      }\n    },\n    function:\n      /\\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\\s*\\()/i,\n    // Should we highlight user defined functions too?\n    keyword:\n      /\\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:COL|_INSERT)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURN(?:ING|S)?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\\b/i,\n    boolean: /\\b(?:FALSE|NULL|TRUE)\\b/i,\n    number: /\\b0x[\\da-f]+\\b|\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+\\b/i,\n    operator:\n      /[-+*\\/=%^~]|&&?|\\|\\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\\b(?:AND|BETWEEN|DIV|ILIKE|IN|IS|LIKE|NOT|OR|REGEXP|RLIKE|SOUNDS LIKE|XOR)\\b/i,\n    punctuation: /[;[\\]()`,.]/\n  }\n}\n","'use strict'\n\nmodule.exports = squirrel\nsquirrel.displayName = 'squirrel'\nsquirrel.aliases = []\nfunction squirrel(Prism) {\n  Prism.languages.squirrel = Prism.languages.extend('clike', {\n    comment: [\n      Prism.languages.clike['comment'][0],\n      {\n        pattern: /(^|[^\\\\:])(?:\\/\\/|#).*/,\n        lookbehind: true,\n        greedy: true\n      }\n    ],\n    string: {\n      pattern: /(^|[^\\\\\"'@])(?:@\"(?:[^\"]|\"\")*\"(?!\")|\"(?:[^\\\\\\r\\n\"]|\\\\.)*\")/,\n      lookbehind: true,\n      greedy: true\n    },\n    'class-name': {\n      pattern: /(\\b(?:class|enum|extends|instanceof)\\s+)\\w+(?:\\.\\w+)*/,\n      lookbehind: true,\n      inside: {\n        punctuation: /\\./\n      }\n    },\n    keyword:\n      /\\b(?:__FILE__|__LINE__|base|break|case|catch|class|clone|const|constructor|continue|default|delete|else|enum|extends|for|foreach|function|if|in|instanceof|local|null|resume|return|static|switch|this|throw|try|typeof|while|yield)\\b/,\n    number: /\\b(?:0x[0-9a-fA-F]+|\\d+(?:\\.(?:\\d+|[eE][+-]?\\d+))?)\\b/,\n    operator: /\\+\\+|--|<=>|<[-<]|>>>?|&&?|\\|\\|?|[-+*/%!=<>]=?|[~^]|::?/,\n    punctuation: /[(){}\\[\\],;.]/\n  })\n  Prism.languages.insertBefore('squirrel', 'string', {\n    char: {\n      pattern: /(^|[^\\\\\"'])'(?:[^\\\\']|\\\\(?:[xuU][0-9a-fA-F]{0,8}|[\\s\\S]))'/,\n      lookbehind: true,\n      greedy: true\n    }\n  })\n  Prism.languages.insertBefore('squirrel', 'operator', {\n    'attribute-punctuation': {\n      pattern: /<\\/|\\/>/,\n      alias: 'important'\n    },\n    lambda: {\n      pattern: /@(?=\\()/,\n      alias: 'operator'\n    }\n  })\n}\n","'use strict'\n\nmodule.exports = stan\nstan.displayName = 'stan'\nstan.aliases = []\nfunction stan(Prism) {\n  ;(function (Prism) {\n    // https://mc-stan.org/docs/2_28/reference-manual/bnf-grammars.html\n    var higherOrderFunctions =\n      /\\b(?:algebra_solver|algebra_solver_newton|integrate_1d|integrate_ode|integrate_ode_bdf|integrate_ode_rk45|map_rect|ode_(?:adams|bdf|ckrk|rk45)(?:_tol)?|ode_adjoint_tol_ctl|reduce_sum|reduce_sum_static)\\b/\n    Prism.languages.stan = {\n      comment: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/|#(?!include).*/,\n      string: {\n        // String literals can contain spaces and any printable ASCII characters except for \" and \\\n        // https://mc-stan.org/docs/2_24/reference-manual/print-statements-section.html#string-literals\n        pattern: /\"[\\x20\\x21\\x23-\\x5B\\x5D-\\x7E]*\"/,\n        greedy: true\n      },\n      directive: {\n        pattern: /^([ \\t]*)#include\\b.*/m,\n        lookbehind: true,\n        alias: 'property'\n      },\n      'function-arg': {\n        pattern: RegExp(\n          '(' +\n            higherOrderFunctions.source +\n            /\\s*\\(\\s*/.source +\n            ')' +\n            /[a-zA-Z]\\w*/.source\n        ),\n        lookbehind: true,\n        alias: 'function'\n      },\n      constraint: {\n        pattern: /(\\b(?:int|matrix|real|row_vector|vector)\\s*)<[^<>]*>/,\n        lookbehind: true,\n        inside: {\n          expression: {\n            pattern: /(=\\s*)\\S(?:\\S|\\s+(?!\\s))*?(?=\\s*(?:>$|,\\s*\\w+\\s*=))/,\n            lookbehind: true,\n            inside: null // see below\n          },\n          property: /\\b[a-z]\\w*(?=\\s*=)/i,\n          operator: /=/,\n          punctuation: /^<|>$|,/\n        }\n      },\n      keyword: [\n        {\n          pattern:\n            /\\bdata(?=\\s*\\{)|\\b(?:functions|generated|model|parameters|quantities|transformed)\\b/,\n          alias: 'program-block'\n        },\n        /\\b(?:array|break|cholesky_factor_corr|cholesky_factor_cov|complex|continue|corr_matrix|cov_matrix|data|else|for|if|in|increment_log_prob|int|matrix|ordered|positive_ordered|print|real|reject|return|row_vector|simplex|target|unit_vector|vector|void|while)\\b/, // these are functions that are known to take another function as their first argument.\n        higherOrderFunctions\n      ],\n      function: /\\b[a-z]\\w*(?=\\s*\\()/i,\n      number:\n        /(?:\\b\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\B\\.\\d+(?:_\\d+)*)(?:E[+-]?\\d+(?:_\\d+)*)?i?(?!\\w)/i,\n      boolean: /\\b(?:false|true)\\b/,\n      operator: /<-|\\.[*/]=?|\\|\\|?|&&|[!=<>+\\-*/]=?|['^%~?:]/,\n      punctuation: /[()\\[\\]{},;]/\n    }\n    Prism.languages.stan.constraint.inside.expression.inside =\n      Prism.languages.stan\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = stylus\nstylus.displayName = 'stylus'\nstylus.aliases = []\nfunction stylus(Prism) {\n  ;(function (Prism) {\n    var unit = {\n      pattern: /(\\b\\d+)(?:%|[a-z]+)/,\n      lookbehind: true\n    } // 123 -123 .123 -.123 12.3 -12.3\n    var number = {\n      pattern: /(^|[^\\w.-])-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/,\n      lookbehind: true\n    }\n    var inside = {\n      comment: {\n        pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n        lookbehind: true\n      },\n      url: {\n        pattern: /\\burl\\(([\"']?).*?\\1\\)/i,\n        greedy: true\n      },\n      string: {\n        pattern: /(\"|')(?:(?!\\1)[^\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\\1/,\n        greedy: true\n      },\n      interpolation: null,\n      // See below\n      func: null,\n      // See below\n      important: /\\B!(?:important|optional)\\b/i,\n      keyword: {\n        pattern: /(^|\\s+)(?:(?:else|for|if|return|unless)(?=\\s|$)|@[\\w-]+)/,\n        lookbehind: true\n      },\n      hexcode: /#[\\da-f]{3,6}/i,\n      color: [\n        /\\b(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)\\b/i,\n        {\n          pattern:\n            /\\b(?:hsl|rgb)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:hsl|rgb)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B/i,\n          inside: {\n            unit: unit,\n            number: number,\n            function: /[\\w-]+(?=\\()/,\n            punctuation: /[(),]/\n          }\n        }\n      ],\n      entity: /\\\\[\\da-f]{1,8}/i,\n      unit: unit,\n      boolean: /\\b(?:false|true)\\b/,\n      operator: [\n        // We want non-word chars around \"-\" because it is\n        // accepted in property names.\n        /~|[+!\\/%<>?=]=?|[-:]=|\\*[*=]?|\\.{2,3}|&&|\\|\\||\\B-\\B|\\b(?:and|in|is(?: a| defined| not|nt)?|not|or)\\b/\n      ],\n      number: number,\n      punctuation: /[{}()\\[\\];:,]/\n    }\n    inside['interpolation'] = {\n      pattern: /\\{[^\\r\\n}:]+\\}/,\n      alias: 'variable',\n      inside: {\n        delimiter: {\n          pattern: /^\\{|\\}$/,\n          alias: 'punctuation'\n        },\n        rest: inside\n      }\n    }\n    inside['func'] = {\n      pattern: /[\\w-]+\\([^)]*\\).*/,\n      inside: {\n        function: /^[^(]+/,\n        rest: inside\n      }\n    }\n    Prism.languages.stylus = {\n      'atrule-declaration': {\n        pattern: /(^[ \\t]*)@.+/m,\n        lookbehind: true,\n        inside: {\n          atrule: /^@[\\w-]+/,\n          rest: inside\n        }\n      },\n      'variable-declaration': {\n        pattern: /(^[ \\t]*)[\\w$-]+\\s*.?=[ \\t]*(?:\\{[^{}]*\\}|\\S.*|$)/m,\n        lookbehind: true,\n        inside: {\n          variable: /^\\S+/,\n          rest: inside\n        }\n      },\n      statement: {\n        pattern: /(^[ \\t]*)(?:else|for|if|return|unless)[ \\t].+/m,\n        lookbehind: true,\n        inside: {\n          keyword: /^\\S+/,\n          rest: inside\n        }\n      },\n      // A property/value pair cannot end with a comma or a brace\n      // It cannot have indented content unless it ended with a semicolon\n      'property-declaration': {\n        pattern:\n          /((?:^|\\{)([ \\t]*))(?:[\\w-]|\\{[^}\\r\\n]+\\})+(?:\\s*:\\s*|[ \\t]+)(?!\\s)[^{\\r\\n]*(?:;|[^{\\r\\n,]$(?!(?:\\r?\\n|\\r)(?:\\{|\\2[ \\t])))/m,\n        lookbehind: true,\n        inside: {\n          property: {\n            pattern: /^[^\\s:]+/,\n            inside: {\n              interpolation: inside.interpolation\n            }\n          },\n          rest: inside\n        }\n      },\n      // A selector can contain parentheses only as part of a pseudo-element\n      // It can span multiple lines.\n      // It must end with a comma or an accolade or have indented content.\n      selector: {\n        pattern:\n          /(^[ \\t]*)(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\)|(?![\\w-]))|\\{[^}\\r\\n]+\\})+)(?:(?:\\r?\\n|\\r)(?:\\1(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\)|(?![\\w-]))|\\{[^}\\r\\n]+\\})+)))*(?:,$|\\{|(?=(?:\\r?\\n|\\r)(?:\\{|\\1[ \\t])))/m,\n        lookbehind: true,\n        inside: {\n          interpolation: inside.interpolation,\n          comment: inside.comment,\n          punctuation: /[{},]/\n        }\n      },\n      func: inside.func,\n      string: inside.string,\n      comment: {\n        pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n        lookbehind: true,\n        greedy: true\n      },\n      interpolation: inside.interpolation,\n      punctuation: /[{}()\\[\\];:.]/\n    }\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = swift\nswift.displayName = 'swift'\nswift.aliases = []\nfunction swift(Prism) {\n  Prism.languages.swift = {\n    comment: {\n      // Nested comments are supported up to 2 levels\n      pattern:\n        /(^|[^\\\\:])(?:\\/\\/.*|\\/\\*(?:[^/*]|\\/(?!\\*)|\\*(?!\\/)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*\\*\\/)/,\n      lookbehind: true,\n      greedy: true\n    },\n    'string-literal': [\n      // https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html\n      {\n        pattern: RegExp(\n          /(^|[^\"#])/.source +\n            '(?:' + // single-line string\n            /\"(?:\\\\(?:\\((?:[^()]|\\([^()]*\\))*\\)|\\r\\n|[^(])|[^\\\\\\r\\n\"])*\"/\n              .source +\n            '|' + // multi-line string\n            /\"\"\"(?:\\\\(?:\\((?:[^()]|\\([^()]*\\))*\\)|[^(])|[^\\\\\"]|\"(?!\"\"))*\"\"\"/\n              .source +\n            ')' +\n            /(?![\"#])/.source\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          interpolation: {\n            pattern: /(\\\\\\()(?:[^()]|\\([^()]*\\))*(?=\\))/,\n            lookbehind: true,\n            inside: null // see below\n          },\n          'interpolation-punctuation': {\n            pattern: /^\\)|\\\\\\($/,\n            alias: 'punctuation'\n          },\n          punctuation: /\\\\(?=[\\r\\n])/,\n          string: /[\\s\\S]+/\n        }\n      },\n      {\n        pattern: RegExp(\n          /(^|[^\"#])(#+)/.source +\n            '(?:' + // single-line string\n            /\"(?:\\\\(?:#+\\((?:[^()]|\\([^()]*\\))*\\)|\\r\\n|[^#])|[^\\\\\\r\\n])*?\"/\n              .source +\n            '|' + // multi-line string\n            /\"\"\"(?:\\\\(?:#+\\((?:[^()]|\\([^()]*\\))*\\)|[^#])|[^\\\\])*?\"\"\"/.source +\n            ')' +\n            '\\\\2'\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          interpolation: {\n            pattern: /(\\\\#+\\()(?:[^()]|\\([^()]*\\))*(?=\\))/,\n            lookbehind: true,\n            inside: null // see below\n          },\n          'interpolation-punctuation': {\n            pattern: /^\\)|\\\\#+\\($/,\n            alias: 'punctuation'\n          },\n          string: /[\\s\\S]+/\n        }\n      }\n    ],\n    directive: {\n      // directives with conditions\n      pattern: RegExp(\n        /#/.source +\n          '(?:' +\n          (/(?:elseif|if)\\b/.source +\n            '(?:[ \\t]*' + // This regex is a little complex. It's equivalent to this:\n            //   (?:![ \\t]*)?(?:\\b\\w+\\b(?:[ \\t]*<round>)?|<round>)(?:[ \\t]*(?:&&|\\|\\|))?\n            // where <round> is a general parentheses expression.\n            /(?:![ \\t]*)?(?:\\b\\w+\\b(?:[ \\t]*\\((?:[^()]|\\([^()]*\\))*\\))?|\\((?:[^()]|\\([^()]*\\))*\\))(?:[ \\t]*(?:&&|\\|\\|))?/\n              .source +\n            ')+') +\n          '|' +\n          /(?:else|endif)\\b/.source +\n          ')'\n      ),\n      alias: 'property',\n      inside: {\n        'directive-name': /^#\\w+/,\n        boolean: /\\b(?:false|true)\\b/,\n        number: /\\b\\d+(?:\\.\\d+)*\\b/,\n        operator: /!|&&|\\|\\||[<>]=?/,\n        punctuation: /[(),]/\n      }\n    },\n    literal: {\n      pattern:\n        /#(?:colorLiteral|column|dsohandle|file(?:ID|Literal|Path)?|function|imageLiteral|line)\\b/,\n      alias: 'constant'\n    },\n    'other-directive': {\n      pattern: /#\\w+\\b/,\n      alias: 'property'\n    },\n    attribute: {\n      pattern: /@\\w+/,\n      alias: 'atrule'\n    },\n    'function-definition': {\n      pattern: /(\\bfunc\\s+)\\w+/,\n      lookbehind: true,\n      alias: 'function'\n    },\n    label: {\n      // https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID141\n      pattern:\n        /\\b(break|continue)\\s+\\w+|\\b[a-zA-Z_]\\w*(?=\\s*:\\s*(?:for|repeat|while)\\b)/,\n      lookbehind: true,\n      alias: 'important'\n    },\n    keyword:\n      /\\b(?:Any|Protocol|Self|Type|actor|as|assignment|associatedtype|associativity|async|await|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic|else|enum|extension|fallthrough|fileprivate|final|for|func|get|guard|higherThan|if|import|in|indirect|infix|init|inout|internal|is|isolated|lazy|left|let|lowerThan|mutating|none|nonisolated|nonmutating|open|operator|optional|override|postfix|precedencegroup|prefix|private|protocol|public|repeat|required|rethrows|return|right|safe|self|set|some|static|struct|subscript|super|switch|throw|throws|try|typealias|unowned|unsafe|var|weak|where|while|willSet)\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    nil: {\n      pattern: /\\bnil\\b/,\n      alias: 'constant'\n    },\n    'short-argument': /\\$\\d+\\b/,\n    omit: {\n      pattern: /\\b_\\b/,\n      alias: 'keyword'\n    },\n    number:\n      /\\b(?:[\\d_]+(?:\\.[\\de_]+)?|0x[a-f0-9_]+(?:\\.[a-f0-9p_]+)?|0b[01_]+|0o[0-7_]+)\\b/i,\n    // A class name must start with an upper-case letter and be either 1 letter long or contain a lower-case letter.\n    'class-name': /\\b[A-Z](?:[A-Z_\\d]*[a-z]\\w*)?\\b/,\n    function: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n    constant: /\\b(?:[A-Z_]{2,}|k[A-Z][A-Za-z_]+)\\b/,\n    // Operators are generic in Swift. Developers can even create new operators (e.g. +++).\n    // https://docs.swift.org/swift-book/ReferenceManual/zzSummaryOfTheGrammar.html#ID481\n    // This regex only supports ASCII operators.\n    operator: /[-+*/%=!<>&|^~?]+|\\.[.\\-+*/%=!<>&|^~?]+/,\n    punctuation: /[{}[\\]();,.:\\\\]/\n  }\n  Prism.languages.swift['string-literal'].forEach(function (rule) {\n    rule.inside['interpolation'].inside = Prism.languages.swift\n  })\n}\n","'use strict'\n\nmodule.exports = systemd\nsystemd.displayName = 'systemd'\nsystemd.aliases = []\nfunction systemd(Prism) {\n  // https://www.freedesktop.org/software/systemd/man/systemd.syntax.html\n  ;(function (Prism) {\n    var comment = {\n      pattern: /^[;#].*/m,\n      greedy: true\n    }\n    var quotesSource = /\"(?:[^\\r\\n\"\\\\]|\\\\(?:[^\\r]|\\r\\n?))*\"(?!\\S)/.source\n    Prism.languages.systemd = {\n      comment: comment,\n      section: {\n        pattern: /^\\[[^\\n\\r\\[\\]]*\\](?=[ \\t]*$)/m,\n        greedy: true,\n        inside: {\n          punctuation: /^\\[|\\]$/,\n          'section-name': {\n            pattern: /[\\s\\S]+/,\n            alias: 'selector'\n          }\n        }\n      },\n      key: {\n        pattern: /^[^\\s=]+(?=[ \\t]*=)/m,\n        greedy: true,\n        alias: 'attr-name'\n      },\n      value: {\n        // This pattern is quite complex because of two properties:\n        //  1) Quotes (strings) must be preceded by a space. Since we can't use lookbehinds, we have to \"resolve\"\n        //     the lookbehind. You will see this in the main loop where spaces are handled separately.\n        //  2) Line continuations.\n        //     After line continuations, empty lines and comments are ignored so we have to consume them.\n        pattern: RegExp(\n          /(=[ \\t]*(?!\\s))/.source + // the value either starts with quotes or not\n            '(?:' +\n            quotesSource +\n            '|(?=[^\"\\r\\n]))' + // main loop\n            '(?:' +\n            (/[^\\s\\\\]/.source + // handle spaces separately because of quotes\n              '|' +\n              '[ \\t]+(?:(?![ \\t\"])|' +\n              quotesSource +\n              ')' + // line continuation\n              '|' +\n              /\\\\[\\r\\n]+(?:[#;].*[\\r\\n]+)*(?![#;])/.source) +\n            ')*'\n        ),\n        lookbehind: true,\n        greedy: true,\n        alias: 'attr-value',\n        inside: {\n          comment: comment,\n          quoted: {\n            pattern: RegExp(/(^|\\s)/.source + quotesSource),\n            lookbehind: true,\n            greedy: true\n          },\n          punctuation: /\\\\$/m,\n          boolean: {\n            pattern: /^(?:false|no|off|on|true|yes)$/,\n            greedy: true\n          }\n        }\n      },\n      punctuation: /=/\n    }\n  })(Prism)\n}\n","'use strict'\nvar refractorT4Templating = require('./t4-templating.js')\nvar refractorCsharp = require('./csharp.js')\nmodule.exports = t4Cs\nt4Cs.displayName = 't4Cs'\nt4Cs.aliases = []\nfunction t4Cs(Prism) {\n  Prism.register(refractorT4Templating)\n  Prism.register(refractorCsharp)\n  Prism.languages.t4 = Prism.languages['t4-cs'] =\n    Prism.languages['t4-templating'].createT4('csharp')\n}\n","'use strict'\n\nmodule.exports = t4Templating\nt4Templating.displayName = 't4Templating'\nt4Templating.aliases = []\nfunction t4Templating(Prism) {\n  ;(function (Prism) {\n    function createBlock(prefix, inside, contentAlias) {\n      return {\n        pattern: RegExp('<#' + prefix + '[\\\\s\\\\S]*?#>'),\n        alias: 'block',\n        inside: {\n          delimiter: {\n            pattern: RegExp('^<#' + prefix + '|#>$'),\n            alias: 'important'\n          },\n          content: {\n            pattern: /[\\s\\S]+/,\n            inside: inside,\n            alias: contentAlias\n          }\n        }\n      }\n    }\n    function createT4(insideLang) {\n      var grammar = Prism.languages[insideLang]\n      var className = 'language-' + insideLang\n      return {\n        block: {\n          pattern: /<#[\\s\\S]+?#>/,\n          inside: {\n            directive: createBlock('@', {\n              'attr-value': {\n                pattern: /=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+)/,\n                inside: {\n                  punctuation: /^=|^[\"']|[\"']$/\n                }\n              },\n              keyword: /\\b\\w+(?=\\s)/,\n              'attr-name': /\\b\\w+/\n            }),\n            expression: createBlock('=', grammar, className),\n            'class-feature': createBlock('\\\\+', grammar, className),\n            standard: createBlock('', grammar, className)\n          }\n        }\n      }\n    }\n    Prism.languages['t4-templating'] = Object.defineProperty({}, 'createT4', {\n      value: createT4\n    })\n  })(Prism)\n}\n","'use strict'\nvar refractorT4Templating = require('./t4-templating.js')\nvar refractorVbnet = require('./vbnet.js')\nmodule.exports = t4Vb\nt4Vb.displayName = 't4Vb'\nt4Vb.aliases = []\nfunction t4Vb(Prism) {\n  Prism.register(refractorT4Templating)\n  Prism.register(refractorVbnet)\n  Prism.languages['t4-vb'] = Prism.languages['t4-templating'].createT4('vbnet')\n}\n","'use strict'\nvar refractorYaml = require('./yaml.js')\nmodule.exports = tap\ntap.displayName = 'tap'\ntap.aliases = []\nfunction tap(Prism) {\n  Prism.register(refractorYaml)\n  // https://en.wikipedia.org/wiki/Test_Anything_Protocol\n  Prism.languages.tap = {\n    fail: /not ok[^#{\\n\\r]*/,\n    pass: /ok[^#{\\n\\r]*/,\n    pragma: /pragma [+-][a-z]+/,\n    bailout: /bail out!.*/i,\n    version: /TAP version \\d+/i,\n    plan: /\\b\\d+\\.\\.\\d+(?: +#.*)?/,\n    subtest: {\n      pattern: /# Subtest(?:: .*)?/,\n      greedy: true\n    },\n    punctuation: /[{}]/,\n    directive: /#.*/,\n    yamlish: {\n      pattern: /(^[ \\t]*)---[\\s\\S]*?[\\r\\n][ \\t]*\\.\\.\\.$/m,\n      lookbehind: true,\n      inside: Prism.languages.yaml,\n      alias: 'language-yaml'\n    }\n  }\n}\n","'use strict'\n\nmodule.exports = tcl\ntcl.displayName = 'tcl'\ntcl.aliases = []\nfunction tcl(Prism) {\n  Prism.languages.tcl = {\n    comment: {\n      pattern: /(^|[^\\\\])#.*/,\n      lookbehind: true\n    },\n    string: {\n      pattern: /\"(?:[^\"\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\"/,\n      greedy: true\n    },\n    variable: [\n      {\n        pattern: /(\\$)(?:::)?(?:[a-zA-Z0-9]+::)*\\w+/,\n        lookbehind: true\n      },\n      {\n        pattern: /(\\$)\\{[^}]+\\}/,\n        lookbehind: true\n      },\n      {\n        pattern: /(^[\\t ]*set[ \\t]+)(?:::)?(?:[a-zA-Z0-9]+::)*\\w+/m,\n        lookbehind: true\n      }\n    ],\n    function: {\n      pattern: /(^[\\t ]*proc[ \\t]+)\\S+/m,\n      lookbehind: true\n    },\n    builtin: [\n      {\n        pattern:\n          /(^[\\t ]*)(?:break|class|continue|error|eval|exit|for|foreach|if|proc|return|switch|while)\\b/m,\n        lookbehind: true\n      },\n      /\\b(?:else|elseif)\\b/\n    ],\n    scope: {\n      pattern: /(^[\\t ]*)(?:global|upvar|variable)\\b/m,\n      lookbehind: true,\n      alias: 'constant'\n    },\n    keyword: {\n      pattern:\n        /(^[\\t ]*|\\[)(?:Safe_Base|Tcl|after|append|apply|array|auto_(?:execok|import|load|mkindex|qualify|reset)|automkindex_old|bgerror|binary|catch|cd|chan|clock|close|concat|dde|dict|encoding|eof|exec|expr|fblocked|fconfigure|fcopy|file(?:event|name)?|flush|gets|glob|history|http|incr|info|interp|join|lappend|lassign|lindex|linsert|list|llength|load|lrange|lrepeat|lreplace|lreverse|lsearch|lset|lsort|math(?:func|op)|memory|msgcat|namespace|open|package|parray|pid|pkg_mkIndex|platform|puts|pwd|re_syntax|read|refchan|regexp|registry|regsub|rename|scan|seek|set|socket|source|split|string|subst|tcl(?:_endOfWord|_findLibrary|startOf(?:Next|Previous)Word|test|vars|wordBreak(?:After|Before))|tell|time|tm|trace|unknown|unload|unset|update|uplevel|vwait)\\b/m,\n      lookbehind: true\n    },\n    operator:\n      /!=?|\\*\\*?|==|&&?|\\|\\|?|<[=<]?|>[=>]?|[-+~\\/%?^]|\\b(?:eq|in|ne|ni)\\b/,\n    punctuation: /[{}()\\[\\]]/\n  }\n}\n","'use strict'\n\nmodule.exports = textile\ntextile.displayName = 'textile'\ntextile.aliases = []\nfunction textile(Prism) {\n  ;(function (Prism) {\n    // We don't allow for pipes inside parentheses\n    // to not break table pattern |(. foo |). bar |\n    var modifierRegex = /\\([^|()\\n]+\\)|\\[[^\\]\\n]+\\]|\\{[^}\\n]+\\}/.source // Opening and closing parentheses which are not a modifier\n    // This pattern is necessary to prevent exponential backtracking\n    var parenthesesRegex = /\\)|\\((?![^|()\\n]+\\))/.source\n    /**\n     * @param {string} source\n     * @param {string} [flags]\n     */\n    function withModifier(source, flags) {\n      return RegExp(\n        source\n          .replace(/<MOD>/g, function () {\n            return '(?:' + modifierRegex + ')'\n          })\n          .replace(/<PAR>/g, function () {\n            return '(?:' + parenthesesRegex + ')'\n          }),\n        flags || ''\n      )\n    }\n    var modifierTokens = {\n      css: {\n        pattern: /\\{[^{}]+\\}/,\n        inside: {\n          rest: Prism.languages.css\n        }\n      },\n      'class-id': {\n        pattern: /(\\()[^()]+(?=\\))/,\n        lookbehind: true,\n        alias: 'attr-value'\n      },\n      lang: {\n        pattern: /(\\[)[^\\[\\]]+(?=\\])/,\n        lookbehind: true,\n        alias: 'attr-value'\n      },\n      // Anything else is punctuation (the first pattern is for row/col spans inside tables)\n      punctuation: /[\\\\\\/]\\d+|\\S/\n    }\n    var textile = (Prism.languages.textile = Prism.languages.extend('markup', {\n      phrase: {\n        pattern: /(^|\\r|\\n)\\S[\\s\\S]*?(?=$|\\r?\\n\\r?\\n|\\r\\r)/,\n        lookbehind: true,\n        inside: {\n          // h1. Header 1\n          'block-tag': {\n            pattern: withModifier(/^[a-z]\\w*(?:<MOD>|<PAR>|[<>=])*\\./.source),\n            inside: {\n              modifier: {\n                pattern: withModifier(\n                  /(^[a-z]\\w*)(?:<MOD>|<PAR>|[<>=])+(?=\\.)/.source\n                ),\n                lookbehind: true,\n                inside: modifierTokens\n              },\n              tag: /^[a-z]\\w*/,\n              punctuation: /\\.$/\n            }\n          },\n          // # List item\n          // * List item\n          list: {\n            pattern: withModifier(/^[*#]+<MOD>*\\s+\\S.*/.source, 'm'),\n            inside: {\n              modifier: {\n                pattern: withModifier(/(^[*#]+)<MOD>+/.source),\n                lookbehind: true,\n                inside: modifierTokens\n              },\n              punctuation: /^[*#]+/\n            }\n          },\n          // | cell | cell | cell |\n          table: {\n            // Modifiers can be applied to the row: {color:red}.|1|2|3|\n            // or the cell: |{color:red}.1|2|3|\n            pattern: withModifier(\n              /^(?:(?:<MOD>|<PAR>|[<>=^~])+\\.\\s*)?(?:\\|(?:(?:<MOD>|<PAR>|[<>=^~_]|[\\\\/]\\d+)+\\.|(?!(?:<MOD>|<PAR>|[<>=^~_]|[\\\\/]\\d+)+\\.))[^|]*)+\\|/\n                .source,\n              'm'\n            ),\n            inside: {\n              modifier: {\n                // Modifiers for rows after the first one are\n                // preceded by a pipe and a line feed\n                pattern: withModifier(\n                  /(^|\\|(?:\\r?\\n|\\r)?)(?:<MOD>|<PAR>|[<>=^~_]|[\\\\/]\\d+)+(?=\\.)/\n                    .source\n                ),\n                lookbehind: true,\n                inside: modifierTokens\n              },\n              punctuation: /\\||^\\./\n            }\n          },\n          inline: {\n            // eslint-disable-next-line regexp/no-super-linear-backtracking\n            pattern: withModifier(\n              /(^|[^a-zA-Z\\d])(\\*\\*|__|\\?\\?|[*_%@+\\-^~])<MOD>*.+?\\2(?![a-zA-Z\\d])/\n                .source\n            ),\n            lookbehind: true,\n            inside: {\n              // Note: superscripts and subscripts are not handled specifically\n              // *bold*, **bold**\n              bold: {\n                // eslint-disable-next-line regexp/no-super-linear-backtracking\n                pattern: withModifier(/(^(\\*\\*?)<MOD>*).+?(?=\\2)/.source),\n                lookbehind: true\n              },\n              // _italic_, __italic__\n              italic: {\n                // eslint-disable-next-line regexp/no-super-linear-backtracking\n                pattern: withModifier(/(^(__?)<MOD>*).+?(?=\\2)/.source),\n                lookbehind: true\n              },\n              // ??cite??\n              cite: {\n                // eslint-disable-next-line regexp/no-super-linear-backtracking\n                pattern: withModifier(/(^\\?\\?<MOD>*).+?(?=\\?\\?)/.source),\n                lookbehind: true,\n                alias: 'string'\n              },\n              // @code@\n              code: {\n                // eslint-disable-next-line regexp/no-super-linear-backtracking\n                pattern: withModifier(/(^@<MOD>*).+?(?=@)/.source),\n                lookbehind: true,\n                alias: 'keyword'\n              },\n              // +inserted+\n              inserted: {\n                // eslint-disable-next-line regexp/no-super-linear-backtracking\n                pattern: withModifier(/(^\\+<MOD>*).+?(?=\\+)/.source),\n                lookbehind: true\n              },\n              // -deleted-\n              deleted: {\n                // eslint-disable-next-line regexp/no-super-linear-backtracking\n                pattern: withModifier(/(^-<MOD>*).+?(?=-)/.source),\n                lookbehind: true\n              },\n              // %span%\n              span: {\n                // eslint-disable-next-line regexp/no-super-linear-backtracking\n                pattern: withModifier(/(^%<MOD>*).+?(?=%)/.source),\n                lookbehind: true\n              },\n              modifier: {\n                pattern: withModifier(\n                  /(^\\*\\*|__|\\?\\?|[*_%@+\\-^~])<MOD>+/.source\n                ),\n                lookbehind: true,\n                inside: modifierTokens\n              },\n              punctuation: /[*_%?@+\\-^~]+/\n            }\n          },\n          // [alias]http://example.com\n          'link-ref': {\n            pattern: /^\\[[^\\]]+\\]\\S+$/m,\n            inside: {\n              string: {\n                pattern: /(^\\[)[^\\]]+(?=\\])/,\n                lookbehind: true\n              },\n              url: {\n                pattern: /(^\\])\\S+$/,\n                lookbehind: true\n              },\n              punctuation: /[\\[\\]]/\n            }\n          },\n          // \"text\":http://example.com\n          // \"text\":link-ref\n          link: {\n            // eslint-disable-next-line regexp/no-super-linear-backtracking\n            pattern: withModifier(\n              /\"<MOD>*[^\"]+\":.+?(?=[^\\w/]?(?:\\s|$))/.source\n            ),\n            inside: {\n              text: {\n                // eslint-disable-next-line regexp/no-super-linear-backtracking\n                pattern: withModifier(/(^\"<MOD>*)[^\"]+(?=\")/.source),\n                lookbehind: true\n              },\n              modifier: {\n                pattern: withModifier(/(^\")<MOD>+/.source),\n                lookbehind: true,\n                inside: modifierTokens\n              },\n              url: {\n                pattern: /(:).+/,\n                lookbehind: true\n              },\n              punctuation: /[\":]/\n            }\n          },\n          // !image.jpg!\n          // !image.jpg(Title)!:http://example.com\n          image: {\n            pattern: withModifier(\n              /!(?:<MOD>|<PAR>|[<>=])*(?![<>=])[^!\\s()]+(?:\\([^)]+\\))?!(?::.+?(?=[^\\w/]?(?:\\s|$)))?/\n                .source\n            ),\n            inside: {\n              source: {\n                pattern: withModifier(\n                  /(^!(?:<MOD>|<PAR>|[<>=])*)(?![<>=])[^!\\s()]+(?:\\([^)]+\\))?(?=!)/\n                    .source\n                ),\n                lookbehind: true,\n                alias: 'url'\n              },\n              modifier: {\n                pattern: withModifier(/(^!)(?:<MOD>|<PAR>|[<>=])+/.source),\n                lookbehind: true,\n                inside: modifierTokens\n              },\n              url: {\n                pattern: /(:).+/,\n                lookbehind: true\n              },\n              punctuation: /[!:]/\n            }\n          },\n          // Footnote[1]\n          footnote: {\n            pattern: /\\b\\[\\d+\\]/,\n            alias: 'comment',\n            inside: {\n              punctuation: /\\[|\\]/\n            }\n          },\n          // CSS(Cascading Style Sheet)\n          acronym: {\n            pattern: /\\b[A-Z\\d]+\\([^)]+\\)/,\n            inside: {\n              comment: {\n                pattern: /(\\()[^()]+(?=\\))/,\n                lookbehind: true\n              },\n              punctuation: /[()]/\n            }\n          },\n          // Prism(C)\n          mark: {\n            pattern: /\\b\\((?:C|R|TM)\\)/,\n            alias: 'comment',\n            inside: {\n              punctuation: /[()]/\n            }\n          }\n        }\n      }\n    }))\n    var phraseInside = textile['phrase'].inside\n    var nestedPatterns = {\n      inline: phraseInside['inline'],\n      link: phraseInside['link'],\n      image: phraseInside['image'],\n      footnote: phraseInside['footnote'],\n      acronym: phraseInside['acronym'],\n      mark: phraseInside['mark']\n    } // Only allow alpha-numeric HTML tags, not XML tags\n    textile.tag.pattern =\n      /<\\/?(?!\\d)[a-z0-9]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i // Allow some nesting\n    var phraseInlineInside = phraseInside['inline'].inside\n    phraseInlineInside['bold'].inside = nestedPatterns\n    phraseInlineInside['italic'].inside = nestedPatterns\n    phraseInlineInside['inserted'].inside = nestedPatterns\n    phraseInlineInside['deleted'].inside = nestedPatterns\n    phraseInlineInside['span'].inside = nestedPatterns // Allow some styles inside table cells\n    var phraseTableInside = phraseInside['table'].inside\n    phraseTableInside['inline'] = nestedPatterns['inline']\n    phraseTableInside['link'] = nestedPatterns['link']\n    phraseTableInside['image'] = nestedPatterns['image']\n    phraseTableInside['footnote'] = nestedPatterns['footnote']\n    phraseTableInside['acronym'] = nestedPatterns['acronym']\n    phraseTableInside['mark'] = nestedPatterns['mark']\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = toml\ntoml.displayName = 'toml'\ntoml.aliases = []\nfunction toml(Prism) {\n  ;(function (Prism) {\n    var key = /(?:[\\w-]+|'[^'\\n\\r]*'|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")/.source\n    /**\n     * @param {string} pattern\n     */\n    function insertKey(pattern) {\n      return pattern.replace(/__/g, function () {\n        return key\n      })\n    }\n    Prism.languages.toml = {\n      comment: {\n        pattern: /#.*/,\n        greedy: true\n      },\n      table: {\n        pattern: RegExp(\n          insertKey(\n            /(^[\\t ]*\\[\\s*(?:\\[\\s*)?)__(?:\\s*\\.\\s*__)*(?=\\s*\\])/.source\n          ),\n          'm'\n        ),\n        lookbehind: true,\n        greedy: true,\n        alias: 'class-name'\n      },\n      key: {\n        pattern: RegExp(\n          insertKey(/(^[\\t ]*|[{,]\\s*)__(?:\\s*\\.\\s*__)*(?=\\s*=)/.source),\n          'm'\n        ),\n        lookbehind: true,\n        greedy: true,\n        alias: 'property'\n      },\n      string: {\n        pattern:\n          /\"\"\"(?:\\\\[\\s\\S]|[^\\\\])*?\"\"\"|'''[\\s\\S]*?'''|'[^'\\n\\r]*'|\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n        greedy: true\n      },\n      date: [\n        {\n          // Offset Date-Time, Local Date-Time, Local Date\n          pattern:\n            /\\b\\d{4}-\\d{2}-\\d{2}(?:[T\\s]\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|[+-]\\d{2}:\\d{2})?)?\\b/i,\n          alias: 'number'\n        },\n        {\n          // Local Time\n          pattern: /\\b\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?\\b/,\n          alias: 'number'\n        }\n      ],\n      number:\n        /(?:\\b0(?:x[\\da-zA-Z]+(?:_[\\da-zA-Z]+)*|o[0-7]+(?:_[0-7]+)*|b[10]+(?:_[10]+)*))\\b|[-+]?\\b\\d+(?:_\\d+)*(?:\\.\\d+(?:_\\d+)*)?(?:[eE][+-]?\\d+(?:_\\d+)*)?\\b|[-+]?\\b(?:inf|nan)\\b/,\n      boolean: /\\b(?:false|true)\\b/,\n      punctuation: /[.,=[\\]{}]/\n    }\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = tremor\ntremor.displayName = 'tremor'\ntremor.aliases = []\nfunction tremor(Prism) {\n  ;(function (Prism) {\n    Prism.languages.tremor = {\n      comment: {\n        pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:--|\\/\\/|#).*)/,\n        lookbehind: true\n      },\n      'interpolated-string': null,\n      // see below\n      extractor: {\n        pattern: /\\b[a-z_]\\w*\\|(?:[^\\r\\n\\\\|]|\\\\(?:\\r\\n|[\\s\\S]))*\\|/i,\n        greedy: true,\n        inside: {\n          regex: {\n            pattern: /(^re)\\|[\\s\\S]+/,\n            lookbehind: true\n          },\n          function: /^\\w+/,\n          value: /\\|[\\s\\S]+/\n        }\n      },\n      identifier: {\n        pattern: /`[^`]*`/,\n        greedy: true\n      },\n      function: /\\b[a-z_]\\w*(?=\\s*(?:::\\s*<|\\())\\b/,\n      keyword:\n        /\\b(?:args|as|by|case|config|connect|connector|const|copy|create|default|define|deploy|drop|each|emit|end|erase|event|flow|fn|for|from|group|having|insert|into|intrinsic|let|links|match|merge|mod|move|of|operator|patch|pipeline|recur|script|select|set|sliding|state|stream|to|tumbling|update|use|when|where|window|with)\\b/,\n      boolean: /\\b(?:false|null|true)\\b/i,\n      number:\n        /\\b(?:0b[01_]*|0x[0-9a-fA-F_]*|\\d[\\d_]*(?:\\.\\d[\\d_]*)?(?:[Ee][+-]?[\\d_]+)?)\\b/,\n      'pattern-punctuation': {\n        pattern: /%(?=[({[])/,\n        alias: 'punctuation'\n      },\n      operator:\n        /[-+*\\/%~!^]=?|=[=>]?|&[&=]?|\\|[|=]?|<<?=?|>>?>?=?|(?:absent|and|not|or|present|xor)\\b/,\n      punctuation: /::|[;\\[\\]()\\{\\},.:]/\n    }\n    var interpolationPattern =\n      /#\\{(?:[^\"{}]|\\{[^{}]*\\}|\"(?:[^\"\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\")*\\}/.source\n    Prism.languages.tremor['interpolated-string'] = {\n      pattern: RegExp(\n        /(^|[^\\\\])/.source +\n          '(?:' +\n          '\"\"\"(?:' +\n          /[^\"\\\\#]|\\\\[\\s\\S]|\"(?!\"\")|#(?!\\{)/.source +\n          '|' +\n          interpolationPattern +\n          ')*\"\"\"' +\n          '|' +\n          '\"(?:' +\n          /[^\"\\\\\\r\\n#]|\\\\(?:\\r\\n|[\\s\\S])|#(?!\\{)/.source +\n          '|' +\n          interpolationPattern +\n          ')*\"' +\n          ')'\n      ),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern: RegExp(interpolationPattern),\n          inside: {\n            punctuation: /^#\\{|\\}$/,\n            expression: {\n              pattern: /[\\s\\S]+/,\n              inside: Prism.languages.tremor\n            }\n          }\n        },\n        string: /[\\s\\S]+/\n      }\n    }\n    Prism.languages.troy = Prism.languages['tremor']\n    Prism.languages.trickle = Prism.languages['tremor']\n  })(Prism)\n}\n","'use strict'\nvar refractorJsx = require('./jsx.js')\nvar refractorTypescript = require('./typescript.js')\nmodule.exports = tsx\ntsx.displayName = 'tsx'\ntsx.aliases = []\nfunction tsx(Prism) {\n  Prism.register(refractorJsx)\n  Prism.register(refractorTypescript)\n  ;(function (Prism) {\n    var typescript = Prism.util.clone(Prism.languages.typescript)\n    Prism.languages.tsx = Prism.languages.extend('jsx', typescript) // doesn't work with TS because TS is too complex\n    delete Prism.languages.tsx['parameter']\n    delete Prism.languages.tsx['literal-property'] // This will prevent collisions between TSX tags and TS generic types.\n    // Idea by https://github.com/karlhorky\n    // Discussion: https://github.com/PrismJS/prism/issues/2594#issuecomment-710666928\n    var tag = Prism.languages.tsx.tag\n    tag.pattern = RegExp(\n      /(^|[^\\w$]|(?=<\\/))/.source + '(?:' + tag.pattern.source + ')',\n      tag.pattern.flags\n    )\n    tag.lookbehind = true\n  })(Prism)\n}\n","'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = tt2\ntt2.displayName = 'tt2'\ntt2.aliases = []\nfunction tt2(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  ;(function (Prism) {\n    Prism.languages.tt2 = Prism.languages.extend('clike', {\n      comment: /#.*|\\[%#[\\s\\S]*?%\\]/,\n      keyword:\n        /\\b(?:BLOCK|CALL|CASE|CATCH|CLEAR|DEBUG|DEFAULT|ELSE|ELSIF|END|FILTER|FINAL|FOREACH|GET|IF|IN|INCLUDE|INSERT|LAST|MACRO|META|NEXT|PERL|PROCESS|RAWPERL|RETURN|SET|STOP|SWITCH|TAGS|THROW|TRY|UNLESS|USE|WHILE|WRAPPER)\\b/,\n      punctuation: /[[\\]{},()]/\n    })\n    Prism.languages.insertBefore('tt2', 'number', {\n      operator: /=[>=]?|!=?|<=?|>=?|&&|\\|\\|?|\\b(?:and|not|or)\\b/,\n      variable: {\n        pattern: /\\b[a-z]\\w*(?:\\s*\\.\\s*(?:\\d+|\\$?[a-z]\\w*))*\\b/i\n      }\n    })\n    Prism.languages.insertBefore('tt2', 'keyword', {\n      delimiter: {\n        pattern: /^(?:\\[%|%%)-?|-?%\\]$/,\n        alias: 'punctuation'\n      }\n    })\n    Prism.languages.insertBefore('tt2', 'string', {\n      'single-quoted-string': {\n        pattern: /'[^\\\\']*(?:\\\\[\\s\\S][^\\\\']*)*'/,\n        greedy: true,\n        alias: 'string'\n      },\n      'double-quoted-string': {\n        pattern: /\"[^\\\\\"]*(?:\\\\[\\s\\S][^\\\\\"]*)*\"/,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          variable: {\n            pattern: /\\$(?:[a-z]\\w*(?:\\.(?:\\d+|\\$?[a-z]\\w*))*)/i\n          }\n        }\n      }\n    }) // The different types of TT2 strings \"replace\" the C-like standard string\n    delete Prism.languages.tt2.string\n    Prism.hooks.add('before-tokenize', function (env) {\n      var tt2Pattern = /\\[%[\\s\\S]+?%\\]/g\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'tt2',\n        tt2Pattern\n      )\n    })\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'tt2')\n    })\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = turtle\nturtle.displayName = 'turtle'\nturtle.aliases = []\nfunction turtle(Prism) {\n  Prism.languages.turtle = {\n    comment: {\n      pattern: /#.*/,\n      greedy: true\n    },\n    'multiline-string': {\n      pattern:\n        /\"\"\"(?:(?:\"\"?)?(?:[^\"\\\\]|\\\\.))*\"\"\"|'''(?:(?:''?)?(?:[^'\\\\]|\\\\.))*'''/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        comment: /#.*/\n      }\n    },\n    string: {\n      pattern: /\"(?:[^\\\\\"\\r\\n]|\\\\.)*\"|'(?:[^\\\\'\\r\\n]|\\\\.)*'/,\n      greedy: true\n    },\n    url: {\n      pattern:\n        /<(?:[^\\x00-\\x20<>\"{}|^`\\\\]|\\\\(?:u[\\da-fA-F]{4}|U[\\da-fA-F]{8}))*>/,\n      greedy: true,\n      inside: {\n        punctuation: /[<>]/\n      }\n    },\n    function: {\n      pattern:\n        /(?:(?![-.\\d\\xB7])[-.\\w\\xB7\\xC0-\\uFFFD]+)?:(?:(?![-.])(?:[-.:\\w\\xC0-\\uFFFD]|%[\\da-f]{2}|\\\\.)+)?/i,\n      inside: {\n        'local-name': {\n          pattern: /([^:]*:)[\\s\\S]+/,\n          lookbehind: true\n        },\n        prefix: {\n          pattern: /[\\s\\S]+/,\n          inside: {\n            punctuation: /:/\n          }\n        }\n      }\n    },\n    number: /[+-]?\\b\\d+(?:\\.\\d*)?(?:e[+-]?\\d+)?/i,\n    punctuation: /[{}.,;()[\\]]|\\^\\^/,\n    boolean: /\\b(?:false|true)\\b/,\n    keyword: [/(?:\\ba|@prefix|@base)\\b|=/, /\\b(?:base|graph|prefix)\\b/i],\n    tag: {\n      pattern: /@[a-z]+(?:-[a-z\\d]+)*/i,\n      inside: {\n        punctuation: /@/\n      }\n    }\n  }\n  Prism.languages.trig = Prism.languages['turtle']\n}\n","'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = twig\ntwig.displayName = 'twig'\ntwig.aliases = []\nfunction twig(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  Prism.languages.twig = {\n    comment: /^\\{#[\\s\\S]*?#\\}$/,\n    'tag-name': {\n      pattern: /(^\\{%-?\\s*)\\w+/,\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    delimiter: {\n      pattern: /^\\{[{%]-?|-?[%}]\\}$/,\n      alias: 'punctuation'\n    },\n    string: {\n      pattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      inside: {\n        punctuation: /^['\"]|['\"]$/\n      }\n    },\n    keyword: /\\b(?:even|if|odd)\\b/,\n    boolean: /\\b(?:false|null|true)\\b/,\n    number: /\\b0x[\\dA-Fa-f]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee][-+]?\\d+)?/,\n    operator: [\n      {\n        pattern:\n          /(\\s)(?:and|b-and|b-or|b-xor|ends with|in|is|matches|not|or|same as|starts with)(?=\\s)/,\n        lookbehind: true\n      },\n      /[=<>]=?|!=|\\*\\*?|\\/\\/?|\\?:?|[-+~%|]/\n    ],\n    punctuation: /[()\\[\\]{}:.,]/\n  }\n  Prism.hooks.add('before-tokenize', function (env) {\n    if (env.language !== 'twig') {\n      return\n    }\n    var pattern = /\\{(?:#[\\s\\S]*?#|%[\\s\\S]*?%|\\{[\\s\\S]*?\\})\\}/g\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'twig', pattern)\n  })\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'twig')\n  })\n}\n","'use strict'\n\nmodule.exports = typescript\ntypescript.displayName = 'typescript'\ntypescript.aliases = ['ts']\nfunction typescript(Prism) {\n  ;(function (Prism) {\n    Prism.languages.typescript = Prism.languages.extend('javascript', {\n      'class-name': {\n        pattern:\n          /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\n        lookbehind: true,\n        greedy: true,\n        inside: null // see below\n      },\n      builtin:\n        /\\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\\b/\n    }) // The keywords TypeScript adds to JavaScript\n    Prism.languages.typescript.keyword.push(\n      /\\b(?:abstract|declare|is|keyof|readonly|require)\\b/, // keywords that have to be followed by an identifier\n      /\\b(?:asserts|infer|interface|module|namespace|type)\\b(?=\\s*(?:[{_$a-zA-Z\\xA0-\\uFFFF]|$))/, // This is for `import type *, {}`\n      /\\btype\\b(?=\\s*(?:[\\{*]|$))/\n    ) // doesn't work with TS because TS is too complex\n    delete Prism.languages.typescript['parameter']\n    delete Prism.languages.typescript['literal-property'] // a version of typescript specifically for highlighting types\n    var typeInside = Prism.languages.extend('typescript', {})\n    delete typeInside['class-name']\n    Prism.languages.typescript['class-name'].inside = typeInside\n    Prism.languages.insertBefore('typescript', 'function', {\n      decorator: {\n        pattern: /@[$\\w\\xA0-\\uFFFF]+/,\n        inside: {\n          at: {\n            pattern: /^@/,\n            alias: 'operator'\n          },\n          function: /^[\\s\\S]+/\n        }\n      },\n      'generic-function': {\n        // e.g. foo<T extends \"bar\" | \"baz\">( ...\n        pattern:\n          /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\n        greedy: true,\n        inside: {\n          function: /^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,\n          generic: {\n            pattern: /<[\\s\\S]+/,\n            // everything after the first <\n            alias: 'class-name',\n            inside: typeInside\n          }\n        }\n      }\n    })\n    Prism.languages.ts = Prism.languages.typescript\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = typoscript\ntyposcript.displayName = 'typoscript'\ntyposcript.aliases = ['tsconfig']\nfunction typoscript(Prism) {\n  ;(function (Prism) {\n    var keywords =\n      /\\b(?:ACT|ACTIFSUB|CARRAY|CASE|CLEARGIF|COA|COA_INT|CONSTANTS|CONTENT|CUR|EDITPANEL|EFFECT|EXT|FILE|FLUIDTEMPLATE|FORM|FRAME|FRAMESET|GIFBUILDER|GMENU|GMENU_FOLDOUT|GMENU_LAYERS|GP|HMENU|HRULER|HTML|IENV|IFSUB|IMAGE|IMGMENU|IMGMENUITEM|IMGTEXT|IMG_RESOURCE|INCLUDE_TYPOSCRIPT|JSMENU|JSMENUITEM|LLL|LOAD_REGISTER|NO|PAGE|RECORDS|RESTORE_REGISTER|TEMPLATE|TEXT|TMENU|TMENUITEM|TMENU_LAYERS|USER|USER_INT|_GIFBUILDER|global|globalString|globalVar)\\b/\n    Prism.languages.typoscript = {\n      comment: [\n        {\n          // multiline comments /* */\n          pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n          lookbehind: true\n        },\n        {\n          // double-slash comments - ignored when backslashes or colon is found in front\n          // also ignored whenever directly after an equal-sign, because it would probably be an url without protocol\n          pattern: /(^|[^\\\\:= \\t]|(?:^|[^= \\t])[ \\t]+)\\/\\/.*/,\n          lookbehind: true,\n          greedy: true\n        },\n        {\n          // hash comments - ignored when leading quote is found for hex colors in strings\n          pattern: /(^|[^\"'])#.*/,\n          lookbehind: true,\n          greedy: true\n        }\n      ],\n      function: [\n        {\n          // old include style\n          pattern:\n            /<INCLUDE_TYPOSCRIPT:\\s*source\\s*=\\s*(?:\"[^\"\\r\\n]*\"|'[^'\\r\\n]*')\\s*>/,\n          inside: {\n            string: {\n              pattern: /\"[^\"\\r\\n]*\"|'[^'\\r\\n]*'/,\n              inside: {\n                keyword: keywords\n              }\n            },\n            keyword: {\n              pattern: /INCLUDE_TYPOSCRIPT/\n            }\n          }\n        },\n        {\n          // new include style\n          pattern: /@import\\s*(?:\"[^\"\\r\\n]*\"|'[^'\\r\\n]*')/,\n          inside: {\n            string: /\"[^\"\\r\\n]*\"|'[^'\\r\\n]*'/\n          }\n        }\n      ],\n      string: {\n        pattern: /^([^=]*=[< ]?)(?:(?!\\]\\n).)*/,\n        lookbehind: true,\n        inside: {\n          function: /\\{\\$.*\\}/,\n          // constants include\n          keyword: keywords,\n          number: /^\\d+$/,\n          punctuation: /[,|:]/\n        }\n      },\n      keyword: keywords,\n      number: {\n        // special highlighting for indexes of arrays in tags\n        pattern: /\\b\\d+\\s*[.{=]/,\n        inside: {\n          operator: /[.{=]/\n        }\n      },\n      tag: {\n        pattern: /\\.?[-\\w\\\\]+\\.?/,\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      punctuation: /[{}[\\];(),.:|]/,\n      operator: /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/\n    }\n    Prism.languages.tsconfig = Prism.languages.typoscript\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = unrealscript\nunrealscript.displayName = 'unrealscript'\nunrealscript.aliases = ['uc', 'uscript']\nfunction unrealscript(Prism) {\n  Prism.languages.unrealscript = {\n    comment: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,\n    string: {\n      pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true\n    },\n    category: {\n      pattern:\n        /(\\b(?:(?:autoexpand|hide|show)categories|var)\\s*\\()[^()]+(?=\\))/,\n      lookbehind: true,\n      greedy: true,\n      alias: 'property'\n    },\n    metadata: {\n      pattern: /(\\w\\s*)<\\s*\\w+\\s*=[^<>|=\\r\\n]+(?:\\|\\s*\\w+\\s*=[^<>|=\\r\\n]+)*>/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        property: /\\b\\w+(?=\\s*=)/,\n        operator: /=/,\n        punctuation: /[<>|]/\n      }\n    },\n    macro: {\n      pattern: /`\\w+/,\n      alias: 'property'\n    },\n    'class-name': {\n      pattern:\n        /(\\b(?:class|enum|extends|interface|state(?:\\(\\))?|struct|within)\\s+)\\w+/,\n      lookbehind: true\n    },\n    keyword:\n      /\\b(?:abstract|actor|array|auto|autoexpandcategories|bool|break|byte|case|class|classgroup|client|coerce|collapsecategories|config|const|continue|default|defaultproperties|delegate|dependson|deprecated|do|dontcollapsecategories|editconst|editinlinenew|else|enum|event|exec|export|extends|final|float|for|forcescriptorder|foreach|function|goto|guid|hidecategories|hidedropdown|if|ignores|implements|inherits|input|int|interface|iterator|latent|local|material|name|native|nativereplication|noexport|nontransient|noteditinlinenew|notplaceable|operator|optional|out|pawn|perobjectconfig|perobjectlocalized|placeable|postoperator|preoperator|private|protected|reliable|replication|return|server|showcategories|simulated|singular|state|static|string|struct|structdefault|structdefaultproperties|switch|texture|transient|travel|unreliable|until|var|vector|while|within)\\b/,\n    function: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n    boolean: /\\b(?:false|true)\\b/,\n    number: /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n    // https://docs.unrealengine.com/udk/Three/UnrealScriptExpressions.html\n    operator:\n      />>|<<|--|\\+\\+|\\*\\*|[-+*/~!=<>$@]=?|&&?|\\|\\|?|\\^\\^?|[?:%]|\\b(?:ClockwiseFrom|Cross|Dot)\\b/,\n    punctuation: /[()[\\]{};,.]/\n  }\n  Prism.languages.uc = Prism.languages.uscript = Prism.languages.unrealscript\n}\n","'use strict'\n\nmodule.exports = uorazor\nuorazor.displayName = 'uorazor'\nuorazor.aliases = []\nfunction uorazor(Prism) {\n  Prism.languages.uorazor = {\n    'comment-hash': {\n      pattern: /#.*/,\n      alias: 'comment',\n      greedy: true\n    },\n    'comment-slash': {\n      pattern: /\\/\\/.*/,\n      alias: 'comment',\n      greedy: true\n    },\n    string: {\n      pattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      inside: {\n        punctuation: /^['\"]|['\"]$/\n      },\n      greedy: true\n    },\n    'source-layers': {\n      pattern:\n        /\\b(?:arms|backpack|blue|bracelet|cancel|clear|cloak|criminal|earrings|enemy|facialhair|friend|friendly|gloves|gray|grey|ground|hair|head|innerlegs|innertorso|innocent|lefthand|middletorso|murderer|neck|nonfriendly|onehandedsecondary|outerlegs|outertorso|pants|red|righthand|ring|self|shirt|shoes|talisman|waist)\\b/i,\n      alias: 'function'\n    },\n    'source-commands': {\n      pattern:\n        /\\b(?:alliance|attack|cast|clearall|clearignore|clearjournal|clearlist|clearsysmsg|createlist|createtimer|dclick|dclicktype|dclickvar|dress|dressconfig|drop|droprelloc|emote|getlabel|guild|gumpclose|gumpresponse|hotkey|ignore|lasttarget|lift|lifttype|menu|menuresponse|msg|org|organize|organizer|overhead|pause|poplist|potion|promptresponse|pushlist|removelist|removetimer|rename|restock|say|scav|scavenger|script|setability|setlasttarget|setskill|settimer|setvar|sysmsg|target|targetloc|targetrelloc|targettype|undress|unignore|unsetvar|useobject|useonce|useskill|usetype|virtue|wait|waitforgump|waitformenu|waitforprompt|waitforstat|waitforsysmsg|waitfortarget|walk|wfsysmsg|wft|whisper|yell)\\b/,\n      alias: 'function'\n    },\n    'tag-name': {\n      pattern: /(^\\{%-?\\s*)\\w+/,\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    delimiter: {\n      pattern: /^\\{[{%]-?|-?[%}]\\}$/,\n      alias: 'punctuation'\n    },\n    function:\n      /\\b(?:atlist|close|closest|count|counter|counttype|dead|dex|diffhits|diffmana|diffstam|diffweight|find|findbuff|finddebuff|findlayer|findtype|findtypelist|followers|gumpexists|hidden|hits|hp|hue|human|humanoid|ingump|inlist|insysmessage|insysmsg|int|invul|lhandempty|list|listexists|mana|maxhits|maxhp|maxmana|maxstam|maxweight|monster|mounted|name|next|noto|paralyzed|poisoned|position|prev|previous|queued|rand|random|rhandempty|skill|stam|str|targetexists|timer|timerexists|varexist|warmode|weight)\\b/,\n    keyword:\n      /\\b(?:and|as|break|continue|else|elseif|endfor|endif|endwhile|for|if|loop|not|or|replay|stop|while)\\b/,\n    boolean: /\\b(?:false|null|true)\\b/,\n    number: /\\b0x[\\dA-Fa-f]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee][-+]?\\d+)?/,\n    operator: [\n      {\n        pattern:\n          /(\\s)(?:and|b-and|b-or|b-xor|ends with|in|is|matches|not|or|same as|starts with)(?=\\s)/,\n        lookbehind: true\n      },\n      /[=<>]=?|!=|\\*\\*?|\\/\\/?|\\?:?|[-+~%|]/\n    ],\n    punctuation: /[()\\[\\]{}:.,]/\n  }\n}\n","'use strict'\n\nmodule.exports = uri\nuri.displayName = 'uri'\nuri.aliases = ['url']\nfunction uri(Prism) {\n  // https://tools.ietf.org/html/rfc3986#appendix-A\n  Prism.languages.uri = {\n    scheme: {\n      pattern: /^[a-z][a-z0-9+.-]*:/im,\n      greedy: true,\n      inside: {\n        'scheme-delimiter': /:$/\n      }\n    },\n    fragment: {\n      pattern: /#[\\w\\-.~!$&'()*+,;=%:@/?]*/,\n      inside: {\n        'fragment-delimiter': /^#/\n      }\n    },\n    query: {\n      pattern: /\\?[\\w\\-.~!$&'()*+,;=%:@/?]*/,\n      inside: {\n        'query-delimiter': {\n          pattern: /^\\?/,\n          greedy: true\n        },\n        'pair-delimiter': /[&;]/,\n        pair: {\n          pattern: /^[^=][\\s\\S]*/,\n          inside: {\n            key: /^[^=]+/,\n            value: {\n              pattern: /(^=)[\\s\\S]+/,\n              lookbehind: true\n            }\n          }\n        }\n      }\n    },\n    authority: {\n      pattern: RegExp(\n        /^\\/\\//.source + // [ userinfo \"@\" ]\n          /(?:[\\w\\-.~!$&'()*+,;=%:]*@)?/.source + // host\n          ('(?:' + // IP-literal\n            /\\[(?:[0-9a-fA-F:.]{2,48}|v[0-9a-fA-F]+\\.[\\w\\-.~!$&'()*+,;=]+)\\]/\n              .source +\n            '|' + // IPv4address or registered name\n            /[\\w\\-.~!$&'()*+,;=%]*/.source +\n            ')') + // [ \":\" port ]\n          /(?::\\d*)?/.source,\n        'm'\n      ),\n      inside: {\n        'authority-delimiter': /^\\/\\//,\n        'user-info-segment': {\n          pattern: /^[\\w\\-.~!$&'()*+,;=%:]*@/,\n          inside: {\n            'user-info-delimiter': /@$/,\n            'user-info': /^[\\w\\-.~!$&'()*+,;=%:]+/\n          }\n        },\n        'port-segment': {\n          pattern: /:\\d*$/,\n          inside: {\n            'port-delimiter': /^:/,\n            port: /^\\d+/\n          }\n        },\n        host: {\n          pattern: /[\\s\\S]+/,\n          inside: {\n            'ip-literal': {\n              pattern: /^\\[[\\s\\S]+\\]$/,\n              inside: {\n                'ip-literal-delimiter': /^\\[|\\]$/,\n                'ipv-future': /^v[\\s\\S]+/,\n                'ipv6-address': /^[\\s\\S]+/\n              }\n            },\n            'ipv4-address':\n              /^(?:(?:[03-9]\\d?|[12]\\d{0,2})\\.){3}(?:[03-9]\\d?|[12]\\d{0,2})$/\n          }\n        }\n      }\n    },\n    path: {\n      pattern: /^[\\w\\-.~!$&'()*+,;=%:@/]+/m,\n      inside: {\n        'path-separator': /\\//\n      }\n    }\n  }\n  Prism.languages.url = Prism.languages.uri\n}\n","'use strict'\n\nmodule.exports = v\nv.displayName = 'v'\nv.aliases = []\nfunction v(Prism) {\n  ;(function (Prism) {\n    var interpolationExpr = {\n      pattern: /[\\s\\S]+/,\n      inside: null\n    }\n    Prism.languages.v = Prism.languages.extend('clike', {\n      string: {\n        pattern: /r?([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        alias: 'quoted-string',\n        greedy: true,\n        inside: {\n          interpolation: {\n            pattern:\n              /((?:^|[^\\\\])(?:\\\\{2})*)\\$(?:\\{[^{}]*\\}|\\w+(?:\\.\\w+(?:\\([^\\(\\)]*\\))?|\\[[^\\[\\]]+\\])*)/,\n            lookbehind: true,\n            inside: {\n              'interpolation-variable': {\n                pattern: /^\\$\\w[\\s\\S]*$/,\n                alias: 'variable'\n              },\n              'interpolation-punctuation': {\n                pattern: /^\\$\\{|\\}$/,\n                alias: 'punctuation'\n              },\n              'interpolation-expression': interpolationExpr\n            }\n          }\n        }\n      },\n      'class-name': {\n        pattern: /(\\b(?:enum|interface|struct|type)\\s+)(?:C\\.)?\\w+/,\n        lookbehind: true\n      },\n      keyword:\n        /(?:\\b(?:__global|as|asm|assert|atomic|break|chan|const|continue|defer|else|embed|enum|fn|for|go(?:to)?|if|import|in|interface|is|lock|match|module|mut|none|or|pub|return|rlock|select|shared|sizeof|static|struct|type(?:of)?|union|unsafe)|\\$(?:else|for|if)|#(?:flag|include))\\b/,\n      number:\n        /\\b(?:0x[a-f\\d]+(?:_[a-f\\d]+)*|0b[01]+(?:_[01]+)*|0o[0-7]+(?:_[0-7]+)*|\\d+(?:_\\d+)*(?:\\.\\d+(?:_\\d+)*)?)\\b/i,\n      operator:\n        /~|\\?|[*\\/%^!=]=?|\\+[=+]?|-[=-]?|\\|[=|]?|&(?:=|&|\\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\\.\\.\\.?/,\n      builtin:\n        /\\b(?:any(?:_float|_int)?|bool|byte(?:ptr)?|charptr|f(?:32|64)|i(?:8|16|64|128|nt)|rune|size_t|string|u(?:16|32|64|128)|voidptr)\\b/\n    })\n    interpolationExpr.inside = Prism.languages.v\n    Prism.languages.insertBefore('v', 'string', {\n      char: {\n        pattern: /`(?:\\\\`|\\\\?[^`]{1,2})`/,\n        // using {1,2} instead of `u` flag for compatibility\n        alias: 'rune'\n      }\n    })\n    Prism.languages.insertBefore('v', 'operator', {\n      attribute: {\n        pattern:\n          /(^[\\t ]*)\\[(?:deprecated|direct_array_access|flag|inline|live|ref_only|typedef|unsafe_fn|windows_stdcall)\\]/m,\n        lookbehind: true,\n        alias: 'annotation',\n        inside: {\n          punctuation: /[\\[\\]]/,\n          keyword: /\\w+/\n        }\n      },\n      generic: {\n        pattern: /<\\w+>(?=\\s*[\\)\\{])/,\n        inside: {\n          punctuation: /[<>]/,\n          'class-name': /\\w+/\n        }\n      }\n    })\n    Prism.languages.insertBefore('v', 'function', {\n      'generic-function': {\n        // e.g. foo<T>( ...\n        pattern: /\\b\\w+\\s*<\\w+>(?=\\()/,\n        inside: {\n          function: /^\\w+/,\n          generic: {\n            pattern: /<\\w+>/,\n            inside: Prism.languages.v.generic.inside\n          }\n        }\n      }\n    })\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = vala\nvala.displayName = 'vala'\nvala.aliases = []\nfunction vala(Prism) {\n  Prism.languages.vala = Prism.languages.extend('clike', {\n    // Classes copied from prism-csharp\n    'class-name': [\n      {\n        // (Foo bar, Bar baz)\n        pattern: /\\b[A-Z]\\w*(?:\\.\\w+)*\\b(?=(?:\\?\\s+|\\*?\\s+\\*?)\\w)/,\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      {\n        // [Foo]\n        pattern: /(\\[)[A-Z]\\w*(?:\\.\\w+)*\\b/,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      {\n        // class Foo : Bar\n        pattern:\n          /(\\b(?:class|interface)\\s+[A-Z]\\w*(?:\\.\\w+)*\\s*:\\s*)[A-Z]\\w*(?:\\.\\w+)*\\b/,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      {\n        // class Foo\n        pattern:\n          /((?:\\b(?:class|enum|interface|new|struct)\\s+)|(?:catch\\s+\\())[A-Z]\\w*(?:\\.\\w+)*\\b/,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      }\n    ],\n    keyword:\n      /\\b(?:abstract|as|assert|async|base|bool|break|case|catch|char|class|const|construct|continue|default|delegate|delete|do|double|dynamic|else|ensures|enum|errordomain|extern|finally|float|for|foreach|get|if|in|inline|int|int16|int32|int64|int8|interface|internal|is|lock|long|namespace|new|null|out|override|owned|params|private|protected|public|ref|requires|return|set|short|signal|sizeof|size_t|ssize_t|static|string|struct|switch|this|throw|throws|try|typeof|uchar|uint|uint16|uint32|uint64|uint8|ulong|unichar|unowned|ushort|using|value|var|virtual|void|volatile|weak|while|yield)\\b/i,\n    function: /\\b\\w+(?=\\s*\\()/,\n    number:\n      /(?:\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)(?:f|u?l?)?/i,\n    operator:\n      /\\+\\+|--|&&|\\|\\||<<=?|>>=?|=>|->|~|[+\\-*\\/%&^|=!<>]=?|\\?\\??|\\.\\.\\./,\n    punctuation: /[{}[\\];(),.:]/,\n    constant: /\\b[A-Z0-9_]+\\b/\n  })\n  Prism.languages.insertBefore('vala', 'string', {\n    'raw-string': {\n      pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n      greedy: true,\n      alias: 'string'\n    },\n    'template-string': {\n      pattern: /@\"[\\s\\S]*?\"/,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern: /\\$(?:\\([^)]*\\)|[a-zA-Z]\\w*)/,\n          inside: {\n            delimiter: {\n              pattern: /^\\$\\(?|\\)$/,\n              alias: 'punctuation'\n            },\n            rest: Prism.languages.vala\n          }\n        },\n        string: /[\\s\\S]+/\n      }\n    }\n  })\n  Prism.languages.insertBefore('vala', 'keyword', {\n    regex: {\n      pattern:\n        /\\/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[imsx]{0,4}(?=\\s*(?:$|[\\r\\n,.;})\\]]))/,\n      greedy: true,\n      inside: {\n        'regex-source': {\n          pattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,\n          lookbehind: true,\n          alias: 'language-regex',\n          inside: Prism.languages.regex\n        },\n        'regex-delimiter': /^\\//,\n        'regex-flags': /^[a-z]+$/\n      }\n    }\n  })\n}\n","'use strict'\nvar refractorBasic = require('./basic.js')\nmodule.exports = vbnet\nvbnet.displayName = 'vbnet'\nvbnet.aliases = []\nfunction vbnet(Prism) {\n  Prism.register(refractorBasic)\n  Prism.languages.vbnet = Prism.languages.extend('basic', {\n    comment: [\n      {\n        pattern: /(?:!|REM\\b).+/i,\n        inside: {\n          keyword: /^REM/i\n        }\n      },\n      {\n        pattern: /(^|[^\\\\:])'.*/,\n        lookbehind: true,\n        greedy: true\n      }\n    ],\n    string: {\n      pattern: /(^|[^\"])\"(?:\"\"|[^\"])*\"(?!\")/,\n      lookbehind: true,\n      greedy: true\n    },\n    keyword:\n      /(?:\\b(?:ADDHANDLER|ADDRESSOF|ALIAS|AND|ANDALSO|AS|BEEP|BLOAD|BOOLEAN|BSAVE|BYREF|BYTE|BYVAL|CALL(?: ABSOLUTE)?|CASE|CATCH|CBOOL|CBYTE|CCHAR|CDATE|CDBL|CDEC|CHAIN|CHAR|CHDIR|CINT|CLASS|CLEAR|CLNG|CLOSE|CLS|COBJ|COM|COMMON|CONST|CONTINUE|CSBYTE|CSHORT|CSNG|CSTR|CTYPE|CUINT|CULNG|CUSHORT|DATA|DATE|DECIMAL|DECLARE|DEF(?: FN| SEG|DBL|INT|LNG|SNG|STR)|DEFAULT|DELEGATE|DIM|DIRECTCAST|DO|DOUBLE|ELSE|ELSEIF|END|ENUM|ENVIRON|ERASE|ERROR|EVENT|EXIT|FALSE|FIELD|FILES|FINALLY|FOR(?: EACH)?|FRIEND|FUNCTION|GET|GETTYPE|GETXMLNAMESPACE|GLOBAL|GOSUB|GOTO|HANDLES|IF|IMPLEMENTS|IMPORTS|IN|INHERITS|INPUT|INTEGER|INTERFACE|IOCTL|IS|ISNOT|KEY|KILL|LET|LIB|LIKE|LINE INPUT|LOCATE|LOCK|LONG|LOOP|LSET|ME|MKDIR|MOD|MODULE|MUSTINHERIT|MUSTOVERRIDE|MYBASE|MYCLASS|NAME|NAMESPACE|NARROWING|NEW|NEXT|NOT|NOTHING|NOTINHERITABLE|NOTOVERRIDABLE|OBJECT|OF|OFF|ON(?: COM| ERROR| KEY| TIMER)?|OPEN|OPERATOR|OPTION(?: BASE)?|OPTIONAL|OR|ORELSE|OUT|OVERLOADS|OVERRIDABLE|OVERRIDES|PARAMARRAY|PARTIAL|POKE|PRIVATE|PROPERTY|PROTECTED|PUBLIC|PUT|RAISEEVENT|READ|READONLY|REDIM|REM|REMOVEHANDLER|RESTORE|RESUME|RETURN|RMDIR|RSET|RUN|SBYTE|SELECT(?: CASE)?|SET|SHADOWS|SHARED|SHELL|SHORT|SINGLE|SLEEP|STATIC|STEP|STOP|STRING|STRUCTURE|SUB|SWAP|SYNCLOCK|SYSTEM|THEN|THROW|TIMER|TO|TROFF|TRON|TRUE|TRY|TRYCAST|TYPE|TYPEOF|UINTEGER|ULONG|UNLOCK|UNTIL|USHORT|USING|VIEW PRINT|WAIT|WEND|WHEN|WHILE|WIDENING|WITH|WITHEVENTS|WRITE|WRITEONLY|XOR)|\\B(?:#CONST|#ELSE|#ELSEIF|#END|#IF))(?:\\$|\\b)/i,\n    punctuation: /[,;:(){}]/\n  })\n}\n","'use strict'\n\nmodule.exports = velocity\nvelocity.displayName = 'velocity'\nvelocity.aliases = []\nfunction velocity(Prism) {\n  ;(function (Prism) {\n    Prism.languages.velocity = Prism.languages.extend('markup', {})\n    var velocity = {\n      variable: {\n        pattern:\n          /(^|[^\\\\](?:\\\\\\\\)*)\\$!?(?:[a-z][\\w-]*(?:\\([^)]*\\))?(?:\\.[a-z][\\w-]*(?:\\([^)]*\\))?|\\[[^\\]]+\\])*|\\{[^}]+\\})/i,\n        lookbehind: true,\n        inside: {} // See below\n      },\n      string: {\n        pattern: /\"[^\"]*\"|'[^']*'/,\n        greedy: true\n      },\n      number: /\\b\\d+\\b/,\n      boolean: /\\b(?:false|true)\\b/,\n      operator:\n        /[=!<>]=?|[+*/%-]|&&|\\|\\||\\.\\.|\\b(?:eq|g[et]|l[et]|n(?:e|ot))\\b/,\n      punctuation: /[(){}[\\]:,.]/\n    }\n    velocity.variable.inside = {\n      string: velocity['string'],\n      function: {\n        pattern: /([^\\w-])[a-z][\\w-]*(?=\\()/,\n        lookbehind: true\n      },\n      number: velocity['number'],\n      boolean: velocity['boolean'],\n      punctuation: velocity['punctuation']\n    }\n    Prism.languages.insertBefore('velocity', 'comment', {\n      unparsed: {\n        pattern: /(^|[^\\\\])#\\[\\[[\\s\\S]*?\\]\\]#/,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          punctuation: /^#\\[\\[|\\]\\]#$/\n        }\n      },\n      'velocity-comment': [\n        {\n          pattern: /(^|[^\\\\])#\\*[\\s\\S]*?\\*#/,\n          lookbehind: true,\n          greedy: true,\n          alias: 'comment'\n        },\n        {\n          pattern: /(^|[^\\\\])##.*/,\n          lookbehind: true,\n          greedy: true,\n          alias: 'comment'\n        }\n      ],\n      directive: {\n        pattern:\n          /(^|[^\\\\](?:\\\\\\\\)*)#@?(?:[a-z][\\w-]*|\\{[a-z][\\w-]*\\})(?:\\s*\\((?:[^()]|\\([^()]*\\))*\\))?/i,\n        lookbehind: true,\n        inside: {\n          keyword: {\n            pattern: /^#@?(?:[a-z][\\w-]*|\\{[a-z][\\w-]*\\})|\\bin\\b/,\n            inside: {\n              punctuation: /[{}]/\n            }\n          },\n          rest: velocity\n        }\n      },\n      variable: velocity['variable']\n    })\n    Prism.languages.velocity['tag'].inside['attr-value'].inside.rest =\n      Prism.languages.velocity\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = verilog\nverilog.displayName = 'verilog'\nverilog.aliases = []\nfunction verilog(Prism) {\n  Prism.languages.verilog = {\n    comment: {\n      pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,\n      greedy: true\n    },\n    string: {\n      pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n      greedy: true\n    },\n    'kernel-function': {\n      // support for any kernel function (ex: $display())\n      pattern: /\\B\\$\\w+\\b/,\n      alias: 'property'\n    },\n    // support for user defined constants (ex: `define)\n    constant: /\\B`\\w+\\b/,\n    function: /\\b\\w+(?=\\()/,\n    // support for verilog and system verilog keywords\n    keyword:\n      /\\b(?:alias|and|assert|assign|assume|automatic|before|begin|bind|bins|binsof|bit|break|buf|bufif0|bufif1|byte|case|casex|casez|cell|chandle|class|clocking|cmos|config|const|constraint|context|continue|cover|covergroup|coverpoint|cross|deassign|default|defparam|design|disable|dist|do|edge|else|end|endcase|endclass|endclocking|endconfig|endfunction|endgenerate|endgroup|endinterface|endmodule|endpackage|endprimitive|endprogram|endproperty|endsequence|endspecify|endtable|endtask|enum|event|expect|export|extends|extern|final|first_match|for|force|foreach|forever|fork|forkjoin|function|generate|genvar|highz0|highz1|if|iff|ifnone|ignore_bins|illegal_bins|import|incdir|include|initial|inout|input|inside|instance|int|integer|interface|intersect|join|join_any|join_none|large|liblist|library|local|localparam|logic|longint|macromodule|matches|medium|modport|module|nand|negedge|new|nmos|nor|noshowcancelled|not|notif0|notif1|null|or|output|package|packed|parameter|pmos|posedge|primitive|priority|program|property|protected|pull0|pull1|pulldown|pullup|pulsestyle_ondetect|pulsestyle_onevent|pure|rand|randc|randcase|randsequence|rcmos|real|realtime|ref|reg|release|repeat|return|rnmos|rpmos|rtran|rtranif0|rtranif1|scalared|sequence|shortint|shortreal|showcancelled|signed|small|solve|specify|specparam|static|string|strong0|strong1|struct|super|supply0|supply1|table|tagged|task|this|throughout|time|timeprecision|timeunit|tran|tranif0|tranif1|tri|tri0|tri1|triand|trior|trireg|type|typedef|union|unique|unsigned|use|uwire|var|vectored|virtual|void|wait|wait_order|wand|weak0|weak1|while|wildcard|wire|with|within|wor|xnor|xor)\\b/,\n    // bold highlighting for all verilog and system verilog logic blocks\n    important: /\\b(?:always|always_comb|always_ff|always_latch)\\b(?: *@)?/,\n    // support for time ticks, vectors, and real numbers\n    number:\n      /\\B##?\\d+|(?:\\b\\d+)?'[odbh] ?[\\da-fzx_?]+|\\b(?:\\d*[._])?\\d+(?:e[-+]?\\d+)?/i,\n    operator: /[-+{}^~%*\\/?=!<>&|]+/,\n    punctuation: /[[\\];(),.:]/\n  }\n}\n","'use strict'\n\nmodule.exports = vhdl\nvhdl.displayName = 'vhdl'\nvhdl.aliases = []\nfunction vhdl(Prism) {\n  Prism.languages.vhdl = {\n    comment: /--.+/,\n    // support for all logic vectors\n    'vhdl-vectors': {\n      pattern: /\\b[oxb]\"[\\da-f_]+\"|\"[01uxzwlh-]+\"/i,\n      alias: 'number'\n    },\n    // support for operator overloading included\n    'quoted-function': {\n      pattern: /\"\\S+?\"(?=\\()/,\n      alias: 'function'\n    },\n    string: /\"(?:[^\\\\\"\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\"/,\n    constant: /\\b(?:library|use)\\b/i,\n    // support for predefined attributes included\n    keyword:\n      /\\b(?:'active|'ascending|'base|'delayed|'driving|'driving_value|'event|'high|'image|'instance_name|'last_active|'last_event|'last_value|'left|'leftof|'length|'low|'path_name|'pos|'pred|'quiet|'range|'reverse_range|'right|'rightof|'simple_name|'stable|'succ|'transaction|'val|'value|access|after|alias|all|architecture|array|assert|attribute|begin|block|body|buffer|bus|case|component|configuration|constant|disconnect|downto|else|elsif|end|entity|exit|file|for|function|generate|generic|group|guarded|if|impure|in|inertial|inout|is|label|library|linkage|literal|loop|map|new|next|null|of|on|open|others|out|package|port|postponed|procedure|process|pure|range|record|register|reject|report|return|select|severity|shared|signal|subtype|then|to|transport|type|unaffected|units|until|use|variable|wait|when|while|with)\\b/i,\n    boolean: /\\b(?:false|true)\\b/i,\n    function: /\\w+(?=\\()/,\n    // decimal, based, physical, and exponential numbers supported\n    number: /'[01uxzwlh-]'|\\b(?:\\d+#[\\da-f_.]+#|\\d[\\d_.]*)(?:e[-+]?\\d+)?/i,\n    operator:\n      /[<>]=?|:=|[-+*/&=]|\\b(?:abs|and|mod|nand|nor|not|or|rem|rol|ror|sla|sll|sra|srl|xnor|xor)\\b/i,\n    punctuation: /[{}[\\];(),.:]/\n  }\n}\n","'use strict'\n\nmodule.exports = vim\nvim.displayName = 'vim'\nvim.aliases = []\nfunction vim(Prism) {\n  Prism.languages.vim = {\n    string: /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?:[^'\\r\\n]|'')*'/,\n    comment: /\".*/,\n    function: /\\b\\w+(?=\\()/,\n    keyword:\n      /\\b(?:N|Next|P|Print|X|XMLent|XMLns|ab|abbreviate|abc|abclear|abo|aboveleft|al|all|ar|arga|argadd|argd|argdelete|argdo|arge|argedit|argg|argglobal|argl|arglocal|args|argu|argument|as|ascii|b|bN|bNext|ba|bad|badd|ball|bd|bdelete|be|bel|belowright|bf|bfirst|bl|blast|bm|bmodified|bn|bnext|bo|botright|bp|bprevious|br|brea|break|breaka|breakadd|breakd|breakdel|breakl|breaklist|brewind|bro|browse|bufdo|buffer|buffers|bun|bunload|bw|bwipeout|c|cN|cNext|cNfcNfile|ca|cabbrev|cabc|cabclear|cad|caddb|caddbuffer|caddexpr|caddf|caddfile|cal|call|cat|catch|cb|cbuffer|cc|ccl|cclose|cd|ce|center|cex|cexpr|cf|cfile|cfir|cfirst|cg|cgetb|cgetbuffer|cgete|cgetexpr|cgetfile|change|changes|chd|chdir|che|checkpath|checkt|checktime|cl|cla|clast|clist|clo|close|cmapc|cmapclear|cn|cnew|cnewer|cnext|cnf|cnfile|cnorea|cnoreabbrev|co|col|colder|colo|colorscheme|comc|comclear|comp|compiler|con|conf|confirm|continue|cope|copen|copy|cp|cpf|cpfile|cprevious|cq|cquit|cr|crewind|cu|cuna|cunabbrev|cunmap|cw|cwindow|d|debugg|debuggreedy|delc|delcommand|delete|delf|delfunction|delm|delmarks|di|diffg|diffget|diffoff|diffpatch|diffpu|diffput|diffsplit|diffthis|diffu|diffupdate|dig|digraphs|display|dj|djump|dl|dlist|dr|drop|ds|dsearch|dsp|dsplit|e|earlier|echoe|echoerr|echom|echomsg|echon|edit|el|else|elsei|elseif|em|emenu|en|endf|endfo|endfor|endfun|endfunction|endif|endt|endtry|endw|endwhile|ene|enew|ex|exi|exit|exu|exusage|f|file|files|filetype|fin|fina|finally|find|fini|finish|fir|first|fix|fixdel|fo|fold|foldc|foldclose|foldd|folddoc|folddoclosed|folddoopen|foldo|foldopen|for|fu|fun|function|go|goto|gr|grep|grepa|grepadd|h|ha|hardcopy|help|helpf|helpfind|helpg|helpgrep|helpt|helptags|hid|hide|his|history|ia|iabbrev|iabc|iabclear|if|ij|ijump|il|ilist|imapc|imapclear|in|inorea|inoreabbrev|isearch|isp|isplit|iu|iuna|iunabbrev|iunmap|j|join|ju|jumps|k|kee|keepalt|keepj|keepjumps|keepmarks|l|lN|lNext|lNf|lNfile|la|lad|laddb|laddbuffer|laddexpr|laddf|laddfile|lan|language|last|later|lb|lbuffer|lc|lcd|lch|lchdir|lcl|lclose|left|lefta|leftabove|let|lex|lexpr|lf|lfile|lfir|lfirst|lg|lgetb|lgetbuffer|lgete|lgetexpr|lgetfile|lgr|lgrep|lgrepa|lgrepadd|lh|lhelpgrep|list|ll|lla|llast|lli|llist|lm|lmak|lmake|lmap|lmapc|lmapclear|ln|lne|lnew|lnewer|lnext|lnf|lnfile|lnoremap|lo|loadview|loc|lockmarks|lockv|lockvar|lol|lolder|lop|lopen|lp|lpf|lpfile|lprevious|lr|lrewind|ls|lt|ltag|lu|lunmap|lv|lvimgrep|lvimgrepa|lvimgrepadd|lw|lwindow|m|ma|mak|make|mark|marks|mat|match|menut|menutranslate|mk|mkexrc|mks|mksession|mksp|mkspell|mkv|mkvie|mkview|mkvimrc|mod|mode|move|mz|mzf|mzfile|mzscheme|n|nbkey|new|next|nmapc|nmapclear|noh|nohlsearch|norea|noreabbrev|nu|number|nun|nunmap|o|omapc|omapclear|on|only|open|opt|options|ou|ounmap|p|pc|pclose|pe|ped|pedit|perl|perld|perldo|po|pop|popu|popup|pp|ppop|pre|preserve|prev|previous|print|prof|profd|profdel|profile|promptf|promptfind|promptr|promptrepl|ps|psearch|ptN|ptNext|pta|ptag|ptf|ptfirst|ptj|ptjump|ptl|ptlast|ptn|ptnext|ptp|ptprevious|ptr|ptrewind|pts|ptselect|pu|put|pw|pwd|py|pyf|pyfile|python|q|qa|qall|quit|quita|quitall|r|read|rec|recover|red|redi|redir|redo|redr|redraw|redraws|redrawstatus|reg|registers|res|resize|ret|retab|retu|return|rew|rewind|ri|right|rightb|rightbelow|ru|rub|ruby|rubyd|rubydo|rubyf|rubyfile|runtime|rv|rviminfo|sN|sNext|sa|sal|sall|san|sandbox|sargument|sav|saveas|sb|sbN|sbNext|sba|sball|sbf|sbfirst|sbl|sblast|sbm|sbmodified|sbn|sbnext|sbp|sbprevious|sbr|sbrewind|sbuffer|scrip|scripte|scriptencoding|scriptnames|se|set|setf|setfiletype|setg|setglobal|setl|setlocal|sf|sfind|sfir|sfirst|sh|shell|sign|sil|silent|sim|simalt|sl|sla|slast|sleep|sm|smagic|smap|smapc|smapclear|sme|smenu|sn|snext|sni|sniff|sno|snomagic|snor|snoremap|snoreme|snoremenu|so|sor|sort|source|sp|spe|spelld|spelldump|spellgood|spelli|spellinfo|spellr|spellrepall|spellu|spellundo|spellw|spellwrong|split|spr|sprevious|sre|srewind|st|sta|stag|star|startg|startgreplace|startinsert|startr|startreplace|stj|stjump|stop|stopi|stopinsert|sts|stselect|sun|sunhide|sunm|sunmap|sus|suspend|sv|sview|syncbind|t|tN|tNext|ta|tab|tabN|tabNext|tabc|tabclose|tabd|tabdo|tabe|tabedit|tabf|tabfind|tabfir|tabfirst|tabl|tablast|tabm|tabmove|tabn|tabnew|tabnext|tabo|tabonly|tabp|tabprevious|tabr|tabrewind|tabs|tag|tags|tc|tcl|tcld|tcldo|tclf|tclfile|te|tearoff|tf|tfirst|th|throw|tj|tjump|tl|tlast|tm|tmenu|tn|tnext|to|topleft|tp|tprevious|tr|trewind|try|ts|tselect|tu|tunmenu|u|una|unabbreviate|undo|undoj|undojoin|undol|undolist|unh|unhide|unlet|unlo|unlockvar|unm|unmap|up|update|ve|verb|verbose|version|vert|vertical|vi|vie|view|vim|vimgrep|vimgrepa|vimgrepadd|visual|viu|viusage|vmapc|vmapclear|vne|vnew|vs|vsplit|vu|vunmap|w|wN|wNext|wa|wall|wh|while|win|winc|wincmd|windo|winp|winpos|winsize|wn|wnext|wp|wprevious|wq|wqa|wqall|write|ws|wsverb|wv|wviminfo|x|xa|xall|xit|xm|xmap|xmapc|xmapclear|xme|xmenu|xn|xnoremap|xnoreme|xnoremenu|xu|xunmap|y|yank)\\b/,\n    builtin:\n      /\\b(?:acd|ai|akm|aleph|allowrevins|altkeymap|ambiwidth|ambw|anti|antialias|arab|arabic|arabicshape|ari|arshape|autochdir|autocmd|autoindent|autoread|autowrite|autowriteall|aw|awa|background|backspace|backup|backupcopy|backupdir|backupext|backupskip|balloondelay|ballooneval|balloonexpr|bdir|bdlay|beval|bex|bexpr|bg|bh|bin|binary|biosk|bioskey|bk|bkc|bomb|breakat|brk|browsedir|bs|bsdir|bsk|bt|bufhidden|buflisted|buftype|casemap|ccv|cdpath|cedit|cfu|ch|charconvert|ci|cin|cindent|cink|cinkeys|cino|cinoptions|cinw|cinwords|clipboard|cmdheight|cmdwinheight|cmp|cms|columns|com|comments|commentstring|compatible|complete|completefunc|completeopt|consk|conskey|copyindent|cot|cpo|cpoptions|cpt|cscopepathcomp|cscopeprg|cscopequickfix|cscopetag|cscopetagorder|cscopeverbose|cspc|csprg|csqf|cst|csto|csverb|cuc|cul|cursorcolumn|cursorline|cwh|debug|deco|def|define|delcombine|dex|dg|dict|dictionary|diff|diffexpr|diffopt|digraph|dip|dir|directory|dy|ea|ead|eadirection|eb|ed|edcompatible|ef|efm|ei|ek|enc|encoding|endofline|eol|ep|equalalways|equalprg|errorbells|errorfile|errorformat|esckeys|et|eventignore|expandtab|exrc|fcl|fcs|fdc|fde|fdi|fdl|fdls|fdm|fdn|fdo|fdt|fen|fenc|fencs|fex|ff|ffs|fileencoding|fileencodings|fileformat|fileformats|fillchars|fk|fkmap|flp|fml|fmr|foldcolumn|foldenable|foldexpr|foldignore|foldlevel|foldlevelstart|foldmarker|foldmethod|foldminlines|foldnestmax|foldtext|formatexpr|formatlistpat|formatoptions|formatprg|fp|fs|fsync|ft|gcr|gd|gdefault|gfm|gfn|gfs|gfw|ghr|gp|grepformat|grepprg|gtl|gtt|guicursor|guifont|guifontset|guifontwide|guiheadroom|guioptions|guipty|guitablabel|guitabtooltip|helpfile|helpheight|helplang|hf|hh|hi|hidden|highlight|hk|hkmap|hkmapp|hkp|hl|hlg|hls|hlsearch|ic|icon|iconstring|ignorecase|im|imactivatekey|imak|imc|imcmdline|imd|imdisable|imi|iminsert|ims|imsearch|inc|include|includeexpr|incsearch|inde|indentexpr|indentkeys|indk|inex|inf|infercase|insertmode|invacd|invai|invakm|invallowrevins|invaltkeymap|invanti|invantialias|invar|invarab|invarabic|invarabicshape|invari|invarshape|invautochdir|invautoindent|invautoread|invautowrite|invautowriteall|invaw|invawa|invbackup|invballooneval|invbeval|invbin|invbinary|invbiosk|invbioskey|invbk|invbl|invbomb|invbuflisted|invcf|invci|invcin|invcindent|invcompatible|invconfirm|invconsk|invconskey|invcopyindent|invcp|invcscopetag|invcscopeverbose|invcst|invcsverb|invcuc|invcul|invcursorcolumn|invcursorline|invdeco|invdelcombine|invdg|invdiff|invdigraph|invdisable|invea|inveb|inved|invedcompatible|invek|invendofline|inveol|invequalalways|inverrorbells|invesckeys|invet|invex|invexpandtab|invexrc|invfen|invfk|invfkmap|invfoldenable|invgd|invgdefault|invguipty|invhid|invhidden|invhk|invhkmap|invhkmapp|invhkp|invhls|invhlsearch|invic|invicon|invignorecase|invim|invimc|invimcmdline|invimd|invincsearch|invinf|invinfercase|invinsertmode|invis|invjoinspaces|invjs|invlazyredraw|invlbr|invlinebreak|invlisp|invlist|invloadplugins|invlpl|invlz|invma|invmacatsui|invmagic|invmh|invml|invmod|invmodeline|invmodifiable|invmodified|invmore|invmousef|invmousefocus|invmousehide|invnu|invnumber|invodev|invopendevice|invpaste|invpi|invpreserveindent|invpreviewwindow|invprompt|invpvw|invreadonly|invremap|invrestorescreen|invrevins|invri|invrightleft|invrightleftcmd|invrl|invrlc|invro|invrs|invru|invruler|invsb|invsc|invscb|invscrollbind|invscs|invsecure|invsft|invshellslash|invshelltemp|invshiftround|invshortname|invshowcmd|invshowfulltag|invshowmatch|invshowmode|invsi|invsm|invsmartcase|invsmartindent|invsmarttab|invsmd|invsn|invsol|invspell|invsplitbelow|invsplitright|invspr|invsr|invssl|invsta|invstartofline|invstmp|invswapfile|invswf|invta|invtagbsearch|invtagrelative|invtagstack|invtbi|invtbidi|invtbs|invtermbidi|invterse|invtextauto|invtextmode|invtf|invtgst|invtildeop|invtimeout|invtitle|invto|invtop|invtr|invttimeout|invttybuiltin|invttyfast|invtx|invvb|invvisualbell|invwa|invwarn|invwb|invweirdinvert|invwfh|invwfw|invwildmenu|invwinfixheight|invwinfixwidth|invwiv|invwmnu|invwrap|invwrapscan|invwrite|invwriteany|invwritebackup|invws|isf|isfname|isi|isident|isk|iskeyword|isprint|joinspaces|js|key|keymap|keymodel|keywordprg|km|kmp|kp|langmap|langmenu|laststatus|lazyredraw|lbr|lcs|linebreak|lines|linespace|lisp|lispwords|listchars|loadplugins|lpl|lsp|lz|macatsui|magic|makeef|makeprg|matchpairs|matchtime|maxcombine|maxfuncdepth|maxmapdepth|maxmem|maxmempattern|maxmemtot|mco|mef|menuitems|mfd|mh|mis|mkspellmem|ml|mls|mm|mmd|mmp|mmt|modeline|modelines|modifiable|modified|more|mouse|mousef|mousefocus|mousehide|mousem|mousemodel|mouses|mouseshape|mouset|mousetime|mp|mps|msm|mzq|mzquantum|nf|noacd|noai|noakm|noallowrevins|noaltkeymap|noanti|noantialias|noar|noarab|noarabic|noarabicshape|noari|noarshape|noautochdir|noautoindent|noautoread|noautowrite|noautowriteall|noaw|noawa|nobackup|noballooneval|nobeval|nobin|nobinary|nobiosk|nobioskey|nobk|nobl|nobomb|nobuflisted|nocf|noci|nocin|nocindent|nocompatible|noconfirm|noconsk|noconskey|nocopyindent|nocp|nocscopetag|nocscopeverbose|nocst|nocsverb|nocuc|nocul|nocursorcolumn|nocursorline|nodeco|nodelcombine|nodg|nodiff|nodigraph|nodisable|noea|noeb|noed|noedcompatible|noek|noendofline|noeol|noequalalways|noerrorbells|noesckeys|noet|noex|noexpandtab|noexrc|nofen|nofk|nofkmap|nofoldenable|nogd|nogdefault|noguipty|nohid|nohidden|nohk|nohkmap|nohkmapp|nohkp|nohls|noic|noicon|noignorecase|noim|noimc|noimcmdline|noimd|noincsearch|noinf|noinfercase|noinsertmode|nois|nojoinspaces|nojs|nolazyredraw|nolbr|nolinebreak|nolisp|nolist|noloadplugins|nolpl|nolz|noma|nomacatsui|nomagic|nomh|noml|nomod|nomodeline|nomodifiable|nomodified|nomore|nomousef|nomousefocus|nomousehide|nonu|nonumber|noodev|noopendevice|nopaste|nopi|nopreserveindent|nopreviewwindow|noprompt|nopvw|noreadonly|noremap|norestorescreen|norevins|nori|norightleft|norightleftcmd|norl|norlc|noro|nors|noru|noruler|nosb|nosc|noscb|noscrollbind|noscs|nosecure|nosft|noshellslash|noshelltemp|noshiftround|noshortname|noshowcmd|noshowfulltag|noshowmatch|noshowmode|nosi|nosm|nosmartcase|nosmartindent|nosmarttab|nosmd|nosn|nosol|nospell|nosplitbelow|nosplitright|nospr|nosr|nossl|nosta|nostartofline|nostmp|noswapfile|noswf|nota|notagbsearch|notagrelative|notagstack|notbi|notbidi|notbs|notermbidi|noterse|notextauto|notextmode|notf|notgst|notildeop|notimeout|notitle|noto|notop|notr|nottimeout|nottybuiltin|nottyfast|notx|novb|novisualbell|nowa|nowarn|nowb|noweirdinvert|nowfh|nowfw|nowildmenu|nowinfixheight|nowinfixwidth|nowiv|nowmnu|nowrap|nowrapscan|nowrite|nowriteany|nowritebackup|nows|nrformats|numberwidth|nuw|odev|oft|ofu|omnifunc|opendevice|operatorfunc|opfunc|osfiletype|pa|para|paragraphs|paste|pastetoggle|patchexpr|patchmode|path|pdev|penc|pex|pexpr|pfn|ph|pheader|pi|pm|pmbcs|pmbfn|popt|preserveindent|previewheight|previewwindow|printdevice|printencoding|printexpr|printfont|printheader|printmbcharset|printmbfont|printoptions|prompt|pt|pumheight|pvh|pvw|qe|quoteescape|readonly|remap|report|restorescreen|revins|rightleft|rightleftcmd|rl|rlc|ro|rs|rtp|ruf|ruler|rulerformat|runtimepath|sbo|sc|scb|scr|scroll|scrollbind|scrolljump|scrolloff|scrollopt|scs|sect|sections|secure|sel|selection|selectmode|sessionoptions|sft|shcf|shellcmdflag|shellpipe|shellquote|shellredir|shellslash|shelltemp|shelltype|shellxquote|shiftround|shiftwidth|shm|shortmess|shortname|showbreak|showcmd|showfulltag|showmatch|showmode|showtabline|shq|si|sidescroll|sidescrolloff|siso|sj|slm|smartcase|smartindent|smarttab|smc|smd|softtabstop|sol|spc|spell|spellcapcheck|spellfile|spelllang|spellsuggest|spf|spl|splitbelow|splitright|sps|sr|srr|ss|ssl|ssop|stal|startofline|statusline|stl|stmp|su|sua|suffixes|suffixesadd|sw|swapfile|swapsync|swb|swf|switchbuf|sws|sxq|syn|synmaxcol|syntax|t_AB|t_AF|t_AL|t_CS|t_CV|t_Ce|t_Co|t_Cs|t_DL|t_EI|t_F1|t_F2|t_F3|t_F4|t_F5|t_F6|t_F7|t_F8|t_F9|t_IE|t_IS|t_K1|t_K3|t_K4|t_K5|t_K6|t_K7|t_K8|t_K9|t_KA|t_KB|t_KC|t_KD|t_KE|t_KF|t_KG|t_KH|t_KI|t_KJ|t_KK|t_KL|t_RI|t_RV|t_SI|t_Sb|t_Sf|t_WP|t_WS|t_ZH|t_ZR|t_al|t_bc|t_cd|t_ce|t_cl|t_cm|t_cs|t_da|t_db|t_dl|t_fs|t_k1|t_k2|t_k3|t_k4|t_k5|t_k6|t_k7|t_k8|t_k9|t_kB|t_kD|t_kI|t_kN|t_kP|t_kb|t_kd|t_ke|t_kh|t_kl|t_kr|t_ks|t_ku|t_le|t_mb|t_md|t_me|t_mr|t_ms|t_nd|t_op|t_se|t_so|t_sr|t_te|t_ti|t_ts|t_ue|t_us|t_ut|t_vb|t_ve|t_vi|t_vs|t_xs|tabline|tabpagemax|tabstop|tagbsearch|taglength|tagrelative|tagstack|tal|tb|tbi|tbidi|tbis|tbs|tenc|term|termbidi|termencoding|terse|textauto|textmode|textwidth|tgst|thesaurus|tildeop|timeout|timeoutlen|title|titlelen|titleold|titlestring|toolbar|toolbariconsize|top|tpm|tsl|tsr|ttimeout|ttimeoutlen|ttm|tty|ttybuiltin|ttyfast|ttym|ttymouse|ttyscroll|ttytype|tw|tx|uc|ul|undolevels|updatecount|updatetime|ut|vb|vbs|vdir|verbosefile|vfile|viewdir|viewoptions|viminfo|virtualedit|visualbell|vop|wak|warn|wb|wc|wcm|wd|weirdinvert|wfh|wfw|whichwrap|wi|wig|wildchar|wildcharm|wildignore|wildmenu|wildmode|wildoptions|wim|winaltkeys|window|winfixheight|winfixwidth|winheight|winminheight|winminwidth|winwidth|wiv|wiw|wm|wmh|wmnu|wmw|wop|wrap|wrapmargin|wrapscan|writeany|writebackup|writedelay|ww)\\b/,\n    number: /\\b(?:0x[\\da-f]+|\\d+(?:\\.\\d+)?)\\b/i,\n    operator:\n      /\\|\\||&&|[-+.]=?|[=!](?:[=~][#?]?)?|[<>]=?[#?]?|[*\\/%?]|\\b(?:is(?:not)?)\\b/,\n    punctuation: /[{}[\\](),;:]/\n  }\n}\n","'use strict'\n\nmodule.exports = visualBasic\nvisualBasic.displayName = 'visualBasic'\nvisualBasic.aliases = []\nfunction visualBasic(Prism) {\n  Prism.languages['visual-basic'] = {\n    comment: {\n      pattern: /(?:['‘’]|REM\\b)(?:[^\\r\\n_]|_(?:\\r\\n?|\\n)?)*/i,\n      inside: {\n        keyword: /^REM/i\n      }\n    },\n    directive: {\n      pattern:\n        /#(?:Const|Else|ElseIf|End|ExternalChecksum|ExternalSource|If|Region)(?:\\b_[ \\t]*(?:\\r\\n?|\\n)|.)+/i,\n      alias: 'property',\n      greedy: true\n    },\n    string: {\n      pattern: /\\$?[\"“”](?:[\"“”]{2}|[^\"“”])*[\"“”]C?/i,\n      greedy: true\n    },\n    date: {\n      pattern:\n        /#[ \\t]*(?:\\d+([/-])\\d+\\1\\d+(?:[ \\t]+(?:\\d+[ \\t]*(?:AM|PM)|\\d+:\\d+(?::\\d+)?(?:[ \\t]*(?:AM|PM))?))?|\\d+[ \\t]*(?:AM|PM)|\\d+:\\d+(?::\\d+)?(?:[ \\t]*(?:AM|PM))?)[ \\t]*#/i,\n      alias: 'number'\n    },\n    number:\n      /(?:(?:\\b\\d+(?:\\.\\d+)?|\\.\\d+)(?:E[+-]?\\d+)?|&[HO][\\dA-F]+)(?:[FRD]|U?[ILS])?/i,\n    boolean: /\\b(?:False|Nothing|True)\\b/i,\n    keyword:\n      /\\b(?:AddHandler|AddressOf|Alias|And(?:Also)?|As|Boolean|ByRef|Byte|ByVal|Call|Case|Catch|C(?:Bool|Byte|Char|Date|Dbl|Dec|Int|Lng|Obj|SByte|Short|Sng|Str|Type|UInt|ULng|UShort)|Char|Class|Const|Continue|Currency|Date|Decimal|Declare|Default|Delegate|Dim|DirectCast|Do|Double|Each|Else(?:If)?|End(?:If)?|Enum|Erase|Error|Event|Exit|Finally|For|Friend|Function|Get(?:Type|XMLNamespace)?|Global|GoSub|GoTo|Handles|If|Implements|Imports|In|Inherits|Integer|Interface|Is|IsNot|Let|Lib|Like|Long|Loop|Me|Mod|Module|Must(?:Inherit|Override)|My(?:Base|Class)|Namespace|Narrowing|New|Next|Not(?:Inheritable|Overridable)?|Object|Of|On|Operator|Option(?:al)?|Or(?:Else)?|Out|Overloads|Overridable|Overrides|ParamArray|Partial|Private|Property|Protected|Public|RaiseEvent|ReadOnly|ReDim|RemoveHandler|Resume|Return|SByte|Select|Set|Shadows|Shared|short|Single|Static|Step|Stop|String|Structure|Sub|SyncLock|Then|Throw|To|Try|TryCast|Type|TypeOf|U(?:Integer|Long|Short)|Until|Using|Variant|Wend|When|While|Widening|With(?:Events)?|WriteOnly|Xor)\\b/i,\n    operator: /[+\\-*/\\\\^<=>&#@$%!]|\\b_(?=[ \\t]*[\\r\\n])/,\n    punctuation: /[{}().,:?]/\n  }\n  Prism.languages.vb = Prism.languages['visual-basic']\n  Prism.languages.vba = Prism.languages['visual-basic']\n}\n","'use strict'\n\nmodule.exports = warpscript\nwarpscript.displayName = 'warpscript'\nwarpscript.aliases = []\nfunction warpscript(Prism) {\n  Prism.languages.warpscript = {\n    comment: /#.*|\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,\n    string: {\n      pattern:\n        /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?:[^'\\\\\\r\\n]|\\\\.)*'|<'(?:[^\\\\']|'(?!>)|\\\\.)*'>/,\n      greedy: true\n    },\n    variable: /\\$\\S+/,\n    macro: {\n      pattern: /@\\S+/,\n      alias: 'property'\n    },\n    // WarpScript doesn't have any keywords, these are all functions under the control category\n    // https://www.warp10.io/tags/control\n    keyword:\n      /\\b(?:BREAK|CHECKMACRO|CONTINUE|CUDF|DEFINED|DEFINEDMACRO|EVAL|FAIL|FOR|FOREACH|FORSTEP|IFT|IFTE|MSGFAIL|NRETURN|RETHROW|RETURN|SWITCH|TRY|UDF|UNTIL|WHILE)\\b/,\n    number:\n      /[+-]?\\b(?:NaN|Infinity|\\d+(?:\\.\\d*)?(?:[Ee][+-]?\\d+)?|0x[\\da-fA-F]+|0b[01]+)\\b/,\n    boolean: /\\b(?:F|T|false|true)\\b/,\n    punctuation: /<%|%>|[{}[\\]()]/,\n    // Some operators from the \"operators\" category\n    // https://www.warp10.io/tags/operators\n    operator:\n      /==|&&?|\\|\\|?|\\*\\*?|>>>?|<<|[<>!~]=?|[-/%^]|\\+!?|\\b(?:AND|NOT|OR)\\b/\n  }\n}\n","'use strict'\n\nmodule.exports = wasm\nwasm.displayName = 'wasm'\nwasm.aliases = []\nfunction wasm(Prism) {\n  Prism.languages.wasm = {\n    comment: [\n      /\\(;[\\s\\S]*?;\\)/,\n      {\n        pattern: /;;.*/,\n        greedy: true\n      }\n    ],\n    string: {\n      pattern: /\"(?:\\\\[\\s\\S]|[^\"\\\\])*\"/,\n      greedy: true\n    },\n    keyword: [\n      {\n        pattern: /\\b(?:align|offset)=/,\n        inside: {\n          operator: /=/\n        }\n      },\n      {\n        pattern:\n          /\\b(?:(?:f32|f64|i32|i64)(?:\\.(?:abs|add|and|ceil|clz|const|convert_[su]\\/i(?:32|64)|copysign|ctz|demote\\/f64|div(?:_[su])?|eqz?|extend_[su]\\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|neg?|nearest|or|popcnt|promote\\/f32|reinterpret\\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|sqrt|store(?:8|16|32)?|sub|trunc(?:_[su]\\/f(?:32|64))?|wrap\\/i64|xor))?|memory\\.(?:grow|size))\\b/,\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      /\\b(?:anyfunc|block|br(?:_if|_table)?|call(?:_indirect)?|data|drop|elem|else|end|export|func|get_(?:global|local)|global|if|import|local|loop|memory|module|mut|nop|offset|param|result|return|select|set_(?:global|local)|start|table|tee_local|then|type|unreachable)\\b/\n    ],\n    variable: /\\$[\\w!#$%&'*+\\-./:<=>?@\\\\^`|~]+/,\n    number:\n      /[+-]?\\b(?:\\d(?:_?\\d)*(?:\\.\\d(?:_?\\d)*)?(?:[eE][+-]?\\d(?:_?\\d)*)?|0x[\\da-fA-F](?:_?[\\da-fA-F])*(?:\\.[\\da-fA-F](?:_?[\\da-fA-D])*)?(?:[pP][+-]?\\d(?:_?\\d)*)?)\\b|\\binf\\b|\\bnan(?::0x[\\da-fA-F](?:_?[\\da-fA-D])*)?\\b/,\n    punctuation: /[()]/\n  }\n}\n","'use strict'\n\nmodule.exports = webIdl\nwebIdl.displayName = 'webIdl'\nwebIdl.aliases = []\nfunction webIdl(Prism) {\n  ;(function (Prism) {\n    var id = /(?:\\B-|\\b_|\\b)[A-Za-z][\\w-]*(?![\\w-])/.source\n    var type =\n      '(?:' +\n      /\\b(?:unsigned\\s+)?long\\s+long(?![\\w-])/.source +\n      '|' +\n      /\\b(?:unrestricted|unsigned)\\s+[a-z]+(?![\\w-])/.source +\n      '|' +\n      /(?!(?:unrestricted|unsigned)\\b)/.source +\n      id +\n      /(?:\\s*<(?:[^<>]|<[^<>]*>)*>)?/.source +\n      ')' +\n      /(?:\\s*\\?)?/.source\n    var typeInside = {}\n    Prism.languages['web-idl'] = {\n      comment: {\n        pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,\n        greedy: true\n      },\n      string: {\n        pattern: /\"[^\"]*\"/,\n        greedy: true\n      },\n      namespace: {\n        pattern: RegExp(/(\\bnamespace\\s+)/.source + id),\n        lookbehind: true\n      },\n      'class-name': [\n        {\n          pattern:\n            /(^|[^\\w-])(?:iterable|maplike|setlike)\\s*<(?:[^<>]|<[^<>]*>)*>/,\n          lookbehind: true,\n          inside: typeInside\n        },\n        {\n          pattern: RegExp(\n            /(\\b(?:attribute|const|deleter|getter|optional|setter)\\s+)/.source +\n              type\n          ),\n          lookbehind: true,\n          inside: typeInside\n        },\n        {\n          // callback return type\n          pattern: RegExp(\n            '(' + /\\bcallback\\s+/.source + id + /\\s*=\\s*/.source + ')' + type\n          ),\n          lookbehind: true,\n          inside: typeInside\n        },\n        {\n          // typedef\n          pattern: RegExp(/(\\btypedef\\b\\s*)/.source + type),\n          lookbehind: true,\n          inside: typeInside\n        },\n        {\n          pattern: RegExp(\n            /(\\b(?:callback|dictionary|enum|interface(?:\\s+mixin)?)\\s+)(?!(?:interface|mixin)\\b)/\n              .source + id\n          ),\n          lookbehind: true\n        },\n        {\n          // inheritance\n          pattern: RegExp(/(:\\s*)/.source + id),\n          lookbehind: true\n        }, // includes and implements\n        RegExp(id + /(?=\\s+(?:implements|includes)\\b)/.source),\n        {\n          pattern: RegExp(/(\\b(?:implements|includes)\\s+)/.source + id),\n          lookbehind: true\n        },\n        {\n          // function return type, parameter types, and dictionary members\n          pattern: RegExp(\n            type +\n              '(?=' +\n              /\\s*(?:\\.{3}\\s*)?/.source +\n              id +\n              /\\s*[(),;=]/.source +\n              ')'\n          ),\n          inside: typeInside\n        }\n      ],\n      builtin:\n        /\\b(?:ArrayBuffer|BigInt64Array|BigUint64Array|ByteString|DOMString|DataView|Float32Array|Float64Array|FrozenArray|Int16Array|Int32Array|Int8Array|ObservableArray|Promise|USVString|Uint16Array|Uint32Array|Uint8Array|Uint8ClampedArray)\\b/,\n      keyword: [\n        /\\b(?:async|attribute|callback|const|constructor|deleter|dictionary|enum|getter|implements|includes|inherit|interface|mixin|namespace|null|optional|or|partial|readonly|required|setter|static|stringifier|typedef|unrestricted)\\b/, // type keywords\n        /\\b(?:any|bigint|boolean|byte|double|float|iterable|long|maplike|object|octet|record|sequence|setlike|short|symbol|undefined|unsigned|void)\\b/\n      ],\n      boolean: /\\b(?:false|true)\\b/,\n      number: {\n        pattern:\n          /(^|[^\\w-])-?(?:0x[0-9a-f]+|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?|NaN|Infinity)(?![\\w-])/i,\n        lookbehind: true\n      },\n      operator: /\\.{3}|[=:?<>-]/,\n      punctuation: /[(){}[\\].,;]/\n    }\n    for (var key in Prism.languages['web-idl']) {\n      if (key !== 'class-name') {\n        typeInside[key] = Prism.languages['web-idl'][key]\n      }\n    }\n    Prism.languages['webidl'] = Prism.languages['web-idl']\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = wiki\nwiki.displayName = 'wiki'\nwiki.aliases = []\nfunction wiki(Prism) {\n  Prism.languages.wiki = Prism.languages.extend('markup', {\n    'block-comment': {\n      pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n      lookbehind: true,\n      alias: 'comment'\n    },\n    heading: {\n      pattern: /^(=+)[^=\\r\\n].*?\\1/m,\n      inside: {\n        punctuation: /^=+|=+$/,\n        important: /.+/\n      }\n    },\n    emphasis: {\n      // TODO Multi-line\n      pattern: /('{2,5}).+?\\1/,\n      inside: {\n        'bold-italic': {\n          pattern: /(''''').+?(?=\\1)/,\n          lookbehind: true,\n          alias: ['bold', 'italic']\n        },\n        bold: {\n          pattern: /(''')[^'](?:.*?[^'])?(?=\\1)/,\n          lookbehind: true\n        },\n        italic: {\n          pattern: /('')[^'](?:.*?[^'])?(?=\\1)/,\n          lookbehind: true\n        },\n        punctuation: /^''+|''+$/\n      }\n    },\n    hr: {\n      pattern: /^-{4,}/m,\n      alias: 'punctuation'\n    },\n    url: [\n      /ISBN +(?:97[89][ -]?)?(?:\\d[ -]?){9}[\\dx]\\b|(?:PMID|RFC) +\\d+/i,\n      /\\[\\[.+?\\]\\]|\\[.+?\\]/\n    ],\n    variable: [\n      /__[A-Z]+__/, // FIXME Nested structures should be handled\n      // {{formatnum:{{#expr:{{{3}}}}}}}\n      /\\{{3}.+?\\}{3}/,\n      /\\{\\{.+?\\}\\}/\n    ],\n    symbol: [/^#redirect/im, /~{3,5}/],\n    // Handle table attrs:\n    // {|\n    // ! style=\"text-align:left;\"| Item\n    // |}\n    'table-tag': {\n      pattern: /((?:^|[|!])[|!])[^|\\r\\n]+\\|(?!\\|)/m,\n      lookbehind: true,\n      inside: {\n        'table-bar': {\n          pattern: /\\|$/,\n          alias: 'punctuation'\n        },\n        rest: Prism.languages.markup['tag'].inside\n      }\n    },\n    punctuation: /^(?:\\{\\||\\|\\}|\\|-|[*#:;!|])|\\|\\||!!/m\n  })\n  Prism.languages.insertBefore('wiki', 'tag', {\n    // Prevent highlighting inside <nowiki>, <source> and <pre> tags\n    nowiki: {\n      pattern: /<(nowiki|pre|source)\\b[^>]*>[\\s\\S]*?<\\/\\1>/i,\n      inside: {\n        tag: {\n          pattern: /<(?:nowiki|pre|source)\\b[^>]*>|<\\/(?:nowiki|pre|source)>/i,\n          inside: Prism.languages.markup['tag'].inside\n        }\n      }\n    }\n  })\n}\n","'use strict'\n\nmodule.exports = wolfram\nwolfram.displayName = 'wolfram'\nwolfram.aliases = ['mathematica', 'wl', 'nb']\nfunction wolfram(Prism) {\n  Prism.languages.wolfram = {\n    // Allow one level of nesting - note: regex taken from applescipt\n    comment: /\\(\\*(?:\\(\\*(?:[^*]|\\*(?!\\)))*\\*\\)|(?!\\(\\*)[\\s\\S])*?\\*\\)/,\n    string: {\n      pattern: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n      greedy: true\n    },\n    keyword:\n      /\\b(?:Abs|AbsArg|Accuracy|Block|Do|For|Function|If|Manipulate|Module|Nest|NestList|None|Return|Switch|Table|Which|While)\\b/,\n    context: {\n      pattern: /\\b\\w+`+\\w*/,\n      alias: 'class-name'\n    },\n    blank: {\n      pattern: /\\b\\w+_\\b/,\n      alias: 'regex'\n    },\n    'global-variable': {\n      pattern: /\\$\\w+/,\n      alias: 'variable'\n    },\n    boolean: /\\b(?:False|True)\\b/,\n    number:\n      /(?:\\b(?=\\d)|\\B(?=\\.))(?:0[bo])?(?:(?:\\d|0x[\\da-f])[\\da-f]*(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?j?\\b/i,\n    operator:\n      /\\/\\.|;|=\\.|\\^=|\\^:=|:=|<<|>>|<\\||\\|>|:>|\\|->|->|<-|@@@|@@|@|\\/@|=!=|===|==|=|\\+|-|\\^|\\[\\/-+%=\\]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,\n    punctuation: /[{}[\\];(),.:]/\n  }\n  Prism.languages.mathematica = Prism.languages.wolfram\n  Prism.languages.wl = Prism.languages.wolfram\n  Prism.languages.nb = Prism.languages.wolfram\n}\n","'use strict'\n\nmodule.exports = wren\nwren.displayName = 'wren'\nwren.aliases = []\nfunction wren(Prism) {\n  // https://wren.io/\n  Prism.languages.wren = {\n    // Multiline comments in Wren can have nested multiline comments\n    // Comments: // and /* */\n    comment: [\n      {\n        // support 3 levels of nesting\n        // regex: \\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|<self>)*\\*\\/\n        pattern:\n          /\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*))*\\*\\/)*\\*\\/)*\\*\\//,\n        greedy: true\n      },\n      {\n        pattern: /(^|[^\\\\:])\\/\\/.*/,\n        lookbehind: true,\n        greedy: true\n      }\n    ],\n    // Triple quoted strings are multiline but cannot have interpolation (raw strings)\n    // Based on prism-python.js\n    'triple-quoted-string': {\n      pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n      greedy: true,\n      alias: 'string'\n    },\n    // see below\n    'string-literal': null,\n    // #!/usr/bin/env wren on the first line\n    hashbang: {\n      pattern: /^#!\\/.+/,\n      greedy: true,\n      alias: 'comment'\n    },\n    // Attributes are special keywords to add meta data to classes\n    attribute: {\n      // #! attributes are stored in class properties\n      // #!myvar = true\n      // #attributes are not stored and dismissed at compilation\n      pattern: /#!?[ \\t\\u3000]*\\w+/,\n      alias: 'keyword'\n    },\n    'class-name': [\n      {\n        // class definition\n        // class Meta {}\n        pattern: /(\\bclass\\s+)\\w+/,\n        lookbehind: true\n      }, // A class must always start with an uppercase.\n      // File.read\n      /\\b[A-Z][a-z\\d_]*\\b/\n    ],\n    // A constant can be a variable, class, property or method. Just named in all uppercase letters\n    constant: /\\b[A-Z][A-Z\\d_]*\\b/,\n    null: {\n      pattern: /\\bnull\\b/,\n      alias: 'keyword'\n    },\n    keyword:\n      /\\b(?:as|break|class|construct|continue|else|for|foreign|if|import|in|is|return|static|super|this|var|while)\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    number: /\\b(?:0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/i,\n    // Functions can be Class.method()\n    function: /\\b[a-z_]\\w*(?=\\s*[({])/i,\n    operator: /<<|>>|[=!<>]=?|&&|\\|\\||[-+*/%~^&|?:]|\\.{2,3}/,\n    punctuation: /[\\[\\](){}.,;]/\n  }\n  Prism.languages.wren['string-literal'] = {\n    // A single quote string is multiline and can have interpolation (similar to JS backticks ``)\n    pattern:\n      /(^|[^\\\\\"])\"(?:[^\\\\\"%]|\\\\[\\s\\S]|%(?!\\()|%\\((?:[^()]|\\((?:[^()]|\\([^)]*\\))*\\))*\\))*\"/,\n    lookbehind: true,\n    greedy: true,\n    inside: {\n      interpolation: {\n        // \"%(interpolation)\"\n        pattern:\n          /((?:^|[^\\\\])(?:\\\\{2})*)%\\((?:[^()]|\\((?:[^()]|\\([^)]*\\))*\\))*\\)/,\n        lookbehind: true,\n        inside: {\n          expression: {\n            pattern: /^(%\\()[\\s\\S]+(?=\\)$)/,\n            lookbehind: true,\n            inside: Prism.languages.wren\n          },\n          'interpolation-punctuation': {\n            pattern: /^%\\(|\\)$/,\n            alias: 'punctuation'\n          }\n        }\n      },\n      string: /[\\s\\S]+/\n    }\n  }\n}\n","'use strict'\n\nmodule.exports = xeora\nxeora.displayName = 'xeora'\nxeora.aliases = ['xeoracube']\nfunction xeora(Prism) {\n  ;(function (Prism) {\n    Prism.languages.xeora = Prism.languages.extend('markup', {\n      constant: {\n        pattern: /\\$(?:DomainContents|PageRenderDuration)\\$/,\n        inside: {\n          punctuation: {\n            pattern: /\\$/\n          }\n        }\n      },\n      variable: {\n        pattern: /\\$@?(?:#+|[-+*~=^])?[\\w.]+\\$/,\n        inside: {\n          punctuation: {\n            pattern: /[$.]/\n          },\n          operator: {\n            pattern: /#+|[-+*~=^@]/\n          }\n        }\n      },\n      'function-inline': {\n        pattern:\n          /\\$F:[-\\w.]+\\?[-\\w.]+(?:,(?:(?:@[-#]*\\w+\\.[\\w+.]\\.*)*\\|)*(?:(?:[\\w+]|[-#*.~^]+[\\w+]|=\\S)(?:[^$=]|=+[^=])*=*|(?:@[-#]*\\w+\\.[\\w+.]\\.*)+(?:(?:[\\w+]|[-#*~^][-#*.~^]*[\\w+]|=\\S)(?:[^$=]|=+[^=])*=*)?)?)?\\$/,\n        inside: {\n          variable: {\n            pattern: /(?:[,|])@?(?:#+|[-+*~=^])?[\\w.]+/,\n            inside: {\n              punctuation: {\n                pattern: /[,.|]/\n              },\n              operator: {\n                pattern: /#+|[-+*~=^@]/\n              }\n            }\n          },\n          punctuation: {\n            pattern: /\\$\\w:|[$:?.,|]/\n          }\n        },\n        alias: 'function'\n      },\n      'function-block': {\n        pattern:\n          /\\$XF:\\{[-\\w.]+\\?[-\\w.]+(?:,(?:(?:@[-#]*\\w+\\.[\\w+.]\\.*)*\\|)*(?:(?:[\\w+]|[-#*.~^]+[\\w+]|=\\S)(?:[^$=]|=+[^=])*=*|(?:@[-#]*\\w+\\.[\\w+.]\\.*)+(?:(?:[\\w+]|[-#*~^][-#*.~^]*[\\w+]|=\\S)(?:[^$=]|=+[^=])*=*)?)?)?\\}:XF\\$/,\n        inside: {\n          punctuation: {\n            pattern: /[$:{}?.,|]/\n          }\n        },\n        alias: 'function'\n      },\n      'directive-inline': {\n        pattern: /\\$\\w(?:#\\d+\\+?)?(?:\\[[-\\w.]+\\])?:[-\\/\\w.]+\\$/,\n        inside: {\n          punctuation: {\n            pattern: /\\$(?:\\w:|C(?:\\[|#\\d))?|[:{[\\]]/,\n            inside: {\n              tag: {\n                pattern: /#\\d/\n              }\n            }\n          }\n        },\n        alias: 'function'\n      },\n      'directive-block-open': {\n        pattern:\n          /\\$\\w+:\\{|\\$\\w(?:#\\d+\\+?)?(?:\\[[-\\w.]+\\])?:[-\\w.]+:\\{(?:![A-Z]+)?/,\n        inside: {\n          punctuation: {\n            pattern: /\\$(?:\\w:|C(?:\\[|#\\d))?|[:{[\\]]/,\n            inside: {\n              tag: {\n                pattern: /#\\d/\n              }\n            }\n          },\n          attribute: {\n            pattern: /![A-Z]+$/,\n            inside: {\n              punctuation: {\n                pattern: /!/\n              }\n            },\n            alias: 'keyword'\n          }\n        },\n        alias: 'function'\n      },\n      'directive-block-separator': {\n        pattern: /\\}:[-\\w.]+:\\{/,\n        inside: {\n          punctuation: {\n            pattern: /[:{}]/\n          }\n        },\n        alias: 'function'\n      },\n      'directive-block-close': {\n        pattern: /\\}:[-\\w.]+\\$/,\n        inside: {\n          punctuation: {\n            pattern: /[:{}$]/\n          }\n        },\n        alias: 'function'\n      }\n    })\n    Prism.languages.insertBefore(\n      'inside',\n      'punctuation',\n      {\n        variable: Prism.languages.xeora['function-inline'].inside['variable']\n      },\n      Prism.languages.xeora['function-block']\n    )\n    Prism.languages.xeoracube = Prism.languages.xeora\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = xmlDoc\nxmlDoc.displayName = 'xmlDoc'\nxmlDoc.aliases = []\nfunction xmlDoc(Prism) {\n  ;(function (Prism) {\n    /**\n     * If the given language is present, it will insert the given doc comment grammar token into it.\n     *\n     * @param {string} lang\n     * @param {any} docComment\n     */\n    function insertDocComment(lang, docComment) {\n      if (Prism.languages[lang]) {\n        Prism.languages.insertBefore(lang, 'comment', {\n          'doc-comment': docComment\n        })\n      }\n    }\n    var tag = Prism.languages.markup.tag\n    var slashDocComment = {\n      pattern: /\\/\\/\\/.*/,\n      greedy: true,\n      alias: 'comment',\n      inside: {\n        tag: tag\n      }\n    }\n    var tickDocComment = {\n      pattern: /'''.*/,\n      greedy: true,\n      alias: 'comment',\n      inside: {\n        tag: tag\n      }\n    }\n    insertDocComment('csharp', slashDocComment)\n    insertDocComment('fsharp', slashDocComment)\n    insertDocComment('vbnet', tickDocComment)\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = xojo\nxojo.displayName = 'xojo'\nxojo.aliases = []\nfunction xojo(Prism) {\n  Prism.languages.xojo = {\n    comment: {\n      pattern: /(?:'|\\/\\/|Rem\\b).+/i,\n      greedy: true\n    },\n    string: {\n      pattern: /\"(?:\"\"|[^\"])*\"/,\n      greedy: true\n    },\n    number: [/(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:E[+-]?\\d+)?/i, /&[bchou][a-z\\d]+/i],\n    directive: {\n      pattern: /#(?:Else|ElseIf|Endif|If|Pragma)\\b/i,\n      alias: 'property'\n    },\n    keyword:\n      /\\b(?:AddHandler|App|Array|As(?:signs)?|Auto|Boolean|Break|By(?:Ref|Val)|Byte|Call|Case|Catch|CFStringRef|CGFloat|Class|Color|Const|Continue|CString|Currency|CurrentMethodName|Declare|Delegate|Dim|Do(?:uble|wnTo)?|Each|Else(?:If)?|End|Enumeration|Event|Exception|Exit|Extends|False|Finally|For|Function|Get|GetTypeInfo|Global|GOTO|If|Implements|In|Inherits|Int(?:8|16|32|64|eger|erface)?|Lib|Loop|Me|Module|Next|Nil|Object|Optional|OSType|ParamArray|Private|Property|Protected|PString|Ptr|Raise(?:Event)?|ReDim|RemoveHandler|Return|Select(?:or)?|Self|Set|Shared|Short|Single|Soft|Static|Step|String|Sub|Super|Text|Then|To|True|Try|Ubound|UInt(?:8|16|32|64|eger)?|Until|Using|Var(?:iant)?|Wend|While|WindowPtr|WString)\\b/i,\n    operator:\n      /<[=>]?|>=?|[+\\-*\\/\\\\^=]|\\b(?:AddressOf|And|Ctype|IsA?|Mod|New|Not|Or|WeakAddressOf|Xor)\\b/i,\n    punctuation: /[.,;:()]/\n  }\n}\n","'use strict'\n\nmodule.exports = xquery\nxquery.displayName = 'xquery'\nxquery.aliases = []\nfunction xquery(Prism) {\n  ;(function (Prism) {\n    Prism.languages.xquery = Prism.languages.extend('markup', {\n      'xquery-comment': {\n        pattern: /\\(:[\\s\\S]*?:\\)/,\n        greedy: true,\n        alias: 'comment'\n      },\n      string: {\n        pattern: /([\"'])(?:\\1\\1|(?!\\1)[\\s\\S])*\\1/,\n        greedy: true\n      },\n      extension: {\n        pattern: /\\(#.+?#\\)/,\n        alias: 'symbol'\n      },\n      variable: /\\$[-\\w:]+/,\n      axis: {\n        pattern:\n          /(^|[^-])(?:ancestor(?:-or-self)?|attribute|child|descendant(?:-or-self)?|following(?:-sibling)?|parent|preceding(?:-sibling)?|self)(?=::)/,\n        lookbehind: true,\n        alias: 'operator'\n      },\n      'keyword-operator': {\n        pattern:\n          /(^|[^:-])\\b(?:and|castable as|div|eq|except|ge|gt|idiv|instance of|intersect|is|le|lt|mod|ne|or|union)\\b(?=$|[^:-])/,\n        lookbehind: true,\n        alias: 'operator'\n      },\n      keyword: {\n        pattern:\n          /(^|[^:-])\\b(?:as|ascending|at|base-uri|boundary-space|case|cast as|collation|construction|copy-namespaces|declare|default|descending|else|empty (?:greatest|least)|encoding|every|external|for|function|if|import|in|inherit|lax|let|map|module|namespace|no-inherit|no-preserve|option|order(?: by|ed|ing)?|preserve|return|satisfies|schema|some|stable|strict|strip|then|to|treat as|typeswitch|unordered|validate|variable|version|where|xquery)\\b(?=$|[^:-])/,\n        lookbehind: true\n      },\n      function: /[\\w-]+(?::[\\w-]+)*(?=\\s*\\()/,\n      'xquery-element': {\n        pattern: /(element\\s+)[\\w-]+(?::[\\w-]+)*/,\n        lookbehind: true,\n        alias: 'tag'\n      },\n      'xquery-attribute': {\n        pattern: /(attribute\\s+)[\\w-]+(?::[\\w-]+)*/,\n        lookbehind: true,\n        alias: 'attr-name'\n      },\n      builtin: {\n        pattern:\n          /(^|[^:-])\\b(?:attribute|comment|document|element|processing-instruction|text|xs:(?:ENTITIES|ENTITY|ID|IDREFS?|NCName|NMTOKENS?|NOTATION|Name|QName|anyAtomicType|anyType|anyURI|base64Binary|boolean|byte|date|dateTime|dayTimeDuration|decimal|double|duration|float|gDay|gMonth|gMonthDay|gYear|gYearMonth|hexBinary|int|integer|language|long|negativeInteger|nonNegativeInteger|nonPositiveInteger|normalizedString|positiveInteger|short|string|time|token|unsigned(?:Byte|Int|Long|Short)|untyped(?:Atomic)?|yearMonthDuration))\\b(?=$|[^:-])/,\n        lookbehind: true\n      },\n      number: /\\b\\d+(?:\\.\\d+)?(?:E[+-]?\\d+)?/,\n      operator: [\n        /[+*=?|@]|\\.\\.?|:=|!=|<[=<]?|>[=>]?/,\n        {\n          pattern: /(\\s)-(?=\\s)/,\n          lookbehind: true\n        }\n      ],\n      punctuation: /[[\\](){},;:/]/\n    })\n    Prism.languages.xquery.tag.pattern =\n      /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|\\{(?!\\{)(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])+\\}|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/\n    Prism.languages.xquery['tag'].inside['attr-value'].pattern =\n      /=(?:(\"|')(?:\\\\[\\s\\S]|\\{(?!\\{)(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])+\\}|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+)/\n    Prism.languages.xquery['tag'].inside['attr-value'].inside['punctuation'] =\n      /^=\"|\"$/\n    Prism.languages.xquery['tag'].inside['attr-value'].inside['expression'] = {\n      // Allow for two levels of nesting\n      pattern: /\\{(?!\\{)(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])+\\}/,\n      inside: Prism.languages.xquery,\n      alias: 'language-xquery'\n    } // The following will handle plain text inside tags\n    var stringifyToken = function (token) {\n      if (typeof token === 'string') {\n        return token\n      }\n      if (typeof token.content === 'string') {\n        return token.content\n      }\n      return token.content.map(stringifyToken).join('')\n    }\n    var walkTokens = function (tokens) {\n      var openedTags = []\n      for (var i = 0; i < tokens.length; i++) {\n        var token = tokens[i]\n        var notTagNorBrace = false\n        if (typeof token !== 'string') {\n          if (\n            token.type === 'tag' &&\n            token.content[0] &&\n            token.content[0].type === 'tag'\n          ) {\n            // We found a tag, now find its kind\n            if (token.content[0].content[0].content === '</') {\n              // Closing tag\n              if (\n                openedTags.length > 0 &&\n                openedTags[openedTags.length - 1].tagName ===\n                  stringifyToken(token.content[0].content[1])\n              ) {\n                // Pop matching opening tag\n                openedTags.pop()\n              }\n            } else {\n              if (token.content[token.content.length - 1].content === '/>') {\n                // Autoclosed tag, ignore\n              } else {\n                // Opening tag\n                openedTags.push({\n                  tagName: stringifyToken(token.content[0].content[1]),\n                  openedBraces: 0\n                })\n              }\n            }\n          } else if (\n            openedTags.length > 0 &&\n            token.type === 'punctuation' &&\n            token.content === '{' && // Ignore `{{`\n            (!tokens[i + 1] ||\n              tokens[i + 1].type !== 'punctuation' ||\n              tokens[i + 1].content !== '{') &&\n            (!tokens[i - 1] ||\n              tokens[i - 1].type !== 'plain-text' ||\n              tokens[i - 1].content !== '{')\n          ) {\n            // Here we might have entered an XQuery expression inside a tag\n            openedTags[openedTags.length - 1].openedBraces++\n          } else if (\n            openedTags.length > 0 &&\n            openedTags[openedTags.length - 1].openedBraces > 0 &&\n            token.type === 'punctuation' &&\n            token.content === '}'\n          ) {\n            // Here we might have left an XQuery expression inside a tag\n            openedTags[openedTags.length - 1].openedBraces--\n          } else if (token.type !== 'comment') {\n            notTagNorBrace = true\n          }\n        }\n        if (notTagNorBrace || typeof token === 'string') {\n          if (\n            openedTags.length > 0 &&\n            openedTags[openedTags.length - 1].openedBraces === 0\n          ) {\n            // Here we are inside a tag, and not inside an XQuery expression.\n            // That's plain text: drop any tokens matched.\n            var plainText = stringifyToken(token) // And merge text with adjacent text\n            if (\n              i < tokens.length - 1 &&\n              (typeof tokens[i + 1] === 'string' ||\n                tokens[i + 1].type === 'plain-text')\n            ) {\n              plainText += stringifyToken(tokens[i + 1])\n              tokens.splice(i + 1, 1)\n            }\n            if (\n              i > 0 &&\n              (typeof tokens[i - 1] === 'string' ||\n                tokens[i - 1].type === 'plain-text')\n            ) {\n              plainText = stringifyToken(tokens[i - 1]) + plainText\n              tokens.splice(i - 1, 1)\n              i--\n            }\n            if (/^\\s+$/.test(plainText)) {\n              tokens[i] = plainText\n            } else {\n              tokens[i] = new Prism.Token(\n                'plain-text',\n                plainText,\n                null,\n                plainText\n              )\n            }\n          }\n        }\n        if (token.content && typeof token.content !== 'string') {\n          walkTokens(token.content)\n        }\n      }\n    }\n    Prism.hooks.add('after-tokenize', function (env) {\n      if (env.language !== 'xquery') {\n        return\n      }\n      walkTokens(env.tokens)\n    })\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = yaml\nyaml.displayName = 'yaml'\nyaml.aliases = ['yml']\nfunction yaml(Prism) {\n  ;(function (Prism) {\n    // https://yaml.org/spec/1.2/spec.html#c-ns-anchor-property\n    // https://yaml.org/spec/1.2/spec.html#c-ns-alias-node\n    var anchorOrAlias = /[*&][^\\s[\\]{},]+/ // https://yaml.org/spec/1.2/spec.html#c-ns-tag-property\n    var tag =\n      /!(?:<[\\w\\-%#;/?:@&=+$,.!~*'()[\\]]+>|(?:[a-zA-Z\\d-]*!)?[\\w\\-%#;/?:@&=+$.~*'()]+)?/ // https://yaml.org/spec/1.2/spec.html#c-ns-properties(n,c)\n    var properties =\n      '(?:' +\n      tag.source +\n      '(?:[ \\t]+' +\n      anchorOrAlias.source +\n      ')?|' +\n      anchorOrAlias.source +\n      '(?:[ \\t]+' +\n      tag.source +\n      ')?)' // https://yaml.org/spec/1.2/spec.html#ns-plain(n,c)\n    // This is a simplified version that doesn't support \"#\" and multiline keys\n    // All these long scarry character classes are simplified versions of YAML's characters\n    var plainKey =\n      /(?:[^\\s\\x00-\\x08\\x0e-\\x1f!\"#%&'*,\\-:>?@[\\]`{|}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]|[?:-]<PLAIN>)(?:[ \\t]*(?:(?![#:])<PLAIN>|:<PLAIN>))*/.source.replace(\n        /<PLAIN>/g,\n        function () {\n          return /[^\\s\\x00-\\x08\\x0e-\\x1f,[\\]{}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]/\n            .source\n        }\n      )\n    var string = /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?:[^'\\\\\\r\\n]|\\\\.)*'/.source\n    /**\n     *\n     * @param {string} value\n     * @param {string} [flags]\n     * @returns {RegExp}\n     */\n    function createValuePattern(value, flags) {\n      flags = (flags || '').replace(/m/g, '') + 'm' // add m flag\n      var pattern =\n        /([:\\-,[{]\\s*(?:\\s<<prop>>[ \\t]+)?)(?:<<value>>)(?=[ \\t]*(?:$|,|\\]|\\}|(?:[\\r\\n]\\s*)?#))/.source\n          .replace(/<<prop>>/g, function () {\n            return properties\n          })\n          .replace(/<<value>>/g, function () {\n            return value\n          })\n      return RegExp(pattern, flags)\n    }\n    Prism.languages.yaml = {\n      scalar: {\n        pattern: RegExp(\n          /([\\-:]\\s*(?:\\s<<prop>>[ \\t]+)?[|>])[ \\t]*(?:((?:\\r?\\n|\\r)[ \\t]+)\\S[^\\r\\n]*(?:\\2[^\\r\\n]+)*)/.source.replace(\n            /<<prop>>/g,\n            function () {\n              return properties\n            }\n          )\n        ),\n        lookbehind: true,\n        alias: 'string'\n      },\n      comment: /#.*/,\n      key: {\n        pattern: RegExp(\n          /((?:^|[:\\-,[{\\r\\n?])[ \\t]*(?:<<prop>>[ \\t]+)?)<<key>>(?=\\s*:\\s)/.source\n            .replace(/<<prop>>/g, function () {\n              return properties\n            })\n            .replace(/<<key>>/g, function () {\n              return '(?:' + plainKey + '|' + string + ')'\n            })\n        ),\n        lookbehind: true,\n        greedy: true,\n        alias: 'atrule'\n      },\n      directive: {\n        pattern: /(^[ \\t]*)%.+/m,\n        lookbehind: true,\n        alias: 'important'\n      },\n      datetime: {\n        pattern: createValuePattern(\n          /\\d{4}-\\d\\d?-\\d\\d?(?:[tT]|[ \\t]+)\\d\\d?:\\d{2}:\\d{2}(?:\\.\\d*)?(?:[ \\t]*(?:Z|[-+]\\d\\d?(?::\\d{2})?))?|\\d{4}-\\d{2}-\\d{2}|\\d\\d?:\\d{2}(?::\\d{2}(?:\\.\\d*)?)?/\n            .source\n        ),\n        lookbehind: true,\n        alias: 'number'\n      },\n      boolean: {\n        pattern: createValuePattern(/false|true/.source, 'i'),\n        lookbehind: true,\n        alias: 'important'\n      },\n      null: {\n        pattern: createValuePattern(/null|~/.source, 'i'),\n        lookbehind: true,\n        alias: 'important'\n      },\n      string: {\n        pattern: createValuePattern(string),\n        lookbehind: true,\n        greedy: true\n      },\n      number: {\n        pattern: createValuePattern(\n          /[+-]?(?:0x[\\da-f]+|0o[0-7]+|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?|\\.inf|\\.nan)/\n            .source,\n          'i'\n        ),\n        lookbehind: true\n      },\n      tag: tag,\n      important: anchorOrAlias,\n      punctuation: /---|[:[\\]{}\\-,|>?]|\\.\\.\\./\n    }\n    Prism.languages.yml = Prism.languages.yaml\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = yang\nyang.displayName = 'yang'\nyang.aliases = []\nfunction yang(Prism) {\n  Prism.languages.yang = {\n    // https://tools.ietf.org/html/rfc6020#page-34\n    // http://www.yang-central.org/twiki/bin/view/Main/YangExamples\n    comment: /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*/,\n    string: {\n      pattern: /\"(?:[^\\\\\"]|\\\\.)*\"|'[^']*'/,\n      greedy: true\n    },\n    keyword: {\n      pattern: /(^|[{};\\r\\n][ \\t]*)[a-z_][\\w.-]*/i,\n      lookbehind: true\n    },\n    namespace: {\n      pattern: /(\\s)[a-z_][\\w.-]*(?=:)/i,\n      lookbehind: true\n    },\n    boolean: /\\b(?:false|true)\\b/,\n    operator: /\\+/,\n    punctuation: /[{};:]/\n  }\n}\n","'use strict'\n\nmodule.exports = zig\nzig.displayName = 'zig'\nzig.aliases = []\nfunction zig(Prism) {\n  ;(function (Prism) {\n    function literal(str) {\n      return function () {\n        return str\n      }\n    }\n    var keyword =\n      /\\b(?:align|allowzero|and|anyframe|anytype|asm|async|await|break|cancel|catch|comptime|const|continue|defer|else|enum|errdefer|error|export|extern|fn|for|if|inline|linksection|nakedcc|noalias|nosuspend|null|or|orelse|packed|promise|pub|resume|return|stdcallcc|struct|suspend|switch|test|threadlocal|try|undefined|union|unreachable|usingnamespace|var|volatile|while)\\b/\n    var IDENTIFIER = '\\\\b(?!' + keyword.source + ')(?!\\\\d)\\\\w+\\\\b'\n    var ALIGN = /align\\s*\\((?:[^()]|\\([^()]*\\))*\\)/.source\n    var PREFIX_TYPE_OP =\n      /(?:\\?|\\bpromise->|(?:\\[[^[\\]]*\\]|\\*(?!\\*)|\\*\\*)(?:\\s*<ALIGN>|\\s*const\\b|\\s*volatile\\b|\\s*allowzero\\b)*)/.source.replace(\n        /<ALIGN>/g,\n        literal(ALIGN)\n      )\n    var SUFFIX_EXPR =\n      /(?:\\bpromise\\b|(?:\\berror\\.)?<ID>(?:\\.<ID>)*(?!\\s+<ID>))/.source.replace(\n        /<ID>/g,\n        literal(IDENTIFIER)\n      )\n    var TYPE =\n      '(?!\\\\s)(?:!?\\\\s*(?:' + PREFIX_TYPE_OP + '\\\\s*)*' + SUFFIX_EXPR + ')+'\n    /*\n     * A simplified grammar for Zig compile time type literals:\n     *\n     * TypeExpr = ( \"!\"? PREFIX_TYPE_OP* SUFFIX_EXPR )+\n     *\n     * SUFFIX_EXPR = ( \\b \"promise\" \\b | ( \\b \"error\" \".\" )? IDENTIFIER ( \".\" IDENTIFIER )* (?! \\s+ IDENTIFIER ) )\n     *\n     * PREFIX_TYPE_OP = \"?\"\n     *                | \\b \"promise\" \"->\"\n     *                | ( \"[\" [^\\[\\]]* \"]\" | \"*\" | \"**\" ) ( ALIGN | \"const\" \\b | \"volatile\" \\b | \"allowzero\" \\b )*\n     *\n     * ALIGN = \"align\" \"(\" ( [^()] | \"(\" [^()]* \")\" )* \")\"\n     *\n     * IDENTIFIER = \\b (?! KEYWORD ) [a-zA-Z_] \\w* \\b\n     *\n     */\n    Prism.languages.zig = {\n      comment: [\n        {\n          pattern: /\\/\\/[/!].*/,\n          alias: 'doc-comment'\n        },\n        /\\/{2}.*/\n      ],\n      string: [\n        {\n          // \"string\" and c\"string\"\n          pattern: /(^|[^\\\\@])c?\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"/,\n          lookbehind: true,\n          greedy: true\n        },\n        {\n          // multiline strings and c-strings\n          pattern: /([\\r\\n])([ \\t]+c?\\\\{2}).*(?:(?:\\r\\n?|\\n)\\2.*)*/,\n          lookbehind: true,\n          greedy: true\n        }\n      ],\n      char: {\n        // characters 'a', '\\n', '\\xFF', '\\u{10FFFF}'\n        pattern:\n          /(^|[^\\\\])'(?:[^'\\\\\\r\\n]|[\\uD800-\\uDFFF]{2}|\\\\(?:.|x[a-fA-F\\d]{2}|u\\{[a-fA-F\\d]{1,6}\\}))'/,\n        lookbehind: true,\n        greedy: true\n      },\n      builtin: /\\B@(?!\\d)\\w+(?=\\s*\\()/,\n      label: {\n        pattern:\n          /(\\b(?:break|continue)\\s*:\\s*)\\w+\\b|\\b(?!\\d)\\w+\\b(?=\\s*:\\s*(?:\\{|while\\b))/,\n        lookbehind: true\n      },\n      'class-name': [\n        // const Foo = struct {};\n        /\\b(?!\\d)\\w+(?=\\s*=\\s*(?:(?:extern|packed)\\s+)?(?:enum|struct|union)\\s*[({])/,\n        {\n          // const x: i32 = 9;\n          // var x: Bar;\n          // fn foo(x: bool, y: f32) void {}\n          pattern: RegExp(\n            /(:\\s*)<TYPE>(?=\\s*(?:<ALIGN>\\s*)?[=;,)])|<TYPE>(?=\\s*(?:<ALIGN>\\s*)?\\{)/.source\n              .replace(/<TYPE>/g, literal(TYPE))\n              .replace(/<ALIGN>/g, literal(ALIGN))\n          ),\n          lookbehind: true,\n          inside: null // see below\n        },\n        {\n          // extern fn foo(x: f64) f64; (optional alignment)\n          pattern: RegExp(\n            /(\\)\\s*)<TYPE>(?=\\s*(?:<ALIGN>\\s*)?;)/.source\n              .replace(/<TYPE>/g, literal(TYPE))\n              .replace(/<ALIGN>/g, literal(ALIGN))\n          ),\n          lookbehind: true,\n          inside: null // see below\n        }\n      ],\n      'builtin-type': {\n        pattern:\n          /\\b(?:anyerror|bool|c_u?(?:int|long|longlong|short)|c_longdouble|c_void|comptime_(?:float|int)|f(?:16|32|64|128)|[iu](?:8|16|32|64|128|size)|noreturn|type|void)\\b/,\n        alias: 'keyword'\n      },\n      keyword: keyword,\n      function: /\\b(?!\\d)\\w+(?=\\s*\\()/,\n      number:\n        /\\b(?:0b[01]+|0o[0-7]+|0x[a-fA-F\\d]+(?:\\.[a-fA-F\\d]*)?(?:[pP][+-]?[a-fA-F\\d]+)?|\\d+(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)\\b/,\n      boolean: /\\b(?:false|true)\\b/,\n      operator:\n        /\\.[*?]|\\.{2,3}|[-=]>|\\*\\*|\\+\\+|\\|\\||(?:<<|>>|[-+*]%|[-+*/%^&|<>!=])=?|[?~]/,\n      punctuation: /[.:,;(){}[\\]]/\n    }\n    Prism.languages.zig['class-name'].forEach(function (obj) {\n      if (obj.inside === null) {\n        obj.inside = Prism.languages.zig\n      }\n    })\n  })(Prism)\n}\n","'use strict'\n\nexports.parse = parse\nexports.stringify = stringify\n\nvar empty = ''\nvar space = ' '\nvar whiteSpace = /[ \\t\\n\\r\\f]+/g\n\nfunction parse(value) {\n  var input = String(value || empty).trim()\n  return input === empty ? [] : input.split(whiteSpace)\n}\n\nfunction stringify(values) {\n  return values.join(space).trim()\n}\n","var parse = require('inline-style-parser');\n\n/**\n * Parses inline style to object.\n *\n * @example\n * // returns { 'line-height': '42' }\n * StyleToObject('line-height: 42;');\n *\n * @param  {String}      style      - The inline style.\n * @param  {Function}    [iterator] - The iterator function.\n * @return {null|Object}\n */\nfunction StyleToObject(style, iterator) {\n  var output = null;\n  if (!style || typeof style !== 'string') {\n    return output;\n  }\n\n  var declaration;\n  var declarations = parse(style);\n  var hasIterator = typeof iterator === 'function';\n  var property;\n  var value;\n\n  for (var i = 0, len = declarations.length; i < len; i++) {\n    declaration = declarations[i];\n    property = declaration.property;\n    value = declaration.value;\n\n    if (hasIterator) {\n      iterator(property, value, declaration);\n    } else if (value) {\n      output || (output = {});\n      output[property] = value;\n    }\n  }\n\n  return output;\n}\n\nmodule.exports = StyleToObject;\nmodule.exports.default = StyleToObject; // ESM support\n","'use strict';\nmodule.exports = {\n\tstdout: false,\n\tstderr: false\n};\n","module.exports = extend\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction extend() {\n    var target = {}\n\n    for (var i = 0; i < arguments.length; i++) {\n        var source = arguments[i]\n\n        for (var key in source) {\n            if (hasOwnProperty.call(source, key)) {\n                target[key] = source[key]\n            }\n        }\n    }\n\n    return target\n}\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.codeFrameColumns = codeFrameColumns;\nexports.default = _default;\nvar _highlight = require(\"@babel/highlight\");\nvar _picocolors = _interopRequireWildcard(require(\"picocolors\"), true);\nfunction _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }\nfunction _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\nconst colors = typeof process === \"object\" && (process.env.FORCE_COLOR === \"0\" || process.env.FORCE_COLOR === \"false\") ? (0, _picocolors.createColors)(false) : _picocolors.default;\nconst compose = (f, g) => v => f(g(v));\nlet pcWithForcedColor = undefined;\nfunction getColors(forceColor) {\n  if (forceColor) {\n    var _pcWithForcedColor;\n    (_pcWithForcedColor = pcWithForcedColor) != null ? _pcWithForcedColor : pcWithForcedColor = (0, _picocolors.createColors)(true);\n    return pcWithForcedColor;\n  }\n  return colors;\n}\nlet deprecationWarningShown = false;\nfunction getDefs(colors) {\n  return {\n    gutter: colors.gray,\n    marker: compose(colors.red, colors.bold),\n    message: compose(colors.red, colors.bold)\n  };\n}\nconst NEWLINE = /\\r\\n|[\\n\\r\\u2028\\u2029]/;\nfunction getMarkerLines(loc, source, opts) {\n  const startLoc = Object.assign({\n    column: 0,\n    line: -1\n  }, loc.start);\n  const endLoc = Object.assign({}, startLoc, loc.end);\n  const {\n    linesAbove = 2,\n    linesBelow = 3\n  } = opts || {};\n  const startLine = startLoc.line;\n  const startColumn = startLoc.column;\n  const endLine = endLoc.line;\n  const endColumn = endLoc.column;\n  let start = Math.max(startLine - (linesAbove + 1), 0);\n  let end = Math.min(source.length, endLine + linesBelow);\n  if (startLine === -1) {\n    start = 0;\n  }\n  if (endLine === -1) {\n    end = source.length;\n  }\n  const lineDiff = endLine - startLine;\n  const markerLines = {};\n  if (lineDiff) {\n    for (let i = 0; i <= lineDiff; i++) {\n      const lineNumber = i + startLine;\n      if (!startColumn) {\n        markerLines[lineNumber] = true;\n      } else if (i === 0) {\n        const sourceLength = source[lineNumber - 1].length;\n        markerLines[lineNumber] = [startColumn, sourceLength - startColumn + 1];\n      } else if (i === lineDiff) {\n        markerLines[lineNumber] = [0, endColumn];\n      } else {\n        const sourceLength = source[lineNumber - i].length;\n        markerLines[lineNumber] = [0, sourceLength];\n      }\n    }\n  } else {\n    if (startColumn === endColumn) {\n      if (startColumn) {\n        markerLines[startLine] = [startColumn, 0];\n      } else {\n        markerLines[startLine] = true;\n      }\n    } else {\n      markerLines[startLine] = [startColumn, endColumn - startColumn];\n    }\n  }\n  return {\n    start,\n    end,\n    markerLines\n  };\n}\nfunction codeFrameColumns(rawLines, loc, opts = {}) {\n  const highlighted = (opts.highlightCode || opts.forceColor) && (0, _highlight.shouldHighlight)(opts);\n  const colors = getColors(opts.forceColor);\n  const defs = getDefs(colors);\n  const maybeHighlight = (fmt, string) => {\n    return highlighted ? fmt(string) : string;\n  };\n  const lines = rawLines.split(NEWLINE);\n  const {\n    start,\n    end,\n    markerLines\n  } = getMarkerLines(loc, lines, opts);\n  const hasColumns = loc.start && typeof loc.start.column === \"number\";\n  const numberMaxWidth = String(end).length;\n  const highlightedLines = highlighted ? (0, _highlight.default)(rawLines, opts) : rawLines;\n  let frame = highlightedLines.split(NEWLINE, end).slice(start, end).map((line, index) => {\n    const number = start + 1 + index;\n    const paddedNumber = ` ${number}`.slice(-numberMaxWidth);\n    const gutter = ` ${paddedNumber} |`;\n    const hasMarker = markerLines[number];\n    const lastMarkerLine = !markerLines[number + 1];\n    if (hasMarker) {\n      let markerLine = \"\";\n      if (Array.isArray(hasMarker)) {\n        const markerSpacing = line.slice(0, Math.max(hasMarker[0] - 1, 0)).replace(/[^\\t]/g, \" \");\n        const numberOfMarkers = hasMarker[1] || 1;\n        markerLine = [\"\\n \", maybeHighlight(defs.gutter, gutter.replace(/\\d/g, \" \")), \" \", markerSpacing, maybeHighlight(defs.marker, \"^\").repeat(numberOfMarkers)].join(\"\");\n        if (lastMarkerLine && opts.message) {\n          markerLine += \" \" + maybeHighlight(defs.message, opts.message);\n        }\n      }\n      return [maybeHighlight(defs.marker, \">\"), maybeHighlight(defs.gutter, gutter), line.length > 0 ? ` ${line}` : \"\", markerLine].join(\"\");\n    } else {\n      return ` ${maybeHighlight(defs.gutter, gutter)}${line.length > 0 ? ` ${line}` : \"\"}`;\n    }\n  }).join(\"\\n\");\n  if (opts.message && !hasColumns) {\n    frame = `${\" \".repeat(numberMaxWidth + 1)}${opts.message}\\n${frame}`;\n  }\n  if (highlighted) {\n    return colors.reset(frame);\n  } else {\n    return frame;\n  }\n}\nfunction _default(rawLines, lineNumber, colNumber, opts = {}) {\n  if (!deprecationWarningShown) {\n    deprecationWarningShown = true;\n    const message = \"Passing lineNumber and colNumber is deprecated to @babel/code-frame. Please use `codeFrameColumns`.\";\n    if (process.emitWarning) {\n      process.emitWarning(message, \"DeprecationWarning\");\n    } else {\n      const deprecationError = new Error(message);\n      deprecationError.name = \"DeprecationWarning\";\n      console.warn(new Error(message));\n    }\n  }\n  colNumber = Math.max(colNumber, 0);\n  const location = {\n    start: {\n      column: colNumber,\n      line: lineNumber\n    }\n  };\n  return codeFrameColumns(rawLines, location, opts);\n}\n\n//# sourceMappingURL=index.js.map\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isIdentifierChar = isIdentifierChar;\nexports.isIdentifierName = isIdentifierName;\nexports.isIdentifierStart = isIdentifierStart;\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0cf3\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ece\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\u30fb\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\\uff65\";\nconst nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nconst nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\nconst astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 4026, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 757, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 16, 621, 2467, 541, 1507, 4938, 6, 4191];\nconst astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 81, 2, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 9, 5351, 0, 7, 14, 13835, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 983, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];\nfunction isInAstralSet(code, set) {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\nfunction isIdentifierStart(code) {\n  if (code < 65) return code === 36;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\nfunction isIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\nfunction isIdentifierName(name) {\n  let isFirst = true;\n  for (let i = 0; i < name.length; i++) {\n    let cp = name.charCodeAt(i);\n    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {\n      const trail = name.charCodeAt(++i);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    if (isFirst) {\n      isFirst = false;\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n\n//# sourceMappingURL=identifier.js.map\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"isIdentifierChar\", {\n  enumerable: true,\n  get: function () {\n    return _identifier.isIdentifierChar;\n  }\n});\nObject.defineProperty(exports, \"isIdentifierName\", {\n  enumerable: true,\n  get: function () {\n    return _identifier.isIdentifierName;\n  }\n});\nObject.defineProperty(exports, \"isIdentifierStart\", {\n  enumerable: true,\n  get: function () {\n    return _identifier.isIdentifierStart;\n  }\n});\nObject.defineProperty(exports, \"isKeyword\", {\n  enumerable: true,\n  get: function () {\n    return _keyword.isKeyword;\n  }\n});\nObject.defineProperty(exports, \"isReservedWord\", {\n  enumerable: true,\n  get: function () {\n    return _keyword.isReservedWord;\n  }\n});\nObject.defineProperty(exports, \"isStrictBindOnlyReservedWord\", {\n  enumerable: true,\n  get: function () {\n    return _keyword.isStrictBindOnlyReservedWord;\n  }\n});\nObject.defineProperty(exports, \"isStrictBindReservedWord\", {\n  enumerable: true,\n  get: function () {\n    return _keyword.isStrictBindReservedWord;\n  }\n});\nObject.defineProperty(exports, \"isStrictReservedWord\", {\n  enumerable: true,\n  get: function () {\n    return _keyword.isStrictReservedWord;\n  }\n});\nvar _identifier = require(\"./identifier.js\");\nvar _keyword = require(\"./keyword.js\");\n\n//# sourceMappingURL=index.js.map\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isKeyword = isKeyword;\nexports.isReservedWord = isReservedWord;\nexports.isStrictBindOnlyReservedWord = isStrictBindOnlyReservedWord;\nexports.isStrictBindReservedWord = isStrictBindReservedWord;\nexports.isStrictReservedWord = isStrictReservedWord;\nconst reservedWords = {\n  keyword: [\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\"],\n  strict: [\"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\"],\n  strictBind: [\"eval\", \"arguments\"]\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\nfunction isReservedWord(word, inModule) {\n  return inModule && word === \"await\" || word === \"enum\";\n}\nfunction isStrictReservedWord(word, inModule) {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\nfunction isStrictBindOnlyReservedWord(word) {\n  return reservedWordsStrictBindSet.has(word);\n}\nfunction isStrictBindReservedWord(word, inModule) {\n  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);\n}\nfunction isKeyword(word) {\n  return keywords.has(word);\n}\n\n//# sourceMappingURL=keyword.js.map\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = highlight;\nexports.shouldHighlight = shouldHighlight;\nvar _jsTokens = require(\"js-tokens\");\nvar _helperValidatorIdentifier = require(\"@babel/helper-validator-identifier\");\nvar _picocolors = _interopRequireWildcard(require(\"picocolors\"), true);\nfunction _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }\nfunction _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\nconst colors = typeof process === \"object\" && (process.env.FORCE_COLOR === \"0\" || process.env.FORCE_COLOR === \"false\") ? (0, _picocolors.createColors)(false) : _picocolors.default;\nconst compose = (f, g) => v => f(g(v));\nconst sometimesKeywords = new Set([\"as\", \"async\", \"from\", \"get\", \"of\", \"set\"]);\nfunction getDefs(colors) {\n  return {\n    keyword: colors.cyan,\n    capitalized: colors.yellow,\n    jsxIdentifier: colors.yellow,\n    punctuator: colors.yellow,\n    number: colors.magenta,\n    string: colors.green,\n    regex: colors.magenta,\n    comment: colors.gray,\n    invalid: compose(compose(colors.white, colors.bgRed), colors.bold)\n  };\n}\nconst NEWLINE = /\\r\\n|[\\n\\r\\u2028\\u2029]/;\nconst BRACKET = /^[()[\\]{}]$/;\nlet tokenize;\n{\n  const JSX_TAG = /^[a-z][\\w-]*$/i;\n  const getTokenType = function (token, offset, text) {\n    if (token.type === \"name\") {\n      if ((0, _helperValidatorIdentifier.isKeyword)(token.value) || (0, _helperValidatorIdentifier.isStrictReservedWord)(token.value, true) || sometimesKeywords.has(token.value)) {\n        return \"keyword\";\n      }\n      if (JSX_TAG.test(token.value) && (text[offset - 1] === \"<\" || text.slice(offset - 2, offset) === \"</\")) {\n        return \"jsxIdentifier\";\n      }\n      if (token.value[0] !== token.value[0].toLowerCase()) {\n        return \"capitalized\";\n      }\n    }\n    if (token.type === \"punctuator\" && BRACKET.test(token.value)) {\n      return \"bracket\";\n    }\n    if (token.type === \"invalid\" && (token.value === \"@\" || token.value === \"#\")) {\n      return \"punctuator\";\n    }\n    return token.type;\n  };\n  tokenize = function* (text) {\n    let match;\n    while (match = _jsTokens.default.exec(text)) {\n      const token = _jsTokens.matchToToken(match);\n      yield {\n        type: getTokenType(token, match.index, text),\n        value: token.value\n      };\n    }\n  };\n}\nfunction highlightTokens(defs, text) {\n  let highlighted = \"\";\n  for (const {\n    type,\n    value\n  } of tokenize(text)) {\n    const colorize = defs[type];\n    if (colorize) {\n      highlighted += value.split(NEWLINE).map(str => colorize(str)).join(\"\\n\");\n    } else {\n      highlighted += value;\n    }\n  }\n  return highlighted;\n}\nfunction shouldHighlight(options) {\n  return colors.isColorSupported || options.forceColor;\n}\nlet pcWithForcedColor = undefined;\nfunction getColors(forceColor) {\n  if (forceColor) {\n    var _pcWithForcedColor;\n    (_pcWithForcedColor = pcWithForcedColor) != null ? _pcWithForcedColor : pcWithForcedColor = (0, _picocolors.createColors)(true);\n    return pcWithForcedColor;\n  }\n  return colors;\n}\nfunction highlight(code, options = {}) {\n  if (code !== \"\" && shouldHighlight(options)) {\n    const defs = getDefs(getColors(options.forceColor));\n    return highlightTokens(defs, code);\n  } else {\n    return code;\n  }\n}\n{\n  let chalk, chalkWithForcedColor;\n  exports.getChalk = ({\n    forceColor\n  }) => {\n    var _chalk;\n    (_chalk = chalk) != null ? _chalk : chalk = require(\"chalk\");\n    if (forceColor) {\n      var _chalkWithForcedColor;\n      (_chalkWithForcedColor = chalkWithForcedColor) != null ? _chalkWithForcedColor : chalkWithForcedColor = new chalk.constructor({\n        enabled: true,\n        level: 1\n      });\n      return chalkWithForcedColor;\n    }\n    return chalk;\n  };\n}\n\n//# sourceMappingURL=index.js.map\n","\"use strict\";\n/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Allow jsx-runtime to be successfully imported from either React 17 or React 18.\n *\n * Inspired by the approach here: https://github.com/contentlayerdev/contentlayer/blob/main/packages/next-contentlayer/src/hooks/jsx-runtime.cjs\n */\nif (process.env.NODE_ENV === 'production') {\n    module.exports.jsxRuntime = require('react/jsx-runtime');\n}\nelse {\n    module.exports.jsxRuntime = require('react/jsx-dev-runtime');\n}\n","export const VOID       = -1;\nexport const PRIMITIVE  = 0;\nexport const ARRAY      = 1;\nexport const OBJECT     = 2;\nexport const DATE       = 3;\nexport const REGEXP     = 4;\nexport const MAP        = 5;\nexport const SET        = 6;\nexport const ERROR      = 7;\nexport const BIGINT     = 8;\n// export const SYMBOL = 9;\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst env = typeof self === 'object' ? self : globalThis;\n\nconst deserializer = ($, _) => {\n  const as = (out, index) => {\n    $.set(index, out);\n    return out;\n  };\n\n  const unpair = index => {\n    if ($.has(index))\n      return $.get(index);\n\n    const [type, value] = _[index];\n    switch (type) {\n      case PRIMITIVE:\n      case VOID:\n        return as(value, index);\n      case ARRAY: {\n        const arr = as([], index);\n        for (const index of value)\n          arr.push(unpair(index));\n        return arr;\n      }\n      case OBJECT: {\n        const object = as({}, index);\n        for (const [key, index] of value)\n          object[unpair(key)] = unpair(index);\n        return object;\n      }\n      case DATE:\n        return as(new Date(value), index);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as(new RegExp(source, flags), index);\n      }\n      case MAP: {\n        const map = as(new Map, index);\n        for (const [key, index] of value)\n          map.set(unpair(key), unpair(index));\n        return map;\n      }\n      case SET: {\n        const set = as(new Set, index);\n        for (const index of value)\n          set.add(unpair(index));\n        return set;\n      }\n      case ERROR: {\n        const {name, message} = value;\n        return as(new env[name](message), index);\n      }\n      case BIGINT:\n        return as(BigInt(value), index);\n      case 'BigInt':\n        return as(Object(BigInt(value)), index);\n    }\n    return as(new env[type](value), index);\n  };\n\n  return unpair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns a deserialized value from a serialized array of Records.\n * @param {Record[]} serialized a previously serialized value.\n * @returns {any}\n */\nexport const deserialize = serialized => deserializer(new Map, serialized)(0);\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst EMPTY = '';\n\nconst {toString} = {};\nconst {keys} = Object;\n\nconst typeOf = value => {\n  const type = typeof value;\n  if (type !== 'object' || !value)\n    return [PRIMITIVE, type];\n\n  const asString = toString.call(value).slice(8, -1);\n  switch (asString) {\n    case 'Array':\n      return [ARRAY, EMPTY];\n    case 'Object':\n      return [OBJECT, EMPTY];\n    case 'Date':\n      return [DATE, EMPTY];\n    case 'RegExp':\n      return [REGEXP, EMPTY];\n    case 'Map':\n      return [MAP, EMPTY];\n    case 'Set':\n      return [SET, EMPTY];\n  }\n\n  if (asString.includes('Array'))\n    return [ARRAY, asString];\n\n  if (asString.includes('Error'))\n    return [ERROR, asString];\n\n  return [OBJECT, asString];\n};\n\nconst shouldSkip = ([TYPE, type]) => (\n  TYPE === PRIMITIVE &&\n  (type === 'function' || type === 'symbol')\n);\n\nconst serializer = (strict, json, $, _) => {\n\n  const as = (out, value) => {\n    const index = _.push(out) - 1;\n    $.set(value, index);\n    return index;\n  };\n\n  const pair = value => {\n    if ($.has(value))\n      return $.get(value);\n\n    let [TYPE, type] = typeOf(value);\n    switch (TYPE) {\n      case PRIMITIVE: {\n        let entry = value;\n        switch (type) {\n          case 'bigint':\n            TYPE = BIGINT;\n            entry = value.toString();\n            break;\n          case 'function':\n          case 'symbol':\n            if (strict)\n              throw new TypeError('unable to serialize ' + type);\n            entry = null;\n            break;\n          case 'undefined':\n            return as([VOID], value);\n        }\n        return as([TYPE, entry], value);\n      }\n      case ARRAY: {\n        if (type)\n          return as([type, [...value]], value);\n  \n        const arr = [];\n        const index = as([TYPE, arr], value);\n        for (const entry of value)\n          arr.push(pair(entry));\n        return index;\n      }\n      case OBJECT: {\n        if (type) {\n          switch (type) {\n            case 'BigInt':\n              return as([type, value.toString()], value);\n            case 'Boolean':\n            case 'Number':\n            case 'String':\n              return as([type, value.valueOf()], value);\n          }\n        }\n\n        if (json && ('toJSON' in value))\n          return pair(value.toJSON());\n\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const key of keys(value)) {\n          if (strict || !shouldSkip(typeOf(value[key])))\n            entries.push([pair(key), pair(value[key])]);\n        }\n        return index;\n      }\n      case DATE:\n        return as([TYPE, value.toISOString()], value);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as([TYPE, {source, flags}], value);\n      }\n      case MAP: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const [key, entry] of value) {\n          if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))\n            entries.push([pair(key), pair(entry)]);\n        }\n        return index;\n      }\n      case SET: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const entry of value) {\n          if (strict || !shouldSkip(typeOf(entry)))\n            entries.push(pair(entry));\n        }\n        return index;\n      }\n    }\n\n    const {message} = value;\n    return as([TYPE, {name: type, message}], value);\n  };\n\n  return pair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} value a serializable value.\n * @param {{json?: boolean, lossy?: boolean}?} options an object with a `lossy` or `json` property that,\n *  if `true`, will not throw errors on incompatible types, and behave more\n *  like JSON stringify would behave. Symbol and Function will be discarded.\n * @returns {Record[]}\n */\n export const serialize = (value, {json, lossy} = {}) => {\n  const _ = [];\n  return serializer(!(json || lossy), !!json, new Map, _)(value), _;\n};\n","import {deserialize} from './deserialize.js';\nimport {serialize} from './serialize.js';\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} any a serializable value.\n * @param {{transfer?: any[], json?: boolean, lossy?: boolean}?} options an object with\n * a transfer option (ignored when polyfilled) and/or non standard fields that\n * fallback to the polyfill if present.\n * @returns {Record[]}\n */\nexport default typeof structuredClone === \"function\" ?\n  /* c8 ignore start */\n  (any, options) => (\n    options && ('json' in options || 'lossy' in options) ?\n      deserialize(serialize(any, options)) : structuredClone(any)\n  ) :\n  (any, options) => deserialize(serialize(any, options));\n  /* c8 ignore stop */\n\nexport {deserialize, serialize};\n","/**\n * Count how often a character (or substring) is used in a string.\n *\n * @param {string} value\n *   Value to search in.\n * @param {string} character\n *   Character (or substring) to look for.\n * @return {number}\n *   Number of times `character` occurred in `value`.\n */\nexport function ccount(value, character) {\n  const source = String(value)\n\n  if (typeof character !== 'string') {\n    throw new TypeError('Expected character')\n  }\n\n  let count = 0\n  let index = source.indexOf(character)\n\n  while (index !== -1) {\n    count++\n    index = source.indexOf(character, index + character.length)\n  }\n\n  return count\n}\n","export function deprecate(fn) {\n  return fn\n}\n\nexport function equal() {}\n\nexport function ok() {}\n\nexport function unreachable() {}\n","/**\n * @typedef {import('hast').Nodes} Nodes\n */\n\n/**\n * Get the rank (`1` to `6`) of headings (`h1` to `h6`).\n *\n * @param {Nodes} node\n *   Node to check.\n * @returns {number | undefined}\n *   Rank of the heading or `undefined` if not a heading.\n */\nexport function headingRank(node) {\n  const name = node.type === 'element' ? node.tagName.toLowerCase() : ''\n  const code =\n    name.length === 2 && name.charCodeAt(0) === 104 /* `h` */\n      ? name.charCodeAt(1)\n      : 0\n  return code > 48 /* `0` */ && code < 55 /* `7` */\n    ? code - 48 /* `0` */\n    : undefined\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code) ? factorySpace(effects, after, \"linePrefix\")(code) : after(code);\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {undefined}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {undefined}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {undefined}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {undefined}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef Options\n *   Configuration.\n * @property {Array<Node> | null | undefined} [ancestors]\n *   Stack of (inclusive) ancestor nodes surrounding the message (optional).\n * @property {Error | null | undefined} [cause]\n *   Original error cause of the message (optional).\n * @property {Point | Position | null | undefined} [place]\n *   Place of message (optional).\n * @property {string | null | undefined} [ruleId]\n *   Category of message (optional, example: `'my-rule'`).\n * @property {string | null | undefined} [source]\n *   Namespace of who sent the message (optional, example: `'my-package'`).\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Options | null | undefined} [options]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // eslint-disable-next-line complexity\n  constructor(causeOrReason, optionsOrParentOrPlace, origin) {\n    super()\n\n    if (typeof optionsOrParentOrPlace === 'string') {\n      origin = optionsOrParentOrPlace\n      optionsOrParentOrPlace = undefined\n    }\n\n    /** @type {string} */\n    let reason = ''\n    /** @type {Options} */\n    let options = {}\n    let legacyCause = false\n\n    if (optionsOrParentOrPlace) {\n      // Point.\n      if (\n        'line' in optionsOrParentOrPlace &&\n        'column' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Position.\n      else if (\n        'start' in optionsOrParentOrPlace &&\n        'end' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Node.\n      else if ('type' in optionsOrParentOrPlace) {\n        options = {\n          ancestors: [optionsOrParentOrPlace],\n          place: optionsOrParentOrPlace.position\n        }\n      }\n      // Options.\n      else {\n        options = {...optionsOrParentOrPlace}\n      }\n    }\n\n    if (typeof causeOrReason === 'string') {\n      reason = causeOrReason\n    }\n    // Error.\n    else if (!options.cause && causeOrReason) {\n      legacyCause = true\n      reason = causeOrReason.message\n      options.cause = causeOrReason\n    }\n\n    if (!options.ruleId && !options.source && typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        options.ruleId = origin\n      } else {\n        options.source = origin.slice(0, index)\n        options.ruleId = origin.slice(index + 1)\n      }\n    }\n\n    if (!options.place && options.ancestors && options.ancestors) {\n      const parent = options.ancestors[options.ancestors.length - 1]\n\n      if (parent) {\n        options.place = parent.position\n      }\n    }\n\n    const start =\n      options.place && 'start' in options.place\n        ? options.place.start\n        : options.place\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Stack of ancestor nodes surrounding the message.\n     *\n     * @type {Array<Node> | undefined}\n     */\n    this.ancestors = options.ancestors || undefined\n\n    /**\n     * Original error cause of the message.\n     *\n     * @type {Error | undefined}\n     */\n    this.cause = options.cause || undefined\n\n    /**\n     * Starting column of message.\n     *\n     * @type {number | undefined}\n     */\n    this.column = start ? start.column : undefined\n\n    /**\n     * State of problem.\n     *\n     * * `true` — error, file not usable\n     * * `false` — warning, change may be needed\n     * * `undefined` — change likely not needed\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal = undefined\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | undefined}\n     */\n    this.file\n\n    // Field from `Error`.\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = reason\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | undefined}\n     */\n    this.line = start ? start.line : undefined\n\n    // Field from `Error`.\n    /**\n     * Serialized positional info of message.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(options.place) || '1:1'\n\n    /**\n     * Place of message.\n     *\n     * @type {Point | Position | undefined}\n     */\n    this.place = options.place || undefined\n\n    /**\n     * Reason for message, should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | undefined}\n     */\n    this.ruleId = options.ruleId || undefined\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | undefined}\n     */\n    this.source = options.source || undefined\n\n    // Field from `Error`.\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack =\n      legacyCause && options.cause && typeof options.cause.stack === 'string'\n        ? options.cause.stack\n        : ''\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | undefined}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | undefined}\n     */\n    this.expected\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | undefined}\n     */\n    this.note\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | undefined}\n     */\n    this.url\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.column = undefined\nVFileMessage.prototype.line = undefined\nVFileMessage.prototype.ancestors = undefined\nVFileMessage.prototype.cause = undefined\nVFileMessage.prototype.fatal = undefined\nVFileMessage.prototype.place = undefined\nVFileMessage.prototype.ruleId = undefined\nVFileMessage.prototype.source = undefined\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const minpath = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | null | undefined} [extname]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, extname) {\n  if (extname !== undefined && typeof extname !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (\n    extname === undefined ||\n    extname.length === 0 ||\n    extname.length > path.length\n  ) {\n    while (index--) {\n      if (path.codePointAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (extname === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extnameIndex = extname.length - 1\n\n  while (index--) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extnameIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.codePointAt(index) === extname.codePointAt(extnameIndex--)) {\n          if (extnameIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extnameIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.codePointAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.codePointAt(0) === 47 /* `/` */\n      ? '//'\n      : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.codePointAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.codePointAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.codePointAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.codePointAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.codePointAt(result.length - 1) !== 46 /* `.` */ ||\n          result.codePointAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const minproc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * Checks if a value has the shape of a WHATWG URL object.\n *\n * Using a symbol or instanceof would not be able to recognize URL objects\n * coming from other implementations (e.g. in Electron), so instead we are\n * checking some well known properties for a lack of a better test.\n *\n * We use `href` and `protocol` as they are the only properties that are\n * easy to retrieve and calculate due to the lazy nature of the getters.\n *\n * We check for auth attribute to distinguish legacy url instance with\n * WHATWG URL instance.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js#L720>\nexport function isUrl(fileUrlOrPath) {\n  return Boolean(\n    fileUrlOrPath !== null &&\n      typeof fileUrlOrPath === 'object' &&\n      'href' in fileUrlOrPath &&\n      fileUrlOrPath.href &&\n      'protocol' in fileUrlOrPath &&\n      fileUrlOrPath.protocol &&\n      // @ts-expect-error: indexing is fine.\n      fileUrlOrPath.auth === undefined\n  )\n}\n","import {isUrl} from './minurl.shared.js'\n\nexport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js>\n\n/**\n * @param {URL | string} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.codePointAt(index) === 37 /* `%` */ &&\n      pathname.codePointAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.codePointAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n","/**\n * @import {Node, Point, Position} from 'unist'\n * @import {Options as MessageOptions} from 'vfile-message'\n * @import {Compatible, Data, Map, Options, Value} from 'vfile'\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {VFileMessage} from 'vfile-message'\nimport {minpath} from '#minpath'\nimport {minproc} from '#minproc'\nimport {urlToPath, isUrl} from '#minurl'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n */\nconst order = /** @type {const} */ ([\n  'history',\n  'path',\n  'basename',\n  'stem',\n  'extname',\n  'dirname'\n])\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Uint8Array` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else if (typeof value === 'string' || isUint8Array(value)) {\n      options = {value}\n    } else {\n      options = value\n    }\n\n    /* eslint-disable no-unused-expressions */\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    // Prevent calling `cwd` (which could be expensive) if it’s not needed;\n    // the empty string will be overridden in the next block.\n    this.cwd = 'cwd' in options ? '' : minproc.cwd()\n\n    /**\n     * Place to store custom info (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of file paths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const field = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        field in options &&\n        options[field] !== undefined &&\n        options[field] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[field] = field === 'history' ? [...options[field]] : options[field]\n      }\n    }\n\n    /** @type {string} */\n    let field\n\n    // Set non-path related properties.\n    for (field in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(field)) {\n        // @ts-expect-error: fine to set other things.\n        this[field] = options[field]\n      }\n    }\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   *\n   * @returns {string | undefined}\n   *   Basename.\n   */\n  get basename() {\n    return typeof this.path === 'string'\n      ? minpath.basename(this.path)\n      : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} basename\n   *   Basename.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = minpath.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   *\n   * @returns {string | undefined}\n   *   Dirname.\n   */\n  get dirname() {\n    return typeof this.path === 'string'\n      ? minpath.dirname(this.path)\n      : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} dirname\n   *   Dirname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = minpath.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   *\n   * @returns {string | undefined}\n   *   Extname.\n   */\n  get extname() {\n    return typeof this.path === 'string'\n      ? minpath.extname(this.path)\n      : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} extname\n   *   Extname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.codePointAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = minpath.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   *   Path.\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {URL | string} path\n   *   Path.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * @returns {string | undefined}\n   *   Stem.\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? minpath.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} stem\n   *   Stem.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = minpath.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  // Normal prototypal methods.\n  /**\n   * Create a fatal message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `true` (error; file not usable)\n   * and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Never.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n\n  /**\n   * Create an info message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `undefined` (info; change\n   * likely not needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = undefined\n\n    return message\n  }\n\n  /**\n   * Create a message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `false` (warning; change may be\n   * needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(causeOrReason, optionsOrParentOrPlace, origin) {\n    const message = new VFileMessage(\n      // @ts-expect-error: the overloads are fine.\n      causeOrReason,\n      optionsOrParentOrPlace,\n      origin\n    )\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * > **Note**: which encodings are supported depends on the engine.\n   * > For info on Node.js, see:\n   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.\n   *\n   * @param {string | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Uint8Array`\n   *   (default: `'utf-8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    if (this.value === undefined) {\n      return ''\n    }\n\n    if (typeof this.value === 'string') {\n      return this.value\n    }\n\n    const decoder = new TextDecoder(encoding || undefined)\n    return decoder.decode(this.value)\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {undefined}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(minpath.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + minpath.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","// TODO: Load the JSON file when Node.js supports that.\n\nconst markdownExtension = [\n\t'md',\n\t'markdown',\n\t'mdown',\n\t'mkdn',\n\t'mkd',\n\t'mdwn',\n\t'mkdown',\n\t'ron',\n];\n\nexport default markdownExtension;\n","import markdownExtensions from 'markdown-extensions'\n\nexport const md = markdownExtensions.map(function (d) {\n  return '.' + d\n})\nexport const mdx = ['.mdx']\n","/**\n * @typedef {import('vfile').Compatible} Compatible\n * @typedef {import('../compile.js').CompileOptions} CompileOptions\n * @typedef {import('../core.js').ProcessorOptions} ProcessorOptions\n */\n\nimport {VFile} from 'vfile'\nimport {md} from './extnames.js'\n\n/**\n * Create a file and options from a given `vfileCompatible` and options that\n * might contain `format: 'detect'`.\n *\n * @param {Readonly<Compatible>} vfileCompatible\n *   File.\n * @param {Readonly<CompileOptions> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {{file: VFile, options: ProcessorOptions}}\n *   File and options.\n */\nexport function resolveFileAndOptions(vfileCompatible, options) {\n  const file = looksLikeAVFile(vfileCompatible)\n    ? vfileCompatible\n    : new VFile(vfileCompatible)\n  const {format, ...rest} = options || {}\n  return {\n    file,\n    options: {\n      format:\n        format === 'md' || format === 'mdx'\n          ? format\n          : file.extname && (rest.mdExtensions || md).includes(file.extname)\n            ? 'md'\n            : 'mdx',\n      ...rest\n    }\n  }\n}\n\n/**\n * @param {Readonly<Compatible> | null | undefined} [value]\n *   Thing.\n * @returns {value is VFile}\n *   Check.\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n","/**\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n *\n * @typedef {import('../index.js').MdxFlowExpression} MdxFlowExpression\n * @typedef {import('../index.js').MdxTextExpression} MdxTextExpression\n */\n\nimport {ok as assert} from 'devlop'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable MDX expressions\n * in markdown.\n *\n * When using the micromark syntax extension with `addResult`, nodes will have\n * a `data.estree` field set to an ESTree `Program` node.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable MDX expressions.\n */\nexport function mdxExpressionFromMarkdown() {\n  return {\n    enter: {\n      mdxFlowExpression: enterMdxFlowExpression,\n      mdxTextExpression: enterMdxTextExpression\n    },\n    exit: {\n      mdxFlowExpression: exitMdxExpression,\n      mdxFlowExpressionChunk: exitMdxExpressionData,\n      mdxTextExpression: exitMdxExpression,\n      mdxTextExpressionChunk: exitMdxExpressionData\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable MDX expressions\n * in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable MDX expressions.\n */\nexport function mdxExpressionToMarkdown() {\n  return {\n    handlers: {\n      mdxFlowExpression: handleMdxExpression,\n      mdxTextExpression: handleMdxExpression\n    },\n    unsafe: [\n      {character: '{', inConstruct: ['phrasing']},\n      {atBreak: true, character: '{'}\n    ]\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterMdxFlowExpression(token) {\n  this.enter({type: 'mdxFlowExpression', value: ''}, token)\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterMdxTextExpression(token) {\n  this.enter({type: 'mdxTextExpression', value: ''}, token)\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitMdxExpression(token) {\n  const value = this.resume()\n  const estree = token.estree\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'mdxFlowExpression' || node.type === 'mdxTextExpression')\n  this.exit(token)\n  node.value = value\n\n  if (estree) {\n    node.data = {estree}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitMdxExpressionData(token) {\n  this.config.enter.data.call(this, token)\n  this.config.exit.data.call(this, token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {MdxFlowExpression | MdxTextExpression} node\n */\nfunction handleMdxExpression(node) {\n  const value = node.value || ''\n  return '{' + value + '}'\n}\n","/**\n * List of legacy HTML named character references that don’t need a trailing semicolon.\n *\n * @type {Array<string>}\n */\nexport const characterEntitiesLegacy = [\n  'AElig',\n  'AMP',\n  'Aacute',\n  'Acirc',\n  'Agrave',\n  'Aring',\n  'Atilde',\n  'Auml',\n  'COPY',\n  'Ccedil',\n  'ETH',\n  'Eacute',\n  'Ecirc',\n  'Egrave',\n  'Euml',\n  'GT',\n  'Iacute',\n  'Icirc',\n  'Igrave',\n  'Iuml',\n  'LT',\n  'Ntilde',\n  'Oacute',\n  'Ocirc',\n  'Ograve',\n  'Oslash',\n  'Otilde',\n  'Ouml',\n  'QUOT',\n  'REG',\n  'THORN',\n  'Uacute',\n  'Ucirc',\n  'Ugrave',\n  'Uuml',\n  'Yacute',\n  'aacute',\n  'acirc',\n  'acute',\n  'aelig',\n  'agrave',\n  'amp',\n  'aring',\n  'atilde',\n  'auml',\n  'brvbar',\n  'ccedil',\n  'cedil',\n  'cent',\n  'copy',\n  'curren',\n  'deg',\n  'divide',\n  'eacute',\n  'ecirc',\n  'egrave',\n  'eth',\n  'euml',\n  'frac12',\n  'frac14',\n  'frac34',\n  'gt',\n  'iacute',\n  'icirc',\n  'iexcl',\n  'igrave',\n  'iquest',\n  'iuml',\n  'laquo',\n  'lt',\n  'macr',\n  'micro',\n  'middot',\n  'nbsp',\n  'not',\n  'ntilde',\n  'oacute',\n  'ocirc',\n  'ograve',\n  'ordf',\n  'ordm',\n  'oslash',\n  'otilde',\n  'ouml',\n  'para',\n  'plusmn',\n  'pound',\n  'quot',\n  'raquo',\n  'reg',\n  'sect',\n  'shy',\n  'sup1',\n  'sup2',\n  'sup3',\n  'szlig',\n  'thorn',\n  'times',\n  'uacute',\n  'ucirc',\n  'ugrave',\n  'uml',\n  'uuml',\n  'yacute',\n  'yen',\n  'yuml'\n]\n","/**\n * Map of invalid numeric character references to their replacements, according to HTML.\n *\n * @type {Record<number, string>}\n */\nexport const characterReferenceInvalid = {\n  0: '�',\n  128: '€',\n  130: '‚',\n  131: 'ƒ',\n  132: '„',\n  133: '…',\n  134: '†',\n  135: '‡',\n  136: 'ˆ',\n  137: '‰',\n  138: 'Š',\n  139: '‹',\n  140: 'Œ',\n  142: 'Ž',\n  145: '‘',\n  146: '’',\n  147: '“',\n  148: '”',\n  149: '•',\n  150: '–',\n  151: '—',\n  152: '˜',\n  153: '™',\n  154: 'š',\n  155: '›',\n  156: 'œ',\n  158: 'ž',\n  159: 'Ÿ'\n}\n","/**\n * Check if the given character code, or the character code at the first\n * character, is decimal.\n *\n * @param {string|number} character\n * @returns {boolean} Whether `character` is a decimal\n */\nexport function isDecimal(character) {\n  const code =\n    typeof character === 'string' ? character.charCodeAt(0) : character\n\n  return code >= 48 && code <= 57 /* 0-9 */\n}\n","/**\n * Check if the given character code, or the character code at the first\n * character, is hexadecimal.\n *\n * @param {string|number} character\n * @returns {boolean} Whether `character` is hexadecimal\n */\nexport function isHexadecimal(character) {\n  const code =\n    typeof character === 'string' ? character.charCodeAt(0) : character\n\n  return (\n    (code >= 97 /* a */ && code <= 102) /* z */ ||\n    (code >= 65 /* A */ && code <= 70) /* Z */ ||\n    (code >= 48 /* A */ && code <= 57) /* Z */\n  )\n}\n","/**\n * Check if the given character code, or the character code at the first\n * character, is alphabetical.\n *\n * @param {string|number} character\n * @returns {boolean} Whether `character` is alphabetical.\n */\nexport function isAlphabetical(character) {\n  const code =\n    typeof character === 'string' ? character.charCodeAt(0) : character\n\n  return (\n    (code >= 97 && code <= 122) /* a-z */ ||\n    (code >= 65 && code <= 90) /* A-Z */\n  )\n}\n","import {isAlphabetical} from 'is-alphabetical'\nimport {isDecimal} from 'is-decimal'\n\n/**\n * Check if the given character code, or the character code at the first\n * character, is alphanumerical.\n *\n * @param {string|number} character\n * @returns {boolean} Whether `character` is alphanumerical.\n */\nexport function isAlphanumerical(character) {\n  return isAlphabetical(character) || isDecimal(character)\n}\n","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","/**\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\nimport {characterEntitiesLegacy} from 'character-entities-legacy'\nimport {characterReferenceInvalid} from 'character-reference-invalid'\nimport {isDecimal} from 'is-decimal'\nimport {isHexadecimal} from 'is-hexadecimal'\nimport {isAlphanumerical} from 'is-alphanumerical'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\n\nconst fromCharCode = String.fromCharCode\n\n// Warning messages.\nconst messages = [\n  '',\n  /* 1: Non terminated (named) */\n  'Named character references must be terminated by a semicolon',\n  /* 2: Non terminated (numeric) */\n  'Numeric character references must be terminated by a semicolon',\n  /* 3: Empty (named) */\n  'Named character references cannot be empty',\n  /* 4: Empty (numeric) */\n  'Numeric character references cannot be empty',\n  /* 5: Unknown (named) */\n  'Named character references must be known',\n  /* 6: Disallowed (numeric) */\n  'Numeric character references cannot be disallowed',\n  /* 7: Prohibited (numeric) */\n  'Numeric character references cannot be outside the permissible Unicode range'\n]\n\n/**\n * Parse HTML character references.\n *\n * @param {string} value\n * @param {import('../index.js').Options} [options={}]\n */\nexport function parseEntities(value, options = {}) {\n  const additional =\n    typeof options.additional === 'string'\n      ? options.additional.charCodeAt(0)\n      : options.additional\n  /** @type {Array<string>} */\n  const result = []\n  let index = 0\n  let lines = -1\n  let queue = ''\n  /** @type {Point|undefined} */\n  let point\n  /** @type {Array<number>|undefined} */\n  let indent\n\n  if (options.position) {\n    if ('start' in options.position || 'indent' in options.position) {\n      // @ts-expect-error: points don’t have indent.\n      indent = options.position.indent\n      // @ts-expect-error: points don’t have indent.\n      point = options.position.start\n    } else {\n      point = options.position\n    }\n  }\n\n  let line = (point ? point.line : 0) || 1\n  let column = (point ? point.column : 0) || 1\n\n  // Cache the current point.\n  let previous = now()\n  /** @type {number|undefined} */\n  let character\n\n  // Ensure the algorithm walks over the first character (inclusive).\n  index--\n\n  while (++index <= value.length) {\n    // If the previous character was a newline.\n    if (character === 10 /* `\\n` */) {\n      column = (indent ? indent[lines] : 0) || 1\n    }\n\n    character = value.charCodeAt(index)\n\n    if (character === 38 /* `&` */) {\n      const following = value.charCodeAt(index + 1)\n\n      // The behavior depends on the identity of the next character.\n      if (\n        following === 9 /* `\\t` */ ||\n        following === 10 /* `\\n` */ ||\n        following === 12 /* `\\f` */ ||\n        following === 32 /* ` ` */ ||\n        following === 38 /* `&` */ ||\n        following === 60 /* `<` */ ||\n        Number.isNaN(following) ||\n        (additional && following === additional)\n      ) {\n        // Not a character reference.\n        // No characters are consumed, and nothing is returned.\n        // This is not an error, either.\n        queue += fromCharCode(character)\n        column++\n        continue\n      }\n\n      const start = index + 1\n      let begin = start\n      let end = start\n      /** @type {string} */\n      let type\n\n      if (following === 35 /* `#` */) {\n        // Numerical reference.\n        end = ++begin\n\n        // The behavior further depends on the next character.\n        const following = value.charCodeAt(end)\n\n        if (following === 88 /* `X` */ || following === 120 /* `x` */) {\n          // ASCII hexadecimal digits.\n          type = 'hexadecimal'\n          end = ++begin\n        } else {\n          // ASCII decimal digits.\n          type = 'decimal'\n        }\n      } else {\n        // Named reference.\n        type = 'named'\n      }\n\n      let characterReferenceCharacters = ''\n      let characterReference = ''\n      let characters = ''\n      // Each type of character reference accepts different characters.\n      // This test is used to detect whether a reference has ended (as the semicolon\n      // is not strictly needed).\n      const test =\n        type === 'named'\n          ? isAlphanumerical\n          : type === 'decimal'\n          ? isDecimal\n          : isHexadecimal\n\n      end--\n\n      while (++end <= value.length) {\n        const following = value.charCodeAt(end)\n\n        if (!test(following)) {\n          break\n        }\n\n        characters += fromCharCode(following)\n\n        // Check if we can match a legacy named reference.\n        // If so, we cache that as the last viable named reference.\n        // This ensures we do not need to walk backwards later.\n        if (type === 'named' && characterEntitiesLegacy.includes(characters)) {\n          characterReferenceCharacters = characters\n          // @ts-expect-error: always able to decode.\n          characterReference = decodeNamedCharacterReference(characters)\n        }\n      }\n\n      let terminated = value.charCodeAt(end) === 59 /* `;` */\n\n      if (terminated) {\n        end++\n\n        const namedReference =\n          type === 'named' ? decodeNamedCharacterReference(characters) : false\n\n        if (namedReference) {\n          characterReferenceCharacters = characters\n          characterReference = namedReference\n        }\n      }\n\n      let diff = 1 + end - start\n      let reference = ''\n\n      if (!terminated && options.nonTerminated === false) {\n        // Empty.\n      } else if (!characters) {\n        // An empty (possible) reference is valid, unless it’s numeric (thus an\n        // ampersand followed by an octothorp).\n        if (type !== 'named') {\n          warning(4 /* Empty (numeric) */, diff)\n        }\n      } else if (type === 'named') {\n        // An ampersand followed by anything unknown, and not terminated, is\n        // invalid.\n        if (terminated && !characterReference) {\n          warning(5 /* Unknown (named) */, 1)\n        } else {\n          // If there’s something after an named reference which is not known,\n          // cap the reference.\n          if (characterReferenceCharacters !== characters) {\n            end = begin + characterReferenceCharacters.length\n            diff = 1 + end - begin\n            terminated = false\n          }\n\n          // If the reference is not terminated, warn.\n          if (!terminated) {\n            const reason = characterReferenceCharacters\n              ? 1 /* Non terminated (named) */\n              : 3 /* Empty (named) */\n\n            if (options.attribute) {\n              const following = value.charCodeAt(end)\n\n              if (following === 61 /* `=` */) {\n                warning(reason, diff)\n                characterReference = ''\n              } else if (isAlphanumerical(following)) {\n                characterReference = ''\n              } else {\n                warning(reason, diff)\n              }\n            } else {\n              warning(reason, diff)\n            }\n          }\n        }\n\n        reference = characterReference\n      } else {\n        if (!terminated) {\n          // All nonterminated numeric references are not rendered, and emit a\n          // warning.\n          warning(2 /* Non terminated (numeric) */, diff)\n        }\n\n        // When terminated and numerical, parse as either hexadecimal or\n        // decimal.\n        let referenceCode = Number.parseInt(\n          characters,\n          type === 'hexadecimal' ? 16 : 10\n        )\n\n        // Emit a warning when the parsed number is prohibited, and replace with\n        // replacement character.\n        if (prohibited(referenceCode)) {\n          warning(7 /* Prohibited (numeric) */, diff)\n          reference = fromCharCode(65533 /* `�` */)\n        } else if (referenceCode in characterReferenceInvalid) {\n          // Emit a warning when the parsed number is disallowed, and replace by\n          // an alternative.\n          warning(6 /* Disallowed (numeric) */, diff)\n          reference = characterReferenceInvalid[referenceCode]\n        } else {\n          // Parse the number.\n          let output = ''\n\n          // Emit a warning when the parsed number should not be used.\n          if (disallowed(referenceCode)) {\n            warning(6 /* Disallowed (numeric) */, diff)\n          }\n\n          // Serialize the number.\n          if (referenceCode > 0xffff) {\n            referenceCode -= 0x10000\n            output += fromCharCode((referenceCode >>> (10 & 0x3ff)) | 0xd800)\n            referenceCode = 0xdc00 | (referenceCode & 0x3ff)\n          }\n\n          reference = output + fromCharCode(referenceCode)\n        }\n      }\n\n      // Found it!\n      // First eat the queued characters as normal text, then eat a reference.\n      if (reference) {\n        flush()\n\n        previous = now()\n        index = end - 1\n        column += end - start + 1\n        result.push(reference)\n        const next = now()\n        next.offset++\n\n        if (options.reference) {\n          options.reference.call(\n            options.referenceContext,\n            reference,\n            {start: previous, end: next},\n            value.slice(start - 1, end)\n          )\n        }\n\n        previous = next\n      } else {\n        // If we could not find a reference, queue the checked characters (as\n        // normal characters), and move the pointer to their end.\n        // This is possible because we can be certain neither newlines nor\n        // ampersands are included.\n        characters = value.slice(start - 1, end)\n        queue += characters\n        column += characters.length\n        index = end - 1\n      }\n    } else {\n      // Handle anything other than an ampersand, including newlines and EOF.\n      if (character === 10 /* `\\n` */) {\n        line++\n        lines++\n        column = 0\n      }\n\n      if (Number.isNaN(character)) {\n        flush()\n      } else {\n        queue += fromCharCode(character)\n        column++\n      }\n    }\n  }\n\n  // Return the reduced nodes.\n  return result.join('')\n\n  // Get current position.\n  function now() {\n    return {\n      line,\n      column,\n      offset: index + ((point ? point.offset : 0) || 0)\n    }\n  }\n\n  /**\n   * Handle the warning.\n   *\n   * @param {1|2|3|4|5|6|7} code\n   * @param {number} offset\n   */\n  function warning(code, offset) {\n    /** @type {ReturnType<now>} */\n    let position\n\n    if (options.warning) {\n      position = now()\n      position.column += offset\n      position.offset += offset\n\n      options.warning.call(\n        options.warningContext,\n        messages[code],\n        position,\n        code\n      )\n    }\n  }\n\n  /**\n   * Flush `queue` (normal text).\n   * Macro invoked before each reference and at the end of `value`.\n   * Does nothing when `queue` is empty.\n   */\n  function flush() {\n    if (queue) {\n      result.push(queue)\n\n      if (options.text) {\n        options.text.call(options.textContext, queue, {\n          start: previous,\n          end: now()\n        })\n      }\n\n      queue = ''\n    }\n  }\n}\n\n/**\n * Check if `character` is outside the permissible unicode range.\n *\n * @param {number} code\n * @returns {boolean}\n */\nfunction prohibited(code) {\n  return (code >= 0xd800 && code <= 0xdfff) || code > 0x10ffff\n}\n\n/**\n * Check if `character` is disallowed.\n *\n * @param {number} code\n * @returns {boolean}\n */\nfunction disallowed(code) {\n  return (\n    (code >= 0x0001 && code <= 0x0008) ||\n    code === 0x000b ||\n    (code >= 0x000d && code <= 0x001f) ||\n    (code >= 0x007f && code <= 0x009f) ||\n    (code >= 0xfdd0 && code <= 0xfdef) ||\n    (code & 0xffff) === 0xffff ||\n    (code & 0xffff) === 0xfffe\n  )\n}\n","/**\n * @typedef CoreOptions\n * @property {ReadonlyArray<string>} [subset=[]]\n *   Whether to only escape the given subset of characters.\n * @property {boolean} [escapeOnly=false]\n *   Whether to only escape possibly dangerous characters.\n *   Those characters are `\"`, `&`, `'`, `<`, `>`, and `` ` ``.\n *\n * @typedef FormatOptions\n * @property {(code: number, next: number, options: CoreWithFormatOptions) => string} format\n *   Format strategy.\n *\n * @typedef {CoreOptions & FormatOptions & import('./util/format-smart.js').FormatSmartOptions} CoreWithFormatOptions\n */\n\nconst defaultSubsetRegex = /[\"&'<>`]/g\nconst surrogatePairsRegex = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g\nconst controlCharactersRegex =\n  // eslint-disable-next-line no-control-regex, unicorn/no-hex-escape\n  /[\\x01-\\t\\v\\f\\x0E-\\x1F\\x7F\\x81\\x8D\\x8F\\x90\\x9D\\xA0-\\uFFFF]/g\nconst regexEscapeRegex = /[|\\\\{}()[\\]^$+*?.]/g\n\n/** @type {WeakMap<ReadonlyArray<string>, RegExp>} */\nconst subsetToRegexCache = new WeakMap()\n\n/**\n * Encode certain characters in `value`.\n *\n * @param {string} value\n * @param {CoreWithFormatOptions} options\n * @returns {string}\n */\nexport function core(value, options) {\n  value = value.replace(\n    options.subset\n      ? charactersToExpressionCached(options.subset)\n      : defaultSubsetRegex,\n    basic\n  )\n\n  if (options.subset || options.escapeOnly) {\n    return value\n  }\n\n  return (\n    value\n      // Surrogate pairs.\n      .replace(surrogatePairsRegex, surrogate)\n      // BMP control characters (C0 except for LF, CR, SP; DEL; and some more\n      // non-ASCII ones).\n      .replace(controlCharactersRegex, basic)\n  )\n\n  /**\n   * @param {string} pair\n   * @param {number} index\n   * @param {string} all\n   */\n  function surrogate(pair, index, all) {\n    return options.format(\n      (pair.charCodeAt(0) - 0xd800) * 0x400 +\n        pair.charCodeAt(1) -\n        0xdc00 +\n        0x10000,\n      all.charCodeAt(index + 2),\n      options\n    )\n  }\n\n  /**\n   * @param {string} character\n   * @param {number} index\n   * @param {string} all\n   */\n  function basic(character, index, all) {\n    return options.format(\n      character.charCodeAt(0),\n      all.charCodeAt(index + 1),\n      options\n    )\n  }\n}\n\n/**\n * A wrapper function that caches the result of `charactersToExpression` with a WeakMap.\n * This can improve performance when tooling calls `charactersToExpression` repeatedly\n * with the same subset.\n *\n * @param {ReadonlyArray<string>} subset\n * @returns {RegExp}\n */\nfunction charactersToExpressionCached(subset) {\n  let cached = subsetToRegexCache.get(subset)\n\n  if (!cached) {\n    cached = charactersToExpression(subset)\n    subsetToRegexCache.set(subset, cached)\n  }\n\n  return cached\n}\n\n/**\n * @param {ReadonlyArray<string>} subset\n * @returns {RegExp}\n */\nfunction charactersToExpression(subset) {\n  /** @type {Array<string>} */\n  const groups = []\n  let index = -1\n\n  while (++index < subset.length) {\n    groups.push(subset[index].replace(regexEscapeRegex, '\\\\$&'))\n  }\n\n  return new RegExp('(?:' + groups.join('|') + ')', 'g')\n}\n","/**\n * The smallest way to encode a character.\n *\n * @param {number} code\n * @returns {string}\n */\nexport function formatBasic(code) {\n  return '&#x' + code.toString(16).toUpperCase() + ';'\n}\n","/**\n * @typedef {import('./core.js').CoreOptions & import('./util/format-smart.js').FormatSmartOptions} Options\n * @typedef {import('./core.js').CoreOptions} LightOptions\n */\n\nimport {core} from './core.js'\nimport {formatSmart} from './util/format-smart.js'\nimport {formatBasic} from './util/format-basic.js'\n\n/**\n * Encode special characters in `value`.\n *\n * @param {string} value\n *   Value to encode.\n * @param {Options} [options]\n *   Configuration.\n * @returns {string}\n *   Encoded value.\n */\nexport function stringifyEntities(value, options) {\n  return core(value, Object.assign({format: formatSmart}, options))\n}\n\n/**\n * Encode special characters in `value` as hexadecimals.\n *\n * @param {string} value\n *   Value to encode.\n * @param {LightOptions} [options]\n *   Configuration.\n * @returns {string}\n *   Encoded value.\n */\nexport function stringifyEntitiesLight(value, options) {\n  return core(value, Object.assign({format: formatBasic}, options))\n}\n","/**\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-from-markdown').OnEnterError} OnEnterError\n * @typedef {import('mdast-util-from-markdown').OnExitError} OnExitError\n * @typedef {import('mdast-util-from-markdown').Token} Token\n *\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').State} State\n * @typedef {import('mdast-util-to-markdown').Tracker} Tracker\n *\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('../index.js').MdxJsxAttribute} MdxJsxAttribute\n * @typedef {import('../index.js').MdxJsxAttributeValueExpression} MdxJsxAttributeValueExpression\n * @typedef {import('../index.js').MdxJsxExpressionAttribute} MdxJsxExpressionAttribute\n * @typedef {import('../index.js').MdxJsxFlowElement} MdxJsxFlowElement\n * @typedef {import('../index.js').MdxJsxTextElement} MdxJsxTextElement\n */\n\n/**\n * @typedef Tag\n *   Single tag.\n * @property {string | undefined} name\n *   Name of tag, or `undefined` for fragment.\n *\n *   > 👉 **Note**: `null` is used in the AST for fragments, as it serializes in\n *   > JSON.\n * @property {Array<MdxJsxAttribute | MdxJsxExpressionAttribute>} attributes\n *   Attributes.\n * @property {boolean} close\n *   Whether the tag is closing (`</x>`).\n * @property {boolean} selfClosing\n *   Whether the tag is self-closing (`<x/>`).\n * @property {Token['start']} start\n *   Start point.\n * @property {Token['start']} end\n *   End point.\n *\n * @typedef ToMarkdownOptions\n *   Configuration.\n * @property {'\"' | \"'\" | null | undefined} [quote='\"']\n *   Preferred quote to use around attribute values (default: `'\"'`).\n * @property {boolean | null | undefined} [quoteSmart=false]\n *   Use the other quote if that results in less bytes (default: `false`).\n * @property {boolean | null | undefined} [tightSelfClosing=false]\n *   Do not use an extra space when closing self-closing elements: `<img/>`\n *   instead of `<img />` (default: `false`).\n * @property {number | null | undefined} [printWidth=Infinity]\n *   Try and wrap syntax at this width (default: `Infinity`).\n *\n *   When set to a finite number (say, `80`), the formatter will print\n *   attributes on separate lines when a tag doesn’t fit on one line.\n *   The normal behavior is to print attributes with spaces between them\n *   instead of line endings.\n */\n\nimport {ccount} from 'ccount'\nimport {ok as assert} from 'devlop'\nimport {parseEntities} from 'parse-entities'\nimport {stringifyEntitiesLight} from 'stringify-entities'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nimport {VFileMessage} from 'vfile-message'\n\nconst indent = '  '\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable MDX JSX.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable MDX JSX.\n *\n *   When using the syntax extension with `addResult`, nodes will have a\n *   `data.estree` field set to an ESTree `Program` node.\n */\nexport function mdxJsxFromMarkdown() {\n  return {\n    canContainEols: ['mdxJsxTextElement'],\n    enter: {\n      mdxJsxFlowTag: enterMdxJsxTag,\n      mdxJsxFlowTagClosingMarker: enterMdxJsxTagClosingMarker,\n      mdxJsxFlowTagAttribute: enterMdxJsxTagAttribute,\n      mdxJsxFlowTagExpressionAttribute: enterMdxJsxTagExpressionAttribute,\n      mdxJsxFlowTagAttributeValueLiteral: buffer,\n      mdxJsxFlowTagAttributeValueExpression: buffer,\n      mdxJsxFlowTagSelfClosingMarker: enterMdxJsxTagSelfClosingMarker,\n\n      mdxJsxTextTag: enterMdxJsxTag,\n      mdxJsxTextTagClosingMarker: enterMdxJsxTagClosingMarker,\n      mdxJsxTextTagAttribute: enterMdxJsxTagAttribute,\n      mdxJsxTextTagExpressionAttribute: enterMdxJsxTagExpressionAttribute,\n      mdxJsxTextTagAttributeValueLiteral: buffer,\n      mdxJsxTextTagAttributeValueExpression: buffer,\n      mdxJsxTextTagSelfClosingMarker: enterMdxJsxTagSelfClosingMarker\n    },\n    exit: {\n      mdxJsxFlowTagClosingMarker: exitMdxJsxTagClosingMarker,\n      mdxJsxFlowTagNamePrimary: exitMdxJsxTagNamePrimary,\n      mdxJsxFlowTagNameMember: exitMdxJsxTagNameMember,\n      mdxJsxFlowTagNameLocal: exitMdxJsxTagNameLocal,\n      mdxJsxFlowTagExpressionAttribute: exitMdxJsxTagExpressionAttribute,\n      mdxJsxFlowTagExpressionAttributeValue: data,\n      mdxJsxFlowTagAttributeNamePrimary: exitMdxJsxTagAttributeNamePrimary,\n      mdxJsxFlowTagAttributeNameLocal: exitMdxJsxTagAttributeNameLocal,\n      mdxJsxFlowTagAttributeValueLiteral: exitMdxJsxTagAttributeValueLiteral,\n      mdxJsxFlowTagAttributeValueLiteralValue: data,\n      mdxJsxFlowTagAttributeValueExpression:\n        exitMdxJsxTagAttributeValueExpression,\n      mdxJsxFlowTagAttributeValueExpressionValue: data,\n      mdxJsxFlowTagSelfClosingMarker: exitMdxJsxTagSelfClosingMarker,\n      mdxJsxFlowTag: exitMdxJsxTag,\n\n      mdxJsxTextTagClosingMarker: exitMdxJsxTagClosingMarker,\n      mdxJsxTextTagNamePrimary: exitMdxJsxTagNamePrimary,\n      mdxJsxTextTagNameMember: exitMdxJsxTagNameMember,\n      mdxJsxTextTagNameLocal: exitMdxJsxTagNameLocal,\n      mdxJsxTextTagExpressionAttribute: exitMdxJsxTagExpressionAttribute,\n      mdxJsxTextTagExpressionAttributeValue: data,\n      mdxJsxTextTagAttributeNamePrimary: exitMdxJsxTagAttributeNamePrimary,\n      mdxJsxTextTagAttributeNameLocal: exitMdxJsxTagAttributeNameLocal,\n      mdxJsxTextTagAttributeValueLiteral: exitMdxJsxTagAttributeValueLiteral,\n      mdxJsxTextTagAttributeValueLiteralValue: data,\n      mdxJsxTextTagAttributeValueExpression:\n        exitMdxJsxTagAttributeValueExpression,\n      mdxJsxTextTagAttributeValueExpressionValue: data,\n      mdxJsxTextTagSelfClosingMarker: exitMdxJsxTagSelfClosingMarker,\n      mdxJsxTextTag: exitMdxJsxTag\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function buffer() {\n    this.buffer()\n  }\n\n  /**\n   * Copy a point-like value.\n   *\n   * @param {Point} d\n   *   Point-like value.\n   * @returns {Point}\n   *   unist point.\n   */\n  function point(d) {\n    return {line: d.line, column: d.column, offset: d.offset}\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function data(token) {\n    this.config.enter.data.call(this, token)\n    this.config.exit.data.call(this, token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function enterMdxJsxTag(token) {\n    /** @type {Tag} */\n    const tag = {\n      name: undefined,\n      attributes: [],\n      close: false,\n      selfClosing: false,\n      start: token.start,\n      end: token.end\n    }\n    if (!this.data.mdxJsxTagStack) this.data.mdxJsxTagStack = []\n    this.data.mdxJsxTag = tag\n    this.buffer()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function enterMdxJsxTagClosingMarker(token) {\n    const stack = this.data.mdxJsxTagStack\n    assert(stack, 'expected `mdxJsxTagStack`')\n\n    if (stack.length === 0) {\n      throw new VFileMessage(\n        'Unexpected closing slash `/` in tag, expected an open tag first',\n        {start: token.start, end: token.end},\n        'mdast-util-mdx-jsx:unexpected-closing-slash'\n      )\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function enterMdxJsxTagAnyAttribute(token) {\n    const tag = this.data.mdxJsxTag\n    assert(tag, 'expected `mdxJsxTag`')\n\n    if (tag.close) {\n      throw new VFileMessage(\n        'Unexpected attribute in closing tag, expected the end of the tag',\n        {start: token.start, end: token.end},\n        'mdast-util-mdx-jsx:unexpected-attribute'\n      )\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function enterMdxJsxTagSelfClosingMarker(token) {\n    const tag = this.data.mdxJsxTag\n    assert(tag, 'expected `mdxJsxTag`')\n\n    if (tag.close) {\n      throw new VFileMessage(\n        'Unexpected self-closing slash `/` in closing tag, expected the end of the tag',\n        {start: token.start, end: token.end},\n        'mdast-util-mdx-jsx:unexpected-self-closing-slash'\n      )\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function exitMdxJsxTagClosingMarker() {\n    const tag = this.data.mdxJsxTag\n    assert(tag, 'expected `mdxJsxTag`')\n    tag.close = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function exitMdxJsxTagNamePrimary(token) {\n    const tag = this.data.mdxJsxTag\n    assert(tag, 'expected `mdxJsxTag`')\n    tag.name = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function exitMdxJsxTagNameMember(token) {\n    const tag = this.data.mdxJsxTag\n    assert(tag, 'expected `mdxJsxTag`')\n    tag.name += '.' + this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function exitMdxJsxTagNameLocal(token) {\n    const tag = this.data.mdxJsxTag\n    assert(tag, 'expected `mdxJsxTag`')\n    tag.name += ':' + this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function enterMdxJsxTagAttribute(token) {\n    const tag = this.data.mdxJsxTag\n    assert(tag, 'expected `mdxJsxTag`')\n    enterMdxJsxTagAnyAttribute.call(this, token)\n    tag.attributes.push({\n      type: 'mdxJsxAttribute',\n      name: '',\n      value: null,\n      position: {\n        start: point(token.start),\n        // @ts-expect-error: `end` will be patched later.\n        end: undefined\n      }\n    })\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function enterMdxJsxTagExpressionAttribute(token) {\n    const tag = this.data.mdxJsxTag\n    assert(tag, 'expected `mdxJsxTag`')\n    enterMdxJsxTagAnyAttribute.call(this, token)\n    tag.attributes.push({type: 'mdxJsxExpressionAttribute', value: ''})\n    this.buffer()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function exitMdxJsxTagExpressionAttribute(token) {\n    const tag = this.data.mdxJsxTag\n    assert(tag, 'expected `mdxJsxTag`')\n    const tail = tag.attributes[tag.attributes.length - 1]\n    assert(tail.type === 'mdxJsxExpressionAttribute')\n    const estree = token.estree\n\n    tail.value = this.resume()\n\n    if (estree) {\n      tail.data = {estree}\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function exitMdxJsxTagAttributeNamePrimary(token) {\n    const tag = this.data.mdxJsxTag\n    assert(tag, 'expected `mdxJsxTag`')\n    const node = tag.attributes[tag.attributes.length - 1]\n    assert(node.type === 'mdxJsxAttribute')\n    node.name = this.sliceSerialize(token)\n    assert(node.position !== undefined)\n    node.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function exitMdxJsxTagAttributeNameLocal(token) {\n    const tag = this.data.mdxJsxTag\n    assert(tag, 'expected `mdxJsxTag`')\n    const node = tag.attributes[tag.attributes.length - 1]\n    assert(node.type === 'mdxJsxAttribute')\n    node.name += ':' + this.sliceSerialize(token)\n    assert(node.position !== undefined)\n    node.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function exitMdxJsxTagAttributeValueLiteral(token) {\n    const tag = this.data.mdxJsxTag\n    assert(tag, 'expected `mdxJsxTag`')\n    const node = tag.attributes[tag.attributes.length - 1]\n    node.value = parseEntities(this.resume(), {nonTerminated: false})\n    assert(node.position !== undefined)\n    node.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function exitMdxJsxTagAttributeValueExpression(token) {\n    const tag = this.data.mdxJsxTag\n    assert(tag, 'expected `mdxJsxTag`')\n    const tail = tag.attributes[tag.attributes.length - 1]\n    assert(tail.type === 'mdxJsxAttribute')\n    /** @type {MdxJsxAttributeValueExpression} */\n    const node = {type: 'mdxJsxAttributeValueExpression', value: this.resume()}\n    const estree = token.estree\n\n    if (estree) {\n      node.data = {estree}\n    }\n\n    tail.value = node\n    assert(tail.position !== undefined)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function exitMdxJsxTagSelfClosingMarker() {\n    const tag = this.data.mdxJsxTag\n    assert(tag, 'expected `mdxJsxTag`')\n\n    tag.selfClosing = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function exitMdxJsxTag(token) {\n    const tag = this.data.mdxJsxTag\n    assert(tag, 'expected `mdxJsxTag`')\n    const stack = this.data.mdxJsxTagStack\n    assert(stack, 'expected `mdxJsxTagStack`')\n    const tail = stack[stack.length - 1]\n\n    if (tag.close && tail.name !== tag.name) {\n      throw new VFileMessage(\n        'Unexpected closing tag `' +\n          serializeAbbreviatedTag(tag) +\n          '`, expected corresponding closing tag for `' +\n          serializeAbbreviatedTag(tail) +\n          '` (' +\n          stringifyPosition(tail) +\n          ')',\n        {start: token.start, end: token.end},\n        'mdast-util-mdx-jsx:end-tag-mismatch'\n      )\n    }\n\n    // End of a tag, so drop the buffer.\n    this.resume()\n\n    if (tag.close) {\n      stack.pop()\n    } else {\n      this.enter(\n        {\n          type:\n            token.type === 'mdxJsxTextTag'\n              ? 'mdxJsxTextElement'\n              : 'mdxJsxFlowElement',\n          name: tag.name || null,\n          attributes: tag.attributes,\n          children: []\n        },\n        token,\n        onErrorRightIsTag\n      )\n    }\n\n    if (tag.selfClosing || tag.close) {\n      this.exit(token, onErrorLeftIsTag)\n    } else {\n      stack.push(tag)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {OnEnterError}\n   */\n  function onErrorRightIsTag(closing, open) {\n    const stack = this.data.mdxJsxTagStack\n    assert(stack, 'expected `mdxJsxTagStack`')\n    const tag = stack[stack.length - 1]\n    assert(tag, 'expected `mdxJsxTag`')\n    const place = closing ? ' before the end of `' + closing.type + '`' : ''\n    const position = closing\n      ? {start: closing.start, end: closing.end}\n      : undefined\n\n    throw new VFileMessage(\n      'Expected a closing tag for `' +\n        serializeAbbreviatedTag(tag) +\n        '` (' +\n        stringifyPosition({start: open.start, end: open.end}) +\n        ')' +\n        place,\n      position,\n      'mdast-util-mdx-jsx:end-tag-mismatch'\n    )\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {OnExitError}\n   */\n  function onErrorLeftIsTag(a, b) {\n    const tag = this.data.mdxJsxTag\n    assert(tag, 'expected `mdxJsxTag`')\n\n    throw new VFileMessage(\n      'Expected the closing tag `' +\n        serializeAbbreviatedTag(tag) +\n        '` either after the end of `' +\n        b.type +\n        '` (' +\n        stringifyPosition(b.end) +\n        ') or another opening tag after the start of `' +\n        b.type +\n        '` (' +\n        stringifyPosition(b.start) +\n        ')',\n      {start: a.start, end: a.end},\n      'mdast-util-mdx-jsx:end-tag-mismatch'\n    )\n  }\n\n  /**\n   * Serialize a tag, excluding attributes.\n   * `self-closing` is not supported, because we don’t need it yet.\n   *\n   * @param {Tag} tag\n   * @returns {string}\n   */\n  function serializeAbbreviatedTag(tag) {\n    return '<' + (tag.close ? '/' : '') + (tag.name || '') + '>'\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable MDX JSX.\n *\n * This extension configures `mdast-util-to-markdown` with\n * `options.fences: true` and `options.resourceLink: true` too, do not\n * overwrite them!\n *\n * @param {ToMarkdownOptions | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable MDX JSX.\n */\nexport function mdxJsxToMarkdown(options) {\n  const options_ = options || {}\n  const quote = options_.quote || '\"'\n  const quoteSmart = options_.quoteSmart || false\n  const tightSelfClosing = options_.tightSelfClosing || false\n  const printWidth = options_.printWidth || Number.POSITIVE_INFINITY\n  const alternative = quote === '\"' ? \"'\" : '\"'\n\n  if (quote !== '\"' && quote !== \"'\") {\n    throw new Error(\n      'Cannot serialize attribute values with `' +\n        quote +\n        '` for `options.quote`, expected `\"`, or `\\'`'\n    )\n  }\n\n  mdxElement.peek = peekElement\n\n  return {\n    handlers: {\n      mdxJsxFlowElement: mdxElement,\n      mdxJsxTextElement: mdxElement\n    },\n    unsafe: [\n      {character: '<', inConstruct: ['phrasing']},\n      {atBreak: true, character: '<'}\n    ],\n    // Always generate fenced code (never indented code).\n    fences: true,\n    // Always generate links with resources (never autolinks).\n    resourceLink: true\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {MdxJsxFlowElement | MdxJsxTextElement} node\n   */\n  // eslint-disable-next-line complexity\n  function mdxElement(node, _, state, info) {\n    const flow = node.type === 'mdxJsxFlowElement'\n    const selfClosing = node.name\n      ? !node.children || node.children.length === 0\n      : false\n    const depth = inferDepth(state)\n    const currentIndent = createIndent(depth)\n    const trackerOneLine = state.createTracker(info)\n    const trackerMultiLine = state.createTracker(info)\n    /** @type {Array<string>} */\n    const serializedAttributes = []\n    const prefix = (flow ? currentIndent : '') + '<' + (node.name || '')\n    const exit = state.enter(node.type)\n\n    trackerOneLine.move(prefix)\n    trackerMultiLine.move(prefix)\n\n    // None.\n    if (node.attributes && node.attributes.length > 0) {\n      if (!node.name) {\n        throw new Error('Cannot serialize fragment w/ attributes')\n      }\n\n      let index = -1\n      while (++index < node.attributes.length) {\n        const attribute = node.attributes[index]\n        /** @type {string} */\n        let result\n\n        if (attribute.type === 'mdxJsxExpressionAttribute') {\n          result = '{' + (attribute.value || '') + '}'\n        } else {\n          if (!attribute.name) {\n            throw new Error('Cannot serialize attribute w/o name')\n          }\n\n          const value = attribute.value\n          const left = attribute.name\n          /** @type {string} */\n          let right = ''\n\n          if (value === null || value === undefined) {\n            // Empty.\n          } else if (typeof value === 'object') {\n            right = '{' + (value.value || '') + '}'\n          } else {\n            // If the alternative is less common than `quote`, switch.\n            const appliedQuote =\n              quoteSmart && ccount(value, quote) > ccount(value, alternative)\n                ? alternative\n                : quote\n            right =\n              appliedQuote +\n              stringifyEntitiesLight(value, {subset: [appliedQuote]}) +\n              appliedQuote\n          }\n\n          result = left + (right ? '=' : '') + right\n        }\n\n        serializedAttributes.push(result)\n      }\n    }\n\n    let attributesOnTheirOwnLine = false\n    const attributesOnOneLine = serializedAttributes.join(' ')\n\n    if (\n      // Block:\n      flow &&\n      // Including a line ending (expressions).\n      (/\\r?\\n|\\r/.test(attributesOnOneLine) ||\n        // Current position (including `<tag`).\n        trackerOneLine.current().now.column +\n          // -1 because columns, +1 for ` ` before attributes.\n          // Attributes joined by spaces.\n          attributesOnOneLine.length +\n          // ` />`.\n          (selfClosing ? (tightSelfClosing ? 2 : 3) : 1) >\n          printWidth)\n    ) {\n      attributesOnTheirOwnLine = true\n    }\n\n    let tracker = trackerOneLine\n    let value = prefix\n\n    if (attributesOnTheirOwnLine) {\n      tracker = trackerMultiLine\n\n      let index = -1\n\n      while (++index < serializedAttributes.length) {\n        // Only indent first line of of attributes, we can’t indent attribute\n        // values.\n        serializedAttributes[index] =\n          currentIndent + indent + serializedAttributes[index]\n      }\n\n      value += tracker.move(\n        '\\n' + serializedAttributes.join('\\n') + '\\n' + currentIndent\n      )\n    } else if (attributesOnOneLine) {\n      value += tracker.move(' ' + attributesOnOneLine)\n    }\n\n    if (selfClosing) {\n      value += tracker.move(\n        (tightSelfClosing || attributesOnTheirOwnLine ? '' : ' ') + '/'\n      )\n    }\n\n    value += tracker.move('>')\n\n    if (node.children && node.children.length > 0) {\n      if (node.type === 'mdxJsxTextElement') {\n        value += tracker.move(\n          // @ts-expect-error: `containerPhrasing` is typed correctly, but TS\n          // generates *hardcoded* types, which means that our dynamically added\n          // directives are not present.\n          // At some point, TS should fix that, and `from-markdown` should be fine.\n          state.containerPhrasing(node, {\n            ...tracker.current(),\n            before: '>',\n            after: '<'\n          })\n        )\n      } else {\n        tracker.shift(2)\n        value += tracker.move('\\n')\n        value += tracker.move(containerFlow(node, state, tracker.current()))\n        value += tracker.move('\\n')\n      }\n    }\n\n    if (!selfClosing) {\n      value += tracker.move(\n        (flow ? currentIndent : '') + '</' + (node.name || '') + '>'\n      )\n    }\n\n    exit()\n    return value\n  }\n}\n\n// Modified copy of:\n// <https://github.com/syntax-tree/mdast-util-to-markdown/blob/a381cbc/lib/util/container-flow.js>.\n//\n// To do: add `indent` support to `mdast-util-to-markdown`.\n// As indents are only used for JSX, it’s fine for now, but perhaps better\n// there.\n/**\n * @param {MdxJsxFlowElement} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {ReturnType<Tracker['current']>} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined by (blank) lines.\n */\nfunction containerFlow(parent, state, info) {\n  const indexStack = state.indexStack\n  const children = parent.children\n  const tracker = state.createTracker(info)\n  const currentIndent = createIndent(inferDepth(state))\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n\n  indexStack.push(-1)\n\n  while (++index < children.length) {\n    const child = children[index]\n\n    indexStack[indexStack.length - 1] = index\n\n    const childInfo = {before: '\\n', after: '\\n', ...tracker.current()}\n\n    const result = state.handle(child, parent, state, childInfo)\n\n    const serializedChild =\n      child.type === 'mdxJsxFlowElement'\n        ? result\n        : state.indentLines(result, function (line, _, blank) {\n            return (blank ? '' : currentIndent) + line\n          })\n\n    results.push(tracker.move(serializedChild))\n\n    if (child.type !== 'list') {\n      state.bulletLastUsed = undefined\n    }\n\n    if (index < children.length - 1) {\n      results.push(tracker.move('\\n\\n'))\n    }\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n\n/**\n * @param {State} state\n * @returns {number}\n */\nfunction inferDepth(state) {\n  let depth = 0\n  let index = state.stack.length\n\n  while (--index > -1) {\n    const name = state.stack[index]\n\n    if (name === 'blockquote' || name === 'listItem') break\n    if (name === 'mdxJsxFlowElement') depth++\n  }\n\n  return depth\n}\n\n/**\n * @param {number} depth\n * @returns {string}\n */\nfunction createIndent(depth) {\n  return indent.repeat(depth)\n}\n\n/**\n * @type {ToMarkdownHandle}\n */\nfunction peekElement() {\n  return '<'\n}\n","/**\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n *\n * @typedef {import('../index.js').MdxjsEsm} MdxjsEsm\n */\n\n// To do: next major: expose functions.\nimport {ok as assert} from 'devlop'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable MDX.js ESM in\n * markdown.\n *\n * When using the micromark syntax extension with `addResult`, nodes will have\n * a `data.estree` field set to an ESTree [`Program`][program] node.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable MDX.js ESM.\n */\nexport function mdxjsEsmFromMarkdown() {\n  return {\n    enter: {mdxjsEsm: enterMdxjsEsm},\n    exit: {mdxjsEsm: exitMdxjsEsm, mdxjsEsmData: exitMdxjsEsmData}\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable MDX.js ESM in\n * markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable MDX.js ESM.\n */\nexport function mdxjsEsmToMarkdown() {\n  return {handlers: {mdxjsEsm: handleMdxjsEsm}}\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterMdxjsEsm(token) {\n  this.enter({type: 'mdxjsEsm', value: ''}, token)\n  this.buffer() // Capture EOLs\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitMdxjsEsm(token) {\n  const value = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'mdxjsEsm')\n\n  this.exit(token)\n\n  const estree = token.estree\n\n  node.value = value\n\n  if (estree) {\n    node.data = {estree}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitMdxjsEsmData(token) {\n  this.config.enter.data.call(this, token)\n  this.config.exit.data.call(this, token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {MdxjsEsm} node\n */\nfunction handleMdxjsEsm(node) {\n  return node.value || ''\n}\n","/**\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-mdx-jsx').ToMarkdownOptions} ToMarkdownOptions\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\nimport {\n  mdxExpressionFromMarkdown,\n  mdxExpressionToMarkdown\n} from 'mdast-util-mdx-expression'\nimport {mdxJsxFromMarkdown, mdxJsxToMarkdown} from 'mdast-util-mdx-jsx'\nimport {mdxjsEsmFromMarkdown, mdxjsEsmToMarkdown} from 'mdast-util-mdxjs-esm'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable MDX (ESM, JSX,\n * expressions).\n *\n * @returns {Array<FromMarkdownExtension>}\n *   Extension for `mdast-util-from-markdown` to enable MDX (ESM, JSX,\n *   expressions).\n *\n *   When using the syntax extensions with `addResult`, ESM and expression\n *   nodes will have `data.estree` fields set to ESTree `Program` node.\n */\nexport function mdxFromMarkdown() {\n  return [\n    mdxExpressionFromMarkdown(),\n    mdxJsxFromMarkdown(),\n    mdxjsEsmFromMarkdown()\n  ]\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable MDX (ESM, JSX,\n * expressions).\n *\n * @param {ToMarkdownOptions | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable MDX (ESM, JSX,\n *   expressions).\n */\nexport function mdxToMarkdown(options) {\n  return {\n    extensions: [\n      mdxExpressionToMarkdown(),\n      mdxJsxToMarkdown(options),\n      mdxjsEsmToMarkdown()\n    ]\n  }\n}\n","/**\n * @param {string} d\n * @returns {string}\n */\nexport function color(d) {\n  return d\n}\n","/**\n * @typedef {import('estree-jsx').Node} Node\n */\n\n/**\n * @typedef {CONTINUE | EXIT | SKIP} Action\n *   Union of the action types.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed), when moving in an array.\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n */\n\n/**\n * @callback Visitor\n *   Handle a node.\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node`, the `Visitor` should\n *   return a new `Index` to specify the sibling to traverse after `node` is\n *   traversed.\n *   Adding or removing next siblings of `node` is handled as expected without\n *   needing to return a new `Index`.\n * @param {Node} node\n *   Found node.\n * @param {string | undefined} key\n *   Field at which `node` lives in its parent (or where a list of nodes lives).\n * @param {number | undefined} index\n *   Index where `node` lives if `parent[key]` is an array.\n * @param {Array<Node>} ancestors\n *   Ancestors of `node`.\n * @returns {Action | ActionTuple | Index | null | undefined | void}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * @typedef Visitors\n *   Handle nodes when entering (preorder) and leaving (postorder).\n * @property {Visitor | null | undefined} [enter]\n *   Handle nodes when entering (preorder) (optional).\n * @property {Visitor | null | undefined} [leave]\n *   Handle nodes when leaving (postorder) (optional).\n */\n\nimport {color} from 'estree-util-visit/do-not-use-color'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = Symbol('continue')\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = Symbol('exit')\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = Symbol('skip')\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) and/or *postorder* (**LRN**).\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor(s) when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * @param {Node} tree\n *   Tree to traverse\n * @param {Visitor | Visitors | null | undefined} [visitor]\n *   Handle each node (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport function visit(tree, visitor) {\n  /** @type {Visitor | undefined} */\n  let enter\n  /** @type {Visitor | undefined} */\n  let leave\n\n  if (typeof visitor === 'function') {\n    enter = visitor\n  } else if (visitor && typeof visitor === 'object') {\n    if (visitor.enter) enter = visitor.enter\n    if (visitor.leave) leave = visitor.leave\n  }\n\n  build(tree, undefined, undefined, [])()\n\n  /**\n   * @param {Node} node\n   * @param {string | undefined} key\n   * @param {number | undefined} index\n   * @param {Array<Node>} parents\n   */\n  function build(node, key, index, parents) {\n    if (nodelike(node)) {\n      visit.displayName = 'node (' + color(node.type) + ')'\n    }\n\n    return visit\n\n    /**\n     * @returns {ActionTuple}\n     */\n    function visit() {\n      /** @type {ActionTuple} */\n      const result = enter ? toResult(enter(node, key, index, parents)) : []\n\n      if (result[0] === EXIT) {\n        return result\n      }\n\n      if (result[0] !== SKIP) {\n        /** @type {keyof node} */\n        let cKey\n\n        for (cKey in node) {\n          if (\n            own.call(node, cKey) &&\n            node[cKey] &&\n            typeof node[cKey] === 'object' &&\n            // @ts-expect-error: custom esast extension.\n            cKey !== 'data' &&\n            // @ts-expect-error: custom esast extension.\n            cKey !== 'position'\n          ) {\n            const grandparents = parents.concat(node)\n            /** @type {unknown} */\n            const value = node[cKey]\n\n            if (Array.isArray(value)) {\n              const nodes = /** @type {Array<unknown>} */ (value)\n              let cIndex = 0\n\n              while (cIndex > -1 && cIndex < nodes.length) {\n                const subvalue = nodes[cIndex]\n\n                if (nodelike(subvalue)) {\n                  const subresult = build(\n                    subvalue,\n                    cKey,\n                    cIndex,\n                    grandparents\n                  )()\n                  if (subresult[0] === EXIT) return subresult\n                  cIndex =\n                    typeof subresult[1] === 'number' ? subresult[1] : cIndex + 1\n                } else {\n                  cIndex++\n                }\n              }\n            } else if (nodelike(value)) {\n              const subresult = build(value, cKey, undefined, grandparents)()\n              if (subresult[0] === EXIT) return subresult\n            }\n          }\n        }\n      }\n\n      return leave ? toResult(leave(node, key, index, parents)) : result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {Action | ActionTuple | Index | null | undefined | void} value\n *   Valid return values from visitors.\n * @returns {ActionTuple}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n\n/**\n * Check if something looks like a node.\n *\n * @param {unknown} value\n *   Anything.\n * @returns {value is Node}\n *   Whether `value` looks like a node.\n */\nfunction nodelike(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'type' in value &&\n      typeof value.type === 'string' &&\n      value.type.length > 0\n  )\n}\n","/**\n * @typedef {import('acorn').Comment} Comment\n * @typedef {import('acorn').Node} AcornNode\n * @typedef {import('acorn').Options} AcornOptions\n * @typedef {import('acorn').Token} Token\n * @typedef {import('estree').Node} EstreeNode\n * @typedef {import('estree').Program} Program\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} MicromarkPoint\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('unist').Point} UnistPoint\n */\n\n/**\n * @typedef Acorn\n *   Acorn-like interface.\n * @property {import('acorn').parse} parse\n *   Parse a program.\n * @property {import('acorn').parseExpressionAt} parseExpressionAt\n *   Parse an expression.\n *\n * @typedef AcornLoc\n * @property {number} line\n * @property {number} column\n *\n * @typedef AcornErrorFields\n * @property {number} raisedAt\n * @property {number} pos\n * @property {AcornLoc} loc\n *\n * @typedef {Error & AcornErrorFields} AcornError\n *\n * @typedef Options\n *   Configuration.\n * @property {Acorn} acorn\n *   Typically `acorn`, object with `parse` and `parseExpressionAt` fields (required).\n * @property {Array<TokenType>} tokenTypes\n *   Names of (void) tokens to consider as data; `'lineEnding'` is always\n *   included (required).\n * @property {AcornOptions | null | undefined} [acornOptions]\n *   Configuration for `acorn` (optional).\n * @property {MicromarkPoint | null | undefined} [start]\n *   Place where events start (optional, required if `allowEmpty`).\n * @property {string | null | undefined} [prefix='']\n *   Text to place before events (default: `''`).\n * @property {string | null | undefined} [suffix='']\n *   Text to place after events (default: `''`).\n * @property {boolean | null | undefined} [expression=false]\n *   Whether this is a program or expression (default: `false`).\n * @property {boolean | null | undefined} [allowEmpty=false]\n *   Whether an empty expression is allowed (programs are always allowed to\n *   be empty) (default: `false`).\n *\n * @typedef Result\n *   Result.\n * @property {Program | undefined} estree\n *   Program.\n * @property {AcornError | undefined} error\n *   Error if unparseable\n * @property {boolean} swallow\n *   Whether the error, if there is one, can be swallowed and more JavaScript\n *   could be valid.\n *\n * @typedef {[number, MicromarkPoint]} Stop\n *\n * @typedef Collection\n * @property {string} value\n * @property {Array<Stop>} stops\n */\n\nimport { visit } from 'estree-util-visit';\nimport { VFileMessage } from 'vfile-message';\n\n/**\n * Parse a list of micromark events with acorn.\n *\n * @param {Array<Event>} events\n *   Events.\n * @param {Options} options\n *   Configuration (required).\n * @returns {Result}\n *   Result.\n */\n// eslint-disable-next-line complexity\nexport function eventsToAcorn(events, options) {\n  const prefix = options.prefix || '';\n  const suffix = options.suffix || '';\n  const acornOptions = Object.assign({}, options.acornOptions);\n  /** @type {Array<Comment>} */\n  const comments = [];\n  /** @type {Array<Token>} */\n  const tokens = [];\n  const onComment = acornOptions.onComment;\n  const onToken = acornOptions.onToken;\n  let swallow = false;\n  /** @type {AcornNode | undefined} */\n  let estree;\n  /** @type {AcornError | undefined} */\n  let exception;\n  /** @type {AcornOptions} */\n  const acornConfig = Object.assign({}, acornOptions, {\n    onComment: comments,\n    preserveParens: true\n  });\n  if (onToken) {\n    acornConfig.onToken = tokens;\n  }\n  const collection = collect(events, options.tokenTypes);\n  const source = collection.value;\n  const value = prefix + source + suffix;\n  const isEmptyExpression = options.expression && empty(source);\n  if (isEmptyExpression && !options.allowEmpty) {\n    throw new VFileMessage('Unexpected empty expression', {\n      place: parseOffsetToUnistPoint(0),\n      ruleId: 'unexpected-empty-expression',\n      source: 'micromark-extension-mdx-expression'\n    });\n  }\n  try {\n    estree = options.expression && !isEmptyExpression ? options.acorn.parseExpressionAt(value, 0, acornConfig) : options.acorn.parse(value, acornConfig);\n  } catch (error_) {\n    const error = /** @type {AcornError} */error_;\n    const point = parseOffsetToUnistPoint(error.pos);\n    error.message = String(error.message).replace(/ \\(\\d+:\\d+\\)$/, '');\n    // Always defined in our unist points that come from micromark.\n\n    error.pos = point.offset;\n    error.loc = {\n      line: point.line,\n      column: point.column - 1\n    };\n    exception = error;\n    swallow = error.raisedAt >= prefix.length + source.length ||\n    // Broken comments are raised at their start, not their end.\n    error.message === 'Unterminated comment';\n  }\n  if (estree && options.expression && !isEmptyExpression) {\n    if (empty(value.slice(estree.end, value.length - suffix.length))) {\n      estree = {\n        type: 'Program',\n        start: 0,\n        end: prefix.length + source.length,\n        // @ts-expect-error: It’s good.\n        body: [{\n          type: 'ExpressionStatement',\n          expression: estree,\n          start: 0,\n          end: prefix.length + source.length\n        }],\n        sourceType: 'module',\n        comments: []\n      };\n    } else {\n      const point = parseOffsetToUnistPoint(estree.end);\n      const error = /** @type {AcornError} */\n      new Error('Unexpected content after expression');\n      // Always defined in our unist points that come from micromark.\n\n      error.pos = point.offset;\n      error.loc = {\n        line: point.line,\n        column: point.column - 1\n      };\n      exception = error;\n      estree = undefined;\n    }\n  }\n  if (estree) {\n    // @ts-expect-error: acorn *does* allow comments\n    estree.comments = comments;\n\n    // @ts-expect-error: acorn looks enough like estree.\n    visit(estree, function (esnode, field, index, parents) {\n      let context = /** @type {AcornNode | Array<AcornNode>} */\n      parents[parents.length - 1];\n      /** @type {number | string | undefined} */\n      let prop = field;\n\n      // Remove non-standard `ParenthesizedExpression`.\n      // @ts-expect-error: included in acorn.\n      if (esnode.type === 'ParenthesizedExpression' && context && prop) {\n        /* c8 ignore next 5 */\n        if (typeof index === 'number') {\n          // @ts-expect-error: indexable.\n          context = context[prop];\n          prop = index;\n        }\n\n        // @ts-expect-error: indexable.\n        context[prop] = esnode.expression;\n      }\n      fixPosition(esnode);\n    });\n\n    // Comment positions are fixed by `visit` because they’re in the tree.\n    if (Array.isArray(onComment)) {\n      onComment.push(...comments);\n    } else if (typeof onComment === 'function') {\n      for (const comment of comments) {\n        onComment(comment.type === 'Block', comment.value, comment.start, comment.end, comment.loc.start, comment.loc.end);\n      }\n    }\n    for (const token of tokens) {\n      // Ignore tokens that ends in prefix or start in suffix:\n      if (token.end <= prefix.length || token.start - prefix.length >= source.length) {\n        continue;\n      }\n      fixPosition(token);\n      if (Array.isArray(onToken)) {\n        onToken.push(token);\n      } else {\n        // `tokens` are not added if `onToken` is not defined, so it must be a\n        // function.\n\n        onToken(token);\n      }\n    }\n  }\n\n  // @ts-expect-error: It’s a program now.\n  return {\n    estree,\n    error: exception,\n    swallow\n  };\n\n  /**\n   * Update the position of a node.\n   *\n   * @param {AcornNode | EstreeNode | Token} nodeOrToken\n   * @returns {undefined}\n   */\n  function fixPosition(nodeOrToken) {\n    const pointStart = parseOffsetToUnistPoint(nodeOrToken.start);\n    const pointEnd = parseOffsetToUnistPoint(nodeOrToken.end);\n    // Always defined in our unist points that come from micromark.\n\n    nodeOrToken.start = pointStart.offset;\n    nodeOrToken.end = pointEnd.offset;\n    nodeOrToken.loc = {\n      start: {\n        line: pointStart.line,\n        column: pointStart.column - 1,\n        offset: pointStart.offset\n      },\n      end: {\n        line: pointEnd.line,\n        column: pointEnd.column - 1,\n        offset: pointEnd.offset\n      }\n    };\n    nodeOrToken.range = [nodeOrToken.start, nodeOrToken.end];\n  }\n\n  /**\n   * Turn an arbitrary offset into the parsed value, into a point in the source\n   * value.\n   *\n   * @param {number} acornOffset\n   * @returns {UnistPoint}\n   */\n  function parseOffsetToUnistPoint(acornOffset) {\n    let sourceOffset = acornOffset - prefix.length;\n    if (sourceOffset < 0) {\n      sourceOffset = 0;\n    } else if (sourceOffset > source.length) {\n      sourceOffset = source.length;\n    }\n    let point = relativeToPoint(collection.stops, sourceOffset);\n    if (!point) {\n      point = {\n        line: options.start.line,\n        column: options.start.column,\n        offset: options.start.offset\n      };\n    }\n    return point;\n  }\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction empty(value) {\n  return /^\\s*$/.test(value\n  // Multiline comments.\n  .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '')\n  // Line comments.\n  // EOF instead of EOL is specifically not allowed, because that would\n  // mean the closing brace is on the commented-out line\n  .replace(/\\/\\/[^\\r\\n]*(\\r\\n|\\n|\\r)/g, ''));\n}\n\n// Port from <https://github.com/wooorm/markdown-rs/blob/e692ab0/src/util/mdx_collect.rs#L15>.\n/**\n * @param {Array<Event>} events\n * @param {Array<TokenType>} tokenTypes\n * @returns {Collection}\n */\nfunction collect(events, tokenTypes) {\n  /** @type {Collection} */\n  const result = {\n    value: '',\n    stops: []\n  };\n  let index = -1;\n  while (++index < events.length) {\n    const event = events[index];\n\n    // Assume void.\n    if (event[0] === 'enter') {\n      const type = event[1].type;\n      if (type === \"lineEnding\" || tokenTypes.includes(type)) {\n        const chunks = event[2].sliceStream(event[1]);\n\n        // Drop virtual spaces.\n        while (chunks.length > 0 && chunks[0] === -1) {\n          chunks.shift();\n        }\n        const value = serializeChunks(chunks);\n        result.stops.push([result.value.length, event[1].start]);\n        result.value += value;\n        result.stops.push([result.value.length, event[1].end]);\n      }\n    }\n  }\n  return result;\n}\n\n// Port from <https://github.com/wooorm/markdown-rs/blob/e692ab0/src/util/location.rs#L91>.\n/**\n * Turn a relative offset into an absolute offset.\n *\n * @param {Array<Stop>} stops\n * @param {number} relative\n * @returns {UnistPoint | undefined}\n */\nfunction relativeToPoint(stops, relative) {\n  let index = 0;\n  while (index < stops.length && stops[index][0] <= relative) {\n    index += 1;\n  }\n\n  // There are no points: that only occurs if there was an empty string.\n  if (index === 0) {\n    return undefined;\n  }\n  const [stopRelative, stopAbsolute] = stops[index - 1];\n  const rest = relative - stopRelative;\n  return {\n    line: stopAbsolute.line,\n    column: stopAbsolute.column + rest,\n    offset: stopAbsolute.offset + rest\n  };\n}\n\n// Copy from <https://github.com/micromark/micromark/blob/ce3593a/packages/micromark/dev/lib/create-tokenizer.js#L595>\n// To do: expose that?\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @returns {string}\n */\nfunction serializeChunks(chunks) {\n  let index = -1;\n  /** @type {Array<string>} */\n  const result = [];\n  /** @type {boolean | undefined} */\n  let atTab;\n  while (++index < chunks.length) {\n    const chunk = chunks[index];\n    /** @type {string} */\n    let value;\n    if (typeof chunk === 'string') {\n      value = chunk;\n    } else switch (chunk) {\n      case -5:\n        {\n          value = \"\\r\";\n          break;\n        }\n      case -4:\n        {\n          value = \"\\n\";\n          break;\n        }\n      case -3:\n        {\n          value = \"\\r\" + \"\\n\";\n          break;\n        }\n      case -2:\n        {\n          value = \"\\t\";\n          break;\n        }\n\n      /* c8 ignore next 6 */\n      case -1:\n        {\n          if (atTab) continue;\n          value = \" \";\n          break;\n        }\n      default:\n        {\n          // Currently only replacement character.\n          // eslint-disable-next-line unicorn/prefer-code-point\n          value = String.fromCharCode(chunk);\n        }\n    }\n    atTab = chunk === -2;\n    result.push(value);\n  }\n  return result.join('');\n}","/**\n * @typedef {import('unist').Point} UnistPoint\n * @typedef {import('unist').Position} UnistPosition\n */\n\n/**\n * @typedef {[start: number | null | undefined, end: number | null | undefined]} RangeLike\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n *\n * @typedef LocLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef NodeLike\n * @property {LocLike | null | undefined} [loc]\n * @property {RangeLike | null | undefined} [range]\n * @property {number | null | undefined} [start]\n * @property {number | null | undefined} [end]\n */\n\n/**\n * Turn an estree `node` into a unist `position`.\n *\n * @param {NodeLike | null | undefined} [node]\n *   estree node.\n * @returns {UnistPosition | undefined}\n *   unist position.\n */\nexport function positionFromEstree(node) {\n  const nodeLike = node || {}\n  const loc = nodeLike.loc || {}\n  const range = nodeLike.range || [undefined, undefined]\n  const start = pointOrUndefined(loc.start, range[0] || nodeLike.start)\n  const end = pointOrUndefined(loc.end, range[1] || nodeLike.end)\n\n  if (start && end) {\n    return {start, end}\n  }\n}\n\n/**\n * @param {unknown} estreePoint\n *   estree point.\n * @param {unknown} estreeOffset\n *  estree offset.\n * @returns {UnistPoint | undefined}\n *   unist point.\n */\nfunction pointOrUndefined(estreePoint, estreeOffset) {\n  if (estreePoint && typeof estreePoint === 'object') {\n    const line =\n      'line' in estreePoint ? numberOrUndefined(estreePoint.line) : undefined\n    const column =\n      'column' in estreePoint\n        ? numberOrUndefined(estreePoint.column)\n        : undefined\n\n    if (line && column !== undefined) {\n      return {\n        line,\n        column: column + 1,\n        offset: numberOrUndefined(estreeOffset)\n      }\n    }\n  }\n}\n\n/**\n * @param {unknown} value\n * @returns {number | undefined}\n */\nfunction numberOrUndefined(value) {\n  return typeof value === 'number' && value > -1 ? value : undefined\n}\n","/**\n * @typedef {import('estree').Program} Program\n * @typedef {import('micromark-util-events-to-acorn').Acorn} Acorn\n * @typedef {import('micromark-util-events-to-acorn').AcornOptions} AcornOptions\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @typedef MdxSignalOk\n *   Good result.\n * @property {'ok'} type\n *   Type.\n * @property {Program | undefined} estree\n *   Value.\n *\n * @typedef MdxSignalNok\n *   Bad result.\n * @property {'nok'} type\n *   Type.\n * @property {VFileMessage} message\n *   Value.\n *\n * @typedef {MdxSignalNok | MdxSignalOk} MdxSignal\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {eventsToAcorn} from 'micromark-util-events-to-acorn'\nimport {positionFromEstree} from 'unist-util-position-from-estree'\nimport {VFileMessage} from 'vfile-message'\nconst trouble =\n  'https://github.com/micromark/micromark-extension-mdx-expression/tree/main/packages/micromark-extension-mdx-expression'\nconst unexpectedEofHash =\n  '#unexpected-end-of-file-in-expression-expected-a-corresponding-closing-brace-for-'\nconst unexpectedLazyHash =\n  '#unexpected-lazy-line-in-expression-in-container-expected-line-to-be-prefixed'\nconst nonSpreadHash =\n  '#unexpected-type-in-code-expected-an-object-spread-spread'\nconst spreadExtraHash =\n  '#unexpected-extra-content-in-spread-only-a-single-spread-is-supported'\nconst acornHash = '#could-not-parse-expression-with-acorn'\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful\n * @param {TokenType} type\n *   Token type for whole (`{}`).\n * @param {TokenType} markerType\n *   Token type for the markers (`{`, `}`).\n * @param {TokenType} chunkType\n *   Token type for the value (`1`).\n * @param {Acorn | null | undefined} [acorn]\n *   Object with `acorn.parse` and `acorn.parseExpressionAt`.\n * @param {AcornOptions | null | undefined} [acornOptions]\n *   Configuration for acorn.\n * @param {boolean | null | undefined} [addResult=false]\n *   Add `estree` to token (default: `false`).\n * @param {boolean | null | undefined} [spread=false]\n *   Support a spread (`{...a}`) only (default: `false`).\n * @param {boolean | null | undefined} [allowEmpty=false]\n *   Support an empty expression (default: `false`).\n * @param {boolean | null | undefined} [allowLazy=false]\n *   Support lazy continuation of an expression (default: `false`).\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryMdxExpression(\n  effects,\n  ok,\n  type,\n  markerType,\n  chunkType,\n  acorn,\n  acornOptions,\n  addResult,\n  spread,\n  allowEmpty,\n  allowLazy\n) {\n  const self = this\n  const eventStart = this.events.length + 3 // Add main and marker token\n  let size = 0\n  /** @type {Point} */\n  let pointStart\n  /** @type {Error} */\n  let lastCrash\n  return start\n\n  /**\n   * Start of an MDX expression.\n   *\n   * ```markdown\n   * > | a {Math.PI} c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    pointStart = self.now()\n    return before\n  }\n\n  /**\n   * Before data.\n   *\n   * ```markdown\n   * > | a {Math.PI} c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    if (code === null) {\n      if (lastCrash) throw lastCrash\n      const error = new VFileMessage(\n        'Unexpected end of file in expression, expected a corresponding closing brace for `{`',\n        {\n          place: self.now(),\n          ruleId: 'unexpected-eof',\n          source: 'micromark-extension-mdx-expression'\n        }\n      )\n      error.url = trouble + unexpectedEofHash\n      throw error\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return eolAfter\n    }\n    if (code === 125 && size === 0) {\n      /** @type {MdxSignal} */\n      const next = acorn\n        ? mdxExpressionParse.call(\n            self,\n            acorn,\n            acornOptions,\n            chunkType,\n            eventStart,\n            pointStart,\n            allowEmpty || false,\n            spread || false\n          )\n        : {\n            type: 'ok',\n            estree: undefined\n          }\n      if (next.type === 'ok') {\n        effects.enter(markerType)\n        effects.consume(code)\n        effects.exit(markerType)\n        const token = effects.exit(type)\n        if (addResult && next.estree) {\n          Object.assign(token, {\n            estree: next.estree\n          })\n        }\n        return ok\n      }\n      lastCrash = next.message\n      effects.enter(chunkType)\n      effects.consume(code)\n      return inside\n    }\n    effects.enter(chunkType)\n    return inside(code)\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | a {Math.PI} c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (\n      (code === 125 && size === 0) ||\n      code === null ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit(chunkType)\n      return before(code)\n    }\n\n    // Don’t count if gnostic.\n    if (code === 123 && !acorn) {\n      size += 1\n    } else if (code === 125) {\n      size -= 1\n    }\n    effects.consume(code)\n    return inside\n  }\n\n  /**\n   * After eol.\n   *\n   * ```markdown\n   *   | a {b +\n   * > | c} d\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function eolAfter(code) {\n    const now = self.now()\n\n    // Lazy continuation in a flow expression (or flow tag) is a syntax error.\n    if (\n      now.line !== pointStart.line &&\n      !allowLazy &&\n      self.parser.lazy[now.line]\n    ) {\n      const error = new VFileMessage(\n        'Unexpected lazy line in expression in container, expected line to be prefixed with `>` when in a block quote, whitespace when in a list, etc',\n        {\n          place: self.now(),\n          ruleId: 'unexpected-lazy',\n          source: 'micromark-extension-mdx-expression'\n        }\n      )\n      error.url = trouble + unexpectedLazyHash\n      throw error\n    }\n\n    // Idea: investigate if we’d need to use more complex stripping.\n    // Take this example:\n    //\n    // ```markdown\n    // >  aaa <b c={`\n    // >      d\n    // >  `} /> eee\n    // ```\n    //\n    // The block quote takes one space from each line, the paragraph doesn’t.\n    // The intent above is *perhaps* for the split to be as `>␠␠|␠␠␠␠|d`,\n    // Currently, we *don’t* do anything at all, it’s `>␠|␠␠␠␠␠|d` instead.\n    //\n    // Note: we used to have some handling here, and `markdown-rs` still does,\n    // which should be removed.\n    return before(code)\n  }\n}\n\n/**\n * Mix of `markdown-rs`’s `parse_expression` and `MdxExpressionParse`\n * functionality, to wrap our `eventsToAcorn`.\n *\n * In the future, the plan is to realise the rust way, which allows arbitrary\n * parsers.\n *\n * @this {TokenizeContext}\n * @param {Acorn} acorn\n * @param {AcornOptions | null | undefined} acornOptions\n * @param {TokenType} chunkType\n * @param {number} eventStart\n * @param {Point} pointStart\n * @param {boolean} allowEmpty\n * @param {boolean} spread\n * @returns {MdxSignal}\n */\n// eslint-disable-next-line max-params\nfunction mdxExpressionParse(\n  acorn,\n  acornOptions,\n  chunkType,\n  eventStart,\n  pointStart,\n  allowEmpty,\n  spread\n) {\n  // Gnostic mode: parse w/ acorn.\n  const result = eventsToAcorn(this.events.slice(eventStart), {\n    acorn,\n    tokenTypes: [chunkType],\n    acornOptions,\n    start: pointStart,\n    expression: true,\n    allowEmpty,\n    prefix: spread ? '({' : '',\n    suffix: spread ? '})' : ''\n  })\n  const estree = result.estree\n\n  // Get the spread value.\n  if (spread && estree) {\n    // Should always be the case as we wrap in `d={}`\n\n    const head = estree.body[0]\n    if (\n      head.type !== 'ExpressionStatement' ||\n      head.expression.type !== 'ObjectExpression'\n    ) {\n      const place = positionFromEstree(head)\n      const error = new VFileMessage(\n        'Unexpected `' +\n          head.type +\n          '` in code: expected an object spread (`{...spread}`)',\n        {\n          place: place.start,\n          ruleId: 'non-spread',\n          source: 'micromark-extension-mdx-expression'\n        }\n      )\n      error.url = trouble + nonSpreadHash\n      throw error\n    }\n    if (head.expression.properties[1]) {\n      const place = positionFromEstree(head.expression.properties[1])\n      const error = new VFileMessage(\n        'Unexpected extra content in spread: only a single spread is supported',\n        {\n          place: place.start,\n          ruleId: 'spread-extra',\n          source: 'micromark-extension-mdx-expression'\n        }\n      )\n      error.url = trouble + spreadExtraHash\n      throw error\n    }\n    if (\n      head.expression.properties[0] &&\n      head.expression.properties[0].type !== 'SpreadElement'\n    ) {\n      const place = positionFromEstree(head.expression.properties[0])\n      const error = new VFileMessage(\n        'Unexpected `' +\n          head.expression.properties[0].type +\n          '` in code: only spread elements are supported',\n        {\n          place: place.start,\n          ruleId: 'non-spread',\n          source: 'micromark-extension-mdx-expression'\n        }\n      )\n      error.url = trouble + nonSpreadHash\n      throw error\n    }\n  }\n  if (result.error) {\n    const error = new VFileMessage('Could not parse expression with acorn', {\n      cause: result.error,\n      place: {\n        line: result.error.loc.line,\n        column: result.error.loc.column + 1,\n        offset: result.error.pos\n      },\n      ruleId: 'acorn',\n      source: 'micromark-extension-mdx-expression'\n    })\n    error.url = trouble + acornHash\n    return {\n      type: 'nok',\n      message: error\n    }\n  }\n  return {\n    type: 'ok',\n    estree\n  }\n}\n","/**\n * @typedef {import('micromark-util-events-to-acorn').Acorn} Acorn\n * @typedef {import('micromark-util-events-to-acorn').AcornOptions} AcornOptions\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef Options\n *   Configuration (optional).\n * @property {Acorn | null | undefined} [acorn]\n *   Acorn parser to use (optional).\n * @property {AcornOptions | null | undefined} [acornOptions]\n *   Configuration for acorn (default: `{ecmaVersion: 2024, locations: true,\n *   sourceType: 'module'}`).\n *\n *   All fields except `locations` can be set.\n * @property {boolean | null | undefined} [addResult=false]\n *   Whether to add `estree` fields to tokens with results from acorn (default:\n *   `false`).\n * @property {boolean | null | undefined} [spread=false]\n *   Undocumented option to parse only a spread (used by\n *   `micromark-extension-mdx-jsx` to parse spread attributes) (default:\n *   `false`).\n * @property {boolean | null | undefined} [allowEmpty=true]\n *   Undocumented option to disallow empty attributes (used by\n *   `micromark-extension-mdx-jsx` to prohobit empty attribute values)\n *   (default: `false`).\n */\n\nimport { factoryMdxExpression } from 'micromark-factory-mdx-expression';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/**\n * Create an extension for `micromark` to enable MDX expression syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable MDX\n *   expression syntax.\n */\nexport function mdxExpression(options) {\n  const options_ = options || {};\n  const addResult = options_.addResult;\n  const acorn = options_.acorn;\n  // Hidden: `micromark-extension-mdx-jsx` supports expressions in tags,\n  // and one of them is only “spread” elements.\n  // It also has expressions that are not allowed to be empty (`<x y={}/>`).\n  // Instead of duplicating code there, this are two small hidden feature here\n  // to test that behavior.\n  const spread = options_.spread;\n  let allowEmpty = options_.allowEmpty;\n  /** @type {AcornOptions} */\n  let acornOptions;\n  if (allowEmpty === null || allowEmpty === undefined) {\n    allowEmpty = true;\n  }\n  if (acorn) {\n    if (!acorn.parseExpressionAt) {\n      throw new Error('Expected a proper `acorn` instance passed in as `options.acorn`');\n    }\n    acornOptions = Object.assign({\n      ecmaVersion: 2024,\n      sourceType: 'module'\n    }, options_.acornOptions);\n  } else if (options_.acornOptions || options_.addResult) {\n    throw new Error('Expected an `acorn` instance passed in as `options.acorn`');\n  }\n  return {\n    flow: {\n      [123]: {\n        name: 'mdxFlowExpression',\n        tokenize: tokenizeFlowExpression,\n        concrete: true\n      }\n    },\n    text: {\n      [123]: {\n        name: 'mdxTextExpression',\n        tokenize: tokenizeTextExpression\n      }\n    }\n  };\n\n  /**\n   * MDX expression (flow).\n   *\n   * ```markdown\n   * > | {Math.PI}\n   *     ^^^^^^^^^\n   * ```\n   *\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeFlowExpression(effects, ok, nok) {\n    const self = this;\n    return start;\n\n    /**\n     * Start of an MDX expression (flow).\n     *\n     * ```markdown\n     * > | {Math.PI}\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // To do: in `markdown-rs`, constructs need to parse the indent themselves.\n      // This should also be introduced in `micromark-js`.\n\n      return before(code);\n    }\n\n    /**\n     * After optional whitespace, before expression.\n     *\n     * ```markdown\n     * > | {Math.PI}\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function before(code) {\n      return factoryMdxExpression.call(self, effects, after, 'mdxFlowExpression', 'mdxFlowExpressionMarker', 'mdxFlowExpressionChunk', acorn, acornOptions, addResult, spread, allowEmpty)(code);\n    }\n\n    /**\n     * After expression.\n     *\n     * ```markdown\n     * > | {Math.PI}\n     *              ^\n     * ```\n     *\n     * @type {State}\n     */\n    function after(code) {\n      return markdownSpace(code) ? factorySpace(effects, end, \"whitespace\")(code) : end(code);\n    }\n\n    /**\n     * After expression, after optional whitespace.\n     *\n     * ```markdown\n     * > | {Math.PI}␠␊\n     *               ^\n     * ```\n     *\n     * @type {State}\n     */\n    function end(code) {\n      // We want to allow tags directly after expressions.\n      //\n      // This case is useful:\n      //\n      // ```mdx\n      // <a>{b}</a>\n      // ```\n      //\n      // This case is not (very?) useful:\n      //\n      // ```mdx\n      // {a}<b/>\n      // ```\n      //\n      // …but it would be tougher than needed to disallow.\n      //\n      // To allow that, here we call the flow construct of\n      // `micromark-extension-mdx-jsx`, and there we call this one.\n      //\n      // It would introduce a cyclical interdependency if we test JSX and\n      // expressions here.\n      // Because the JSX extension already uses parts of this monorepo, we\n      // instead test it there.\n      const lessThanValue = self.parser.constructs.flow[60];\n      const constructs = Array.isArray(lessThanValue) ? lessThanValue : /* c8 ignore next 3 -- always a list when normalized. */\n      lessThanValue ? [lessThanValue] : [];\n      const jsxTag = constructs.find(function (d) {\n        return d.name === 'mdxJsxFlowTag';\n      });\n\n      /* c8 ignore next 3 -- this is tested in `micromark-extension-mdx-jsx` */\n      if (code === 60 && jsxTag) {\n        return effects.attempt(jsxTag, end, nok)(code);\n      }\n      return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n    }\n  }\n\n  /**\n   * MDX expression (text).\n   *\n   * ```markdown\n   * > | a {Math.PI} c.\n   *       ^^^^^^^^^\n   * ```\n   *\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeTextExpression(effects, ok) {\n    const self = this;\n    return start;\n\n    /**\n     * Start of an MDX expression (text).\n     *\n     * ```markdown\n     * > | a {Math.PI} c.\n     *       ^\n     * ```\n     *\n     *\n     * @type {State}\n     */\n    function start(code) {\n      return factoryMdxExpression.call(self, effects, ok, 'mdxTextExpression', 'mdxTextExpressionMarker', 'mdxTextExpressionChunk', acorn, acornOptions, addResult, spread, allowEmpty, true)(code);\n    }\n  }\n}","/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [jsx=false]\n *   Support JSX identifiers (default: `false`).\n */\n\nconst startRe = /[$_\\p{ID_Start}]/u\nconst contRe = /[$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst contReJsx = /[-$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst nameRe = /^[$_\\p{ID_Start}][$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\nconst nameReJsx = /^[$_\\p{ID_Start}][-$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Checks if the given code point can start an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @returns {boolean}\n *   Whether `code` can start an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function start(code) {\n  return code ? startRe.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given code point can continue an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `code` can continue an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function cont(code, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? contReJsx : contRe\n  return code ? re.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given value is a valid identifier name.\n *\n * @param {string} name\n *   Identifier to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `name` can be an identifier.\n */\nexport function name(name, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? nameReJsx : nameRe\n  return re.test(name)\n}\n","/**\n * @typedef {import('micromark-factory-mdx-expression').Acorn} Acorn\n * @typedef {import('micromark-factory-mdx-expression').AcornOptions} AcornOptions\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport { cont as idCont, start as idStart } from 'estree-util-is-identifier-name';\nimport { factoryMdxExpression } from 'micromark-factory-mdx-expression';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace, unicodeWhitespace } from 'micromark-util-character';\nimport { VFileMessage } from 'vfile-message';\nconst trouble = 'https://github.com/micromark/micromark-extension-mdx-jsx';\n\n/**\n * @this {TokenizeContext}\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {Acorn | undefined} acorn\n * @param {AcornOptions | undefined} acornOptions\n * @param {boolean | undefined} addResult\n * @param {boolean | undefined} allowLazy\n * @param {TokenType} tagType\n * @param {TokenType} tagMarkerType\n * @param {TokenType} tagClosingMarkerType\n * @param {TokenType} tagSelfClosingMarker\n * @param {TokenType} tagNameType\n * @param {TokenType} tagNamePrimaryType\n * @param {TokenType} tagNameMemberMarkerType\n * @param {TokenType} tagNameMemberType\n * @param {TokenType} tagNamePrefixMarkerType\n * @param {TokenType} tagNameLocalType\n * @param {TokenType} tagExpressionAttributeType\n * @param {TokenType} tagExpressionAttributeMarkerType\n * @param {TokenType} tagExpressionAttributeValueType\n * @param {TokenType} tagAttributeType\n * @param {TokenType} tagAttributeNameType\n * @param {TokenType} tagAttributeNamePrimaryType\n * @param {TokenType} tagAttributeNamePrefixMarkerType\n * @param {TokenType} tagAttributeNameLocalType\n * @param {TokenType} tagAttributeInitializerMarkerType\n * @param {TokenType} tagAttributeValueLiteralType\n * @param {TokenType} tagAttributeValueLiteralMarkerType\n * @param {TokenType} tagAttributeValueLiteralValueType\n * @param {TokenType} tagAttributeValueExpressionType\n * @param {TokenType} tagAttributeValueExpressionMarkerType\n * @param {TokenType} tagAttributeValueExpressionValueType\n */\n// eslint-disable-next-line max-params\nexport function factoryTag(effects, ok, nok, acorn, acornOptions, addResult, allowLazy, tagType, tagMarkerType, tagClosingMarkerType, tagSelfClosingMarker, tagNameType, tagNamePrimaryType, tagNameMemberMarkerType, tagNameMemberType, tagNamePrefixMarkerType, tagNameLocalType, tagExpressionAttributeType, tagExpressionAttributeMarkerType, tagExpressionAttributeValueType, tagAttributeType, tagAttributeNameType, tagAttributeNamePrimaryType, tagAttributeNamePrefixMarkerType, tagAttributeNameLocalType, tagAttributeInitializerMarkerType, tagAttributeValueLiteralType, tagAttributeValueLiteralMarkerType, tagAttributeValueLiteralValueType, tagAttributeValueExpressionType, tagAttributeValueExpressionMarkerType, tagAttributeValueExpressionValueType) {\n  const self = this;\n  /** @type {State} */\n  let returnState;\n  /** @type {NonNullable<Code> | undefined} */\n  let marker;\n  return start;\n\n  /**\n   * Start of MDX: JSX.\n   *\n   * ```markdown\n   * > | a <B /> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(tagType);\n    effects.enter(tagMarkerType);\n    effects.consume(code);\n    effects.exit(tagMarkerType);\n    return startAfter;\n  }\n\n  /**\n   * After `<`.\n   *\n   * ```markdown\n   * > | a <B /> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function startAfter(code) {\n    // Deviate from JSX, which allows arbitrary whitespace.\n    // See: <https://github.com/micromark/micromark-extension-mdx-jsx/issues/7>.\n    if (markdownLineEndingOrSpace(code)) {\n      return nok(code);\n    }\n\n    // Any other ES whitespace does not get this treatment.\n    returnState = nameBefore;\n    return esWhitespaceStart(code);\n  }\n\n  /**\n   * Before name, self slash, or end of tag for fragments.\n   *\n   * ```markdown\n   * > | a <B> c\n   *        ^\n   * > | a </B> c\n   *        ^\n   * > | a <> b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function nameBefore(code) {\n    // Closing tag.\n    if (code === 47) {\n      effects.enter(tagClosingMarkerType);\n      effects.consume(code);\n      effects.exit(tagClosingMarkerType);\n      returnState = closingTagNameBefore;\n      return esWhitespaceStart;\n    }\n\n    // Fragment opening tag.\n    if (code === 62) {\n      return tagEnd(code);\n    }\n\n    // Start of a name.\n    if (code !== null && code >= 0 && idStart(code)) {\n      effects.enter(tagNameType);\n      effects.enter(tagNamePrimaryType);\n      effects.consume(code);\n      return primaryName;\n    }\n    crash(code, 'before name', 'a character that can start a name, such as a letter, `$`, or `_`' + (code === 33 ? ' (note: to create a comment in MDX, use `{/* text */}`)' : ''));\n  }\n\n  /**\n   * Before name of closing tag or end of closing fragment tag.\n   *\n   * ```markdown\n   * > | a </> b\n   *         ^\n   * > | a </B> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function closingTagNameBefore(code) {\n    // Fragment closing tag.\n    if (code === 62) {\n      return tagEnd(code);\n    }\n\n    // Start of a closing tag name.\n    if (code !== null && code >= 0 && idStart(code)) {\n      effects.enter(tagNameType);\n      effects.enter(tagNamePrimaryType);\n      effects.consume(code);\n      return primaryName;\n    }\n    crash(code, 'before name', 'a character that can start a name, such as a letter, `$`, or `_`' + (code === 42 || code === 47 ? ' (note: JS comments in JSX tags are not supported in MDX)' : ''));\n  }\n\n  /**\n   * In primary name.\n   *\n   * ```markdown\n   * > | a <Bc> d\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function primaryName(code) {\n    // Continuation of name: remain.\n    if (code !== null && code >= 0 && idCont(code, {\n      jsx: true\n    })) {\n      effects.consume(code);\n      return primaryName;\n    }\n\n    // End of name.\n    if (code === 46 || code === 47 || code === 58 || code === 62 || code === 123 || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      effects.exit(tagNamePrimaryType);\n      returnState = primaryNameAfter;\n      return esWhitespaceStart(code);\n    }\n    crash(code, 'in name', 'a name character such as letters, digits, `$`, or `_`; whitespace before attributes; or the end of the tag' + (code === 64 ? ' (note: to create a link in MDX, use `[text](url)`)' : ''));\n  }\n\n  /**\n   * After primary name.\n   *\n   * ```markdown\n   * > | a <b.c> d\n   *         ^\n   * > | a <b:c> d\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function primaryNameAfter(code) {\n    // Start of a member name.\n    if (code === 46) {\n      effects.enter(tagNameMemberMarkerType);\n      effects.consume(code);\n      effects.exit(tagNameMemberMarkerType);\n      returnState = memberNameBefore;\n      return esWhitespaceStart;\n    }\n\n    // Start of a local name.\n    if (code === 58) {\n      effects.enter(tagNamePrefixMarkerType);\n      effects.consume(code);\n      effects.exit(tagNamePrefixMarkerType);\n      returnState = localNameBefore;\n      return esWhitespaceStart;\n    }\n\n    // End of name.\n    if (code === 47 || code === 62 || code === 123 || code !== null && code >= 0 && idStart(code)) {\n      effects.exit(tagNameType);\n      return attributeBefore(code);\n    }\n    crash(code, 'after name', 'a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag');\n  }\n\n  /**\n   * Before member name.\n   *\n   * ```markdown\n   * > | a <b.c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function memberNameBefore(code) {\n    // Start of a member name.\n    if (code !== null && code >= 0 && idStart(code)) {\n      effects.enter(tagNameMemberType);\n      effects.consume(code);\n      return memberName;\n    }\n    crash(code, 'before member name', 'a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag');\n  }\n\n  /**\n   * In member name.\n   *\n   * ```markdown\n   * > | a <b.cd> e\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function memberName(code) {\n    // Continuation of name: remain.\n    if (code !== null && code >= 0 && idCont(code, {\n      jsx: true\n    })) {\n      effects.consume(code);\n      return memberName;\n    }\n\n    // End of name.\n    // Note: no `:` allowed here.\n    if (code === 46 || code === 47 || code === 62 || code === 123 || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      effects.exit(tagNameMemberType);\n      returnState = memberNameAfter;\n      return esWhitespaceStart(code);\n    }\n    crash(code, 'in member name', 'a name character such as letters, digits, `$`, or `_`; whitespace before attributes; or the end of the tag' + (code === 64 ? ' (note: to create a link in MDX, use `[text](url)`)' : ''));\n  }\n\n  /**\n   * After member name.\n   *\n   * ```markdown\n   * > | a <b.c> d\n   *           ^\n   * > | a <b.c.d> e\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function memberNameAfter(code) {\n    // Start another member name.\n    if (code === 46) {\n      effects.enter(tagNameMemberMarkerType);\n      effects.consume(code);\n      effects.exit(tagNameMemberMarkerType);\n      returnState = memberNameBefore;\n      return esWhitespaceStart;\n    }\n\n    // End of name.\n    if (code === 47 || code === 62 || code === 123 || code !== null && code >= 0 && idStart(code)) {\n      effects.exit(tagNameType);\n      return attributeBefore(code);\n    }\n    crash(code, 'after member name', 'a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag');\n  }\n\n  /**\n   * Local member name.\n   *\n   * ```markdown\n   * > | a <b:c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function localNameBefore(code) {\n    // Start of a local name.\n    if (code !== null && code >= 0 && idStart(code)) {\n      effects.enter(tagNameLocalType);\n      effects.consume(code);\n      return localName;\n    }\n    crash(code, 'before local name', 'a character that can start a name, such as a letter, `$`, or `_`' + (code === 43 || code !== null && code > 46 && code < 58 /* `/` - `9` */ ? ' (note: to create a link in MDX, use `[text](url)`)' : ''));\n  }\n\n  /**\n   * In local name.\n   *\n   * ```markdown\n   * > | a <b:cd> e\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function localName(code) {\n    // Continuation of name: remain.\n    if (code !== null && code >= 0 && idCont(code, {\n      jsx: true\n    })) {\n      effects.consume(code);\n      return localName;\n    }\n\n    // End of local name (note that we don’t expect another colon, or a member).\n    if (code === 47 || code === 62 || code === 123 || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      effects.exit(tagNameLocalType);\n      returnState = localNameAfter;\n      return esWhitespaceStart(code);\n    }\n    crash(code, 'in local name', 'a name character such as letters, digits, `$`, or `_`; whitespace before attributes; or the end of the tag');\n  }\n\n  /**\n   * After local name.\n   *\n   * This is like as `primary_name_after`, but we don’t expect colons or\n   * periods.\n   *\n   * ```markdown\n   * > | a <b.c> d\n   *           ^\n   * > | a <b.c.d> e\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function localNameAfter(code) {\n    // End of name.\n    if (code === 47 || code === 62 || code === 123 || code !== null && code >= 0 && idStart(code)) {\n      effects.exit(tagNameType);\n      return attributeBefore(code);\n    }\n    crash(code, 'after local name', 'a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag');\n  }\n\n  /**\n   * Before attribute.\n   *\n   * ```markdown\n   * > | a <b /> c\n   *          ^\n   * > | a <b > c\n   *          ^\n   * > | a <b {...c}> d\n   *          ^\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributeBefore(code) {\n    // Self-closing.\n    if (code === 47) {\n      effects.enter(tagSelfClosingMarker);\n      effects.consume(code);\n      effects.exit(tagSelfClosingMarker);\n      returnState = selfClosing;\n      return esWhitespaceStart;\n    }\n\n    // End of tag.\n    if (code === 62) {\n      return tagEnd(code);\n    }\n\n    // Attribute expression.\n    if (code === 123) {\n      return factoryMdxExpression.call(self, effects, attributeExpressionAfter, tagExpressionAttributeType, tagExpressionAttributeMarkerType, tagExpressionAttributeValueType, acorn, acornOptions, addResult, true, false, allowLazy)(code);\n    }\n\n    // Start of an attribute name.\n    if (code !== null && code >= 0 && idStart(code)) {\n      effects.enter(tagAttributeType);\n      effects.enter(tagAttributeNameType);\n      effects.enter(tagAttributeNamePrimaryType);\n      effects.consume(code);\n      return attributePrimaryName;\n    }\n    crash(code, 'before attribute name', 'a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag');\n  }\n\n  /**\n   * After attribute expression.\n   *\n   * ```markdown\n   * > | a <b {c} d/> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributeExpressionAfter(code) {\n    returnState = attributeBefore;\n    return esWhitespaceStart(code);\n  }\n\n  /**\n   * In primary attribute name.\n   *\n   * ```markdown\n   * > | a <b cd/> e\n   *           ^\n   * > | a <b c:d> e\n   *           ^\n   * > | a <b c=d> e\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributePrimaryName(code) {\n    // Continuation of name: remain.\n    if (code !== null && code >= 0 && idCont(code, {\n      jsx: true\n    })) {\n      effects.consume(code);\n      return attributePrimaryName;\n    }\n\n    // End of attribute name or tag.\n    if (code === 47 || code === 58 || code === 61 || code === 62 || code === 123 || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      effects.exit(tagAttributeNamePrimaryType);\n      returnState = attributePrimaryNameAfter;\n      return esWhitespaceStart(code);\n    }\n    crash(code, 'in attribute name', 'an attribute name character such as letters, digits, `$`, or `_`; `=` to initialize a value; whitespace before attributes; or the end of the tag');\n  }\n\n  /**\n   * After primary attribute name.\n   *\n   * ```markdown\n   * > | a <b c/> d\n   *           ^\n   * > | a <b c:d> e\n   *           ^\n   * > | a <b c=d> e\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributePrimaryNameAfter(code) {\n    // Start of a local name.\n    if (code === 58) {\n      effects.enter(tagAttributeNamePrefixMarkerType);\n      effects.consume(code);\n      effects.exit(tagAttributeNamePrefixMarkerType);\n      returnState = attributeLocalNameBefore;\n      return esWhitespaceStart;\n    }\n\n    // Initializer: start of an attribute value.\n    if (code === 61) {\n      effects.exit(tagAttributeNameType);\n      effects.enter(tagAttributeInitializerMarkerType);\n      effects.consume(code);\n      effects.exit(tagAttributeInitializerMarkerType);\n      returnState = attributeValueBefore;\n      return esWhitespaceStart;\n    }\n\n    // End of tag / new attribute.\n    if (code === 47 || code === 62 || code === 123 || markdownLineEndingOrSpace(code) || unicodeWhitespace(code) || code !== null && code >= 0 && idStart(code)) {\n      effects.exit(tagAttributeNameType);\n      effects.exit(tagAttributeType);\n      returnState = attributeBefore;\n      return esWhitespaceStart(code);\n    }\n    crash(code, 'after attribute name', 'a character that can start an attribute name, such as a letter, `$`, or `_`; `=` to initialize a value; or the end of the tag');\n  }\n\n  /**\n   * Before local attribute name.\n   *\n   * ```markdown\n   * > | a <b c:d/> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributeLocalNameBefore(code) {\n    // Start of a local name.\n    if (code !== null && code >= 0 && idStart(code)) {\n      effects.enter(tagAttributeNameLocalType);\n      effects.consume(code);\n      return attributeLocalName;\n    }\n    crash(code, 'before local attribute name', 'a character that can start an attribute name, such as a letter, `$`, or `_`; `=` to initialize a value; or the end of the tag');\n  }\n\n  /**\n   * In local attribute name.\n   *\n   * ```markdown\n   * > | a <b c:de/> f\n   *             ^\n   * > | a <b c:d=e/> f\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributeLocalName(code) {\n    // Continuation of name: remain.\n    if (code !== null && code >= 0 && idCont(code, {\n      jsx: true\n    })) {\n      effects.consume(code);\n      return attributeLocalName;\n    }\n\n    // End of local name (note that we don’t expect another colon).\n    if (code === 47 || code === 61 || code === 62 || code === 123 || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      effects.exit(tagAttributeNameLocalType);\n      effects.exit(tagAttributeNameType);\n      returnState = attributeLocalNameAfter;\n      return esWhitespaceStart(code);\n    }\n    crash(code, 'in local attribute name', 'an attribute name character such as letters, digits, `$`, or `_`; `=` to initialize a value; whitespace before attributes; or the end of the tag');\n  }\n\n  /**\n   * After local attribute name.\n   *\n   * ```markdown\n   * > | a <b c:d/> f\n   *             ^\n   * > | a <b c:d=e/> f\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributeLocalNameAfter(code) {\n    // Start of an attribute value.\n    if (code === 61) {\n      effects.enter(tagAttributeInitializerMarkerType);\n      effects.consume(code);\n      effects.exit(tagAttributeInitializerMarkerType);\n      returnState = attributeValueBefore;\n      return esWhitespaceStart;\n    }\n\n    // End of name.\n    if (code === 47 || code === 62 || code === 123 || code !== null && code >= 0 && idStart(code)) {\n      effects.exit(tagAttributeType);\n      return attributeBefore(code);\n    }\n    crash(code, 'after local attribute name', 'a character that can start an attribute name, such as a letter, `$`, or `_`; `=` to initialize a value; or the end of the tag');\n  }\n\n  /**\n   * After `=`, before value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"/> e\n   *            ^\n   * > | a <b c={d}/> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributeValueBefore(code) {\n    // Start of double- or single quoted value.\n    if (code === 34 || code === 39) {\n      effects.enter(tagAttributeValueLiteralType);\n      effects.enter(tagAttributeValueLiteralMarkerType);\n      effects.consume(code);\n      effects.exit(tagAttributeValueLiteralMarkerType);\n      marker = code;\n      return attributeValueQuotedStart;\n    }\n\n    // Attribute value expression.\n    if (code === 123) {\n      return factoryMdxExpression.call(self, effects, attributeValueExpressionAfter, tagAttributeValueExpressionType, tagAttributeValueExpressionMarkerType, tagAttributeValueExpressionValueType, acorn, acornOptions, addResult, false, false, allowLazy)(code);\n    }\n    crash(code, 'before attribute value', 'a character that can start an attribute value, such as `\"`, `\\'`, or `{`' + (code === 60 ? ' (note: to use an element or fragment as a prop value in MDX, use `{<element />}`)' : ''));\n  }\n\n  /**\n   * After attribute value expression.\n   *\n   * ```markdown\n   * > | a <b c={d} e/> f\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributeValueExpressionAfter(code) {\n    effects.exit(tagAttributeType);\n    returnState = attributeBefore;\n    return esWhitespaceStart(code);\n  }\n\n  /**\n   * Before quoted literal attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"/> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributeValueQuotedStart(code) {\n    if (code === null) {\n      crash(code, 'in attribute value', 'a corresponding closing quote `' + String.fromCodePoint(marker) + '`');\n    }\n    if (code === marker) {\n      effects.enter(tagAttributeValueLiteralMarkerType);\n      effects.consume(code);\n      effects.exit(tagAttributeValueLiteralMarkerType);\n      effects.exit(tagAttributeValueLiteralType);\n      effects.exit(tagAttributeType);\n      marker = undefined;\n      returnState = attributeBefore;\n      return esWhitespaceStart;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = attributeValueQuotedStart;\n      return esWhitespaceStart(code);\n    }\n    effects.enter(tagAttributeValueLiteralValueType);\n    return attributeValueQuoted(code);\n  }\n\n  /**\n   * In quoted literal attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"/> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributeValueQuoted(code) {\n    if (code === null || code === marker || markdownLineEnding(code)) {\n      effects.exit(tagAttributeValueLiteralValueType);\n      return attributeValueQuotedStart(code);\n    }\n    effects.consume(code);\n    return attributeValueQuoted;\n  }\n\n  /**\n   * After self-closing slash.\n   *\n   * ```markdown\n   * > | a <b/> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function selfClosing(code) {\n    if (code === 62) {\n      return tagEnd(code);\n    }\n    crash(code, 'after self-closing slash', '`>` to end the tag' + (code === 42 || code === 47 ? ' (note: JS comments in JSX tags are not supported in MDX)' : ''));\n  }\n\n  /**\n   * At final `>`.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagEnd(code) {\n    effects.enter(tagMarkerType);\n    effects.consume(code);\n    effects.exit(tagMarkerType);\n    effects.exit(tagType);\n    return ok;\n  }\n\n  /**\n   * Before optional ECMAScript whitespace.\n   *\n   * ```markdown\n   * > | a <a b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function esWhitespaceStart(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return esWhitespaceEolAfter;\n    }\n    if (markdownSpace(code) || unicodeWhitespace(code)) {\n      effects.enter('esWhitespace');\n      return esWhitespaceInside(code);\n    }\n    return returnState(code);\n  }\n\n  /**\n   * In ECMAScript whitespace.\n   *\n   * ```markdown\n   * > | a <a  b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function esWhitespaceInside(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('esWhitespace');\n      return esWhitespaceStart(code);\n    }\n    if (markdownSpace(code) || unicodeWhitespace(code)) {\n      effects.consume(code);\n      return esWhitespaceInside;\n    }\n    effects.exit('esWhitespace');\n    return returnState(code);\n  }\n\n  /**\n   * After eol in whitespace.\n   *\n   * ```markdown\n   * > | a <a\\nb> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function esWhitespaceEolAfter(code) {\n    // Lazy continuation in a flow tag is a syntax error.\n    if (!allowLazy && self.parser.lazy[self.now().line]) {\n      const error = new VFileMessage('Unexpected lazy line in container, expected line to be prefixed with `>` when in a block quote, whitespace when in a list, etc', self.now(), 'micromark-extension-mdx-jsx:unexpected-lazy');\n      error.url = trouble + '#unexpected-lazy-line-in-container-expected-line-to-be';\n      throw error;\n    }\n    return esWhitespaceStart(code);\n  }\n\n  /**\n   * Crash at a nonconforming character.\n   *\n   * @param {Code} code\n   * @param {string} at\n   * @param {string} expect\n   */\n  function crash(code, at, expect) {\n    const error = new VFileMessage('Unexpected ' + (code === null ? 'end of file' : 'character `' + (code === 96 ? '` ` `' : String.fromCodePoint(code)) + '` (' + serializeCharCode(code) + ')') + ' ' + at + ', expected ' + expect, self.now(), 'micromark-extension-mdx-jsx:unexpected-' + (code === null ? 'eof' : 'character'));\n    error.url = trouble + (code === null ? '#unexpected-end-of-file-at-expected-expect' : '#unexpected-character-at-expected-expect');\n    throw error;\n  }\n}\n\n/**\n * @param {NonNullable<Code>} code\n * @returns {string}\n */\nfunction serializeCharCode(code) {\n  return 'U+' + code.toString(16).toUpperCase().padStart(4, '0');\n}","/**\n * @typedef {import('micromark-factory-mdx-expression').Acorn} Acorn\n * @typedef {import('micromark-factory-mdx-expression').AcornOptions} AcornOptions\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {AcornOptions | undefined} acornOptions\n *   Acorn options.\n * @property {boolean | undefined} addResult\n *   Whether to add `estree` fields to tokens with results from acorn.\n */\n\nimport { factoryTag } from './factory-tag.js';\n\n/**\n * Parse JSX (text).\n *\n * @param {Acorn | undefined} acorn\n *   Acorn parser to use (optional).\n * @param {Options} options\n *   Configuration.\n * @returns {Construct}\n *   Construct.\n */\nexport function jsxText(acorn, options) {\n  return {\n    name: 'mdxJsxTextTag',\n    tokenize: tokenizeJsxText\n  };\n\n  /**\n   * MDX JSX (text).\n   *\n   * ```markdown\n   * > | a <b />.\n   *       ^^^^^\n   * ```\n   *\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeJsxText(effects, ok, nok) {\n    return factoryTag.call(this, effects, ok, nok, acorn, options.acornOptions, options.addResult, true, 'mdxJsxTextTag', 'mdxJsxTextTagMarker', 'mdxJsxTextTagClosingMarker', 'mdxJsxTextTagSelfClosingMarker', 'mdxJsxTextTagName', 'mdxJsxTextTagNamePrimary', 'mdxJsxTextTagNameMemberMarker', 'mdxJsxTextTagNameMember', 'mdxJsxTextTagNamePrefixMarker', 'mdxJsxTextTagNameLocal', 'mdxJsxTextTagExpressionAttribute', 'mdxJsxTextTagExpressionAttributeMarker', 'mdxJsxTextTagExpressionAttributeValue', 'mdxJsxTextTagAttribute', 'mdxJsxTextTagAttributeName', 'mdxJsxTextTagAttributeNamePrimary', 'mdxJsxTextTagAttributeNamePrefixMarker', 'mdxJsxTextTagAttributeNameLocal', 'mdxJsxTextTagAttributeInitializerMarker', 'mdxJsxTextTagAttributeValueLiteral', 'mdxJsxTextTagAttributeValueLiteralMarker', 'mdxJsxTextTagAttributeValueLiteralValue', 'mdxJsxTextTagAttributeValueExpression', 'mdxJsxTextTagAttributeValueExpressionMarker', 'mdxJsxTextTagAttributeValueExpressionValue');\n  }\n}","/**\n * @typedef {import('micromark-factory-mdx-expression').Acorn} Acorn\n * @typedef {import('micromark-factory-mdx-expression').AcornOptions} AcornOptions\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {AcornOptions | undefined} acornOptions\n *   Acorn options.\n * @property {boolean | undefined} addResult\n *   Whether to add `estree` fields to tokens with results from acorn.\n */\n\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { factorySpace } from 'micromark-factory-space';\nimport { factoryTag } from './factory-tag.js';\n\n/**\n * Parse JSX (flow).\n *\n * @param {Acorn | undefined} acorn\n *   Acorn parser to use (optional).\n * @param {Options} options\n *   Configuration.\n * @returns {Construct}\n *   Construct.\n */\nexport function jsxFlow(acorn, options) {\n  return {\n    name: 'mdxJsxFlowTag',\n    tokenize: tokenizeJsxFlow,\n    concrete: true\n  };\n\n  /**\n   * MDX JSX (flow).\n   *\n   * ```markdown\n   * > | <A />\n   *     ^^^^^\n   * ```\n   *\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeJsxFlow(effects, ok, nok) {\n    const self = this;\n    return start;\n\n    /**\n     * Start of MDX: JSX (flow).\n     *\n     * ```markdown\n     * > | <A />\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // To do: in `markdown-rs`, constructs need to parse the indent themselves.\n      // This should also be introduced in `micromark-js`.\n\n      return before(code);\n    }\n\n    /**\n     * After optional whitespace, before of MDX JSX (flow).\n     *\n     * ```markdown\n     * > | <A />\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function before(code) {\n      return factoryTag.call(self, effects, after, nok, acorn, options.acornOptions, options.addResult, false, 'mdxJsxFlowTag', 'mdxJsxFlowTagMarker', 'mdxJsxFlowTagClosingMarker', 'mdxJsxFlowTagSelfClosingMarker', 'mdxJsxFlowTagName', 'mdxJsxFlowTagNamePrimary', 'mdxJsxFlowTagNameMemberMarker', 'mdxJsxFlowTagNameMember', 'mdxJsxFlowTagNamePrefixMarker', 'mdxJsxFlowTagNameLocal', 'mdxJsxFlowTagExpressionAttribute', 'mdxJsxFlowTagExpressionAttributeMarker', 'mdxJsxFlowTagExpressionAttributeValue', 'mdxJsxFlowTagAttribute', 'mdxJsxFlowTagAttributeName', 'mdxJsxFlowTagAttributeNamePrimary', 'mdxJsxFlowTagAttributeNamePrefixMarker', 'mdxJsxFlowTagAttributeNameLocal', 'mdxJsxFlowTagAttributeInitializerMarker', 'mdxJsxFlowTagAttributeValueLiteral', 'mdxJsxFlowTagAttributeValueLiteralMarker', 'mdxJsxFlowTagAttributeValueLiteralValue', 'mdxJsxFlowTagAttributeValueExpression', 'mdxJsxFlowTagAttributeValueExpressionMarker', 'mdxJsxFlowTagAttributeValueExpressionValue')(code);\n    }\n\n    /**\n     * After an MDX JSX (flow) tag.\n     *\n     * ```markdown\n     * > | <A>\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function after(code) {\n      return markdownSpace(code) ? factorySpace(effects, end, \"whitespace\")(code) : end(code);\n    }\n\n    /**\n     * After an MDX JSX (flow) tag, after optional whitespace.\n     *\n     * ```markdown\n     * > | <A> <B>\n     *         ^\n     * ```\n     *\n     * @type {State}\n     */\n    function end(code) {\n      // We want to allow expressions directly after tags.\n      // See <https://github.com/micromark/micromark-extension-mdx-expression/blob/d5d92b9/packages/micromark-extension-mdx-expression/dev/lib/syntax.js#L183>\n      // for more info.\n      const leftBraceValue = self.parser.constructs.flow[123];\n      /* c8 ignore next 5 -- always a list when normalized. */\n      const constructs = Array.isArray(leftBraceValue) ? leftBraceValue : leftBraceValue ? [leftBraceValue] : [];\n      const expression = constructs.find(d => d.name === 'mdxFlowExpression');\n\n      // Another tag.\n      return code === 60 ?\n      // We can’t just say: fine. Lines of blocks have to be parsed until an eol/eof.\n      start(code) : code === 123 && expression ? effects.attempt(expression, end, nok)(code) : code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n    }\n  }\n}","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-factory-mdx-expression').Acorn} Acorn\n * @typedef {import('micromark-factory-mdx-expression').AcornOptions} AcornOptions\n */\n\n/**\n * @typedef Options\n *   Configuration (optional).\n * @property {Acorn | null | undefined} [acorn]\n *   Acorn parser to use (optional).\n * @property {AcornOptions | null | undefined} [acornOptions]\n *   Configuration for acorn (default: `{ecmaVersion: 2024, locations: true,\n *   sourceType: 'module'}`); all fields except `locations` can be set.\n * @property {boolean | null | undefined} [addResult=false]\n *   Whether to add `estree` fields to tokens with results from acorn\n *   (default: `false`).\n */\n\nimport { jsxText } from './jsx-text.js';\nimport { jsxFlow } from './jsx-flow.js';\n\n/**\n * Create an extension for `micromark` to enable MDX JSX syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable MDX\n *   JSX syntax.\n */\nexport function mdxJsx(options) {\n  const settings = options || {};\n  const acorn = settings.acorn;\n  /** @type {AcornOptions | undefined} */\n  let acornOptions;\n  if (acorn) {\n    if (!acorn.parse || !acorn.parseExpressionAt) {\n      throw new Error('Expected a proper `acorn` instance passed in as `options.acorn`');\n    }\n    acornOptions = Object.assign({\n      ecmaVersion: 2024,\n      sourceType: 'module'\n    }, settings.acornOptions, {\n      locations: true\n    });\n  } else if (settings.acornOptions || settings.addResult) {\n    throw new Error('Expected an `acorn` instance passed in as `options.acorn`');\n  }\n  return {\n    flow: {\n      [60]: jsxFlow(acorn || undefined, {\n        acornOptions,\n        addResult: settings.addResult || undefined\n      })\n    },\n    text: {\n      [60]: jsxText(acorn || undefined, {\n        acornOptions,\n        addResult: settings.addResult || undefined\n      })\n    }\n  };\n}","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\n/**\n * Create an extension for `micromark` to disable some CommonMark syntax (code\n * (indented), autolinks, and HTML (flow and text)) for MDX.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to disable\n *   some CommonMark syntax for MDX.\n */\nexport function mdxMd() {\n  return {\n    disable: {null: ['autolink', 'codeIndented', 'htmlFlow', 'htmlText']}\n  }\n}\n","/**\n * @typedef {import('micromark-util-events-to-acorn').Acorn} Acorn\n * @typedef {import('micromark-util-events-to-acorn').AcornOptions} AcornOptions\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef Options\n *   Configuration (required).\n * @property {Acorn} acorn\n *   Acorn parser to use (required).\n * @property {AcornOptions | null | undefined} [acornOptions]\n *   Configuration for acorn (default: `{ecmaVersion: 2024, locations: true,\n *   sourceType: 'module'}`); all fields except `locations` can be set.\n * @property {boolean | null | undefined} [addResult=false]\n *   Whether to add `estree` fields to tokens with results from acorn\n *   (default: `false`).\n */\n\nimport { blankLine } from 'micromark-core-commonmark';\nimport { asciiAlpha, markdownLineEnding } from 'micromark-util-character';\nimport { eventsToAcorn } from 'micromark-util-events-to-acorn';\nimport { positionFromEstree } from 'unist-util-position-from-estree';\nimport { VFileMessage } from 'vfile-message';\nconst blankLineBefore = {\n  tokenize: tokenizeNextBlank,\n  partial: true\n};\nconst trouble = 'https://github.com/micromark/micromark-extension-mdxjs-esm';\nconst allowedAcornTypes = new Set(['ExportAllDeclaration', 'ExportDefaultDeclaration', 'ExportNamedDeclaration', 'ImportDeclaration']);\n\n/**\n * Create an extension for `micromark` to enable MDX ESM syntax.\n *\n * @param {Options} options\n *   Configuration (required).\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable MDX\n *   ESM syntax.\n */\nexport function mdxjsEsm(options) {\n  const exportImportConstruct = {\n    tokenize: tokenizeExportImport,\n    concrete: true\n  };\n  if (!options || !options.acorn || !options.acorn.parse) {\n    throw new Error('Expected an `acorn` instance passed in as `options.acorn`');\n  }\n  const acorn = options.acorn;\n  const acornOptions = Object.assign({\n    ecmaVersion: 2024,\n    sourceType: 'module'\n  }, options.acornOptions, {\n    locations: true\n  });\n  return {\n    flow: {\n      [101]: exportImportConstruct,\n      [105]: exportImportConstruct\n    }\n  };\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeExportImport(effects, ok, nok) {\n    const self = this;\n    const definedModuleSpecifiers = self.parser.definedModuleSpecifiers || (self.parser.definedModuleSpecifiers = []);\n    const eventStart = this.events.length + 1; // Add the main `mdxjsEsm` token\n    let buffer = '';\n    return self.interrupt ? nok : start;\n\n    /**\n     * Start of MDX ESM.\n     *\n     * ```markdown\n     * > | import a from 'b'\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Only at the start of a line, not at whitespace or in a container.\n      if (self.now().column > 1) return nok(code);\n      effects.enter('mdxjsEsm');\n      effects.enter('mdxjsEsmData');\n      effects.consume(code);\n      // eslint-disable-next-line unicorn/prefer-code-point\n      buffer += String.fromCharCode(code);\n      return word;\n    }\n\n    /**\n     * In keyword.\n     *\n     * ```markdown\n     * > | import a from 'b'\n     *     ^^^^^^\n     * ```\n     *\n     * @type {State}\n     */\n    function word(code) {\n      if (asciiAlpha(code)) {\n        effects.consume(code);\n        // @ts-expect-error: definitely a number.\n        // eslint-disable-next-line unicorn/prefer-code-point\n        buffer += String.fromCharCode(code);\n        return word;\n      }\n      if ((buffer === 'import' || buffer === 'export') && code === 32) {\n        effects.consume(code);\n        return inside;\n      }\n      return nok(code);\n    }\n\n    /**\n     * In data.\n     *\n     * ```markdown\n     * > | import a from 'b'\n     *           ^\n     * ```\n     *\n     * @type {State}\n     */\n    function inside(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('mdxjsEsmData');\n        return lineStart(code);\n      }\n      effects.consume(code);\n      return inside;\n    }\n\n    /**\n     * At line ending.\n     *\n     * ```markdown\n     * > | import a from 'b'\n     *                      ^\n     *   | export {a}\n     * ```\n     *\n     * @type {State}\n     */\n    function lineStart(code) {\n      if (code === null) {\n        return atEnd(code);\n      }\n      if (markdownLineEnding(code)) {\n        return effects.check(blankLineBefore, atEnd, continuationStart)(code);\n      }\n      effects.enter('mdxjsEsmData');\n      return inside(code);\n    }\n\n    /**\n     * At line ending that continues.\n     *\n     * ```markdown\n     * > | import a from 'b'\n     *                      ^\n     *   | export {a}\n     * ```\n     *\n     * @type {State}\n     */\n    function continuationStart(code) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return lineStart;\n    }\n\n    /**\n     * At end of line (blank or eof).\n     *\n     * ```markdown\n     * > | import a from 'b'\n     *                      ^\n     * ```\n     *\n     * @type {State}\n     */\n    function atEnd(code) {\n      const result = eventsToAcorn(self.events.slice(eventStart), {\n        acorn,\n        acornOptions,\n        tokenTypes: ['mdxjsEsmData'],\n        prefix: definedModuleSpecifiers.length > 0 ? 'var ' + definedModuleSpecifiers.join(',') + '\\n' : ''\n      });\n      if (result.error) {\n        // There’s an error, which could be solved with more content, and there\n        // is more content.\n        if (code !== null && result.swallow) {\n          return continuationStart(code);\n        }\n        const error = new VFileMessage('Could not parse import/exports with acorn', {\n          cause: result.error,\n          place: {\n            line: result.error.loc.line,\n            column: result.error.loc.column + 1,\n            offset: result.error.pos\n          },\n          ruleId: 'acorn',\n          source: 'micromark-extension-mdxjs-esm'\n        });\n        error.url = trouble + '#could-not-parse-importexports-with-acorn';\n        throw error;\n      }\n      // Remove the `VariableDeclaration`.\n      if (definedModuleSpecifiers.length > 0) {\n        const declaration = result.estree.body.shift();\n      }\n      let index = -1;\n      while (++index < result.estree.body.length) {\n        const node = result.estree.body[index];\n        if (!allowedAcornTypes.has(node.type)) {\n          const error = new VFileMessage('Unexpected `' + node.type + '` in code: only import/exports are supported', {\n            place: positionFromEstree(node),\n            ruleId: 'non-esm',\n            source: 'micromark-extension-mdxjs-esm'\n          });\n          error.url = trouble + '#unexpected-type-in-code-only-importexports-are-supported';\n          throw error;\n        }\n\n        // Otherwise, when we’re not interrupting (hacky, because `interrupt` is\n        // used to parse containers and “sniff” if this is ESM), collect all the\n        // local values that are imported.\n        if (node.type === 'ImportDeclaration' && !self.interrupt) {\n          let index = -1;\n          while (++index < node.specifiers.length) {\n            const specifier = node.specifiers[index];\n            definedModuleSpecifiers.push(specifier.local.name);\n          }\n        }\n      }\n      Object.assign(effects.exit('mdxjsEsm'), options.addResult ? {\n        estree: result.estree\n      } : undefined);\n      return ok(code);\n    }\n  }\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeNextBlank(effects, ok, nok) {\n  return start;\n\n  /**\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"lineEndingBlank\");\n    effects.consume(code);\n    effects.exit(\"lineEndingBlank\");\n    return effects.attempt(blankLine, ok, nok);\n  }\n}","/**\n * @typedef {import('micromark-extension-mdx-expression').Options} Options\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {Parser} from 'acorn'\nimport acornJsx from 'acorn-jsx'\nimport {mdxExpression} from 'micromark-extension-mdx-expression'\nimport {mdxJsx} from 'micromark-extension-mdx-jsx'\nimport {mdxMd} from 'micromark-extension-mdx-md'\nimport {mdxjsEsm} from 'micromark-extension-mdxjs-esm'\nimport {combineExtensions} from 'micromark-util-combine-extensions'\n\n/**\n * Create an extension for `micromark` to enable MDX syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable MDX\n *   syntax.\n */\nexport function mdxjs(options) {\n  const settings = Object.assign(\n    {\n      acorn: Parser.extend(acornJsx()),\n      acornOptions: {ecmaVersion: 2024, sourceType: 'module'},\n      addResult: true\n    },\n    options\n  )\n\n  return combineExtensions([\n    mdxjsEsm(settings),\n    mdxExpression(settings),\n    mdxJsx(settings),\n    mdxMd()\n  ])\n}\n","/**\n * @typedef {import('mdast-util-mdx').ToMarkdownOptions} ToMarkdownOptions\n * @typedef {import('micromark-extension-mdxjs').Options} MicromarkOptions\n * @typedef {import('unified').Processor} Processor\n */\n\n/**\n * @typedef {MicromarkOptions & ToMarkdownOptions} Options\n *   Configuration.\n */\n\nimport {mdxFromMarkdown, mdxToMarkdown} from 'mdast-util-mdx'\nimport {mdxjs} from 'micromark-extension-mdxjs'\n\n/** @type {Readonly<Options>} */\nconst emptyOptions = {}\n\n/**\n * Add support for MDX (JSX: `<Video id={123} />`, export/imports: `export {x}\n * from 'y'`; and expressions: `{1 + 1}`).\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkMdx(options) {\n  // @ts-expect-error: TS is wrong about `this`.\n  // eslint-disable-next-line unicorn/no-this-assignment\n  const self = /** @type {Processor} */ (this)\n  const settings = options || emptyOptions\n  const data = self.data()\n\n  const micromarkExtensions =\n    data.micromarkExtensions || (data.micromarkExtensions = [])\n  const fromMarkdownExtensions =\n    data.fromMarkdownExtensions || (data.fromMarkdownExtensions = [])\n  const toMarkdownExtensions =\n    data.toMarkdownExtensions || (data.toMarkdownExtensions = [])\n\n  micromarkExtensions.push(mdxjs(settings))\n  fromMarkdownExtensions.push(mdxFromMarkdown())\n  toMarkdownExtensions.push(mdxToMarkdown(settings))\n}\n","/**\n * Some of the internal operations of micromark do lots of editing\n * operations on very large arrays. This runs into problems with two\n * properties of most circa-2020 JavaScript interpreters:\n *\n *  - Array-length modifications at the high end of an array (push/pop) are\n *    expected to be common and are implemented in (amortized) time\n *    proportional to the number of elements added or removed, whereas\n *    other operations (shift/unshift and splice) are much less efficient.\n *  - Function arguments are passed on the stack, so adding tens of thousands\n *    of elements to an array with `arr.push[...newElements]` will frequently\n *    cause stack overflows. (see <https://stackoverflow.com/questions/22123769/rangeerror-maximum-call-stack-size-exceeded-why>)\n *\n * SpliceBuffers are an implementation of gap buffers, which are a\n * generalization of the \"queue made of two stacks\" idea. The splice buffer\n * maintains a cursor, and moving the cursor has cost proportional to the\n * distance the cursor moves, but inserting, deleting, or splicing in\n * new information at the cursor is as efficient as the push/pop operation.\n * This allows for an efficient sequence of splices (or pushes, pops, shifts,\n * or unshifts) as long such edits happen at the same part of the array or\n * generally sweep through the array from the beginning to the end.\n *\n * The interface for splice buffers also supports large numbers of inputs by\n * passing a single array argument rather passing multiple arguments on the\n * function call stack.\n *\n * @template T\n *   Item type.\n */\nexport class SpliceBuffer {\n  /**\n   * @param {ReadonlyArray<T> | null | undefined} [initial]\n   *   Initial items (optional).\n   * @returns\n   *   Splice buffer.\n   */\n  constructor(initial) {\n    /** @type {Array<T>} */\n    this.left = initial ? [...initial] : [];\n    /** @type {Array<T>} */\n    this.right = [];\n  }\n\n  /**\n   * Array access;\n   * does not move the cursor.\n   *\n   * @param {number} index\n   *   Index.\n   * @return {T}\n   *   Item.\n   */\n  get(index) {\n    if (index < 0 || index >= this.left.length + this.right.length) {\n      throw new RangeError('Cannot access index `' + index + '` in a splice buffer of size `' + (this.left.length + this.right.length) + '`');\n    }\n    if (index < this.left.length) return this.left[index];\n    return this.right[this.right.length - index + this.left.length - 1];\n  }\n\n  /**\n   * The length of the splice buffer, one greater than the largest index in the\n   * array.\n   */\n  get length() {\n    return this.left.length + this.right.length;\n  }\n\n  /**\n   * Remove and return `list[0]`;\n   * moves the cursor to `0`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  shift() {\n    this.setCursor(0);\n    return this.right.pop();\n  }\n\n  /**\n   * Slice the buffer to get an array;\n   * does not move the cursor.\n   *\n   * @param {number} start\n   *   Start.\n   * @param {number | null | undefined} [end]\n   *   End (optional).\n   * @returns {Array<T>}\n   *   Array of items.\n   */\n  slice(start, end) {\n    /** @type {number} */\n    const stop = end === null || end === undefined ? Number.POSITIVE_INFINITY : end;\n    if (stop < this.left.length) {\n      return this.left.slice(start, stop);\n    }\n    if (start > this.left.length) {\n      return this.right.slice(this.right.length - stop + this.left.length, this.right.length - start + this.left.length).reverse();\n    }\n    return this.left.slice(start).concat(this.right.slice(this.right.length - stop + this.left.length).reverse());\n  }\n\n  /**\n   * Mimics the behavior of Array.prototype.splice() except for the change of\n   * interface necessary to avoid segfaults when patching in very large arrays.\n   *\n   * This operation moves cursor is moved to `start` and results in the cursor\n   * placed after any inserted items.\n   *\n   * @param {number} start\n   *   Start;\n   *   zero-based index at which to start changing the array;\n   *   negative numbers count backwards from the end of the array and values\n   *   that are out-of bounds are clamped to the appropriate end of the array.\n   * @param {number | null | undefined} [deleteCount=0]\n   *   Delete count (default: `0`);\n   *   maximum number of elements to delete, starting from start.\n   * @param {Array<T> | null | undefined} [items=[]]\n   *   Items to include in place of the deleted items (default: `[]`).\n   * @return {Array<T>}\n   *   Any removed items.\n   */\n  splice(start, deleteCount, items) {\n    /** @type {number} */\n    const count = deleteCount || 0;\n    this.setCursor(Math.trunc(start));\n    const removed = this.right.splice(this.right.length - count, Number.POSITIVE_INFINITY);\n    if (items) chunkedPush(this.left, items);\n    return removed.reverse();\n  }\n\n  /**\n   * Remove and return the highest-numbered item in the array, so\n   * `list[list.length - 1]`;\n   * Moves the cursor to `length`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  pop() {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    return this.left.pop();\n  }\n\n  /**\n   * Inserts a single item to the high-numbered side of the array;\n   * moves the cursor to `length`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  push(item) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    this.left.push(item);\n  }\n\n  /**\n   * Inserts many items to the high-numbered side of the array.\n   * Moves the cursor to `length`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  pushMany(items) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    chunkedPush(this.left, items);\n  }\n\n  /**\n   * Inserts a single item to the low-numbered side of the array;\n   * Moves the cursor to `0`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshift(item) {\n    this.setCursor(0);\n    this.right.push(item);\n  }\n\n  /**\n   * Inserts many items to the low-numbered side of the array;\n   * moves the cursor to `0`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshiftMany(items) {\n    this.setCursor(0);\n    chunkedPush(this.right, items.reverse());\n  }\n\n  /**\n   * Move the cursor to a specific position in the array. Requires\n   * time proportional to the distance moved.\n   *\n   * If `n < 0`, the cursor will end up at the beginning.\n   * If `n > length`, the cursor will end up at the end.\n   *\n   * @param {number} n\n   *   Position.\n   * @return {undefined}\n   *   Nothing.\n   */\n  setCursor(n) {\n    if (n === this.left.length || n > this.left.length && this.right.length === 0 || n < 0 && this.left.length === 0) return;\n    if (n < this.left.length) {\n      // Move cursor to the this.left\n      const removed = this.left.splice(n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.right, removed.reverse());\n    } else {\n      // Move cursor to the this.right\n      const removed = this.right.splice(this.left.length + this.right.length - n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.left, removed.reverse());\n    }\n  }\n}\n\n/**\n * Avoid stack overflow by pushing items onto the stack in segments\n *\n * @template T\n *   Item type.\n * @param {Array<T>} list\n *   List to inject into.\n * @param {ReadonlyArray<T>} right\n *   Items to inject.\n * @return {undefined}\n *   Nothing.\n */\nfunction chunkedPush(list, right) {\n  /** @type {number} */\n  let chunkStart = 0;\n  if (right.length < 10000) {\n    list.push(...right);\n  } else {\n    while (chunkStart < right.length) {\n      list.push(...right.slice(chunkStart, chunkStart + 10000));\n      chunkStart += 10000;\n    }\n  }\n}","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { SpliceBuffer } from './lib/splice-buffer.js';\n\n// Hidden API exposed for testing.\nexport { SpliceBuffer } from './lib/splice-buffer.js';\n\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} eventsArray\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\n// eslint-disable-next-line complexity\nexport function subtokenize(eventsArray) {\n  /** @type {Record<string, number>} */\n  const jumps = {};\n  let index = -1;\n  /** @type {Event} */\n  let event;\n  /** @type {number | undefined} */\n  let lineIndex;\n  /** @type {number} */\n  let otherIndex;\n  /** @type {Event} */\n  let otherEvent;\n  /** @type {Array<Event>} */\n  let parameters;\n  /** @type {Array<Event>} */\n  let subevents;\n  /** @type {boolean | undefined} */\n  let more;\n  const events = new SpliceBuffer(eventsArray);\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index];\n    }\n    event = events.get(index);\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (index && event[1].type === \"chunkFlow\" && events.get(index - 1)[1].type === \"listItemPrefix\") {\n      subevents = event[1]._tokenizer.events;\n      otherIndex = 0;\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"lineEndingBlank\") {\n        otherIndex += 2;\n      }\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"content\") {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === \"content\") {\n            break;\n          }\n          if (subevents[otherIndex][1].type === \"chunkText\") {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true;\n            otherIndex++;\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index));\n        index = jumps[index];\n        more = true;\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index;\n      lineIndex = undefined;\n      while (otherIndex--) {\n        otherEvent = events.get(otherIndex);\n        if (otherEvent[1].type === \"lineEnding\" || otherEvent[1].type === \"lineEndingBlank\") {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events.get(lineIndex)[1].type = \"lineEndingBlank\";\n            }\n            otherEvent[1].type = \"lineEnding\";\n            lineIndex = otherIndex;\n          }\n        } else {\n          break;\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events.get(lineIndex)[1].start);\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index);\n        parameters.unshift(event);\n        events.splice(lineIndex, index - lineIndex + 1, parameters);\n      }\n    }\n  }\n\n  // The changes to the `events` buffer must be copied back into the eventsArray\n  splice(eventsArray, 0, Number.POSITIVE_INFINITY, events.slice(0));\n  return !more;\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {SpliceBuffer<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events.get(eventIndex)[1];\n  const context = events.get(eventIndex)[2];\n  let startPosition = eventIndex - 1;\n  /** @type {Array<number>} */\n  const startPositions = [];\n  const tokenizer = token._tokenizer || context.parser[token.contentType](token.start);\n  const childEvents = tokenizer.events;\n  /** @type {Array<[number, number]>} */\n  const jumps = [];\n  /** @type {Record<string, number>} */\n  const gaps = {};\n  /** @type {Array<Chunk>} */\n  let stream;\n  /** @type {Token | undefined} */\n  let previous;\n  let index = -1;\n  /** @type {Token | undefined} */\n  let current = token;\n  let adjust = 0;\n  let start = 0;\n  const breaks = [start];\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events.get(++startPosition)[1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition);\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current);\n      if (!current.next) {\n        stream.push(null);\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start);\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true;\n      }\n      tokenizer.write(stream);\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined;\n      }\n    }\n\n    // Unravel the next token.\n    previous = current;\n    current = current.next;\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token;\n  while (++index < childEvents.length) {\n    if (\n    // Find a void token that includes a break.\n    childEvents[index][0] === 'exit' && childEvents[index - 1][0] === 'enter' && childEvents[index][1].type === childEvents[index - 1][1].type && childEvents[index][1].start.line !== childEvents[index][1].end.line) {\n      start = index + 1;\n      breaks.push(start);\n      // Help GC.\n      current._tokenizer = undefined;\n      current.previous = undefined;\n      current = current.next;\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = [];\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined;\n    current.previous = undefined;\n  } else {\n    breaks.pop();\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length;\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1]);\n    const start = startPositions.pop();\n    jumps.push([start, start + slice.length - 1]);\n    events.splice(start, 2, slice);\n  }\n  jumps.reverse();\n  index = -1;\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];\n    adjust += jumps[index][1] - jumps[index][0] - 1;\n  }\n  return gaps;\n}","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {undefined}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {undefined}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { subtokenize } from 'micromark-util-subtokenize';\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n};\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n};\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous;\n  return chunkStart;\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter(\"content\");\n    previous = effects.enter(\"chunkContent\", {\n      contentType: \"content\"\n    });\n    return chunkInside(code);\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code);\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(continuationConstruct, contentContinue, contentEnd)(code);\n    }\n\n    // Data.\n    effects.consume(code);\n    return chunkInside;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit(\"chunkContent\");\n    effects.exit(\"content\");\n    return ok(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code);\n    effects.exit(\"chunkContent\");\n    previous.next = effects.enter(\"chunkContent\", {\n      contentType: \"content\",\n      previous\n    });\n    previous = previous.next;\n    return chunkInside;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this;\n  return startLookahead;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit(\"chunkContent\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, prefixed, \"linePrefix\");\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1];\n    if (!self.parser.constructs.disable.null.includes('codeIndented') && tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4) {\n      return ok(code);\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {undefined}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {undefined}\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | undefined}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {line, column, offset, _index, _bufferIndex} = point\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    }\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {undefined}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {undefined}\n   */\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n      return Array.isArray(constructs) /* c8 ignore next 1 */\n        ? handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        if (list.length === 0) {\n          return bogusState\n        }\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true\n        info.restore()\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {undefined}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n\n    /**\n     * Restore state.\n     *\n     * @returns {undefined}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {undefined}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n      } else {\n        view.shift()\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"thematicBreak\");\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code;\n    return atBreak(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter(\"thematicBreakSequence\");\n      return sequence(code);\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit(\"thematicBreak\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code);\n      size++;\n      return sequence;\n    }\n    effects.exit(\"thematicBreakSequence\");\n    return markdownSpace(code) ? factorySpace(effects, atBreak, \"whitespace\")(code) : atBreak(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiDigit, markdownSpace } from 'micromark-util-character';\nimport { blankLine } from './blank-line.js';\nimport { thematicBreak } from './thematic-break.js';\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n};\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n};\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n};\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this;\n  const tail = self.events[self.events.length - 1];\n  let initialSize = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    const kind = self.containerState.type || (code === 42 || code === 43 || code === 45 ? \"listUnordered\" : \"listOrdered\");\n    if (kind === \"listUnordered\" ? !self.containerState.marker || code === self.containerState.marker : asciiDigit(code)) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind;\n        effects.enter(kind, {\n          _container: true\n        });\n      }\n      if (kind === \"listUnordered\") {\n        effects.enter(\"listItemPrefix\");\n        return code === 42 || code === 45 ? effects.check(thematicBreak, nok, atMarker)(code) : atMarker(code);\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter(\"listItemPrefix\");\n        effects.enter(\"listItemValue\");\n        return inside(code);\n      }\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code);\n      return inside;\n    }\n    if ((!self.interrupt || size < 2) && (self.containerState.marker ? code === self.containerState.marker : code === 41 || code === 46)) {\n      effects.exit(\"listItemValue\");\n      return atMarker(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter(\"listItemMarker\");\n    effects.consume(code);\n    effects.exit(\"listItemMarker\");\n    self.containerState.marker = self.containerState.marker || code;\n    return effects.check(blankLine,\n    // Can’t be empty when interrupting.\n    self.interrupt ? nok : onBlank, effects.attempt(listItemPrefixWhitespaceConstruct, endOfPrefix, otherPrefix));\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true;\n    initialSize++;\n    return endOfPrefix(code);\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"listItemPrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"listItemPrefixWhitespace\");\n      return endOfPrefix;\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size = initialSize + self.sliceSerialize(effects.exit(\"listItemPrefix\"), true).length;\n    return ok(code);\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this;\n  self.containerState._closeFlow = undefined;\n  return effects.check(blankLine, onBlank, notBlank);\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines = self.containerState.furtherBlankLines || self.containerState.initialBlankLine;\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(effects, ok, \"listItemIndent\", self.containerState.size + 1)(code);\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined;\n      self.containerState.initialBlankLine = undefined;\n      return notInCurrentItem(code);\n    }\n    self.containerState.furtherBlankLines = undefined;\n    self.containerState.initialBlankLine = undefined;\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code);\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true;\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined;\n    // Always populated by defaults.\n\n    return factorySpace(effects, effects.attempt(list, ok, nok), \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, \"listItemIndent\", self.containerState.size + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"listItemIndent\" && tail[2].sliceSerialize(tail[1], true).length === self.containerState.size ? ok(code) : nok(code);\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type);\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this;\n\n  // Always populated by defaults.\n\n  return factorySpace(effects, afterPrefix, \"listItemPrefixWhitespace\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4 + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return !markdownSpace(code) && tail && tail[1].type === \"listItemPrefixWhitespace\" ? ok(code) : nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState;\n      if (!state.open) {\n        effects.enter(\"blockQuote\", {\n          _container: true\n        });\n        state.open = true;\n      }\n      effects.enter(\"blockQuotePrefix\");\n      effects.enter(\"blockQuoteMarker\");\n      effects.consume(code);\n      effects.exit(\"blockQuoteMarker\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"blockQuotePrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"blockQuotePrefixWhitespace\");\n      effects.exit(\"blockQuotePrefix\");\n      return ok;\n    }\n    effects.exit(\"blockQuotePrefix\");\n    return ok(code);\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this;\n  return contStart;\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(effects, contBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return contBefore(code);\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code);\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit(\"blockQuote\");\n}","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return enclosed\n    }\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n    if (code === 41) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return raw\n    }\n    return raw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === 40 ? 41 : code\n      return begin\n    }\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atBreak, 'linePrefix')\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return inside\n    }\n    return inside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns {State}\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factorySpace } from 'micromark-factory-space';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n};\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this;\n  /** @type {string} */\n  let identifier;\n  return start;\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter(\"definition\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(self, effects, labelAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionLabel\", \"definitionLabelMarker\", \"definitionLabelString\")(code);\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1));\n    if (code === 58) {\n      effects.enter(\"definitionMarker\");\n      effects.consume(code);\n      effects.exit(\"definitionMarker\");\n      return markerAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, destinationBefore)(code) : destinationBefore(code);\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(effects, destinationAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionDestination\", \"definitionDestinationLiteral\", \"definitionDestinationLiteralMarker\", \"definitionDestinationRaw\", \"definitionDestinationString\")(code);\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code);\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code) ? factorySpace(effects, afterWhitespace, \"whitespace\")(code) : afterWhitespace(code);\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"definition\");\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier);\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore;\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, beforeMarker)(code) : nok(code);\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(effects, titleAfter, nok, \"definitionTitle\", \"definitionTitleMarker\", \"definitionTitleString\")(code);\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code) ? factorySpace(effects, titleAfterOptionalWhitespace, \"whitespace\")(code) : titleAfterOptionalWhitespace(code);\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n};\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter(\"codeIndented\");\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? atBreak(code) : nok(code);\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code);\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return inside(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return inside;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit(\"codeIndented\");\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this;\n  return furtherStart;\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return furtherStart;\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? ok(code) : markdownLineEnding(code) ? furtherStart(code) : nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n};\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2;\n  let contentStart = 3;\n  /** @type {Token} */\n  let content;\n  /** @type {Token} */\n  let text;\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === \"whitespace\") {\n    contentStart += 2;\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (contentEnd - 2 > contentStart && events[contentEnd][1].type === \"whitespace\") {\n    contentEnd -= 2;\n  }\n  if (events[contentEnd][1].type === \"atxHeadingSequence\" && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === \"whitespace\")) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: \"atxHeadingText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    };\n    text = {\n      type: \"chunkText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: \"text\"\n    };\n    splice(events, contentStart, contentEnd - contentStart + 1, [['enter', content, context], ['enter', text, context], ['exit', text, context], ['exit', content, context]]);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter(\"atxHeading\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"atxHeadingSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code);\n      return sequenceOpen;\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingSequence\");\n      return atBreak(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter(\"atxHeadingSequence\");\n      return sequenceFurther(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"atxHeading\");\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, \"whitespace\")(code);\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter(\"atxHeadingText\");\n    return data(code);\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code);\n      return sequenceFurther;\n    }\n    effects.exit(\"atxHeadingSequence\");\n    return atBreak(code);\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingText\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n};\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length;\n  /** @type {number | undefined} */\n  let content;\n  /** @type {number | undefined} */\n  let text;\n  /** @type {number | undefined} */\n  let definition;\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === \"content\") {\n        content = index;\n        break;\n      }\n      if (events[index][1].type === \"paragraph\") {\n        text = index;\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === \"content\") {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1);\n      }\n      if (!definition && events[index][1].type === \"definition\") {\n        definition = index;\n      }\n    }\n  }\n  const heading = {\n    type: \"setextHeading\",\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = \"setextHeadingText\";\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context]);\n    events.splice(definition + 1, 0, ['exit', events[content][1], context]);\n    events[content][1].end = Object.assign({}, events[definition][1].end);\n  } else {\n    events[content][1] = heading;\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context]);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length;\n    /** @type {boolean | undefined} */\n    let paragraph;\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (self.events[index][1].type !== \"lineEnding\" && self.events[index][1].type !== \"linePrefix\" && self.events[index][1].type !== \"content\") {\n        paragraph = self.events[index][1].type === \"paragraph\";\n        break;\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter(\"setextHeadingLine\");\n      marker = code;\n      return before(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"setextHeadingLineSequence\");\n    return inside(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    effects.exit(\"setextHeadingLineSequence\");\n    return markdownSpace(code) ? factorySpace(effects, after, \"lineSuffix\")(code) : after(code);\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"setextHeadingLine\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { asciiAlpha, asciiAlphanumeric, markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { htmlBlockNames, htmlRawNames } from 'micromark-util-html-tag-name';\nimport { blankLine } from './blank-line.js';\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n};\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n};\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n};\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length;\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === \"htmlFlow\") {\n      break;\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === \"linePrefix\") {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start;\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start;\n    // Remove the line prefix.\n    events.splice(index - 2, 2);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this;\n  /** @type {number} */\n  let marker;\n  /** @type {boolean} */\n  let closingTag;\n  /** @type {string} */\n  let buffer;\n  /** @type {number} */\n  let index;\n  /** @type {Code} */\n  let markerB;\n  return start;\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"htmlFlow\");\n    effects.enter(\"htmlFlowData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      closingTag = true;\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      marker = 3;\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      marker = 2;\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      marker = 5;\n      index = 0;\n      return cdataOpenInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      marker = 4;\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation;\n      }\n      return cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (code === null || code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      const slash = code === 47;\n      const name = buffer.toLowerCase();\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1;\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6;\n        if (slash) {\n          effects.consume(code);\n          return basicSelfClosing;\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      marker = 7;\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line] ? nok(code) : closingTag ? completeClosingTagAfter(code) : completeAttributeNameBefore(code);\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeClosingTagAfter;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return completeEnd;\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameBefore;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    return completeAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameAfter;\n    }\n    return completeAttributeNameBefore(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      markerB = code;\n      return completeAttributeValueQuoted;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    return completeAttributeValueUnquoted(code);\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code);\n      markerB = null;\n      return completeAttributeValueQuotedAfter;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 47 || code === 60 || code === 61 || code === 62 || code === 96 || markdownLineEndingOrSpace(code)) {\n      return completeAttributeNameAfter(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationCommentInside;\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code);\n      return continuationRawTagOpen;\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code);\n      return continuationClose;\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code);\n      return continuationCdataInside;\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit(\"htmlFlowData\");\n      return effects.check(blankLineBefore, continuationAfter, continuationStart)(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationStart(code);\n    }\n    effects.consume(code);\n    return continuation;\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(nonLazyContinuationStart, continuationStartNonLazy, continuationAfter)(code);\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return continuationBefore;\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code);\n    }\n    effects.enter(\"htmlFlowData\");\n    return continuation(code);\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code);\n      buffer = '';\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase();\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code);\n        return continuationClose;\n      }\n      return continuation(code);\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code);\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code);\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return continuationClose;\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationAfter(code);\n    }\n    effects.consume(code);\n    return continuationClose;\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit(\"htmlFlow\");\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start;\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return effects.attempt(blankLine, ok, nok);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n};\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this;\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  };\n  let initialPrefix = 0;\n  let sizeOpen = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code);\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1];\n    initialPrefix = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n    marker = code;\n    effects.enter(\"codeFenced\");\n    effects.enter(\"codeFencedFence\");\n    effects.enter(\"codeFencedFenceSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++;\n      effects.consume(code);\n      return sequenceOpen;\n    }\n    if (sizeOpen < 3) {\n      return nok(code);\n    }\n    effects.exit(\"codeFencedFenceSequence\");\n    return markdownSpace(code) ? factorySpace(effects, infoBefore, \"whitespace\")(code) : infoBefore(code);\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFencedFence\");\n      return self.interrupt ? ok(code) : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFencedFenceInfo\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return info(code);\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return infoBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return factorySpace(effects, metaBefore, \"whitespace\")(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return info;\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code);\n    }\n    effects.enter(\"codeFencedFenceMeta\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return meta(code);\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceMeta\");\n      return infoBefore(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return meta;\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code);\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return contentStart;\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code) ? factorySpace(effects, beforeContentChunk, \"linePrefix\", initialPrefix + 1)(code) : beforeContentChunk(code);\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return contentChunk(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return beforeContentChunk(code);\n    }\n    effects.consume(code);\n    return contentChunk;\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit(\"codeFenced\");\n    return ok(code);\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0;\n    return startBefore;\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return start;\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter(\"codeFencedFence\");\n      return markdownSpace(code) ? factorySpace(effects, beforeSequenceClose, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : beforeSequenceClose(code);\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter(\"codeFencedFenceSequence\");\n        return sequenceClose(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++;\n        effects.consume(code);\n        return sequenceClose;\n      }\n      if (size >= sizeOpen) {\n        effects.exit(\"codeFencedFenceSequence\");\n        return markdownSpace(code) ? factorySpace(effects, sequenceCloseAfter, \"whitespace\")(code) : sequenceCloseAfter(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit(\"codeFencedFence\");\n        return ok(code);\n      }\n      return nok(code);\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineStart;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { asciiAlphanumeric, asciiDigit, asciiHexDigit } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  /** @type {number} */\n  let max;\n  /** @type {(code: Code) => boolean} */\n  let test;\n  return start;\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterReference\");\n    effects.enter(\"characterReferenceMarker\");\n    effects.consume(code);\n    effects.exit(\"characterReferenceMarker\");\n    return open;\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter(\"characterReferenceMarkerNumeric\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerNumeric\");\n      return numeric;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 31;\n    test = asciiAlphanumeric;\n    return value(code);\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter(\"characterReferenceMarkerHexadecimal\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerHexadecimal\");\n      effects.enter(\"characterReferenceValue\");\n      max = 6;\n      test = asciiHexDigit;\n      return value;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 7;\n    test = asciiDigit;\n    return value(code);\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit(\"characterReferenceValue\");\n      if (test === asciiAlphanumeric && !decodeNamedCharacterReference(self.sliceSerialize(token))) {\n        return nok(code);\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter(\"characterReferenceMarker\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarker\");\n      effects.exit(\"characterReference\");\n      return ok;\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code);\n      return value;\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { asciiPunctuation } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterEscape\");\n    effects.enter(\"escapeMarker\");\n    effects.consume(code);\n    effects.exit(\"escapeMarker\");\n    return inside;\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter(\"characterEscapeValue\");\n      effects.consume(code);\n      effects.exit(\"characterEscapeValue\");\n      effects.exit(\"characterEscape\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, ok, \"linePrefix\");\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n};\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n};\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n};\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n};\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1;\n  while (++index < events.length) {\n    const token = events[index][1];\n    if (token.type === \"labelImage\" || token.type === \"labelLink\" || token.type === \"labelEnd\") {\n      // Remove the marker.\n      events.splice(index + 1, token.type === \"labelImage\" ? 4 : 2);\n      token.type = \"data\";\n      index++;\n    }\n  }\n  return events;\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length;\n  let offset = 0;\n  /** @type {Token} */\n  let token;\n  /** @type {number | undefined} */\n  let open;\n  /** @type {number | undefined} */\n  let close;\n  /** @type {Array<Event>} */\n  let media;\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1];\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (token.type === \"link\" || token.type === \"labelLink\" && token._inactive) {\n        break;\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === \"labelLink\") {\n        token._inactive = true;\n      }\n    } else if (close) {\n      if (events[index][0] === 'enter' && (token.type === \"labelImage\" || token.type === \"labelLink\") && !token._balanced) {\n        open = index;\n        if (token.type !== \"labelLink\") {\n          offset = 2;\n          break;\n        }\n      }\n    } else if (token.type === \"labelEnd\") {\n      close = index;\n    }\n  }\n  const group = {\n    type: events[open][1].type === \"labelLink\" ? \"link\" : \"image\",\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n  const label = {\n    type: \"label\",\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  };\n  const text = {\n    type: \"labelText\",\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  };\n  media = [['enter', group, context], ['enter', label, context]];\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3));\n\n  // Text open.\n  media = push(media, [['enter', text, context]]);\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(media, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + offset + 4, close - 3), context));\n\n  // Text close, marker close, label close.\n  media = push(media, [['exit', text, context], events[close - 2], events[close - 1], ['exit', label, context]]);\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1));\n\n  // Media close.\n  media = push(media, [['exit', group, context]]);\n  splice(events, open, events.length, media);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  /** @type {Token} */\n  let labelStart;\n  /** @type {boolean} */\n  let defined;\n\n  // Find an opening.\n  while (index--) {\n    if ((self.events[index][1].type === \"labelImage\" || self.events[index][1].type === \"labelLink\") && !self.events[index][1]._balanced) {\n      labelStart = self.events[index][1];\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code);\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code);\n    }\n    defined = self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    })));\n    effects.enter(\"labelEnd\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelEnd\");\n    return after;\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(resourceConstruct, labelEndOk, defined ? labelEndOk : labelEndNok)(code);\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(referenceFullConstruct, labelEndOk, defined ? referenceNotFull : labelEndNok)(code);\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code);\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(referenceCollapsedConstruct, labelEndOk, labelEndNok)(code);\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code);\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true;\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart;\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter(\"resource\");\n    effects.enter(\"resourceMarker\");\n    effects.consume(code);\n    effects.exit(\"resourceMarker\");\n    return resourceBefore;\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceOpen)(code) : resourceOpen(code);\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code);\n    }\n    return factoryDestination(effects, resourceDestinationAfter, resourceDestinationMissing, \"resourceDestination\", \"resourceDestinationLiteral\", \"resourceDestinationLiteralMarker\", \"resourceDestinationRaw\", \"resourceDestinationString\", 32)(code);\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceBetween)(code) : resourceEnd(code);\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code);\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(effects, resourceTitleAfter, nok, \"resourceTitle\", \"resourceTitleMarker\", \"resourceTitleString\")(code);\n    }\n    return resourceEnd(code);\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceEnd)(code) : resourceEnd(code);\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter(\"resourceMarker\");\n      effects.consume(code);\n      effects.exit(\"resourceMarker\");\n      effects.exit(\"resource\");\n      return ok;\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this;\n  return referenceFull;\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(self, effects, referenceFullAfter, referenceFullMissing, \"reference\", \"referenceMarker\", \"referenceString\")(code);\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1))) ? ok(code) : nok(code);\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart;\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter(\"reference\");\n    effects.enter(\"referenceMarker\");\n    effects.consume(code);\n    effects.exit(\"referenceMarker\");\n    return referenceCollapsedOpen;\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter(\"referenceMarker\");\n      effects.consume(code);\n      effects.exit(\"referenceMarker\");\n      effects.exit(\"reference\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelImage\");\n    effects.enter(\"labelImageMarker\");\n    effects.consume(code);\n    effects.exit(\"labelImageMarker\");\n    return open;\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter(\"labelMarker\");\n      effects.consume(code);\n      effects.exit(\"labelMarker\");\n      effects.exit(\"labelImage\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { push, splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n};\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n// eslint-disable-next-line complexity\nfunction resolveAllAttention(events, context) {\n  let index = -1;\n  /** @type {number} */\n  let open;\n  /** @type {Token} */\n  let group;\n  /** @type {Token} */\n  let text;\n  /** @type {Token} */\n  let openingSequence;\n  /** @type {Token} */\n  let closingSequence;\n  /** @type {number} */\n  let use;\n  /** @type {Array<Event>} */\n  let nextEvents;\n  /** @type {number} */\n  let offset;\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (events[index][0] === 'enter' && events[index][1].type === 'attentionSequence' && events[index][1]._close) {\n      open = index;\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (events[open][0] === 'exit' && events[open][1].type === 'attentionSequence' && events[open][1]._open &&\n        // If the markers are the same:\n        context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index][1]).charCodeAt(0)) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if ((events[open][1]._close || events[index][1]._open) && (events[index][1].end.offset - events[index][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index][1].end.offset - events[index][1].start.offset) % 3)) {\n            continue;\n          }\n\n          // Number of markers to use from the sequence.\n          use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index][1].end.offset - events[index][1].start.offset > 1 ? 2 : 1;\n          const start = Object.assign({}, events[open][1].end);\n          const end = Object.assign({}, events[index][1].start);\n          movePoint(start, -use);\n          movePoint(end, use);\n          openingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start,\n            end: Object.assign({}, events[open][1].end)\n          };\n          closingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start: Object.assign({}, events[index][1].start),\n            end\n          };\n          text = {\n            type: use > 1 ? \"strongText\" : \"emphasisText\",\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          };\n          group = {\n            type: use > 1 ? \"strong\" : \"emphasis\",\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          };\n          events[open][1].end = Object.assign({}, openingSequence.start);\n          events[index][1].start = Object.assign({}, closingSequence.end);\n          nextEvents = [];\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [['enter', events[open][1], context], ['exit', events[open][1], context]]);\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [['enter', group, context], ['enter', openingSequence, context], ['exit', openingSequence, context], ['enter', text, context]]);\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(nextEvents, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + 1, index), context));\n\n          // Closing.\n          nextEvents = push(nextEvents, [['exit', text, context], ['enter', closingSequence, context], ['exit', closingSequence, context], ['exit', group, context]]);\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2;\n            nextEvents = push(nextEvents, [['enter', events[index][1], context], ['exit', events[index][1], context]]);\n          } else {\n            offset = 0;\n          }\n          splice(events, open - 1, index - open + 3, nextEvents);\n          index = open + nextEvents.length - offset - 2;\n          break;\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1;\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data';\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null;\n  const previous = this.previous;\n  const before = classifyCharacter(previous);\n\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code;\n    effects.enter('attentionSequence');\n    return inside(code);\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    const token = effects.exit('attentionSequence');\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code);\n\n    // Always populated by defaults.\n\n    const open = !after || after === 2 && before || attentionMarkers.includes(code);\n    const close = !before || before === 2 && after || attentionMarkers.includes(previous);\n    token._open = Boolean(marker === 42 ? open : open && (before || !close));\n    token._close = Boolean(marker === 42 ? close : close && (after || !open));\n    return ok(code);\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {undefined}\n */\nfunction movePoint(point, offset) {\n  point.column += offset;\n  point.offset += offset;\n  point._bufferIndex += offset;\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { asciiAlpha, asciiAlphanumeric, asciiAtext, asciiControl } from 'micromark-util-character';\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"autolink\");\n    effects.enter(\"autolinkMarker\");\n    effects.consume(code);\n    effects.exit(\"autolinkMarker\");\n    effects.enter(\"autolinkProtocol\");\n    return open;\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return schemeOrEmailAtext;\n    }\n    if (code === 64) {\n      return nok(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1;\n      return schemeInsideOrEmailAtext(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code);\n      size = 0;\n      return urlInside;\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if ((code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) && size++ < 32) {\n      effects.consume(code);\n      return schemeInsideOrEmailAtext;\n    }\n    size = 0;\n    return emailAtext(code);\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit(\"autolinkProtocol\");\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return urlInside;\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code);\n      return emailAtSignOrDot;\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code);\n      return emailAtext;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code);\n      size = 0;\n      return emailAtSignOrDot;\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit(\"autolinkProtocol\").type = \"autolinkEmail\";\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n    return emailValue(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel;\n      effects.consume(code);\n      return next;\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiAlpha, asciiAlphanumeric, markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code> | undefined} */\n  let marker;\n  /** @type {number} */\n  let index;\n  /** @type {State} */\n  let returnState;\n  return start;\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"htmlText\");\n    effects.enter(\"htmlTextData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instruction;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      index = 0;\n      return cdataOpenInside;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return declaration;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 45) {\n      effects.consume(code);\n      return commentClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return comment;\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return comment(code);\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62 ? end(code) : code === 45 ? commentClose(code) : comment(code);\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      return index === value.length ? cdata : cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return cdata;\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return declaration;\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instructionClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return instruction;\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return tagCloseBetween(code);\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagCloseBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return end;\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    return tagOpenAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeNameAfter;\n    }\n    return tagOpenBetween(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      marker = code;\n      return tagOpenAttributeValueQuoted;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code);\n      marker = undefined;\n      return tagOpenAttributeValueQuotedAfter;\n    }\n    if (code === null) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 60 || code === 61 || code === 96) {\n      return nok(code);\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code);\n      effects.exit(\"htmlTextData\");\n      effects.exit(\"htmlText\");\n      return ok;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit(\"htmlTextData\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineEndingAfter;\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code) ? factorySpace(effects, lineEndingAfterPrefix, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : lineEndingAfterPrefix(code);\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter(\"htmlTextData\");\n    return returnState(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelLink\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelLink\");\n    return after;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"hardBreakEscape\");\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit(\"hardBreakEscape\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n};\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4;\n  let headEnterIndex = 3;\n  /** @type {number} */\n  let index;\n  /** @type {number | undefined} */\n  let enter;\n\n  // If we start and end with an EOL or a space.\n  if ((events[headEnterIndex][1].type === \"lineEnding\" || events[headEnterIndex][1].type === 'space') && (events[tailExitIndex][1].type === \"lineEnding\" || events[tailExitIndex][1].type === 'space')) {\n    index = headEnterIndex;\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === \"codeTextData\") {\n        // Then we have padding.\n        events[headEnterIndex][1].type = \"codeTextPadding\";\n        events[tailExitIndex][1].type = \"codeTextPadding\";\n        headEnterIndex += 2;\n        tailExitIndex -= 2;\n        break;\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1;\n  tailExitIndex++;\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== \"lineEnding\") {\n        enter = index;\n      }\n    } else if (index === tailExitIndex || events[index][1].type === \"lineEnding\") {\n      events[enter][1].type = \"codeTextData\";\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end;\n        events.splice(enter + 2, index - enter - 2);\n        tailExitIndex -= index - enter - 2;\n        index = enter + 2;\n      }\n      enter = undefined;\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return code !== 96 || this.events[this.events.length - 1][1].type === \"characterEscape\";\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this;\n  let sizeOpen = 0;\n  /** @type {number} */\n  let size;\n  /** @type {Token} */\n  let token;\n  return start;\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"codeText\");\n    effects.enter(\"codeTextSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code);\n      sizeOpen++;\n      return sequenceOpen;\n    }\n    effects.exit(\"codeTextSequence\");\n    return between(code);\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code);\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space');\n      effects.consume(code);\n      effects.exit('space');\n      return between;\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter(\"codeTextSequence\");\n      size = 0;\n      return sequenceClose(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return between;\n    }\n\n    // Data.\n    effects.enter(\"codeTextData\");\n    return data(code);\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 32 || code === 96 || markdownLineEnding(code)) {\n      effects.exit(\"codeTextData\");\n      return between(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code);\n      size++;\n      return sequenceClose;\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit(\"codeTextSequence\");\n      effects.exit(\"codeText\");\n      return ok(code);\n    }\n\n    // More or less accents: mark as data.\n    token.type = \"codeTextData\";\n    return data(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {string, text} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs =\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  // eslint-disable-next-line complexity\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n    value =\n      buffer +\n      (typeof value === 'string'\n        ? value.toString()\n        : new TextDecoder(encoding || undefined).decode(value))\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCodePoint(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base);\n  if (\n  // C0 except for HT, LF, FF, CR, space.\n  code < 9 || code === 11 || code > 13 && code < 32 ||\n  // Control character (DEL) of C0, and C1 controls.\n  code > 126 && code < 160 ||\n  // Lone high surrogates and low surrogates.\n  code > 55_295 && code < 57_344 ||\n  // Noncharacters.\n  code > 64_975 && code < 65_008 || /* eslint-disable no-bitwise */\n  (code & 65_535) === 65_535 || (code & 65_535) === 65_534 || /* eslint-enable no-bitwise */\n  // Out of range\n  code > 1_114_111) {\n    return \"\\uFFFD\";\n  }\n  return String.fromCodePoint(code);\n}","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').Html} Html\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n *\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Omit<Parent, 'children' | 'type'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | null | undefined | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {undefined | void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {undefined}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {undefined}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Fragment | Nodes>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {(this: CompileContext) => undefined} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {(this: CompileContext, node: Nodes, token: Token, onError?: OnEnterError) => undefined} enter\n *   Enter a node.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => undefined} exit\n *   Exit a node.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n * @property {CompileData} data\n *   Info passed around; key/value store.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\nimport { toString } from 'mdast-util-to-string';\nimport { parse, postprocess, preprocess } from 'micromark';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nimport { decodeString } from 'micromark-util-decode-string';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { stringifyPosition } from 'unist-util-stringify-position';\nconst own = {}.hasOwnProperty;\n\n/**\n * Turn markdown into a syntax tree.\n *\n * @overload\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @overload\n * @param {Value} value\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @param {Value} value\n *   Markdown to parse.\n * @param {Encoding | Options | null | undefined} [encoding]\n *   Character encoding for when `value` is `Buffer`.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Root}\n *   mdast tree.\n */\nexport function fromMarkdown(value, encoding, options) {\n  if (typeof encoding !== 'string') {\n    options = encoding;\n    encoding = undefined;\n  }\n  return compiler(options)(postprocess(parse(options).document().write(preprocess()(value, encoding, true))));\n}\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      characterReference: onexitcharacterreference,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  };\n  configure(config, (options || {}).mdastExtensions || []);\n\n  /** @type {CompileData} */\n  const data = {};\n  return compile;\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    };\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      data\n    };\n    /** @type {Array<number>} */\n    const listStack = [];\n    let index = -1;\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (events[index][1].type === \"listOrdered\" || events[index][1].type === \"listUnordered\") {\n        if (events[index][0] === 'enter') {\n          listStack.push(index);\n        } else {\n          const tail = listStack.pop();\n          index = prepareList(events, tail, index);\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      const handler = config[events[index][0]];\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(Object.assign({\n          sliceSerialize: events[index][2].sliceSerialize\n        }, context), events[index][1]);\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1];\n      const handler = tail[1] || defaultOnError;\n      handler.call(context, undefined, tail[0]);\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(events.length > 0 ? events[0][1].start : {\n        line: 1,\n        column: 1,\n        offset: 0\n      }),\n      end: point(events.length > 0 ? events[events.length - 2][1].end : {\n        line: 1,\n        column: 1,\n        offset: 0\n      })\n    };\n\n    // Call transforms.\n    index = -1;\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree;\n    }\n    return tree;\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1;\n    let containerBalance = -1;\n    let listSpread = false;\n    /** @type {Token | undefined} */\n    let listItem;\n    /** @type {number | undefined} */\n    let lineIndex;\n    /** @type {number | undefined} */\n    let firstBlankLineIndex;\n    /** @type {boolean | undefined} */\n    let atMarker;\n    while (++index <= length) {\n      const event = events[index];\n      switch (event[1].type) {\n        case \"listUnordered\":\n        case \"listOrdered\":\n        case \"blockQuote\":\n          {\n            if (event[0] === 'enter') {\n              containerBalance++;\n            } else {\n              containerBalance--;\n            }\n            atMarker = undefined;\n            break;\n          }\n        case \"lineEndingBlank\":\n          {\n            if (event[0] === 'enter') {\n              if (listItem && !atMarker && !containerBalance && !firstBlankLineIndex) {\n                firstBlankLineIndex = index;\n              }\n              atMarker = undefined;\n            }\n            break;\n          }\n        case \"linePrefix\":\n        case \"listItemValue\":\n        case \"listItemMarker\":\n        case \"listItemPrefix\":\n        case \"listItemPrefixWhitespace\":\n          {\n            // Empty.\n\n            break;\n          }\n        default:\n          {\n            atMarker = undefined;\n          }\n      }\n      if (!containerBalance && event[0] === 'enter' && event[1].type === \"listItemPrefix\" || containerBalance === -1 && event[0] === 'exit' && (event[1].type === \"listUnordered\" || event[1].type === \"listOrdered\")) {\n        if (listItem) {\n          let tailIndex = index;\n          lineIndex = undefined;\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex];\n            if (tailEvent[1].type === \"lineEnding\" || tailEvent[1].type === \"lineEndingBlank\") {\n              if (tailEvent[0] === 'exit') continue;\n              if (lineIndex) {\n                events[lineIndex][1].type = \"lineEndingBlank\";\n                listSpread = true;\n              }\n              tailEvent[1].type = \"lineEnding\";\n              lineIndex = tailIndex;\n            } else if (tailEvent[1].type === \"linePrefix\" || tailEvent[1].type === \"blockQuotePrefix\" || tailEvent[1].type === \"blockQuotePrefixWhitespace\" || tailEvent[1].type === \"blockQuoteMarker\" || tailEvent[1].type === \"listItemIndent\") {\n              // Empty\n            } else {\n              break;\n            }\n          }\n          if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {\n            listItem._spread = true;\n          }\n\n          // Fix position.\n          listItem.end = Object.assign({}, lineIndex ? events[lineIndex][1].start : event[1].end);\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]]);\n          index++;\n          length++;\n        }\n\n        // Create a new list item.\n        if (event[1].type === \"listItemPrefix\") {\n          /** @type {Token} */\n          const item = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          };\n          listItem = item;\n          events.splice(index, 0, ['enter', item, event[2]]);\n          index++;\n          length++;\n          firstBlankLineIndex = undefined;\n          atMarker = true;\n        }\n      }\n    }\n    events[start][1]._spread = listSpread;\n    return length;\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Nodes} create\n   *   Create a node.\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function open(token) {\n      enter.call(this, create(token), token);\n      if (and) and.call(this, token);\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {undefined}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    });\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Nodes} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children;\n    siblings.push(node);\n    this.stack.push(node);\n    this.tokenStack.push([token, errorHandler]);\n    node.position = {\n      start: point(token.start),\n      // @ts-expect-error: `end` will be patched later.\n      end: undefined\n    };\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function close(token) {\n      if (and) and.call(this, token);\n      exit.call(this, token);\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop();\n    const open = this.tokenStack.pop();\n    if (!open) {\n      throw new Error('Cannot close `' + token.type + '` (' + stringifyPosition({\n        start: token.start,\n        end: token.end\n      }) + '): it’s not open');\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0]);\n      } else {\n        const handler = open[1] || defaultOnError;\n        handler.call(this, token, open[0]);\n      }\n    }\n    node.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop());\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    this.data.expectingFirstListItemValue = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (this.data.expectingFirstListItemValue) {\n      const ancestor = this.stack[this.stack.length - 2];\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);\n      this.data.expectingFirstListItemValue = undefined;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.lang = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.meta = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (this.data.flowCodeInside) return;\n    this.buffer();\n    this.data.flowCodeInside = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '');\n    this.data.flowCodeInside = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.label = label;\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length;\n      node.depth = depth;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    this.data.setextHeadingSlurpLineEnding = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    node.depth = this.sliceSerialize(token).codePointAt(0) === 61 ? 1 : 2;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    this.data.setextHeadingSlurpLineEnding = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = node.children;\n    let tail = siblings[siblings.length - 1];\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text();\n      tail.position = {\n        start: point(token.start),\n        // @ts-expect-error: we’ll add `end` later.\n        end: undefined\n      };\n      siblings.push(tail);\n    }\n    this.stack.push(tail);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop();\n    tail.value += this.sliceSerialize(token);\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1];\n    // If we’re at a hard break, include the line ending in there.\n    if (this.data.atHardBreak) {\n      const tail = context.children[context.children.length - 1];\n      tail.position.end = point(token.end);\n      this.data.atHardBreak = undefined;\n      return;\n    }\n    if (!this.data.setextHeadingSlurpLineEnding && config.canContainEols.includes(context.type)) {\n      onenterdata.call(this, token);\n      onexitdata.call(this, token);\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    this.data.atHardBreak = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token);\n    const ancestor = this.stack[this.stack.length - 2];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string);\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1];\n    const value = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // Assume a reference.\n    this.data.inReference = true;\n    if (node.type === 'link') {\n      /** @type {Array<PhrasingContent>} */\n      const children = fragment.children;\n      node.children = children;\n    } else {\n      node.alt = value;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    this.data.inReference = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    this.data.referenceType = 'collapsed';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label;\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n    this.data.referenceType = 'full';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    this.data.characterReferenceType = token.type;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token);\n    const type = this.data.characterReferenceType;\n    /** @type {string} */\n    let value;\n    if (type) {\n      value = decodeNumericCharacterReference(data, type === \"characterReferenceMarkerNumeric\" ? 10 : 16);\n      this.data.characterReferenceType = undefined;\n    } else {\n      const result = decodeNamedCharacterReference(data);\n      value = result;\n    }\n    const tail = this.stack[this.stack.length - 1];\n    tail.value += value;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreference(token) {\n    const tail = this.stack.pop();\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = this.sliceSerialize(token);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = 'mailto:' + this.sliceSerialize(token);\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    };\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    };\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    };\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    };\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    };\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    return {\n      type: 'heading',\n      // @ts-expect-error `depth` will be set later.\n      depth: 0,\n      children: []\n    };\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    };\n  }\n\n  /** @returns {Html} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    };\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    };\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    };\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    };\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    };\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    };\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    };\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  };\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Array<Extension> | Extension>} extensions\n * @returns {undefined}\n */\nfunction configure(combined, extensions) {\n  let index = -1;\n  while (++index < extensions.length) {\n    const value = extensions[index];\n    if (Array.isArray(value)) {\n      configure(combined, value);\n    } else {\n      extension(combined, value);\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {undefined}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key;\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      switch (key) {\n        case 'canContainEols':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'transforms':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'enter':\n        case 'exit':\n          {\n            const right = extension[key];\n            if (right) {\n              Object.assign(combined[key], right);\n            }\n            break;\n          }\n        // No default\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error('Cannot close `' + left.type + '` (' + stringifyPosition({\n      start: left.start,\n      end: left.end\n    }) + '): a different token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is open');\n  } else {\n    throw new Error('Cannot close document, a token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is still open');\n  }\n}","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} FromMarkdownOptions\n * @typedef {import('unified').Parser<Root>} Parser\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {Omit<FromMarkdownOptions, 'extensions' | 'mdastExtensions'>} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * Aadd support for parsing from markdown.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkParse(options) {\n  /** @type {Processor} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  const self = this\n\n  self.parser = parser\n\n  /**\n   * @type {Parser}\n   */\n  function parser(doc) {\n    return fromMarkdown(doc, {\n      ...self.data('settings'),\n      ...options,\n      // Note: these options are not in the readme.\n      // The goal is for them to be set by plugins on `data` instead of being\n      // passed by users.\n      extensions: self.data('micromarkExtensions') || [],\n      mdastExtensions: self.data('fromMarkdownExtensions') || []\n    })\n  }\n}\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | null | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n  if (!protocol) {\n    return value\n  }\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n  return ''\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n    let replace = ''\n\n    // A correct percent encoded value.\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    }\n    // Astral.\n    else if (code > 55_295 && code < 57_344) {\n      const next = value.charCodeAt(index + 1)\n\n      // A correct surrogate pair.\n      if (code < 56_320 && next > 56_319 && next < 57_344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      }\n      // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n  return result.join('') + value.slice(start)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @callback FootnoteBackContentTemplate\n *   Generate content for the backreference dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent> | ElementContent | string}\n *   Content for the backreference when linking back from definitions to their\n *   reference.\n *\n * @callback FootnoteBackLabelTemplate\n *   Generate a back label dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Back label to use when linking back from definitions to their reference.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate the default content that GitHub uses on backreferences.\n *\n * @param {number} _\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent>}\n *   Content.\n */\nexport function defaultFootnoteBackContent(_, rereferenceIndex) {\n  /** @type {Array<ElementContent>} */\n  const result = [{type: 'text', value: '↩'}]\n\n  if (rereferenceIndex > 1) {\n    result.push({\n      type: 'element',\n      tagName: 'sup',\n      properties: {},\n      children: [{type: 'text', value: String(rereferenceIndex)}]\n    })\n  }\n\n  return result\n}\n\n/**\n * Generate the default label that GitHub uses on backreferences.\n *\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Label.\n */\nexport function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n  return (\n    'Back to reference ' +\n    (referenceIndex + 1) +\n    (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n  )\n}\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\n// eslint-disable-next-line complexity\nexport function footer(state) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const footnoteBackContent =\n    state.options.footnoteBackContent || defaultFootnoteBackContent\n  const footnoteBackLabel =\n    state.options.footnoteBackLabel || defaultFootnoteBackLabel\n  const footnoteLabel = state.options.footnoteLabel || 'Footnotes'\n  const footnoteLabelTagName = state.options.footnoteLabelTagName || 'h2'\n  const footnoteLabelProperties = state.options.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let referenceIndex = -1\n\n  while (++referenceIndex < state.footnoteOrder.length) {\n    const definition = state.footnoteById.get(\n      state.footnoteOrder[referenceIndex]\n    )\n\n    if (!definition) {\n      continue\n    }\n\n    const content = state.all(definition)\n    const id = String(definition.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let rereferenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n    const counts = state.footnoteCounts.get(id)\n\n    // eslint-disable-next-line no-unmodified-loop-condition\n    while (counts !== undefined && ++rereferenceIndex <= counts) {\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      let children =\n        typeof footnoteBackContent === 'string'\n          ? footnoteBackContent\n          : footnoteBackContent(referenceIndex, rereferenceIndex)\n\n      if (typeof children === 'string') {\n        children = {type: 'text', value: children}\n      }\n\n      backReferences.push({\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            clobberPrefix +\n            'fnref-' +\n            safeId +\n            (rereferenceIndex > 1 ? '-' + rereferenceIndex : ''),\n          dataFootnoteBackref: '',\n          ariaLabel:\n            typeof footnoteBackLabel === 'string'\n              ? footnoteBackLabel\n              : footnoteBackLabel(referenceIndex, rereferenceIndex),\n          className: ['data-footnote-backref']\n        },\n        children: Array.isArray(children) ? children : [children]\n      })\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(definition, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: footnoteLabelTagName,\n        properties: {\n          ...structuredClone(footnoteLabelProperties),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'end' | 'start'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {Node | NodeLike | null | undefined} [node]\n   * @returns {Point | undefined}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    if (\n      typeof point.line === 'number' &&\n      point.line > 0 &&\n      typeof point.column === 'number' &&\n      point.column > 0\n    ) {\n      return {\n        line: point.line,\n        column: point.column,\n        offset:\n          typeof point.offset === 'number' && point.offset > -1\n            ? point.offset\n            : undefined\n      }\n    }\n  }\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {Node | NodeLike | null | undefined} [node]\n *   Node.\n * @returns {Position | undefined}\n *   Position.\n */\nexport function position(node) {\n  const start = pointStart(node)\n  const end = pointEnd(node)\n\n  if (start && end) {\n    return {start, end}\n  }\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  /** @type {Properties} */\n  const properties = {}\n\n  if (node.lang) {\n    properties.className = ['language-' + node.lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  let reuseCounter = state.footnoteCounts.get(id)\n\n  if (reuseCounter === undefined) {\n    reuseCounter = 0\n    state.footnoteOrder.push(id)\n    counter = state.footnoteOrder.length\n  } else {\n    counter = index + 1\n  }\n\n  reuseCounter += 1\n  state.footnoteCounts.set(id, reuseCounter)\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + clobberPrefix + 'fn-' + safeId,\n      id:\n        clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Html} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Element | Raw | undefined}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.options.allowDangerousHtml) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  return undefined\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Reference} Reference\n *\n * @typedef {import('./state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Extract<Nodes, Reference>} node\n *   Reference node (image, link).\n * @returns {Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return [{type: 'text', value: '![' + node.alt + suffix}]\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const definition = state.definitionById.get(id)\n\n  if (!definition) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(definition.url || ''), alt: node.alt}\n\n  if (definition.title !== null && definition.title !== undefined) {\n    properties.title = definition.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const definition = state.definitionById.get(id)\n\n  if (!definition) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(definition.url || '')}\n\n  if (definition.title !== null && definition.title !== undefined) {\n    properties.title = definition.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === null || spread === undefined\n    ? node.children.length > 1\n    : spread\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Parents} HastParents\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastParents}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointEnd, pointStart} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start && end) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  // To do: option to use `style`?\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(cell, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastElement | HastText}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n *\n * @satisfies {import('../state.js').Handlers}\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  // @ts-expect-error: root is different, but hard to type.\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').RootContent} HastRootContent\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('mdast').Parents} MdastParents\n *\n * @typedef {import('vfile').VFile} VFile\n *\n * @typedef {import('./footer.js').FootnoteBackContentTemplate} FootnoteBackContentTemplate\n * @typedef {import('./footer.js').FootnoteBackLabelTemplate} FootnoteBackLabelTemplate\n */\n\n/**\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | undefined} parent\n *   Parent of `node`.\n * @returns {Array<HastElementContent> | HastElementContent | undefined}\n *   hast node.\n *\n * @typedef {Partial<Record<MdastNodes['type'], Handler>>} Handlers\n *   Handle nodes.\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree (default:\n *   `false`).\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` property on footnotes to prevent them from\n *   *clobbering* (default: `'user-content-'`).\n *\n *   Pass `''` for trusted markdown and when you are careful with\n *   polyfilling.\n *   You could pass a different prefix.\n *\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=\"x\"></p>\n *   <script>alert(x) // `x` now refers to the `p#x` DOM element</script>\n *   ```\n *\n *   The above example shows that elements are made available by browsers, by\n *   their ID, on the `window` object.\n *   This is a security risk because you might be expecting some other variable\n *   at that place.\n *   It can also break polyfills.\n *   Using a prefix solves these problems.\n * @property {VFile | null | undefined} [file]\n *   Corresponding virtual file representing the input document (optional).\n * @property {FootnoteBackContentTemplate | string | null | undefined} [footnoteBackContent]\n *   Content of the backreference back to references (default: `defaultFootnoteBackContent`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackContent(_, rereferenceIndex) {\n *     const result = [{type: 'text', value: '↩'}]\n *\n *     if (rereferenceIndex > 1) {\n *       result.push({\n *         type: 'element',\n *         tagName: 'sup',\n *         properties: {},\n *         children: [{type: 'text', value: String(rereferenceIndex)}]\n *       })\n *     }\n *\n *     return result\n *   }\n *   ```\n *\n *   This content is used in the `a` element of each backreference (the `↩`\n *   links).\n * @property {FootnoteBackLabelTemplate | string | null | undefined} [footnoteBackLabel]\n *   Label to describe the backreference back to references (default:\n *   `defaultFootnoteBackLabel`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n *    return (\n *      'Back to reference ' +\n *      (referenceIndex + 1) +\n *      (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n *    )\n *   }\n *   ```\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is used in the `ariaLabel` property on each backreference\n *   (the `↩` links).\n *   It affects users of assistive technology.\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Textual label to use for the footnotes section (default: `'Footnotes'`).\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (default: `{className:\n *   ['sr-only']}`).\n *\n *   Change it to show the label and add other properties.\n *\n *   This label is typically hidden visually (assuming an `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass an empty string.\n *   You can also add different properties.\n *\n *   > **Note**: `id: 'footnote-label'` is always added, because footnote\n *   > calls use it with `aria-describedby` to provide an accessible label.\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   HTML tag name to use for the footnote label element (default: `'h2'`).\n *\n *   Change it to match your document structure.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes (optional).\n * @property {Array<MdastNodes['type']> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed)\n *   (optional).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes (optional).\n *\n * @typedef State\n *   Info passed around.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => HastElement | Type} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {Map<string, MdastDefinition>} definitionById\n *   Definitions by their identifier.\n * @property {Map<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Map<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {(node: MdastNodes, parent: MdastParents | undefined) => Array<HastElementContent> | HastElementContent | undefined} one\n *   Transform an mdast node to hast.\n * @property {Options} options\n *   Configuration.\n * @property {(from: MdastNodes, node: HastNodes) => undefined} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastRootContent>(nodes: Array<Type>, loose?: boolean | undefined) => Array<HastText | Type>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {visit} from 'unist-util-visit'\nimport {position} from 'unist-util-position'\nimport {handlers as defaultHandlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || emptyOptions\n  /** @type {Map<string, MdastDefinition>} */\n  const definitionById = new Map()\n  /** @type {Map<string, MdastFootnoteDefinition>} */\n  const footnoteById = new Map()\n  /** @type {Map<string, number>} */\n  const footnoteCounts = new Map()\n  /** @type {Handlers} */\n  // @ts-expect-error: the root handler returns a root.\n  // Hard to type.\n  const handlers = {...defaultHandlers, ...settings.handlers}\n\n  /** @type {State} */\n  const state = {\n    all,\n    applyData,\n    definitionById,\n    footnoteById,\n    footnoteCounts,\n    footnoteOrder: [],\n    handlers,\n    one,\n    options: settings,\n    patch,\n    wrap\n  }\n\n  visit(tree, function (node) {\n    if (node.type === 'definition' || node.type === 'footnoteDefinition') {\n      const map = node.type === 'definition' ? definitionById : footnoteById\n      const id = String(node.identifier).toUpperCase()\n\n      // Mimick CM behavior of link definitions.\n      // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/9032189/lib/index.js#L20-L21>.\n      if (!map.has(id)) {\n        // @ts-expect-error: node type matches map.\n        map.set(id, node)\n      }\n    }\n  })\n\n  return state\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {Array<HastElementContent> | HastElementContent | undefined}\n   *   Resulting hast node.\n   */\n  function one(node, parent) {\n    const type = node.type\n    const handle = state.handlers[type]\n\n    if (own.call(state.handlers, type) && handle) {\n      return handle(state, node, parent)\n    }\n\n    if (state.options.passThrough && state.options.passThrough.includes(type)) {\n      if ('children' in node) {\n        const {children, ...shallow} = node\n        const result = structuredClone(shallow)\n        // @ts-expect-error: TS doesn’t understand…\n        result.children = state.all(node)\n        // @ts-expect-error: TS doesn’t understand…\n        return result\n      }\n\n      // @ts-expect-error: it’s custom.\n      return structuredClone(node)\n    }\n\n    const unknown = state.options.unknownHandler || defaultUnknownHandler\n\n    return unknown(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function all(parent) {\n    /** @type {Array<HastElementContent>} */\n    const values = []\n\n    if ('children' in parent) {\n      const nodes = parent.children\n      let index = -1\n      while (++index < nodes.length) {\n        const result = state.one(nodes[index], parent)\n\n        // To do: see if we van clean this? Can we merge texts?\n        if (result) {\n          if (index && nodes[index - 1].type === 'break') {\n            if (!Array.isArray(result) && result.type === 'text') {\n              result.value = trimMarkdownSpaceStart(result.value)\n            }\n\n            if (!Array.isArray(result) && result.type === 'element') {\n              const head = result.children[0]\n\n              if (head && head.type === 'text') {\n                head.value = trimMarkdownSpaceStart(head.value)\n              }\n            }\n          }\n\n          if (Array.isArray(result)) {\n            values.push(...result)\n          } else {\n            values.push(result)\n          }\n        }\n      }\n    }\n\n    return values\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {undefined}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {HastElement | Type}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {HastElement | Type} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent of `hName` is to create an element, but likely also to keep\n      // the content around (otherwise: pass `hChildren`).\n      else {\n        /** @type {Array<HastElementContent>} */\n        // @ts-expect-error: assume no doctypes in `root`.\n        const children = 'children' in result ? result.children : [result]\n        result = {type: 'element', tagName: hName, properties: {}, children}\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      Object.assign(result.properties, structuredClone(hProperties))\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastElement | HastText}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastElement | HastText} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: state.all(node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastRootContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | undefined} [loose=false]\n *   Whether to add line endings at start and end (default: `false`).\n * @returns {Array<HastText | Type>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<HastText | Type>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n\n/**\n * Trim spaces and tabs at the start of `value`.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Result.\n */\nfunction trimMarkdownSpaceStart(value) {\n  let index = 0\n  let code = value.charCodeAt(index)\n\n  while (code === 9 || code === 32) {\n    index++\n    code = value.charCodeAt(index)\n  }\n\n  return value.slice(index)\n}\n","/**\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('./state.js').Options} Options\n */\n\nimport {ok as assert} from 'devlop'\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {HastNodes}\n *   hast tree.\n */\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, undefined)\n  const foot = footer(state)\n  /** @type {HastNodes} */\n  const result = Array.isArray(node)\n    ? {type: 'root', children: node}\n    : node || {type: 'root', children: []}\n\n  if (foot) {\n    // If there’s a footer, there were definitions, meaning block\n    // content.\n    // So `result` is a parent node.\n    assert('children' in result)\n    result.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  return result\n}\n","// Include `data` fields in mdast and `raw` nodes in hast.\n/// <reference types=\"mdast-util-to-hast\" />\n\n/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} ToHastOptions\n * @typedef {import('unified').Processor} Processor\n * @typedef {import('vfile').VFile} VFile\n */\n\n/**\n * @typedef {Omit<ToHastOptions, 'file'>} Options\n *\n * @callback TransformBridge\n *   Bridge-mode.\n *\n *   Runs the destination with the new hast tree.\n *   Discards result.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {Promise<undefined>}\n *   Nothing.\n *\n * @callback TransformMutate\n *  Mutate-mode.\n *\n *  Further transformers run on the hast tree.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {HastRoot}\n *   Tree (hast).\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n/**\n * Turn markdown into HTML.\n *\n * ##### Notes\n *\n * ###### Signature\n *\n * *   if a processor is given, runs the (rehype) plugins used on it with a\n *     hast tree, then discards the result (*bridge mode*)\n * *   otherwise, returns a hast tree, the plugins used after `remarkRehype`\n *     are rehype plugins (*mutate mode*)\n *\n * > 👉 **Note**: It’s highly unlikely that you want to pass a `processor`.\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most plugins ignore `raw` nodes but two notable ones don’t:\n *\n * *   `rehype-stringify` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful if\n *     you completely trust authors\n * *   `rehype-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only way\n *     to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `remark-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * *Example: headings (DOM clobbering)* in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @overload\n * @param {Processor} processor\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformBridge}\n *\n * @overload\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformMutate}\n *\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\n *   Processor or configuration (optional).\n * @param {Readonly<Options> | null | undefined} [options]\n *   When a processor was given, configuration (optional).\n * @returns {TransformBridge | TransformMutate}\n *   Transform.\n */\nexport default function remarkRehype(destination, options) {\n  if (destination && 'run' in destination) {\n    /**\n     * @type {TransformBridge}\n     */\n    return async function (tree, file) {\n      // Cast because root in -> root out.\n      const hastTree = /** @type {HastRoot} */ (\n        toHast(tree, {file, ...options})\n      )\n      await destination.run(hastTree, file)\n    }\n  }\n\n  /**\n   * @type {TransformMutate}\n   */\n  return function (tree, file) {\n    // Cast because root in -> root out.\n    return /** @type {HastRoot} */ (\n      toHast(tree, {file, ...(options || destination)})\n    )\n  }\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","// To do: remove `void`s\n// To do: remove `null` from output of our APIs, allow it as user APIs.\n\n/**\n * @typedef {(error?: Error | null | undefined, ...output: Array<any>) => void} Callback\n *   Callback.\n *\n * @typedef {(...input: Array<any>) => any} Middleware\n *   Ware.\n *\n * @typedef Pipeline\n *   Pipeline.\n * @property {Run} run\n *   Run the pipeline.\n * @property {Use} use\n *   Add middleware.\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n *\n *   Calls `done` on completion with either an error or the output of the\n *   last middleware.\n *\n *   > 👉 **Note**: as the length of input defines whether async functions get a\n *   > `next` function,\n *   > it’s recommended to keep `input` at one value normally.\n\n *\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n *   Pipeline.\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error | null | undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware` into a uniform interface.\n *\n * You can pass all input to the resulting function.\n * `callback` is then called with the output of `middleware`.\n *\n * If `middleware` accepts more arguments than the later given in input,\n * an extra `done` function is passed to it after that input,\n * which must be called by `middleware`.\n *\n * The first value in `input` is the main input value.\n * All other input values are the rest input values.\n * The values given to `callback` are the input values,\n * merged with every non-nullish output value.\n *\n * * if `middleware` throws an error,\n *   returns a promise that is rejected,\n *   or calls the given `done` function with an error,\n *   `callback` is called with that error\n * * if `middleware` returns a value or returns a promise that is resolved,\n *   that value is the main output value\n * * if `middleware` calls `done`,\n *   all non-nullish values except for the first one (the error) overwrite the\n *   output values\n *\n * @param {Middleware} middleware\n *   Function to wrap.\n * @param {Callback} callback\n *   Callback called with the output of `middleware`.\n * @returns {Run}\n *   Wrapped middleware.\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result && result.then && typeof result.then === 'function') {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   *\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","export const CallableInstance =\n  /**\n   * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}\n   */\n  (\n    /** @type {unknown} */\n    (\n      /**\n       * @this {Function}\n       * @param {string | symbol} property\n       * @returns {(...parameters: Array<unknown>) => unknown}\n       */\n      function (property) {\n        const self = this\n        const constr = self.constructor\n        const proto = /** @type {Record<string | symbol, Function>} */ (\n          // Prototypes do exist.\n          // type-coverage:ignore-next-line\n          constr.prototype\n        )\n        const value = proto[property]\n        /** @type {(...parameters: Array<unknown>) => unknown} */\n        const apply = function () {\n          return value.apply(apply, arguments)\n        }\n\n        Object.setPrototypeOf(apply, proto)\n\n        // Not needed for us in `unified`: we only call this on the `copy`\n        // function,\n        // and we don't need to add its fields (`length`, `name`)\n        // over.\n        // See also: GH-246.\n        // const names = Object.getOwnPropertyNames(value)\n        //\n        // for (const p of names) {\n        //   const descriptor = Object.getOwnPropertyDescriptor(value, p)\n        //   if (descriptor) Object.defineProperty(apply, p, descriptor)\n        // }\n\n        return apply\n      }\n    )\n  )\n","/**\n * @typedef {import('trough').Pipeline} Pipeline\n *\n * @typedef {import('unist').Node} Node\n *\n * @typedef {import('vfile').Compatible} Compatible\n * @typedef {import('vfile').Value} Value\n *\n * @typedef {import('../index.js').CompileResultMap} CompileResultMap\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Settings} Settings\n */\n\n/**\n * @typedef {CompileResultMap[keyof CompileResultMap]} CompileResults\n *   Acceptable results from compilers.\n *\n *   To register custom results, add them to\n *   {@linkcode CompileResultMap}.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the compiler receives (default: `Node`).\n * @template {CompileResults} [Result=CompileResults]\n *   The thing that the compiler yields (default: `CompileResults`).\n * @callback Compiler\n *   A **compiler** handles the compiling of a syntax tree to something else\n *   (in most cases, text) (TypeScript type).\n *\n *   It is used in the stringify phase and called with a {@linkcode Node}\n *   and {@linkcode VFile} representation of the document to compile.\n *   It should return the textual representation of the given tree (typically\n *   `string`).\n *\n *   > **Note**: unified typically compiles by serializing: most compilers\n *   > return `string` (or `Uint8Array`).\n *   > Some compilers, such as the one configured with\n *   > [`rehype-react`][rehype-react], return other values (in this case, a\n *   > React tree).\n *   > If you’re using a compiler that doesn’t serialize, expect different\n *   > result values.\n *   >\n *   > To register custom results in TypeScript, add them to\n *   > {@linkcode CompileResultMap}.\n *\n *   [rehype-react]: https://github.com/rehypejs/rehype-react\n * @param {Tree} tree\n *   Tree to compile.\n * @param {VFile} file\n *   File associated with `tree`.\n * @returns {Result}\n *   New content: compiled text (`string` or `Uint8Array`, for `file.value`) or\n *   something else (for `file.result`).\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the parser yields (default: `Node`)\n * @callback Parser\n *   A **parser** handles the parsing of text to a syntax tree.\n *\n *   It is used in the parse phase and is called with a `string` and\n *   {@linkcode VFile} of the document to parse.\n *   It must return the syntax tree representation of the given file\n *   ({@linkcode Node}).\n * @param {string} document\n *   Document to parse.\n * @param {VFile} file\n *   File associated with `document`.\n * @returns {Tree}\n *   Node representing the given file.\n */\n\n/**\n * @typedef {(\n *   Plugin<Array<any>, any, any> |\n *   PluginTuple<Array<any>, any, any> |\n *   Preset\n * )} Pluggable\n *   Union of the different ways to add plugins and settings.\n */\n\n/**\n * @typedef {Array<Pluggable>} PluggableList\n *   List of plugins and presets.\n */\n\n// Note: we can’t use `callback` yet as it messes up `this`:\n//  <https://github.com/microsoft/TypeScript/issues/55197>.\n/**\n * @template {Array<unknown>} [PluginParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=Node]\n *   Value that is expected as input (default: `Node`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=Input]\n *   Value that is yielded as output (default: `Input`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   (this: Processor, ...parameters: PluginParameters) =>\n *     Input extends string ? // Parser.\n *        Output extends Node | undefined ? undefined | void : never :\n *     Output extends CompileResults ? // Compiler.\n *        Input extends Node | undefined ? undefined | void : never :\n *     Transformer<\n *       Input extends Node ? Input : Node,\n *       Output extends Node ? Output : Node\n *     > | undefined | void\n * )} Plugin\n *   Single plugin.\n *\n *   Plugins configure the processors they are applied on in the following\n *   ways:\n *\n *   *   they change the processor, such as the parser, the compiler, or by\n *       configuring data\n *   *   they specify how to handle trees and files\n *\n *   In practice, they are functions that can receive options and configure the\n *   processor (`this`).\n *\n *   > **Note**: plugins are called when the processor is *frozen*, not when\n *   > they are applied.\n */\n\n/**\n * Tuple of a plugin and its configuration.\n *\n * The first item is a plugin, the rest are its parameters.\n *\n * @template {Array<unknown>} [TupleParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=undefined]\n *   Value that is expected as input (optional).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=undefined] (optional).\n *   Value that is yielded as output.\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   [\n *     plugin: Plugin<TupleParameters, Input, Output>,\n *     ...parameters: TupleParameters\n *   ]\n * )} PluginTuple\n */\n\n/**\n * @typedef Preset\n *   Sharable configuration.\n *\n *   They can contain plugins and settings.\n * @property {PluggableList | undefined} [plugins]\n *   List of plugins and presets (optional).\n * @property {Settings | undefined} [settings]\n *   Shared settings for parsers and compilers (optional).\n */\n\n/**\n * @template {VFile} [File=VFile]\n *   The file that the callback receives (default: `VFile`).\n * @callback ProcessCallback\n *   Callback called when the process is done.\n *\n *   Called with either an error or a result.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {File | undefined} [file]\n *   Processed file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The tree that the callback receives (default: `Node`).\n * @callback RunCallback\n *   Callback called when transformers are done.\n *\n *   Called with either an error or results.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {Tree | undefined} [tree]\n *   Transformed tree (optional).\n * @param {VFile | undefined} [file]\n *   File (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Output=Node]\n *   Node type that the transformer yields (default: `Node`).\n * @callback TransformCallback\n *   Callback passed to transforms.\n *\n *   If the signature of a `transformer` accepts a third argument, the\n *   transformer may perform asynchronous operations, and must call it.\n * @param {Error | undefined} [error]\n *   Fatal error to stop the process (optional).\n * @param {Output | undefined} [tree]\n *   New, changed, tree (optional).\n * @param {VFile | undefined} [file]\n *   New, changed, file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Input=Node]\n *   Node type that the transformer expects (default: `Node`).\n * @template {Node} [Output=Input]\n *   Node type that the transformer yields (default: `Input`).\n * @callback Transformer\n *   Transformers handle syntax trees and files.\n *\n *   They are functions that are called each time a syntax tree and file are\n *   passed through the run phase.\n *   When an error occurs in them (either because it’s thrown, returned,\n *   rejected, or passed to `next`), the process stops.\n *\n *   The run phase is handled by [`trough`][trough], see its documentation for\n *   the exact semantics of these functions.\n *\n *   > **Note**: you should likely ignore `next`: don’t accept it.\n *   > it supports callback-style async work.\n *   > But promises are likely easier to reason about.\n *\n *   [trough]: https://github.com/wooorm/trough#function-fninput-next\n * @param {Input} tree\n *   Tree to handle.\n * @param {VFile} file\n *   File to handle.\n * @param {TransformCallback<Output>} next\n *   Callback.\n * @returns {(\n *   Promise<Output | undefined | void> |\n *   Promise<never> | // For some reason this is needed separately.\n *   Output |\n *   Error |\n *   undefined |\n *   void\n * )}\n *   If you accept `next`, nothing.\n *   Otherwise:\n *\n *   *   `Error` — fatal error to stop the process\n *   *   `Promise<undefined>` or `undefined` — the next transformer keeps using\n *       same tree\n *   *   `Promise<Node>` or `Node` — new, changed, tree\n */\n\n/**\n * @template {Node | undefined} ParseTree\n *   Output of `parse`.\n * @template {Node | undefined} HeadTree\n *   Input for `run`.\n * @template {Node | undefined} TailTree\n *   Output for `run`.\n * @template {Node | undefined} CompileTree\n *   Input of `stringify`.\n * @template {CompileResults | undefined} CompileResult\n *   Output of `stringify`.\n * @template {Node | string | undefined} Input\n *   Input of plugin.\n * @template Output\n *   Output of plugin (optional).\n * @typedef {(\n *   Input extends string\n *     ? Output extends Node | undefined\n *       ? // Parser.\n *         Processor<\n *           Output extends undefined ? ParseTree : Output,\n *           HeadTree,\n *           TailTree,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Output extends CompileResults\n *     ? Input extends Node | undefined\n *       ? // Compiler.\n *         Processor<\n *           ParseTree,\n *           HeadTree,\n *           TailTree,\n *           Input extends undefined ? CompileTree : Input,\n *           Output extends undefined ? CompileResult : Output\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Input extends Node | undefined\n *     ? Output extends Node | undefined\n *       ? // Transform.\n *         Processor<\n *           ParseTree,\n *           HeadTree extends undefined ? Input : HeadTree,\n *           Output extends undefined ? TailTree : Output,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : // Unknown.\n *       Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n * )} UsePlugin\n *   Create a processor based on the input/output of a {@link Plugin plugin}.\n */\n\n/**\n * @template {CompileResults | undefined} Result\n *   Node type that the transformer yields.\n * @typedef {(\n *   Result extends Value | undefined ?\n *     VFile :\n *     VFile & {result: Result}\n *   )} VFileWithOutput\n *   Type to generate a {@linkcode VFile} corresponding to a compiler result.\n *\n *   If a result that is not acceptable on a `VFile` is used, that will\n *   be stored on the `result` field of {@linkcode VFile}.\n */\n\nimport {bail} from 'bail'\nimport extend from 'extend'\nimport {ok as assert} from 'devlop'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\nimport {CallableInstance} from './callable-instance.js'\n\n// To do: next major: drop `Compiler`, `Parser`: prefer lowercase.\n\n// To do: we could start yielding `never` in TS when a parser is missing and\n// `parse` is called.\n// Currently, we allow directly setting `processor.parser`, which is untyped.\n\nconst own = {}.hasOwnProperty\n\n/**\n * @template {Node | undefined} [ParseTree=undefined]\n *   Output of `parse` (optional).\n * @template {Node | undefined} [HeadTree=undefined]\n *   Input for `run` (optional).\n * @template {Node | undefined} [TailTree=undefined]\n *   Output for `run` (optional).\n * @template {Node | undefined} [CompileTree=undefined]\n *   Input of `stringify` (optional).\n * @template {CompileResults | undefined} [CompileResult=undefined]\n *   Output of `stringify` (optional).\n * @extends {CallableInstance<[], Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>>}\n */\nexport class Processor extends CallableInstance {\n  /**\n   * Create a processor.\n   */\n  constructor() {\n    // If `Processor()` is called (w/o new), `copy` is called instead.\n    super('copy')\n\n    /**\n     * Compiler to use (deprecated).\n     *\n     * @deprecated\n     *   Use `compiler` instead.\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.Compiler = undefined\n\n    /**\n     * Parser to use (deprecated).\n     *\n     * @deprecated\n     *   Use `parser` instead.\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.Parser = undefined\n\n    // Note: the following fields are considered private.\n    // However, they are needed for tests, and TSC generates an untyped\n    // `private freezeIndex` field for, which trips `type-coverage` up.\n    // Instead, we use `@deprecated` to visualize that they shouldn’t be used.\n    /**\n     * Internal list of configured plugins.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Array<PluginTuple<Array<unknown>>>}\n     */\n    this.attachers = []\n\n    /**\n     * Compiler to use.\n     *\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.compiler = undefined\n\n    /**\n     * Internal state to track where we are while freezing.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {number}\n     */\n    this.freezeIndex = -1\n\n    /**\n     * Internal state to track whether we’re frozen.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {boolean | undefined}\n     */\n    this.frozen = undefined\n\n    /**\n     * Internal state.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Data}\n     */\n    this.namespace = {}\n\n    /**\n     * Parser to use.\n     *\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.parser = undefined\n\n    /**\n     * Internal list of configured transformers.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Pipeline}\n     */\n    this.transformers = trough()\n  }\n\n  /**\n   * Copy a processor.\n   *\n   * @deprecated\n   *   This is a private internal method and should not be used.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   New *unfrozen* processor ({@linkcode Processor}) that is\n   *   configured to work the same as its ancestor.\n   *   When the descendant processor is configured in the future it does not\n   *   affect the ancestral processor.\n   */\n  copy() {\n    // Cast as the type parameters will be the same after attaching.\n    const destination =\n      /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */ (\n        new Processor()\n      )\n    let index = -1\n\n    while (++index < this.attachers.length) {\n      const attacher = this.attachers[index]\n      destination.use(...attacher)\n    }\n\n    destination.data(extend(true, {}, this.namespace))\n\n    return destination\n  }\n\n  /**\n   * Configure the processor with info available to all plugins.\n   * Information is stored in an object.\n   *\n   * Typically, options can be given to a specific plugin, but sometimes it\n   * makes sense to have information shared with several plugins.\n   * For example, a list of HTML elements that are self-closing, which is\n   * needed during all phases.\n   *\n   * > **Note**: setting information cannot occur on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * > **Note**: to register custom data in TypeScript, augment the\n   * > {@linkcode Data} interface.\n   *\n   * @example\n   *   This example show how to get and set info:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   const processor = unified().data('alpha', 'bravo')\n   *\n   *   processor.data('alpha') // => 'bravo'\n   *\n   *   processor.data() // => {alpha: 'bravo'}\n   *\n   *   processor.data({charlie: 'delta'})\n   *\n   *   processor.data() // => {charlie: 'delta'}\n   *   ```\n   *\n   * @template {keyof Data} Key\n   *\n   * @overload\n   * @returns {Data}\n   *\n   * @overload\n   * @param {Data} dataset\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Key} key\n   * @returns {Data[Key]}\n   *\n   * @overload\n   * @param {Key} key\n   * @param {Data[Key]} value\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @param {Data | Key} [key]\n   *   Key to get or set, or entire dataset to set, or nothing to get the\n   *   entire dataset (optional).\n   * @param {Data[Key]} [value]\n   *   Value to set (optional).\n   * @returns {unknown}\n   *   The current processor when setting, the value at `key` when getting, or\n   *   the entire dataset when getting without key.\n   */\n  data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', this.frozen)\n        this.namespace[key] = value\n        return this\n      }\n\n      // Get `key`.\n      return (own.call(this.namespace, key) && this.namespace[key]) || undefined\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', this.frozen)\n      this.namespace = key\n      return this\n    }\n\n    // Get space.\n    return this.namespace\n  }\n\n  /**\n   * Freeze a processor.\n   *\n   * Frozen processors are meant to be extended and not to be configured\n   * directly.\n   *\n   * When a processor is frozen it cannot be unfrozen.\n   * New processors working the same way can be created by calling the\n   * processor.\n   *\n   * It’s possible to freeze processors explicitly by calling `.freeze()`.\n   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,\n   * `.stringify()`, `.process()`, or `.processSync()` are called.\n   *\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   The current processor.\n   */\n  freeze() {\n    if (this.frozen) {\n      return this\n    }\n\n    // Cast so that we can type plugins easier.\n    // Plugins are supposed to be usable on different processors, not just on\n    // this exact processor.\n    const self = /** @type {Processor} */ (/** @type {unknown} */ (this))\n\n    while (++this.freezeIndex < this.attachers.length) {\n      const [attacher, ...options] = this.attachers[this.freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      const transformer = attacher.call(self, ...options)\n\n      if (typeof transformer === 'function') {\n        this.transformers.use(transformer)\n      }\n    }\n\n    this.frozen = true\n    this.freezeIndex = Number.POSITIVE_INFINITY\n\n    return this\n  }\n\n  /**\n   * Parse text to a syntax tree.\n   *\n   * > **Note**: `parse` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `parse` performs the parse phase, not the run phase or other\n   * > phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   file to parse (optional); typically `string` or `VFile`; any value\n   *   accepted as `x` in `new VFile(x)`.\n   * @returns {ParseTree extends undefined ? Node : ParseTree}\n   *   Syntax tree representing `file`.\n   */\n  parse(file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const parser = this.parser || this.Parser\n    assertParser('parse', parser)\n    return parser(String(realFile), realFile)\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * > **Note**: `process` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `process` performs the parse, run, and stringify phases.\n   *\n   * @overload\n   * @param {Compatible | undefined} file\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<VFileWithOutput<CompileResult>>}\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`]; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]\n   *   Callback (optional).\n   * @returns {Promise<VFile> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise a promise, rejected with a fatal error or resolved with the\n   *   processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  process(file, done) {\n    const self = this\n\n    this.freeze()\n    assertParser('process', this.parser || this.Parser)\n    assertCompiler('process', this.compiler || this.Compiler)\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {((file: VFileWithOutput<CompileResult>) => undefined | void) | undefined} resolve\n     * @param {(error: Error | undefined) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      const realFile = vfile(file)\n      // Assume `ParseTree` (the result of the parser) matches `HeadTree` (the\n      // input of the first transform).\n      const parseTree =\n        /** @type {HeadTree extends undefined ? Node : HeadTree} */ (\n          /** @type {unknown} */ (self.parse(realFile))\n        )\n\n      self.run(parseTree, realFile, function (error, tree, file) {\n        if (error || !tree || !file) {\n          return realDone(error)\n        }\n\n        // Assume `TailTree` (the output of the last transform) matches\n        // `CompileTree` (the input of the compiler).\n        const compileTree =\n          /** @type {CompileTree extends undefined ? Node : CompileTree} */ (\n            /** @type {unknown} */ (tree)\n          )\n\n        const compileResult = self.stringify(compileTree, file)\n\n        if (looksLikeAValue(compileResult)) {\n          file.value = compileResult\n        } else {\n          file.result = compileResult\n        }\n\n        realDone(error, /** @type {VFileWithOutput<CompileResult>} */ (file))\n      })\n\n      /**\n       * @param {Error | undefined} error\n       * @param {VFileWithOutput<CompileResult> | undefined} [file]\n       * @returns {undefined}\n       */\n      function realDone(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `processSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `processSync` performs the parse, run, and stringify phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @returns {VFileWithOutput<CompileResult>}\n   *   The processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  processSync(file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {VFileWithOutput<CompileResult> | undefined} */\n    let result\n\n    this.freeze()\n    assertParser('processSync', this.parser || this.Parser)\n    assertCompiler('processSync', this.compiler || this.Compiler)\n\n    this.process(file, realDone)\n    assertDone('processSync', 'process', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n\n    return result\n\n    /**\n     * @type {ProcessCallback<VFileWithOutput<CompileResult>>}\n     */\n    function realDone(error, file) {\n      complete = true\n      bail(error)\n      result = file\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * > **Note**: `run` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `run` performs the run phase, not other phases.\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} file\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {(\n   *   RunCallback<TailTree extends undefined ? Node : TailTree> |\n   *   Compatible\n   * )} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]\n   *   Callback (optional).\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise, a promise rejected with a fatal error or resolved with the\n   *   transformed tree.\n   */\n  run(tree, file, done) {\n    assertNode(tree)\n    this.freeze()\n\n    const transformers = this.transformers\n\n    if (!done && typeof file === 'function') {\n      done = file\n      file = undefined\n    }\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {(\n     *   ((tree: TailTree extends undefined ? Node : TailTree) => undefined | void) |\n     *   undefined\n     * )} resolve\n     * @param {(error: Error) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      assert(\n        typeof file !== 'function',\n        '`file` can’t be a `done` anymore, we checked'\n      )\n      const realFile = vfile(file)\n      transformers.run(tree, realFile, realDone)\n\n      /**\n       * @param {Error | undefined} error\n       * @param {Node} outputTree\n       * @param {VFile} file\n       * @returns {undefined}\n       */\n      function realDone(error, outputTree, file) {\n        const resultingTree =\n          /** @type {TailTree extends undefined ? Node : TailTree} */ (\n            outputTree || tree\n          )\n\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(resultingTree)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, resultingTree, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `runSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `runSync` performs the run phase, not other phases.\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {TailTree extends undefined ? Node : TailTree}\n   *   Transformed tree.\n   */\n  runSync(tree, file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {(TailTree extends undefined ? Node : TailTree) | undefined} */\n    let result\n\n    this.run(tree, file, realDone)\n\n    assertDone('runSync', 'run', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n    return result\n\n    /**\n     * @type {RunCallback<TailTree extends undefined ? Node : TailTree>}\n     */\n    function realDone(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * Compile a syntax tree.\n   *\n   * > **Note**: `stringify` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `stringify` performs the stringify phase, not the run phase\n   * > or other phases.\n   *\n   * @param {CompileTree extends undefined ? Node : CompileTree} tree\n   *   Tree to compile.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {CompileResult extends undefined ? Value : CompileResult}\n   *   Textual representation of the tree (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most compilers\n   *   > return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  stringify(tree, file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const compiler = this.compiler || this.Compiler\n    assertCompiler('stringify', compiler)\n    assertNode(tree)\n\n    return compiler(tree, realFile)\n  }\n\n  /**\n   * Configure the processor to use a plugin, a list of usable values, or a\n   * preset.\n   *\n   * If the processor is already using a plugin, the previous plugin\n   * configuration is changed based on the options that are passed in.\n   * In other words, the plugin is not added a second time.\n   *\n   * > **Note**: `use` cannot be called on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * @example\n   *   There are many ways to pass plugins to `.use()`.\n   *   This example gives an overview:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   unified()\n   *     // Plugin with options:\n   *     .use(pluginA, {x: true, y: true})\n   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):\n   *     .use(pluginA, {y: false, z: true})\n   *     // Plugins:\n   *     .use([pluginB, pluginC])\n   *     // Two plugins, the second with options:\n   *     .use([pluginD, [pluginE, {}]])\n   *     // Preset with plugins and settings:\n   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})\n   *     // Settings only:\n   *     .use({settings: {position: false}})\n   *   ```\n   *\n   * @template {Array<unknown>} [Parameters=[]]\n   * @template {Node | string | undefined} [Input=undefined]\n   * @template [Output=Input]\n   *\n   * @overload\n   * @param {Preset | null | undefined} [preset]\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {PluggableList} list\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Plugin<Parameters, Input, Output>} plugin\n   * @param {...(Parameters | [boolean])} parameters\n   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}\n   *\n   * @param {PluggableList | Plugin | Preset | null | undefined} value\n   *   Usable value.\n   * @param {...unknown} parameters\n   *   Parameters, when a plugin is given as a usable value.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   Current processor.\n   */\n  use(value, ...parameters) {\n    const attachers = this.attachers\n    const namespace = this.namespace\n\n    assertUnfrozen('use', this.frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, parameters)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    return this\n\n    /**\n     * @param {Pluggable} value\n     * @returns {undefined}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value, [])\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...parameters] =\n            /** @type {PluginTuple<Array<unknown>>} */ (value)\n          addPlugin(plugin, parameters)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {undefined}\n     */\n    function addPreset(result) {\n      if (!('plugins' in result) && !('settings' in result)) {\n        throw new Error(\n          'Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither'\n        )\n      }\n\n      addList(result.plugins)\n\n      if (result.settings) {\n        namespace.settings = extend(true, namespace.settings, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList | null | undefined} plugins\n     * @returns {undefined}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {Array<unknown>} parameters\n     * @returns {undefined}\n     */\n    function addPlugin(plugin, parameters) {\n      let index = -1\n      let entryIndex = -1\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entryIndex = index\n          break\n        }\n      }\n\n      if (entryIndex === -1) {\n        attachers.push([plugin, ...parameters])\n      }\n      // Only set if there was at least a `primary` value, otherwise we’d change\n      // `arguments.length`.\n      else if (parameters.length > 0) {\n        let [primary, ...rest] = parameters\n        const currentPrimary = attachers[entryIndex][1]\n        if (isPlainObj(currentPrimary) && isPlainObj(primary)) {\n          primary = extend(true, currentPrimary, primary)\n        }\n\n        attachers[entryIndex] = [plugin, primary, ...rest]\n      }\n    }\n  }\n}\n\n// Note: this returns a *callable* instance.\n// That’s why it’s documented as a function.\n/**\n * Create a new processor.\n *\n * @example\n *   This example shows how a new processor can be created (from `remark`) and linked\n *   to **stdin**(4) and **stdout**(4).\n *\n *   ```js\n *   import process from 'node:process'\n *   import concatStream from 'concat-stream'\n *   import {remark} from 'remark'\n *\n *   process.stdin.pipe(\n *     concatStream(function (buf) {\n *       process.stdout.write(String(remark().processSync(buf)))\n *     })\n *   )\n *   ```\n *\n * @returns\n *   New *unfrozen* processor (`processor`).\n *\n *   This processor is configured to work the same as its ancestor.\n *   When the descendant processor is configured in the future it does not\n *   affect the ancestral processor.\n */\nexport const unified = new Processor().freeze()\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is Value}\n */\nfunction looksLikeAValue(value) {\n  return typeof value === 'string' || isUint8Array(value)\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","/**\n * @typedef { import('estree').Node} Node\n * @typedef {{\n *   skip: () => void;\n *   remove: () => void;\n *   replace: (node: Node) => void;\n * }} WalkerContext\n */\n\nexport class WalkerBase {\n\tconstructor() {\n\t\t/** @type {boolean} */\n\t\tthis.should_skip = false;\n\n\t\t/** @type {boolean} */\n\t\tthis.should_remove = false;\n\n\t\t/** @type {Node | null} */\n\t\tthis.replacement = null;\n\n\t\t/** @type {WalkerContext} */\n\t\tthis.context = {\n\t\t\tskip: () => (this.should_skip = true),\n\t\t\tremove: () => (this.should_remove = true),\n\t\t\treplace: (node) => (this.replacement = node)\n\t\t};\n\t}\n\n\t/**\n\t * @template {Node} Parent\n\t * @param {Parent | null | undefined} parent\n\t * @param {keyof Parent | null | undefined} prop\n\t * @param {number | null | undefined} index\n\t * @param {Node} node\n\t */\n\treplace(parent, prop, index, node) {\n\t\tif (parent && prop) {\n\t\t\tif (index != null) {\n\t\t\t\t/** @type {Array<Node>} */ (parent[prop])[index] = node;\n\t\t\t} else {\n\t\t\t\t/** @type {Node} */ (parent[prop]) = node;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @template {Node} Parent\n\t * @param {Parent | null | undefined} parent\n\t * @param {keyof Parent | null | undefined} prop\n\t * @param {number | null | undefined} index\n\t */\n\tremove(parent, prop, index) {\n\t\tif (parent && prop) {\n\t\t\tif (index !== null && index !== undefined) {\n\t\t\t\t/** @type {Array<Node>} */ (parent[prop]).splice(index, 1);\n\t\t\t} else {\n\t\t\t\tdelete parent[prop];\n\t\t\t}\n\t\t}\n\t}\n}\n","import { WalkerBase } from './walker.js';\n\n/**\n * @typedef { import('estree').Node} Node\n * @typedef { import('./walker.js').WalkerContext} WalkerContext\n * @typedef {(\n *    this: WalkerContext,\n *    node: Node,\n *    parent: Node | null,\n *    key: string | number | symbol | null | undefined,\n *    index: number | null | undefined\n * ) => void} SyncHandler\n */\n\nexport class SyncWalker extends WalkerBase {\n\t/**\n\t *\n\t * @param {SyncHandler} [enter]\n\t * @param {SyncHandler} [leave]\n\t */\n\tconstructor(enter, leave) {\n\t\tsuper();\n\n\t\t/** @type {boolean} */\n\t\tthis.should_skip = false;\n\n\t\t/** @type {boolean} */\n\t\tthis.should_remove = false;\n\n\t\t/** @type {Node | null} */\n\t\tthis.replacement = null;\n\n\t\t/** @type {WalkerContext} */\n\t\tthis.context = {\n\t\t\tskip: () => (this.should_skip = true),\n\t\t\tremove: () => (this.should_remove = true),\n\t\t\treplace: (node) => (this.replacement = node)\n\t\t};\n\n\t\t/** @type {SyncHandler | undefined} */\n\t\tthis.enter = enter;\n\n\t\t/** @type {SyncHandler | undefined} */\n\t\tthis.leave = leave;\n\t}\n\n\t/**\n\t * @template {Node} Parent\n\t * @param {Node} node\n\t * @param {Parent | null} parent\n\t * @param {keyof Parent} [prop]\n\t * @param {number | null} [index]\n\t * @returns {Node | null}\n\t */\n\tvisit(node, parent, prop, index) {\n\t\tif (node) {\n\t\t\tif (this.enter) {\n\t\t\t\tconst _should_skip = this.should_skip;\n\t\t\t\tconst _should_remove = this.should_remove;\n\t\t\t\tconst _replacement = this.replacement;\n\t\t\t\tthis.should_skip = false;\n\t\t\t\tthis.should_remove = false;\n\t\t\t\tthis.replacement = null;\n\n\t\t\t\tthis.enter.call(this.context, node, parent, prop, index);\n\n\t\t\t\tif (this.replacement) {\n\t\t\t\t\tnode = this.replacement;\n\t\t\t\t\tthis.replace(parent, prop, index, node);\n\t\t\t\t}\n\n\t\t\t\tif (this.should_remove) {\n\t\t\t\t\tthis.remove(parent, prop, index);\n\t\t\t\t}\n\n\t\t\t\tconst skipped = this.should_skip;\n\t\t\t\tconst removed = this.should_remove;\n\n\t\t\t\tthis.should_skip = _should_skip;\n\t\t\t\tthis.should_remove = _should_remove;\n\t\t\t\tthis.replacement = _replacement;\n\n\t\t\t\tif (skipped) return node;\n\t\t\t\tif (removed) return null;\n\t\t\t}\n\n\t\t\t/** @type {keyof Node} */\n\t\t\tlet key;\n\n\t\t\tfor (key in node) {\n\t\t\t\t/** @type {unknown} */\n\t\t\t\tconst value = node[key];\n\n\t\t\t\tif (value && typeof value === 'object') {\n\t\t\t\t\tif (Array.isArray(value)) {\n\t\t\t\t\t\tconst nodes = /** @type {Array<unknown>} */ (value);\n\t\t\t\t\t\tfor (let i = 0; i < nodes.length; i += 1) {\n\t\t\t\t\t\t\tconst item = nodes[i];\n\t\t\t\t\t\t\tif (isNode(item)) {\n\t\t\t\t\t\t\t\tif (!this.visit(item, node, key, i)) {\n\t\t\t\t\t\t\t\t\t// removed\n\t\t\t\t\t\t\t\t\ti--;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (isNode(value)) {\n\t\t\t\t\t\tthis.visit(value, node, key, null);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.leave) {\n\t\t\t\tconst _replacement = this.replacement;\n\t\t\t\tconst _should_remove = this.should_remove;\n\t\t\t\tthis.replacement = null;\n\t\t\t\tthis.should_remove = false;\n\n\t\t\t\tthis.leave.call(this.context, node, parent, prop, index);\n\n\t\t\t\tif (this.replacement) {\n\t\t\t\t\tnode = this.replacement;\n\t\t\t\t\tthis.replace(parent, prop, index, node);\n\t\t\t\t}\n\n\t\t\t\tif (this.should_remove) {\n\t\t\t\t\tthis.remove(parent, prop, index);\n\t\t\t\t}\n\n\t\t\t\tconst removed = this.should_remove;\n\n\t\t\t\tthis.replacement = _replacement;\n\t\t\t\tthis.should_remove = _should_remove;\n\n\t\t\t\tif (removed) return null;\n\t\t\t}\n\t\t}\n\n\t\treturn node;\n\t}\n}\n\n/**\n * Ducktype a node.\n *\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction isNode(value) {\n\treturn (\n\t\tvalue !== null && typeof value === 'object' && 'type' in value && typeof value.type === 'string'\n\t);\n}\n","import { WalkerBase } from './walker.js';\n\n/**\n * @typedef { import('estree').Node} Node\n * @typedef { import('./walker.js').WalkerContext} WalkerContext\n * @typedef {(\n *    this: WalkerContext,\n *    node: Node,\n *    parent: Node | null,\n *    key: string | number | symbol | null | undefined,\n *    index: number | null | undefined\n * ) => Promise<void>} AsyncHandler\n */\n\nexport class AsyncWalker extends WalkerBase {\n\t/**\n\t *\n\t * @param {AsyncHandler} [enter]\n\t * @param {AsyncHandler} [leave]\n\t */\n\tconstructor(enter, leave) {\n\t\tsuper();\n\n\t\t/** @type {boolean} */\n\t\tthis.should_skip = false;\n\n\t\t/** @type {boolean} */\n\t\tthis.should_remove = false;\n\n\t\t/** @type {Node | null} */\n\t\tthis.replacement = null;\n\n\t\t/** @type {WalkerContext} */\n\t\tthis.context = {\n\t\t\tskip: () => (this.should_skip = true),\n\t\t\tremove: () => (this.should_remove = true),\n\t\t\treplace: (node) => (this.replacement = node)\n\t\t};\n\n\t\t/** @type {AsyncHandler | undefined} */\n\t\tthis.enter = enter;\n\n\t\t/** @type {AsyncHandler | undefined} */\n\t\tthis.leave = leave;\n\t}\n\n\t/**\n\t * @template {Node} Parent\n\t * @param {Node} node\n\t * @param {Parent | null} parent\n\t * @param {keyof Parent} [prop]\n\t * @param {number | null} [index]\n\t * @returns {Promise<Node | null>}\n\t */\n\tasync visit(node, parent, prop, index) {\n\t\tif (node) {\n\t\t\tif (this.enter) {\n\t\t\t\tconst _should_skip = this.should_skip;\n\t\t\t\tconst _should_remove = this.should_remove;\n\t\t\t\tconst _replacement = this.replacement;\n\t\t\t\tthis.should_skip = false;\n\t\t\t\tthis.should_remove = false;\n\t\t\t\tthis.replacement = null;\n\n\t\t\t\tawait this.enter.call(this.context, node, parent, prop, index);\n\n\t\t\t\tif (this.replacement) {\n\t\t\t\t\tnode = this.replacement;\n\t\t\t\t\tthis.replace(parent, prop, index, node);\n\t\t\t\t}\n\n\t\t\t\tif (this.should_remove) {\n\t\t\t\t\tthis.remove(parent, prop, index);\n\t\t\t\t}\n\n\t\t\t\tconst skipped = this.should_skip;\n\t\t\t\tconst removed = this.should_remove;\n\n\t\t\t\tthis.should_skip = _should_skip;\n\t\t\t\tthis.should_remove = _should_remove;\n\t\t\t\tthis.replacement = _replacement;\n\n\t\t\t\tif (skipped) return node;\n\t\t\t\tif (removed) return null;\n\t\t\t}\n\n\t\t\t/** @type {keyof Node} */\n\t\t\tlet key;\n\n\t\t\tfor (key in node) {\n\t\t\t\t/** @type {unknown} */\n\t\t\t\tconst value = node[key];\n\n\t\t\t\tif (value && typeof value === 'object') {\n\t\t\t\t\tif (Array.isArray(value)) {\n\t\t\t\t\t\tconst nodes = /** @type {Array<unknown>} */ (value);\n\t\t\t\t\t\tfor (let i = 0; i < nodes.length; i += 1) {\n\t\t\t\t\t\t\tconst item = nodes[i];\n\t\t\t\t\t\t\tif (isNode(item)) {\n\t\t\t\t\t\t\t\tif (!(await this.visit(item, node, key, i))) {\n\t\t\t\t\t\t\t\t\t// removed\n\t\t\t\t\t\t\t\t\ti--;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (isNode(value)) {\n\t\t\t\t\t\tawait this.visit(value, node, key, null);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.leave) {\n\t\t\t\tconst _replacement = this.replacement;\n\t\t\t\tconst _should_remove = this.should_remove;\n\t\t\t\tthis.replacement = null;\n\t\t\t\tthis.should_remove = false;\n\n\t\t\t\tawait this.leave.call(this.context, node, parent, prop, index);\n\n\t\t\t\tif (this.replacement) {\n\t\t\t\t\tnode = this.replacement;\n\t\t\t\t\tthis.replace(parent, prop, index, node);\n\t\t\t\t}\n\n\t\t\t\tif (this.should_remove) {\n\t\t\t\t\tthis.remove(parent, prop, index);\n\t\t\t\t}\n\n\t\t\t\tconst removed = this.should_remove;\n\n\t\t\t\tthis.replacement = _replacement;\n\t\t\t\tthis.should_remove = _should_remove;\n\n\t\t\t\tif (removed) return null;\n\t\t\t}\n\t\t}\n\n\t\treturn node;\n\t}\n}\n\n/**\n * Ducktype a node.\n *\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction isNode(value) {\n\treturn (\n\t\tvalue !== null && typeof value === 'object' && 'type' in value && typeof value.type === 'string'\n\t);\n}\n","import { SyncWalker } from './sync.js';\nimport { AsyncWalker } from './async.js';\n\n/**\n * @typedef {import('estree').Node} Node\n * @typedef {import('./sync.js').SyncHandler} SyncHandler\n * @typedef {import('./async.js').AsyncHandler} AsyncHandler\n */\n\n/**\n * @param {Node} ast\n * @param {{\n *   enter?: SyncHandler\n *   leave?: SyncHandler\n * }} walker\n * @returns {Node | null}\n */\nexport function walk(ast, { enter, leave }) {\n\tconst instance = new SyncWalker(enter, leave);\n\treturn instance.visit(ast, null);\n}\n\n/**\n * @param {Node} ast\n * @param {{\n *   enter?: AsyncHandler\n *   leave?: AsyncHandler\n * }} walker\n * @returns {Promise<Node | null>}\n */\nexport async function asyncWalk(ast, { enter, leave }) {\n\tconst instance = new AsyncWalker(enter, leave);\n\treturn await instance.visit(ast, null);\n}\n","/** @typedef { import('estree').Node} Node */\n/** @typedef {Node | {\n *   type: 'PropertyDefinition';\n *   computed: boolean;\n *   value: Node\n * }} NodeWithPropertyDefinition */\n\n/**\n *\n * @param {NodeWithPropertyDefinition} node\n * @param {NodeWithPropertyDefinition} parent\n * @returns {boolean}\n */\nexport default function is_reference (node, parent) {\n\tif (node.type === 'MemberExpression') {\n\t\treturn !node.computed && is_reference(node.object, node);\n\t}\n\n\tif (node.type === 'Identifier') {\n\t\tif (!parent) return true;\n\n\t\tswitch (parent.type) {\n\t\t\t// disregard `bar` in `foo.bar`\n\t\t\tcase 'MemberExpression': return parent.computed || node === parent.object;\n\n\t\t\t// disregard the `foo` in `class {foo(){}}` but keep it in `class {[foo](){}}`\n\t\t\tcase 'MethodDefinition': return parent.computed;\n\n\t\t\t// disregard the `foo` in `class {foo=bar}` but keep it in `class {[foo]=bar}` and `class {bar=foo}`\n\t\t\tcase 'PropertyDefinition': return parent.computed || node === parent.value;\n\n\t\t\t// disregard the `bar` in `{ bar: foo }`, but keep it in `{ [bar]: foo }`\n\t\t\tcase 'Property': return parent.computed || node === parent.value;\n\n\t\t\t// disregard the `bar` in `export { foo as bar }` or\n\t\t\t// the foo in `import { foo as bar }`\n\t\t\tcase 'ExportSpecifier':\n\t\t\tcase 'ImportSpecifier': return node === parent.local;\n\n\t\t\t// disregard the `foo` in `foo: while (...) { ... break foo; ... continue foo;}`\n\t\t\tcase 'LabeledStatement':\n\t\t\tcase 'BreakStatement':\n\t\t\tcase 'ContinueStatement': return false;\n\t\t\tdefault: return true;\n\t\t}\n\t}\n\n\treturn false;\n}\n","import { walk } from 'estree-walker';\nimport is_reference from 'is-reference';\n\n/** @param {import('estree').Node} expression */\nexport function analyze(expression) {\n\t/** @typedef {import('estree').Node} Node */\n\n\t/** @type {WeakMap<Node, Scope>} */\n\tconst map = new WeakMap();\n\n\t/** @type {Map<string, Node>} */\n\tconst globals = new Map();\n\n\tconst scope = new Scope(null, false);\n\n\t/** @type {[Scope, import('estree').Identifier][]} */\n\tconst references = [];\n\t/** @type {Scope} */\n\tlet current_scope = scope;\n\n\twalk(expression, {\n\t\tenter(node, parent) {\n\t\t\tswitch (node.type) {\n\t\t\t\tcase 'Identifier':\n\t\t\t\t\tif (parent && is_reference(node, parent)) {\n\t\t\t\t\t\treferences.push([current_scope, node]);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ImportDeclaration':\n\t\t\t\t\tnode.specifiers.forEach((specifier) => {\n\t\t\t\t\t\tcurrent_scope.declarations.set(specifier.local.name, specifier);\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'FunctionExpression':\n\t\t\t\tcase 'FunctionDeclaration':\n\t\t\t\tcase 'ArrowFunctionExpression':\n\t\t\t\t\tif (node.type === 'FunctionDeclaration') {\n\t\t\t\t\t\tif (node.id) {\n\t\t\t\t\t\t\tcurrent_scope.declarations.set(node.id.name, node);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmap.set(node, current_scope = new Scope(current_scope, false));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmap.set(node, current_scope = new Scope(current_scope, false));\n\n\t\t\t\t\t\tif (node.type === 'FunctionExpression' && node.id) {\n\t\t\t\t\t\t\tcurrent_scope.declarations.set(node.id.name, node);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tnode.params.forEach(param => {\n\t\t\t\t\t\textract_names(param).forEach(name => {\n\t\t\t\t\t\t\tcurrent_scope.declarations.set(name, node);\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ForStatement':\n\t\t\t\tcase 'ForInStatement':\n\t\t\t\tcase 'ForOfStatement':\n\t\t\t\t\tmap.set(node, current_scope = new Scope(current_scope, true));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'BlockStatement':\n\t\t\t\t\tmap.set(node, current_scope = new Scope(current_scope, true));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ClassDeclaration':\n\t\t\t\tcase 'VariableDeclaration':\n\t\t\t\t\tcurrent_scope.add_declaration(node);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'CatchClause':\n\t\t\t\t\tmap.set(node, current_scope = new Scope(current_scope, true));\n\n\t\t\t\t\tif (node.param) {\n\t\t\t\t\t\textract_names(node.param).forEach(name => {\n\t\t\t\t\t\t\tif (node.param) {\n\t\t\t\t\t\t\t\tcurrent_scope.declarations.set(name, node.param);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t},\n\n\t\tleave(node) {\n\t\t\tif (map.has(node) && current_scope !== null && current_scope.parent) {\n\t\t\t\tcurrent_scope = current_scope.parent;\n\t\t\t}\n\t\t}\n\t});\n\n\tfor (let i = references.length - 1; i >= 0; --i) {\n\t\tconst [scope, reference] = references[i];\n\n\t\tif (!scope.references.has(reference.name)) {\n\t\t\tadd_reference(scope, reference.name);\n\t\t}\n\t\tif (!scope.find_owner(reference.name)) {\n\t\t\tglobals.set(reference.name, reference);\n\t\t}\n\t}\n\n\treturn { map, scope, globals };\n}\n\n/**\n * @param {Scope} scope\n * @param {string} name\n */\nfunction add_reference(scope, name) {\n\tscope.references.add(name);\n\tif (scope.parent) add_reference(scope.parent, name);\n}\n\nexport class Scope {\n\t/**\n\t * @param {Scope | null} parent \n\t * @param {boolean} block \n\t */\n\tconstructor(parent, block) {\n\t\t/** @type {Scope | null} */\n\t\tthis.parent = parent;\n\n\t\t/** @type {boolean} */\n\t\tthis.block = block;\n\n\t\t/** @type {Map<string, import('estree').Node>} */\n\t\tthis.declarations = new Map();\n\n\t\t/** @type {Set<string>} */\n\t\tthis.initialised_declarations = new Set();\n\n\t\t/** @type {Set<string>} */\n\t\tthis.references = new Set();\n\t}\n\n\t/**\n\t * @param {import('estree').VariableDeclaration | import('estree').ClassDeclaration} node\n\t */\n\tadd_declaration(node) {\n\t\tif (node.type === 'VariableDeclaration') {\n\t\t\tif (node.kind === 'var' && this.block && this.parent) {\n\t\t\t\tthis.parent.add_declaration(node);\n\t\t\t} else {\n\t\t\t\t/** @param {import('estree').VariableDeclarator} declarator */\n\t\t\t\tconst handle_declarator = (declarator) => {\n\t\t\t\t\textract_names(declarator.id).forEach(name => {\n\t\t\t\t\t\tthis.declarations.set(name, node);\n\t\t\t\t\t\tif (declarator.init) this.initialised_declarations.add(name);\n\t\t\t\t\t});;\n\t\t\t\t}\n\n\t\t\t\tnode.declarations.forEach(handle_declarator);\n\t\t\t}\n\t\t} else if (node.id) {\n\t\t\tthis.declarations.set(node.id.name, node);\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} name\n\t * @returns {Scope | null}\n\t */\n\tfind_owner(name) {\n\t\tif (this.declarations.has(name)) return this;\n\t\treturn this.parent && this.parent.find_owner(name);\n\t}\n\n\t/**\n\t * @param {string} name\n\t * @returns {boolean}\n\t */\n\thas(name) {\n\t\treturn (\n\t\t\tthis.declarations.has(name) || (!!this.parent && this.parent.has(name))\n\t\t);\n\t}\n}\n\n/**\n * @param {import('estree').Node} param\n * @returns {string[]}\n */\nexport function extract_names(param) {\n\treturn extract_identifiers(param).map(node => node.name);\n}\n\n/**\n * @param {import('estree').Node} param\n * @param {import('estree').Identifier[]} nodes\n * @returns {import('estree').Identifier[]}\n */\nexport function extract_identifiers(param, nodes = []) {\n\tswitch (param.type) {\n\t\tcase 'Identifier':\n\t\t\tnodes.push(param);\n\t\t\tbreak;\n\n\t\tcase 'MemberExpression':\n\t\t\tlet object = param;\n\t\t\twhile (object.type === 'MemberExpression') {\n\t\t\t\tobject = /** @type {any} */ (object.object);\n\t\t\t}\n\t\t\tnodes.push(/** @type {any} */ (object));\n\t\t\tbreak;\n\n\t\tcase 'ObjectPattern':\n\t\t\t/** @param {import('estree').Property | import('estree').RestElement} prop */\n\t\t\tconst handle_prop = (prop) => {\n\t\t\t\tif (prop.type === 'RestElement') {\n\t\t\t\t\textract_identifiers(prop.argument, nodes);\n\t\t\t\t} else {\n\t\t\t\t\textract_identifiers(prop.value, nodes);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tparam.properties.forEach(handle_prop);\n\t\t\tbreak;\n\n\t\tcase 'ArrayPattern':\n\t\t\t/** @param {import('estree').Node} element */\n\t\t\tconst handle_element = (element) => {\n\t\t\t\tif (element) extract_identifiers(element, nodes);\n\t\t\t};\n\n\t\t\tparam.elements.forEach((element) => {\n\t\t\t\tif (element) {\n\t\t\t\t\thandle_element(element)\n\t\t\t\t}\n\t\t\t});\n\t\t\tbreak;\n\n\t\tcase 'RestElement':\n\t\t\textract_identifiers(param.argument, nodes);\n\t\t\tbreak;\n\n\t\tcase 'AssignmentPattern':\n\t\t\textract_identifiers(param.left, nodes);\n\t\t\tbreak;\n\t}\n\n\treturn nodes;\n}\n","/**\n * @typedef {import('estree-jsx').Node} Node\n */\n\n// Fix to show references to above types in VS Code.\n''\n\n/**\n * @param {Readonly<Node>} from\n *   Node to take from.\n * @param {Node} to\n *   Node to add to.\n * @returns {undefined}\n *   Nothing.\n */\nexport function create(from, to) {\n  /** @type {Array<keyof Node>} */\n  // @ts-expect-error: `start`, `end`, `comments` are custom Acorn fields.\n  const fields = ['start', 'end', 'loc', 'range', 'comments']\n  let index = -1\n\n  while (++index < fields.length) {\n    const field = fields[index]\n\n    if (field in from) {\n      // @ts-expect-error: assume they’re settable.\n      to[field] = from[field]\n    }\n  }\n}\n","/**\n * @typedef {import('estree-jsx').Declaration} Declaration\n * @typedef {import('estree-jsx').Expression} Expression\n * @typedef {import('estree-jsx').MaybeNamedClassDeclaration} MaybeNamedClassDeclaration\n * @typedef {import('estree-jsx').MaybeNamedFunctionDeclaration} MaybeNamedFunctionDeclaration\n */\n\nimport {ok as assert} from 'devlop'\n\n/**\n * Turn a declaration into an expression.\n *\n * Doesn’t work for variable declarations, but that’s fine for our use case\n * because currently we’re using this utility for export default declarations,\n * which can’t contain variable declarations.\n *\n * @param {Readonly<Declaration | MaybeNamedClassDeclaration | MaybeNamedFunctionDeclaration>} declaration\n *   Declaration.\n * @returns {Expression}\n *   Expression.\n */\nexport function declarationToExpression(declaration) {\n  if (declaration.type === 'FunctionDeclaration') {\n    return {...declaration, type: 'FunctionExpression'}\n  }\n\n  // This is currently an internal utility so the next shouldn’t happen or a\n  // maintainer is making a mistake.\n  assert(declaration.type === 'ClassDeclaration', 'unexpected node type')\n  return {...declaration, type: 'ClassExpression'}\n}\n","/**\n * @typedef {import('estree-jsx').Declaration} Declaration\n * @typedef {import('estree-jsx').MaybeNamedClassDeclaration} MaybeNamedClassDeclaration\n * @typedef {import('estree-jsx').MaybeNamedFunctionDeclaration} MaybeNamedFunctionDeclaration\n * @typedef {import('estree-jsx').Node} Node\n */\n\n// Fix to show references to above types in VS Code.\n''\n\n/**\n * Check if `node` is a declaration.\n *\n * @param {Readonly<MaybeNamedClassDeclaration | MaybeNamedFunctionDeclaration | Node>} node\n *   Node to check.\n * @returns {node is Declaration | MaybeNamedClassDeclaration | MaybeNamedFunctionDeclaration}\n *   Whether `node` is a declaration.\n */\nexport function isDeclaration(node) {\n  return Boolean(\n    node.type === 'FunctionDeclaration' ||\n      node.type === 'ClassDeclaration' ||\n      node.type === 'VariableDeclaration'\n  )\n}\n","/**\n * @typedef {import('estree-jsx').AssignmentProperty} AssignmentProperty\n * @typedef {import('estree-jsx').ExportSpecifier} ExportSpecifier\n * @typedef {import('estree-jsx').Expression} Expression\n * @typedef {import('estree-jsx').Identifier} Identifier\n * @typedef {import('estree-jsx').ImportDefaultSpecifier} ImportDefaultSpecifier\n * @typedef {import('estree-jsx').ImportNamespaceSpecifier} ImportNamespaceSpecifier\n * @typedef {import('estree-jsx').ImportSpecifier} ImportSpecifier\n * @typedef {import('estree-jsx').VariableDeclarator} VariableDeclarator\n */\n\nimport {create} from './estree-util-create.js'\n\n/**\n * @param {ReadonlyArray<Readonly<ExportSpecifier> | Readonly<ImportDefaultSpecifier> | Readonly<ImportNamespaceSpecifier> | Readonly<ImportSpecifier>>} specifiers\n *   Specifiers.\n * @param {Readonly<Expression>} init\n *   Initializer.\n * @returns {Array<VariableDeclarator>}\n *   Declarations.\n */\nexport function specifiersToDeclarations(specifiers, init) {\n  let index = -1\n  /** @type {Array<VariableDeclarator>} */\n  const declarations = []\n  /** @type {Array<ExportSpecifier | ImportDefaultSpecifier | ImportSpecifier>} */\n  const otherSpecifiers = []\n  // Can only be one according to JS syntax.\n  /** @type {ImportNamespaceSpecifier | undefined} */\n  let importNamespaceSpecifier\n\n  while (++index < specifiers.length) {\n    const specifier = specifiers[index]\n\n    if (specifier.type === 'ImportNamespaceSpecifier') {\n      importNamespaceSpecifier = specifier\n    } else {\n      otherSpecifiers.push(specifier)\n    }\n  }\n\n  if (importNamespaceSpecifier) {\n    /** @type {VariableDeclarator} */\n    const declarator = {\n      type: 'VariableDeclarator',\n      id: importNamespaceSpecifier.local,\n      init\n    }\n    create(importNamespaceSpecifier, declarator)\n    declarations.push(declarator)\n  }\n\n  declarations.push({\n    type: 'VariableDeclarator',\n    id: {\n      type: 'ObjectPattern',\n      properties: otherSpecifiers.map(function (specifier) {\n        /** @type {Identifier} */\n        let key =\n          specifier.type === 'ImportSpecifier'\n            ? specifier.imported\n            : specifier.type === 'ExportSpecifier'\n              ? specifier.exported\n              : {type: 'Identifier', name: 'default'}\n        let value = specifier.local\n\n        // Switch them around if we’re exporting.\n        if (specifier.type === 'ExportSpecifier') {\n          value = key\n          key = specifier.local\n        }\n\n        /** @type {AssignmentProperty} */\n        const property = {\n          type: 'Property',\n          kind: 'init',\n          shorthand: key.name === value.name,\n          method: false,\n          computed: false,\n          key,\n          value\n        }\n        create(specifier, property)\n        return property\n      })\n    },\n    init: importNamespaceSpecifier\n      ? {type: 'Identifier', name: importNamespaceSpecifier.local.name}\n      : init\n  })\n\n  return declarations\n}\n","/**\n * @typedef {import('estree-jsx').Identifier} Identifier\n * @typedef {import('estree-jsx').JSXIdentifier} JSXIdentifier\n * @typedef {import('estree-jsx').JSXMemberExpression} JSXMemberExpression\n * @typedef {import('estree-jsx').Literal} Literal\n * @typedef {import('estree-jsx').MemberExpression} MemberExpression\n */\n\nimport {ok as assert} from 'devlop'\nimport {name as isIdentifierName} from 'estree-util-is-identifier-name'\n\n/**\n * @param {ReadonlyArray<number | string>} ids\n *   Identifiers (example: `['list', 0]).\n * @returns {Identifier | MemberExpression}\n *   Identifier or member expression.\n */\nexport function toIdOrMemberExpression(ids) {\n  let index = -1\n  /** @type {Identifier | Literal | MemberExpression | undefined} */\n  let object\n\n  while (++index < ids.length) {\n    const name = ids[index]\n    /** @type {Identifier | Literal} */\n    const id =\n      typeof name === 'string' && isIdentifierName(name)\n        ? {type: 'Identifier', name}\n        : {type: 'Literal', value: name}\n    object = object\n      ? {\n          type: 'MemberExpression',\n          object,\n          property: id,\n          computed: id.type === 'Literal',\n          optional: false\n        }\n      : id\n  }\n\n  assert(object, 'expected non-empty `ids` to be passed')\n  assert(object.type !== 'Literal', 'expected identifier as left-most value')\n  return object\n}\n\n/**\n * @param {ReadonlyArray<number | string>} ids\n *   Identifiers (example: `['list', 0]).\n * @returns {JSXIdentifier | JSXMemberExpression}\n *   Identifier or member expression.\n */\nexport function toJsxIdOrMemberExpression(ids) {\n  let index = -1\n  /** @type {JSXIdentifier | JSXMemberExpression | undefined} */\n  let object\n\n  while (++index < ids.length) {\n    const name = ids[index]\n    assert(\n      typeof name === 'string' && isIdentifierName(name, {jsx: true}),\n      'expected valid jsx identifier, not `' + name + '`'\n    )\n\n    /** @type {JSXIdentifier} */\n    const id = {type: 'JSXIdentifier', name}\n    object = object ? {type: 'JSXMemberExpression', object, property: id} : id\n  }\n\n  assert(object, 'expected non-empty `ids` to be passed')\n  return object\n}\n","/**\n * @typedef {import('estree-jsx').CallExpression} CallExpression\n * @typedef {import('estree-jsx').Directive} Directive\n * @typedef {import('estree-jsx').ExportAllDeclaration} ExportAllDeclaration\n * @typedef {import('estree-jsx').ExportDefaultDeclaration} ExportDefaultDeclaration\n * @typedef {import('estree-jsx').ExportNamedDeclaration} ExportNamedDeclaration\n * @typedef {import('estree-jsx').ExportSpecifier} ExportSpecifier\n * @typedef {import('estree-jsx').Expression} Expression\n * @typedef {import('estree-jsx').FunctionDeclaration} FunctionDeclaration\n * @typedef {import('estree-jsx').Identifier} Identifier\n * @typedef {import('estree-jsx').ImportDeclaration} ImportDeclaration\n * @typedef {import('estree-jsx').ImportDefaultSpecifier} ImportDefaultSpecifier\n * @typedef {import('estree-jsx').ImportExpression} ImportExpression\n * @typedef {import('estree-jsx').ImportSpecifier} ImportSpecifier\n * @typedef {import('estree-jsx').JSXElement} JSXElement\n * @typedef {import('estree-jsx').JSXFragment} JSXFragment\n * @typedef {import('estree-jsx').Literal} Literal\n * @typedef {import('estree-jsx').ModuleDeclaration} ModuleDeclaration\n * @typedef {import('estree-jsx').Node} Node\n * @typedef {import('estree-jsx').Program} Program\n * @typedef {import('estree-jsx').Property} Property\n * @typedef {import('estree-jsx').SimpleLiteral} SimpleLiteral\n * @typedef {import('estree-jsx').SpreadElement} SpreadElement\n * @typedef {import('estree-jsx').Statement} Statement\n * @typedef {import('estree-jsx').VariableDeclarator} VariableDeclarator\n *\n * @typedef {import('vfile').VFile} VFile\n *\n * @typedef {import('../core.js').ProcessorOptions} ProcessorOptions\n */\n\nimport {ok as assert} from 'devlop'\nimport {walk} from 'estree-walker'\nimport {analyze} from 'periscopic'\nimport {positionFromEstree} from 'unist-util-position-from-estree'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nimport {create} from '../util/estree-util-create.js'\nimport {declarationToExpression} from '../util/estree-util-declaration-to-expression.js'\nimport {isDeclaration} from '../util/estree-util-is-declaration.js'\nimport {specifiersToDeclarations} from '../util/estree-util-specifiers-to-declarations.js'\nimport {toIdOrMemberExpression} from '../util/estree-util-to-id-or-member-expression.js'\n\n/**\n * Wrap the estree in `MDXContent`.\n *\n * @param {Readonly<ProcessorOptions>} options\n *   Configuration.\n * @returns\n *   Transform.\n */\nexport function recmaDocument(options) {\n  const baseUrl = options.baseUrl || undefined\n  const baseHref = typeof baseUrl === 'object' ? baseUrl.href : baseUrl\n  const outputFormat = options.outputFormat || 'program'\n  const pragma =\n    options.pragma === undefined ? 'React.createElement' : options.pragma\n  const pragmaFrag =\n    options.pragmaFrag === undefined ? 'React.Fragment' : options.pragmaFrag\n  const pragmaImportSource = options.pragmaImportSource || 'react'\n  const jsxImportSource = options.jsxImportSource || 'react'\n  const jsxRuntime = options.jsxRuntime || 'automatic'\n\n  /**\n   * @param {Program} tree\n   *   Tree.\n   * @param {VFile} file\n   *   File.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  return function (tree, file) {\n    /** @type {Array<[string, string] | string>} */\n    const exportedIdentifiers = []\n    /** @type {Array<Directive | ModuleDeclaration | Statement>} */\n    const replacement = []\n    let exportAllCount = 0\n    /** @type {ExportDefaultDeclaration | ExportSpecifier | undefined} */\n    let layout\n    /** @type {boolean | undefined} */\n    let content\n    /** @type {Node} */\n    let child\n\n    if (jsxRuntime === 'classic' && pragmaFrag) {\n      injectPragma(tree, '@jsxFrag', pragmaFrag)\n    }\n\n    if (jsxRuntime === 'classic' && pragma) {\n      injectPragma(tree, '@jsx', pragma)\n    }\n\n    if (jsxRuntime === 'automatic' && jsxImportSource) {\n      injectPragma(tree, '@jsxImportSource', jsxImportSource)\n    }\n\n    if (jsxRuntime) {\n      injectPragma(tree, '@jsxRuntime', jsxRuntime)\n    }\n\n    if (jsxRuntime === 'classic' && pragmaImportSource) {\n      if (!pragma) {\n        throw new Error(\n          'Missing `pragma` in classic runtime with `pragmaImportSource`'\n        )\n      }\n\n      handleEsm({\n        type: 'ImportDeclaration',\n        specifiers: [\n          {\n            type: 'ImportDefaultSpecifier',\n            local: {type: 'Identifier', name: pragma.split('.')[0]}\n          }\n        ],\n        source: {type: 'Literal', value: pragmaImportSource}\n      })\n    }\n\n    // Find the `export default`, the JSX expression, and leave the rest\n    // (import/exports) as they are.\n    for (child of tree.body) {\n      // ```tsx\n      // export default properties => <>{properties.children}</>\n      // ```\n      //\n      // Treat it as an inline layout declaration.\n      if (child.type === 'ExportDefaultDeclaration') {\n        if (layout) {\n          file.fail(\n            'Unexpected duplicate layout, expected a single layout (previous: ' +\n              stringifyPosition(positionFromEstree(layout)) +\n              ')',\n            {\n              ancestors: [tree, child],\n              place: positionFromEstree(child),\n              ruleId: 'duplicate-layout',\n              source: 'recma-document'\n            }\n          )\n        }\n\n        layout = child\n        replacement.push({\n          type: 'VariableDeclaration',\n          kind: 'const',\n          declarations: [\n            {\n              type: 'VariableDeclarator',\n              id: {type: 'Identifier', name: 'MDXLayout'},\n              init: isDeclaration(child.declaration)\n                ? declarationToExpression(child.declaration)\n                : child.declaration\n            }\n          ]\n        })\n      }\n      // ```tsx\n      // export {a, b as c} from 'd'\n      // ```\n      else if (child.type === 'ExportNamedDeclaration' && child.source) {\n        // Cast because always simple.\n        const source = /** @type {SimpleLiteral} */ (child.source)\n\n        // Remove `default` or `as default`, but not `default as`, specifier.\n        child.specifiers = child.specifiers.filter(function (specifier) {\n          if (specifier.exported.name === 'default') {\n            if (layout) {\n              file.fail(\n                'Unexpected duplicate layout, expected a single layout (previous: ' +\n                  stringifyPosition(positionFromEstree(layout)) +\n                  ')',\n                {\n                  ancestors: [tree, child, specifier],\n                  place: positionFromEstree(child),\n                  ruleId: 'duplicate-layout',\n                  source: 'recma-document'\n                }\n              )\n            }\n\n            layout = specifier\n\n            // Make it just an import: `import MDXLayout from '…'`.\n            /** @type {Array<ImportDefaultSpecifier | ImportSpecifier>} */\n            const specifiers = []\n\n            // Default as default / something else as default.\n            if (specifier.local.name === 'default') {\n              specifiers.push({\n                type: 'ImportDefaultSpecifier',\n                local: {type: 'Identifier', name: 'MDXLayout'}\n              })\n            } else {\n              /** @type {ImportSpecifier} */\n              const importSpecifier = {\n                type: 'ImportSpecifier',\n                imported: specifier.local,\n                local: {type: 'Identifier', name: 'MDXLayout'}\n              }\n              create(specifier.local, importSpecifier)\n              specifiers.push(importSpecifier)\n            }\n\n            /** @type {Literal} */\n            const from = {type: 'Literal', value: source.value}\n            create(source, from)\n\n            /** @type {ImportDeclaration} */\n            const declaration = {\n              type: 'ImportDeclaration',\n              specifiers,\n              source: from\n            }\n            create(specifier, declaration)\n            handleEsm(declaration)\n\n            return false\n          }\n\n          return true\n        })\n\n        // If there are other things imported, keep it.\n        if (child.specifiers.length > 0) {\n          handleExport(child)\n        }\n      }\n      // ```tsx\n      // export {a, b as c}\n      // export * from 'a'\n      // ```\n      else if (\n        child.type === 'ExportNamedDeclaration' ||\n        child.type === 'ExportAllDeclaration'\n      ) {\n        handleExport(child)\n      } else if (child.type === 'ImportDeclaration') {\n        handleEsm(child)\n      } else if (\n        child.type === 'ExpressionStatement' &&\n        (child.expression.type === 'JSXElement' ||\n          // @ts-expect-error: `estree-jsx` does not register `JSXFragment` as an expression.\n          child.expression.type === 'JSXFragment')\n      ) {\n        content = true\n        replacement.push(\n          ...createMdxContent(child.expression, outputFormat, Boolean(layout))\n        )\n      } else {\n        // This catch-all branch is because plugins might add other things.\n        // Normally, we only have import/export/jsx, but just add whatever’s\n        // there.\n        replacement.push(child)\n      }\n    }\n\n    // If there was no JSX content at all, add an empty function.\n    if (!content) {\n      replacement.push(\n        ...createMdxContent(undefined, outputFormat, Boolean(layout))\n      )\n    }\n\n    exportedIdentifiers.push(['MDXContent', 'default'])\n\n    if (outputFormat === 'function-body') {\n      replacement.push({\n        type: 'ReturnStatement',\n        argument: {\n          type: 'ObjectExpression',\n          properties: [\n            ...Array.from({length: exportAllCount}).map(\n              /**\n               * @param {undefined} _\n               *   Nothing.\n               * @param {number} index\n               *   Index.\n               * @returns {SpreadElement}\n               *   Node.\n               */\n              function (_, index) {\n                return {\n                  type: 'SpreadElement',\n                  argument: {\n                    type: 'Identifier',\n                    name: '_exportAll' + (index + 1)\n                  }\n                }\n              }\n            ),\n            ...exportedIdentifiers.map(function (d) {\n              /** @type {Property} */\n              const property = {\n                type: 'Property',\n                kind: 'init',\n                method: false,\n                computed: false,\n                shorthand: typeof d === 'string',\n                key: {\n                  type: 'Identifier',\n                  name: typeof d === 'string' ? d : d[1]\n                },\n                value: {\n                  type: 'Identifier',\n                  name: typeof d === 'string' ? d : d[0]\n                }\n              }\n\n              return property\n            })\n          ]\n        }\n      })\n    }\n\n    tree.body = replacement\n\n    let usesImportMetaUrlVariable = false\n    let usesResolveDynamicHelper = false\n\n    if (baseHref || outputFormat === 'function-body') {\n      walk(tree, {\n        enter(node) {\n          if (\n            (node.type === 'ExportAllDeclaration' ||\n              node.type === 'ExportNamedDeclaration' ||\n              node.type === 'ImportDeclaration') &&\n            node.source\n          ) {\n            // We never hit this branch when generating function bodies, as\n            // statements are already compiled away into import expressions.\n            assert(baseHref, 'unexpected missing `baseHref` in branch')\n\n            let value = node.source.value\n            // The literal source for statements can only be string.\n            assert(typeof value === 'string', 'expected string source')\n\n            // Resolve a specifier.\n            // This is the same as `_resolveDynamicMdxSpecifier`, which has to\n            // be injected to work with expressions at runtime, but as we have\n            // `baseHref` at compile time here and statements are static\n            // strings, we can do it now.\n            try {\n              // To do: use `URL.canParse` next major.\n              // eslint-disable-next-line no-new\n              new URL(value)\n              // Fine: a full URL.\n            } catch {\n              if (\n                value.startsWith('/') ||\n                value.startsWith('./') ||\n                value.startsWith('../')\n              ) {\n                value = new URL(value, baseHref).href\n              } else {\n                // Fine: are bare specifier.\n              }\n            }\n\n            /** @type {SimpleLiteral} */\n            const replacement = {type: 'Literal', value}\n            create(node.source, replacement)\n            node.source = replacement\n            return\n          }\n\n          if (node.type === 'ImportExpression') {\n            usesResolveDynamicHelper = true\n            /** @type {CallExpression} */\n            const replacement = {\n              type: 'CallExpression',\n              callee: {type: 'Identifier', name: '_resolveDynamicMdxSpecifier'},\n              arguments: [node.source],\n              optional: false\n            }\n            node.source = replacement\n            return\n          }\n\n          // To do: add support for `import.meta.resolve`.\n\n          if (\n            node.type === 'MemberExpression' &&\n            'object' in node &&\n            node.object.type === 'MetaProperty' &&\n            node.property.type === 'Identifier' &&\n            node.object.meta.name === 'import' &&\n            node.object.property.name === 'meta' &&\n            node.property.name === 'url'\n          ) {\n            usesImportMetaUrlVariable = true\n            /** @type {Identifier} */\n            const replacement = {type: 'Identifier', name: '_importMetaUrl'}\n            create(node, replacement)\n            this.replace(replacement)\n          }\n        }\n      })\n    }\n\n    if (usesResolveDynamicHelper) {\n      if (!baseHref) {\n        usesImportMetaUrlVariable = true\n      }\n\n      tree.body.push(\n        resolveDynamicMdxSpecifier(\n          baseHref\n            ? {type: 'Literal', value: baseHref}\n            : {type: 'Identifier', name: '_importMetaUrl'}\n        )\n      )\n    }\n\n    if (usesImportMetaUrlVariable) {\n      assert(\n        outputFormat === 'function-body',\n        'expected `function-body` when using dynamic url injection'\n      )\n      tree.body.unshift(...createImportMetaUrlVariable())\n    }\n\n    /**\n     * @param {ExportAllDeclaration | ExportNamedDeclaration} node\n     *   Export node.\n     * @returns {undefined}\n     *   Nothing.\n     */\n    function handleExport(node) {\n      if (node.type === 'ExportNamedDeclaration') {\n        // ```tsx\n        // export function a() {}\n        // export class A {}\n        // export var a = 1\n        // ```\n        if (node.declaration) {\n          exportedIdentifiers.push(\n            ...analyze(node.declaration).scope.declarations.keys()\n          )\n        }\n\n        // ```tsx\n        // export {a, b as c}\n        // export {a, b as c} from 'd'\n        // ```\n        for (child of node.specifiers) {\n          exportedIdentifiers.push(child.exported.name)\n        }\n      }\n\n      handleEsm(node)\n    }\n\n    /**\n     * @param {ExportAllDeclaration | ExportNamedDeclaration | ImportDeclaration} node\n     *   Export or import node.\n     * @returns {undefined}\n     *   Nothing.\n     */\n    function handleEsm(node) {\n      /** @type {ModuleDeclaration | Statement | undefined} */\n      let replace\n      /** @type {Expression} */\n      let init\n\n      if (outputFormat === 'function-body') {\n        if (\n          // Always have a source:\n          node.type === 'ImportDeclaration' ||\n          node.type === 'ExportAllDeclaration' ||\n          // Source optional:\n          (node.type === 'ExportNamedDeclaration' && node.source)\n        ) {\n          // We always have a source, but types say they can be missing.\n          assert(node.source, 'expected `node.source` to be defined')\n\n          // ```\n          // import 'a'\n          // //=> await import('a')\n          // import a from 'b'\n          // //=> const {default: a} = await import('b')\n          // export {a, b as c} from 'd'\n          // //=> const {a, c: b} = await import('d')\n          // export * from 'a'\n          // //=> const _exportAll0 = await import('a')\n          // ```\n          /** @type {ImportExpression} */\n          const argument = {type: 'ImportExpression', source: node.source}\n          create(node, argument)\n          init = {type: 'AwaitExpression', argument}\n\n          if (\n            (node.type === 'ImportDeclaration' ||\n              node.type === 'ExportNamedDeclaration') &&\n            node.specifiers.length === 0\n          ) {\n            replace = {type: 'ExpressionStatement', expression: init}\n          } else {\n            replace = {\n              type: 'VariableDeclaration',\n              kind: 'const',\n              declarations:\n                node.type === 'ExportAllDeclaration'\n                  ? [\n                      {\n                        type: 'VariableDeclarator',\n                        id: {\n                          type: 'Identifier',\n                          name: '_exportAll' + ++exportAllCount\n                        },\n                        init\n                      }\n                    ]\n                  : specifiersToDeclarations(node.specifiers, init)\n            }\n          }\n        } else if (node.declaration) {\n          replace = node.declaration\n        } else {\n          /** @type {Array<VariableDeclarator>} */\n          const declarators = node.specifiers\n            .filter(function (specifier) {\n              return specifier.local.name !== specifier.exported.name\n            })\n            .map(function (specifier) {\n              return {\n                type: 'VariableDeclarator',\n                id: specifier.exported,\n                init: specifier.local\n              }\n            })\n\n          if (declarators.length > 0) {\n            replace = {\n              type: 'VariableDeclaration',\n              kind: 'const',\n              declarations: declarators\n            }\n          }\n        }\n      } else {\n        replace = node\n      }\n\n      if (replace) {\n        replacement.push(replace)\n      }\n    }\n  }\n\n  /**\n   * @param {Readonly<Expression> | undefined} content\n   *   Content.\n   * @param {'function-body' | 'program'} outputFormat\n   *   Output format.\n   * @param {boolean | undefined} [hasInternalLayout=false]\n   *   Whether there’s an internal layout (default: `false`).\n   * @returns {Array<ExportDefaultDeclaration | FunctionDeclaration>}\n   *   Functions.\n   */\n  function createMdxContent(content, outputFormat, hasInternalLayout) {\n    /** @type {JSXElement} */\n    const element = {\n      type: 'JSXElement',\n      openingElement: {\n        type: 'JSXOpeningElement',\n        name: {type: 'JSXIdentifier', name: 'MDXLayout'},\n        attributes: [\n          {\n            type: 'JSXSpreadAttribute',\n            argument: {type: 'Identifier', name: 'props'}\n          }\n        ],\n        selfClosing: false\n      },\n      closingElement: {\n        type: 'JSXClosingElement',\n        name: {type: 'JSXIdentifier', name: 'MDXLayout'}\n      },\n      children: [\n        {\n          type: 'JSXElement',\n          openingElement: {\n            type: 'JSXOpeningElement',\n            name: {type: 'JSXIdentifier', name: '_createMdxContent'},\n            attributes: [\n              {\n                type: 'JSXSpreadAttribute',\n                argument: {type: 'Identifier', name: 'props'}\n              }\n            ],\n            selfClosing: true\n          },\n          closingElement: null,\n          children: []\n        }\n      ]\n    }\n\n    let result = /** @type {Expression} */ (element)\n\n    if (!hasInternalLayout) {\n      result = {\n        type: 'ConditionalExpression',\n        test: {type: 'Identifier', name: 'MDXLayout'},\n        consequent: result,\n        alternate: {\n          type: 'CallExpression',\n          callee: {type: 'Identifier', name: '_createMdxContent'},\n          arguments: [{type: 'Identifier', name: 'props'}],\n          optional: false\n        }\n      }\n    }\n\n    let argument =\n      // Cast because TS otherwise does not think `JSXFragment`s are expressions.\n      /** @type {Readonly<Expression> | Readonly<JSXFragment>} */ (\n        content || {type: 'Identifier', name: 'undefined'}\n      )\n\n    // Unwrap a fragment of a single element.\n    if (\n      argument.type === 'JSXFragment' &&\n      argument.children.length === 1 &&\n      argument.children[0].type === 'JSXElement'\n    ) {\n      argument = argument.children[0]\n    }\n\n    let awaitExpression = false\n\n    walk(argument, {\n      enter(node) {\n        if (\n          node.type === 'ArrowFunctionExpression' ||\n          node.type === 'FunctionDeclaration' ||\n          node.type === 'FunctionExpression'\n        ) {\n          return this.skip()\n        }\n\n        if (\n          node.type === 'AwaitExpression' ||\n          /* c8 ignore next 2 -- can only occur in a function (which then can\n           * only be async, so skipped it) */\n          (node.type === 'ForOfStatement' && node.await)\n        ) {\n          awaitExpression = true\n        }\n      }\n    })\n\n    /** @type {FunctionDeclaration} */\n    const declaration = {\n      type: 'FunctionDeclaration',\n      id: {type: 'Identifier', name: 'MDXContent'},\n      params: [\n        {\n          type: 'AssignmentPattern',\n          left: {type: 'Identifier', name: 'props'},\n          right: {type: 'ObjectExpression', properties: []}\n        }\n      ],\n      body: {\n        type: 'BlockStatement',\n        body: [{type: 'ReturnStatement', argument: result}]\n      }\n    }\n\n    return [\n      {\n        type: 'FunctionDeclaration',\n        async: awaitExpression,\n        id: {type: 'Identifier', name: '_createMdxContent'},\n        params: [{type: 'Identifier', name: 'props'}],\n        body: {\n          type: 'BlockStatement',\n          body: [\n            {\n              type: 'ReturnStatement',\n              // Cast because TS doesn’t think `JSXFragment` is an expression.\n              // eslint-disable-next-line object-shorthand\n              argument: /** @type {Expression} */ (argument)\n            }\n          ]\n        }\n      },\n      outputFormat === 'program'\n        ? {type: 'ExportDefaultDeclaration', declaration}\n        : declaration\n    ]\n  }\n}\n\n/**\n * @param {Program} tree\n * @param {string} name\n * @param {string} value\n * @returns {undefined}\n */\nfunction injectPragma(tree, name, value) {\n  tree.comments?.unshift({\n    type: 'Block',\n    value: name + ' ' + value,\n    data: {_mdxIsPragmaComment: true}\n  })\n}\n\n/**\n * @param {Expression} importMetaUrl\n * @returns {FunctionDeclaration}\n */\nfunction resolveDynamicMdxSpecifier(importMetaUrl) {\n  return {\n    type: 'FunctionDeclaration',\n    id: {type: 'Identifier', name: '_resolveDynamicMdxSpecifier'},\n    generator: false,\n    async: false,\n    params: [{type: 'Identifier', name: 'd'}],\n    body: {\n      type: 'BlockStatement',\n      body: [\n        {\n          type: 'IfStatement',\n          test: {\n            type: 'BinaryExpression',\n            left: {\n              type: 'UnaryExpression',\n              operator: 'typeof',\n              prefix: true,\n              argument: {type: 'Identifier', name: 'd'}\n            },\n            operator: '!==',\n            right: {type: 'Literal', value: 'string'}\n          },\n          consequent: {\n            type: 'ReturnStatement',\n            argument: {type: 'Identifier', name: 'd'}\n          },\n          alternate: null\n        },\n        // To do: use `URL.canParse` when widely supported (see commented\n        // out code below).\n        {\n          type: 'TryStatement',\n          block: {\n            type: 'BlockStatement',\n            body: [\n              {\n                type: 'ExpressionStatement',\n                expression: {\n                  type: 'NewExpression',\n                  callee: {type: 'Identifier', name: 'URL'},\n                  arguments: [{type: 'Identifier', name: 'd'}]\n                }\n              },\n              {\n                type: 'ReturnStatement',\n                argument: {type: 'Identifier', name: 'd'}\n              }\n            ]\n          },\n          handler: {\n            type: 'CatchClause',\n            param: null,\n            body: {type: 'BlockStatement', body: []}\n          },\n          finalizer: null\n        },\n        // To do: use `URL.canParse` when widely supported.\n        // {\n        //   type: 'IfStatement',\n        //   test: {\n        //     type: 'CallExpression',\n        //     callee: toIdOrMemberExpression(['URL', 'canParse']),\n        //     arguments: [{type: 'Identifier', name: 'd'}],\n        //     optional: false\n        //   },\n        //   consequent: {\n        //     type: 'ReturnStatement',\n        //     argument: {type: 'Identifier', name: 'd'}\n        //   },\n        //   alternate: null\n        // },\n        {\n          type: 'IfStatement',\n          test: {\n            type: 'LogicalExpression',\n            left: {\n              type: 'LogicalExpression',\n              left: {\n                type: 'CallExpression',\n                callee: toIdOrMemberExpression(['d', 'startsWith']),\n                arguments: [{type: 'Literal', value: '/'}],\n                optional: false\n              },\n              operator: '||',\n              right: {\n                type: 'CallExpression',\n                callee: toIdOrMemberExpression(['d', 'startsWith']),\n                arguments: [{type: 'Literal', value: './'}],\n                optional: false\n              }\n            },\n            operator: '||',\n            right: {\n              type: 'CallExpression',\n              callee: toIdOrMemberExpression(['d', 'startsWith']),\n              arguments: [{type: 'Literal', value: '../'}],\n              optional: false\n            }\n          },\n          consequent: {\n            type: 'ReturnStatement',\n            argument: {\n              type: 'MemberExpression',\n              object: {\n                type: 'NewExpression',\n                callee: {type: 'Identifier', name: 'URL'},\n                arguments: [{type: 'Identifier', name: 'd'}, importMetaUrl]\n              },\n              property: {type: 'Identifier', name: 'href'},\n              computed: false,\n              optional: false\n            }\n          },\n          alternate: null\n        },\n        {\n          type: 'ReturnStatement',\n          argument: {type: 'Identifier', name: 'd'}\n        }\n      ]\n    }\n  }\n}\n\n/**\n * @returns {Array<Statement>}\n */\nfunction createImportMetaUrlVariable() {\n  return [\n    {\n      type: 'VariableDeclaration',\n      declarations: [\n        {\n          type: 'VariableDeclarator',\n          id: {type: 'Identifier', name: '_importMetaUrl'},\n          init: toIdOrMemberExpression(['arguments', 0, 'baseUrl'])\n        }\n      ],\n      kind: 'const'\n    },\n    {\n      type: 'IfStatement',\n      test: {\n        type: 'UnaryExpression',\n        operator: '!',\n        prefix: true,\n        argument: {type: 'Identifier', name: '_importMetaUrl'}\n      },\n      consequent: {\n        type: 'ThrowStatement',\n        argument: {\n          type: 'NewExpression',\n          callee: {type: 'Identifier', name: 'Error'},\n          arguments: [\n            {\n              type: 'Literal',\n              value:\n                'Unexpected missing `options.baseUrl` needed to support `export … from`, `import`, or `import.meta.url` when generating `function-body`'\n            }\n          ]\n        }\n      },\n      alternate: null\n    }\n  ]\n}\n","/**\n * @typedef {import('estree-jsx').Expression} Expression\n * @typedef {import('estree-jsx').Identifier} Identifier\n * @typedef {import('estree-jsx').ImportSpecifier} ImportSpecifier\n * @typedef {import('estree-jsx').JSXAttribute} JSXAttribute\n * @typedef {import('estree-jsx').JSXIdentifier} JSXIdentifier\n * @typedef {import('estree-jsx').JSXMemberExpression} JSXMemberExpression\n * @typedef {import('estree-jsx').JSXNamespacedName} JSXNamespacedName\n * @typedef {import('estree-jsx').Literal} Literal\n * @typedef {import('estree-jsx').MemberExpression} MemberExpression\n * @typedef {import('estree-jsx').Node} Node\n * @typedef {import('estree-jsx').ObjectExpression} ObjectExpression\n * @typedef {import('estree-jsx').Property} Property\n * @typedef {import('estree-jsx').SpreadElement} SpreadElement\n *\n * @typedef {'automatic' | 'classic'} Runtime\n *   How to transform JSX.\n *\n * @typedef Options\n *   Configuration.\n *\n *   > 👉 **Note**: you can also configure `runtime`, `importSource`, `pragma`,\n *   > and `pragmaFrag` from within files through comments.\n * @property {Runtime | null | undefined} [runtime='classic']\n *   Choose the runtime (default: `'classic'`).\n *\n *   Comment form: `@jsxRuntime theRuntime`.\n * @property {string | null | undefined} [importSource='react']\n *   Place to import `jsx`, `jsxs`, `jsxDEV`, and `Fragment` from, when the\n *   effective runtime is automatic (default: `'react'`).\n *\n *   Comment form: `@jsxImportSource theSource`.\n *\n *   > 👉 **Note**: `/jsx-runtime` or `/jsx-dev-runtime` is appended to this\n *   > provided source.\n *   > In CJS, that can resolve to a file (as in `theSource/jsx-runtime.js`),\n *   > but for ESM an export map needs to be set up to point to files:\n *   >\n *   > ```js\n *   > // …\n *   > \"exports\": {\n *   >   // …\n *   >   \"./jsx-runtime\": \"./path/to/jsx-runtime.js\",\n *   >   \"./jsx-dev-runtime\": \"./path/to/jsx-runtime.js\"\n *   >   // …\n *   > ```\n * @property {string | null | undefined} [pragma='React.createElement']\n *   Identifier or member expression to call when the effective runtime is\n *   classic (default: `'React.createElement'`).\n *\n *   Comment form: `@jsx identifier`.\n * @property {string | null | undefined} [pragmaFrag='React.Fragment']\n *   Identifier or member expression to use as a symbol for fragments when the\n *   effective runtime is classic (default: `'React.Fragment'`).\n *\n *   Comment form: `@jsxFrag identifier`.\n * @property {boolean | null | undefined} [development=false]\n *   When in the automatic runtime, whether to import\n *   `theSource/jsx-dev-runtime.js`, use `jsxDEV`, and pass location info when\n *   available (default: `false`).\n *\n *   This helps debugging but adds a lot of code that you don’t want in\n *   production.\n * @property {string | null | undefined} [filePath]\n *   File path to the original source file (optional).\n *\n *   Passed in location info to `jsxDEV` when using the automatic runtime with\n *   `development: true`.\n *\n * @typedef Annotations\n *   State where info from comments is gathered.\n * @property {string | undefined} [jsx]\n *   JSX identifier (`pragma`).\n * @property {string | undefined} [jsxFrag]\n *   JSX identifier of fragment (`pragmaFrag`).\n * @property {string | undefined} [jsxImportSource]\n *   Where to import an automatic JSX runtime from.\n * @property {Runtime | undefined} [jsxRuntime]\n *   Runtime.\n *\n * @typedef Imports\n *   State of used identifiers from the automatic runtime.\n * @property {boolean | undefined} [fragment]\n *   Symbol of `Fragment`.\n * @property {boolean | undefined} [jsx]\n *   Symbol of `jsx`.\n * @property {boolean | undefined} [jsxs]\n *   Symbol of `jsxs`.\n * @property {boolean | undefined} [jsxDEV]\n *   Symbol of `jsxDEV`.\n */\n\nimport {ok as assert} from 'devlop'\nimport {name as isIdentifierName} from 'estree-util-is-identifier-name'\nimport {walk} from 'estree-walker'\n\nconst regex = /@(jsx|jsxFrag|jsxImportSource|jsxRuntime)\\s+(\\S+)/g\n\n/**\n * Turn JSX in `tree` into function calls: `<x />` -> `h('x')`!\n *\n * ###### Algorithm\n *\n * In almost all cases, this utility is the same as the Babel plugin, except that\n * they work on slightly different syntax trees.\n *\n * Some differences:\n *\n * *   no pure annotations things\n * *   `this` is not a component: `<this>` -> `h('this')`, not `h(this)`\n * *   namespaces are supported: `<a:b c:d>` -> `h('a:b', {'c:d': true})`,\n *     which throws by default in Babel or can be turned on with `throwIfNamespace`\n * *   no `useSpread`, `useBuiltIns`, or `filter` options\n *\n * @param {Node} tree\n *   Tree to transform (typically `Program`).\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport function buildJsx(tree, options) {\n  const config = options || {}\n  let automatic = config.runtime === 'automatic'\n  /** @type {Annotations} */\n  const annotations = {}\n  /** @type {Imports} */\n  const imports = {}\n\n  walk(tree, {\n    enter(node) {\n      if (node.type === 'Program') {\n        const comments = node.comments || []\n        let index = -1\n\n        while (++index < comments.length) {\n          regex.lastIndex = 0\n\n          let match = regex.exec(comments[index].value)\n\n          while (match) {\n            // @ts-expect-error: `match[1]` is always a key, `match[2]` when\n            // runtime is checked later.\n            annotations[match[1]] = match[2]\n            match = regex.exec(comments[index].value)\n          }\n        }\n\n        if (annotations.jsxRuntime) {\n          if (annotations.jsxRuntime === 'automatic') {\n            automatic = true\n\n            if (annotations.jsx) {\n              throw new Error('Unexpected `@jsx` pragma w/ automatic runtime')\n            }\n\n            if (annotations.jsxFrag) {\n              throw new Error(\n                'Unexpected `@jsxFrag` pragma w/ automatic runtime'\n              )\n            }\n          } else if (annotations.jsxRuntime === 'classic') {\n            automatic = false\n\n            if (annotations.jsxImportSource) {\n              throw new Error(\n                'Unexpected `@jsxImportSource` w/ classic runtime'\n              )\n            }\n          } else {\n            throw new Error(\n              'Unexpected `jsxRuntime` `' +\n                annotations.jsxRuntime +\n                '`, expected `automatic` or `classic`'\n            )\n          }\n        }\n      }\n    },\n    // eslint-disable-next-line complexity\n    leave(node) {\n      if (node.type === 'Program') {\n        /** @type {Array<ImportSpecifier>} */\n        const specifiers = []\n\n        if (imports.fragment) {\n          specifiers.push({\n            type: 'ImportSpecifier',\n            imported: {type: 'Identifier', name: 'Fragment'},\n            local: {type: 'Identifier', name: '_Fragment'}\n          })\n        }\n\n        if (imports.jsx) {\n          specifiers.push({\n            type: 'ImportSpecifier',\n            imported: {type: 'Identifier', name: 'jsx'},\n            local: {type: 'Identifier', name: '_jsx'}\n          })\n        }\n\n        if (imports.jsxs) {\n          specifiers.push({\n            type: 'ImportSpecifier',\n            imported: {type: 'Identifier', name: 'jsxs'},\n            local: {type: 'Identifier', name: '_jsxs'}\n          })\n        }\n\n        if (imports.jsxDEV) {\n          specifiers.push({\n            type: 'ImportSpecifier',\n            imported: {type: 'Identifier', name: 'jsxDEV'},\n            local: {type: 'Identifier', name: '_jsxDEV'}\n          })\n        }\n\n        if (specifiers.length > 0) {\n          let injectIndex = 0\n\n          while (injectIndex < node.body.length) {\n            const child = node.body[injectIndex]\n\n            if ('directive' in child && child.directive) {\n              injectIndex++\n            } else {\n              break\n            }\n          }\n\n          node.body.splice(injectIndex, 0, {\n            type: 'ImportDeclaration',\n            specifiers,\n            source: {\n              type: 'Literal',\n              value:\n                (annotations.jsxImportSource ||\n                  config.importSource ||\n                  'react') +\n                (config.development ? '/jsx-dev-runtime' : '/jsx-runtime')\n            }\n          })\n        }\n      }\n\n      if (node.type !== 'JSXElement' && node.type !== 'JSXFragment') {\n        return\n      }\n\n      /** @type {Array<Expression>} */\n      const children = []\n      let index = -1\n\n      // Figure out `children`.\n      while (++index < node.children.length) {\n        const child = node.children[index]\n\n        if (child.type === 'JSXExpressionContainer') {\n          // Ignore empty expressions.\n          if (child.expression.type !== 'JSXEmptyExpression') {\n            children.push(child.expression)\n          }\n        } else if (child.type === 'JSXText') {\n          const value = child.value\n            // Replace tabs w/ spaces.\n            .replace(/\\t/g, ' ')\n            // Use line feeds, drop spaces around them.\n            .replace(/ *(\\r?\\n|\\r) */g, '\\n')\n            // Collapse multiple line feeds.\n            .replace(/\\n+/g, '\\n')\n            // Drop final line feeds.\n            .replace(/\\n+$/, '')\n            // Drop first line feeds.\n            .replace(/^\\n+/, '')\n            // Replace line feeds with spaces.\n            .replace(/\\n/g, ' ')\n\n          // Ignore collapsible text.\n          if (value) {\n            /** @type {Node} */\n            const text = {type: 'Literal', value}\n            create(child, text)\n            children.push(text)\n          }\n        } else {\n          assert(\n            child.type !== 'JSXElement' &&\n              child.type !== 'JSXFragment' &&\n              child.type !== 'JSXSpreadChild'\n          )\n          children.push(child)\n        }\n      }\n\n      /** @type {Identifier | Literal | MemberExpression} */\n      let name\n      /** @type {Array<Property | SpreadElement>} */\n      const fields = []\n      /** @type {Array<Expression>} */\n      let parameters = []\n      /** @type {Expression | undefined} */\n      let key\n\n      // Do the stuff needed for elements.\n      if (node.type === 'JSXElement') {\n        name = toIdentifier(node.openingElement.name)\n\n        // If the name could be an identifier, but start with a lowercase letter,\n        // it’s not a component.\n        if (name.type === 'Identifier' && /^[a-z]/.test(name.name)) {\n          /** @type {Node} */\n          const next = {type: 'Literal', value: name.name}\n          create(name, next)\n          name = next\n        }\n\n        /** @type {boolean | undefined} */\n        let spread\n        const attributes = node.openingElement.attributes\n        let index = -1\n\n        // Place props in the right order, because we might have duplicates\n        // in them and what’s spread in.\n        while (++index < attributes.length) {\n          const attribute = attributes[index]\n\n          if (attribute.type === 'JSXSpreadAttribute') {\n            if (attribute.argument.type === 'ObjectExpression') {\n              fields.push(...attribute.argument.properties)\n            } else {\n              fields.push({type: 'SpreadElement', argument: attribute.argument})\n            }\n\n            spread = true\n          } else {\n            const prop = toProperty(attribute)\n\n            if (\n              automatic &&\n              prop.key.type === 'Identifier' &&\n              prop.key.name === 'key'\n            ) {\n              if (spread) {\n                throw new Error(\n                  'Expected `key` to come before any spread expressions'\n                )\n              }\n\n              const value = prop.value\n\n              assert(\n                value.type !== 'AssignmentPattern' &&\n                  value.type !== 'ArrayPattern' &&\n                  value.type !== 'ObjectPattern' &&\n                  value.type !== 'RestElement'\n              )\n\n              key = value\n            } else {\n              fields.push(prop)\n            }\n          }\n        }\n      }\n      // …and fragments.\n      else if (automatic) {\n        imports.fragment = true\n        name = {type: 'Identifier', name: '_Fragment'}\n      } else {\n        name = toMemberExpression(\n          annotations.jsxFrag || config.pragmaFrag || 'React.Fragment'\n        )\n      }\n\n      if (automatic) {\n        if (children.length > 0) {\n          fields.push({\n            type: 'Property',\n            key: {type: 'Identifier', name: 'children'},\n            value:\n              children.length > 1\n                ? {type: 'ArrayExpression', elements: children}\n                : children[0],\n            kind: 'init',\n            method: false,\n            shorthand: false,\n            computed: false\n          })\n        }\n      } else {\n        parameters = children\n      }\n\n      /** @type {Identifier | Literal | MemberExpression} */\n      let callee\n\n      if (automatic) {\n        parameters.push({type: 'ObjectExpression', properties: fields})\n\n        if (key) {\n          parameters.push(key)\n        } else if (config.development) {\n          parameters.push({type: 'Identifier', name: 'undefined'})\n        }\n\n        const isStaticChildren = children.length > 1\n\n        if (config.development) {\n          imports.jsxDEV = true\n          callee = {\n            type: 'Identifier',\n            name: '_jsxDEV'\n          }\n          parameters.push({type: 'Literal', value: isStaticChildren})\n\n          /** @type {ObjectExpression} */\n          const source = {\n            type: 'ObjectExpression',\n            properties: [\n              {\n                type: 'Property',\n                method: false,\n                shorthand: false,\n                computed: false,\n                kind: 'init',\n                key: {type: 'Identifier', name: 'fileName'},\n                value: {\n                  type: 'Literal',\n                  value: config.filePath || '<source.js>'\n                }\n              }\n            ]\n          }\n\n          if (node.loc) {\n            source.properties.push(\n              {\n                type: 'Property',\n                method: false,\n                shorthand: false,\n                computed: false,\n                kind: 'init',\n                key: {type: 'Identifier', name: 'lineNumber'},\n                value: {type: 'Literal', value: node.loc.start.line}\n              },\n              {\n                type: 'Property',\n                method: false,\n                shorthand: false,\n                computed: false,\n                kind: 'init',\n                key: {type: 'Identifier', name: 'columnNumber'},\n                value: {type: 'Literal', value: node.loc.start.column + 1}\n              }\n            )\n          }\n\n          parameters.push(source, {type: 'ThisExpression'})\n        } else if (isStaticChildren) {\n          imports.jsxs = true\n          callee = {type: 'Identifier', name: '_jsxs'}\n        } else {\n          imports.jsx = true\n          callee = {type: 'Identifier', name: '_jsx'}\n        }\n      }\n      // Classic.\n      else {\n        if (fields.length > 0) {\n          parameters.unshift({type: 'ObjectExpression', properties: fields})\n        } else if (parameters.length > 0) {\n          parameters.unshift({type: 'Literal', value: null})\n        }\n\n        callee = toMemberExpression(\n          annotations.jsx || config.pragma || 'React.createElement'\n        )\n      }\n\n      parameters.unshift(name)\n      /** @type {Node} */\n      const call = {\n        type: 'CallExpression',\n        callee,\n        arguments: parameters,\n        optional: false\n      }\n      create(node, call)\n      this.replace(call)\n    }\n  })\n}\n\n/**\n * Turn a JSX attribute into a JavaScript property.\n *\n * @param {JSXAttribute} node\n *   JSX attribute.\n * @returns {Property}\n *   JS property.\n */\nfunction toProperty(node) {\n  /** @type {Expression} */\n  let value\n\n  if (node.value) {\n    if (node.value.type === 'JSXExpressionContainer') {\n      const valueExpression = node.value.expression\n      assert(\n        valueExpression.type !== 'JSXEmptyExpression',\n        '`JSXEmptyExpression` is not allowed in props.'\n      )\n      value = valueExpression\n    }\n    // Literal or call expression.\n    else {\n      const nodeValue = node.value\n      assert(\n        nodeValue.type !== 'JSXElement' && nodeValue.type !== 'JSXFragment',\n        'JSX{Element,Fragment} are already compiled to `CallExpression`'\n      )\n      value = nodeValue\n      delete value.raw\n    }\n  }\n  // Boolean prop.\n  else {\n    value = {type: 'Literal', value: true}\n  }\n\n  /** @type {Property} */\n  const replacement = {\n    type: 'Property',\n    key: toIdentifier(node.name),\n    value,\n    kind: 'init',\n    method: false,\n    shorthand: false,\n    computed: false\n  }\n  create(node, replacement)\n  return replacement\n}\n\n/**\n * Turn a JSX identifier into a normal JS identifier.\n *\n * @param {JSXIdentifier | JSXMemberExpression | JSXNamespacedName} node\n *   JSX identifier.\n * @returns {Identifier | Literal | MemberExpression}\n *   JS identifier.\n */\nfunction toIdentifier(node) {\n  /** @type {Identifier | Literal | MemberExpression} */\n  let replace\n\n  if (node.type === 'JSXMemberExpression') {\n    // `property` is always a `JSXIdentifier`, but it could be something that\n    // isn’t an ES identifier name.\n    const id = toIdentifier(node.property)\n    replace = {\n      type: 'MemberExpression',\n      object: toIdentifier(node.object),\n      property: id,\n      computed: id.type === 'Literal',\n      optional: false\n    }\n  } else if (node.type === 'JSXNamespacedName') {\n    replace = {\n      type: 'Literal',\n      value: node.namespace.name + ':' + node.name.name\n    }\n  }\n  // Must be `JSXIdentifier`.\n  else {\n    replace = isIdentifierName(node.name)\n      ? {type: 'Identifier', name: node.name}\n      : {type: 'Literal', value: node.name}\n  }\n\n  create(node, replace)\n  return replace\n}\n\n/**\n * Turn a dotted string into a member expression.\n *\n * @param {string} id\n *   Identifiers.\n * @returns {Identifier | Literal | MemberExpression}\n *   Expression.\n */\nfunction toMemberExpression(id) {\n  const identifiers = id.split('.')\n  let index = -1\n  /** @type {Identifier | Literal | MemberExpression | undefined} */\n  let result\n\n  while (++index < identifiers.length) {\n    /** @type {Identifier | Literal} */\n    const prop = isIdentifierName(identifiers[index])\n      ? {type: 'Identifier', name: identifiers[index]}\n      : {type: 'Literal', value: identifiers[index]}\n    result = result\n      ? {\n          type: 'MemberExpression',\n          object: result,\n          property: prop,\n          computed: Boolean(index && prop.type === 'Literal'),\n          optional: false\n        }\n      : prop\n  }\n\n  assert(result, 'always a result')\n  return result\n}\n\n/**\n * Inherit some fields from `from` into `to`.\n *\n * @param {Node} from\n *   Node to inherit from.\n * @param {Node} to\n *   Node to add to.\n * @returns {undefined}\n *   Nothing.\n */\nfunction create(from, to) {\n  const fields = ['start', 'end', 'loc', 'range', 'comments']\n  let index = -1\n\n  while (++index < fields.length) {\n    const field = fields[index]\n    if (field in from) {\n      // @ts-expect-error: indexable.\n      to[field] = from[field]\n    }\n  }\n}\n","/**\n * @typedef {import('estree-jsx').Program} Program\n * @typedef {import('estree-util-build-jsx').Options} BuildJsxOptions\n * @typedef {import('vfile').VFile} VFile\n */\n\n/**\n * @typedef ExtraOptions\n *   Configuration for internal plugin `recma-jsx-build`.\n * @property {'function-body' | 'program' | null | undefined} [outputFormat='program']\n *   Whether to keep the import of the automatic runtime or get it from\n *   `arguments[0]` instead (default: `'program'`).\n *\n * @typedef {BuildJsxOptions & ExtraOptions} Options\n *   Options.\n */\n\nimport {buildJsx} from 'estree-util-build-jsx'\nimport {specifiersToDeclarations} from '../util/estree-util-specifiers-to-declarations.js'\nimport {toIdOrMemberExpression} from '../util/estree-util-to-id-or-member-expression.js'\n\n/**\n * A plugin to build JSX into function calls.\n * `estree-util-build-jsx` does all the work for us!\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns\n *   Transform.\n */\nexport function recmaJsxBuild(options) {\n  /* c8 ignore next -- always given in `@mdx-js/mdx` */\n  const {development, outputFormat} = options || {}\n\n  /**\n   * @param {Program} tree\n   *   Tree.\n   * @param {VFile} file\n   *   File.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  return function (tree, file) {\n    buildJsx(tree, {development, filePath: file.history[0]})\n\n    // Remove the pragma comment that we injected ourselves as it is no longer\n    // needed.\n    if (tree.comments) {\n      tree.comments = tree.comments.filter(function (d) {\n        return !d.data?._mdxIsPragmaComment\n      })\n    }\n\n    // When compiling to a function body, replace the import that was just\n    // generated, and get `jsx`, `jsxs`, and `Fragment` from `arguments[0]`\n    // instead.\n    if (outputFormat === 'function-body') {\n      let index = 0\n\n      // Skip directives: JS currently only has `use strict`, but Acorn allows\n      // arbitrary ones.\n      // Practically things like `use client` could be used?\n      while (index < tree.body.length) {\n        const child = tree.body[index]\n        if ('directive' in child && child.directive) {\n          index++\n        } else {\n          break\n        }\n      }\n\n      const declaration = tree.body[index]\n\n      if (\n        declaration &&\n        declaration.type === 'ImportDeclaration' &&\n        typeof declaration.source.value === 'string' &&\n        /\\/jsx-(dev-)?runtime$/.test(declaration.source.value)\n      ) {\n        tree.body[index] = {\n          type: 'VariableDeclaration',\n          kind: 'const',\n          declarations: specifiersToDeclarations(\n            declaration.specifiers,\n            toIdOrMemberExpression(['arguments', 0])\n          )\n        }\n      }\n    }\n  }\n}\n","/**\n * @typedef {import('estree-jsx').Expression} Expression\n */\n\nimport {ok as assert} from 'devlop'\n\n/**\n * @param {ReadonlyArray<Expression>} expressions\n *   Expressions.\n * @returns {Expression}\n *   Addition.\n */\nexport function toBinaryAddition(expressions) {\n  let index = -1\n  /** @type {Expression | undefined} */\n  let left\n\n  while (++index < expressions.length) {\n    const right = expressions[index]\n    left = left ? {type: 'BinaryExpression', left, operator: '+', right} : right\n  }\n\n  assert(left, 'expected non-empty `expressions` to be passed')\n  return left\n}\n","/**\n * @typedef {import('estree-jsx').Expression} Expression\n * @typedef {import('estree-jsx').Function} EstreeFunction\n * @typedef {import('estree-jsx').Identifier} Identifier\n * @typedef {import('estree-jsx').ImportSpecifier} ImportSpecifier\n * @typedef {import('estree-jsx').JSXElement} JSXElement\n * @typedef {import('estree-jsx').ModuleDeclaration} ModuleDeclaration\n * @typedef {import('estree-jsx').Node} Node\n * @typedef {import('estree-jsx').ObjectPattern} ObjectPattern\n * @typedef {import('estree-jsx').Program} Program\n * @typedef {import('estree-jsx').Property} Property\n * @typedef {import('estree-jsx').SpreadElement} SpreadElement\n * @typedef {import('estree-jsx').Statement} Statement\n * @typedef {import('estree-jsx').VariableDeclarator} VariableDeclarator\n *\n * @typedef {import('periscopic').Scope} PeriscopicScope\n *\n * @typedef {import('vfile').VFile} VFile\n *\n * @typedef {import('../core.js').ProcessorOptions} ProcessorOptions\n */\n\n/**\n * @typedef {PeriscopicScope & {node: Node}} Scope\n *   Scope (with a `node`).\n *\n * @typedef StackEntry\n *   Entry.\n * @property {Array<string>} components\n *   Used components.\n * @property {Map<string, string>} idToInvalidComponentName\n *   Map of JSX identifiers which cannot be used as JS identifiers, to valid JS identifiers.\n * @property {Readonly<EstreeFunction>} node\n *   Function.\n * @property {Array<string>} objects\n *   Identifiers of used objects (such as `x` in `x.y`).\n * @property {Record<string, {node: Readonly<JSXElement>, component: boolean}>} references\n *   Map of JSX identifiers for components and objects, to where they were first used.\n * @property {Array<string>} tags\n *   Tag names.\n */\n\nimport {name as isIdentifierName} from 'estree-util-is-identifier-name'\nimport {walk} from 'estree-walker'\nimport {analyze} from 'periscopic'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nimport {positionFromEstree} from 'unist-util-position-from-estree'\nimport {specifiersToDeclarations} from '../util/estree-util-specifiers-to-declarations.js'\nimport {toBinaryAddition} from '../util/estree-util-to-binary-addition.js'\nimport {\n  toIdOrMemberExpression,\n  toJsxIdOrMemberExpression\n} from '../util/estree-util-to-id-or-member-expression.js'\n\n/**\n * A plugin that rewrites JSX in functions to accept components as\n * `props.components` (when the function is called `_createMdxContent`), or from\n * a provider (if there is one).\n * It also makes sure that any undefined components are defined: either from\n * received components or as a function that throws an error.\n *\n * @param {Readonly<ProcessorOptions>} options\n *   Configuration (optional).\n * @returns\n *   Transform.\n */\nexport function recmaJsxRewrite(options) {\n  const {development, outputFormat, providerImportSource} = options\n\n  /**\n   * @param {Program} tree\n   *   Tree.\n   * @param {VFile} file\n   *   File.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  return function (tree, file) {\n    // Find everything that’s defined in the top-level scope.\n    const scopeInfo = analyze(tree)\n    /** @type {Array<StackEntry>} */\n    const functionStack = []\n    let importProvider = false\n    let createErrorHelper = false\n    /** @type {Scope | undefined} */\n    let currentScope\n\n    walk(tree, {\n      enter(node) {\n        // Cast because we match `node`.\n        const newScope = /** @type {Scope | undefined} */ (\n          scopeInfo.map.get(node)\n        )\n\n        if (\n          node.type === 'FunctionDeclaration' ||\n          node.type === 'FunctionExpression' ||\n          node.type === 'ArrowFunctionExpression'\n        ) {\n          functionStack.push({\n            components: [],\n            idToInvalidComponentName: new Map(),\n            node,\n            objects: [],\n            references: {},\n            tags: []\n          })\n\n          // MDXContent only ever contains MDXLayout\n          if (\n            isNamedFunction(node, 'MDXContent') &&\n            newScope &&\n            !inScope(newScope, 'MDXLayout')\n          ) {\n            functionStack[0].components.push('MDXLayout')\n          }\n        }\n\n        const functionScope = functionStack[0]\n        if (\n          !functionScope ||\n          (!isNamedFunction(functionScope.node, '_createMdxContent') &&\n            !providerImportSource)\n        ) {\n          return\n        }\n\n        if (newScope) {\n          newScope.node = node\n          currentScope = newScope\n        }\n\n        if (currentScope && node.type === 'JSXElement') {\n          let name = node.openingElement.name\n\n          // `<x.y>`, `<Foo.Bar>`, `<x.y.z>`.\n          if (name.type === 'JSXMemberExpression') {\n            /** @type {Array<string>} */\n            const ids = []\n\n            // Find the left-most identifier.\n            while (name.type === 'JSXMemberExpression') {\n              ids.unshift(name.property.name)\n              name = name.object\n            }\n\n            ids.unshift(name.name)\n            const fullId = ids.join('.')\n            const id = name.name\n\n            const isInScope = inScope(currentScope, id)\n\n            if (!Object.hasOwn(functionScope.references, fullId)) {\n              // Cast because we match `node`.\n              const parentScope = /** @type {Scope | undefined} */ (\n                currentScope.parent\n              )\n              if (\n                !isInScope ||\n                // If the parent scope is `_createMdxContent`, then this\n                // references a component we can add a check statement for.\n                (parentScope &&\n                  parentScope.node.type === 'FunctionDeclaration' &&\n                  isNamedFunction(parentScope.node, '_createMdxContent'))\n              ) {\n                functionScope.references[fullId] = {component: true, node}\n              }\n            }\n\n            if (!functionScope.objects.includes(id) && !isInScope) {\n              functionScope.objects.push(id)\n            }\n          }\n          // `<xml:thing>`.\n          else if (name.type === 'JSXNamespacedName') {\n            // Ignore namespaces.\n          }\n          // If the name is a valid ES identifier, and it doesn’t start with a\n          // lowercase letter, it’s a component.\n          // For example, `$foo`, `_bar`, `Baz` are all component names.\n          // But `foo` and `b-ar` are tag names.\n          else if (isIdentifierName(name.name) && !/^[a-z]/.test(name.name)) {\n            const id = name.name\n\n            if (!inScope(currentScope, id)) {\n              // No need to add an error for an undefined layout — we use an\n              // `if` later.\n              if (\n                id !== 'MDXLayout' &&\n                !Object.hasOwn(functionScope.references, id)\n              ) {\n                functionScope.references[id] = {component: true, node}\n              }\n\n              if (!functionScope.components.includes(id)) {\n                functionScope.components.push(id)\n              }\n            }\n          } else if (node.data && node.data._mdxExplicitJsx) {\n            // Do not turn explicit JSX into components from `_components`.\n            // As in, a given `h1` component is used for `# heading` (next case),\n            // but not for `<h1>heading</h1>`.\n          } else {\n            const id = name.name\n\n            if (!functionScope.tags.includes(id)) {\n              functionScope.tags.push(id)\n            }\n\n            /** @type {Array<number | string>} */\n            let jsxIdExpression = ['_components', id]\n            if (isIdentifierName(id) === false) {\n              let invalidComponentName =\n                functionScope.idToInvalidComponentName.get(id)\n              if (invalidComponentName === undefined) {\n                invalidComponentName = `_component${functionScope.idToInvalidComponentName.size}`\n                functionScope.idToInvalidComponentName.set(\n                  id,\n                  invalidComponentName\n                )\n              }\n\n              jsxIdExpression = [invalidComponentName]\n            }\n\n            node.openingElement.name =\n              toJsxIdOrMemberExpression(jsxIdExpression)\n\n            if (node.closingElement) {\n              node.closingElement.name =\n                toJsxIdOrMemberExpression(jsxIdExpression)\n            }\n          }\n        }\n      },\n      leave(node) {\n        /** @type {Array<Property | SpreadElement>} */\n        const defaults = []\n        /** @type {Array<string>} */\n        const actual = []\n        /** @type {Array<Expression>} */\n        const parameters = []\n        /** @type {Array<VariableDeclarator>} */\n        const declarations = []\n\n        if (currentScope && currentScope.node === node) {\n          // Cast to patch our `node`.\n          currentScope = /** @type {Scope} */ (currentScope.parent)\n        }\n\n        if (\n          node.type === 'FunctionDeclaration' ||\n          node.type === 'FunctionExpression' ||\n          node.type === 'ArrowFunctionExpression'\n        ) {\n          const scopeNode = node\n          const scope = functionStack[functionStack.length - 1]\n          /** @type {string} */\n          let name\n\n          for (name of scope.tags.sort()) {\n            defaults.push({\n              type: 'Property',\n              kind: 'init',\n              key: isIdentifierName(name)\n                ? {type: 'Identifier', name}\n                : {type: 'Literal', value: name},\n              value: {type: 'Literal', value: name},\n              method: false,\n              shorthand: false,\n              computed: false\n            })\n          }\n\n          actual.push(...scope.components)\n\n          for (name of scope.objects) {\n            // In some cases, a component is used directly (`<X>`) but it’s also\n            // used as an object (`<X.Y>`).\n            if (!actual.includes(name)) {\n              actual.push(name)\n            }\n          }\n\n          actual.sort()\n\n          /** @type {Array<Statement>} */\n          const statements = []\n\n          if (\n            defaults.length > 0 ||\n            actual.length > 0 ||\n            scope.idToInvalidComponentName.size > 0\n          ) {\n            if (providerImportSource) {\n              importProvider = true\n              parameters.push({\n                type: 'CallExpression',\n                callee: {type: 'Identifier', name: '_provideComponents'},\n                arguments: [],\n                optional: false\n              })\n            }\n\n            // Accept `components` as a prop if this is the `MDXContent` or\n            // `_createMdxContent` function.\n            if (\n              isNamedFunction(scope.node, 'MDXContent') ||\n              isNamedFunction(scope.node, '_createMdxContent')\n            ) {\n              parameters.push(toIdOrMemberExpression(['props', 'components']))\n            }\n\n            if (defaults.length > 0 || parameters.length > 1) {\n              for (const parameter of parameters) {\n                defaults.push({type: 'SpreadElement', argument: parameter})\n              }\n            }\n\n            // If we’re getting components from several sources, merge them.\n            /** @type {Expression} */\n            let componentsInit =\n              defaults.length > 0\n                ? {type: 'ObjectExpression', properties: defaults}\n                : // If we’re only getting components from `props.components`,\n                  // make sure it’s defined.\n                  {\n                    type: 'LogicalExpression',\n                    operator: '||',\n                    left: parameters[0],\n                    right: {type: 'ObjectExpression', properties: []}\n                  }\n\n            /** @type {ObjectPattern | undefined} */\n            let componentsPattern\n\n            // Add components to scope.\n            // For `['MyComponent', 'MDXLayout']` this generates:\n            // ```tsx\n            // const {MyComponent, wrapper: MDXLayout} = _components\n            // ```\n            // Note that MDXLayout is special as it’s taken from\n            // `_components.wrapper`.\n            if (actual.length > 0) {\n              componentsPattern = {\n                type: 'ObjectPattern',\n                properties: actual.map(function (name) {\n                  return {\n                    type: 'Property',\n                    kind: 'init',\n                    key: {\n                      type: 'Identifier',\n                      name: name === 'MDXLayout' ? 'wrapper' : name\n                    },\n                    value: {type: 'Identifier', name},\n                    method: false,\n                    shorthand: name !== 'MDXLayout',\n                    computed: false\n                  }\n                })\n              }\n            }\n\n            if (scope.tags.length > 0) {\n              declarations.push({\n                type: 'VariableDeclarator',\n                id: {type: 'Identifier', name: '_components'},\n                init: componentsInit\n              })\n              componentsInit = {type: 'Identifier', name: '_components'}\n            }\n\n            if (isNamedFunction(scope.node, '_createMdxContent')) {\n              for (const [id, componentName] of [\n                ...scope.idToInvalidComponentName\n              ].sort(function ([a], [b]) {\n                return a.localeCompare(b)\n              })) {\n                // For JSX IDs that can’t be represented as JavaScript IDs (as in,\n                // those with dashes, such as `custom-element`), generate a\n                // separate variable that is a valid JS ID (such as `_component0`),\n                // and takes it from components:\n                // `const _component0 = _components['custom-element']`\n                declarations.push({\n                  type: 'VariableDeclarator',\n                  id: {\n                    type: 'Identifier',\n                    name: componentName\n                  },\n                  init: {\n                    type: 'MemberExpression',\n                    object: {type: 'Identifier', name: '_components'},\n                    property: {type: 'Literal', value: id},\n                    computed: true,\n                    optional: false\n                  }\n                })\n              }\n            }\n\n            if (componentsPattern) {\n              declarations.push({\n                type: 'VariableDeclarator',\n                id: componentsPattern,\n                init: componentsInit\n              })\n            }\n\n            if (declarations.length > 0) {\n              statements.push({\n                type: 'VariableDeclaration',\n                kind: 'const',\n                declarations\n              })\n            }\n          }\n\n          /** @type {string} */\n          let key\n\n          // Add partials (so for `x.y.z` it’d generate `x` and `x.y` too).\n          for (key in scope.references) {\n            if (Object.hasOwn(scope.references, key)) {\n              const parts = key.split('.')\n              let index = 0\n              while (++index < parts.length) {\n                const partial = parts.slice(0, index).join('.')\n                if (!Object.hasOwn(scope.references, partial)) {\n                  scope.references[partial] = {\n                    component: false,\n                    node: scope.references[key].node\n                  }\n                }\n              }\n            }\n          }\n\n          const references = Object.keys(scope.references).sort()\n          let index = -1\n          while (++index < references.length) {\n            const id = references[index]\n            const info = scope.references[id]\n            const place = stringifyPosition(positionFromEstree(info.node))\n            /** @type {Array<Expression>} */\n            const parameters = [\n              {type: 'Literal', value: id},\n              {type: 'Literal', value: info.component}\n            ]\n\n            createErrorHelper = true\n\n            if (development && place) {\n              parameters.push({type: 'Literal', value: place})\n            }\n\n            statements.push({\n              type: 'IfStatement',\n              test: {\n                type: 'UnaryExpression',\n                operator: '!',\n                prefix: true,\n                argument: toIdOrMemberExpression(id.split('.'))\n              },\n              consequent: {\n                type: 'ExpressionStatement',\n                expression: {\n                  type: 'CallExpression',\n                  callee: {type: 'Identifier', name: '_missingMdxReference'},\n                  arguments: parameters,\n                  optional: false\n                }\n              },\n              alternate: undefined\n            })\n          }\n\n          if (statements.length > 0) {\n            // Arrow functions with an implied return:\n            if (scopeNode.body.type !== 'BlockStatement') {\n              scopeNode.body = {\n                type: 'BlockStatement',\n                body: [{type: 'ReturnStatement', argument: scopeNode.body}]\n              }\n            }\n\n            scopeNode.body.body.unshift(...statements)\n          }\n\n          functionStack.pop()\n        }\n      }\n    })\n\n    // If a provider is used (and can be used), import it.\n    if (importProvider && providerImportSource) {\n      tree.body.unshift(\n        createImportProvider(providerImportSource, outputFormat)\n      )\n    }\n\n    // If potentially missing components are used.\n    if (createErrorHelper) {\n      /** @type {Array<Expression>} */\n      const message = [\n        {type: 'Literal', value: 'Expected '},\n        {\n          type: 'ConditionalExpression',\n          test: {type: 'Identifier', name: 'component'},\n          consequent: {type: 'Literal', value: 'component'},\n          alternate: {type: 'Literal', value: 'object'}\n        },\n        {type: 'Literal', value: ' `'},\n        {type: 'Identifier', name: 'id'},\n        {\n          type: 'Literal',\n          value:\n            '` to be defined: you likely forgot to import, pass, or provide it.'\n        }\n      ]\n\n      /** @type {Array<Identifier>} */\n      const parameters = [\n        {type: 'Identifier', name: 'id'},\n        {type: 'Identifier', name: 'component'}\n      ]\n\n      if (development) {\n        message.push({\n          type: 'ConditionalExpression',\n          test: {type: 'Identifier', name: 'place'},\n          consequent: toBinaryAddition([\n            {type: 'Literal', value: '\\nIt’s referenced in your code at `'},\n            {type: 'Identifier', name: 'place'},\n            {\n              type: 'Literal',\n              value: (file.path ? '` in `' + file.path : '') + '`'\n            }\n          ]),\n          alternate: {type: 'Literal', value: ''}\n        })\n\n        parameters.push({type: 'Identifier', name: 'place'})\n      }\n\n      tree.body.push({\n        type: 'FunctionDeclaration',\n        id: {type: 'Identifier', name: '_missingMdxReference'},\n        generator: false,\n        async: false,\n        params: parameters,\n        body: {\n          type: 'BlockStatement',\n          body: [\n            {\n              type: 'ThrowStatement',\n              argument: {\n                type: 'NewExpression',\n                callee: {type: 'Identifier', name: 'Error'},\n                arguments: [toBinaryAddition(message)]\n              }\n            }\n          ]\n        }\n      })\n    }\n\n    if (outputFormat === 'function-body') {\n      tree.body.unshift({\n        type: 'ExpressionStatement',\n        expression: {type: 'Literal', value: 'use strict'},\n        directive: 'use strict'\n      })\n    }\n  }\n}\n\n/**\n * @param {string} providerImportSource\n *   Provider source.\n * @param {'function-body' | 'program' | null | undefined} outputFormat\n *   Format.\n * @returns {ModuleDeclaration | Statement}\n *   Node.\n */\nfunction createImportProvider(providerImportSource, outputFormat) {\n  /** @type {Array<ImportSpecifier>} */\n  const specifiers = [\n    {\n      type: 'ImportSpecifier',\n      imported: {type: 'Identifier', name: 'useMDXComponents'},\n      local: {type: 'Identifier', name: '_provideComponents'}\n    }\n  ]\n\n  return outputFormat === 'function-body'\n    ? {\n        type: 'VariableDeclaration',\n        kind: 'const',\n        declarations: specifiersToDeclarations(\n          specifiers,\n          toIdOrMemberExpression(['arguments', 0])\n        )\n      }\n    : {\n        type: 'ImportDeclaration',\n        specifiers,\n        source: {type: 'Literal', value: providerImportSource}\n      }\n}\n\n/**\n * @param {Readonly<EstreeFunction>} node\n *   Node.\n * @param {string} name\n *   Name.\n * @returns {boolean}\n *   Whether `node` is a named function with `name`.\n */\nfunction isNamedFunction(node, name) {\n  return Boolean(node && 'id' in node && node.id && node.id.name === name)\n}\n\n/**\n * @param {Readonly<Scope>} scope\n *   Scope.\n * @param {string} id\n *   Identifier.\n * @returns {boolean}\n *   Whether `id` is in `scope`.\n */\nfunction inScope(scope, id) {\n  /** @type {Scope | undefined} */\n  let currentScope = scope\n\n  while (currentScope) {\n    if (currentScope.declarations.has(id)) {\n      return true\n    }\n\n    // Cast to patch our `node`.\n    currentScope = /** @type {Scope | undefined} */ (\n      currentScope.parent || undefined\n    )\n  }\n\n  return false\n}\n","// Astring is a tiny and fast JavaScript code generator from an ESTree-compliant AST.\n//\n// Astring was written by David Bonnet and released under an MIT license.\n//\n// The Git repository for Astring is available at:\n// https://github.com/davidbonnet/astring.git\n//\n// Please use the GitHub bug tracker to report issues:\n// https://github.com/davidbonnet/astring/issues\n\nconst { stringify } = JSON\n\n/* c8 ignore if */\nif (!String.prototype.repeat) {\n  /* c8 ignore next */\n  throw new Error(\n    'String.prototype.repeat is undefined, see https://github.com/davidbonnet/astring#installation',\n  )\n}\n\n/* c8 ignore if */\nif (!String.prototype.endsWith) {\n  /* c8 ignore next */\n  throw new Error(\n    'String.prototype.endsWith is undefined, see https://github.com/davidbonnet/astring#installation',\n  )\n}\n\nconst OPERATOR_PRECEDENCE = {\n  '||': 2,\n  '??': 3,\n  '&&': 4,\n  '|': 5,\n  '^': 6,\n  '&': 7,\n  '==': 8,\n  '!=': 8,\n  '===': 8,\n  '!==': 8,\n  '<': 9,\n  '>': 9,\n  '<=': 9,\n  '>=': 9,\n  in: 9,\n  instanceof: 9,\n  '<<': 10,\n  '>>': 10,\n  '>>>': 10,\n  '+': 11,\n  '-': 11,\n  '*': 12,\n  '%': 12,\n  '/': 12,\n  '**': 13,\n}\n\n// Enables parenthesis regardless of precedence\nexport const NEEDS_PARENTHESES = 17\n\nexport const EXPRESSIONS_PRECEDENCE = {\n  // Definitions\n  ArrayExpression: 20,\n  TaggedTemplateExpression: 20,\n  ThisExpression: 20,\n  Identifier: 20,\n  PrivateIdentifier: 20,\n  Literal: 18,\n  TemplateLiteral: 20,\n  Super: 20,\n  SequenceExpression: 20,\n  // Operations\n  MemberExpression: 19,\n  ChainExpression: 19,\n  CallExpression: 19,\n  NewExpression: 19,\n  // Other definitions\n  ArrowFunctionExpression: NEEDS_PARENTHESES,\n  ClassExpression: NEEDS_PARENTHESES,\n  FunctionExpression: NEEDS_PARENTHESES,\n  ObjectExpression: NEEDS_PARENTHESES,\n  // Other operations\n  UpdateExpression: 16,\n  UnaryExpression: 15,\n  AwaitExpression: 15,\n  BinaryExpression: 14,\n  LogicalExpression: 13,\n  ConditionalExpression: 4,\n  AssignmentExpression: 3,\n  YieldExpression: 2,\n  RestElement: 1,\n}\n\nfunction formatSequence(state, nodes) {\n  /*\n  Writes into `state` a sequence of `nodes`.\n  */\n  const { generator } = state\n  state.write('(')\n  if (nodes != null && nodes.length > 0) {\n    generator[nodes[0].type](nodes[0], state)\n    const { length } = nodes\n    for (let i = 1; i < length; i++) {\n      const param = nodes[i]\n      state.write(', ')\n      generator[param.type](param, state)\n    }\n  }\n  state.write(')')\n}\n\nfunction expressionNeedsParenthesis(state, node, parentNode, isRightHand) {\n  const nodePrecedence = state.expressionsPrecedence[node.type]\n  if (nodePrecedence === NEEDS_PARENTHESES) {\n    return true\n  }\n  const parentNodePrecedence = state.expressionsPrecedence[parentNode.type]\n  if (nodePrecedence !== parentNodePrecedence) {\n    // Different node types\n    return (\n      (!isRightHand &&\n        nodePrecedence === 15 &&\n        parentNodePrecedence === 14 &&\n        parentNode.operator === '**') ||\n      nodePrecedence < parentNodePrecedence\n    )\n  }\n  if (nodePrecedence !== 13 && nodePrecedence !== 14) {\n    // Not a `LogicalExpression` or `BinaryExpression`\n    return false\n  }\n  if (node.operator === '**' && parentNode.operator === '**') {\n    // Exponentiation operator has right-to-left associativity\n    return !isRightHand\n  }\n  if (\n    nodePrecedence === 13 &&\n    parentNodePrecedence === 13 &&\n    (node.operator === '??' || parentNode.operator === '??')\n  ) {\n    // Nullish coalescing and boolean operators cannot be combined\n    return true\n  }\n  if (isRightHand) {\n    // Parenthesis are used if both operators have the same precedence\n    return (\n      OPERATOR_PRECEDENCE[node.operator] <=\n      OPERATOR_PRECEDENCE[parentNode.operator]\n    )\n  }\n  return (\n    OPERATOR_PRECEDENCE[node.operator] <\n    OPERATOR_PRECEDENCE[parentNode.operator]\n  )\n}\n\nfunction formatExpression(state, node, parentNode, isRightHand) {\n  /*\n  Writes into `state` the provided `node`, adding parenthesis around if the provided `parentNode` needs it. If `node` is a right-hand argument, the provided `isRightHand` parameter should be `true`.\n  */\n  const { generator } = state\n  if (expressionNeedsParenthesis(state, node, parentNode, isRightHand)) {\n    state.write('(')\n    generator[node.type](node, state)\n    state.write(')')\n  } else {\n    generator[node.type](node, state)\n  }\n}\n\nfunction reindent(state, text, indent, lineEnd) {\n  /*\n  Writes into `state` the `text` string reindented with the provided `indent`.\n  */\n  const lines = text.split('\\n')\n  const end = lines.length - 1\n  state.write(lines[0].trim())\n  if (end > 0) {\n    state.write(lineEnd)\n    for (let i = 1; i < end; i++) {\n      state.write(indent + lines[i].trim() + lineEnd)\n    }\n    state.write(indent + lines[end].trim())\n  }\n}\n\nfunction formatComments(state, comments, indent, lineEnd) {\n  /*\n  Writes into `state` the provided list of `comments`, with the given `indent` and `lineEnd` strings.\n  Line comments will end with `\"\\n\"` regardless of the value of `lineEnd`.\n  Expects to start on a new unindented line.\n  */\n  const { length } = comments\n  for (let i = 0; i < length; i++) {\n    const comment = comments[i]\n    state.write(indent)\n    if (comment.type[0] === 'L') {\n      // Line comment\n      state.write('// ' + comment.value.trim() + '\\n', comment)\n    } else {\n      // Block comment\n      state.write('/*')\n      reindent(state, comment.value, indent, lineEnd)\n      state.write('*/' + lineEnd)\n    }\n  }\n}\n\nfunction hasCallExpression(node) {\n  /*\n  Returns `true` if the provided `node` contains a call expression and `false` otherwise.\n  */\n  let currentNode = node\n  while (currentNode != null) {\n    const { type } = currentNode\n    if (type[0] === 'C' && type[1] === 'a') {\n      // Is CallExpression\n      return true\n    } else if (type[0] === 'M' && type[1] === 'e' && type[2] === 'm') {\n      // Is MemberExpression\n      currentNode = currentNode.object\n    } else {\n      return false\n    }\n  }\n}\n\nfunction formatVariableDeclaration(state, node) {\n  /*\n  Writes into `state` a variable declaration.\n  */\n  const { generator } = state\n  const { declarations } = node\n  state.write(node.kind + ' ')\n  const { length } = declarations\n  if (length > 0) {\n    generator.VariableDeclarator(declarations[0], state)\n    for (let i = 1; i < length; i++) {\n      state.write(', ')\n      generator.VariableDeclarator(declarations[i], state)\n    }\n  }\n}\n\nlet ForInStatement,\n  FunctionDeclaration,\n  RestElement,\n  BinaryExpression,\n  ArrayExpression,\n  BlockStatement\n\nexport const GENERATOR = {\n  /*\n  Default generator.\n  */\n  Program(node, state) {\n    const indent = state.indent.repeat(state.indentLevel)\n    const { lineEnd, writeComments } = state\n    if (writeComments && node.comments != null) {\n      formatComments(state, node.comments, indent, lineEnd)\n    }\n    const statements = node.body\n    const { length } = statements\n    for (let i = 0; i < length; i++) {\n      const statement = statements[i]\n      if (writeComments && statement.comments != null) {\n        formatComments(state, statement.comments, indent, lineEnd)\n      }\n      state.write(indent)\n      this[statement.type](statement, state)\n      state.write(lineEnd)\n    }\n    if (writeComments && node.trailingComments != null) {\n      formatComments(state, node.trailingComments, indent, lineEnd)\n    }\n  },\n  BlockStatement: (BlockStatement = function (node, state) {\n    const indent = state.indent.repeat(state.indentLevel++)\n    const { lineEnd, writeComments } = state\n    const statementIndent = indent + state.indent\n    state.write('{')\n    const statements = node.body\n    if (statements != null && statements.length > 0) {\n      state.write(lineEnd)\n      if (writeComments && node.comments != null) {\n        formatComments(state, node.comments, statementIndent, lineEnd)\n      }\n      const { length } = statements\n      for (let i = 0; i < length; i++) {\n        const statement = statements[i]\n        if (writeComments && statement.comments != null) {\n          formatComments(state, statement.comments, statementIndent, lineEnd)\n        }\n        state.write(statementIndent)\n        this[statement.type](statement, state)\n        state.write(lineEnd)\n      }\n      state.write(indent)\n    } else {\n      if (writeComments && node.comments != null) {\n        state.write(lineEnd)\n        formatComments(state, node.comments, statementIndent, lineEnd)\n        state.write(indent)\n      }\n    }\n    if (writeComments && node.trailingComments != null) {\n      formatComments(state, node.trailingComments, statementIndent, lineEnd)\n    }\n    state.write('}')\n    state.indentLevel--\n  }),\n  ClassBody: BlockStatement,\n  StaticBlock(node, state) {\n    state.write('static ')\n    this.BlockStatement(node, state)\n  },\n  EmptyStatement(node, state) {\n    state.write(';')\n  },\n  ExpressionStatement(node, state) {\n    const precedence = state.expressionsPrecedence[node.expression.type]\n    if (\n      precedence === NEEDS_PARENTHESES ||\n      (precedence === 3 && node.expression.left.type[0] === 'O')\n    ) {\n      // Should always have parentheses or is an AssignmentExpression to an ObjectPattern\n      state.write('(')\n      this[node.expression.type](node.expression, state)\n      state.write(')')\n    } else {\n      this[node.expression.type](node.expression, state)\n    }\n    state.write(';')\n  },\n  IfStatement(node, state) {\n    state.write('if (')\n    this[node.test.type](node.test, state)\n    state.write(') ')\n    this[node.consequent.type](node.consequent, state)\n    if (node.alternate != null) {\n      state.write(' else ')\n      this[node.alternate.type](node.alternate, state)\n    }\n  },\n  LabeledStatement(node, state) {\n    this[node.label.type](node.label, state)\n    state.write(': ')\n    this[node.body.type](node.body, state)\n  },\n  BreakStatement(node, state) {\n    state.write('break')\n    if (node.label != null) {\n      state.write(' ')\n      this[node.label.type](node.label, state)\n    }\n    state.write(';')\n  },\n  ContinueStatement(node, state) {\n    state.write('continue')\n    if (node.label != null) {\n      state.write(' ')\n      this[node.label.type](node.label, state)\n    }\n    state.write(';')\n  },\n  WithStatement(node, state) {\n    state.write('with (')\n    this[node.object.type](node.object, state)\n    state.write(') ')\n    this[node.body.type](node.body, state)\n  },\n  SwitchStatement(node, state) {\n    const indent = state.indent.repeat(state.indentLevel++)\n    const { lineEnd, writeComments } = state\n    state.indentLevel++\n    const caseIndent = indent + state.indent\n    const statementIndent = caseIndent + state.indent\n    state.write('switch (')\n    this[node.discriminant.type](node.discriminant, state)\n    state.write(') {' + lineEnd)\n    const { cases: occurences } = node\n    const { length: occurencesCount } = occurences\n    for (let i = 0; i < occurencesCount; i++) {\n      const occurence = occurences[i]\n      if (writeComments && occurence.comments != null) {\n        formatComments(state, occurence.comments, caseIndent, lineEnd)\n      }\n      if (occurence.test) {\n        state.write(caseIndent + 'case ')\n        this[occurence.test.type](occurence.test, state)\n        state.write(':' + lineEnd)\n      } else {\n        state.write(caseIndent + 'default:' + lineEnd)\n      }\n      const { consequent } = occurence\n      const { length: consequentCount } = consequent\n      for (let i = 0; i < consequentCount; i++) {\n        const statement = consequent[i]\n        if (writeComments && statement.comments != null) {\n          formatComments(state, statement.comments, statementIndent, lineEnd)\n        }\n        state.write(statementIndent)\n        this[statement.type](statement, state)\n        state.write(lineEnd)\n      }\n    }\n    state.indentLevel -= 2\n    state.write(indent + '}')\n  },\n  ReturnStatement(node, state) {\n    state.write('return')\n    if (node.argument) {\n      state.write(' ')\n      this[node.argument.type](node.argument, state)\n    }\n    state.write(';')\n  },\n  ThrowStatement(node, state) {\n    state.write('throw ')\n    this[node.argument.type](node.argument, state)\n    state.write(';')\n  },\n  TryStatement(node, state) {\n    state.write('try ')\n    this[node.block.type](node.block, state)\n    if (node.handler) {\n      const { handler } = node\n      if (handler.param == null) {\n        state.write(' catch ')\n      } else {\n        state.write(' catch (')\n        this[handler.param.type](handler.param, state)\n        state.write(') ')\n      }\n      this[handler.body.type](handler.body, state)\n    }\n    if (node.finalizer) {\n      state.write(' finally ')\n      this[node.finalizer.type](node.finalizer, state)\n    }\n  },\n  WhileStatement(node, state) {\n    state.write('while (')\n    this[node.test.type](node.test, state)\n    state.write(') ')\n    this[node.body.type](node.body, state)\n  },\n  DoWhileStatement(node, state) {\n    state.write('do ')\n    this[node.body.type](node.body, state)\n    state.write(' while (')\n    this[node.test.type](node.test, state)\n    state.write(');')\n  },\n  ForStatement(node, state) {\n    state.write('for (')\n    if (node.init != null) {\n      const { init } = node\n      if (init.type[0] === 'V') {\n        formatVariableDeclaration(state, init)\n      } else {\n        this[init.type](init, state)\n      }\n    }\n    state.write('; ')\n    if (node.test) {\n      this[node.test.type](node.test, state)\n    }\n    state.write('; ')\n    if (node.update) {\n      this[node.update.type](node.update, state)\n    }\n    state.write(') ')\n    this[node.body.type](node.body, state)\n  },\n  ForInStatement: (ForInStatement = function (node, state) {\n    state.write(`for ${node.await ? 'await ' : ''}(`)\n    const { left } = node\n    if (left.type[0] === 'V') {\n      formatVariableDeclaration(state, left)\n    } else {\n      this[left.type](left, state)\n    }\n    // Identifying whether node.type is `ForInStatement` or `ForOfStatement`\n    state.write(node.type[3] === 'I' ? ' in ' : ' of ')\n    this[node.right.type](node.right, state)\n    state.write(') ')\n    this[node.body.type](node.body, state)\n  }),\n  ForOfStatement: ForInStatement,\n  DebuggerStatement(node, state) {\n    state.write('debugger;', node)\n  },\n  FunctionDeclaration: (FunctionDeclaration = function (node, state) {\n    state.write(\n      (node.async ? 'async ' : '') +\n        (node.generator ? 'function* ' : 'function ') +\n        (node.id ? node.id.name : ''),\n      node,\n    )\n    formatSequence(state, node.params)\n    state.write(' ')\n    this[node.body.type](node.body, state)\n  }),\n  FunctionExpression: FunctionDeclaration,\n  VariableDeclaration(node, state) {\n    formatVariableDeclaration(state, node)\n    state.write(';')\n  },\n  VariableDeclarator(node, state) {\n    this[node.id.type](node.id, state)\n    if (node.init != null) {\n      state.write(' = ')\n      this[node.init.type](node.init, state)\n    }\n  },\n  ClassDeclaration(node, state) {\n    state.write('class ' + (node.id ? `${node.id.name} ` : ''), node)\n    if (node.superClass) {\n      state.write('extends ')\n      const { superClass } = node\n      const { type } = superClass\n      const precedence = state.expressionsPrecedence[type]\n      if (\n        (type[0] !== 'C' || type[1] !== 'l' || type[5] !== 'E') &&\n        (precedence === NEEDS_PARENTHESES ||\n          precedence < state.expressionsPrecedence.ClassExpression)\n      ) {\n        // Not a ClassExpression that needs parentheses\n        state.write('(')\n        this[node.superClass.type](superClass, state)\n        state.write(')')\n      } else {\n        this[superClass.type](superClass, state)\n      }\n      state.write(' ')\n    }\n    this.ClassBody(node.body, state)\n  },\n  ImportDeclaration(node, state) {\n    state.write('import ')\n    const { specifiers } = node\n    const { length } = specifiers\n    // TODO: Once babili is fixed, put this after condition\n    // https://github.com/babel/babili/issues/430\n    let i = 0\n    if (length > 0) {\n      for (; i < length; ) {\n        if (i > 0) {\n          state.write(', ')\n        }\n        const specifier = specifiers[i]\n        const type = specifier.type[6]\n        if (type === 'D') {\n          // ImportDefaultSpecifier\n          state.write(specifier.local.name, specifier)\n          i++\n        } else if (type === 'N') {\n          // ImportNamespaceSpecifier\n          state.write('* as ' + specifier.local.name, specifier)\n          i++\n        } else {\n          // ImportSpecifier\n          break\n        }\n      }\n      if (i < length) {\n        state.write('{')\n        for (;;) {\n          const specifier = specifiers[i]\n          const { name } = specifier.imported\n          state.write(name, specifier)\n          if (name !== specifier.local.name) {\n            state.write(' as ' + specifier.local.name)\n          }\n          if (++i < length) {\n            state.write(', ')\n          } else {\n            break\n          }\n        }\n        state.write('}')\n      }\n      state.write(' from ')\n    }\n    this.Literal(node.source, state)\n    state.write(';')\n  },\n  ImportExpression(node, state) {\n    state.write('import(')\n    this[node.source.type](node.source, state)\n    state.write(')')\n  },\n  ExportDefaultDeclaration(node, state) {\n    state.write('export default ')\n    this[node.declaration.type](node.declaration, state)\n    if (\n      state.expressionsPrecedence[node.declaration.type] != null &&\n      node.declaration.type[0] !== 'F'\n    ) {\n      // All expression nodes except `FunctionExpression`\n      state.write(';')\n    }\n  },\n  ExportNamedDeclaration(node, state) {\n    state.write('export ')\n    if (node.declaration) {\n      this[node.declaration.type](node.declaration, state)\n    } else {\n      state.write('{')\n      const { specifiers } = node,\n        { length } = specifiers\n      if (length > 0) {\n        for (let i = 0; ; ) {\n          const specifier = specifiers[i]\n          const { name } = specifier.local\n          state.write(name, specifier)\n          if (name !== specifier.exported.name) {\n            state.write(' as ' + specifier.exported.name)\n          }\n          if (++i < length) {\n            state.write(', ')\n          } else {\n            break\n          }\n        }\n      }\n      state.write('}')\n      if (node.source) {\n        state.write(' from ')\n        this.Literal(node.source, state)\n      }\n      state.write(';')\n    }\n  },\n  ExportAllDeclaration(node, state) {\n    if (node.exported != null) {\n      state.write('export * as ' + node.exported.name + ' from ')\n    } else {\n      state.write('export * from ')\n    }\n    this.Literal(node.source, state)\n    state.write(';')\n  },\n  MethodDefinition(node, state) {\n    if (node.static) {\n      state.write('static ')\n    }\n    const kind = node.kind[0]\n    if (kind === 'g' || kind === 's') {\n      // Getter or setter\n      state.write(node.kind + ' ')\n    }\n    if (node.value.async) {\n      state.write('async ')\n    }\n    if (node.value.generator) {\n      state.write('*')\n    }\n    if (node.computed) {\n      state.write('[')\n      this[node.key.type](node.key, state)\n      state.write(']')\n    } else {\n      this[node.key.type](node.key, state)\n    }\n    formatSequence(state, node.value.params)\n    state.write(' ')\n    this[node.value.body.type](node.value.body, state)\n  },\n  ClassExpression(node, state) {\n    this.ClassDeclaration(node, state)\n  },\n  ArrowFunctionExpression(node, state) {\n    state.write(node.async ? 'async ' : '', node)\n    const { params } = node\n    if (params != null) {\n      // Omit parenthesis if only one named parameter\n      if (params.length === 1 && params[0].type[0] === 'I') {\n        // If params[0].type[0] starts with 'I', it can't be `ImportDeclaration` nor `IfStatement` and thus is `Identifier`\n        state.write(params[0].name, params[0])\n      } else {\n        formatSequence(state, node.params)\n      }\n    }\n    state.write(' => ')\n    if (node.body.type[0] === 'O') {\n      // Body is an object expression\n      state.write('(')\n      this.ObjectExpression(node.body, state)\n      state.write(')')\n    } else {\n      this[node.body.type](node.body, state)\n    }\n  },\n  ThisExpression(node, state) {\n    state.write('this', node)\n  },\n  Super(node, state) {\n    state.write('super', node)\n  },\n  RestElement: (RestElement = function (node, state) {\n    state.write('...')\n    this[node.argument.type](node.argument, state)\n  }),\n  SpreadElement: RestElement,\n  YieldExpression(node, state) {\n    state.write(node.delegate ? 'yield*' : 'yield')\n    if (node.argument) {\n      state.write(' ')\n      this[node.argument.type](node.argument, state)\n    }\n  },\n  AwaitExpression(node, state) {\n    state.write('await ', node)\n    formatExpression(state, node.argument, node)\n  },\n  TemplateLiteral(node, state) {\n    const { quasis, expressions } = node\n    state.write('`')\n    const { length } = expressions\n    for (let i = 0; i < length; i++) {\n      const expression = expressions[i]\n      const quasi = quasis[i]\n      state.write(quasi.value.raw, quasi)\n      state.write('${')\n      this[expression.type](expression, state)\n      state.write('}')\n    }\n    const quasi = quasis[quasis.length - 1]\n    state.write(quasi.value.raw, quasi)\n    state.write('`')\n  },\n  TemplateElement(node, state) {\n    state.write(node.value.raw, node)\n  },\n  TaggedTemplateExpression(node, state) {\n    formatExpression(state, node.tag, node)\n    this[node.quasi.type](node.quasi, state)\n  },\n  ArrayExpression: (ArrayExpression = function (node, state) {\n    state.write('[')\n    if (node.elements.length > 0) {\n      const { elements } = node,\n        { length } = elements\n      for (let i = 0; ; ) {\n        const element = elements[i]\n        if (element != null) {\n          this[element.type](element, state)\n        }\n        if (++i < length) {\n          state.write(', ')\n        } else {\n          if (element == null) {\n            state.write(', ')\n          }\n          break\n        }\n      }\n    }\n    state.write(']')\n  }),\n  ArrayPattern: ArrayExpression,\n  ObjectExpression(node, state) {\n    const indent = state.indent.repeat(state.indentLevel++)\n    const { lineEnd, writeComments } = state\n    const propertyIndent = indent + state.indent\n    state.write('{')\n    if (node.properties.length > 0) {\n      state.write(lineEnd)\n      if (writeComments && node.comments != null) {\n        formatComments(state, node.comments, propertyIndent, lineEnd)\n      }\n      const comma = ',' + lineEnd\n      const { properties } = node,\n        { length } = properties\n      for (let i = 0; ; ) {\n        const property = properties[i]\n        if (writeComments && property.comments != null) {\n          formatComments(state, property.comments, propertyIndent, lineEnd)\n        }\n        state.write(propertyIndent)\n        this[property.type](property, state)\n        if (++i < length) {\n          state.write(comma)\n        } else {\n          break\n        }\n      }\n      state.write(lineEnd)\n      if (writeComments && node.trailingComments != null) {\n        formatComments(state, node.trailingComments, propertyIndent, lineEnd)\n      }\n      state.write(indent + '}')\n    } else if (writeComments) {\n      if (node.comments != null) {\n        state.write(lineEnd)\n        formatComments(state, node.comments, propertyIndent, lineEnd)\n        if (node.trailingComments != null) {\n          formatComments(state, node.trailingComments, propertyIndent, lineEnd)\n        }\n        state.write(indent + '}')\n      } else if (node.trailingComments != null) {\n        state.write(lineEnd)\n        formatComments(state, node.trailingComments, propertyIndent, lineEnd)\n        state.write(indent + '}')\n      } else {\n        state.write('}')\n      }\n    } else {\n      state.write('}')\n    }\n    state.indentLevel--\n  },\n  Property(node, state) {\n    if (node.method || node.kind[0] !== 'i') {\n      // Either a method or of kind `set` or `get` (not `init`)\n      this.MethodDefinition(node, state)\n    } else {\n      if (!node.shorthand) {\n        if (node.computed) {\n          state.write('[')\n          this[node.key.type](node.key, state)\n          state.write(']')\n        } else {\n          this[node.key.type](node.key, state)\n        }\n        state.write(': ')\n      }\n      this[node.value.type](node.value, state)\n    }\n  },\n  PropertyDefinition(node, state) {\n    if (node.static) {\n      state.write('static ')\n    }\n    if (node.computed) {\n      state.write('[')\n    }\n    this[node.key.type](node.key, state)\n    if (node.computed) {\n      state.write(']')\n    }\n    if (node.value == null) {\n      if (node.key.type[0] !== 'F') {\n        state.write(';')\n      }\n      return\n    }\n    state.write(' = ')\n    this[node.value.type](node.value, state)\n    state.write(';')\n  },\n  ObjectPattern(node, state) {\n    state.write('{')\n    if (node.properties.length > 0) {\n      const { properties } = node,\n        { length } = properties\n      for (let i = 0; ; ) {\n        this[properties[i].type](properties[i], state)\n        if (++i < length) {\n          state.write(', ')\n        } else {\n          break\n        }\n      }\n    }\n    state.write('}')\n  },\n  SequenceExpression(node, state) {\n    formatSequence(state, node.expressions)\n  },\n  UnaryExpression(node, state) {\n    if (node.prefix) {\n      const {\n        operator,\n        argument,\n        argument: { type },\n      } = node\n      state.write(operator)\n      const needsParentheses = expressionNeedsParenthesis(state, argument, node)\n      if (\n        !needsParentheses &&\n        (operator.length > 1 ||\n          (type[0] === 'U' &&\n            (type[1] === 'n' || type[1] === 'p') &&\n            argument.prefix &&\n            argument.operator[0] === operator &&\n            (operator === '+' || operator === '-')))\n      ) {\n        // Large operator or argument is UnaryExpression or UpdateExpression node\n        state.write(' ')\n      }\n      if (needsParentheses) {\n        state.write(operator.length > 1 ? ' (' : '(')\n        this[type](argument, state)\n        state.write(')')\n      } else {\n        this[type](argument, state)\n      }\n    } else {\n      // FIXME: This case never occurs\n      this[node.argument.type](node.argument, state)\n      state.write(node.operator)\n    }\n  },\n  UpdateExpression(node, state) {\n    // Always applied to identifiers or members, no parenthesis check needed\n    if (node.prefix) {\n      state.write(node.operator)\n      this[node.argument.type](node.argument, state)\n    } else {\n      this[node.argument.type](node.argument, state)\n      state.write(node.operator)\n    }\n  },\n  AssignmentExpression(node, state) {\n    this[node.left.type](node.left, state)\n    state.write(' ' + node.operator + ' ')\n    this[node.right.type](node.right, state)\n  },\n  AssignmentPattern(node, state) {\n    this[node.left.type](node.left, state)\n    state.write(' = ')\n    this[node.right.type](node.right, state)\n  },\n  BinaryExpression: (BinaryExpression = function (node, state) {\n    const isIn = node.operator === 'in'\n    if (isIn) {\n      // Avoids confusion in `for` loops initializers\n      state.write('(')\n    }\n    formatExpression(state, node.left, node, false)\n    state.write(' ' + node.operator + ' ')\n    formatExpression(state, node.right, node, true)\n    if (isIn) {\n      state.write(')')\n    }\n  }),\n  LogicalExpression: BinaryExpression,\n  ConditionalExpression(node, state) {\n    const { test } = node\n    const precedence = state.expressionsPrecedence[test.type]\n    if (\n      precedence === NEEDS_PARENTHESES ||\n      precedence <= state.expressionsPrecedence.ConditionalExpression\n    ) {\n      state.write('(')\n      this[test.type](test, state)\n      state.write(')')\n    } else {\n      this[test.type](test, state)\n    }\n    state.write(' ? ')\n    this[node.consequent.type](node.consequent, state)\n    state.write(' : ')\n    this[node.alternate.type](node.alternate, state)\n  },\n  NewExpression(node, state) {\n    state.write('new ')\n    const precedence = state.expressionsPrecedence[node.callee.type]\n    if (\n      precedence === NEEDS_PARENTHESES ||\n      precedence < state.expressionsPrecedence.CallExpression ||\n      hasCallExpression(node.callee)\n    ) {\n      state.write('(')\n      this[node.callee.type](node.callee, state)\n      state.write(')')\n    } else {\n      this[node.callee.type](node.callee, state)\n    }\n    formatSequence(state, node['arguments'])\n  },\n  CallExpression(node, state) {\n    const precedence = state.expressionsPrecedence[node.callee.type]\n    if (\n      precedence === NEEDS_PARENTHESES ||\n      precedence < state.expressionsPrecedence.CallExpression\n    ) {\n      state.write('(')\n      this[node.callee.type](node.callee, state)\n      state.write(')')\n    } else {\n      this[node.callee.type](node.callee, state)\n    }\n    if (node.optional) {\n      state.write('?.')\n    }\n    formatSequence(state, node['arguments'])\n  },\n  ChainExpression(node, state) {\n    this[node.expression.type](node.expression, state)\n  },\n  MemberExpression(node, state) {\n    const precedence = state.expressionsPrecedence[node.object.type]\n    if (\n      precedence === NEEDS_PARENTHESES ||\n      precedence < state.expressionsPrecedence.MemberExpression\n    ) {\n      state.write('(')\n      this[node.object.type](node.object, state)\n      state.write(')')\n    } else {\n      this[node.object.type](node.object, state)\n    }\n    if (node.computed) {\n      if (node.optional) {\n        state.write('?.')\n      }\n      state.write('[')\n      this[node.property.type](node.property, state)\n      state.write(']')\n    } else {\n      if (node.optional) {\n        state.write('?.')\n      } else {\n        state.write('.')\n      }\n      this[node.property.type](node.property, state)\n    }\n  },\n  MetaProperty(node, state) {\n    state.write(node.meta.name + '.' + node.property.name, node)\n  },\n  Identifier(node, state) {\n    state.write(node.name, node)\n  },\n  PrivateIdentifier(node, state) {\n    state.write(`#${node.name}`, node)\n  },\n  Literal(node, state) {\n    if (node.raw != null) {\n      // Non-standard property\n      state.write(node.raw, node)\n    } else if (node.regex != null) {\n      this.RegExpLiteral(node, state)\n    } else if (node.bigint != null) {\n      state.write(node.bigint + 'n', node)\n    } else {\n      state.write(stringify(node.value), node)\n    }\n  },\n  RegExpLiteral(node, state) {\n    const { regex } = node\n    state.write(`/${regex.pattern}/${regex.flags}`, node)\n  },\n}\n\nconst EMPTY_OBJECT = {}\n\n/*\nDEPRECATED: Alternate export of `GENERATOR`.\n*/\nexport const baseGenerator = GENERATOR\n\nclass State {\n  constructor(options) {\n    const setup = options == null ? EMPTY_OBJECT : options\n    this.output = ''\n    // Functional options\n    if (setup.output != null) {\n      this.output = setup.output\n      this.write = this.writeToStream\n    } else {\n      this.output = ''\n    }\n    this.generator = setup.generator != null ? setup.generator : GENERATOR\n    this.expressionsPrecedence =\n      setup.expressionsPrecedence != null\n        ? setup.expressionsPrecedence\n        : EXPRESSIONS_PRECEDENCE\n    // Formating setup\n    this.indent = setup.indent != null ? setup.indent : '  '\n    this.lineEnd = setup.lineEnd != null ? setup.lineEnd : '\\n'\n    this.indentLevel =\n      setup.startingIndentLevel != null ? setup.startingIndentLevel : 0\n    this.writeComments = setup.comments ? setup.comments : false\n    // Source map\n    if (setup.sourceMap != null) {\n      this.write =\n        setup.output == null ? this.writeAndMap : this.writeToStreamAndMap\n      this.sourceMap = setup.sourceMap\n      this.line = 1\n      this.column = 0\n      this.lineEndSize = this.lineEnd.split('\\n').length - 1\n      this.mapping = {\n        original: null,\n        // Uses the entire state to avoid generating ephemeral objects\n        generated: this,\n        name: undefined,\n        source: setup.sourceMap.file || setup.sourceMap._file,\n      }\n    }\n  }\n\n  write(code) {\n    this.output += code\n  }\n\n  writeToStream(code) {\n    this.output.write(code)\n  }\n\n  writeAndMap(code, node) {\n    this.output += code\n    this.map(code, node)\n  }\n\n  writeToStreamAndMap(code, node) {\n    this.output.write(code)\n    this.map(code, node)\n  }\n\n  map(code, node) {\n    if (node != null) {\n      const { type } = node\n      if (type[0] === 'L' && type[2] === 'n') {\n        // LineComment\n        this.column = 0\n        this.line++\n        return\n      }\n      if (node.loc != null) {\n        const { mapping } = this\n        mapping.original = node.loc.start\n        mapping.name = node.name\n        this.sourceMap.addMapping(mapping)\n      }\n      if (\n        (type[0] === 'T' && type[8] === 'E') ||\n        (type[0] === 'L' && type[1] === 'i' && typeof node.value === 'string')\n      ) {\n        // TemplateElement or Literal string node\n        const { length } = code\n        let { column, line } = this\n        for (let i = 0; i < length; i++) {\n          if (code[i] === '\\n') {\n            column = 0\n            line++\n          } else {\n            column++\n          }\n        }\n        this.column = column\n        this.line = line\n        return\n      }\n    }\n    const { length } = code\n    const { lineEnd } = this\n    if (length > 0) {\n      if (\n        this.lineEndSize > 0 &&\n        (lineEnd.length === 1\n          ? code[length - 1] === lineEnd\n          : code.endsWith(lineEnd))\n      ) {\n        this.line += this.lineEndSize\n        this.column = 0\n      } else {\n        this.column += length\n      }\n    }\n  }\n\n  toString() {\n    return this.output\n  }\n}\n\nexport function generate(node, options) {\n  /*\n  Returns a string representing the rendered code of the provided AST `node`.\n  The `options` are:\n\n  - `indent`: string to use for indentation (defaults to `␣␣`)\n  - `lineEnd`: string to use for line endings (defaults to `\\n`)\n  - `startingIndentLevel`: indent level to start from (defaults to `0`)\n  - `comments`: generate comments if `true` (defaults to `false`)\n  - `output`: output stream to write the rendered code to (defaults to `null`)\n  - `generator`: custom code generator (defaults to `GENERATOR`)\n  - `expressionsPrecedence`: custom map of node types and their precedence level (defaults to `EXPRESSIONS_PRECEDENCE`)\n  */\n  const state = new State(options)\n  // Travel through the AST node and generate the code\n  state.generator[node.type](node, state)\n  return state.output\n}\n","/**\n * @typedef {import('astring').State} State\n * @typedef {import('estree-jsx').Node} Nodes\n * @typedef {import('estree-jsx').Program} Program\n * @typedef {typeof import('source-map').SourceMapGenerator} SourceMapGenerator\n * @typedef {import('source-map').RawSourceMap} Map\n */\n\n/**\n * @typedef {Record<Nodes['type'], Handler>} Generator\n *\n * @callback Handler\n *  Handle a particular node.\n * @param {Generator} this\n *   `astring` generator.\n * @param {any} node\n *   Node to serialize.\n * @param {State} state\n *   Info passed around.\n * @returns {undefined}\n *   Nothing.\n *\n * @typedef {Partial<import('astring').Generator>} Handlers\n */\n\n/**\n * @typedef {OptionsWithMaybeMapGenerator} Options\n *   Configuration.\n *\n * @typedef OptionsFieldsBase\n *   Base shared option fields.\n * @property {Handlers | null | undefined} [handlers]\n *   Object mapping node types to functions handling the corresponding nodes.\n *\n * @typedef OptionsFieldsWithoutSourceMapGenerator\n *   Extra option fields where there’s definitely no source map generator.\n * @property {null | undefined} [SourceMapGenerator]\n *   Generate a source map by passing a `SourceMapGenerator` from `source-map`\n *   in; this works if there is positional info on nodes.\n * @property {null | undefined} [filePath]\n *   Path to input file; only used in source map.\n *\n * @typedef OptionsFieldsWithSourceMapGenerator\n *   Extra option fields where there’s definitely a source map generator.\n * @property {SourceMapGenerator} SourceMapGenerator\n *   Generate a source map by passing a `SourceMapGenerator` from `source-map`\n *   in; this works if there is positional info on nodes.\n * @property {string | null | undefined} [filePath]\n *   Path to input file; only used in source map.\n *\n * @typedef OptionsFieldsMaybeSourceMapGenerator\n *   Extra option fields where there may or may not be a source map generator.\n * @property {SourceMapGenerator | null | undefined} [SourceMapGenerator]\n *   Generate a source map by passing a `SourceMapGenerator` from `source-map`\n *   in; this works if there is positional info on nodes.\n * @property {string | null | undefined} [filePath]\n *   Path to input file; only used in source map.\n *\n * @typedef {OptionsFieldsBase & OptionsFieldsWithoutSourceMapGenerator} OptionsWithoutSourceMapGenerator\n *   Options where there’s definitely no source map generator.\n * @typedef {OptionsFieldsBase & OptionsFieldsWithSourceMapGenerator} OptionsWithSourceMapGenerator\n *   Options where there’s definitely a source map generator.\n * @typedef {OptionsFieldsBase & OptionsFieldsMaybeSourceMapGenerator} OptionsWithMaybeMapGenerator\n *   Options where there may or may not be a source map generator.\n *\n * @typedef {ResultWithMaybeSourceMapGenerator} Result\n *   Result.\n *\n * @typedef ResultFieldsBase\n *   Base shared result fields.\n * @property {string} value\n *   Serialized JavaScript.\n *\n * @typedef ResultFieldsWithoutSourceMapGenerator\n *   Extra result fields where there’s definitely no source map generator.\n * @property {undefined} map\n *   Source map as (parsed) JSON, if `SourceMapGenerator` is passed.\n *\n * @typedef ResultFieldsWithSourceMapGenerator\n *   Extra result fields where there’s definitely a source map generator.\n * @property {Map} map\n *   Source map as (parsed) JSON, if `SourceMapGenerator` is not passed.\n *\n * @typedef ResultFieldsMaybeSourceMapGenerator\n *   Extra result fields where there may or may not be a source map generator.\n * @property {Map | undefined} map\n *   Source map as (parsed) JSON, if `SourceMapGenerator` might be passed.\n *\n * @typedef {ResultFieldsBase & ResultFieldsWithoutSourceMapGenerator} ResultWithoutSourceMapGenerator\n *   Result where there’s definitely no source map generator.\n * @typedef {ResultFieldsBase & ResultFieldsWithSourceMapGenerator} ResultWithSourceMapGenerator\n *   Result where there’s definitely a source map generator.\n * @typedef {ResultFieldsBase & ResultFieldsMaybeSourceMapGenerator} ResultWithMaybeSourceMapGenerator\n *   Result where there may or may not be a source map generator.\n */\n\nimport {GENERATOR, generate} from 'astring'\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Serialize an estree as JavaScript.\n *\n * @overload\n * @param {Program} tree\n * @param {OptionsWithSourceMapGenerator} options\n * @returns {ResultWithSourceMapGenerator}\n *\n * @overload\n * @param {Program} tree\n * @param {OptionsWithMaybeMapGenerator} options\n * @returns {ResultWithMaybeSourceMapGenerator}\n *\n * @overload\n * @param {Program} tree\n * @param {OptionsWithoutSourceMapGenerator | null | undefined} [options]\n * @returns {ResultWithoutSourceMapGenerator}\n *\n * @param {Program} tree\n *   Estree (esast).\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {Result}\n *   Result, optionally with source map.\n */\nexport function toJs(tree, options) {\n  const {SourceMapGenerator, filePath, handlers} = options || emptyOptions\n  const sourceMap = SourceMapGenerator\n    ? new SourceMapGenerator({file: filePath || '<unknown>.js'})\n    : undefined\n\n  const value = generate(\n    tree,\n    // @ts-expect-error: `sourceMap` can be undefined, `astring` types are buggy.\n    {\n      comments: true,\n      generator: {...GENERATOR, ...handlers},\n      sourceMap: sourceMap || undefined\n    }\n  )\n  const map = sourceMap ? sourceMap.toJSON() : undefined\n\n  return {value, map}\n}\n","/**\n * @typedef {import('estree-jsx').JSXAttribute} JsxAttribute\n * @typedef {import('estree-jsx').JSXClosingElement} JsxClosingElement\n * @typedef {import('estree-jsx').JSXClosingFragment} JsxClosingFragment\n * @typedef {import('estree-jsx').JSXElement} JsxElement\n * @typedef {import('estree-jsx').JSXExpressionContainer} JsxExpressionContainer\n * @typedef {import('estree-jsx').JSXFragment} JsxFragment\n * @typedef {import('estree-jsx').JSXIdentifier} JsxIdentifier\n * @typedef {import('estree-jsx').JSXMemberExpression} JsxMemberExpression\n * @typedef {import('estree-jsx').JSXNamespacedName} JsxNamespacedName\n * @typedef {import('estree-jsx').JSXOpeningElement} JsxOpeningElement\n * @typedef {import('estree-jsx').JSXOpeningFragment} JsxOpeningFragment\n * @typedef {import('estree-jsx').JSXSpreadAttribute} JsxSpreadAttribute\n * @typedef {import('estree-jsx').JSXText} JsxText\n *\n * @typedef {import('./index.js').Generator} Generator\n * @typedef {import('./index.js').State} State\n */\n\nexport const jsx = {\n  JSXAttribute: jsxAttribute,\n  JSXClosingElement: jsxClosingElement,\n  JSXClosingFragment: jsxClosingFragment,\n  JSXElement: jsxElement,\n  JSXEmptyExpression: jsxEmptyExpression,\n  JSXExpressionContainer: jsxExpressionContainer,\n  JSXFragment: jsxFragment,\n  JSXIdentifier: jsxIdentifier,\n  JSXMemberExpression: jsxMemberExpression,\n  JSXNamespacedName: jsxNamespacedName,\n  JSXOpeningElement: jsxOpeningElement,\n  JSXOpeningFragment: jsxOpeningFragment,\n  JSXSpreadAttribute: jsxSpreadAttribute,\n  JSXText: jsxText\n}\n\n/**\n * `attr`\n * `attr=\"something\"`\n * `attr={1}`\n *\n * @this {Generator}\n *   `astring` generator.\n * @param {JsxAttribute} node\n *   Node to serialize.\n * @param {State} state\n *   Info passed around.\n * @returns {undefined}\n *   Nothing.\n */\nfunction jsxAttribute(node, state) {\n  this[node.name.type](node.name, state)\n\n  if (node.value !== null && node.value !== undefined) {\n    state.write('=')\n\n    // Encode double quotes in attribute values.\n    if (node.value.type === 'Literal') {\n      state.write(\n        '\"' + encodeJsx(String(node.value.value)).replace(/\"/g, '&quot;') + '\"',\n        node\n      )\n    } else {\n      this[node.value.type](node.value, state)\n    }\n  }\n}\n\n/**\n * `</div>`\n *\n * @this {Generator}\n *   `astring` generator.\n * @param {JsxClosingElement} node\n *   Node to serialize.\n * @param {State} state\n *   Info passed around.\n * @returns {undefined}\n *   Nothing.\n */\nfunction jsxClosingElement(node, state) {\n  state.write('</')\n  this[node.name.type](node.name, state)\n  state.write('>')\n}\n\n/**\n * `</>`\n *\n * @this {Generator}\n *   `astring` generator.\n * @param {JsxClosingFragment} node\n *   Node to serialize.\n * @param {State} state\n *   Info passed around.\n * @returns {undefined}\n *   Nothing.\n */\nfunction jsxClosingFragment(node, state) {\n  state.write('</>', node)\n}\n\n/**\n * `<div />`\n * `<div></div>`\n *\n * @this {Generator}\n *   `astring` generator.\n * @param {JsxElement} node\n *   Node to serialize.\n * @param {State} state\n *   Info passed around.\n * @returns {undefined}\n *   Nothing.\n */\nfunction jsxElement(node, state) {\n  let index = -1\n\n  this[node.openingElement.type](node.openingElement, state)\n\n  if (node.children) {\n    while (++index < node.children.length) {\n      const child = node.children[index]\n\n      // Supported in types but not by Acorn.\n      /* c8 ignore next 3 */\n      if (child.type === 'JSXSpreadChild') {\n        throw new Error('JSX spread children are not supported')\n      }\n\n      this[child.type](child, state)\n    }\n  }\n\n  if (node.closingElement) {\n    this[node.closingElement.type](node.closingElement, state)\n  }\n}\n\n/**\n * `{}` (always in a `JSXExpressionContainer`, which does the curlies)\n *\n * @this {Generator}\n *   `astring` generator.\n * @returns {undefined}\n *   Nothing.\n */\nfunction jsxEmptyExpression() {}\n\n/**\n * `{expression}`\n *\n * @this {Generator}\n *   `astring` generator.\n * @param {JsxExpressionContainer} node\n *   Node to serialize.\n * @param {State} state\n *   Info passed around.\n * @returns {undefined}\n *   Nothing.\n */\nfunction jsxExpressionContainer(node, state) {\n  state.write('{')\n  this[node.expression.type](node.expression, state)\n  state.write('}')\n}\n\n/**\n * `<></>`\n *\n * @this {Generator}\n *   `astring` generator.\n * @param {JsxFragment} node\n *   Node to serialize.\n * @param {State} state\n *   Info passed around.\n * @returns {undefined}\n *   Nothing.\n */\nfunction jsxFragment(node, state) {\n  let index = -1\n\n  this[node.openingFragment.type](node.openingFragment, state)\n\n  if (node.children) {\n    while (++index < node.children.length) {\n      const child = node.children[index]\n\n      // Supported in types but not by Acorn.\n      /* c8 ignore next 3 */\n      if (child.type === 'JSXSpreadChild') {\n        throw new Error('JSX spread children are not supported')\n      }\n\n      this[child.type](child, state)\n    }\n  }\n\n  this[node.closingFragment.type](node.closingFragment, state)\n}\n\n/**\n * `div`\n *\n * @this {Generator}\n *   `astring` generator.\n * @param {JsxIdentifier} node\n *   Node to serialize.\n * @param {State} state\n *   Info passed around.\n * @returns {undefined}\n *   Nothing.\n */\nfunction jsxIdentifier(node, state) {\n  state.write(node.name, node)\n}\n\n/**\n * `member.expression`\n *\n * @this {Generator}\n *   `astring` generator.\n * @param {JsxMemberExpression} node\n *   Node to serialize.\n * @param {State} state\n *   Info passed around.\n * @returns {undefined}\n *   Nothing.\n */\nfunction jsxMemberExpression(node, state) {\n  this[node.object.type](node.object, state)\n  state.write('.')\n  this[node.property.type](node.property, state)\n}\n\n/**\n * `ns:name`\n *\n * @this {Generator}\n *   `astring` generator.\n * @param {JsxNamespacedName} node\n *   Node to serialize.\n * @param {State} state\n *   Info passed around.\n * @returns {undefined}\n *   Nothing.\n */\nfunction jsxNamespacedName(node, state) {\n  this[node.namespace.type](node.namespace, state)\n  state.write(':')\n  this[node.name.type](node.name, state)\n}\n\n/**\n * `<div>`\n *\n * @this {Generator}\n *   `astring` generator.\n * @param {JsxOpeningElement} node\n *   Node to serialize.\n * @param {State} state\n *   Info passed around.\n * @returns {undefined}\n *   Nothing.\n */\nfunction jsxOpeningElement(node, state) {\n  let index = -1\n\n  state.write('<')\n  this[node.name.type](node.name, state)\n\n  if (node.attributes) {\n    while (++index < node.attributes.length) {\n      state.write(' ')\n      this[node.attributes[index].type](node.attributes[index], state)\n    }\n  }\n\n  state.write(node.selfClosing ? ' />' : '>')\n}\n\n/**\n * `<>`\n *\n * @this {Generator}\n *   `astring` generator.\n * @param {JsxOpeningFragment} node\n *   Node to serialize.\n * @param {State} state\n *   Info passed around.\n * @returns {undefined}\n *   Nothing.\n */\nfunction jsxOpeningFragment(node, state) {\n  state.write('<>', node)\n}\n\n/**\n * `{...argument}`\n *\n * @this {Generator}\n *   `astring` generator.\n * @param {JsxSpreadAttribute} node\n *   Node to serialize.\n * @param {State} state\n *   Info passed around.\n * @returns {undefined}\n *   Nothing.\n */\nfunction jsxSpreadAttribute(node, state) {\n  state.write('{')\n  // eslint-disable-next-line new-cap\n  this.SpreadElement(node, state)\n  state.write('}')\n}\n\n/**\n * `!`\n *\n * @this {Generator}\n *   `astring` generator.\n * @param {JsxText} node\n *   Node to serialize.\n * @param {State} state\n *   Info passed around.\n * @returns {undefined}\n *   Nothing.\n */\nfunction jsxText(node, state) {\n  state.write(encodeJsx(node.value).replace(/[<>{}]/g, replaceJsxChar), node)\n}\n\n/**\n * Make sure that character references don’t pop up.\n *\n * For example, the text `&copy;` should stay that way, and not turn into `©`.\n * We could encode all `&` (easy but verbose) or look for actual valid\n * references (complex but cleanest output).\n * Looking for the 2nd character gives us a middle ground.\n * The `#` is for (decimal and hexadecimal) numeric references, the letters\n * are for the named references.\n *\n * @param {string} value\n *   Value to encode.\n * @returns {string}\n *   Encoded value.\n */\nfunction encodeJsx(value) {\n  return value.replace(/&(?=[#a-z])/gi, '&amp;')\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction replaceJsxChar($0) {\n  return $0 === '<'\n    ? '&lt;'\n    : $0 === '>'\n    ? '&gt;'\n    : $0 === '{'\n    ? '&#123;'\n    : '&#125;'\n}\n","/**\n * @typedef {import('estree-jsx').Program} Program\n * @typedef {import('unified').Processor<undefined, undefined, undefined, Program, string>} Processor\n * @typedef {import('vfile').VFile} VFile\n *\n * @typedef {import('../core.js').ProcessorOptions} ProcessorOptions\n */\n\nimport {jsx, toJs} from 'estree-util-to-js'\n\n/**\n * Serialize an esast (estree) program to JavaScript.\n *\n * @type {import('unified').Plugin<[Readonly<ProcessorOptions>], Program, string>}\n */\nexport function recmaStringify(options) {\n  // @ts-expect-error: TS is wrong about `this`.\n  // eslint-disable-next-line unicorn/no-this-assignment\n  const self = /** @type {Processor} */ (this)\n  const {SourceMapGenerator} = options\n\n  self.compiler = compiler\n\n  /**\n   * @param {Program} tree\n   *   Tree.\n   * @param {VFile} file\n   *   File.\n   * @returns {string}\n   *   JavaScript.\n   */\n  function compiler(tree, file) {\n    const result = SourceMapGenerator\n      ? toJs(tree, {\n          SourceMapGenerator,\n          filePath: file.path || 'unknown.mdx',\n          handlers: jsx\n        })\n      : toJs(tree, {handlers: jsx})\n\n    file.map = result.map\n\n    return result.value\n  }\n}\n","/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property\n    this.normal = normal\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {}\n/** @type {Normal} */\nSchema.prototype.normal = {}\n/** @type {string|null} */\nSchema.prototype.space = null\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  let index = -1\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property)\n    Object.assign(normal, definitions[index].normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * @param {string} value\n * @returns {string}\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property\n    /** @type {string} */\n    this.attribute = attribute\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null\nInfo.prototype.boolean = false\nInfo.prototype.booleanish = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.number = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.spaceSeparated = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.defined = false\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","import {Info} from './info.js'\nimport * as types from './types.js'\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value\n  }\n}\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\nimport {normalize} from '../normalize.js'\nimport {Schema} from './schema.js'\nimport {DefinedInfo} from './defined-info.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  /** @type {string} */\n  let prop\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      const value = definition.properties[prop]\n      const info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes || {}, prop),\n        value,\n        definition.space\n      )\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true\n      }\n\n      property[prop] = info\n\n      normal[normalize(prop)] = prop\n      normal[normalize(info.attribute)] = prop\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  space: 'xlink',\n  transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase()\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  space: 'xml',\n  transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase()\n  },\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n})\n","/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n})\n","import {booleanish, number, spaceSeparated} from './util/types.js'\nimport {create} from './util/create.js'\n\nexport const aria = create({\n  transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n})\n","import {\n  boolean,\n  overloadedBoolean,\n  booleanish,\n  number,\n  spaceSeparated,\n  commaSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const html = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    blocking: spaceSeparated,\n    capture: null,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    fetchPriority: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inert: boolean,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeToggle: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    popover: null,\n    popoverTarget: null,\n    popoverTargetAction: null,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shadowRootClonable: boolean,\n    shadowRootDelegatesFocus: boolean,\n    shadowRootMode: null,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n    writingSuggestions: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n})\n","import {\n  boolean,\n  number,\n  spaceSeparated,\n  commaSeparated,\n  commaOrSpaceSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseSensitiveTransform} from './util/case-sensitive-transform.js'\n\nexport const svg = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    transformOrigin: 'transform-origin',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    transformOrigin: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n})\n","/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nimport {merge} from './lib/util/merge.js'\nimport {xlink} from './lib/xlink.js'\nimport {xml} from './lib/xml.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\n\nexport {find} from './lib/find.js'\nexport {hastToReact} from './lib/hast-to-react.js'\nexport {normalize} from './lib/normalize.js'\nexport const html = merge([xml, xlink, xmlns, aria, htmlBase], 'html')\nexport const svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg')\n","/**\n * @callback Handler\n *   Handle a value, with a certain ID field set to a certain value.\n *   The ID field is passed to `zwitch`, and it’s value is this function’s\n *   place on the `handlers` record.\n * @param {...any} parameters\n *   Arbitrary parameters passed to the zwitch.\n *   The first will be an object with a certain ID field set to a certain value.\n * @returns {any}\n *   Anything!\n */\n\n/**\n * @callback UnknownHandler\n *   Handle values that do have a certain ID field, but it’s set to a value\n *   that is not listed in the `handlers` record.\n * @param {unknown} value\n *   An object with a certain ID field set to an unknown value.\n * @param {...any} rest\n *   Arbitrary parameters passed to the zwitch.\n * @returns {any}\n *   Anything!\n */\n\n/**\n * @callback InvalidHandler\n *   Handle values that do not have a certain ID field.\n * @param {unknown} value\n *   Any unknown value.\n * @param {...any} rest\n *   Arbitrary parameters passed to the zwitch.\n * @returns {void|null|undefined|never}\n *   This should crash or return nothing.\n */\n\n/**\n * @template {InvalidHandler} [Invalid=InvalidHandler]\n * @template {UnknownHandler} [Unknown=UnknownHandler]\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\n * @typedef Options\n *   Configuration (required).\n * @property {Invalid} [invalid]\n *   Handler to use for invalid values.\n * @property {Unknown} [unknown]\n *   Handler to use for unknown values.\n * @property {Handlers} [handlers]\n *   Handlers to use.\n */\n\nconst own = {}.hasOwnProperty\n\n/**\n * Handle values based on a field.\n *\n * @template {InvalidHandler} [Invalid=InvalidHandler]\n * @template {UnknownHandler} [Unknown=UnknownHandler]\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\n * @param {string} key\n *   Field to switch on.\n * @param {Options<Invalid, Unknown, Handlers>} [options]\n *   Configuration (required).\n * @returns {{unknown: Unknown, invalid: Invalid, handlers: Handlers, (...parameters: Parameters<Handlers[keyof Handlers]>): ReturnType<Handlers[keyof Handlers]>, (...parameters: Parameters<Unknown>): ReturnType<Unknown>}}\n */\nexport function zwitch(key, options) {\n  const settings = options || {}\n\n  /**\n   * Handle one value.\n   *\n   * Based on the bound `key`, a respective handler will be called.\n   * If `value` is not an object, or doesn’t have a `key` property, the special\n   * “invalid” handler will be called.\n   * If `value` has an unknown `key`, the special “unknown” handler will be\n   * called.\n   *\n   * All arguments, and the context object, are passed through to the handler,\n   * and it’s result is returned.\n   *\n   * @this {unknown}\n   *   Any context object.\n   * @param {unknown} [value]\n   *   Any value.\n   * @param {...unknown} parameters\n   *   Arbitrary parameters passed to the zwitch.\n   * @property {Handler} invalid\n   *   Handle for values that do not have a certain ID field.\n   * @property {Handler} unknown\n   *   Handle values that do have a certain ID field, but it’s set to a value\n   *   that is not listed in the `handlers` record.\n   * @property {Handlers} handlers\n   *   Record of handlers.\n   * @returns {unknown}\n   *   Anything.\n   */\n  function one(value, ...parameters) {\n    /** @type {Handler|undefined} */\n    let fn = one.invalid\n    const handlers = one.handlers\n\n    if (value && own.call(value, key)) {\n      // @ts-expect-error Indexable.\n      const id = String(value[key])\n      // @ts-expect-error Indexable.\n      fn = own.call(handlers, id) ? handlers[id] : one.unknown\n    }\n\n    if (fn) {\n      return fn.call(this, value, ...parameters)\n    }\n  }\n\n  one.handlers = settings.handlers || {}\n  one.invalid = settings.invalid\n  one.unknown = settings.unknown\n\n  // @ts-expect-error: matches!\n  return one\n}\n","/**\n * @typedef {import('estree').Comment} Comment\n *\n * @typedef {import('estree-jsx').JSXEmptyExpression} JsxEmptyExpression\n * @typedef {import('estree-jsx').JSXExpressionContainer} JsxExpressionContainer\n *\n * @typedef {import('hast').Comment} HastComment\n *\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn a hast comment into an estree node.\n *\n * @param {HastComment} node\n *   hast node to transform.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {JsxExpressionContainer}\n *   estree expression.\n */\nexport function comment(node, state) {\n  /** @type {Comment} */\n  const result = {type: 'Block', value: node.value}\n  state.inherit(node, result)\n  state.comments.push(result)\n\n  /** @type {JsxEmptyExpression} */\n  const expression = {\n    type: 'JSXEmptyExpression',\n    // @ts-expect-error: `comments` is custom.\n    comments: [Object.assign({}, result, {leading: false, trailing: true})]\n  }\n  state.patch(node, expression)\n\n  /** @type {JsxExpressionContainer} */\n  const container = {type: 'JSXExpressionContainer', expression}\n  state.patch(node, container)\n  return container\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\nimport {normalize} from './normalize.js'\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\n\nconst valid = /^data[-\\w.:]+$/i\nconst dash = /-[a-z]/g\nconst cap = /[A-Z]/g\n\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let prop = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * `hast` is close to `React`, but differs in a couple of cases.\n *\n * To get a React property from a hast property, check if it is in\n * `hastToReact`, if it is, then use the corresponding value,\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","import StyleToObject from './index.js';\n\nexport default StyleToObject;\n","/**\n * @typedef {import('estree').Property} Property\n *\n * @typedef {import('estree-jsx').JSXAttribute} JsxAttribute\n * @typedef {import('estree-jsx').JSXElement} JsxElement\n * @typedef {import('estree-jsx').JSXSpreadAttribute} JsxSpreadAttribute\n *\n * @typedef {import('hast').Element} HastElement\n *\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Record<string, string>} Style\n */\n\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {name as identifierName} from 'estree-util-is-identifier-name'\nimport {find, hastToReact, svg} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport styleToObject from 'style-to-object'\n\nconst own = {}.hasOwnProperty\nconst cap = /[A-Z]/g\nconst dashSomething = /-([a-z])/g\n\nconst tableCellElement = new Set(['td', 'th'])\n\n/**\n * Turn a hast element into an estree node.\n *\n * @param {HastElement} node\n *   hast node to transform.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {JsxElement}\n *   estree expression.\n */\n// eslint-disable-next-line complexity\nexport function element(node, state) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n  const props = node.properties || {}\n\n  if (parentSchema.space === 'html' && node.tagName.toLowerCase() === 'svg') {\n    schema = svg\n    state.schema = schema\n  }\n\n  const children = state.all(node)\n\n  /** @type {Array<JsxAttribute | JsxSpreadAttribute>} */\n  const attributes = []\n  /** @type {string} */\n  let prop\n  /** @type {string | undefined} */\n  let alignValue\n  /** @type {Array<Property> | undefined} */\n  let styleProperties\n\n  for (prop in props) {\n    if (own.call(props, prop)) {\n      let value = props[prop]\n      const info = find(schema, prop)\n      /** @type {JsxAttribute['value']} */\n      let attributeValue\n\n      // Ignore nullish and `NaN` values.\n      // Ignore `false` and falsey known booleans.\n      if (\n        value === null ||\n        value === undefined ||\n        value === false ||\n        (typeof value === 'number' && Number.isNaN(value)) ||\n        (!value && info.boolean)\n      ) {\n        continue\n      }\n\n      prop =\n        state.elementAttributeNameCase === 'react' && info.space\n          ? hastToReact[info.property] || info.property\n          : info.attribute\n\n      if (Array.isArray(value)) {\n        // Accept `array`.\n        // Most props are space-separated.\n        value = info.commaSeparated ? commas(value) : spaces(value)\n      }\n\n      if (prop === 'style') {\n        let styleObject =\n          typeof value === 'object'\n            ? value\n            : parseStyle(String(value), node.tagName)\n\n        if (state.stylePropertyNameCase === 'css') {\n          styleObject = transformStylesToCssCasing(styleObject)\n        }\n\n        /** @type {Array<Property>} */\n        const cssProperties = []\n        /** @type {string} */\n        let cssProp\n\n        for (cssProp in styleObject) {\n          // eslint-disable-next-line max-depth\n          if (own.call(styleObject, cssProp)) {\n            cssProperties.push({\n              type: 'Property',\n              method: false,\n              shorthand: false,\n              computed: false,\n              key: identifierName(cssProp)\n                ? {type: 'Identifier', name: cssProp}\n                : {type: 'Literal', value: cssProp},\n              value: {type: 'Literal', value: String(styleObject[cssProp])},\n              kind: 'init'\n            })\n          }\n        }\n\n        styleProperties = cssProperties\n        attributeValue = {\n          type: 'JSXExpressionContainer',\n          expression: {type: 'ObjectExpression', properties: cssProperties}\n        }\n      } else if (value === true) {\n        attributeValue = null\n      } else if (\n        state.tableCellAlignToStyle &&\n        tableCellElement.has(node.tagName) &&\n        prop === 'align'\n      ) {\n        alignValue = String(value)\n        continue\n      } else {\n        attributeValue = {type: 'Literal', value: String(value)}\n      }\n\n      if (identifierName(prop, {jsx: true})) {\n        attributes.push({\n          type: 'JSXAttribute',\n          name: {type: 'JSXIdentifier', name: prop},\n          value: attributeValue\n        })\n      } else {\n        attributes.push({\n          type: 'JSXSpreadAttribute',\n          argument: {\n            type: 'ObjectExpression',\n            properties: [\n              {\n                type: 'Property',\n                method: false,\n                shorthand: false,\n                computed: false,\n                key: {type: 'Literal', value: String(prop)},\n                // @ts-expect-error No need to worry about `style` (which has a\n                // `JSXExpressionContainer` value) because that’s a valid identifier.\n                value: attributeValue || {type: 'Literal', value: true},\n                kind: 'init'\n              }\n            ]\n          }\n        })\n      }\n    }\n  }\n\n  if (alignValue !== undefined) {\n    if (!styleProperties) {\n      styleProperties = []\n      attributes.push({\n        type: 'JSXAttribute',\n        name: {type: 'JSXIdentifier', name: 'style'},\n        value: {\n          type: 'JSXExpressionContainer',\n          expression: {type: 'ObjectExpression', properties: styleProperties}\n        }\n      })\n    }\n\n    const cssProp =\n      state.stylePropertyNameCase === 'css'\n        ? transformStyleToCssCasing('textAlign')\n        : 'textAlign'\n\n    styleProperties.push({\n      type: 'Property',\n      method: false,\n      shorthand: false,\n      computed: false,\n      key: identifierName(cssProp)\n        ? {type: 'Identifier', name: cssProp}\n        : {type: 'Literal', value: cssProp},\n      value: {type: 'Literal', value: alignValue},\n      kind: 'init'\n    })\n  }\n\n  // Restore parent schema.\n  state.schema = parentSchema\n\n  /** @type {JsxElement} */\n  const result = {\n    type: 'JSXElement',\n    openingElement: {\n      type: 'JSXOpeningElement',\n      attributes,\n      name: state.createJsxElementName(node.tagName),\n      selfClosing: children.length === 0\n    },\n    closingElement:\n      children.length > 0\n        ? {\n            type: 'JSXClosingElement',\n            name: state.createJsxElementName(node.tagName)\n          }\n        : null,\n    children\n  }\n  state.inherit(node, result)\n  return result\n}\n\n/**\n * Parse CSS rules as a declaration.\n *\n * @param {string} value\n *   CSS text.\n * @param {string} tagName\n *   Element name.\n * @returns {Style}\n *   Props.\n */\nfunction parseStyle(value, tagName) {\n  /** @type {Style} */\n  const result = {}\n\n  try {\n    styleToObject(value, iterator)\n  } catch (error) {\n    const cause = /** @type {Error} */ (error)\n    const exception = new Error(\n      'Could not parse `style` attribute on `' + tagName + '`',\n      {cause}\n    )\n    throw exception\n  }\n\n  return result\n\n  /**\n   * Add `name`, as a CSS prop, to `result`.\n   *\n   * @param {string} name\n   *   Key.\n   * @param {string} value\n   *   Value.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function iterator(name, value) {\n    let key = name\n\n    if (key.slice(0, 2) !== '--') {\n      // See: <https://alanhogan.com/code/vendor-prefixed-css-property-names-in-javascript>\n      if (key.slice(0, 4) === '-ms-') key = 'ms-' + key.slice(4)\n      key = key.replace(dashSomething, toCamel)\n    }\n\n    result[key] = value\n  }\n}\n\n/**\n * Transform a DOM casing style object to a CSS casing style object.\n *\n * @param {Style} domCasing\n * @returns {Style}\n */\nfunction transformStylesToCssCasing(domCasing) {\n  /** @type {Style} */\n  const cssCasing = {}\n  /** @type {string} */\n  let from\n\n  for (from in domCasing) {\n    if (own.call(domCasing, from)) {\n      cssCasing[transformStyleToCssCasing(from)] = domCasing[from]\n    }\n  }\n\n  return cssCasing\n}\n\n/**\n * Transform a DOM casing style prop to a CSS casing style prop.\n *\n * @param {string} from\n * @returns {string}\n */\nfunction transformStyleToCssCasing(from) {\n  let to = from.replace(cap, toDash)\n  // Handle `ms-xxx` -> `-ms-xxx`.\n  if (to.slice(0, 3) === 'ms-') to = '-' + to\n  return to\n}\n\n/**\n * Make `$1` capitalized.\n *\n * @param {string} _\n *   Whatever.\n * @param {string} $1\n *   Single ASCII alphabetical.\n * @returns {string}\n *   Capitalized `$1`.\n */\nfunction toCamel(_, $1) {\n  return $1.toUpperCase()\n}\n\n/**\n * Make `$0` dash cased.\n *\n * @param {string} $0\n *   Capitalized ASCII leter.\n * @returns {string}\n *   Dash and lower letter.\n */\nfunction toDash($0) {\n  return '-' + $0.toLowerCase()\n}\n","/**\n * @typedef {import('estree').Comment} Comment\n * @typedef {import('estree').Node} Nodes\n */\n\n/**\n * @typedef Fields\n *   Fields.\n * @property {boolean} leading\n *   Whether it’s leading.\n * @property {boolean} trailing\n *   Whether it’s trailing.\n *\n * @typedef State\n *   Info passed around.\n * @property {Array<Comment>} comments\n *   Comments.\n * @property {number} index\n *   Index of comment.\n */\n\nconst own = {}.hasOwnProperty\n\n/** @type {Array<Comment>} */\nconst emptyComments = []\n\n/**\n * Attach semistandard estree comment nodes to the tree.\n *\n * This mutates the given `tree`.\n * It takes `comments`, walks the tree, and adds comments as close as possible\n * to where they originated.\n *\n * Comment nodes are given two boolean fields: `leading` (`true` for\n * `/* a *\\/ b`) and `trailing` (`true` for `a /* b *\\/`).\n * Both fields are `false` for dangling comments: `[/* a *\\/]`.\n * This is what `recast` uses too, and is somewhat similar to Babel, which is\n * not estree but instead uses `leadingComments`, `trailingComments`, and\n * `innerComments` arrays on nodes.\n *\n * The algorithm checks any node: even recent (or future) proposals or\n * nonstandard syntax such as JSX, because it ducktypes to find nodes instead\n * of having a list of visitor keys.\n *\n * The algorithm supports `loc` fields (line/column), `range` fields (offsets),\n * and direct `start` / `end` fields.\n *\n * @template {Nodes} Tree\n *   Node type.\n * @param {Tree} tree\n *   Tree to attach to.\n * @param {Array<Comment> | null | undefined} [comments]\n *   List of comments (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport function attachComments(tree, comments) {\n  const list = comments ? [...comments].sort(compare) : emptyComments\n  if (list.length > 0) walk(tree, {comments: list, index: 0})\n}\n\n/**\n * Attach semistandard estree comment nodes to the tree.\n *\n * @param {Nodes} node\n *   Node.\n * @param {State} state\n *   Info passed around.\n * @returns {undefined}\n *   Nothing.\n */\nfunction walk(node, state) {\n  // Done, we can quit.\n  if (state.index === state.comments.length) {\n    return\n  }\n\n  /** @type {Array<Nodes>} */\n  const children = []\n  /** @type {Array<Comment>} */\n  const comments = []\n  /** @type {string} */\n  let key\n\n  // Find all children of `node`\n  for (key in node) {\n    if (own.call(node, key)) {\n      /** @type {Array<Nodes> | Nodes} */\n      // @ts-expect-error: indexable.\n      const value = node[key]\n\n      // Ignore comments.\n      if (value && typeof value === 'object' && key !== 'comments') {\n        if (Array.isArray(value)) {\n          let index = -1\n\n          while (++index < value.length) {\n            if (value[index] && typeof value[index].type === 'string') {\n              children.push(value[index])\n            }\n          }\n        } else if (typeof value.type === 'string') {\n          children.push(value)\n        }\n      }\n    }\n  }\n\n  // Sort the children.\n  children.sort(compare)\n\n  // Initial comments.\n  comments.push(...slice(state, node, false, {leading: true, trailing: false}))\n\n  let index = -1\n\n  while (++index < children.length) {\n    walk(children[index], state)\n  }\n\n  // Dangling or trailing comments.\n  comments.push(\n    ...slice(state, node, true, {\n      leading: false,\n      trailing: children.length > 0\n    })\n  )\n\n  if (comments.length > 0) {\n    // @ts-expect-error, yes, because they’re nonstandard.\n    node.comments = comments\n  }\n}\n\n/**\n * @param {State} state\n *   Info passed around.\n * @param {Nodes} node\n *   Node.\n * @param {boolean} compareEnd\n *   Whether to compare on the end (default is on start).\n * @param {Fields} fields\n *   Fields.\n * @returns {Array<Comment>}\n *   Slice from `state.comments`.\n */\nfunction slice(state, node, compareEnd, fields) {\n  /** @type {Array<Comment>} */\n  const result = []\n\n  while (\n    state.comments[state.index] &&\n    compare(state.comments[state.index], node, compareEnd) < 1\n  ) {\n    result.push(Object.assign({}, state.comments[state.index++], fields))\n  }\n\n  return result\n}\n\n/**\n * Sort two nodes (or comments).\n *\n * @param {Comment | Nodes} left\n *   A node.\n * @param {Comment | Nodes} right\n *   The other node.\n * @param {boolean | undefined} [compareEnd=false]\n *   Compare on `end` of `right`, default is to compare on `start` (default:\n *   `false`).\n * @returns {number}\n *   Sorting.\n */\nfunction compare(left, right, compareEnd) {\n  const field = compareEnd ? 'end' : 'start'\n\n  // Offsets.\n  if (left.range && right.range) {\n    return left.range[0] - right.range[compareEnd ? 1 : 0]\n  }\n\n  // Points.\n  if (left.loc && left.loc.start && right.loc && right.loc[field]) {\n    return (\n      left.loc.start.line - right.loc[field].line ||\n      left.loc.start.column - right.loc[field].column\n    )\n  }\n\n  // Just `start` (and `end`) on nodes.\n  // Default in most parsers.\n  if ('start' in left && field in right) {\n    // @ts-expect-error Added by Acorn\n    return left.start - right[field]\n  }\n\n  return Number.NaN\n}\n","/**\n * @typedef {import('estree').Expression} Expression\n *\n * @typedef {import('estree-jsx').JSXEmptyExpression} JsxEmptyExpression\n * @typedef {import('estree-jsx').JSXExpressionContainer} JsxExpressionContainer\n *\n * @typedef {import('mdast-util-mdx-expression').MdxFlowExpressionHast} MdxFlowExpression\n * @typedef {import('mdast-util-mdx-expression').MdxTextExpressionHast} MdxTextExpression\n *\n * @typedef {import('../state.js').State} State\n */\n\nimport {attachComments} from 'estree-util-attach-comments'\n\n/**\n * Turn an MDX expression node into an estree node.\n *\n * @param {MdxFlowExpression | MdxTextExpression} node\n *   hast node to transform.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {JsxExpressionContainer}\n *   estree expression.\n */\nexport function mdxExpression(node, state) {\n  const estree = node.data && node.data.estree\n  const comments = (estree && estree.comments) || []\n  /** @type {Expression | JsxEmptyExpression | undefined} */\n  let expression\n\n  if (estree) {\n    state.comments.push(...comments)\n    attachComments(estree, estree.comments)\n    expression =\n      (estree.body[0] &&\n        estree.body[0].type === 'ExpressionStatement' &&\n        estree.body[0].expression) ||\n      undefined\n  }\n\n  if (!expression) {\n    expression = {type: 'JSXEmptyExpression'}\n    state.patch(node, expression)\n  }\n\n  /** @type {JsxExpressionContainer} */\n  const result = {type: 'JSXExpressionContainer', expression}\n  state.inherit(node, result)\n  return result\n}\n","/**\n * @typedef {import('estree').Expression} Expression\n *\n * @typedef {import('estree-jsx').JSXAttribute} JsxAttribute\n * @typedef {import('estree-jsx').JSXElement} JsxElement\n * @typedef {import('estree-jsx').JSXFragment} JsxFragment\n * @typedef {import('estree-jsx').JSXSpreadAttribute} JsxSpreadAttribute\n *\n * @typedef {import('mdast-util-mdx-jsx').MdxJsxFlowElementHast} MdxJsxFlowElement\n * @typedef {import('mdast-util-mdx-jsx').MdxJsxTextElementHast} MdxJsxTextElement\n *\n * @typedef {import('../state.js').State} State\n */\n\nimport {attachComments} from 'estree-util-attach-comments'\nimport {svg} from 'property-information'\n\n/**\n * Turn an MDX JSX element node into an estree node.\n *\n * @param {MdxJsxFlowElement | MdxJsxTextElement} node\n *   hast node to transform.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {JsxElement | JsxFragment}\n *   JSX element or fragment.\n */\n// eslint-disable-next-line complexity\nexport function mdxJsxElement(node, state) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n  const attrs = node.attributes || []\n  let index = -1\n\n  if (\n    node.name &&\n    parentSchema.space === 'html' &&\n    node.name.toLowerCase() === 'svg'\n  ) {\n    schema = svg\n    state.schema = schema\n  }\n\n  const children = state.all(node)\n  /** @type {Array<JsxAttribute | JsxSpreadAttribute>} */\n  const attributes = []\n\n  while (++index < attrs.length) {\n    const attr = attrs[index]\n    const value = attr.value\n    /** @type {JsxAttribute['value']} */\n    let attributeValue\n\n    if (attr.type === 'mdxJsxAttribute') {\n      if (value === null || value === undefined) {\n        attributeValue = null\n        // Empty.\n      }\n      // `MdxJsxAttributeValueExpression`.\n      else if (typeof value === 'object') {\n        const estree = value.data && value.data.estree\n        const comments = (estree && estree.comments) || []\n        /** @type {Expression | undefined} */\n        let expression\n\n        if (estree) {\n          state.comments.push(...comments)\n          attachComments(estree, estree.comments)\n          // Should exist.\n          /* c8 ignore next 5 */\n          expression =\n            (estree.body[0] &&\n              estree.body[0].type === 'ExpressionStatement' &&\n              estree.body[0].expression) ||\n            undefined\n        }\n\n        attributeValue = {\n          type: 'JSXExpressionContainer',\n          expression: expression || {type: 'JSXEmptyExpression'}\n        }\n        state.inherit(value, attributeValue)\n      }\n      // Anything else.\n      else {\n        attributeValue = {type: 'Literal', value: String(value)}\n      }\n\n      /** @type {JsxAttribute} */\n      const attribute = {\n        type: 'JSXAttribute',\n        name: state.createJsxAttributeName(attr.name),\n        value: attributeValue\n      }\n\n      state.inherit(attr, attribute)\n      attributes.push(attribute)\n    }\n    // MdxJsxExpressionAttribute.\n    else {\n      const estree = attr.data && attr.data.estree\n      const comments = (estree && estree.comments) || []\n      /** @type {JsxSpreadAttribute['argument'] | undefined} */\n      let argumentValue\n\n      if (estree) {\n        state.comments.push(...comments)\n        attachComments(estree, estree.comments)\n        // Should exist.\n        /* c8 ignore next 10 */\n        argumentValue =\n          (estree.body[0] &&\n            estree.body[0].type === 'ExpressionStatement' &&\n            estree.body[0].expression &&\n            estree.body[0].expression.type === 'ObjectExpression' &&\n            estree.body[0].expression.properties &&\n            estree.body[0].expression.properties[0] &&\n            estree.body[0].expression.properties[0].type === 'SpreadElement' &&\n            estree.body[0].expression.properties[0].argument) ||\n          undefined\n      }\n\n      /** @type {JsxSpreadAttribute} */\n      const attribute = {\n        type: 'JSXSpreadAttribute',\n        argument: argumentValue || {type: 'ObjectExpression', properties: []}\n      }\n      state.inherit(attr, attribute)\n      attributes.push(attribute)\n    }\n  }\n\n  // Restore parent schema.\n  state.schema = parentSchema\n\n  /** @type {JsxElement | JsxFragment} */\n  const result = node.name\n    ? {\n        type: 'JSXElement',\n        openingElement: {\n          type: 'JSXOpeningElement',\n          attributes,\n          name: state.createJsxElementName(node.name),\n          selfClosing: children.length === 0\n        },\n        closingElement:\n          children.length > 0\n            ? {\n                type: 'JSXClosingElement',\n                name: state.createJsxElementName(node.name)\n              }\n            : null,\n        children\n      }\n    : {\n        type: 'JSXFragment',\n        openingFragment: {type: 'JSXOpeningFragment'},\n        closingFragment: {type: 'JSXClosingFragment'},\n        children\n      }\n\n  state.inherit(node, result)\n  return result\n}\n","/**\n * @typedef {import('mdast-util-mdxjs-esm').MdxjsEsmHast} MdxjsEsm\n *\n * @typedef {import('../state.js').State} State\n */\n\nimport {attachComments} from 'estree-util-attach-comments'\n\n/**\n * Handle an MDX ESM node.\n *\n * @param {MdxjsEsm} node\n *   hast node to transform.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nexport function mdxjsEsm(node, state) {\n  const estree = node.data && node.data.estree\n  const comments = (estree && estree.comments) || []\n\n  if (estree) {\n    state.comments.push(...comments)\n    attachComments(estree, comments)\n    state.esm.push(...estree.body)\n  }\n}\n","/**\n * @typedef {import('hast').Nodes} Nodes\n */\n\n// HTML whitespace expression.\n// See <https://infra.spec.whatwg.org/#ascii-whitespace>.\nconst re = /[ \\t\\n\\f\\r]/g\n\n/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {Nodes | string} thing\n *   Thing to check (`Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`); if a node is passed it must be a `Text` node,\n *   whose `value` field is checked.\n */\nexport function whitespace(thing) {\n  return typeof thing === 'object'\n    ? thing.type === 'text'\n      ? empty(thing.value)\n      : false\n    : empty(thing)\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction empty(value) {\n  return value.replace(re, '') === ''\n}\n","/**\n * @typedef {import('estree-jsx').JSXFragment} JsxFragment\n *\n * @typedef {import('hast').Root} HastRoot\n *\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {JsxFragment['children'][number]} JsxChild\n */\n\nimport {whitespace} from 'hast-util-whitespace'\n\n/**\n * Turn a hast root node into an estree node.\n *\n * @param {HastRoot} node\n *   hast node to transform.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {JsxFragment}\n *   estree JSX fragment.\n */\nexport function root(node, state) {\n  const children = state.all(node)\n  /** @type {Array<JsxChild>} */\n  const cleanChildren = []\n  let index = -1\n  /** @type {Array<JsxChild> | undefined} */\n  let queue\n\n  // Remove surrounding whitespace nodes from the fragment.\n  while (++index < children.length) {\n    const child = children[index]\n\n    if (\n      child.type === 'JSXExpressionContainer' &&\n      child.expression.type === 'Literal' &&\n      whitespace(String(child.expression.value))\n    ) {\n      if (queue) queue.push(child)\n    } else {\n      if (queue) cleanChildren.push(...queue)\n      cleanChildren.push(child)\n      queue = []\n    }\n  }\n\n  /** @type {JsxFragment} */\n  const result = {\n    type: 'JSXFragment',\n    openingFragment: {type: 'JSXOpeningFragment'},\n    closingFragment: {type: 'JSXClosingFragment'},\n    children: cleanChildren\n  }\n  state.inherit(node, result)\n  return result\n}\n","/**\n * @typedef {import('estree').Literal} Literal\n *\n * @typedef {import('estree-jsx').JSXExpressionContainer} JsxExpressionContainer\n *\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn a hast text node into an estree node.\n *\n * @param {HastText} node\n *   hast node to transform.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {JsxExpressionContainer | undefined}\n *   JSX expression.\n */\nexport function text(node, state) {\n  const value = String(node.value || '')\n\n  if (value) {\n    /** @type {Literal} */\n    const result = {type: 'Literal', value}\n    state.inherit(node, result)\n    /** @type {JsxExpressionContainer} */\n    const container = {type: 'JSXExpressionContainer', expression: result}\n    state.patch(node, container)\n    return container\n  }\n}\n","import {comment} from './comment.js'\nimport {element} from './element.js'\nimport {mdxExpression} from './mdx-expression.js'\nimport {mdxJsxElement} from './mdx-jsx-element.js'\nimport {mdxjsEsm} from './mdxjs-esm.js'\nimport {root} from './root.js'\nimport {text} from './text.js'\n\nexport const handlers = {\n  comment,\n  doctype: ignore,\n  element,\n  mdxFlowExpression: mdxExpression,\n  mdxJsxFlowElement: mdxJsxElement,\n  mdxJsxTextElement: mdxJsxElement,\n  mdxTextExpression: mdxExpression,\n  mdxjsEsm,\n  root,\n  text\n}\n\n/**\n * Handle a node that is ignored.\n *\n * @returns {undefined}\n *   Nothing.\n */\nfunction ignore() {}\n","/**\n * @typedef {import('estree').Comment} Comment\n * @typedef {import('estree').Directive} Directive\n * @typedef {import('estree').ModuleDeclaration} ModuleDeclaration\n * @typedef {import('estree').Node} EstreeNode\n * @typedef {import('estree').Statement} Statement\n *\n * @typedef {import('estree-jsx').JSXAttribute} JsxAttribute\n * @typedef {import('estree-jsx').JSXElement} JsxElement\n * @typedef {import('estree-jsx').JSXIdentifier} JsxIdentifier\n * @typedef {import('estree-jsx').JSXMemberExpression} JsxMemberExpression\n * @typedef {import('estree-jsx').JSXNamespacedName} JsxNamespacedName\n *\n * @typedef {import('mdast-util-mdx-jsx').MdxJsxAttribute} MdxJsxAttribute\n * @typedef {import('mdast-util-mdx-jsx').MdxJsxAttributeValueExpression} MdxJsxAttributeValueExpression\n * @typedef {import('mdast-util-mdx-jsx').MdxJsxExpressionAttribute} MdxJsxExpressionAttribute\n *\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('hast').Parents} HastParents\n *\n * @typedef {import('property-information').Schema} Schema\n */\n\n/**\n * @typedef {JsxElement['openingElement']['name']} JsxElementName\n * @typedef {JsxAttribute['name']} JsxAttributeName\n * @typedef {JsxElement['children'][number]} JsxChild\n */\n\n/**\n * @typedef {'html' | 'react'} ElementAttributeNameCase\n *   Specify casing to use for attribute names.\n *\n *   HTML casing is for example `class`, `stroke-linecap`, `xml:lang`.\n *   React casing is for example `className`, `strokeLinecap`, `xmlLang`.\n *\n * @callback Handle\n *   Turn a hast node into an estree node.\n * @param {any} node\n *   Expected hast node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {JsxChild | null | undefined}\n *   estree node.\n *\n * @typedef Options\n *   Configuration.\n * @property {ElementAttributeNameCase | null | undefined} [elementAttributeNameCase='react']\n *   Specify casing to use for attribute names (default: `'react'`).\n *\n *   This casing is used for hast elements, not for embedded MDX JSX nodes\n *   (components that someone authored manually).\n * @property {Record<string, Handle | null | undefined> | null | undefined} [handlers={}]\n *   Custom handlers (optional).\n * @property {Space | null | undefined} [space='html']\n *   Which space the document is in (default: `'html'`).\n *\n *   When an `<svg>` element is found in the HTML space, this package already\n *   automatically switches to and from the SVG space when entering and exiting\n *   it.\n * @property {StylePropertyNameCase | null | undefined} [stylePropertyNameCase='dom']\n *   Specify casing to use for property names in `style` objects (default: `'dom'`).\n *\n *   This casing is used for hast elements, not for embedded MDX JSX nodes\n *   (components that someone authored manually).\n * @property {boolean | null | undefined} [tableCellAlignToStyle=true]\n *   Turn obsolete `align` props on `td` and `th` into CSS `style` props\n *   (default: `true`).\n *\n * @typedef {'html' | 'svg'} Space\n *   Namespace.\n *\n * @typedef {'css' | 'dom'} StylePropertyNameCase\n *   Casing to use for property names in `style` objects.\n *\n *   CSS casing is for example `background-color` and `-webkit-line-clamp`.\n *   DOM casing is for example `backgroundColor` and `WebkitLineClamp`.\n *\n * @typedef State\n *   Info passed around about the current state.\n * @property {(parent: HastParents) => Array<JsxChild>} all\n *   Transform children of a hast parent to estree.\n * @property {Array<Comment>} comments\n *   List of estree comments.\n * @property {(name: string) => JsxAttributeName} createJsxAttributeName\n *   Create a JSX attribute name.\n * @property {(name: string) => JsxElementName} createJsxElementName\n *   Create a JSX element name.\n * @property {ElementAttributeNameCase} elementAttributeNameCase\n *   Casing to use for attribute names.\n * @property {Array<Directive | ModuleDeclaration | Statement>} esm\n *   List of top-level estree nodes.\n * @property {(node: any) => JsxChild | null | undefined} handle\n *   Transform a hast node to estree.\n * @property {(from: HastNodes | MdxJsxAttribute | MdxJsxAttributeValueExpression | MdxJsxExpressionAttribute, to: Comment | EstreeNode) => undefined} inherit\n *   Take positional info and data from `from` (use `patch` if you don’t want data).\n * @property {(from: HastNodes, to: Comment | EstreeNode) => undefined} patch\n *   Take positional info from `from` (use `inherit` if you also want data).\n * @property {Schema} schema\n *   Current schema.\n * @property {StylePropertyNameCase} stylePropertyNameCase\n *   Casing to use for property names in `style` objects.\n * @property {boolean} tableCellAlignToStyle\n *   Turn obsolete `align` props on `td` and `th` into CSS `style` props.\n */\n\nimport {ok as assert} from 'devlop'\nimport {html, svg} from 'property-information'\nimport {position} from 'unist-util-position'\nimport {zwitch} from 'zwitch'\nimport {handlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n// `react-dom` triggers a warning for *any* white space in tables.\n// To follow GFM, `mdast-util-to-hast` injects line endings between elements.\n// Other tools might do so too, but they don’t do here, so we remove all of\n// that.\n//\n// See: <https://github.com/facebook/react/pull/7081>.\n// See: <https://github.com/facebook/react/pull/7515>.\n// See: <https://github.com/remarkjs/remark-react/issues/64>.\n// See: <https://github.com/rehypejs/rehype-react/pull/29>.\n// See: <https://github.com/rehypejs/rehype-react/pull/32>.\n// See: <https://github.com/rehypejs/rehype-react/pull/45>.\n// See: <https://github.com/mdx-js/mdx/issues/2000>\nconst tableElements = new Set(['table', 'tbody', 'thead', 'tfoot', 'tr'])\n\n/**\n * Create a state from options.\n *\n * @param {Options} options\n *   Configuration.\n * @returns {State}\n *   Info passed around about the current state.\n */\n\nexport function createState(options) {\n  /** @type {Handle} */\n  const one = zwitch('type', {\n    invalid,\n    unknown,\n    handlers: {...handlers, ...options.handlers}\n  })\n\n  return {\n    // Current space.\n    elementAttributeNameCase: options.elementAttributeNameCase || 'react',\n    schema: options.space === 'svg' ? svg : html,\n    stylePropertyNameCase: options.stylePropertyNameCase || 'dom',\n    tableCellAlignToStyle: options.tableCellAlignToStyle !== false,\n    // Results.\n    comments: [],\n    esm: [],\n    // Useful functions.\n    all,\n    createJsxAttributeName,\n    createJsxElementName,\n    handle,\n    inherit,\n    patch\n  }\n\n  /**\n   * @this {State}\n   * @param {any} node\n   * @returns {JsxChild | null | undefined}\n   */\n  function handle(node) {\n    return one(node, this)\n  }\n}\n\n/**\n * Crash on an invalid value.\n *\n * @param {unknown} value\n *   Non-node.\n * @returns {never}\n *   Nothing (crashes).\n */\nfunction invalid(value) {\n  throw new Error('Cannot handle value `' + value + '`, expected node')\n}\n\n/**\n * Crash on an unknown node.\n *\n * @param {unknown} node\n *   Unknown node.\n * @returns {never}\n *   Nothing (crashes).\n */\nfunction unknown(node) {\n  assert(node && typeof node === 'object')\n  assert('type' in node)\n  throw new Error('Cannot handle unknown node `' + node.type + '`')\n}\n\n/**\n * @this {State} state\n *   Info passed around about the current state.\n * @param {HastParents} parent\n *   hast node whose children to transform.\n * @returns {Array<JsxChild>}\n *   estree nodes.\n */\nfunction all(parent) {\n  const children = parent.children || []\n  let index = -1\n  /** @type {Array<JsxChild>} */\n  const results = []\n  const ignoreLineBreak =\n    this.schema.space === 'html' &&\n    parent.type === 'element' &&\n    tableElements.has(parent.tagName.toLowerCase())\n\n  while (++index < children.length) {\n    const child = children[index]\n\n    if (ignoreLineBreak && child.type === 'text' && child.value === '\\n') {\n      continue\n    }\n\n    const result = this.handle(child)\n\n    if (Array.isArray(result)) {\n      results.push(...result)\n    } else if (result) {\n      results.push(result)\n    }\n  }\n\n  return results\n}\n\n/**\n * Take positional info and data from `hast`.\n *\n * Use `patch` if you don’t want data.\n *\n * @param {HastNodes | MdxJsxAttribute | MdxJsxAttributeValueExpression | MdxJsxExpressionAttribute} from\n *   hast node to take positional info and data from.\n * @param {Comment | EstreeNode} to\n *   estree node to add positional info and data to.\n * @returns {undefined}\n *   Nothing.\n */\nfunction inherit(from, to) {\n  const left = /** @type {Record<string, unknown> | undefined} */ (from.data)\n  /** @type {Record<string, unknown> | undefined} */\n  let right\n  /** @type {string} */\n  let key\n\n  patch(from, to)\n\n  if (left) {\n    for (key in left) {\n      if (own.call(left, key) && key !== 'estree') {\n        if (!right) right = {}\n        right[key] = left[key]\n      }\n    }\n\n    if (right) {\n      // @ts-expect-error `esast` extension.\n      to.data = right\n    }\n  }\n}\n\n/**\n * Take positional info from `from`.\n *\n * Use `inherit` if you also want data.\n *\n * @param {HastNodes | MdxJsxAttribute | MdxJsxAttributeValueExpression | MdxJsxExpressionAttribute} from\n *   hast node to take positional info from.\n * @param {Comment | EstreeNode} to\n *   estree node to add positional info to.\n * @returns {undefined}\n *   Nothing.\n */\nfunction patch(from, to) {\n  const p = position(from)\n\n  if (p && p.start.offset !== undefined && p.end.offset !== undefined) {\n    // @ts-expect-error acorn-style.\n    to.start = p.start.offset\n    // @ts-expect-error acorn-style.\n    to.end = p.end.offset\n    to.loc = {\n      start: {line: p.start.line, column: p.start.column - 1},\n      end: {line: p.end.line, column: p.end.column - 1}\n    }\n    to.range = [p.start.offset, p.end.offset]\n  }\n}\n\n/**\n * Create a JSX attribute name.\n *\n * @param {string} name\n * @returns {JsxAttributeName}\n */\nfunction createJsxAttributeName(name) {\n  const node = createJsxNameFromString(name)\n\n  // MDX never generates this.\n  /* c8 ignore next 3 */\n  if (node.type === 'JSXMemberExpression') {\n    throw new Error('Member expressions in attribute names are not supported')\n  }\n\n  return node\n}\n\n/**\n * Create a JSX element name.\n *\n * @param {string} name\n * @returns {JsxElementName}\n */\nfunction createJsxElementName(name) {\n  return createJsxNameFromString(name)\n}\n\n/**\n * Create a JSX name from a string.\n *\n * @param {string} name\n *   Name.\n * @returns {JsxIdentifier | JsxMemberExpression | JsxNamespacedName}\n *   Node.\n */\nfunction createJsxNameFromString(name) {\n  if (name.includes('.')) {\n    const names = name.split('.')\n    let part = names.shift()\n    assert(part, 'Expected `part` to be defined')\n    /** @type {JsxIdentifier | JsxMemberExpression} */\n    let node = {type: 'JSXIdentifier', name: part}\n\n    while ((part = names.shift())) {\n      node = {\n        type: 'JSXMemberExpression',\n        object: node,\n        property: {type: 'JSXIdentifier', name: part}\n      }\n    }\n\n    return node\n  }\n\n  if (name.includes(':')) {\n    const parts = name.split(':')\n    return {\n      type: 'JSXNamespacedName',\n      namespace: {type: 'JSXIdentifier', name: parts[0]},\n      name: {type: 'JSXIdentifier', name: parts[1]}\n    }\n  }\n\n  return {type: 'JSXIdentifier', name}\n}\n","/**\n * Register MDX nodes in tree:\n *\n * @typedef {import('mdast-util-mdx-expression')}\n * @typedef {import('mdast-util-mdx-jsx')}\n * @typedef {import('mdast-util-mdxjs-esm')}\n */\n\n/**\n * @typedef {import('estree').ExpressionStatement} ExpressionStatement\n * @typedef {import('estree').Program} Program\n *\n * @typedef {import('hast').Nodes} HastNodes\n *\n * @typedef {import('./state.js').Options} Options\n */\n\nimport {createState} from './state.js'\n\n/**\n * Transform a hast tree (with embedded MDX nodes) into an estree.\n *\n * ##### Notes\n *\n * ###### Comments\n *\n * Comments are attached to the tree in their neighbouring nodes (`recast`,\n * `babel` style) and also added as a `comments` array on the program node\n * (`espree` style).\n * You may have to do `program.comments = undefined` for certain compilers.\n *\n * ###### Frameworks\n *\n * There are differences between what JSX frameworks accept, such as whether they\n * accept `class` or `className`, or `background-color` or `backgroundColor`.\n *\n * For JSX components written in MDX, the author has to be aware of this\n * difference and write code accordingly.\n * For hast elements transformed by this project, this will be handled through\n * options.\n *\n * | Framework | `elementAttributeNameCase` | `stylePropertyNameCase` |\n * | --------- | -------------------------- | ----------------------- |\n * | Preact    | `'html'`                   | `'dom'`                 |\n * | React     | `'react'`                  | `'dom'`                 |\n * | Solid     | `'html'`                   | `'css'`                 |\n * | Vue       | `'html'`                   | `'dom'`                 |\n *\n * @param {HastNodes} tree\n *   hast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {Program}\n *   estree program node.\n *\n *   The program’s last child in `body` is most likely an `ExpressionStatement`,\n *   whose expression is a `JSXFragment` or a `JSXElement`.\n *\n *   Typically, there is only one node in `body`, however, this utility also\n *   supports embedded MDX nodes in the HTML (when `mdast-util-mdx` is used\n *   with mdast to parse markdown before passing its nodes through to hast).\n *   When MDX ESM import/exports are used, those nodes are added before the\n *   fragment or element in body.\n *\n *   There aren’t many great estree serializers out there that support JSX.\n *   To do that, you can use `estree-util-to-js`.\n *   Or, use `estree-util-build-jsx` to turn JSX into function calls, and then\n *   serialize with whatever (`astring`, `escodegen`).\n */\nexport function toEstree(tree, options) {\n  const state = createState(options || {})\n  let result = state.handle(tree)\n  const body = state.esm\n\n  if (result) {\n    if (result.type !== 'JSXFragment' && result.type !== 'JSXElement') {\n      result = {\n        type: 'JSXFragment',\n        openingFragment: {type: 'JSXOpeningFragment'},\n        closingFragment: {type: 'JSXClosingFragment'},\n        children: [result]\n      }\n      state.patch(tree, result)\n    }\n\n    /** @type {ExpressionStatement} */\n    // @ts-expect-error: `estree` types don’t allow JSX.\n    const statement = {type: 'ExpressionStatement', expression: result}\n    state.patch(tree, statement)\n    body.push(statement)\n  }\n\n  /** @type {Program} */\n  const program = {\n    type: 'Program',\n    body,\n    sourceType: 'module',\n    comments: state.comments\n  }\n  state.patch(tree, program)\n  return program\n}\n","/**\n * @typedef {import('estree-jsx').Program} Program\n *\n * @typedef {import('hast').Root} Root\n *\n * @typedef {import('../core.js').ProcessorOptions} ProcessorOptions\n */\n\nimport {toEstree} from 'hast-util-to-estree'\n\n/**\n * A plugin to transform an HTML (hast) tree to a JS (estree).\n * `hast-util-to-estree` does all the work for us!\n *\n * @param {Readonly<ProcessorOptions>} options\n *   Configuration (optional).\n * @returns\n *   Transform.\n */\nexport function rehypeRecma(options) {\n  /**\n   * @param {Root} tree\n   *   Tree (hast).\n   * @returns {Program}\n   *   Program (esast).\n   */\n  return function (tree) {\n    return toEstree(tree, options)\n  }\n}\n","/**\n * @typedef {import('hast').Root} Root\n */\n\nimport {visit} from 'unist-util-visit'\n\n/**\n * A tiny plugin that removes raw HTML.\n *\n * This is needed if the format is `md` and `rehype-raw` was not used to parse\n * dangerous HTML into nodes.\n *\n * @returns\n *   Transform.\n */\nexport function rehypeRemoveRaw() {\n  /**\n   * @param {Root} tree\n   *   Tree.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  return function (tree) {\n    visit(tree, 'raw', function (_, index, parent) {\n      if (parent && typeof index === 'number') {\n        parent.children.splice(index, 1)\n        return index\n      }\n    })\n  }\n}\n","/**\n * @typedef {'html'|'js'} Style\n *\n * @typedef Options\n *   Configuration.\n * @property {Style} [style='js']\n *   Style of white space to support.\n * @property {boolean} [preserveLineEndings=false]\n *   Whether to collapse white space containing a line ending to that line\n *   ending.\n *   The default is to collapse to a single space.\n * @property {boolean} [trim=false]\n *   Whether to drop white space at the start and end of `value`.\n *   The default is to keep it.\n */\n\nconst js = /\\s+/g\nconst html = /[\\t\\n\\v\\f\\r ]+/g\n\n/**\n * Collapse white space.\n *\n * @param {string} value\n *   Value to collapse white space in.\n * @param {Style|Options} [options='js']\n *   Configuration.\n * @returns {string}\n *   Value with collapsed white space.\n */\nexport function collapseWhiteSpace(value, options) {\n  if (!options) {\n    options = {}\n  } else if (typeof options === 'string') {\n    options = {style: options}\n  }\n\n  const replace = options.preserveLineEndings ? replaceLineEnding : replaceSpace\n\n  return String(value).replace(\n    options.style === 'html' ? html : js,\n    options.trim ? trimFactory(replace) : replace\n  )\n}\n\n/**\n * Replace white space with a line ending as that line ending and otherwise a\n * space.\n *\n * @param {string} value\n * @returns {string}\n */\nfunction replaceLineEnding(value) {\n  const match = /\\r?\\n|\\r/.exec(value)\n  return match ? match[0] : ' '\n}\n\n/**\n * Replace white space with a space.\n *\n * @returns {string}\n */\nfunction replaceSpace() {\n  return ' '\n}\n\n/**\n * @param {(value: string) => string} replace\n */\nfunction trimFactory(replace) {\n  return dropOrReplace\n\n  /**\n   * Replace white space with nothing if it starts or ends the string.\n   * Calls `replace` otherwise.\n   *\n   * @param {string} value\n   * @param {number} index\n   * @param {string} all\n   * @returns {string}\n   */\n  function dropOrReplace(value, index, all) {\n    return index === 0 || index + value.length === all.length\n      ? ''\n      : replace(value)\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').RootContent} RootContent\n */\n\nimport {collapseWhiteSpace} from 'collapse-white-space'\nimport {visit} from 'unist-util-visit'\n\n/**\n * A tiny plugin that unravels `<p><h1>x</h1></p>` but also\n * `<p><Component /></p>` (so it has no knowledge of “HTML”).\n *\n * It also marks JSX as being explicitly JSX, so when a user passes a `h1`\n * component, it is used for `# heading` but not for `<h1>heading</h1>`.\n *\n * @returns\n *   Transform.\n */\nexport function remarkMarkAndUnravel() {\n  /**\n   * @param {Root} tree\n   *   Tree.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  return function (tree) {\n    visit(tree, function (node, index, parent) {\n      let offset = -1\n      let all = true\n      let oneOrMore = false\n\n      if (parent && typeof index === 'number' && node.type === 'paragraph') {\n        const children = node.children\n\n        while (++offset < children.length) {\n          const child = children[offset]\n\n          if (\n            child.type === 'mdxJsxTextElement' ||\n            child.type === 'mdxTextExpression'\n          ) {\n            oneOrMore = true\n          } else if (\n            child.type === 'text' &&\n            collapseWhiteSpace(child.value, {style: 'html', trim: true}) === ''\n          ) {\n            // Empty.\n          } else {\n            all = false\n            break\n          }\n        }\n\n        if (all && oneOrMore) {\n          offset = -1\n\n          /** @type {Array<RootContent>} */\n          const newChildren = []\n\n          while (++offset < children.length) {\n            const child = children[offset]\n\n            if (child.type === 'mdxJsxTextElement') {\n              // @ts-expect-error: mutate because it is faster; content model is fine.\n              child.type = 'mdxJsxFlowElement'\n            }\n\n            if (child.type === 'mdxTextExpression') {\n              // @ts-expect-error: mutate because it is faster; content model is fine.\n              child.type = 'mdxFlowExpression'\n            }\n\n            if (\n              child.type === 'text' &&\n              /^[\\t\\r\\n ]+$/.test(String(child.value))\n            ) {\n              // Empty.\n            } else {\n              newChildren.push(child)\n            }\n          }\n\n          parent.children.splice(index, 1, ...newChildren)\n          return index\n        }\n      }\n\n      if (\n        node.type === 'mdxJsxFlowElement' ||\n        node.type === 'mdxJsxTextElement'\n      ) {\n        const data = node.data || (node.data = {})\n        data._mdxExplicitJsx = true\n      }\n    })\n  }\n}\n","/**\n * List of node types made by `mdast-util-mdx`, which have to be passed\n * through untouched from the mdast tree to the hast tree.\n */\nexport const nodeTypes = /** @type {const} */ ([\n  'mdxFlowExpression',\n  'mdxJsxFlowElement',\n  'mdxJsxTextElement',\n  'mdxTextExpression',\n  'mdxjsEsm'\n])\n","/**\n * @typedef {import('estree-jsx').Program} Program\n * @typedef {import('hast-util-to-estree').ElementAttributeNameCase} ElementAttributeNameCase\n * @typedef {import('hast-util-to-estree').StylePropertyNameCase} StylePropertyNameCase\n * @typedef {import('mdast').Root} Root\n * @typedef {import('remark-rehype').Options} RemarkRehypeOptions\n * @typedef {typeof import('source-map').SourceMapGenerator} SourceMapGenerator\n * @typedef {import('unified').PluggableList} PluggableList\n * @typedef {import('unified').Processor<Root, Program, Program, Program, string>} Processor\n */\n\n/**\n * @typedef ProcessorOptions\n *   Configuration for `createProcessor`.\n * @property {SourceMapGenerator | null | undefined} [SourceMapGenerator]\n *   Add a source map (object form) as the `map` field on the resulting file\n *   (optional).\n * @property {URL | string | null | undefined} [baseUrl]\n *   Use this URL as `import.meta.url` and resolve `import` and `export … from`\n *   relative to it (optional, example: `import.meta.url`).\n * @property {boolean | null | undefined} [development=false]\n *   Whether to add extra info to error messages in generated code and use the\n *   development automatic JSX runtime (`Fragment` and `jsxDEV` from\n *   `/jsx-dev-runtime`) (default: `false`);\n *   when using the webpack loader (`@mdx-js/loader`) or the Rollup integration\n *   (`@mdx-js/rollup`) through Vite, this is automatically inferred from how\n *   you configure those tools.\n * @property {ElementAttributeNameCase | null | undefined} [elementAttributeNameCase='react']\n *   Casing to use for attribute names (default: `'react'`);\n *   HTML casing is for example `class`, `stroke-linecap`, `xml:lang`;\n *   React casing is for example `className`, `strokeLinecap`, `xmlLang`;\n *   for JSX components written in MDX, the author has to be aware of which\n *   framework they use and write code accordingly;\n *   for AST nodes generated by this project, this option configures it\n * @property {'md' | 'mdx' | null | undefined} [format='mdx']\n *   format of the file (default: `'mdx'`);\n *   `'md'` means treat as markdown and `'mdx'` means treat as MDX.\n * @property {boolean | null | undefined} [jsx=false]\n *   Whether to keep JSX (default: `false`);\n *   the default is to compile JSX away so that the resulting file is\n *   immediately runnable.\n * @property {string | null | undefined} [jsxImportSource='react']\n *   Place to import automatic JSX runtimes from (default: `'react'`);\n *   when in the `automatic` runtime, this is used to define an import for\n *   `Fragment`, `jsx`, `jsxDEV`, and `jsxs`.\n * @property {'automatic' | 'classic' | null | undefined} [jsxRuntime='automatic']\n *   JSX runtime to use (default: `'automatic'`);\n *   the automatic runtime compiles to `import _jsx from\n *   '$importSource/jsx-runtime'\\n_jsx('p')`;\n *   the classic runtime compiles to calls such as `h('p')`.\n *\n *   > 👉 **Note**: support for the classic runtime is deprecated and will\n *   > likely be removed in the next major version.\n * @property {ReadonlyArray<string> | null | undefined} [mdExtensions]\n *   List of markdown extensions, with dot (default: `['.md', '.markdown', …]`);\n *   affects integrations.\n * @property {ReadonlyArray<string> | null | undefined} [mdxExtensions]\n *   List of MDX extensions, with dot (default: `['.mdx']`);\n *   affects integrations.\n * @property {'function-body' | 'program' | null | undefined} [outputFormat='program']\n *   Output format to generate (default: `'program'`);\n *   in most cases `'program'` should be used, it results in a whole program;\n *   internally `evaluate` uses `'function-body'` to compile to\n *   code that can be passed to `run`;\n *   in some cases, you might want what `evaluate` does in separate steps, such\n *   as when compiling on the server and running on the client.\n * @property {string | null | undefined} [pragma='React.createElement']\n *   Pragma for JSX, used in the classic runtime as an identifier for function\n *   calls: `<x />` to `React.createElement('x')` (default:\n *   `'React.createElement'`);\n *   when changing this, you should also define `pragmaFrag` and\n *   `pragmaImportSource` too.\n *\n *   > 👉 **Note**: support for the classic runtime is deprecated and will\n *   > likely be removed in the next major version.\n * @property {string | null | undefined} [pragmaFrag='React.Fragment']\n *   Pragma for fragment symbol, used in the classic runtime as an identifier\n *   for unnamed calls: `<>` to `React.createElement(React.Fragment)` (default:\n *   `'React.Fragment'`);\n *   when changing this, you should also define `pragma` and\n *   `pragmaImportSource` too.\n *\n *   > 👉 **Note**: support for the classic runtime is deprecated and will\n *   > likely be removed in the next major version.\n * @property {string | null | undefined} [pragmaImportSource='react']\n *   Where to import the identifier of `pragma` from, used in the classic\n *   runtime (default: `'react'`);\n *   to illustrate, when `pragma` is `'a.b'` and `pragmaImportSource` is `'c'`\n *   the following will be generated: `import a from 'c'` and things such as\n *   `a.b('h1', {})`.\n *   when changing this, you should also define `pragma` and `pragmaFrag` too.\n *\n *   > 👉 **Note**: support for the classic runtime is deprecated and will\n *   > likely be removed in the next major version.\n * @property {string | null | undefined} [providerImportSource]\n *   Place to import a provider from (optional, example: `'@mdx-js/react'`);\n *   normally it’s used for runtimes that support context (React, Preact), but\n *   it can be used to inject components into the compiled code;\n *   the module must export and identifier `useMDXComponents` which is called\n *   without arguments to get an object of components (`MDXComponents` from\n *   `mdx/types.js`).\n * @property {PluggableList | null | undefined} [recmaPlugins]\n *   List of recma plugins (optional);\n *   this is a new ecosystem, currently in beta, to transform esast trees\n *   (JavaScript)\n * @property {PluggableList | null | undefined} [remarkPlugins]\n *   List of remark plugins (optional).\n * @property {PluggableList | null | undefined} [rehypePlugins]\n *   List of rehype plugins (optional).\n * @property {Readonly<RemarkRehypeOptions> | null | undefined} [remarkRehypeOptions]\n *   Options to pass through to `remark-rehype` (optional);\n *   the option `allowDangerousHtml` will always be set to `true` and the MDX\n *   nodes (see `nodeTypes`) are passed through;\n *   In particular, you might want to pass configuration for footnotes if your\n *   content is not in English.\n * @property {StylePropertyNameCase | null | undefined} [stylePropertyNameCase='dom']\n *   Casing to use for property names in `style` objects (default: `'dom'`);\n *   CSS casing is for example `background-color` and `-webkit-line-clamp`;\n *   DOM casing is for example `backgroundColor` and `WebkitLineClamp`;\n *   for JSX components written in MDX, the author has to be aware of which\n *   framework they use and write code accordingly;\n *   for AST nodes generated by this project, this option configures it\n * @property {boolean | null | undefined} [tableCellAlignToStyle=true]\n *   Turn obsolete `align` properties on `td` and `th` into CSS `style`\n *   properties (default: `true`).\n */\n\nimport {unreachable} from 'devlop'\nimport remarkMdx from 'remark-mdx'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport {unified} from 'unified'\nimport {recmaDocument} from './plugin/recma-document.js'\nimport {recmaJsxBuild} from './plugin/recma-jsx-build.js'\nimport {recmaJsxRewrite} from './plugin/recma-jsx-rewrite.js'\nimport {recmaStringify} from './plugin/recma-stringify.js'\nimport {rehypeRecma} from './plugin/rehype-recma.js'\nimport {rehypeRemoveRaw} from './plugin/rehype-remove-raw.js'\nimport {remarkMarkAndUnravel} from './plugin/remark-mark-and-unravel.js'\nimport {nodeTypes} from './node-types.js'\n\nconst removedOptions = [\n  'compilers',\n  'filepath',\n  'hastPlugins',\n  'mdPlugins',\n  'skipExport',\n  'wrapExport'\n]\n\nlet warned = false\n\n/**\n * Create a processor to compile markdown or MDX to JavaScript.\n *\n * > **Note**: `format: 'detect'` is not allowed in `ProcessorOptions`.\n *\n * @param {Readonly<ProcessorOptions> | null | undefined} [options]\n *   Configuration (optional).\n * @return {Processor}\n *   Processor.\n */\nexport function createProcessor(options) {\n  const settings = options || {}\n  let index = -1\n\n  while (++index < removedOptions.length) {\n    const key = removedOptions[index]\n    if (key in settings) {\n      unreachable(\n        'Unexpected removed option `' +\n          key +\n          '`; see <https://mdxjs.com/migrating/v2/> on how to migrate'\n      )\n    }\n  }\n\n  // @ts-expect-error: throw an error for a runtime value which is not allowed\n  // by the types.\n  if (settings.format === 'detect') {\n    unreachable(\n      \"Unexpected `format: 'detect'`, which is not supported by `createProcessor`, expected `'mdx'` or `'md'`\"\n    )\n  }\n\n  if (\n    (settings.jsxRuntime === 'classic' ||\n      settings.pragma ||\n      settings.pragmaFrag ||\n      settings.pragmaImportSource) &&\n    !warned\n  ) {\n    warned = true\n    console.warn(\n      \"Unexpected deprecated option `jsxRuntime: 'classic'`, `pragma`, `pragmaFrag`, or `pragmaImportSource`; see <https://mdxjs.com/migrating/v3/> on how to migrate\"\n    )\n  }\n\n  const pipeline = unified().use(remarkParse)\n\n  if (settings.format !== 'md') {\n    pipeline.use(remarkMdx)\n  }\n\n  const remarkRehypeOptions = settings.remarkRehypeOptions || {}\n\n  pipeline\n    .use(remarkMarkAndUnravel)\n    .use(settings.remarkPlugins || [])\n    .use(remarkRehype, {\n      ...remarkRehypeOptions,\n      allowDangerousHtml: true,\n      passThrough: [...(remarkRehypeOptions.passThrough || []), ...nodeTypes]\n    })\n    .use(settings.rehypePlugins || [])\n\n  if (settings.format === 'md') {\n    pipeline.use(rehypeRemoveRaw)\n  }\n\n  pipeline\n    .use(rehypeRecma, settings)\n    .use(recmaDocument, settings)\n    .use(recmaJsxRewrite, settings)\n\n  if (!settings.jsx) {\n    pipeline.use(recmaJsxBuild, settings)\n  }\n\n  pipeline.use(recmaStringify, settings).use(settings.recmaPlugins || [])\n\n  // @ts-expect-error: we added plugins with if-checks, which TS doesn’t get.\n  return pipeline\n}\n","/**\n * @typedef {import('vfile').VFile} VFile\n * @typedef {import('vfile').Compatible} Compatible\n * @typedef {import('./core.js').ProcessorOptions} ProcessorOptions\n */\n\n/**\n * @typedef {Omit<ProcessorOptions, 'format'>} CoreProcessorOptions\n *   Core configuration.\n *\n * @typedef ExtraOptions\n *   Extra configuration.\n * @property {'detect' | 'md' | 'mdx' | null | undefined} [format='detect']\n *   Format of `file` (default: `'detect'`).\n *\n * @typedef {CoreProcessorOptions & ExtraOptions} CompileOptions\n *   Configuration for `compile`.\n *\n *   `CompileOptions` is the same as `ProcessorOptions` with the exception that\n *   the `format` option supports a `'detect'` value, which is the default.\n *   The `'detect'` format means to use `'md'` for files with an extension in\n *   `mdExtensions` and `'mdx'` otherwise.\n */\n\nimport {resolveFileAndOptions} from './util/resolve-file-and-options.js'\nimport {createProcessor} from './core.js'\n\n/**\n * Compile MDX to JS.\n *\n * @param {Readonly<Compatible>} vfileCompatible\n *   MDX document to parse.\n * @param {Readonly<CompileOptions> | null | undefined} [compileOptions]\n *   Compile configuration (optional).\n * @return {Promise<VFile>}\n *   Promise to compiled file.\n */\nexport function compile(vfileCompatible, compileOptions) {\n  const {file, options} = resolveFileAndOptions(vfileCompatible, compileOptions)\n  return createProcessor(options).process(file)\n}\n\n/**\n * Synchronously compile MDX to JS.\n *\n * When possible please use the async `compile`.\n *\n * @param {Readonly<Compatible>} vfileCompatible\n *   MDX document to parse.\n * @param {Readonly<CompileOptions> | null | undefined} [compileOptions]\n *   Compile configuration (optional).\n * @return {VFile}\n *   Compiled file.\n */\nexport function compileSync(vfileCompatible, compileOptions) {\n  const {file, options} = resolveFileAndOptions(vfileCompatible, compileOptions)\n  return createProcessor(options).processSync(file)\n}\n","const ALIAS = Symbol.for('yaml.alias');\nconst DOC = Symbol.for('yaml.document');\nconst MAP = Symbol.for('yaml.map');\nconst PAIR = Symbol.for('yaml.pair');\nconst SCALAR = Symbol.for('yaml.scalar');\nconst SEQ = Symbol.for('yaml.seq');\nconst NODE_TYPE = Symbol.for('yaml.node.type');\nconst isAlias = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === ALIAS;\nconst isDocument = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === DOC;\nconst isMap = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === MAP;\nconst isPair = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === PAIR;\nconst isScalar = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === SCALAR;\nconst isSeq = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === SEQ;\nfunction isCollection(node) {\n    if (node && typeof node === 'object')\n        switch (node[NODE_TYPE]) {\n            case MAP:\n            case SEQ:\n                return true;\n        }\n    return false;\n}\nfunction isNode(node) {\n    if (node && typeof node === 'object')\n        switch (node[NODE_TYPE]) {\n            case ALIAS:\n            case MAP:\n            case SCALAR:\n            case SEQ:\n                return true;\n        }\n    return false;\n}\nconst hasAnchor = (node) => (isScalar(node) || isCollection(node)) && !!node.anchor;\n\nexport { ALIAS, DOC, MAP, NODE_TYPE, PAIR, SCALAR, SEQ, hasAnchor, isAlias, isCollection, isDocument, isMap, isNode, isPair, isScalar, isSeq };\n","import { isDocument, isNode, isPair, isCollection, isMap, isSeq, isScalar, isAlias } from './nodes/identity.js';\n\nconst BREAK = Symbol('break visit');\nconst SKIP = Symbol('skip children');\nconst REMOVE = Symbol('remove node');\n/**\n * Apply a visitor to an AST node or document.\n *\n * Walks through the tree (depth-first) starting from `node`, calling a\n * `visitor` function with three arguments:\n *   - `key`: For sequence values and map `Pair`, the node's index in the\n *     collection. Within a `Pair`, `'key'` or `'value'`, correspondingly.\n *     `null` for the root node.\n *   - `node`: The current node.\n *   - `path`: The ancestry of the current node.\n *\n * The return value of the visitor may be used to control the traversal:\n *   - `undefined` (default): Do nothing and continue\n *   - `visit.SKIP`: Do not visit the children of this node, continue with next\n *     sibling\n *   - `visit.BREAK`: Terminate traversal completely\n *   - `visit.REMOVE`: Remove the current node, then continue with the next one\n *   - `Node`: Replace the current node, then continue by visiting it\n *   - `number`: While iterating the items of a sequence or map, set the index\n *     of the next step. This is useful especially if the index of the current\n *     node has changed.\n *\n * If `visitor` is a single function, it will be called with all values\n * encountered in the tree, including e.g. `null` values. Alternatively,\n * separate visitor functions may be defined for each `Map`, `Pair`, `Seq`,\n * `Alias` and `Scalar` node. To define the same visitor function for more than\n * one node type, use the `Collection` (map and seq), `Value` (map, seq & scalar)\n * and `Node` (alias, map, seq & scalar) targets. Of all these, only the most\n * specific defined one will be used for each node.\n */\nfunction visit(node, visitor) {\n    const visitor_ = initVisitor(visitor);\n    if (isDocument(node)) {\n        const cd = visit_(null, node.contents, visitor_, Object.freeze([node]));\n        if (cd === REMOVE)\n            node.contents = null;\n    }\n    else\n        visit_(null, node, visitor_, Object.freeze([]));\n}\n// Without the `as symbol` casts, TS declares these in the `visit`\n// namespace using `var`, but then complains about that because\n// `unique symbol` must be `const`.\n/** Terminate visit traversal completely */\nvisit.BREAK = BREAK;\n/** Do not visit the children of the current node */\nvisit.SKIP = SKIP;\n/** Remove the current node */\nvisit.REMOVE = REMOVE;\nfunction visit_(key, node, visitor, path) {\n    const ctrl = callVisitor(key, node, visitor, path);\n    if (isNode(ctrl) || isPair(ctrl)) {\n        replaceNode(key, path, ctrl);\n        return visit_(key, ctrl, visitor, path);\n    }\n    if (typeof ctrl !== 'symbol') {\n        if (isCollection(node)) {\n            path = Object.freeze(path.concat(node));\n            for (let i = 0; i < node.items.length; ++i) {\n                const ci = visit_(i, node.items[i], visitor, path);\n                if (typeof ci === 'number')\n                    i = ci - 1;\n                else if (ci === BREAK)\n                    return BREAK;\n                else if (ci === REMOVE) {\n                    node.items.splice(i, 1);\n                    i -= 1;\n                }\n            }\n        }\n        else if (isPair(node)) {\n            path = Object.freeze(path.concat(node));\n            const ck = visit_('key', node.key, visitor, path);\n            if (ck === BREAK)\n                return BREAK;\n            else if (ck === REMOVE)\n                node.key = null;\n            const cv = visit_('value', node.value, visitor, path);\n            if (cv === BREAK)\n                return BREAK;\n            else if (cv === REMOVE)\n                node.value = null;\n        }\n    }\n    return ctrl;\n}\n/**\n * Apply an async visitor to an AST node or document.\n *\n * Walks through the tree (depth-first) starting from `node`, calling a\n * `visitor` function with three arguments:\n *   - `key`: For sequence values and map `Pair`, the node's index in the\n *     collection. Within a `Pair`, `'key'` or `'value'`, correspondingly.\n *     `null` for the root node.\n *   - `node`: The current node.\n *   - `path`: The ancestry of the current node.\n *\n * The return value of the visitor may be used to control the traversal:\n *   - `Promise`: Must resolve to one of the following values\n *   - `undefined` (default): Do nothing and continue\n *   - `visit.SKIP`: Do not visit the children of this node, continue with next\n *     sibling\n *   - `visit.BREAK`: Terminate traversal completely\n *   - `visit.REMOVE`: Remove the current node, then continue with the next one\n *   - `Node`: Replace the current node, then continue by visiting it\n *   - `number`: While iterating the items of a sequence or map, set the index\n *     of the next step. This is useful especially if the index of the current\n *     node has changed.\n *\n * If `visitor` is a single function, it will be called with all values\n * encountered in the tree, including e.g. `null` values. Alternatively,\n * separate visitor functions may be defined for each `Map`, `Pair`, `Seq`,\n * `Alias` and `Scalar` node. To define the same visitor function for more than\n * one node type, use the `Collection` (map and seq), `Value` (map, seq & scalar)\n * and `Node` (alias, map, seq & scalar) targets. Of all these, only the most\n * specific defined one will be used for each node.\n */\nasync function visitAsync(node, visitor) {\n    const visitor_ = initVisitor(visitor);\n    if (isDocument(node)) {\n        const cd = await visitAsync_(null, node.contents, visitor_, Object.freeze([node]));\n        if (cd === REMOVE)\n            node.contents = null;\n    }\n    else\n        await visitAsync_(null, node, visitor_, Object.freeze([]));\n}\n// Without the `as symbol` casts, TS declares these in the `visit`\n// namespace using `var`, but then complains about that because\n// `unique symbol` must be `const`.\n/** Terminate visit traversal completely */\nvisitAsync.BREAK = BREAK;\n/** Do not visit the children of the current node */\nvisitAsync.SKIP = SKIP;\n/** Remove the current node */\nvisitAsync.REMOVE = REMOVE;\nasync function visitAsync_(key, node, visitor, path) {\n    const ctrl = await callVisitor(key, node, visitor, path);\n    if (isNode(ctrl) || isPair(ctrl)) {\n        replaceNode(key, path, ctrl);\n        return visitAsync_(key, ctrl, visitor, path);\n    }\n    if (typeof ctrl !== 'symbol') {\n        if (isCollection(node)) {\n            path = Object.freeze(path.concat(node));\n            for (let i = 0; i < node.items.length; ++i) {\n                const ci = await visitAsync_(i, node.items[i], visitor, path);\n                if (typeof ci === 'number')\n                    i = ci - 1;\n                else if (ci === BREAK)\n                    return BREAK;\n                else if (ci === REMOVE) {\n                    node.items.splice(i, 1);\n                    i -= 1;\n                }\n            }\n        }\n        else if (isPair(node)) {\n            path = Object.freeze(path.concat(node));\n            const ck = await visitAsync_('key', node.key, visitor, path);\n            if (ck === BREAK)\n                return BREAK;\n            else if (ck === REMOVE)\n                node.key = null;\n            const cv = await visitAsync_('value', node.value, visitor, path);\n            if (cv === BREAK)\n                return BREAK;\n            else if (cv === REMOVE)\n                node.value = null;\n        }\n    }\n    return ctrl;\n}\nfunction initVisitor(visitor) {\n    if (typeof visitor === 'object' &&\n        (visitor.Collection || visitor.Node || visitor.Value)) {\n        return Object.assign({\n            Alias: visitor.Node,\n            Map: visitor.Node,\n            Scalar: visitor.Node,\n            Seq: visitor.Node\n        }, visitor.Value && {\n            Map: visitor.Value,\n            Scalar: visitor.Value,\n            Seq: visitor.Value\n        }, visitor.Collection && {\n            Map: visitor.Collection,\n            Seq: visitor.Collection\n        }, visitor);\n    }\n    return visitor;\n}\nfunction callVisitor(key, node, visitor, path) {\n    if (typeof visitor === 'function')\n        return visitor(key, node, path);\n    if (isMap(node))\n        return visitor.Map?.(key, node, path);\n    if (isSeq(node))\n        return visitor.Seq?.(key, node, path);\n    if (isPair(node))\n        return visitor.Pair?.(key, node, path);\n    if (isScalar(node))\n        return visitor.Scalar?.(key, node, path);\n    if (isAlias(node))\n        return visitor.Alias?.(key, node, path);\n    return undefined;\n}\nfunction replaceNode(key, path, node) {\n    const parent = path[path.length - 1];\n    if (isCollection(parent)) {\n        parent.items[key] = node;\n    }\n    else if (isPair(parent)) {\n        if (key === 'key')\n            parent.key = node;\n        else\n            parent.value = node;\n    }\n    else if (isDocument(parent)) {\n        parent.contents = node;\n    }\n    else {\n        const pt = isAlias(parent) ? 'alias' : 'scalar';\n        throw new Error(`Cannot replace node with ${pt} parent`);\n    }\n}\n\nexport { visit, visitAsync };\n","import { isNode } from '../nodes/identity.js';\nimport { visit } from '../visit.js';\n\nconst escapeChars = {\n    '!': '%21',\n    ',': '%2C',\n    '[': '%5B',\n    ']': '%5D',\n    '{': '%7B',\n    '}': '%7D'\n};\nconst escapeTagName = (tn) => tn.replace(/[!,[\\]{}]/g, ch => escapeChars[ch]);\nclass Directives {\n    constructor(yaml, tags) {\n        /**\n         * The directives-end/doc-start marker `---`. If `null`, a marker may still be\n         * included in the document's stringified representation.\n         */\n        this.docStart = null;\n        /** The doc-end marker `...`.  */\n        this.docEnd = false;\n        this.yaml = Object.assign({}, Directives.defaultYaml, yaml);\n        this.tags = Object.assign({}, Directives.defaultTags, tags);\n    }\n    clone() {\n        const copy = new Directives(this.yaml, this.tags);\n        copy.docStart = this.docStart;\n        return copy;\n    }\n    /**\n     * During parsing, get a Directives instance for the current document and\n     * update the stream state according to the current version's spec.\n     */\n    atDocument() {\n        const res = new Directives(this.yaml, this.tags);\n        switch (this.yaml.version) {\n            case '1.1':\n                this.atNextDocument = true;\n                break;\n            case '1.2':\n                this.atNextDocument = false;\n                this.yaml = {\n                    explicit: Directives.defaultYaml.explicit,\n                    version: '1.2'\n                };\n                this.tags = Object.assign({}, Directives.defaultTags);\n                break;\n        }\n        return res;\n    }\n    /**\n     * @param onError - May be called even if the action was successful\n     * @returns `true` on success\n     */\n    add(line, onError) {\n        if (this.atNextDocument) {\n            this.yaml = { explicit: Directives.defaultYaml.explicit, version: '1.1' };\n            this.tags = Object.assign({}, Directives.defaultTags);\n            this.atNextDocument = false;\n        }\n        const parts = line.trim().split(/[ \\t]+/);\n        const name = parts.shift();\n        switch (name) {\n            case '%TAG': {\n                if (parts.length !== 2) {\n                    onError(0, '%TAG directive should contain exactly two parts');\n                    if (parts.length < 2)\n                        return false;\n                }\n                const [handle, prefix] = parts;\n                this.tags[handle] = prefix;\n                return true;\n            }\n            case '%YAML': {\n                this.yaml.explicit = true;\n                if (parts.length !== 1) {\n                    onError(0, '%YAML directive should contain exactly one part');\n                    return false;\n                }\n                const [version] = parts;\n                if (version === '1.1' || version === '1.2') {\n                    this.yaml.version = version;\n                    return true;\n                }\n                else {\n                    const isValid = /^\\d+\\.\\d+$/.test(version);\n                    onError(6, `Unsupported YAML version ${version}`, isValid);\n                    return false;\n                }\n            }\n            default:\n                onError(0, `Unknown directive ${name}`, true);\n                return false;\n        }\n    }\n    /**\n     * Resolves a tag, matching handles to those defined in %TAG directives.\n     *\n     * @returns Resolved tag, which may also be the non-specific tag `'!'` or a\n     *   `'!local'` tag, or `null` if unresolvable.\n     */\n    tagName(source, onError) {\n        if (source === '!')\n            return '!'; // non-specific tag\n        if (source[0] !== '!') {\n            onError(`Not a valid tag: ${source}`);\n            return null;\n        }\n        if (source[1] === '<') {\n            const verbatim = source.slice(2, -1);\n            if (verbatim === '!' || verbatim === '!!') {\n                onError(`Verbatim tags aren't resolved, so ${source} is invalid.`);\n                return null;\n            }\n            if (source[source.length - 1] !== '>')\n                onError('Verbatim tags must end with a >');\n            return verbatim;\n        }\n        const [, handle, suffix] = source.match(/^(.*!)([^!]*)$/s);\n        if (!suffix)\n            onError(`The ${source} tag has no suffix`);\n        const prefix = this.tags[handle];\n        if (prefix) {\n            try {\n                return prefix + decodeURIComponent(suffix);\n            }\n            catch (error) {\n                onError(String(error));\n                return null;\n            }\n        }\n        if (handle === '!')\n            return source; // local tag\n        onError(`Could not resolve tag: ${source}`);\n        return null;\n    }\n    /**\n     * Given a fully resolved tag, returns its printable string form,\n     * taking into account current tag prefixes and defaults.\n     */\n    tagString(tag) {\n        for (const [handle, prefix] of Object.entries(this.tags)) {\n            if (tag.startsWith(prefix))\n                return handle + escapeTagName(tag.substring(prefix.length));\n        }\n        return tag[0] === '!' ? tag : `!<${tag}>`;\n    }\n    toString(doc) {\n        const lines = this.yaml.explicit\n            ? [`%YAML ${this.yaml.version || '1.2'}`]\n            : [];\n        const tagEntries = Object.entries(this.tags);\n        let tagNames;\n        if (doc && tagEntries.length > 0 && isNode(doc.contents)) {\n            const tags = {};\n            visit(doc.contents, (_key, node) => {\n                if (isNode(node) && node.tag)\n                    tags[node.tag] = true;\n            });\n            tagNames = Object.keys(tags);\n        }\n        else\n            tagNames = [];\n        for (const [handle, prefix] of tagEntries) {\n            if (handle === '!!' && prefix === 'tag:yaml.org,2002:')\n                continue;\n            if (!doc || tagNames.some(tn => tn.startsWith(prefix)))\n                lines.push(`%TAG ${handle} ${prefix}`);\n        }\n        return lines.join('\\n');\n    }\n}\nDirectives.defaultYaml = { explicit: false, version: '1.2' };\nDirectives.defaultTags = { '!!': 'tag:yaml.org,2002:' };\n\nexport { Directives };\n","import { isScalar, isCollection } from '../nodes/identity.js';\nimport { visit } from '../visit.js';\n\n/**\n * Verify that the input string is a valid anchor.\n *\n * Will throw on errors.\n */\nfunction anchorIsValid(anchor) {\n    if (/[\\x00-\\x19\\s,[\\]{}]/.test(anchor)) {\n        const sa = JSON.stringify(anchor);\n        const msg = `Anchor must not contain whitespace or control characters: ${sa}`;\n        throw new Error(msg);\n    }\n    return true;\n}\nfunction anchorNames(root) {\n    const anchors = new Set();\n    visit(root, {\n        Value(_key, node) {\n            if (node.anchor)\n                anchors.add(node.anchor);\n        }\n    });\n    return anchors;\n}\n/** Find a new anchor name with the given `prefix` and a one-indexed suffix. */\nfunction findNewAnchor(prefix, exclude) {\n    for (let i = 1; true; ++i) {\n        const name = `${prefix}${i}`;\n        if (!exclude.has(name))\n            return name;\n    }\n}\nfunction createNodeAnchors(doc, prefix) {\n    const aliasObjects = [];\n    const sourceObjects = new Map();\n    let prevAnchors = null;\n    return {\n        onAnchor: (source) => {\n            aliasObjects.push(source);\n            if (!prevAnchors)\n                prevAnchors = anchorNames(doc);\n            const anchor = findNewAnchor(prefix, prevAnchors);\n            prevAnchors.add(anchor);\n            return anchor;\n        },\n        /**\n         * With circular references, the source node is only resolved after all\n         * of its child nodes are. This is why anchors are set only after all of\n         * the nodes have been created.\n         */\n        setAnchors: () => {\n            for (const source of aliasObjects) {\n                const ref = sourceObjects.get(source);\n                if (typeof ref === 'object' &&\n                    ref.anchor &&\n                    (isScalar(ref.node) || isCollection(ref.node))) {\n                    ref.node.anchor = ref.anchor;\n                }\n                else {\n                    const error = new Error('Failed to resolve repeated object (this should not happen)');\n                    error.source = source;\n                    throw error;\n                }\n            }\n        },\n        sourceObjects\n    };\n}\n\nexport { anchorIsValid, anchorNames, createNodeAnchors, findNewAnchor };\n","/**\n * Applies the JSON.parse reviver algorithm as defined in the ECMA-262 spec,\n * in section 24.5.1.1 \"Runtime Semantics: InternalizeJSONProperty\" of the\n * 2021 edition: https://tc39.es/ecma262/#sec-json.parse\n *\n * Includes extensions for handling Map and Set objects.\n */\nfunction applyReviver(reviver, obj, key, val) {\n    if (val && typeof val === 'object') {\n        if (Array.isArray(val)) {\n            for (let i = 0, len = val.length; i < len; ++i) {\n                const v0 = val[i];\n                const v1 = applyReviver(reviver, val, String(i), v0);\n                if (v1 === undefined)\n                    delete val[i];\n                else if (v1 !== v0)\n                    val[i] = v1;\n            }\n        }\n        else if (val instanceof Map) {\n            for (const k of Array.from(val.keys())) {\n                const v0 = val.get(k);\n                const v1 = applyReviver(reviver, val, k, v0);\n                if (v1 === undefined)\n                    val.delete(k);\n                else if (v1 !== v0)\n                    val.set(k, v1);\n            }\n        }\n        else if (val instanceof Set) {\n            for (const v0 of Array.from(val)) {\n                const v1 = applyReviver(reviver, val, v0, v0);\n                if (v1 === undefined)\n                    val.delete(v0);\n                else if (v1 !== v0) {\n                    val.delete(v0);\n                    val.add(v1);\n                }\n            }\n        }\n        else {\n            for (const [k, v0] of Object.entries(val)) {\n                const v1 = applyReviver(reviver, val, k, v0);\n                if (v1 === undefined)\n                    delete val[k];\n                else if (v1 !== v0)\n                    val[k] = v1;\n            }\n        }\n    }\n    return reviver.call(obj, key, val);\n}\n\nexport { applyReviver };\n","import { hasAnchor } from './identity.js';\n\n/**\n * Recursively convert any node or its contents to native JavaScript\n *\n * @param value - The input value\n * @param arg - If `value` defines a `toJSON()` method, use this\n *   as its first argument\n * @param ctx - Conversion context, originally set in Document#toJS(). If\n *   `{ keep: true }` is not set, output should be suitable for JSON\n *   stringification.\n */\nfunction toJS(value, arg, ctx) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    if (Array.isArray(value))\n        return value.map((v, i) => toJS(v, String(i), ctx));\n    if (value && typeof value.toJSON === 'function') {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n        if (!ctx || !hasAnchor(value))\n            return value.toJSON(arg, ctx);\n        const data = { aliasCount: 0, count: 1, res: undefined };\n        ctx.anchors.set(value, data);\n        ctx.onCreate = res => {\n            data.res = res;\n            delete ctx.onCreate;\n        };\n        const res = value.toJSON(arg, ctx);\n        if (ctx.onCreate)\n            ctx.onCreate(res);\n        return res;\n    }\n    if (typeof value === 'bigint' && !ctx?.keep)\n        return Number(value);\n    return value;\n}\n\nexport { toJS };\n","import { applyReviver } from '../doc/applyReviver.js';\nimport { NODE_TYPE, isDocument } from './identity.js';\nimport { toJS } from './toJS.js';\n\nclass NodeBase {\n    constructor(type) {\n        Object.defineProperty(this, NODE_TYPE, { value: type });\n    }\n    /** Create a copy of this node.  */\n    clone() {\n        const copy = Object.create(Object.getPrototypeOf(this), Object.getOwnPropertyDescriptors(this));\n        if (this.range)\n            copy.range = this.range.slice();\n        return copy;\n    }\n    /** A plain JavaScript representation of this node. */\n    toJS(doc, { mapAsMap, maxAliasCount, onAnchor, reviver } = {}) {\n        if (!isDocument(doc))\n            throw new TypeError('A document argument is required');\n        const ctx = {\n            anchors: new Map(),\n            doc,\n            keep: true,\n            mapAsMap: mapAsMap === true,\n            mapKeyWarned: false,\n            maxAliasCount: typeof maxAliasCount === 'number' ? maxAliasCount : 100\n        };\n        const res = toJS(this, '', ctx);\n        if (typeof onAnchor === 'function')\n            for (const { count, res } of ctx.anchors.values())\n                onAnchor(res, count);\n        return typeof reviver === 'function'\n            ? applyReviver(reviver, { '': res }, '', res)\n            : res;\n    }\n}\n\nexport { NodeBase };\n","import { anchorIsValid } from '../doc/anchors.js';\nimport { visit } from '../visit.js';\nimport { ALIAS, isAlias, isCollection, isPair } from './identity.js';\nimport { NodeBase } from './Node.js';\nimport { toJS } from './toJS.js';\n\nclass Alias extends NodeBase {\n    constructor(source) {\n        super(ALIAS);\n        this.source = source;\n        Object.defineProperty(this, 'tag', {\n            set() {\n                throw new Error('Alias nodes cannot have tags');\n            }\n        });\n    }\n    /**\n     * Resolve the value of this alias within `doc`, finding the last\n     * instance of the `source` anchor before this node.\n     */\n    resolve(doc) {\n        let found = undefined;\n        visit(doc, {\n            Node: (_key, node) => {\n                if (node === this)\n                    return visit.BREAK;\n                if (node.anchor === this.source)\n                    found = node;\n            }\n        });\n        return found;\n    }\n    toJSON(_arg, ctx) {\n        if (!ctx)\n            return { source: this.source };\n        const { anchors, doc, maxAliasCount } = ctx;\n        const source = this.resolve(doc);\n        if (!source) {\n            const msg = `Unresolved alias (the anchor must be set before the alias): ${this.source}`;\n            throw new ReferenceError(msg);\n        }\n        let data = anchors.get(source);\n        if (!data) {\n            // Resolve anchors for Node.prototype.toJS()\n            toJS(source, null, ctx);\n            data = anchors.get(source);\n        }\n        /* istanbul ignore if */\n        if (!data || data.res === undefined) {\n            const msg = 'This should not happen: Alias anchor was not resolved?';\n            throw new ReferenceError(msg);\n        }\n        if (maxAliasCount >= 0) {\n            data.count += 1;\n            if (data.aliasCount === 0)\n                data.aliasCount = getAliasCount(doc, source, anchors);\n            if (data.count * data.aliasCount > maxAliasCount) {\n                const msg = 'Excessive alias count indicates a resource exhaustion attack';\n                throw new ReferenceError(msg);\n            }\n        }\n        return data.res;\n    }\n    toString(ctx, _onComment, _onChompKeep) {\n        const src = `*${this.source}`;\n        if (ctx) {\n            anchorIsValid(this.source);\n            if (ctx.options.verifyAliasOrder && !ctx.anchors.has(this.source)) {\n                const msg = `Unresolved alias (the anchor must be set before the alias): ${this.source}`;\n                throw new Error(msg);\n            }\n            if (ctx.implicitKey)\n                return `${src} `;\n        }\n        return src;\n    }\n}\nfunction getAliasCount(doc, node, anchors) {\n    if (isAlias(node)) {\n        const source = node.resolve(doc);\n        const anchor = anchors && source && anchors.get(source);\n        return anchor ? anchor.count * anchor.aliasCount : 0;\n    }\n    else if (isCollection(node)) {\n        let count = 0;\n        for (const item of node.items) {\n            const c = getAliasCount(doc, item, anchors);\n            if (c > count)\n                count = c;\n        }\n        return count;\n    }\n    else if (isPair(node)) {\n        const kc = getAliasCount(doc, node.key, anchors);\n        const vc = getAliasCount(doc, node.value, anchors);\n        return Math.max(kc, vc);\n    }\n    return 1;\n}\n\nexport { Alias };\n","import { SCALAR } from './identity.js';\nimport { NodeBase } from './Node.js';\nimport { toJS } from './toJS.js';\n\nconst isScalarValue = (value) => !value || (typeof value !== 'function' && typeof value !== 'object');\nclass Scalar extends NodeBase {\n    constructor(value) {\n        super(SCALAR);\n        this.value = value;\n    }\n    toJSON(arg, ctx) {\n        return ctx?.keep ? this.value : toJS(this.value, arg, ctx);\n    }\n    toString() {\n        return String(this.value);\n    }\n}\nScalar.BLOCK_FOLDED = 'BLOCK_FOLDED';\nScalar.BLOCK_LITERAL = 'BLOCK_LITERAL';\nScalar.PLAIN = 'PLAIN';\nScalar.QUOTE_DOUBLE = 'QUOTE_DOUBLE';\nScalar.QUOTE_SINGLE = 'QUOTE_SINGLE';\n\nexport { Scalar, isScalarValue };\n","import { Alias } from '../nodes/Alias.js';\nimport { isNode, isPair, MAP, SEQ, isDocument } from '../nodes/identity.js';\nimport { Scalar } from '../nodes/Scalar.js';\n\nconst defaultTagPrefix = 'tag:yaml.org,2002:';\nfunction findTagObject(value, tagName, tags) {\n    if (tagName) {\n        const match = tags.filter(t => t.tag === tagName);\n        const tagObj = match.find(t => !t.format) ?? match[0];\n        if (!tagObj)\n            throw new Error(`Tag ${tagName} not found`);\n        return tagObj;\n    }\n    return tags.find(t => t.identify?.(value) && !t.format);\n}\nfunction createNode(value, tagName, ctx) {\n    if (isDocument(value))\n        value = value.contents;\n    if (isNode(value))\n        return value;\n    if (isPair(value)) {\n        const map = ctx.schema[MAP].createNode?.(ctx.schema, null, ctx);\n        map.items.push(value);\n        return map;\n    }\n    if (value instanceof String ||\n        value instanceof Number ||\n        value instanceof Boolean ||\n        (typeof BigInt !== 'undefined' && value instanceof BigInt) // not supported everywhere\n    ) {\n        // https://tc39.es/ecma262/#sec-serializejsonproperty\n        value = value.valueOf();\n    }\n    const { aliasDuplicateObjects, onAnchor, onTagObj, schema, sourceObjects } = ctx;\n    // Detect duplicate references to the same object & use Alias nodes for all\n    // after first. The `ref` wrapper allows for circular references to resolve.\n    let ref = undefined;\n    if (aliasDuplicateObjects && value && typeof value === 'object') {\n        ref = sourceObjects.get(value);\n        if (ref) {\n            if (!ref.anchor)\n                ref.anchor = onAnchor(value);\n            return new Alias(ref.anchor);\n        }\n        else {\n            ref = { anchor: null, node: null };\n            sourceObjects.set(value, ref);\n        }\n    }\n    if (tagName?.startsWith('!!'))\n        tagName = defaultTagPrefix + tagName.slice(2);\n    let tagObj = findTagObject(value, tagName, schema.tags);\n    if (!tagObj) {\n        if (value && typeof value.toJSON === 'function') {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n            value = value.toJSON();\n        }\n        if (!value || typeof value !== 'object') {\n            const node = new Scalar(value);\n            if (ref)\n                ref.node = node;\n            return node;\n        }\n        tagObj =\n            value instanceof Map\n                ? schema[MAP]\n                : Symbol.iterator in Object(value)\n                    ? schema[SEQ]\n                    : schema[MAP];\n    }\n    if (onTagObj) {\n        onTagObj(tagObj);\n        delete ctx.onTagObj;\n    }\n    const node = tagObj?.createNode\n        ? tagObj.createNode(ctx.schema, value, ctx)\n        : typeof tagObj?.nodeClass?.from === 'function'\n            ? tagObj.nodeClass.from(ctx.schema, value, ctx)\n            : new Scalar(value);\n    if (tagName)\n        node.tag = tagName;\n    else if (!tagObj.default)\n        node.tag = tagObj.tag;\n    if (ref)\n        ref.node = node;\n    return node;\n}\n\nexport { createNode };\n","import { createNode } from '../doc/createNode.js';\nimport { isNode, isPair, isCollection, isScalar } from './identity.js';\nimport { NodeBase } from './Node.js';\n\nfunction collectionFromPath(schema, path, value) {\n    let v = value;\n    for (let i = path.length - 1; i >= 0; --i) {\n        const k = path[i];\n        if (typeof k === 'number' && Number.isInteger(k) && k >= 0) {\n            const a = [];\n            a[k] = v;\n            v = a;\n        }\n        else {\n            v = new Map([[k, v]]);\n        }\n    }\n    return createNode(v, undefined, {\n        aliasDuplicateObjects: false,\n        keepUndefined: false,\n        onAnchor: () => {\n            throw new Error('This should not happen, please report a bug.');\n        },\n        schema,\n        sourceObjects: new Map()\n    });\n}\n// Type guard is intentionally a little wrong so as to be more useful,\n// as it does not cover untypable empty non-string iterables (e.g. []).\nconst isEmptyPath = (path) => path == null ||\n    (typeof path === 'object' && !!path[Symbol.iterator]().next().done);\nclass Collection extends NodeBase {\n    constructor(type, schema) {\n        super(type);\n        Object.defineProperty(this, 'schema', {\n            value: schema,\n            configurable: true,\n            enumerable: false,\n            writable: true\n        });\n    }\n    /**\n     * Create a copy of this collection.\n     *\n     * @param schema - If defined, overwrites the original's schema\n     */\n    clone(schema) {\n        const copy = Object.create(Object.getPrototypeOf(this), Object.getOwnPropertyDescriptors(this));\n        if (schema)\n            copy.schema = schema;\n        copy.items = copy.items.map(it => isNode(it) || isPair(it) ? it.clone(schema) : it);\n        if (this.range)\n            copy.range = this.range.slice();\n        return copy;\n    }\n    /**\n     * Adds a value to the collection. For `!!map` and `!!omap` the value must\n     * be a Pair instance or a `{ key, value }` object, which may not have a key\n     * that already exists in the map.\n     */\n    addIn(path, value) {\n        if (isEmptyPath(path))\n            this.add(value);\n        else {\n            const [key, ...rest] = path;\n            const node = this.get(key, true);\n            if (isCollection(node))\n                node.addIn(rest, value);\n            else if (node === undefined && this.schema)\n                this.set(key, collectionFromPath(this.schema, rest, value));\n            else\n                throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);\n        }\n    }\n    /**\n     * Removes a value from the collection.\n     * @returns `true` if the item was found and removed.\n     */\n    deleteIn(path) {\n        const [key, ...rest] = path;\n        if (rest.length === 0)\n            return this.delete(key);\n        const node = this.get(key, true);\n        if (isCollection(node))\n            return node.deleteIn(rest);\n        else\n            throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);\n    }\n    /**\n     * Returns item at `key`, or `undefined` if not found. By default unwraps\n     * scalar values from their surrounding node; to disable set `keepScalar` to\n     * `true` (collections are always returned intact).\n     */\n    getIn(path, keepScalar) {\n        const [key, ...rest] = path;\n        const node = this.get(key, true);\n        if (rest.length === 0)\n            return !keepScalar && isScalar(node) ? node.value : node;\n        else\n            return isCollection(node) ? node.getIn(rest, keepScalar) : undefined;\n    }\n    hasAllNullValues(allowScalar) {\n        return this.items.every(node => {\n            if (!isPair(node))\n                return false;\n            const n = node.value;\n            return (n == null ||\n                (allowScalar &&\n                    isScalar(n) &&\n                    n.value == null &&\n                    !n.commentBefore &&\n                    !n.comment &&\n                    !n.tag));\n        });\n    }\n    /**\n     * Checks if the collection includes a value with the key `key`.\n     */\n    hasIn(path) {\n        const [key, ...rest] = path;\n        if (rest.length === 0)\n            return this.has(key);\n        const node = this.get(key, true);\n        return isCollection(node) ? node.hasIn(rest) : false;\n    }\n    /**\n     * Sets a value in this collection. For `!!set`, `value` needs to be a\n     * boolean to add/remove the item from the set.\n     */\n    setIn(path, value) {\n        const [key, ...rest] = path;\n        if (rest.length === 0) {\n            this.set(key, value);\n        }\n        else {\n            const node = this.get(key, true);\n            if (isCollection(node))\n                node.setIn(rest, value);\n            else if (node === undefined && this.schema)\n                this.set(key, collectionFromPath(this.schema, rest, value));\n            else\n                throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);\n        }\n    }\n}\n\nexport { Collection, collectionFromPath, isEmptyPath };\n","/**\n * Stringifies a comment.\n *\n * Empty comment lines are left empty,\n * lines consisting of a single space are replaced by `#`,\n * and all other lines are prefixed with a `#`.\n */\nconst stringifyComment = (str) => str.replace(/^(?!$)(?: $)?/gm, '#');\nfunction indentComment(comment, indent) {\n    if (/^\\n+$/.test(comment))\n        return comment.substring(1);\n    return indent ? comment.replace(/^(?! *$)/gm, indent) : comment;\n}\nconst lineComment = (str, indent, comment) => str.endsWith('\\n')\n    ? indentComment(comment, indent)\n    : comment.includes('\\n')\n        ? '\\n' + indentComment(comment, indent)\n        : (str.endsWith(' ') ? '' : ' ') + comment;\n\nexport { indentComment, lineComment, stringifyComment };\n","const FOLD_FLOW = 'flow';\nconst FOLD_BLOCK = 'block';\nconst FOLD_QUOTED = 'quoted';\n/**\n * Tries to keep input at up to `lineWidth` characters, splitting only on spaces\n * not followed by newlines or spaces unless `mode` is `'quoted'`. Lines are\n * terminated with `\\n` and started with `indent`.\n */\nfunction foldFlowLines(text, indent, mode = 'flow', { indentAtStart, lineWidth = 80, minContentWidth = 20, onFold, onOverflow } = {}) {\n    if (!lineWidth || lineWidth < 0)\n        return text;\n    if (lineWidth < minContentWidth)\n        minContentWidth = 0;\n    const endStep = Math.max(1 + minContentWidth, 1 + lineWidth - indent.length);\n    if (text.length <= endStep)\n        return text;\n    const folds = [];\n    const escapedFolds = {};\n    let end = lineWidth - indent.length;\n    if (typeof indentAtStart === 'number') {\n        if (indentAtStart > lineWidth - Math.max(2, minContentWidth))\n            folds.push(0);\n        else\n            end = lineWidth - indentAtStart;\n    }\n    let split = undefined;\n    let prev = undefined;\n    let overflow = false;\n    let i = -1;\n    let escStart = -1;\n    let escEnd = -1;\n    if (mode === FOLD_BLOCK) {\n        i = consumeMoreIndentedLines(text, i, indent.length);\n        if (i !== -1)\n            end = i + endStep;\n    }\n    for (let ch; (ch = text[(i += 1)]);) {\n        if (mode === FOLD_QUOTED && ch === '\\\\') {\n            escStart = i;\n            switch (text[i + 1]) {\n                case 'x':\n                    i += 3;\n                    break;\n                case 'u':\n                    i += 5;\n                    break;\n                case 'U':\n                    i += 9;\n                    break;\n                default:\n                    i += 1;\n            }\n            escEnd = i;\n        }\n        if (ch === '\\n') {\n            if (mode === FOLD_BLOCK)\n                i = consumeMoreIndentedLines(text, i, indent.length);\n            end = i + indent.length + endStep;\n            split = undefined;\n        }\n        else {\n            if (ch === ' ' &&\n                prev &&\n                prev !== ' ' &&\n                prev !== '\\n' &&\n                prev !== '\\t') {\n                // space surrounded by non-space can be replaced with newline + indent\n                const next = text[i + 1];\n                if (next && next !== ' ' && next !== '\\n' && next !== '\\t')\n                    split = i;\n            }\n            if (i >= end) {\n                if (split) {\n                    folds.push(split);\n                    end = split + endStep;\n                    split = undefined;\n                }\n                else if (mode === FOLD_QUOTED) {\n                    // white-space collected at end may stretch past lineWidth\n                    while (prev === ' ' || prev === '\\t') {\n                        prev = ch;\n                        ch = text[(i += 1)];\n                        overflow = true;\n                    }\n                    // Account for newline escape, but don't break preceding escape\n                    const j = i > escEnd + 1 ? i - 2 : escStart - 1;\n                    // Bail out if lineWidth & minContentWidth are shorter than an escape string\n                    if (escapedFolds[j])\n                        return text;\n                    folds.push(j);\n                    escapedFolds[j] = true;\n                    end = j + endStep;\n                    split = undefined;\n                }\n                else {\n                    overflow = true;\n                }\n            }\n        }\n        prev = ch;\n    }\n    if (overflow && onOverflow)\n        onOverflow();\n    if (folds.length === 0)\n        return text;\n    if (onFold)\n        onFold();\n    let res = text.slice(0, folds[0]);\n    for (let i = 0; i < folds.length; ++i) {\n        const fold = folds[i];\n        const end = folds[i + 1] || text.length;\n        if (fold === 0)\n            res = `\\n${indent}${text.slice(0, end)}`;\n        else {\n            if (mode === FOLD_QUOTED && escapedFolds[fold])\n                res += `${text[fold]}\\\\`;\n            res += `\\n${indent}${text.slice(fold + 1, end)}`;\n        }\n    }\n    return res;\n}\n/**\n * Presumes `i + 1` is at the start of a line\n * @returns index of last newline in more-indented block\n */\nfunction consumeMoreIndentedLines(text, i, indent) {\n    let end = i;\n    let start = i + 1;\n    let ch = text[start];\n    while (ch === ' ' || ch === '\\t') {\n        if (i < start + indent) {\n            ch = text[++i];\n        }\n        else {\n            do {\n                ch = text[++i];\n            } while (ch && ch !== '\\n');\n            end = i;\n            start = i + 1;\n            ch = text[start];\n        }\n    }\n    return end;\n}\n\nexport { FOLD_BLOCK, FOLD_FLOW, FOLD_QUOTED, foldFlowLines };\n","import { Scalar } from '../nodes/Scalar.js';\nimport { foldFlowLines, FOLD_QUOTED, FOLD_FLOW, FOLD_BLOCK } from './foldFlowLines.js';\n\nconst getFoldOptions = (ctx, isBlock) => ({\n    indentAtStart: isBlock ? ctx.indent.length : ctx.indentAtStart,\n    lineWidth: ctx.options.lineWidth,\n    minContentWidth: ctx.options.minContentWidth\n});\n// Also checks for lines starting with %, as parsing the output as YAML 1.1 will\n// presume that's starting a new document.\nconst containsDocumentMarker = (str) => /^(%|---|\\.\\.\\.)/m.test(str);\nfunction lineLengthOverLimit(str, lineWidth, indentLength) {\n    if (!lineWidth || lineWidth < 0)\n        return false;\n    const limit = lineWidth - indentLength;\n    const strLen = str.length;\n    if (strLen <= limit)\n        return false;\n    for (let i = 0, start = 0; i < strLen; ++i) {\n        if (str[i] === '\\n') {\n            if (i - start > limit)\n                return true;\n            start = i + 1;\n            if (strLen - start <= limit)\n                return false;\n        }\n    }\n    return true;\n}\nfunction doubleQuotedString(value, ctx) {\n    const json = JSON.stringify(value);\n    if (ctx.options.doubleQuotedAsJSON)\n        return json;\n    const { implicitKey } = ctx;\n    const minMultiLineLength = ctx.options.doubleQuotedMinMultiLineLength;\n    const indent = ctx.indent || (containsDocumentMarker(value) ? '  ' : '');\n    let str = '';\n    let start = 0;\n    for (let i = 0, ch = json[i]; ch; ch = json[++i]) {\n        if (ch === ' ' && json[i + 1] === '\\\\' && json[i + 2] === 'n') {\n            // space before newline needs to be escaped to not be folded\n            str += json.slice(start, i) + '\\\\ ';\n            i += 1;\n            start = i;\n            ch = '\\\\';\n        }\n        if (ch === '\\\\')\n            switch (json[i + 1]) {\n                case 'u':\n                    {\n                        str += json.slice(start, i);\n                        const code = json.substr(i + 2, 4);\n                        switch (code) {\n                            case '0000':\n                                str += '\\\\0';\n                                break;\n                            case '0007':\n                                str += '\\\\a';\n                                break;\n                            case '000b':\n                                str += '\\\\v';\n                                break;\n                            case '001b':\n                                str += '\\\\e';\n                                break;\n                            case '0085':\n                                str += '\\\\N';\n                                break;\n                            case '00a0':\n                                str += '\\\\_';\n                                break;\n                            case '2028':\n                                str += '\\\\L';\n                                break;\n                            case '2029':\n                                str += '\\\\P';\n                                break;\n                            default:\n                                if (code.substr(0, 2) === '00')\n                                    str += '\\\\x' + code.substr(2);\n                                else\n                                    str += json.substr(i, 6);\n                        }\n                        i += 5;\n                        start = i + 1;\n                    }\n                    break;\n                case 'n':\n                    if (implicitKey ||\n                        json[i + 2] === '\"' ||\n                        json.length < minMultiLineLength) {\n                        i += 1;\n                    }\n                    else {\n                        // folding will eat first newline\n                        str += json.slice(start, i) + '\\n\\n';\n                        while (json[i + 2] === '\\\\' &&\n                            json[i + 3] === 'n' &&\n                            json[i + 4] !== '\"') {\n                            str += '\\n';\n                            i += 2;\n                        }\n                        str += indent;\n                        // space after newline needs to be escaped to not be folded\n                        if (json[i + 2] === ' ')\n                            str += '\\\\';\n                        i += 1;\n                        start = i + 1;\n                    }\n                    break;\n                default:\n                    i += 1;\n            }\n    }\n    str = start ? str + json.slice(start) : json;\n    return implicitKey\n        ? str\n        : foldFlowLines(str, indent, FOLD_QUOTED, getFoldOptions(ctx, false));\n}\nfunction singleQuotedString(value, ctx) {\n    if (ctx.options.singleQuote === false ||\n        (ctx.implicitKey && value.includes('\\n')) ||\n        /[ \\t]\\n|\\n[ \\t]/.test(value) // single quoted string can't have leading or trailing whitespace around newline\n    )\n        return doubleQuotedString(value, ctx);\n    const indent = ctx.indent || (containsDocumentMarker(value) ? '  ' : '');\n    const res = \"'\" + value.replace(/'/g, \"''\").replace(/\\n+/g, `$&\\n${indent}`) + \"'\";\n    return ctx.implicitKey\n        ? res\n        : foldFlowLines(res, indent, FOLD_FLOW, getFoldOptions(ctx, false));\n}\nfunction quotedString(value, ctx) {\n    const { singleQuote } = ctx.options;\n    let qs;\n    if (singleQuote === false)\n        qs = doubleQuotedString;\n    else {\n        const hasDouble = value.includes('\"');\n        const hasSingle = value.includes(\"'\");\n        if (hasDouble && !hasSingle)\n            qs = singleQuotedString;\n        else if (hasSingle && !hasDouble)\n            qs = doubleQuotedString;\n        else\n            qs = singleQuote ? singleQuotedString : doubleQuotedString;\n    }\n    return qs(value, ctx);\n}\n// The negative lookbehind avoids a polynomial search,\n// but isn't supported yet on Safari: https://caniuse.com/js-regexp-lookbehind\nlet blockEndNewlines;\ntry {\n    blockEndNewlines = new RegExp('(^|(?<!\\n))\\n+(?!\\n|$)', 'g');\n}\ncatch {\n    blockEndNewlines = /\\n+(?!\\n|$)/g;\n}\nfunction blockString({ comment, type, value }, ctx, onComment, onChompKeep) {\n    const { blockQuote, commentString, lineWidth } = ctx.options;\n    // 1. Block can't end in whitespace unless the last line is non-empty.\n    // 2. Strings consisting of only whitespace are best rendered explicitly.\n    if (!blockQuote || /\\n[\\t ]+$/.test(value) || /^\\s*$/.test(value)) {\n        return quotedString(value, ctx);\n    }\n    const indent = ctx.indent ||\n        (ctx.forceBlockIndent || containsDocumentMarker(value) ? '  ' : '');\n    const literal = blockQuote === 'literal'\n        ? true\n        : blockQuote === 'folded' || type === Scalar.BLOCK_FOLDED\n            ? false\n            : type === Scalar.BLOCK_LITERAL\n                ? true\n                : !lineLengthOverLimit(value, lineWidth, indent.length);\n    if (!value)\n        return literal ? '|\\n' : '>\\n';\n    // determine chomping from whitespace at value end\n    let chomp;\n    let endStart;\n    for (endStart = value.length; endStart > 0; --endStart) {\n        const ch = value[endStart - 1];\n        if (ch !== '\\n' && ch !== '\\t' && ch !== ' ')\n            break;\n    }\n    let end = value.substring(endStart);\n    const endNlPos = end.indexOf('\\n');\n    if (endNlPos === -1) {\n        chomp = '-'; // strip\n    }\n    else if (value === end || endNlPos !== end.length - 1) {\n        chomp = '+'; // keep\n        if (onChompKeep)\n            onChompKeep();\n    }\n    else {\n        chomp = ''; // clip\n    }\n    if (end) {\n        value = value.slice(0, -end.length);\n        if (end[end.length - 1] === '\\n')\n            end = end.slice(0, -1);\n        end = end.replace(blockEndNewlines, `$&${indent}`);\n    }\n    // determine indent indicator from whitespace at value start\n    let startWithSpace = false;\n    let startEnd;\n    let startNlPos = -1;\n    for (startEnd = 0; startEnd < value.length; ++startEnd) {\n        const ch = value[startEnd];\n        if (ch === ' ')\n            startWithSpace = true;\n        else if (ch === '\\n')\n            startNlPos = startEnd;\n        else\n            break;\n    }\n    let start = value.substring(0, startNlPos < startEnd ? startNlPos + 1 : startEnd);\n    if (start) {\n        value = value.substring(start.length);\n        start = start.replace(/\\n+/g, `$&${indent}`);\n    }\n    const indentSize = indent ? '2' : '1'; // root is at -1\n    let header = (literal ? '|' : '>') + (startWithSpace ? indentSize : '') + chomp;\n    if (comment) {\n        header += ' ' + commentString(comment.replace(/ ?[\\r\\n]+/g, ' '));\n        if (onComment)\n            onComment();\n    }\n    if (literal) {\n        value = value.replace(/\\n+/g, `$&${indent}`);\n        return `${header}\\n${indent}${start}${value}${end}`;\n    }\n    value = value\n        .replace(/\\n+/g, '\\n$&')\n        .replace(/(?:^|\\n)([\\t ].*)(?:([\\n\\t ]*)\\n(?![\\n\\t ]))?/g, '$1$2') // more-indented lines aren't folded\n        //                ^ more-ind. ^ empty     ^ capture next empty lines only at end of indent\n        .replace(/\\n+/g, `$&${indent}`);\n    const body = foldFlowLines(`${start}${value}${end}`, indent, FOLD_BLOCK, getFoldOptions(ctx, true));\n    return `${header}\\n${indent}${body}`;\n}\nfunction plainString(item, ctx, onComment, onChompKeep) {\n    const { type, value } = item;\n    const { actualString, implicitKey, indent, indentStep, inFlow } = ctx;\n    if ((implicitKey && value.includes('\\n')) ||\n        (inFlow && /[[\\]{},]/.test(value))) {\n        return quotedString(value, ctx);\n    }\n    if (!value ||\n        /^[\\n\\t ,[\\]{}#&*!|>'\"%@`]|^[?-]$|^[?-][ \\t]|[\\n:][ \\t]|[ \\t]\\n|[\\n\\t ]#|[\\n\\t :]$/.test(value)) {\n        // not allowed:\n        // - empty string, '-' or '?'\n        // - start with an indicator character (except [?:-]) or /[?-] /\n        // - '\\n ', ': ' or ' \\n' anywhere\n        // - '#' not preceded by a non-space char\n        // - end with ' ' or ':'\n        return implicitKey || inFlow || !value.includes('\\n')\n            ? quotedString(value, ctx)\n            : blockString(item, ctx, onComment, onChompKeep);\n    }\n    if (!implicitKey &&\n        !inFlow &&\n        type !== Scalar.PLAIN &&\n        value.includes('\\n')) {\n        // Where allowed & type not set explicitly, prefer block style for multiline strings\n        return blockString(item, ctx, onComment, onChompKeep);\n    }\n    if (containsDocumentMarker(value)) {\n        if (indent === '') {\n            ctx.forceBlockIndent = true;\n            return blockString(item, ctx, onComment, onChompKeep);\n        }\n        else if (implicitKey && indent === indentStep) {\n            return quotedString(value, ctx);\n        }\n    }\n    const str = value.replace(/\\n+/g, `$&\\n${indent}`);\n    // Verify that output will be parsed as a string, as e.g. plain numbers and\n    // booleans get parsed with those types in v1.2 (e.g. '42', 'true' & '0.9e-3'),\n    // and others in v1.1.\n    if (actualString) {\n        const test = (tag) => tag.default && tag.tag !== 'tag:yaml.org,2002:str' && tag.test?.test(str);\n        const { compat, tags } = ctx.doc.schema;\n        if (tags.some(test) || compat?.some(test))\n            return quotedString(value, ctx);\n    }\n    return implicitKey\n        ? str\n        : foldFlowLines(str, indent, FOLD_FLOW, getFoldOptions(ctx, false));\n}\nfunction stringifyString(item, ctx, onComment, onChompKeep) {\n    const { implicitKey, inFlow } = ctx;\n    const ss = typeof item.value === 'string'\n        ? item\n        : Object.assign({}, item, { value: String(item.value) });\n    let { type } = item;\n    if (type !== Scalar.QUOTE_DOUBLE) {\n        // force double quotes on control characters & unpaired surrogates\n        if (/[\\x00-\\x08\\x0b-\\x1f\\x7f-\\x9f\\u{D800}-\\u{DFFF}]/u.test(ss.value))\n            type = Scalar.QUOTE_DOUBLE;\n    }\n    const _stringify = (_type) => {\n        switch (_type) {\n            case Scalar.BLOCK_FOLDED:\n            case Scalar.BLOCK_LITERAL:\n                return implicitKey || inFlow\n                    ? quotedString(ss.value, ctx) // blocks are not valid inside flow containers\n                    : blockString(ss, ctx, onComment, onChompKeep);\n            case Scalar.QUOTE_DOUBLE:\n                return doubleQuotedString(ss.value, ctx);\n            case Scalar.QUOTE_SINGLE:\n                return singleQuotedString(ss.value, ctx);\n            case Scalar.PLAIN:\n                return plainString(ss, ctx, onComment, onChompKeep);\n            default:\n                return null;\n        }\n    };\n    let res = _stringify(type);\n    if (res === null) {\n        const { defaultKeyType, defaultStringType } = ctx.options;\n        const t = (implicitKey && defaultKeyType) || defaultStringType;\n        res = _stringify(t);\n        if (res === null)\n            throw new Error(`Unsupported default string type ${t}`);\n    }\n    return res;\n}\n\nexport { stringifyString };\n","import { anchorIsValid } from '../doc/anchors.js';\nimport { isPair, isAlias, isNode, isScalar, isCollection } from '../nodes/identity.js';\nimport { stringifyComment } from './stringifyComment.js';\nimport { stringifyString } from './stringifyString.js';\n\nfunction createStringifyContext(doc, options) {\n    const opt = Object.assign({\n        blockQuote: true,\n        commentString: stringifyComment,\n        defaultKeyType: null,\n        defaultStringType: 'PLAIN',\n        directives: null,\n        doubleQuotedAsJSON: false,\n        doubleQuotedMinMultiLineLength: 40,\n        falseStr: 'false',\n        flowCollectionPadding: true,\n        indentSeq: true,\n        lineWidth: 80,\n        minContentWidth: 20,\n        nullStr: 'null',\n        simpleKeys: false,\n        singleQuote: null,\n        trueStr: 'true',\n        verifyAliasOrder: true\n    }, doc.schema.toStringOptions, options);\n    let inFlow;\n    switch (opt.collectionStyle) {\n        case 'block':\n            inFlow = false;\n            break;\n        case 'flow':\n            inFlow = true;\n            break;\n        default:\n            inFlow = null;\n    }\n    return {\n        anchors: new Set(),\n        doc,\n        flowCollectionPadding: opt.flowCollectionPadding ? ' ' : '',\n        indent: '',\n        indentStep: typeof opt.indent === 'number' ? ' '.repeat(opt.indent) : '  ',\n        inFlow,\n        options: opt\n    };\n}\nfunction getTagObject(tags, item) {\n    if (item.tag) {\n        const match = tags.filter(t => t.tag === item.tag);\n        if (match.length > 0)\n            return match.find(t => t.format === item.format) ?? match[0];\n    }\n    let tagObj = undefined;\n    let obj;\n    if (isScalar(item)) {\n        obj = item.value;\n        const match = tags.filter(t => t.identify?.(obj));\n        tagObj =\n            match.find(t => t.format === item.format) ?? match.find(t => !t.format);\n    }\n    else {\n        obj = item;\n        tagObj = tags.find(t => t.nodeClass && obj instanceof t.nodeClass);\n    }\n    if (!tagObj) {\n        const name = obj?.constructor?.name ?? typeof obj;\n        throw new Error(`Tag not resolved for ${name} value`);\n    }\n    return tagObj;\n}\n// needs to be called before value stringifier to allow for circular anchor refs\nfunction stringifyProps(node, tagObj, { anchors, doc }) {\n    if (!doc.directives)\n        return '';\n    const props = [];\n    const anchor = (isScalar(node) || isCollection(node)) && node.anchor;\n    if (anchor && anchorIsValid(anchor)) {\n        anchors.add(anchor);\n        props.push(`&${anchor}`);\n    }\n    const tag = node.tag ? node.tag : tagObj.default ? null : tagObj.tag;\n    if (tag)\n        props.push(doc.directives.tagString(tag));\n    return props.join(' ');\n}\nfunction stringify(item, ctx, onComment, onChompKeep) {\n    if (isPair(item))\n        return item.toString(ctx, onComment, onChompKeep);\n    if (isAlias(item)) {\n        if (ctx.doc.directives)\n            return item.toString(ctx);\n        if (ctx.resolvedAliases?.has(item)) {\n            throw new TypeError(`Cannot stringify circular structure without alias nodes`);\n        }\n        else {\n            if (ctx.resolvedAliases)\n                ctx.resolvedAliases.add(item);\n            else\n                ctx.resolvedAliases = new Set([item]);\n            item = item.resolve(ctx.doc);\n        }\n    }\n    let tagObj = undefined;\n    const node = isNode(item)\n        ? item\n        : ctx.doc.createNode(item, { onTagObj: o => (tagObj = o) });\n    if (!tagObj)\n        tagObj = getTagObject(ctx.doc.schema.tags, node);\n    const props = stringifyProps(node, tagObj, ctx);\n    if (props.length > 0)\n        ctx.indentAtStart = (ctx.indentAtStart ?? 0) + props.length + 1;\n    const str = typeof tagObj.stringify === 'function'\n        ? tagObj.stringify(node, ctx, onComment, onChompKeep)\n        : isScalar(node)\n            ? stringifyString(node, ctx, onComment, onChompKeep)\n            : node.toString(ctx, onComment, onChompKeep);\n    if (!props)\n        return str;\n    return isScalar(node) || str[0] === '{' || str[0] === '['\n        ? `${props} ${str}`\n        : `${props}\\n${ctx.indent}${str}`;\n}\n\nexport { createStringifyContext, stringify };\n","import { isCollection, isNode, isScalar, isSeq } from '../nodes/identity.js';\nimport { Scalar } from '../nodes/Scalar.js';\nimport { stringify } from './stringify.js';\nimport { lineComment, indentComment } from './stringifyComment.js';\n\nfunction stringifyPair({ key, value }, ctx, onComment, onChompKeep) {\n    const { allNullValues, doc, indent, indentStep, options: { commentString, indentSeq, simpleKeys } } = ctx;\n    let keyComment = (isNode(key) && key.comment) || null;\n    if (simpleKeys) {\n        if (keyComment) {\n            throw new Error('With simple keys, key nodes cannot have comments');\n        }\n        if (isCollection(key) || (!isNode(key) && typeof key === 'object')) {\n            const msg = 'With simple keys, collection cannot be used as a key value';\n            throw new Error(msg);\n        }\n    }\n    let explicitKey = !simpleKeys &&\n        (!key ||\n            (keyComment && value == null && !ctx.inFlow) ||\n            isCollection(key) ||\n            (isScalar(key)\n                ? key.type === Scalar.BLOCK_FOLDED || key.type === Scalar.BLOCK_LITERAL\n                : typeof key === 'object'));\n    ctx = Object.assign({}, ctx, {\n        allNullValues: false,\n        implicitKey: !explicitKey && (simpleKeys || !allNullValues),\n        indent: indent + indentStep\n    });\n    let keyCommentDone = false;\n    let chompKeep = false;\n    let str = stringify(key, ctx, () => (keyCommentDone = true), () => (chompKeep = true));\n    if (!explicitKey && !ctx.inFlow && str.length > 1024) {\n        if (simpleKeys)\n            throw new Error('With simple keys, single line scalar must not span more than 1024 characters');\n        explicitKey = true;\n    }\n    if (ctx.inFlow) {\n        if (allNullValues || value == null) {\n            if (keyCommentDone && onComment)\n                onComment();\n            return str === '' ? '?' : explicitKey ? `? ${str}` : str;\n        }\n    }\n    else if ((allNullValues && !simpleKeys) || (value == null && explicitKey)) {\n        str = `? ${str}`;\n        if (keyComment && !keyCommentDone) {\n            str += lineComment(str, ctx.indent, commentString(keyComment));\n        }\n        else if (chompKeep && onChompKeep)\n            onChompKeep();\n        return str;\n    }\n    if (keyCommentDone)\n        keyComment = null;\n    if (explicitKey) {\n        if (keyComment)\n            str += lineComment(str, ctx.indent, commentString(keyComment));\n        str = `? ${str}\\n${indent}:`;\n    }\n    else {\n        str = `${str}:`;\n        if (keyComment)\n            str += lineComment(str, ctx.indent, commentString(keyComment));\n    }\n    let vsb, vcb, valueComment;\n    if (isNode(value)) {\n        vsb = !!value.spaceBefore;\n        vcb = value.commentBefore;\n        valueComment = value.comment;\n    }\n    else {\n        vsb = false;\n        vcb = null;\n        valueComment = null;\n        if (value && typeof value === 'object')\n            value = doc.createNode(value);\n    }\n    ctx.implicitKey = false;\n    if (!explicitKey && !keyComment && isScalar(value))\n        ctx.indentAtStart = str.length + 1;\n    chompKeep = false;\n    if (!indentSeq &&\n        indentStep.length >= 2 &&\n        !ctx.inFlow &&\n        !explicitKey &&\n        isSeq(value) &&\n        !value.flow &&\n        !value.tag &&\n        !value.anchor) {\n        // If indentSeq === false, consider '- ' as part of indentation where possible\n        ctx.indent = ctx.indent.substring(2);\n    }\n    let valueCommentDone = false;\n    const valueStr = stringify(value, ctx, () => (valueCommentDone = true), () => (chompKeep = true));\n    let ws = ' ';\n    if (keyComment || vsb || vcb) {\n        ws = vsb ? '\\n' : '';\n        if (vcb) {\n            const cs = commentString(vcb);\n            ws += `\\n${indentComment(cs, ctx.indent)}`;\n        }\n        if (valueStr === '' && !ctx.inFlow) {\n            if (ws === '\\n')\n                ws = '\\n\\n';\n        }\n        else {\n            ws += `\\n${ctx.indent}`;\n        }\n    }\n    else if (!explicitKey && isCollection(value)) {\n        const vs0 = valueStr[0];\n        const nl0 = valueStr.indexOf('\\n');\n        const hasNewline = nl0 !== -1;\n        const flow = ctx.inFlow ?? value.flow ?? value.items.length === 0;\n        if (hasNewline || !flow) {\n            let hasPropsLine = false;\n            if (hasNewline && (vs0 === '&' || vs0 === '!')) {\n                let sp0 = valueStr.indexOf(' ');\n                if (vs0 === '&' &&\n                    sp0 !== -1 &&\n                    sp0 < nl0 &&\n                    valueStr[sp0 + 1] === '!') {\n                    sp0 = valueStr.indexOf(' ', sp0 + 1);\n                }\n                if (sp0 === -1 || nl0 < sp0)\n                    hasPropsLine = true;\n            }\n            if (!hasPropsLine)\n                ws = `\\n${ctx.indent}`;\n        }\n    }\n    else if (valueStr === '' || valueStr[0] === '\\n') {\n        ws = '';\n    }\n    str += ws + valueStr;\n    if (ctx.inFlow) {\n        if (valueCommentDone && onComment)\n            onComment();\n    }\n    else if (valueComment && !valueCommentDone) {\n        str += lineComment(str, ctx.indent, commentString(valueComment));\n    }\n    else if (chompKeep && onChompKeep) {\n        onChompKeep();\n    }\n    return str;\n}\n\nexport { stringifyPair };\n","function debug(logLevel, ...messages) {\n    if (logLevel === 'debug')\n        console.log(...messages);\n}\nfunction warn(logLevel, warning) {\n    if (logLevel === 'debug' || logLevel === 'warn') {\n        // https://github.com/typescript-eslint/typescript-eslint/issues/7478\n        // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n        if (typeof process !== 'undefined' && process.emitWarning)\n            process.emitWarning(warning);\n        else\n            console.warn(warning);\n    }\n}\n\nexport { debug, warn };\n","import { warn } from '../log.js';\nimport { createStringifyContext } from '../stringify/stringify.js';\nimport { isAlias, isSeq, isScalar, isMap, isNode } from './identity.js';\nimport { Scalar } from './Scalar.js';\nimport { toJS } from './toJS.js';\n\nconst MERGE_KEY = '<<';\nfunction addPairToJSMap(ctx, map, { key, value }) {\n    if (ctx?.doc.schema.merge && isMergeKey(key)) {\n        value = isAlias(value) ? value.resolve(ctx.doc) : value;\n        if (isSeq(value))\n            for (const it of value.items)\n                mergeToJSMap(ctx, map, it);\n        else if (Array.isArray(value))\n            for (const it of value)\n                mergeToJSMap(ctx, map, it);\n        else\n            mergeToJSMap(ctx, map, value);\n    }\n    else {\n        const jsKey = toJS(key, '', ctx);\n        if (map instanceof Map) {\n            map.set(jsKey, toJS(value, jsKey, ctx));\n        }\n        else if (map instanceof Set) {\n            map.add(jsKey);\n        }\n        else {\n            const stringKey = stringifyKey(key, jsKey, ctx);\n            const jsValue = toJS(value, stringKey, ctx);\n            if (stringKey in map)\n                Object.defineProperty(map, stringKey, {\n                    value: jsValue,\n                    writable: true,\n                    enumerable: true,\n                    configurable: true\n                });\n            else\n                map[stringKey] = jsValue;\n        }\n    }\n    return map;\n}\nconst isMergeKey = (key) => key === MERGE_KEY ||\n    (isScalar(key) &&\n        key.value === MERGE_KEY &&\n        (!key.type || key.type === Scalar.PLAIN));\n// If the value associated with a merge key is a single mapping node, each of\n// its key/value pairs is inserted into the current mapping, unless the key\n// already exists in it. If the value associated with the merge key is a\n// sequence, then this sequence is expected to contain mapping nodes and each\n// of these nodes is merged in turn according to its order in the sequence.\n// Keys in mapping nodes earlier in the sequence override keys specified in\n// later mapping nodes. -- http://yaml.org/type/merge.html\nfunction mergeToJSMap(ctx, map, value) {\n    const source = ctx && isAlias(value) ? value.resolve(ctx.doc) : value;\n    if (!isMap(source))\n        throw new Error('Merge sources must be maps or map aliases');\n    const srcMap = source.toJSON(null, ctx, Map);\n    for (const [key, value] of srcMap) {\n        if (map instanceof Map) {\n            if (!map.has(key))\n                map.set(key, value);\n        }\n        else if (map instanceof Set) {\n            map.add(key);\n        }\n        else if (!Object.prototype.hasOwnProperty.call(map, key)) {\n            Object.defineProperty(map, key, {\n                value,\n                writable: true,\n                enumerable: true,\n                configurable: true\n            });\n        }\n    }\n    return map;\n}\nfunction stringifyKey(key, jsKey, ctx) {\n    if (jsKey === null)\n        return '';\n    if (typeof jsKey !== 'object')\n        return String(jsKey);\n    if (isNode(key) && ctx?.doc) {\n        const strCtx = createStringifyContext(ctx.doc, {});\n        strCtx.anchors = new Set();\n        for (const node of ctx.anchors.keys())\n            strCtx.anchors.add(node.anchor);\n        strCtx.inFlow = true;\n        strCtx.inStringifyKey = true;\n        const strKey = key.toString(strCtx);\n        if (!ctx.mapKeyWarned) {\n            let jsonStr = JSON.stringify(strKey);\n            if (jsonStr.length > 40)\n                jsonStr = jsonStr.substring(0, 36) + '...\"';\n            warn(ctx.doc.options.logLevel, `Keys with collection values will be stringified due to JS Object restrictions: ${jsonStr}. Set mapAsMap: true to use object keys.`);\n            ctx.mapKeyWarned = true;\n        }\n        return strKey;\n    }\n    return JSON.stringify(jsKey);\n}\n\nexport { addPairToJSMap };\n","import { createNode } from '../doc/createNode.js';\nimport { stringifyPair } from '../stringify/stringifyPair.js';\nimport { addPairToJSMap } from './addPairToJSMap.js';\nimport { NODE_TYPE, PAIR, isNode } from './identity.js';\n\nfunction createPair(key, value, ctx) {\n    const k = createNode(key, undefined, ctx);\n    const v = createNode(value, undefined, ctx);\n    return new Pair(k, v);\n}\nclass Pair {\n    constructor(key, value = null) {\n        Object.defineProperty(this, NODE_TYPE, { value: PAIR });\n        this.key = key;\n        this.value = value;\n    }\n    clone(schema) {\n        let { key, value } = this;\n        if (isNode(key))\n            key = key.clone(schema);\n        if (isNode(value))\n            value = value.clone(schema);\n        return new Pair(key, value);\n    }\n    toJSON(_, ctx) {\n        const pair = ctx?.mapAsMap ? new Map() : {};\n        return addPairToJSMap(ctx, pair, this);\n    }\n    toString(ctx, onComment, onChompKeep) {\n        return ctx?.doc\n            ? stringifyPair(this, ctx, onComment, onChompKeep)\n            : JSON.stringify(this);\n    }\n}\n\nexport { Pair, createPair };\n","import { isNode, isPair } from '../nodes/identity.js';\nimport { stringify } from './stringify.js';\nimport { lineComment, indentComment } from './stringifyComment.js';\n\nfunction stringifyCollection(collection, ctx, options) {\n    const flow = ctx.inFlow ?? collection.flow;\n    const stringify = flow ? stringifyFlowCollection : stringifyBlockCollection;\n    return stringify(collection, ctx, options);\n}\nfunction stringifyBlockCollection({ comment, items }, ctx, { blockItemPrefix, flowChars, itemIndent, onChompKeep, onComment }) {\n    const { indent, options: { commentString } } = ctx;\n    const itemCtx = Object.assign({}, ctx, { indent: itemIndent, type: null });\n    let chompKeep = false; // flag for the preceding node's status\n    const lines = [];\n    for (let i = 0; i < items.length; ++i) {\n        const item = items[i];\n        let comment = null;\n        if (isNode(item)) {\n            if (!chompKeep && item.spaceBefore)\n                lines.push('');\n            addCommentBefore(ctx, lines, item.commentBefore, chompKeep);\n            if (item.comment)\n                comment = item.comment;\n        }\n        else if (isPair(item)) {\n            const ik = isNode(item.key) ? item.key : null;\n            if (ik) {\n                if (!chompKeep && ik.spaceBefore)\n                    lines.push('');\n                addCommentBefore(ctx, lines, ik.commentBefore, chompKeep);\n            }\n        }\n        chompKeep = false;\n        let str = stringify(item, itemCtx, () => (comment = null), () => (chompKeep = true));\n        if (comment)\n            str += lineComment(str, itemIndent, commentString(comment));\n        if (chompKeep && comment)\n            chompKeep = false;\n        lines.push(blockItemPrefix + str);\n    }\n    let str;\n    if (lines.length === 0) {\n        str = flowChars.start + flowChars.end;\n    }\n    else {\n        str = lines[0];\n        for (let i = 1; i < lines.length; ++i) {\n            const line = lines[i];\n            str += line ? `\\n${indent}${line}` : '\\n';\n        }\n    }\n    if (comment) {\n        str += '\\n' + indentComment(commentString(comment), indent);\n        if (onComment)\n            onComment();\n    }\n    else if (chompKeep && onChompKeep)\n        onChompKeep();\n    return str;\n}\nfunction stringifyFlowCollection({ items }, ctx, { flowChars, itemIndent }) {\n    const { indent, indentStep, flowCollectionPadding: fcPadding, options: { commentString } } = ctx;\n    itemIndent += indentStep;\n    const itemCtx = Object.assign({}, ctx, {\n        indent: itemIndent,\n        inFlow: true,\n        type: null\n    });\n    let reqNewline = false;\n    let linesAtValue = 0;\n    const lines = [];\n    for (let i = 0; i < items.length; ++i) {\n        const item = items[i];\n        let comment = null;\n        if (isNode(item)) {\n            if (item.spaceBefore)\n                lines.push('');\n            addCommentBefore(ctx, lines, item.commentBefore, false);\n            if (item.comment)\n                comment = item.comment;\n        }\n        else if (isPair(item)) {\n            const ik = isNode(item.key) ? item.key : null;\n            if (ik) {\n                if (ik.spaceBefore)\n                    lines.push('');\n                addCommentBefore(ctx, lines, ik.commentBefore, false);\n                if (ik.comment)\n                    reqNewline = true;\n            }\n            const iv = isNode(item.value) ? item.value : null;\n            if (iv) {\n                if (iv.comment)\n                    comment = iv.comment;\n                if (iv.commentBefore)\n                    reqNewline = true;\n            }\n            else if (item.value == null && ik?.comment) {\n                comment = ik.comment;\n            }\n        }\n        if (comment)\n            reqNewline = true;\n        let str = stringify(item, itemCtx, () => (comment = null));\n        if (i < items.length - 1)\n            str += ',';\n        if (comment)\n            str += lineComment(str, itemIndent, commentString(comment));\n        if (!reqNewline && (lines.length > linesAtValue || str.includes('\\n')))\n            reqNewline = true;\n        lines.push(str);\n        linesAtValue = lines.length;\n    }\n    const { start, end } = flowChars;\n    if (lines.length === 0) {\n        return start + end;\n    }\n    else {\n        if (!reqNewline) {\n            const len = lines.reduce((sum, line) => sum + line.length + 2, 2);\n            reqNewline = ctx.options.lineWidth > 0 && len > ctx.options.lineWidth;\n        }\n        if (reqNewline) {\n            let str = start;\n            for (const line of lines)\n                str += line ? `\\n${indentStep}${indent}${line}` : '\\n';\n            return `${str}\\n${indent}${end}`;\n        }\n        else {\n            return `${start}${fcPadding}${lines.join(' ')}${fcPadding}${end}`;\n        }\n    }\n}\nfunction addCommentBefore({ indent, options: { commentString } }, lines, comment, chompKeep) {\n    if (comment && chompKeep)\n        comment = comment.replace(/^\\n+/, '');\n    if (comment) {\n        const ic = indentComment(commentString(comment), indent);\n        lines.push(ic.trimStart()); // Avoid double indent on first line\n    }\n}\n\nexport { stringifyCollection };\n","import { stringifyCollection } from '../stringify/stringifyCollection.js';\nimport { addPairToJSMap } from './addPairToJSMap.js';\nimport { Collection } from './Collection.js';\nimport { isPair, isScalar, MAP } from './identity.js';\nimport { Pair, createPair } from './Pair.js';\nimport { isScalarValue } from './Scalar.js';\n\nfunction findPair(items, key) {\n    const k = isScalar(key) ? key.value : key;\n    for (const it of items) {\n        if (isPair(it)) {\n            if (it.key === key || it.key === k)\n                return it;\n            if (isScalar(it.key) && it.key.value === k)\n                return it;\n        }\n    }\n    return undefined;\n}\nclass YAMLMap extends Collection {\n    static get tagName() {\n        return 'tag:yaml.org,2002:map';\n    }\n    constructor(schema) {\n        super(MAP, schema);\n        this.items = [];\n    }\n    /**\n     * A generic collection parsing method that can be extended\n     * to other node classes that inherit from YAMLMap\n     */\n    static from(schema, obj, ctx) {\n        const { keepUndefined, replacer } = ctx;\n        const map = new this(schema);\n        const add = (key, value) => {\n            if (typeof replacer === 'function')\n                value = replacer.call(obj, key, value);\n            else if (Array.isArray(replacer) && !replacer.includes(key))\n                return;\n            if (value !== undefined || keepUndefined)\n                map.items.push(createPair(key, value, ctx));\n        };\n        if (obj instanceof Map) {\n            for (const [key, value] of obj)\n                add(key, value);\n        }\n        else if (obj && typeof obj === 'object') {\n            for (const key of Object.keys(obj))\n                add(key, obj[key]);\n        }\n        if (typeof schema.sortMapEntries === 'function') {\n            map.items.sort(schema.sortMapEntries);\n        }\n        return map;\n    }\n    /**\n     * Adds a value to the collection.\n     *\n     * @param overwrite - If not set `true`, using a key that is already in the\n     *   collection will throw. Otherwise, overwrites the previous value.\n     */\n    add(pair, overwrite) {\n        let _pair;\n        if (isPair(pair))\n            _pair = pair;\n        else if (!pair || typeof pair !== 'object' || !('key' in pair)) {\n            // In TypeScript, this never happens.\n            _pair = new Pair(pair, pair?.value);\n        }\n        else\n            _pair = new Pair(pair.key, pair.value);\n        const prev = findPair(this.items, _pair.key);\n        const sortEntries = this.schema?.sortMapEntries;\n        if (prev) {\n            if (!overwrite)\n                throw new Error(`Key ${_pair.key} already set`);\n            // For scalars, keep the old node & its comments and anchors\n            if (isScalar(prev.value) && isScalarValue(_pair.value))\n                prev.value.value = _pair.value;\n            else\n                prev.value = _pair.value;\n        }\n        else if (sortEntries) {\n            const i = this.items.findIndex(item => sortEntries(_pair, item) < 0);\n            if (i === -1)\n                this.items.push(_pair);\n            else\n                this.items.splice(i, 0, _pair);\n        }\n        else {\n            this.items.push(_pair);\n        }\n    }\n    delete(key) {\n        const it = findPair(this.items, key);\n        if (!it)\n            return false;\n        const del = this.items.splice(this.items.indexOf(it), 1);\n        return del.length > 0;\n    }\n    get(key, keepScalar) {\n        const it = findPair(this.items, key);\n        const node = it?.value;\n        return (!keepScalar && isScalar(node) ? node.value : node) ?? undefined;\n    }\n    has(key) {\n        return !!findPair(this.items, key);\n    }\n    set(key, value) {\n        this.add(new Pair(key, value), true);\n    }\n    /**\n     * @param ctx - Conversion context, originally set in Document#toJS()\n     * @param {Class} Type - If set, forces the returned collection type\n     * @returns Instance of Type, Map, or Object\n     */\n    toJSON(_, ctx, Type) {\n        const map = Type ? new Type() : ctx?.mapAsMap ? new Map() : {};\n        if (ctx?.onCreate)\n            ctx.onCreate(map);\n        for (const item of this.items)\n            addPairToJSMap(ctx, map, item);\n        return map;\n    }\n    toString(ctx, onComment, onChompKeep) {\n        if (!ctx)\n            return JSON.stringify(this);\n        for (const item of this.items) {\n            if (!isPair(item))\n                throw new Error(`Map items must all be pairs; found ${JSON.stringify(item)} instead`);\n        }\n        if (!ctx.allNullValues && this.hasAllNullValues(false))\n            ctx = Object.assign({}, ctx, { allNullValues: true });\n        return stringifyCollection(this, ctx, {\n            blockItemPrefix: '',\n            flowChars: { start: '{', end: '}' },\n            itemIndent: ctx.indent || '',\n            onChompKeep,\n            onComment\n        });\n    }\n}\n\nexport { YAMLMap, findPair };\n","import { isMap } from '../../nodes/identity.js';\nimport { YAMLMap } from '../../nodes/YAMLMap.js';\n\nconst map = {\n    collection: 'map',\n    default: true,\n    nodeClass: YAMLMap,\n    tag: 'tag:yaml.org,2002:map',\n    resolve(map, onError) {\n        if (!isMap(map))\n            onError('Expected a mapping for this tag');\n        return map;\n    },\n    createNode: (schema, obj, ctx) => YAMLMap.from(schema, obj, ctx)\n};\n\nexport { map };\n","import { createNode } from '../doc/createNode.js';\nimport { stringifyCollection } from '../stringify/stringifyCollection.js';\nimport { Collection } from './Collection.js';\nimport { SEQ, isScalar } from './identity.js';\nimport { isScalarValue } from './Scalar.js';\nimport { toJS } from './toJS.js';\n\nclass YAMLSeq extends Collection {\n    static get tagName() {\n        return 'tag:yaml.org,2002:seq';\n    }\n    constructor(schema) {\n        super(SEQ, schema);\n        this.items = [];\n    }\n    add(value) {\n        this.items.push(value);\n    }\n    /**\n     * Removes a value from the collection.\n     *\n     * `key` must contain a representation of an integer for this to succeed.\n     * It may be wrapped in a `Scalar`.\n     *\n     * @returns `true` if the item was found and removed.\n     */\n    delete(key) {\n        const idx = asItemIndex(key);\n        if (typeof idx !== 'number')\n            return false;\n        const del = this.items.splice(idx, 1);\n        return del.length > 0;\n    }\n    get(key, keepScalar) {\n        const idx = asItemIndex(key);\n        if (typeof idx !== 'number')\n            return undefined;\n        const it = this.items[idx];\n        return !keepScalar && isScalar(it) ? it.value : it;\n    }\n    /**\n     * Checks if the collection includes a value with the key `key`.\n     *\n     * `key` must contain a representation of an integer for this to succeed.\n     * It may be wrapped in a `Scalar`.\n     */\n    has(key) {\n        const idx = asItemIndex(key);\n        return typeof idx === 'number' && idx < this.items.length;\n    }\n    /**\n     * Sets a value in this collection. For `!!set`, `value` needs to be a\n     * boolean to add/remove the item from the set.\n     *\n     * If `key` does not contain a representation of an integer, this will throw.\n     * It may be wrapped in a `Scalar`.\n     */\n    set(key, value) {\n        const idx = asItemIndex(key);\n        if (typeof idx !== 'number')\n            throw new Error(`Expected a valid index, not ${key}.`);\n        const prev = this.items[idx];\n        if (isScalar(prev) && isScalarValue(value))\n            prev.value = value;\n        else\n            this.items[idx] = value;\n    }\n    toJSON(_, ctx) {\n        const seq = [];\n        if (ctx?.onCreate)\n            ctx.onCreate(seq);\n        let i = 0;\n        for (const item of this.items)\n            seq.push(toJS(item, String(i++), ctx));\n        return seq;\n    }\n    toString(ctx, onComment, onChompKeep) {\n        if (!ctx)\n            return JSON.stringify(this);\n        return stringifyCollection(this, ctx, {\n            blockItemPrefix: '- ',\n            flowChars: { start: '[', end: ']' },\n            itemIndent: (ctx.indent || '') + '  ',\n            onChompKeep,\n            onComment\n        });\n    }\n    static from(schema, obj, ctx) {\n        const { replacer } = ctx;\n        const seq = new this(schema);\n        if (obj && Symbol.iterator in Object(obj)) {\n            let i = 0;\n            for (let it of obj) {\n                if (typeof replacer === 'function') {\n                    const key = obj instanceof Set ? it : String(i++);\n                    it = replacer.call(obj, key, it);\n                }\n                seq.items.push(createNode(it, undefined, ctx));\n            }\n        }\n        return seq;\n    }\n}\nfunction asItemIndex(key) {\n    let idx = isScalar(key) ? key.value : key;\n    if (idx && typeof idx === 'string')\n        idx = Number(idx);\n    return typeof idx === 'number' && Number.isInteger(idx) && idx >= 0\n        ? idx\n        : null;\n}\n\nexport { YAMLSeq };\n","import { isSeq } from '../../nodes/identity.js';\nimport { YAMLSeq } from '../../nodes/YAMLSeq.js';\n\nconst seq = {\n    collection: 'seq',\n    default: true,\n    nodeClass: YAMLSeq,\n    tag: 'tag:yaml.org,2002:seq',\n    resolve(seq, onError) {\n        if (!isSeq(seq))\n            onError('Expected a sequence for this tag');\n        return seq;\n    },\n    createNode: (schema, obj, ctx) => YAMLSeq.from(schema, obj, ctx)\n};\n\nexport { seq };\n","import { stringifyString } from '../../stringify/stringifyString.js';\n\nconst string = {\n    identify: value => typeof value === 'string',\n    default: true,\n    tag: 'tag:yaml.org,2002:str',\n    resolve: str => str,\n    stringify(item, ctx, onComment, onChompKeep) {\n        ctx = Object.assign({ actualString: true }, ctx);\n        return stringifyString(item, ctx, onComment, onChompKeep);\n    }\n};\n\nexport { string };\n","import { Scalar } from '../../nodes/Scalar.js';\n\nconst nullTag = {\n    identify: value => value == null,\n    createNode: () => new Scalar(null),\n    default: true,\n    tag: 'tag:yaml.org,2002:null',\n    test: /^(?:~|[Nn]ull|NULL)?$/,\n    resolve: () => new Scalar(null),\n    stringify: ({ source }, ctx) => typeof source === 'string' && nullTag.test.test(source)\n        ? source\n        : ctx.options.nullStr\n};\n\nexport { nullTag };\n","import { Scalar } from '../../nodes/Scalar.js';\n\nconst boolTag = {\n    identify: value => typeof value === 'boolean',\n    default: true,\n    tag: 'tag:yaml.org,2002:bool',\n    test: /^(?:[Tt]rue|TRUE|[Ff]alse|FALSE)$/,\n    resolve: str => new Scalar(str[0] === 't' || str[0] === 'T'),\n    stringify({ source, value }, ctx) {\n        if (source && boolTag.test.test(source)) {\n            const sv = source[0] === 't' || source[0] === 'T';\n            if (value === sv)\n                return source;\n        }\n        return value ? ctx.options.trueStr : ctx.options.falseStr;\n    }\n};\n\nexport { boolTag };\n","function stringifyNumber({ format, minFractionDigits, tag, value }) {\n    if (typeof value === 'bigint')\n        return String(value);\n    const num = typeof value === 'number' ? value : Number(value);\n    if (!isFinite(num))\n        return isNaN(num) ? '.nan' : num < 0 ? '-.inf' : '.inf';\n    let n = JSON.stringify(value);\n    if (!format &&\n        minFractionDigits &&\n        (!tag || tag === 'tag:yaml.org,2002:float') &&\n        /^\\d/.test(n)) {\n        let i = n.indexOf('.');\n        if (i < 0) {\n            i = n.length;\n            n += '.';\n        }\n        let d = minFractionDigits - (n.length - i - 1);\n        while (d-- > 0)\n            n += '0';\n    }\n    return n;\n}\n\nexport { stringifyNumber };\n","import { Scalar } from '../../nodes/Scalar.js';\nimport { stringifyNumber } from '../../stringify/stringifyNumber.js';\n\nconst floatNaN = {\n    identify: value => typeof value === 'number',\n    default: true,\n    tag: 'tag:yaml.org,2002:float',\n    test: /^(?:[-+]?\\.(?:inf|Inf|INF)|\\.nan|\\.NaN|\\.NAN)$/,\n    resolve: str => str.slice(-3).toLowerCase() === 'nan'\n        ? NaN\n        : str[0] === '-'\n            ? Number.NEGATIVE_INFINITY\n            : Number.POSITIVE_INFINITY,\n    stringify: stringifyNumber\n};\nconst floatExp = {\n    identify: value => typeof value === 'number',\n    default: true,\n    tag: 'tag:yaml.org,2002:float',\n    format: 'EXP',\n    test: /^[-+]?(?:\\.[0-9]+|[0-9]+(?:\\.[0-9]*)?)[eE][-+]?[0-9]+$/,\n    resolve: str => parseFloat(str),\n    stringify(node) {\n        const num = Number(node.value);\n        return isFinite(num) ? num.toExponential() : stringifyNumber(node);\n    }\n};\nconst float = {\n    identify: value => typeof value === 'number',\n    default: true,\n    tag: 'tag:yaml.org,2002:float',\n    test: /^[-+]?(?:\\.[0-9]+|[0-9]+\\.[0-9]*)$/,\n    resolve(str) {\n        const node = new Scalar(parseFloat(str));\n        const dot = str.indexOf('.');\n        if (dot !== -1 && str[str.length - 1] === '0')\n            node.minFractionDigits = str.length - dot - 1;\n        return node;\n    },\n    stringify: stringifyNumber\n};\n\nexport { float, floatExp, floatNaN };\n","import { stringifyNumber } from '../../stringify/stringifyNumber.js';\n\nconst intIdentify = (value) => typeof value === 'bigint' || Number.isInteger(value);\nconst intResolve = (str, offset, radix, { intAsBigInt }) => (intAsBigInt ? BigInt(str) : parseInt(str.substring(offset), radix));\nfunction intStringify(node, radix, prefix) {\n    const { value } = node;\n    if (intIdentify(value) && value >= 0)\n        return prefix + value.toString(radix);\n    return stringifyNumber(node);\n}\nconst intOct = {\n    identify: value => intIdentify(value) && value >= 0,\n    default: true,\n    tag: 'tag:yaml.org,2002:int',\n    format: 'OCT',\n    test: /^0o[0-7]+$/,\n    resolve: (str, _onError, opt) => intResolve(str, 2, 8, opt),\n    stringify: node => intStringify(node, 8, '0o')\n};\nconst int = {\n    identify: intIdentify,\n    default: true,\n    tag: 'tag:yaml.org,2002:int',\n    test: /^[-+]?[0-9]+$/,\n    resolve: (str, _onError, opt) => intResolve(str, 0, 10, opt),\n    stringify: stringifyNumber\n};\nconst intHex = {\n    identify: value => intIdentify(value) && value >= 0,\n    default: true,\n    tag: 'tag:yaml.org,2002:int',\n    format: 'HEX',\n    test: /^0x[0-9a-fA-F]+$/,\n    resolve: (str, _onError, opt) => intResolve(str, 2, 16, opt),\n    stringify: node => intStringify(node, 16, '0x')\n};\n\nexport { int, intHex, intOct };\n","import { map } from '../common/map.js';\nimport { nullTag } from '../common/null.js';\nimport { seq } from '../common/seq.js';\nimport { string } from '../common/string.js';\nimport { boolTag } from './bool.js';\nimport { floatNaN, floatExp, float } from './float.js';\nimport { intOct, int, intHex } from './int.js';\n\nconst schema = [\n    map,\n    seq,\n    string,\n    nullTag,\n    boolTag,\n    intOct,\n    int,\n    intHex,\n    floatNaN,\n    floatExp,\n    float\n];\n\nexport { schema };\n","import { Scalar } from '../../nodes/Scalar.js';\nimport { map } from '../common/map.js';\nimport { seq } from '../common/seq.js';\n\nfunction intIdentify(value) {\n    return typeof value === 'bigint' || Number.isInteger(value);\n}\nconst stringifyJSON = ({ value }) => JSON.stringify(value);\nconst jsonScalars = [\n    {\n        identify: value => typeof value === 'string',\n        default: true,\n        tag: 'tag:yaml.org,2002:str',\n        resolve: str => str,\n        stringify: stringifyJSON\n    },\n    {\n        identify: value => value == null,\n        createNode: () => new Scalar(null),\n        default: true,\n        tag: 'tag:yaml.org,2002:null',\n        test: /^null$/,\n        resolve: () => null,\n        stringify: stringifyJSON\n    },\n    {\n        identify: value => typeof value === 'boolean',\n        default: true,\n        tag: 'tag:yaml.org,2002:bool',\n        test: /^true|false$/,\n        resolve: str => str === 'true',\n        stringify: stringifyJSON\n    },\n    {\n        identify: intIdentify,\n        default: true,\n        tag: 'tag:yaml.org,2002:int',\n        test: /^-?(?:0|[1-9][0-9]*)$/,\n        resolve: (str, _onError, { intAsBigInt }) => intAsBigInt ? BigInt(str) : parseInt(str, 10),\n        stringify: ({ value }) => intIdentify(value) ? value.toString() : JSON.stringify(value)\n    },\n    {\n        identify: value => typeof value === 'number',\n        default: true,\n        tag: 'tag:yaml.org,2002:float',\n        test: /^-?(?:0|[1-9][0-9]*)(?:\\.[0-9]*)?(?:[eE][-+]?[0-9]+)?$/,\n        resolve: str => parseFloat(str),\n        stringify: stringifyJSON\n    }\n];\nconst jsonError = {\n    default: true,\n    tag: '',\n    test: /^/,\n    resolve(str, onError) {\n        onError(`Unresolved plain scalar ${JSON.stringify(str)}`);\n        return str;\n    }\n};\nconst schema = [map, seq].concat(jsonScalars, jsonError);\n\nexport { schema };\n","import { Scalar } from '../../nodes/Scalar.js';\nimport { stringifyString } from '../../stringify/stringifyString.js';\n\nconst binary = {\n    identify: value => value instanceof Uint8Array, // Buffer inherits from Uint8Array\n    default: false,\n    tag: 'tag:yaml.org,2002:binary',\n    /**\n     * Returns a Buffer in node and an Uint8Array in browsers\n     *\n     * To use the resulting buffer as an image, you'll want to do something like:\n     *\n     *   const blob = new Blob([buffer], { type: 'image/jpeg' })\n     *   document.querySelector('#photo').src = URL.createObjectURL(blob)\n     */\n    resolve(src, onError) {\n        if (typeof Buffer === 'function') {\n            return Buffer.from(src, 'base64');\n        }\n        else if (typeof atob === 'function') {\n            // On IE 11, atob() can't handle newlines\n            const str = atob(src.replace(/[\\n\\r]/g, ''));\n            const buffer = new Uint8Array(str.length);\n            for (let i = 0; i < str.length; ++i)\n                buffer[i] = str.charCodeAt(i);\n            return buffer;\n        }\n        else {\n            onError('This environment does not support reading binary tags; either Buffer or atob is required');\n            return src;\n        }\n    },\n    stringify({ comment, type, value }, ctx, onComment, onChompKeep) {\n        const buf = value; // checked earlier by binary.identify()\n        let str;\n        if (typeof Buffer === 'function') {\n            str =\n                buf instanceof Buffer\n                    ? buf.toString('base64')\n                    : Buffer.from(buf.buffer).toString('base64');\n        }\n        else if (typeof btoa === 'function') {\n            let s = '';\n            for (let i = 0; i < buf.length; ++i)\n                s += String.fromCharCode(buf[i]);\n            str = btoa(s);\n        }\n        else {\n            throw new Error('This environment does not support writing binary tags; either Buffer or btoa is required');\n        }\n        if (!type)\n            type = Scalar.BLOCK_LITERAL;\n        if (type !== Scalar.QUOTE_DOUBLE) {\n            const lineWidth = Math.max(ctx.options.lineWidth - ctx.indent.length, ctx.options.minContentWidth);\n            const n = Math.ceil(str.length / lineWidth);\n            const lines = new Array(n);\n            for (let i = 0, o = 0; i < n; ++i, o += lineWidth) {\n                lines[i] = str.substr(o, lineWidth);\n            }\n            str = lines.join(type === Scalar.BLOCK_LITERAL ? '\\n' : ' ');\n        }\n        return stringifyString({ comment, type, value: str }, ctx, onComment, onChompKeep);\n    }\n};\n\nexport { binary };\n","import { isSeq, isPair, isMap } from '../../nodes/identity.js';\nimport { Pair, createPair } from '../../nodes/Pair.js';\nimport { Scalar } from '../../nodes/Scalar.js';\nimport { YAMLSeq } from '../../nodes/YAMLSeq.js';\n\nfunction resolvePairs(seq, onError) {\n    if (isSeq(seq)) {\n        for (let i = 0; i < seq.items.length; ++i) {\n            let item = seq.items[i];\n            if (isPair(item))\n                continue;\n            else if (isMap(item)) {\n                if (item.items.length > 1)\n                    onError('Each pair must have its own sequence indicator');\n                const pair = item.items[0] || new Pair(new Scalar(null));\n                if (item.commentBefore)\n                    pair.key.commentBefore = pair.key.commentBefore\n                        ? `${item.commentBefore}\\n${pair.key.commentBefore}`\n                        : item.commentBefore;\n                if (item.comment) {\n                    const cn = pair.value ?? pair.key;\n                    cn.comment = cn.comment\n                        ? `${item.comment}\\n${cn.comment}`\n                        : item.comment;\n                }\n                item = pair;\n            }\n            seq.items[i] = isPair(item) ? item : new Pair(item);\n        }\n    }\n    else\n        onError('Expected a sequence for this tag');\n    return seq;\n}\nfunction createPairs(schema, iterable, ctx) {\n    const { replacer } = ctx;\n    const pairs = new YAMLSeq(schema);\n    pairs.tag = 'tag:yaml.org,2002:pairs';\n    let i = 0;\n    if (iterable && Symbol.iterator in Object(iterable))\n        for (let it of iterable) {\n            if (typeof replacer === 'function')\n                it = replacer.call(iterable, String(i++), it);\n            let key, value;\n            if (Array.isArray(it)) {\n                if (it.length === 2) {\n                    key = it[0];\n                    value = it[1];\n                }\n                else\n                    throw new TypeError(`Expected [key, value] tuple: ${it}`);\n            }\n            else if (it && it instanceof Object) {\n                const keys = Object.keys(it);\n                if (keys.length === 1) {\n                    key = keys[0];\n                    value = it[key];\n                }\n                else {\n                    throw new TypeError(`Expected tuple with one key, not ${keys.length} keys`);\n                }\n            }\n            else {\n                key = it;\n            }\n            pairs.items.push(createPair(key, value, ctx));\n        }\n    return pairs;\n}\nconst pairs = {\n    collection: 'seq',\n    default: false,\n    tag: 'tag:yaml.org,2002:pairs',\n    resolve: resolvePairs,\n    createNode: createPairs\n};\n\nexport { createPairs, pairs, resolvePairs };\n","import { isScalar, isPair } from '../../nodes/identity.js';\nimport { toJS } from '../../nodes/toJS.js';\nimport { YAMLMap } from '../../nodes/YAMLMap.js';\nimport { YAMLSeq } from '../../nodes/YAMLSeq.js';\nimport { resolvePairs, createPairs } from './pairs.js';\n\nclass YAMLOMap extends YAMLSeq {\n    constructor() {\n        super();\n        this.add = YAMLMap.prototype.add.bind(this);\n        this.delete = YAMLMap.prototype.delete.bind(this);\n        this.get = YAMLMap.prototype.get.bind(this);\n        this.has = YAMLMap.prototype.has.bind(this);\n        this.set = YAMLMap.prototype.set.bind(this);\n        this.tag = YAMLOMap.tag;\n    }\n    /**\n     * If `ctx` is given, the return type is actually `Map<unknown, unknown>`,\n     * but TypeScript won't allow widening the signature of a child method.\n     */\n    toJSON(_, ctx) {\n        if (!ctx)\n            return super.toJSON(_);\n        const map = new Map();\n        if (ctx?.onCreate)\n            ctx.onCreate(map);\n        for (const pair of this.items) {\n            let key, value;\n            if (isPair(pair)) {\n                key = toJS(pair.key, '', ctx);\n                value = toJS(pair.value, key, ctx);\n            }\n            else {\n                key = toJS(pair, '', ctx);\n            }\n            if (map.has(key))\n                throw new Error('Ordered maps must not include duplicate keys');\n            map.set(key, value);\n        }\n        return map;\n    }\n    static from(schema, iterable, ctx) {\n        const pairs = createPairs(schema, iterable, ctx);\n        const omap = new this();\n        omap.items = pairs.items;\n        return omap;\n    }\n}\nYAMLOMap.tag = 'tag:yaml.org,2002:omap';\nconst omap = {\n    collection: 'seq',\n    identify: value => value instanceof Map,\n    nodeClass: YAMLOMap,\n    default: false,\n    tag: 'tag:yaml.org,2002:omap',\n    resolve(seq, onError) {\n        const pairs = resolvePairs(seq, onError);\n        const seenKeys = [];\n        for (const { key } of pairs.items) {\n            if (isScalar(key)) {\n                if (seenKeys.includes(key.value)) {\n                    onError(`Ordered maps must not include duplicate keys: ${key.value}`);\n                }\n                else {\n                    seenKeys.push(key.value);\n                }\n            }\n        }\n        return Object.assign(new YAMLOMap(), pairs);\n    },\n    createNode: (schema, iterable, ctx) => YAMLOMap.from(schema, iterable, ctx)\n};\n\nexport { YAMLOMap, omap };\n","import { Scalar } from '../../nodes/Scalar.js';\n\nfunction boolStringify({ value, source }, ctx) {\n    const boolObj = value ? trueTag : falseTag;\n    if (source && boolObj.test.test(source))\n        return source;\n    return value ? ctx.options.trueStr : ctx.options.falseStr;\n}\nconst trueTag = {\n    identify: value => value === true,\n    default: true,\n    tag: 'tag:yaml.org,2002:bool',\n    test: /^(?:Y|y|[Yy]es|YES|[Tt]rue|TRUE|[Oo]n|ON)$/,\n    resolve: () => new Scalar(true),\n    stringify: boolStringify\n};\nconst falseTag = {\n    identify: value => value === false,\n    default: true,\n    tag: 'tag:yaml.org,2002:bool',\n    test: /^(?:N|n|[Nn]o|NO|[Ff]alse|FALSE|[Oo]ff|OFF)$/,\n    resolve: () => new Scalar(false),\n    stringify: boolStringify\n};\n\nexport { falseTag, trueTag };\n","import { Scalar } from '../../nodes/Scalar.js';\nimport { stringifyNumber } from '../../stringify/stringifyNumber.js';\n\nconst floatNaN = {\n    identify: value => typeof value === 'number',\n    default: true,\n    tag: 'tag:yaml.org,2002:float',\n    test: /^(?:[-+]?\\.(?:inf|Inf|INF)|\\.nan|\\.NaN|\\.NAN)$/,\n    resolve: (str) => str.slice(-3).toLowerCase() === 'nan'\n        ? NaN\n        : str[0] === '-'\n            ? Number.NEGATIVE_INFINITY\n            : Number.POSITIVE_INFINITY,\n    stringify: stringifyNumber\n};\nconst floatExp = {\n    identify: value => typeof value === 'number',\n    default: true,\n    tag: 'tag:yaml.org,2002:float',\n    format: 'EXP',\n    test: /^[-+]?(?:[0-9][0-9_]*)?(?:\\.[0-9_]*)?[eE][-+]?[0-9]+$/,\n    resolve: (str) => parseFloat(str.replace(/_/g, '')),\n    stringify(node) {\n        const num = Number(node.value);\n        return isFinite(num) ? num.toExponential() : stringifyNumber(node);\n    }\n};\nconst float = {\n    identify: value => typeof value === 'number',\n    default: true,\n    tag: 'tag:yaml.org,2002:float',\n    test: /^[-+]?(?:[0-9][0-9_]*)?\\.[0-9_]*$/,\n    resolve(str) {\n        const node = new Scalar(parseFloat(str.replace(/_/g, '')));\n        const dot = str.indexOf('.');\n        if (dot !== -1) {\n            const f = str.substring(dot + 1).replace(/_/g, '');\n            if (f[f.length - 1] === '0')\n                node.minFractionDigits = f.length;\n        }\n        return node;\n    },\n    stringify: stringifyNumber\n};\n\nexport { float, floatExp, floatNaN };\n","import { stringifyNumber } from '../../stringify/stringifyNumber.js';\n\nconst intIdentify = (value) => typeof value === 'bigint' || Number.isInteger(value);\nfunction intResolve(str, offset, radix, { intAsBigInt }) {\n    const sign = str[0];\n    if (sign === '-' || sign === '+')\n        offset += 1;\n    str = str.substring(offset).replace(/_/g, '');\n    if (intAsBigInt) {\n        switch (radix) {\n            case 2:\n                str = `0b${str}`;\n                break;\n            case 8:\n                str = `0o${str}`;\n                break;\n            case 16:\n                str = `0x${str}`;\n                break;\n        }\n        const n = BigInt(str);\n        return sign === '-' ? BigInt(-1) * n : n;\n    }\n    const n = parseInt(str, radix);\n    return sign === '-' ? -1 * n : n;\n}\nfunction intStringify(node, radix, prefix) {\n    const { value } = node;\n    if (intIdentify(value)) {\n        const str = value.toString(radix);\n        return value < 0 ? '-' + prefix + str.substr(1) : prefix + str;\n    }\n    return stringifyNumber(node);\n}\nconst intBin = {\n    identify: intIdentify,\n    default: true,\n    tag: 'tag:yaml.org,2002:int',\n    format: 'BIN',\n    test: /^[-+]?0b[0-1_]+$/,\n    resolve: (str, _onError, opt) => intResolve(str, 2, 2, opt),\n    stringify: node => intStringify(node, 2, '0b')\n};\nconst intOct = {\n    identify: intIdentify,\n    default: true,\n    tag: 'tag:yaml.org,2002:int',\n    format: 'OCT',\n    test: /^[-+]?0[0-7_]+$/,\n    resolve: (str, _onError, opt) => intResolve(str, 1, 8, opt),\n    stringify: node => intStringify(node, 8, '0')\n};\nconst int = {\n    identify: intIdentify,\n    default: true,\n    tag: 'tag:yaml.org,2002:int',\n    test: /^[-+]?[0-9][0-9_]*$/,\n    resolve: (str, _onError, opt) => intResolve(str, 0, 10, opt),\n    stringify: stringifyNumber\n};\nconst intHex = {\n    identify: intIdentify,\n    default: true,\n    tag: 'tag:yaml.org,2002:int',\n    format: 'HEX',\n    test: /^[-+]?0x[0-9a-fA-F_]+$/,\n    resolve: (str, _onError, opt) => intResolve(str, 2, 16, opt),\n    stringify: node => intStringify(node, 16, '0x')\n};\n\nexport { int, intBin, intHex, intOct };\n","import { isMap, isPair, isScalar } from '../../nodes/identity.js';\nimport { Pair, createPair } from '../../nodes/Pair.js';\nimport { YAMLMap, findPair } from '../../nodes/YAMLMap.js';\n\nclass YAMLSet extends YAMLMap {\n    constructor(schema) {\n        super(schema);\n        this.tag = YAMLSet.tag;\n    }\n    add(key) {\n        let pair;\n        if (isPair(key))\n            pair = key;\n        else if (key &&\n            typeof key === 'object' &&\n            'key' in key &&\n            'value' in key &&\n            key.value === null)\n            pair = new Pair(key.key, null);\n        else\n            pair = new Pair(key, null);\n        const prev = findPair(this.items, pair.key);\n        if (!prev)\n            this.items.push(pair);\n    }\n    /**\n     * If `keepPair` is `true`, returns the Pair matching `key`.\n     * Otherwise, returns the value of that Pair's key.\n     */\n    get(key, keepPair) {\n        const pair = findPair(this.items, key);\n        return !keepPair && isPair(pair)\n            ? isScalar(pair.key)\n                ? pair.key.value\n                : pair.key\n            : pair;\n    }\n    set(key, value) {\n        if (typeof value !== 'boolean')\n            throw new Error(`Expected boolean value for set(key, value) in a YAML set, not ${typeof value}`);\n        const prev = findPair(this.items, key);\n        if (prev && !value) {\n            this.items.splice(this.items.indexOf(prev), 1);\n        }\n        else if (!prev && value) {\n            this.items.push(new Pair(key));\n        }\n    }\n    toJSON(_, ctx) {\n        return super.toJSON(_, ctx, Set);\n    }\n    toString(ctx, onComment, onChompKeep) {\n        if (!ctx)\n            return JSON.stringify(this);\n        if (this.hasAllNullValues(true))\n            return super.toString(Object.assign({}, ctx, { allNullValues: true }), onComment, onChompKeep);\n        else\n            throw new Error('Set items must all have null values');\n    }\n    static from(schema, iterable, ctx) {\n        const { replacer } = ctx;\n        const set = new this(schema);\n        if (iterable && Symbol.iterator in Object(iterable))\n            for (let value of iterable) {\n                if (typeof replacer === 'function')\n                    value = replacer.call(iterable, value, value);\n                set.items.push(createPair(value, null, ctx));\n            }\n        return set;\n    }\n}\nYAMLSet.tag = 'tag:yaml.org,2002:set';\nconst set = {\n    collection: 'map',\n    identify: value => value instanceof Set,\n    nodeClass: YAMLSet,\n    default: false,\n    tag: 'tag:yaml.org,2002:set',\n    createNode: (schema, iterable, ctx) => YAMLSet.from(schema, iterable, ctx),\n    resolve(map, onError) {\n        if (isMap(map)) {\n            if (map.hasAllNullValues(true))\n                return Object.assign(new YAMLSet(), map);\n            else\n                onError('Set items must all have null values');\n        }\n        else\n            onError('Expected a mapping for this tag');\n        return map;\n    }\n};\n\nexport { YAMLSet, set };\n","import { stringifyNumber } from '../../stringify/stringifyNumber.js';\n\n/** Internal types handle bigint as number, because TS can't figure it out. */\nfunction parseSexagesimal(str, asBigInt) {\n    const sign = str[0];\n    const parts = sign === '-' || sign === '+' ? str.substring(1) : str;\n    const num = (n) => asBigInt ? BigInt(n) : Number(n);\n    const res = parts\n        .replace(/_/g, '')\n        .split(':')\n        .reduce((res, p) => res * num(60) + num(p), num(0));\n    return (sign === '-' ? num(-1) * res : res);\n}\n/**\n * hhhh:mm:ss.sss\n *\n * Internal types handle bigint as number, because TS can't figure it out.\n */\nfunction stringifySexagesimal(node) {\n    let { value } = node;\n    let num = (n) => n;\n    if (typeof value === 'bigint')\n        num = n => BigInt(n);\n    else if (isNaN(value) || !isFinite(value))\n        return stringifyNumber(node);\n    let sign = '';\n    if (value < 0) {\n        sign = '-';\n        value *= num(-1);\n    }\n    const _60 = num(60);\n    const parts = [value % _60]; // seconds, including ms\n    if (value < 60) {\n        parts.unshift(0); // at least one : is required\n    }\n    else {\n        value = (value - parts[0]) / _60;\n        parts.unshift(value % _60); // minutes\n        if (value >= 60) {\n            value = (value - parts[0]) / _60;\n            parts.unshift(value); // hours\n        }\n    }\n    return (sign +\n        parts\n            .map(n => String(n).padStart(2, '0'))\n            .join(':')\n            .replace(/000000\\d*$/, '') // % 60 may introduce error\n    );\n}\nconst intTime = {\n    identify: value => typeof value === 'bigint' || Number.isInteger(value),\n    default: true,\n    tag: 'tag:yaml.org,2002:int',\n    format: 'TIME',\n    test: /^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+$/,\n    resolve: (str, _onError, { intAsBigInt }) => parseSexagesimal(str, intAsBigInt),\n    stringify: stringifySexagesimal\n};\nconst floatTime = {\n    identify: value => typeof value === 'number',\n    default: true,\n    tag: 'tag:yaml.org,2002:float',\n    format: 'TIME',\n    test: /^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*$/,\n    resolve: str => parseSexagesimal(str, false),\n    stringify: stringifySexagesimal\n};\nconst timestamp = {\n    identify: value => value instanceof Date,\n    default: true,\n    tag: 'tag:yaml.org,2002:timestamp',\n    // If the time zone is omitted, the timestamp is assumed to be specified in UTC. The time part\n    // may be omitted altogether, resulting in a date format. In such a case, the time part is\n    // assumed to be 00:00:00Z (start of day, UTC).\n    test: RegExp('^([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})' + // YYYY-Mm-Dd\n        '(?:' + // time is optional\n        '(?:t|T|[ \\\\t]+)' + // t | T | whitespace\n        '([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2}(\\\\.[0-9]+)?)' + // Hh:Mm:Ss(.ss)?\n        '(?:[ \\\\t]*(Z|[-+][012]?[0-9](?::[0-9]{2})?))?' + // Z | +5 | -03:30\n        ')?$'),\n    resolve(str) {\n        const match = str.match(timestamp.test);\n        if (!match)\n            throw new Error('!!timestamp expects a date, starting with yyyy-mm-dd');\n        const [, year, month, day, hour, minute, second] = match.map(Number);\n        const millisec = match[7] ? Number((match[7] + '00').substr(1, 3)) : 0;\n        let date = Date.UTC(year, month - 1, day, hour || 0, minute || 0, second || 0, millisec);\n        const tz = match[8];\n        if (tz && tz !== 'Z') {\n            let d = parseSexagesimal(tz, false);\n            if (Math.abs(d) < 30)\n                d *= 60;\n            date -= 60000 * d;\n        }\n        return new Date(date);\n    },\n    stringify: ({ value }) => value.toISOString().replace(/((T00:00)?:00)?\\.000Z$/, '')\n};\n\nexport { floatTime, intTime, timestamp };\n","import { map } from '../common/map.js';\nimport { nullTag } from '../common/null.js';\nimport { seq } from '../common/seq.js';\nimport { string } from '../common/string.js';\nimport { binary } from './binary.js';\nimport { trueTag, falseTag } from './bool.js';\nimport { floatNaN, floatExp, float } from './float.js';\nimport { intBin, intOct, int, intHex } from './int.js';\nimport { omap } from './omap.js';\nimport { pairs } from './pairs.js';\nimport { set } from './set.js';\nimport { intTime, floatTime, timestamp } from './timestamp.js';\n\nconst schema = [\n    map,\n    seq,\n    string,\n    nullTag,\n    trueTag,\n    falseTag,\n    intBin,\n    intOct,\n    int,\n    intHex,\n    floatNaN,\n    floatExp,\n    float,\n    binary,\n    omap,\n    pairs,\n    set,\n    intTime,\n    floatTime,\n    timestamp\n];\n\nexport { schema };\n","import { map } from './common/map.js';\nimport { nullTag } from './common/null.js';\nimport { seq } from './common/seq.js';\nimport { string } from './common/string.js';\nimport { boolTag } from './core/bool.js';\nimport { float, floatExp, floatNaN } from './core/float.js';\nimport { int, intHex, intOct } from './core/int.js';\nimport { schema } from './core/schema.js';\nimport { schema as schema$1 } from './json/schema.js';\nimport { binary } from './yaml-1.1/binary.js';\nimport { omap } from './yaml-1.1/omap.js';\nimport { pairs } from './yaml-1.1/pairs.js';\nimport { schema as schema$2 } from './yaml-1.1/schema.js';\nimport { set } from './yaml-1.1/set.js';\nimport { timestamp, floatTime, intTime } from './yaml-1.1/timestamp.js';\n\nconst schemas = new Map([\n    ['core', schema],\n    ['failsafe', [map, seq, string]],\n    ['json', schema$1],\n    ['yaml11', schema$2],\n    ['yaml-1.1', schema$2]\n]);\nconst tagsByName = {\n    binary,\n    bool: boolTag,\n    float,\n    floatExp,\n    floatNaN,\n    floatTime,\n    int,\n    intHex,\n    intOct,\n    intTime,\n    map,\n    null: nullTag,\n    omap,\n    pairs,\n    seq,\n    set,\n    timestamp\n};\nconst coreKnownTags = {\n    'tag:yaml.org,2002:binary': binary,\n    'tag:yaml.org,2002:omap': omap,\n    'tag:yaml.org,2002:pairs': pairs,\n    'tag:yaml.org,2002:set': set,\n    'tag:yaml.org,2002:timestamp': timestamp\n};\nfunction getTags(customTags, schemaName) {\n    let tags = schemas.get(schemaName);\n    if (!tags) {\n        if (Array.isArray(customTags))\n            tags = [];\n        else {\n            const keys = Array.from(schemas.keys())\n                .filter(key => key !== 'yaml11')\n                .map(key => JSON.stringify(key))\n                .join(', ');\n            throw new Error(`Unknown schema \"${schemaName}\"; use one of ${keys} or define customTags array`);\n        }\n    }\n    if (Array.isArray(customTags)) {\n        for (const tag of customTags)\n            tags = tags.concat(tag);\n    }\n    else if (typeof customTags === 'function') {\n        tags = customTags(tags.slice());\n    }\n    return tags.map(tag => {\n        if (typeof tag !== 'string')\n            return tag;\n        const tagObj = tagsByName[tag];\n        if (tagObj)\n            return tagObj;\n        const keys = Object.keys(tagsByName)\n            .map(key => JSON.stringify(key))\n            .join(', ');\n        throw new Error(`Unknown custom tag \"${tag}\"; use one of ${keys}`);\n    });\n}\n\nexport { coreKnownTags, getTags };\n","import { MAP, SCALAR, SEQ } from '../nodes/identity.js';\nimport { map } from './common/map.js';\nimport { seq } from './common/seq.js';\nimport { string } from './common/string.js';\nimport { getTags, coreKnownTags } from './tags.js';\n\nconst sortMapEntriesByKey = (a, b) => a.key < b.key ? -1 : a.key > b.key ? 1 : 0;\nclass Schema {\n    constructor({ compat, customTags, merge, resolveKnownTags, schema, sortMapEntries, toStringDefaults }) {\n        this.compat = Array.isArray(compat)\n            ? getTags(compat, 'compat')\n            : compat\n                ? getTags(null, compat)\n                : null;\n        this.merge = !!merge;\n        this.name = (typeof schema === 'string' && schema) || 'core';\n        this.knownTags = resolveKnownTags ? coreKnownTags : {};\n        this.tags = getTags(customTags, this.name);\n        this.toStringOptions = toStringDefaults ?? null;\n        Object.defineProperty(this, MAP, { value: map });\n        Object.defineProperty(this, SCALAR, { value: string });\n        Object.defineProperty(this, SEQ, { value: seq });\n        // Used by createMap()\n        this.sortMapEntries =\n            typeof sortMapEntries === 'function'\n                ? sortMapEntries\n                : sortMapEntries === true\n                    ? sortMapEntriesByKey\n                    : null;\n    }\n    clone() {\n        const copy = Object.create(Schema.prototype, Object.getOwnPropertyDescriptors(this));\n        copy.tags = this.tags.slice();\n        return copy;\n    }\n}\n\nexport { Schema };\n","import { isNode } from '../nodes/identity.js';\nimport { createStringifyContext, stringify } from './stringify.js';\nimport { indentComment, lineComment } from './stringifyComment.js';\n\nfunction stringifyDocument(doc, options) {\n    const lines = [];\n    let hasDirectives = options.directives === true;\n    if (options.directives !== false && doc.directives) {\n        const dir = doc.directives.toString(doc);\n        if (dir) {\n            lines.push(dir);\n            hasDirectives = true;\n        }\n        else if (doc.directives.docStart)\n            hasDirectives = true;\n    }\n    if (hasDirectives)\n        lines.push('---');\n    const ctx = createStringifyContext(doc, options);\n    const { commentString } = ctx.options;\n    if (doc.commentBefore) {\n        if (lines.length !== 1)\n            lines.unshift('');\n        const cs = commentString(doc.commentBefore);\n        lines.unshift(indentComment(cs, ''));\n    }\n    let chompKeep = false;\n    let contentComment = null;\n    if (doc.contents) {\n        if (isNode(doc.contents)) {\n            if (doc.contents.spaceBefore && hasDirectives)\n                lines.push('');\n            if (doc.contents.commentBefore) {\n                const cs = commentString(doc.contents.commentBefore);\n                lines.push(indentComment(cs, ''));\n            }\n            // top-level block scalars need to be indented if followed by a comment\n            ctx.forceBlockIndent = !!doc.comment;\n            contentComment = doc.contents.comment;\n        }\n        const onChompKeep = contentComment ? undefined : () => (chompKeep = true);\n        let body = stringify(doc.contents, ctx, () => (contentComment = null), onChompKeep);\n        if (contentComment)\n            body += lineComment(body, '', commentString(contentComment));\n        if ((body[0] === '|' || body[0] === '>') &&\n            lines[lines.length - 1] === '---') {\n            // Top-level block scalars with a preceding doc marker ought to use the\n            // same line for their header.\n            lines[lines.length - 1] = `--- ${body}`;\n        }\n        else\n            lines.push(body);\n    }\n    else {\n        lines.push(stringify(doc.contents, ctx));\n    }\n    if (doc.directives?.docEnd) {\n        if (doc.comment) {\n            const cs = commentString(doc.comment);\n            if (cs.includes('\\n')) {\n                lines.push('...');\n                lines.push(indentComment(cs, ''));\n            }\n            else {\n                lines.push(`... ${cs}`);\n            }\n        }\n        else {\n            lines.push('...');\n        }\n    }\n    else {\n        let dc = doc.comment;\n        if (dc && chompKeep)\n            dc = dc.replace(/^\\n+/, '');\n        if (dc) {\n            if ((!chompKeep || contentComment) && lines[lines.length - 1] !== '')\n                lines.push('');\n            lines.push(indentComment(commentString(dc), ''));\n        }\n    }\n    return lines.join('\\n') + '\\n';\n}\n\nexport { stringifyDocument };\n","import { Alias } from '../nodes/Alias.js';\nimport { isEmptyPath, collectionFromPath } from '../nodes/Collection.js';\nimport { NODE_TYPE, DOC, isNode, isCollection, isScalar } from '../nodes/identity.js';\nimport { Pair } from '../nodes/Pair.js';\nimport { toJS } from '../nodes/toJS.js';\nimport { Schema } from '../schema/Schema.js';\nimport { stringifyDocument } from '../stringify/stringifyDocument.js';\nimport { anchorNames, findNewAnchor, createNodeAnchors } from './anchors.js';\nimport { applyReviver } from './applyReviver.js';\nimport { createNode } from './createNode.js';\nimport { Directives } from './directives.js';\n\nclass Document {\n    constructor(value, replacer, options) {\n        /** A comment before this Document */\n        this.commentBefore = null;\n        /** A comment immediately after this Document */\n        this.comment = null;\n        /** Errors encountered during parsing. */\n        this.errors = [];\n        /** Warnings encountered during parsing. */\n        this.warnings = [];\n        Object.defineProperty(this, NODE_TYPE, { value: DOC });\n        let _replacer = null;\n        if (typeof replacer === 'function' || Array.isArray(replacer)) {\n            _replacer = replacer;\n        }\n        else if (options === undefined && replacer) {\n            options = replacer;\n            replacer = undefined;\n        }\n        const opt = Object.assign({\n            intAsBigInt: false,\n            keepSourceTokens: false,\n            logLevel: 'warn',\n            prettyErrors: true,\n            strict: true,\n            uniqueKeys: true,\n            version: '1.2'\n        }, options);\n        this.options = opt;\n        let { version } = opt;\n        if (options?._directives) {\n            this.directives = options._directives.atDocument();\n            if (this.directives.yaml.explicit)\n                version = this.directives.yaml.version;\n        }\n        else\n            this.directives = new Directives({ version });\n        this.setSchema(version, options);\n        // @ts-expect-error We can't really know that this matches Contents.\n        this.contents =\n            value === undefined ? null : this.createNode(value, _replacer, options);\n    }\n    /**\n     * Create a deep copy of this Document and its contents.\n     *\n     * Custom Node values that inherit from `Object` still refer to their original instances.\n     */\n    clone() {\n        const copy = Object.create(Document.prototype, {\n            [NODE_TYPE]: { value: DOC }\n        });\n        copy.commentBefore = this.commentBefore;\n        copy.comment = this.comment;\n        copy.errors = this.errors.slice();\n        copy.warnings = this.warnings.slice();\n        copy.options = Object.assign({}, this.options);\n        if (this.directives)\n            copy.directives = this.directives.clone();\n        copy.schema = this.schema.clone();\n        // @ts-expect-error We can't really know that this matches Contents.\n        copy.contents = isNode(this.contents)\n            ? this.contents.clone(copy.schema)\n            : this.contents;\n        if (this.range)\n            copy.range = this.range.slice();\n        return copy;\n    }\n    /** Adds a value to the document. */\n    add(value) {\n        if (assertCollection(this.contents))\n            this.contents.add(value);\n    }\n    /** Adds a value to the document. */\n    addIn(path, value) {\n        if (assertCollection(this.contents))\n            this.contents.addIn(path, value);\n    }\n    /**\n     * Create a new `Alias` node, ensuring that the target `node` has the required anchor.\n     *\n     * If `node` already has an anchor, `name` is ignored.\n     * Otherwise, the `node.anchor` value will be set to `name`,\n     * or if an anchor with that name is already present in the document,\n     * `name` will be used as a prefix for a new unique anchor.\n     * If `name` is undefined, the generated anchor will use 'a' as a prefix.\n     */\n    createAlias(node, name) {\n        if (!node.anchor) {\n            const prev = anchorNames(this);\n            node.anchor =\n                // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n                !name || prev.has(name) ? findNewAnchor(name || 'a', prev) : name;\n        }\n        return new Alias(node.anchor);\n    }\n    createNode(value, replacer, options) {\n        let _replacer = undefined;\n        if (typeof replacer === 'function') {\n            value = replacer.call({ '': value }, '', value);\n            _replacer = replacer;\n        }\n        else if (Array.isArray(replacer)) {\n            const keyToStr = (v) => typeof v === 'number' || v instanceof String || v instanceof Number;\n            const asStr = replacer.filter(keyToStr).map(String);\n            if (asStr.length > 0)\n                replacer = replacer.concat(asStr);\n            _replacer = replacer;\n        }\n        else if (options === undefined && replacer) {\n            options = replacer;\n            replacer = undefined;\n        }\n        const { aliasDuplicateObjects, anchorPrefix, flow, keepUndefined, onTagObj, tag } = options ?? {};\n        const { onAnchor, setAnchors, sourceObjects } = createNodeAnchors(this, \n        // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n        anchorPrefix || 'a');\n        const ctx = {\n            aliasDuplicateObjects: aliasDuplicateObjects ?? true,\n            keepUndefined: keepUndefined ?? false,\n            onAnchor,\n            onTagObj,\n            replacer: _replacer,\n            schema: this.schema,\n            sourceObjects\n        };\n        const node = createNode(value, tag, ctx);\n        if (flow && isCollection(node))\n            node.flow = true;\n        setAnchors();\n        return node;\n    }\n    /**\n     * Convert a key and a value into a `Pair` using the current schema,\n     * recursively wrapping all values as `Scalar` or `Collection` nodes.\n     */\n    createPair(key, value, options = {}) {\n        const k = this.createNode(key, null, options);\n        const v = this.createNode(value, null, options);\n        return new Pair(k, v);\n    }\n    /**\n     * Removes a value from the document.\n     * @returns `true` if the item was found and removed.\n     */\n    delete(key) {\n        return assertCollection(this.contents) ? this.contents.delete(key) : false;\n    }\n    /**\n     * Removes a value from the document.\n     * @returns `true` if the item was found and removed.\n     */\n    deleteIn(path) {\n        if (isEmptyPath(path)) {\n            if (this.contents == null)\n                return false;\n            // @ts-expect-error Presumed impossible if Strict extends false\n            this.contents = null;\n            return true;\n        }\n        return assertCollection(this.contents)\n            ? this.contents.deleteIn(path)\n            : false;\n    }\n    /**\n     * Returns item at `key`, or `undefined` if not found. By default unwraps\n     * scalar values from their surrounding node; to disable set `keepScalar` to\n     * `true` (collections are always returned intact).\n     */\n    get(key, keepScalar) {\n        return isCollection(this.contents)\n            ? this.contents.get(key, keepScalar)\n            : undefined;\n    }\n    /**\n     * Returns item at `path`, or `undefined` if not found. By default unwraps\n     * scalar values from their surrounding node; to disable set `keepScalar` to\n     * `true` (collections are always returned intact).\n     */\n    getIn(path, keepScalar) {\n        if (isEmptyPath(path))\n            return !keepScalar && isScalar(this.contents)\n                ? this.contents.value\n                : this.contents;\n        return isCollection(this.contents)\n            ? this.contents.getIn(path, keepScalar)\n            : undefined;\n    }\n    /**\n     * Checks if the document includes a value with the key `key`.\n     */\n    has(key) {\n        return isCollection(this.contents) ? this.contents.has(key) : false;\n    }\n    /**\n     * Checks if the document includes a value at `path`.\n     */\n    hasIn(path) {\n        if (isEmptyPath(path))\n            return this.contents !== undefined;\n        return isCollection(this.contents) ? this.contents.hasIn(path) : false;\n    }\n    /**\n     * Sets a value in this document. For `!!set`, `value` needs to be a\n     * boolean to add/remove the item from the set.\n     */\n    set(key, value) {\n        if (this.contents == null) {\n            // @ts-expect-error We can't really know that this matches Contents.\n            this.contents = collectionFromPath(this.schema, [key], value);\n        }\n        else if (assertCollection(this.contents)) {\n            this.contents.set(key, value);\n        }\n    }\n    /**\n     * Sets a value in this document. For `!!set`, `value` needs to be a\n     * boolean to add/remove the item from the set.\n     */\n    setIn(path, value) {\n        if (isEmptyPath(path)) {\n            // @ts-expect-error We can't really know that this matches Contents.\n            this.contents = value;\n        }\n        else if (this.contents == null) {\n            // @ts-expect-error We can't really know that this matches Contents.\n            this.contents = collectionFromPath(this.schema, Array.from(path), value);\n        }\n        else if (assertCollection(this.contents)) {\n            this.contents.setIn(path, value);\n        }\n    }\n    /**\n     * Change the YAML version and schema used by the document.\n     * A `null` version disables support for directives, explicit tags, anchors, and aliases.\n     * It also requires the `schema` option to be given as a `Schema` instance value.\n     *\n     * Overrides all previously set schema options.\n     */\n    setSchema(version, options = {}) {\n        if (typeof version === 'number')\n            version = String(version);\n        let opt;\n        switch (version) {\n            case '1.1':\n                if (this.directives)\n                    this.directives.yaml.version = '1.1';\n                else\n                    this.directives = new Directives({ version: '1.1' });\n                opt = { merge: true, resolveKnownTags: false, schema: 'yaml-1.1' };\n                break;\n            case '1.2':\n            case 'next':\n                if (this.directives)\n                    this.directives.yaml.version = version;\n                else\n                    this.directives = new Directives({ version });\n                opt = { merge: false, resolveKnownTags: true, schema: 'core' };\n                break;\n            case null:\n                if (this.directives)\n                    delete this.directives;\n                opt = null;\n                break;\n            default: {\n                const sv = JSON.stringify(version);\n                throw new Error(`Expected '1.1', '1.2' or null as first argument, but found: ${sv}`);\n            }\n        }\n        // Not using `instanceof Schema` to allow for duck typing\n        if (options.schema instanceof Object)\n            this.schema = options.schema;\n        else if (opt)\n            this.schema = new Schema(Object.assign(opt, options));\n        else\n            throw new Error(`With a null YAML version, the { schema: Schema } option is required`);\n    }\n    // json & jsonArg are only used from toJSON()\n    toJS({ json, jsonArg, mapAsMap, maxAliasCount, onAnchor, reviver } = {}) {\n        const ctx = {\n            anchors: new Map(),\n            doc: this,\n            keep: !json,\n            mapAsMap: mapAsMap === true,\n            mapKeyWarned: false,\n            maxAliasCount: typeof maxAliasCount === 'number' ? maxAliasCount : 100\n        };\n        const res = toJS(this.contents, jsonArg ?? '', ctx);\n        if (typeof onAnchor === 'function')\n            for (const { count, res } of ctx.anchors.values())\n                onAnchor(res, count);\n        return typeof reviver === 'function'\n            ? applyReviver(reviver, { '': res }, '', res)\n            : res;\n    }\n    /**\n     * A JSON representation of the document `contents`.\n     *\n     * @param jsonArg Used by `JSON.stringify` to indicate the array index or\n     *   property name.\n     */\n    toJSON(jsonArg, onAnchor) {\n        return this.toJS({ json: true, jsonArg, mapAsMap: false, onAnchor });\n    }\n    /** A YAML representation of the document. */\n    toString(options = {}) {\n        if (this.errors.length > 0)\n            throw new Error('Document with errors cannot be stringified');\n        if ('indent' in options &&\n            (!Number.isInteger(options.indent) || Number(options.indent) <= 0)) {\n            const s = JSON.stringify(options.indent);\n            throw new Error(`\"indent\" option must be a positive integer, not ${s}`);\n        }\n        return stringifyDocument(this, options);\n    }\n}\nfunction assertCollection(contents) {\n    if (isCollection(contents))\n        return true;\n    throw new Error('Expected a YAML collection as document contents');\n}\n\nexport { Document };\n","class YAMLError extends Error {\n    constructor(name, pos, code, message) {\n        super();\n        this.name = name;\n        this.code = code;\n        this.message = message;\n        this.pos = pos;\n    }\n}\nclass YAMLParseError extends YAMLError {\n    constructor(pos, code, message) {\n        super('YAMLParseError', pos, code, message);\n    }\n}\nclass YAMLWarning extends YAMLError {\n    constructor(pos, code, message) {\n        super('YAMLWarning', pos, code, message);\n    }\n}\nconst prettifyError = (src, lc) => (error) => {\n    if (error.pos[0] === -1)\n        return;\n    error.linePos = error.pos.map(pos => lc.linePos(pos));\n    const { line, col } = error.linePos[0];\n    error.message += ` at line ${line}, column ${col}`;\n    let ci = col - 1;\n    let lineStr = src\n        .substring(lc.lineStarts[line - 1], lc.lineStarts[line])\n        .replace(/[\\n\\r]+$/, '');\n    // Trim to max 80 chars, keeping col position near the middle\n    if (ci >= 60 && lineStr.length > 80) {\n        const trimStart = Math.min(ci - 39, lineStr.length - 79);\n        lineStr = '…' + lineStr.substring(trimStart);\n        ci -= trimStart - 1;\n    }\n    if (lineStr.length > 80)\n        lineStr = lineStr.substring(0, 79) + '…';\n    // Include previous line in context if pointing at line start\n    if (line > 1 && /^ *$/.test(lineStr.substring(0, ci))) {\n        // Regexp won't match if start is trimmed\n        let prev = src.substring(lc.lineStarts[line - 2], lc.lineStarts[line - 1]);\n        if (prev.length > 80)\n            prev = prev.substring(0, 79) + '…\\n';\n        lineStr = prev + lineStr;\n    }\n    if (/[^ ]/.test(lineStr)) {\n        let count = 1;\n        const end = error.linePos[1];\n        if (end && end.line === line && end.col > col) {\n            count = Math.max(1, Math.min(end.col - col, 80 - ci));\n        }\n        const pointer = ' '.repeat(ci) + '^'.repeat(count);\n        error.message += `:\\n\\n${lineStr}\\n${pointer}\\n`;\n    }\n};\n\nexport { YAMLError, YAMLParseError, YAMLWarning, prettifyError };\n","function resolveProps(tokens, { flow, indicator, next, offset, onError, parentIndent, startOnNewline }) {\n    let spaceBefore = false;\n    let atNewline = startOnNewline;\n    let hasSpace = startOnNewline;\n    let comment = '';\n    let commentSep = '';\n    let hasNewline = false;\n    let reqSpace = false;\n    let tab = null;\n    let anchor = null;\n    let tag = null;\n    let newlineAfterProp = null;\n    let comma = null;\n    let found = null;\n    let start = null;\n    for (const token of tokens) {\n        if (reqSpace) {\n            if (token.type !== 'space' &&\n                token.type !== 'newline' &&\n                token.type !== 'comma')\n                onError(token.offset, 'MISSING_CHAR', 'Tags and anchors must be separated from the next token by white space');\n            reqSpace = false;\n        }\n        if (tab) {\n            if (atNewline && token.type !== 'comment' && token.type !== 'newline') {\n                onError(tab, 'TAB_AS_INDENT', 'Tabs are not allowed as indentation');\n            }\n            tab = null;\n        }\n        switch (token.type) {\n            case 'space':\n                // At the doc level, tabs at line start may be parsed\n                // as leading white space rather than indentation.\n                // In a flow collection, only the parser handles indent.\n                if (!flow &&\n                    (indicator !== 'doc-start' || next?.type !== 'flow-collection') &&\n                    token.source.includes('\\t')) {\n                    tab = token;\n                }\n                hasSpace = true;\n                break;\n            case 'comment': {\n                if (!hasSpace)\n                    onError(token, 'MISSING_CHAR', 'Comments must be separated from other tokens by white space characters');\n                const cb = token.source.substring(1) || ' ';\n                if (!comment)\n                    comment = cb;\n                else\n                    comment += commentSep + cb;\n                commentSep = '';\n                atNewline = false;\n                break;\n            }\n            case 'newline':\n                if (atNewline) {\n                    if (comment)\n                        comment += token.source;\n                    else\n                        spaceBefore = true;\n                }\n                else\n                    commentSep += token.source;\n                atNewline = true;\n                hasNewline = true;\n                if (anchor || tag)\n                    newlineAfterProp = token;\n                hasSpace = true;\n                break;\n            case 'anchor':\n                if (anchor)\n                    onError(token, 'MULTIPLE_ANCHORS', 'A node can have at most one anchor');\n                if (token.source.endsWith(':'))\n                    onError(token.offset + token.source.length - 1, 'BAD_ALIAS', 'Anchor ending in : is ambiguous', true);\n                anchor = token;\n                if (start === null)\n                    start = token.offset;\n                atNewline = false;\n                hasSpace = false;\n                reqSpace = true;\n                break;\n            case 'tag': {\n                if (tag)\n                    onError(token, 'MULTIPLE_TAGS', 'A node can have at most one tag');\n                tag = token;\n                if (start === null)\n                    start = token.offset;\n                atNewline = false;\n                hasSpace = false;\n                reqSpace = true;\n                break;\n            }\n            case indicator:\n                // Could here handle preceding comments differently\n                if (anchor || tag)\n                    onError(token, 'BAD_PROP_ORDER', `Anchors and tags must be after the ${token.source} indicator`);\n                if (found)\n                    onError(token, 'UNEXPECTED_TOKEN', `Unexpected ${token.source} in ${flow ?? 'collection'}`);\n                found = token;\n                atNewline =\n                    indicator === 'seq-item-ind' || indicator === 'explicit-key-ind';\n                hasSpace = false;\n                break;\n            case 'comma':\n                if (flow) {\n                    if (comma)\n                        onError(token, 'UNEXPECTED_TOKEN', `Unexpected , in ${flow}`);\n                    comma = token;\n                    atNewline = false;\n                    hasSpace = false;\n                    break;\n                }\n            // else fallthrough\n            default:\n                onError(token, 'UNEXPECTED_TOKEN', `Unexpected ${token.type} token`);\n                atNewline = false;\n                hasSpace = false;\n        }\n    }\n    const last = tokens[tokens.length - 1];\n    const end = last ? last.offset + last.source.length : offset;\n    if (reqSpace &&\n        next &&\n        next.type !== 'space' &&\n        next.type !== 'newline' &&\n        next.type !== 'comma' &&\n        (next.type !== 'scalar' || next.source !== '')) {\n        onError(next.offset, 'MISSING_CHAR', 'Tags and anchors must be separated from the next token by white space');\n    }\n    if (tab &&\n        ((atNewline && tab.indent <= parentIndent) ||\n            next?.type === 'block-map' ||\n            next?.type === 'block-seq'))\n        onError(tab, 'TAB_AS_INDENT', 'Tabs are not allowed as indentation');\n    return {\n        comma,\n        found,\n        spaceBefore,\n        comment,\n        hasNewline,\n        anchor,\n        tag,\n        newlineAfterProp,\n        end,\n        start: start ?? end\n    };\n}\n\nexport { resolveProps };\n","function containsNewline(key) {\n    if (!key)\n        return null;\n    switch (key.type) {\n        case 'alias':\n        case 'scalar':\n        case 'double-quoted-scalar':\n        case 'single-quoted-scalar':\n            if (key.source.includes('\\n'))\n                return true;\n            if (key.end)\n                for (const st of key.end)\n                    if (st.type === 'newline')\n                        return true;\n            return false;\n        case 'flow-collection':\n            for (const it of key.items) {\n                for (const st of it.start)\n                    if (st.type === 'newline')\n                        return true;\n                if (it.sep)\n                    for (const st of it.sep)\n                        if (st.type === 'newline')\n                            return true;\n                if (containsNewline(it.key) || containsNewline(it.value))\n                    return true;\n            }\n            return false;\n        default:\n            return true;\n    }\n}\n\nexport { containsNewline };\n","import { containsNewline } from './util-contains-newline.js';\n\nfunction flowIndentCheck(indent, fc, onError) {\n    if (fc?.type === 'flow-collection') {\n        const end = fc.end[0];\n        if (end.indent === indent &&\n            (end.source === ']' || end.source === '}') &&\n            containsNewline(fc)) {\n            const msg = 'Flow end indicator should be more indented than parent';\n            onError(end, 'BAD_INDENT', msg, true);\n        }\n    }\n}\n\nexport { flowIndentCheck };\n","import { isScalar } from '../nodes/identity.js';\n\nfunction mapIncludes(ctx, items, search) {\n    const { uniqueKeys } = ctx.options;\n    if (uniqueKeys === false)\n        return false;\n    const isEqual = typeof uniqueKeys === 'function'\n        ? uniqueKeys\n        : (a, b) => a === b ||\n            (isScalar(a) &&\n                isScalar(b) &&\n                a.value === b.value &&\n                !(a.value === '<<' && ctx.schema.merge));\n    return items.some(pair => isEqual(pair.key, search));\n}\n\nexport { mapIncludes };\n","import { Pair } from '../nodes/Pair.js';\nimport { YAMLMap } from '../nodes/YAMLMap.js';\nimport { resolveProps } from './resolve-props.js';\nimport { containsNewline } from './util-contains-newline.js';\nimport { flowIndentCheck } from './util-flow-indent-check.js';\nimport { mapIncludes } from './util-map-includes.js';\n\nconst startColMsg = 'All mapping items must start at the same column';\nfunction resolveBlockMap({ composeNode, composeEmptyNode }, ctx, bm, onError, tag) {\n    const NodeClass = tag?.nodeClass ?? YAMLMap;\n    const map = new NodeClass(ctx.schema);\n    if (ctx.atRoot)\n        ctx.atRoot = false;\n    let offset = bm.offset;\n    let commentEnd = null;\n    for (const collItem of bm.items) {\n        const { start, key, sep, value } = collItem;\n        // key properties\n        const keyProps = resolveProps(start, {\n            indicator: 'explicit-key-ind',\n            next: key ?? sep?.[0],\n            offset,\n            onError,\n            parentIndent: bm.indent,\n            startOnNewline: true\n        });\n        const implicitKey = !keyProps.found;\n        if (implicitKey) {\n            if (key) {\n                if (key.type === 'block-seq')\n                    onError(offset, 'BLOCK_AS_IMPLICIT_KEY', 'A block sequence may not be used as an implicit map key');\n                else if ('indent' in key && key.indent !== bm.indent)\n                    onError(offset, 'BAD_INDENT', startColMsg);\n            }\n            if (!keyProps.anchor && !keyProps.tag && !sep) {\n                commentEnd = keyProps.end;\n                if (keyProps.comment) {\n                    if (map.comment)\n                        map.comment += '\\n' + keyProps.comment;\n                    else\n                        map.comment = keyProps.comment;\n                }\n                continue;\n            }\n            if (keyProps.newlineAfterProp || containsNewline(key)) {\n                onError(key ?? start[start.length - 1], 'MULTILINE_IMPLICIT_KEY', 'Implicit keys need to be on a single line');\n            }\n        }\n        else if (keyProps.found?.indent !== bm.indent) {\n            onError(offset, 'BAD_INDENT', startColMsg);\n        }\n        // key value\n        const keyStart = keyProps.end;\n        const keyNode = key\n            ? composeNode(ctx, key, keyProps, onError)\n            : composeEmptyNode(ctx, keyStart, start, null, keyProps, onError);\n        if (ctx.schema.compat)\n            flowIndentCheck(bm.indent, key, onError);\n        if (mapIncludes(ctx, map.items, keyNode))\n            onError(keyStart, 'DUPLICATE_KEY', 'Map keys must be unique');\n        // value properties\n        const valueProps = resolveProps(sep ?? [], {\n            indicator: 'map-value-ind',\n            next: value,\n            offset: keyNode.range[2],\n            onError,\n            parentIndent: bm.indent,\n            startOnNewline: !key || key.type === 'block-scalar'\n        });\n        offset = valueProps.end;\n        if (valueProps.found) {\n            if (implicitKey) {\n                if (value?.type === 'block-map' && !valueProps.hasNewline)\n                    onError(offset, 'BLOCK_AS_IMPLICIT_KEY', 'Nested mappings are not allowed in compact mappings');\n                if (ctx.options.strict &&\n                    keyProps.start < valueProps.found.offset - 1024)\n                    onError(keyNode.range, 'KEY_OVER_1024_CHARS', 'The : indicator must be at most 1024 chars after the start of an implicit block mapping key');\n            }\n            // value value\n            const valueNode = value\n                ? composeNode(ctx, value, valueProps, onError)\n                : composeEmptyNode(ctx, offset, sep, null, valueProps, onError);\n            if (ctx.schema.compat)\n                flowIndentCheck(bm.indent, value, onError);\n            offset = valueNode.range[2];\n            const pair = new Pair(keyNode, valueNode);\n            if (ctx.options.keepSourceTokens)\n                pair.srcToken = collItem;\n            map.items.push(pair);\n        }\n        else {\n            // key with no value\n            if (implicitKey)\n                onError(keyNode.range, 'MISSING_CHAR', 'Implicit map keys need to be followed by map values');\n            if (valueProps.comment) {\n                if (keyNode.comment)\n                    keyNode.comment += '\\n' + valueProps.comment;\n                else\n                    keyNode.comment = valueProps.comment;\n            }\n            const pair = new Pair(keyNode);\n            if (ctx.options.keepSourceTokens)\n                pair.srcToken = collItem;\n            map.items.push(pair);\n        }\n    }\n    if (commentEnd && commentEnd < offset)\n        onError(commentEnd, 'IMPOSSIBLE', 'Map comment with trailing content');\n    map.range = [bm.offset, offset, commentEnd ?? offset];\n    return map;\n}\n\nexport { resolveBlockMap };\n","import { YAMLSeq } from '../nodes/YAMLSeq.js';\nimport { resolveProps } from './resolve-props.js';\nimport { flowIndentCheck } from './util-flow-indent-check.js';\n\nfunction resolveBlockSeq({ composeNode, composeEmptyNode }, ctx, bs, onError, tag) {\n    const NodeClass = tag?.nodeClass ?? YAMLSeq;\n    const seq = new NodeClass(ctx.schema);\n    if (ctx.atRoot)\n        ctx.atRoot = false;\n    let offset = bs.offset;\n    let commentEnd = null;\n    for (const { start, value } of bs.items) {\n        const props = resolveProps(start, {\n            indicator: 'seq-item-ind',\n            next: value,\n            offset,\n            onError,\n            parentIndent: bs.indent,\n            startOnNewline: true\n        });\n        if (!props.found) {\n            if (props.anchor || props.tag || value) {\n                if (value && value.type === 'block-seq')\n                    onError(props.end, 'BAD_INDENT', 'All sequence items must start at the same column');\n                else\n                    onError(offset, 'MISSING_CHAR', 'Sequence item without - indicator');\n            }\n            else {\n                commentEnd = props.end;\n                if (props.comment)\n                    seq.comment = props.comment;\n                continue;\n            }\n        }\n        const node = value\n            ? composeNode(ctx, value, props, onError)\n            : composeEmptyNode(ctx, props.end, start, null, props, onError);\n        if (ctx.schema.compat)\n            flowIndentCheck(bs.indent, value, onError);\n        offset = node.range[2];\n        seq.items.push(node);\n    }\n    seq.range = [bs.offset, offset, commentEnd ?? offset];\n    return seq;\n}\n\nexport { resolveBlockSeq };\n","function resolveEnd(end, offset, reqSpace, onError) {\n    let comment = '';\n    if (end) {\n        let hasSpace = false;\n        let sep = '';\n        for (const token of end) {\n            const { source, type } = token;\n            switch (type) {\n                case 'space':\n                    hasSpace = true;\n                    break;\n                case 'comment': {\n                    if (reqSpace && !hasSpace)\n                        onError(token, 'MISSING_CHAR', 'Comments must be separated from other tokens by white space characters');\n                    const cb = source.substring(1) || ' ';\n                    if (!comment)\n                        comment = cb;\n                    else\n                        comment += sep + cb;\n                    sep = '';\n                    break;\n                }\n                case 'newline':\n                    if (comment)\n                        sep += source;\n                    hasSpace = true;\n                    break;\n                default:\n                    onError(token, 'UNEXPECTED_TOKEN', `Unexpected ${type} at node end`);\n            }\n            offset += source.length;\n        }\n    }\n    return { comment, offset };\n}\n\nexport { resolveEnd };\n","import { isPair } from '../nodes/identity.js';\nimport { Pair } from '../nodes/Pair.js';\nimport { YAMLMap } from '../nodes/YAMLMap.js';\nimport { YAMLSeq } from '../nodes/YAMLSeq.js';\nimport { resolveEnd } from './resolve-end.js';\nimport { resolveProps } from './resolve-props.js';\nimport { containsNewline } from './util-contains-newline.js';\nimport { mapIncludes } from './util-map-includes.js';\n\nconst blockMsg = 'Block collections are not allowed within flow collections';\nconst isBlock = (token) => token && (token.type === 'block-map' || token.type === 'block-seq');\nfunction resolveFlowCollection({ composeNode, composeEmptyNode }, ctx, fc, onError, tag) {\n    const isMap = fc.start.source === '{';\n    const fcName = isMap ? 'flow map' : 'flow sequence';\n    const NodeClass = (tag?.nodeClass ?? (isMap ? YAMLMap : YAMLSeq));\n    const coll = new NodeClass(ctx.schema);\n    coll.flow = true;\n    const atRoot = ctx.atRoot;\n    if (atRoot)\n        ctx.atRoot = false;\n    let offset = fc.offset + fc.start.source.length;\n    for (let i = 0; i < fc.items.length; ++i) {\n        const collItem = fc.items[i];\n        const { start, key, sep, value } = collItem;\n        const props = resolveProps(start, {\n            flow: fcName,\n            indicator: 'explicit-key-ind',\n            next: key ?? sep?.[0],\n            offset,\n            onError,\n            parentIndent: fc.indent,\n            startOnNewline: false\n        });\n        if (!props.found) {\n            if (!props.anchor && !props.tag && !sep && !value) {\n                if (i === 0 && props.comma)\n                    onError(props.comma, 'UNEXPECTED_TOKEN', `Unexpected , in ${fcName}`);\n                else if (i < fc.items.length - 1)\n                    onError(props.start, 'UNEXPECTED_TOKEN', `Unexpected empty item in ${fcName}`);\n                if (props.comment) {\n                    if (coll.comment)\n                        coll.comment += '\\n' + props.comment;\n                    else\n                        coll.comment = props.comment;\n                }\n                offset = props.end;\n                continue;\n            }\n            if (!isMap && ctx.options.strict && containsNewline(key))\n                onError(key, // checked by containsNewline()\n                'MULTILINE_IMPLICIT_KEY', 'Implicit keys of flow sequence pairs need to be on a single line');\n        }\n        if (i === 0) {\n            if (props.comma)\n                onError(props.comma, 'UNEXPECTED_TOKEN', `Unexpected , in ${fcName}`);\n        }\n        else {\n            if (!props.comma)\n                onError(props.start, 'MISSING_CHAR', `Missing , between ${fcName} items`);\n            if (props.comment) {\n                let prevItemComment = '';\n                loop: for (const st of start) {\n                    switch (st.type) {\n                        case 'comma':\n                        case 'space':\n                            break;\n                        case 'comment':\n                            prevItemComment = st.source.substring(1);\n                            break loop;\n                        default:\n                            break loop;\n                    }\n                }\n                if (prevItemComment) {\n                    let prev = coll.items[coll.items.length - 1];\n                    if (isPair(prev))\n                        prev = prev.value ?? prev.key;\n                    if (prev.comment)\n                        prev.comment += '\\n' + prevItemComment;\n                    else\n                        prev.comment = prevItemComment;\n                    props.comment = props.comment.substring(prevItemComment.length + 1);\n                }\n            }\n        }\n        if (!isMap && !sep && !props.found) {\n            // item is a value in a seq\n            // → key & sep are empty, start does not include ? or :\n            const valueNode = value\n                ? composeNode(ctx, value, props, onError)\n                : composeEmptyNode(ctx, props.end, sep, null, props, onError);\n            coll.items.push(valueNode);\n            offset = valueNode.range[2];\n            if (isBlock(value))\n                onError(valueNode.range, 'BLOCK_IN_FLOW', blockMsg);\n        }\n        else {\n            // item is a key+value pair\n            // key value\n            const keyStart = props.end;\n            const keyNode = key\n                ? composeNode(ctx, key, props, onError)\n                : composeEmptyNode(ctx, keyStart, start, null, props, onError);\n            if (isBlock(key))\n                onError(keyNode.range, 'BLOCK_IN_FLOW', blockMsg);\n            // value properties\n            const valueProps = resolveProps(sep ?? [], {\n                flow: fcName,\n                indicator: 'map-value-ind',\n                next: value,\n                offset: keyNode.range[2],\n                onError,\n                parentIndent: fc.indent,\n                startOnNewline: false\n            });\n            if (valueProps.found) {\n                if (!isMap && !props.found && ctx.options.strict) {\n                    if (sep)\n                        for (const st of sep) {\n                            if (st === valueProps.found)\n                                break;\n                            if (st.type === 'newline') {\n                                onError(st, 'MULTILINE_IMPLICIT_KEY', 'Implicit keys of flow sequence pairs need to be on a single line');\n                                break;\n                            }\n                        }\n                    if (props.start < valueProps.found.offset - 1024)\n                        onError(valueProps.found, 'KEY_OVER_1024_CHARS', 'The : indicator must be at most 1024 chars after the start of an implicit flow sequence key');\n                }\n            }\n            else if (value) {\n                if ('source' in value && value.source && value.source[0] === ':')\n                    onError(value, 'MISSING_CHAR', `Missing space after : in ${fcName}`);\n                else\n                    onError(valueProps.start, 'MISSING_CHAR', `Missing , or : between ${fcName} items`);\n            }\n            // value value\n            const valueNode = value\n                ? composeNode(ctx, value, valueProps, onError)\n                : valueProps.found\n                    ? composeEmptyNode(ctx, valueProps.end, sep, null, valueProps, onError)\n                    : null;\n            if (valueNode) {\n                if (isBlock(value))\n                    onError(valueNode.range, 'BLOCK_IN_FLOW', blockMsg);\n            }\n            else if (valueProps.comment) {\n                if (keyNode.comment)\n                    keyNode.comment += '\\n' + valueProps.comment;\n                else\n                    keyNode.comment = valueProps.comment;\n            }\n            const pair = new Pair(keyNode, valueNode);\n            if (ctx.options.keepSourceTokens)\n                pair.srcToken = collItem;\n            if (isMap) {\n                const map = coll;\n                if (mapIncludes(ctx, map.items, keyNode))\n                    onError(keyStart, 'DUPLICATE_KEY', 'Map keys must be unique');\n                map.items.push(pair);\n            }\n            else {\n                const map = new YAMLMap(ctx.schema);\n                map.flow = true;\n                map.items.push(pair);\n                coll.items.push(map);\n            }\n            offset = valueNode ? valueNode.range[2] : valueProps.end;\n        }\n    }\n    const expectedEnd = isMap ? '}' : ']';\n    const [ce, ...ee] = fc.end;\n    let cePos = offset;\n    if (ce && ce.source === expectedEnd)\n        cePos = ce.offset + ce.source.length;\n    else {\n        const name = fcName[0].toUpperCase() + fcName.substring(1);\n        const msg = atRoot\n            ? `${name} must end with a ${expectedEnd}`\n            : `${name} in block collection must be sufficiently indented and end with a ${expectedEnd}`;\n        onError(offset, atRoot ? 'MISSING_CHAR' : 'BAD_INDENT', msg);\n        if (ce && ce.source.length !== 1)\n            ee.unshift(ce);\n    }\n    if (ee.length > 0) {\n        const end = resolveEnd(ee, cePos, ctx.options.strict, onError);\n        if (end.comment) {\n            if (coll.comment)\n                coll.comment += '\\n' + end.comment;\n            else\n                coll.comment = end.comment;\n        }\n        coll.range = [fc.offset, cePos, end.offset];\n    }\n    else {\n        coll.range = [fc.offset, cePos, cePos];\n    }\n    return coll;\n}\n\nexport { resolveFlowCollection };\n","import { isNode } from '../nodes/identity.js';\nimport { Scalar } from '../nodes/Scalar.js';\nimport { YAMLMap } from '../nodes/YAMLMap.js';\nimport { YAMLSeq } from '../nodes/YAMLSeq.js';\nimport { resolveBlockMap } from './resolve-block-map.js';\nimport { resolveBlockSeq } from './resolve-block-seq.js';\nimport { resolveFlowCollection } from './resolve-flow-collection.js';\n\nfunction resolveCollection(CN, ctx, token, onError, tagName, tag) {\n    const coll = token.type === 'block-map'\n        ? resolveBlockMap(CN, ctx, token, onError, tag)\n        : token.type === 'block-seq'\n            ? resolveBlockSeq(CN, ctx, token, onError, tag)\n            : resolveFlowCollection(CN, ctx, token, onError, tag);\n    const Coll = coll.constructor;\n    // If we got a tagName matching the class, or the tag name is '!',\n    // then use the tagName from the node class used to create it.\n    if (tagName === '!' || tagName === Coll.tagName) {\n        coll.tag = Coll.tagName;\n        return coll;\n    }\n    if (tagName)\n        coll.tag = tagName;\n    return coll;\n}\nfunction composeCollection(CN, ctx, token, props, onError) {\n    const tagToken = props.tag;\n    const tagName = !tagToken\n        ? null\n        : ctx.directives.tagName(tagToken.source, msg => onError(tagToken, 'TAG_RESOLVE_FAILED', msg));\n    if (token.type === 'block-seq') {\n        const { anchor, newlineAfterProp: nl } = props;\n        const lastProp = anchor && tagToken\n            ? anchor.offset > tagToken.offset\n                ? anchor\n                : tagToken\n            : (anchor ?? tagToken);\n        if (lastProp && (!nl || nl.offset < lastProp.offset)) {\n            const message = 'Missing newline after block sequence props';\n            onError(lastProp, 'MISSING_CHAR', message);\n        }\n    }\n    const expType = token.type === 'block-map'\n        ? 'map'\n        : token.type === 'block-seq'\n            ? 'seq'\n            : token.start.source === '{'\n                ? 'map'\n                : 'seq';\n    // shortcut: check if it's a generic YAMLMap or YAMLSeq\n    // before jumping into the custom tag logic.\n    if (!tagToken ||\n        !tagName ||\n        tagName === '!' ||\n        (tagName === YAMLMap.tagName && expType === 'map') ||\n        (tagName === YAMLSeq.tagName && expType === 'seq')) {\n        return resolveCollection(CN, ctx, token, onError, tagName);\n    }\n    let tag = ctx.schema.tags.find(t => t.tag === tagName && t.collection === expType);\n    if (!tag) {\n        const kt = ctx.schema.knownTags[tagName];\n        if (kt && kt.collection === expType) {\n            ctx.schema.tags.push(Object.assign({}, kt, { default: false }));\n            tag = kt;\n        }\n        else {\n            if (kt?.collection) {\n                onError(tagToken, 'BAD_COLLECTION_TYPE', `${kt.tag} used for ${expType} collection, but expects ${kt.collection}`, true);\n            }\n            else {\n                onError(tagToken, 'TAG_RESOLVE_FAILED', `Unresolved tag: ${tagName}`, true);\n            }\n            return resolveCollection(CN, ctx, token, onError, tagName);\n        }\n    }\n    const coll = resolveCollection(CN, ctx, token, onError, tagName, tag);\n    const res = tag.resolve?.(coll, msg => onError(tagToken, 'TAG_RESOLVE_FAILED', msg), ctx.options) ?? coll;\n    const node = isNode(res)\n        ? res\n        : new Scalar(res);\n    node.range = coll.range;\n    node.tag = tagName;\n    if (tag?.format)\n        node.format = tag.format;\n    return node;\n}\n\nexport { composeCollection };\n","import { Scalar } from '../nodes/Scalar.js';\n\nfunction resolveBlockScalar(ctx, scalar, onError) {\n    const start = scalar.offset;\n    const header = parseBlockScalarHeader(scalar, ctx.options.strict, onError);\n    if (!header)\n        return { value: '', type: null, comment: '', range: [start, start, start] };\n    const type = header.mode === '>' ? Scalar.BLOCK_FOLDED : Scalar.BLOCK_LITERAL;\n    const lines = scalar.source ? splitLines(scalar.source) : [];\n    // determine the end of content & start of chomping\n    let chompStart = lines.length;\n    for (let i = lines.length - 1; i >= 0; --i) {\n        const content = lines[i][1];\n        if (content === '' || content === '\\r')\n            chompStart = i;\n        else\n            break;\n    }\n    // shortcut for empty contents\n    if (chompStart === 0) {\n        const value = header.chomp === '+' && lines.length > 0\n            ? '\\n'.repeat(Math.max(1, lines.length - 1))\n            : '';\n        let end = start + header.length;\n        if (scalar.source)\n            end += scalar.source.length;\n        return { value, type, comment: header.comment, range: [start, end, end] };\n    }\n    // find the indentation level to trim from start\n    let trimIndent = scalar.indent + header.indent;\n    let offset = scalar.offset + header.length;\n    let contentStart = 0;\n    for (let i = 0; i < chompStart; ++i) {\n        const [indent, content] = lines[i];\n        if (content === '' || content === '\\r') {\n            if (header.indent === 0 && indent.length > trimIndent)\n                trimIndent = indent.length;\n        }\n        else {\n            if (indent.length < trimIndent) {\n                const message = 'Block scalars with more-indented leading empty lines must use an explicit indentation indicator';\n                onError(offset + indent.length, 'MISSING_CHAR', message);\n            }\n            if (header.indent === 0)\n                trimIndent = indent.length;\n            contentStart = i;\n            if (trimIndent === 0 && !ctx.atRoot) {\n                const message = 'Block scalar values in collections must be indented';\n                onError(offset, 'BAD_INDENT', message);\n            }\n            break;\n        }\n        offset += indent.length + content.length + 1;\n    }\n    // include trailing more-indented empty lines in content\n    for (let i = lines.length - 1; i >= chompStart; --i) {\n        if (lines[i][0].length > trimIndent)\n            chompStart = i + 1;\n    }\n    let value = '';\n    let sep = '';\n    let prevMoreIndented = false;\n    // leading whitespace is kept intact\n    for (let i = 0; i < contentStart; ++i)\n        value += lines[i][0].slice(trimIndent) + '\\n';\n    for (let i = contentStart; i < chompStart; ++i) {\n        let [indent, content] = lines[i];\n        offset += indent.length + content.length + 1;\n        const crlf = content[content.length - 1] === '\\r';\n        if (crlf)\n            content = content.slice(0, -1);\n        /* istanbul ignore if already caught in lexer */\n        if (content && indent.length < trimIndent) {\n            const src = header.indent\n                ? 'explicit indentation indicator'\n                : 'first line';\n            const message = `Block scalar lines must not be less indented than their ${src}`;\n            onError(offset - content.length - (crlf ? 2 : 1), 'BAD_INDENT', message);\n            indent = '';\n        }\n        if (type === Scalar.BLOCK_LITERAL) {\n            value += sep + indent.slice(trimIndent) + content;\n            sep = '\\n';\n        }\n        else if (indent.length > trimIndent || content[0] === '\\t') {\n            // more-indented content within a folded block\n            if (sep === ' ')\n                sep = '\\n';\n            else if (!prevMoreIndented && sep === '\\n')\n                sep = '\\n\\n';\n            value += sep + indent.slice(trimIndent) + content;\n            sep = '\\n';\n            prevMoreIndented = true;\n        }\n        else if (content === '') {\n            // empty line\n            if (sep === '\\n')\n                value += '\\n';\n            else\n                sep = '\\n';\n        }\n        else {\n            value += sep + content;\n            sep = ' ';\n            prevMoreIndented = false;\n        }\n    }\n    switch (header.chomp) {\n        case '-':\n            break;\n        case '+':\n            for (let i = chompStart; i < lines.length; ++i)\n                value += '\\n' + lines[i][0].slice(trimIndent);\n            if (value[value.length - 1] !== '\\n')\n                value += '\\n';\n            break;\n        default:\n            value += '\\n';\n    }\n    const end = start + header.length + scalar.source.length;\n    return { value, type, comment: header.comment, range: [start, end, end] };\n}\nfunction parseBlockScalarHeader({ offset, props }, strict, onError) {\n    /* istanbul ignore if should not happen */\n    if (props[0].type !== 'block-scalar-header') {\n        onError(props[0], 'IMPOSSIBLE', 'Block scalar header not found');\n        return null;\n    }\n    const { source } = props[0];\n    const mode = source[0];\n    let indent = 0;\n    let chomp = '';\n    let error = -1;\n    for (let i = 1; i < source.length; ++i) {\n        const ch = source[i];\n        if (!chomp && (ch === '-' || ch === '+'))\n            chomp = ch;\n        else {\n            const n = Number(ch);\n            if (!indent && n)\n                indent = n;\n            else if (error === -1)\n                error = offset + i;\n        }\n    }\n    if (error !== -1)\n        onError(error, 'UNEXPECTED_TOKEN', `Block scalar header includes extra characters: ${source}`);\n    let hasSpace = false;\n    let comment = '';\n    let length = source.length;\n    for (let i = 1; i < props.length; ++i) {\n        const token = props[i];\n        switch (token.type) {\n            case 'space':\n                hasSpace = true;\n            // fallthrough\n            case 'newline':\n                length += token.source.length;\n                break;\n            case 'comment':\n                if (strict && !hasSpace) {\n                    const message = 'Comments must be separated from other tokens by white space characters';\n                    onError(token, 'MISSING_CHAR', message);\n                }\n                length += token.source.length;\n                comment = token.source.substring(1);\n                break;\n            case 'error':\n                onError(token, 'UNEXPECTED_TOKEN', token.message);\n                length += token.source.length;\n                break;\n            /* istanbul ignore next should not happen */\n            default: {\n                const message = `Unexpected token in block scalar header: ${token.type}`;\n                onError(token, 'UNEXPECTED_TOKEN', message);\n                const ts = token.source;\n                if (ts && typeof ts === 'string')\n                    length += ts.length;\n            }\n        }\n    }\n    return { mode, indent, chomp, comment, length };\n}\n/** @returns Array of lines split up as `[indent, content]` */\nfunction splitLines(source) {\n    const split = source.split(/\\n( *)/);\n    const first = split[0];\n    const m = first.match(/^( *)/);\n    const line0 = m?.[1]\n        ? [m[1], first.slice(m[1].length)]\n        : ['', first];\n    const lines = [line0];\n    for (let i = 1; i < split.length; i += 2)\n        lines.push([split[i], split[i + 1]]);\n    return lines;\n}\n\nexport { resolveBlockScalar };\n","import { Scalar } from '../nodes/Scalar.js';\nimport { resolveEnd } from './resolve-end.js';\n\nfunction resolveFlowScalar(scalar, strict, onError) {\n    const { offset, type, source, end } = scalar;\n    let _type;\n    let value;\n    const _onError = (rel, code, msg) => onError(offset + rel, code, msg);\n    switch (type) {\n        case 'scalar':\n            _type = Scalar.PLAIN;\n            value = plainValue(source, _onError);\n            break;\n        case 'single-quoted-scalar':\n            _type = Scalar.QUOTE_SINGLE;\n            value = singleQuotedValue(source, _onError);\n            break;\n        case 'double-quoted-scalar':\n            _type = Scalar.QUOTE_DOUBLE;\n            value = doubleQuotedValue(source, _onError);\n            break;\n        /* istanbul ignore next should not happen */\n        default:\n            onError(scalar, 'UNEXPECTED_TOKEN', `Expected a flow scalar value, but found: ${type}`);\n            return {\n                value: '',\n                type: null,\n                comment: '',\n                range: [offset, offset + source.length, offset + source.length]\n            };\n    }\n    const valueEnd = offset + source.length;\n    const re = resolveEnd(end, valueEnd, strict, onError);\n    return {\n        value,\n        type: _type,\n        comment: re.comment,\n        range: [offset, valueEnd, re.offset]\n    };\n}\nfunction plainValue(source, onError) {\n    let badChar = '';\n    switch (source[0]) {\n        /* istanbul ignore next should not happen */\n        case '\\t':\n            badChar = 'a tab character';\n            break;\n        case ',':\n            badChar = 'flow indicator character ,';\n            break;\n        case '%':\n            badChar = 'directive indicator character %';\n            break;\n        case '|':\n        case '>': {\n            badChar = `block scalar indicator ${source[0]}`;\n            break;\n        }\n        case '@':\n        case '`': {\n            badChar = `reserved character ${source[0]}`;\n            break;\n        }\n    }\n    if (badChar)\n        onError(0, 'BAD_SCALAR_START', `Plain value cannot start with ${badChar}`);\n    return foldLines(source);\n}\nfunction singleQuotedValue(source, onError) {\n    if (source[source.length - 1] !== \"'\" || source.length === 1)\n        onError(source.length, 'MISSING_CHAR', \"Missing closing 'quote\");\n    return foldLines(source.slice(1, -1)).replace(/''/g, \"'\");\n}\nfunction foldLines(source) {\n    /**\n     * The negative lookbehind here and in the `re` RegExp is to\n     * prevent causing a polynomial search time in certain cases.\n     *\n     * The try-catch is for Safari, which doesn't support this yet:\n     * https://caniuse.com/js-regexp-lookbehind\n     */\n    let first, line;\n    try {\n        first = new RegExp('(.*?)(?<![ \\t])[ \\t]*\\r?\\n', 'sy');\n        line = new RegExp('[ \\t]*(.*?)(?:(?<![ \\t])[ \\t]*)?\\r?\\n', 'sy');\n    }\n    catch (_) {\n        first = /(.*?)[ \\t]*\\r?\\n/sy;\n        line = /[ \\t]*(.*?)[ \\t]*\\r?\\n/sy;\n    }\n    let match = first.exec(source);\n    if (!match)\n        return source;\n    let res = match[1];\n    let sep = ' ';\n    let pos = first.lastIndex;\n    line.lastIndex = pos;\n    while ((match = line.exec(source))) {\n        if (match[1] === '') {\n            if (sep === '\\n')\n                res += sep;\n            else\n                sep = '\\n';\n        }\n        else {\n            res += sep + match[1];\n            sep = ' ';\n        }\n        pos = line.lastIndex;\n    }\n    const last = /[ \\t]*(.*)/sy;\n    last.lastIndex = pos;\n    match = last.exec(source);\n    return res + sep + (match?.[1] ?? '');\n}\nfunction doubleQuotedValue(source, onError) {\n    let res = '';\n    for (let i = 1; i < source.length - 1; ++i) {\n        const ch = source[i];\n        if (ch === '\\r' && source[i + 1] === '\\n')\n            continue;\n        if (ch === '\\n') {\n            const { fold, offset } = foldNewline(source, i);\n            res += fold;\n            i = offset;\n        }\n        else if (ch === '\\\\') {\n            let next = source[++i];\n            const cc = escapeCodes[next];\n            if (cc)\n                res += cc;\n            else if (next === '\\n') {\n                // skip escaped newlines, but still trim the following line\n                next = source[i + 1];\n                while (next === ' ' || next === '\\t')\n                    next = source[++i + 1];\n            }\n            else if (next === '\\r' && source[i + 1] === '\\n') {\n                // skip escaped CRLF newlines, but still trim the following line\n                next = source[++i + 1];\n                while (next === ' ' || next === '\\t')\n                    next = source[++i + 1];\n            }\n            else if (next === 'x' || next === 'u' || next === 'U') {\n                const length = { x: 2, u: 4, U: 8 }[next];\n                res += parseCharCode(source, i + 1, length, onError);\n                i += length;\n            }\n            else {\n                const raw = source.substr(i - 1, 2);\n                onError(i - 1, 'BAD_DQ_ESCAPE', `Invalid escape sequence ${raw}`);\n                res += raw;\n            }\n        }\n        else if (ch === ' ' || ch === '\\t') {\n            // trim trailing whitespace\n            const wsStart = i;\n            let next = source[i + 1];\n            while (next === ' ' || next === '\\t')\n                next = source[++i + 1];\n            if (next !== '\\n' && !(next === '\\r' && source[i + 2] === '\\n'))\n                res += i > wsStart ? source.slice(wsStart, i + 1) : ch;\n        }\n        else {\n            res += ch;\n        }\n    }\n    if (source[source.length - 1] !== '\"' || source.length === 1)\n        onError(source.length, 'MISSING_CHAR', 'Missing closing \"quote');\n    return res;\n}\n/**\n * Fold a single newline into a space, multiple newlines to N - 1 newlines.\n * Presumes `source[offset] === '\\n'`\n */\nfunction foldNewline(source, offset) {\n    let fold = '';\n    let ch = source[offset + 1];\n    while (ch === ' ' || ch === '\\t' || ch === '\\n' || ch === '\\r') {\n        if (ch === '\\r' && source[offset + 2] !== '\\n')\n            break;\n        if (ch === '\\n')\n            fold += '\\n';\n        offset += 1;\n        ch = source[offset + 1];\n    }\n    if (!fold)\n        fold = ' ';\n    return { fold, offset };\n}\nconst escapeCodes = {\n    '0': '\\0', // null character\n    a: '\\x07', // bell character\n    b: '\\b', // backspace\n    e: '\\x1b', // escape character\n    f: '\\f', // form feed\n    n: '\\n', // line feed\n    r: '\\r', // carriage return\n    t: '\\t', // horizontal tab\n    v: '\\v', // vertical tab\n    N: '\\u0085', // Unicode next line\n    _: '\\u00a0', // Unicode non-breaking space\n    L: '\\u2028', // Unicode line separator\n    P: '\\u2029', // Unicode paragraph separator\n    ' ': ' ',\n    '\"': '\"',\n    '/': '/',\n    '\\\\': '\\\\',\n    '\\t': '\\t'\n};\nfunction parseCharCode(source, offset, length, onError) {\n    const cc = source.substr(offset, length);\n    const ok = cc.length === length && /^[0-9a-fA-F]+$/.test(cc);\n    const code = ok ? parseInt(cc, 16) : NaN;\n    if (isNaN(code)) {\n        const raw = source.substr(offset - 2, length + 2);\n        onError(offset - 2, 'BAD_DQ_ESCAPE', `Invalid escape sequence ${raw}`);\n        return raw;\n    }\n    return String.fromCodePoint(code);\n}\n\nexport { resolveFlowScalar };\n","import { SCALAR, isScalar } from '../nodes/identity.js';\nimport { Scalar } from '../nodes/Scalar.js';\nimport { resolveBlockScalar } from './resolve-block-scalar.js';\nimport { resolveFlowScalar } from './resolve-flow-scalar.js';\n\nfunction composeScalar(ctx, token, tagToken, onError) {\n    const { value, type, comment, range } = token.type === 'block-scalar'\n        ? resolveBlockScalar(ctx, token, onError)\n        : resolveFlowScalar(token, ctx.options.strict, onError);\n    const tagName = tagToken\n        ? ctx.directives.tagName(tagToken.source, msg => onError(tagToken, 'TAG_RESOLVE_FAILED', msg))\n        : null;\n    const tag = tagToken && tagName\n        ? findScalarTagByName(ctx.schema, value, tagName, tagToken, onError)\n        : token.type === 'scalar'\n            ? findScalarTagByTest(ctx, value, token, onError)\n            : ctx.schema[SCALAR];\n    let scalar;\n    try {\n        const res = tag.resolve(value, msg => onError(tagToken ?? token, 'TAG_RESOLVE_FAILED', msg), ctx.options);\n        scalar = isScalar(res) ? res : new Scalar(res);\n    }\n    catch (error) {\n        const msg = error instanceof Error ? error.message : String(error);\n        onError(tagToken ?? token, 'TAG_RESOLVE_FAILED', msg);\n        scalar = new Scalar(value);\n    }\n    scalar.range = range;\n    scalar.source = value;\n    if (type)\n        scalar.type = type;\n    if (tagName)\n        scalar.tag = tagName;\n    if (tag.format)\n        scalar.format = tag.format;\n    if (comment)\n        scalar.comment = comment;\n    return scalar;\n}\nfunction findScalarTagByName(schema, value, tagName, tagToken, onError) {\n    if (tagName === '!')\n        return schema[SCALAR]; // non-specific tag\n    const matchWithTest = [];\n    for (const tag of schema.tags) {\n        if (!tag.collection && tag.tag === tagName) {\n            if (tag.default && tag.test)\n                matchWithTest.push(tag);\n            else\n                return tag;\n        }\n    }\n    for (const tag of matchWithTest)\n        if (tag.test?.test(value))\n            return tag;\n    const kt = schema.knownTags[tagName];\n    if (kt && !kt.collection) {\n        // Ensure that the known tag is available for stringifying,\n        // but does not get used by default.\n        schema.tags.push(Object.assign({}, kt, { default: false, test: undefined }));\n        return kt;\n    }\n    onError(tagToken, 'TAG_RESOLVE_FAILED', `Unresolved tag: ${tagName}`, tagName !== 'tag:yaml.org,2002:str');\n    return schema[SCALAR];\n}\nfunction findScalarTagByTest({ directives, schema }, value, token, onError) {\n    const tag = schema.tags.find(tag => tag.default && tag.test?.test(value)) || schema[SCALAR];\n    if (schema.compat) {\n        const compat = schema.compat.find(tag => tag.default && tag.test?.test(value)) ??\n            schema[SCALAR];\n        if (tag.tag !== compat.tag) {\n            const ts = directives.tagString(tag.tag);\n            const cs = directives.tagString(compat.tag);\n            const msg = `Value may be parsed as either ${ts} or ${cs}`;\n            onError(token, 'TAG_RESOLVE_FAILED', msg, true);\n        }\n    }\n    return tag;\n}\n\nexport { composeScalar };\n","function emptyScalarPosition(offset, before, pos) {\n    if (before) {\n        if (pos === null)\n            pos = before.length;\n        for (let i = pos - 1; i >= 0; --i) {\n            let st = before[i];\n            switch (st.type) {\n                case 'space':\n                case 'comment':\n                case 'newline':\n                    offset -= st.source.length;\n                    continue;\n            }\n            // Technically, an empty scalar is immediately after the last non-empty\n            // node, but it's more useful to place it after any whitespace.\n            st = before[++i];\n            while (st?.type === 'space') {\n                offset += st.source.length;\n                st = before[++i];\n            }\n            break;\n        }\n    }\n    return offset;\n}\n\nexport { emptyScalarPosition };\n","import { Alias } from '../nodes/Alias.js';\nimport { composeCollection } from './compose-collection.js';\nimport { composeScalar } from './compose-scalar.js';\nimport { resolveEnd } from './resolve-end.js';\nimport { emptyScalarPosition } from './util-empty-scalar-position.js';\n\nconst CN = { composeNode, composeEmptyNode };\nfunction composeNode(ctx, token, props, onError) {\n    const { spaceBefore, comment, anchor, tag } = props;\n    let node;\n    let isSrcToken = true;\n    switch (token.type) {\n        case 'alias':\n            node = composeAlias(ctx, token, onError);\n            if (anchor || tag)\n                onError(token, 'ALIAS_PROPS', 'An alias node must not specify any properties');\n            break;\n        case 'scalar':\n        case 'single-quoted-scalar':\n        case 'double-quoted-scalar':\n        case 'block-scalar':\n            node = composeScalar(ctx, token, tag, onError);\n            if (anchor)\n                node.anchor = anchor.source.substring(1);\n            break;\n        case 'block-map':\n        case 'block-seq':\n        case 'flow-collection':\n            node = composeCollection(CN, ctx, token, props, onError);\n            if (anchor)\n                node.anchor = anchor.source.substring(1);\n            break;\n        default: {\n            const message = token.type === 'error'\n                ? token.message\n                : `Unsupported token (type: ${token.type})`;\n            onError(token, 'UNEXPECTED_TOKEN', message);\n            node = composeEmptyNode(ctx, token.offset, undefined, null, props, onError);\n            isSrcToken = false;\n        }\n    }\n    if (anchor && node.anchor === '')\n        onError(anchor, 'BAD_ALIAS', 'Anchor cannot be an empty string');\n    if (spaceBefore)\n        node.spaceBefore = true;\n    if (comment) {\n        if (token.type === 'scalar' && token.source === '')\n            node.comment = comment;\n        else\n            node.commentBefore = comment;\n    }\n    // @ts-expect-error Type checking misses meaning of isSrcToken\n    if (ctx.options.keepSourceTokens && isSrcToken)\n        node.srcToken = token;\n    return node;\n}\nfunction composeEmptyNode(ctx, offset, before, pos, { spaceBefore, comment, anchor, tag, end }, onError) {\n    const token = {\n        type: 'scalar',\n        offset: emptyScalarPosition(offset, before, pos),\n        indent: -1,\n        source: ''\n    };\n    const node = composeScalar(ctx, token, tag, onError);\n    if (anchor) {\n        node.anchor = anchor.source.substring(1);\n        if (node.anchor === '')\n            onError(anchor, 'BAD_ALIAS', 'Anchor cannot be an empty string');\n    }\n    if (spaceBefore)\n        node.spaceBefore = true;\n    if (comment) {\n        node.comment = comment;\n        node.range[2] = end;\n    }\n    return node;\n}\nfunction composeAlias({ options }, { offset, source, end }, onError) {\n    const alias = new Alias(source.substring(1));\n    if (alias.source === '')\n        onError(offset, 'BAD_ALIAS', 'Alias cannot be an empty string');\n    if (alias.source.endsWith(':'))\n        onError(offset + source.length - 1, 'BAD_ALIAS', 'Alias ending in : is ambiguous', true);\n    const valueEnd = offset + source.length;\n    const re = resolveEnd(end, valueEnd, options.strict, onError);\n    alias.range = [offset, valueEnd, re.offset];\n    if (re.comment)\n        alias.comment = re.comment;\n    return alias;\n}\n\nexport { composeEmptyNode, composeNode };\n","import { Document } from '../doc/Document.js';\nimport { composeNode, composeEmptyNode } from './compose-node.js';\nimport { resolveEnd } from './resolve-end.js';\nimport { resolveProps } from './resolve-props.js';\n\nfunction composeDoc(options, directives, { offset, start, value, end }, onError) {\n    const opts = Object.assign({ _directives: directives }, options);\n    const doc = new Document(undefined, opts);\n    const ctx = {\n        atRoot: true,\n        directives: doc.directives,\n        options: doc.options,\n        schema: doc.schema\n    };\n    const props = resolveProps(start, {\n        indicator: 'doc-start',\n        next: value ?? end?.[0],\n        offset,\n        onError,\n        parentIndent: 0,\n        startOnNewline: true\n    });\n    if (props.found) {\n        doc.directives.docStart = true;\n        if (value &&\n            (value.type === 'block-map' || value.type === 'block-seq') &&\n            !props.hasNewline)\n            onError(props.end, 'MISSING_CHAR', 'Block collection cannot start on same line with directives-end marker');\n    }\n    // @ts-expect-error If Contents is set, let's trust the user\n    doc.contents = value\n        ? composeNode(ctx, value, props, onError)\n        : composeEmptyNode(ctx, props.end, start, null, props, onError);\n    const contentEnd = doc.contents.range[2];\n    const re = resolveEnd(end, contentEnd, false, onError);\n    if (re.comment)\n        doc.comment = re.comment;\n    doc.range = [offset, contentEnd, re.offset];\n    return doc;\n}\n\nexport { composeDoc };\n","import { Directives } from '../doc/directives.js';\nimport { Document } from '../doc/Document.js';\nimport { YAMLWarning, YAMLParseError } from '../errors.js';\nimport { isCollection, isPair } from '../nodes/identity.js';\nimport { composeDoc } from './compose-doc.js';\nimport { resolveEnd } from './resolve-end.js';\n\nfunction getErrorPos(src) {\n    if (typeof src === 'number')\n        return [src, src + 1];\n    if (Array.isArray(src))\n        return src.length === 2 ? src : [src[0], src[1]];\n    const { offset, source } = src;\n    return [offset, offset + (typeof source === 'string' ? source.length : 1)];\n}\nfunction parsePrelude(prelude) {\n    let comment = '';\n    let atComment = false;\n    let afterEmptyLine = false;\n    for (let i = 0; i < prelude.length; ++i) {\n        const source = prelude[i];\n        switch (source[0]) {\n            case '#':\n                comment +=\n                    (comment === '' ? '' : afterEmptyLine ? '\\n\\n' : '\\n') +\n                        (source.substring(1) || ' ');\n                atComment = true;\n                afterEmptyLine = false;\n                break;\n            case '%':\n                if (prelude[i + 1]?.[0] !== '#')\n                    i += 1;\n                atComment = false;\n                break;\n            default:\n                // This may be wrong after doc-end, but in that case it doesn't matter\n                if (!atComment)\n                    afterEmptyLine = true;\n                atComment = false;\n        }\n    }\n    return { comment, afterEmptyLine };\n}\n/**\n * Compose a stream of CST nodes into a stream of YAML Documents.\n *\n * ```ts\n * import { Composer, Parser } from 'yaml'\n *\n * const src: string = ...\n * const tokens = new Parser().parse(src)\n * const docs = new Composer().compose(tokens)\n * ```\n */\nclass Composer {\n    constructor(options = {}) {\n        this.doc = null;\n        this.atDirectives = false;\n        this.prelude = [];\n        this.errors = [];\n        this.warnings = [];\n        this.onError = (source, code, message, warning) => {\n            const pos = getErrorPos(source);\n            if (warning)\n                this.warnings.push(new YAMLWarning(pos, code, message));\n            else\n                this.errors.push(new YAMLParseError(pos, code, message));\n        };\n        // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n        this.directives = new Directives({ version: options.version || '1.2' });\n        this.options = options;\n    }\n    decorate(doc, afterDoc) {\n        const { comment, afterEmptyLine } = parsePrelude(this.prelude);\n        //console.log({ dc: doc.comment, prelude, comment })\n        if (comment) {\n            const dc = doc.contents;\n            if (afterDoc) {\n                doc.comment = doc.comment ? `${doc.comment}\\n${comment}` : comment;\n            }\n            else if (afterEmptyLine || doc.directives.docStart || !dc) {\n                doc.commentBefore = comment;\n            }\n            else if (isCollection(dc) && !dc.flow && dc.items.length > 0) {\n                let it = dc.items[0];\n                if (isPair(it))\n                    it = it.key;\n                const cb = it.commentBefore;\n                it.commentBefore = cb ? `${comment}\\n${cb}` : comment;\n            }\n            else {\n                const cb = dc.commentBefore;\n                dc.commentBefore = cb ? `${comment}\\n${cb}` : comment;\n            }\n        }\n        if (afterDoc) {\n            Array.prototype.push.apply(doc.errors, this.errors);\n            Array.prototype.push.apply(doc.warnings, this.warnings);\n        }\n        else {\n            doc.errors = this.errors;\n            doc.warnings = this.warnings;\n        }\n        this.prelude = [];\n        this.errors = [];\n        this.warnings = [];\n    }\n    /**\n     * Current stream status information.\n     *\n     * Mostly useful at the end of input for an empty stream.\n     */\n    streamInfo() {\n        return {\n            comment: parsePrelude(this.prelude).comment,\n            directives: this.directives,\n            errors: this.errors,\n            warnings: this.warnings\n        };\n    }\n    /**\n     * Compose tokens into documents.\n     *\n     * @param forceDoc - If the stream contains no document, still emit a final document including any comments and directives that would be applied to a subsequent document.\n     * @param endOffset - Should be set if `forceDoc` is also set, to set the document range end and to indicate errors correctly.\n     */\n    *compose(tokens, forceDoc = false, endOffset = -1) {\n        for (const token of tokens)\n            yield* this.next(token);\n        yield* this.end(forceDoc, endOffset);\n    }\n    /** Advance the composer by one CST token. */\n    *next(token) {\n        switch (token.type) {\n            case 'directive':\n                this.directives.add(token.source, (offset, message, warning) => {\n                    const pos = getErrorPos(token);\n                    pos[0] += offset;\n                    this.onError(pos, 'BAD_DIRECTIVE', message, warning);\n                });\n                this.prelude.push(token.source);\n                this.atDirectives = true;\n                break;\n            case 'document': {\n                const doc = composeDoc(this.options, this.directives, token, this.onError);\n                if (this.atDirectives && !doc.directives.docStart)\n                    this.onError(token, 'MISSING_CHAR', 'Missing directives-end/doc-start indicator line');\n                this.decorate(doc, false);\n                if (this.doc)\n                    yield this.doc;\n                this.doc = doc;\n                this.atDirectives = false;\n                break;\n            }\n            case 'byte-order-mark':\n            case 'space':\n                break;\n            case 'comment':\n            case 'newline':\n                this.prelude.push(token.source);\n                break;\n            case 'error': {\n                const msg = token.source\n                    ? `${token.message}: ${JSON.stringify(token.source)}`\n                    : token.message;\n                const error = new YAMLParseError(getErrorPos(token), 'UNEXPECTED_TOKEN', msg);\n                if (this.atDirectives || !this.doc)\n                    this.errors.push(error);\n                else\n                    this.doc.errors.push(error);\n                break;\n            }\n            case 'doc-end': {\n                if (!this.doc) {\n                    const msg = 'Unexpected doc-end without preceding document';\n                    this.errors.push(new YAMLParseError(getErrorPos(token), 'UNEXPECTED_TOKEN', msg));\n                    break;\n                }\n                this.doc.directives.docEnd = true;\n                const end = resolveEnd(token.end, token.offset + token.source.length, this.doc.options.strict, this.onError);\n                this.decorate(this.doc, true);\n                if (end.comment) {\n                    const dc = this.doc.comment;\n                    this.doc.comment = dc ? `${dc}\\n${end.comment}` : end.comment;\n                }\n                this.doc.range[2] = end.offset;\n                break;\n            }\n            default:\n                this.errors.push(new YAMLParseError(getErrorPos(token), 'UNEXPECTED_TOKEN', `Unsupported token ${token.type}`));\n        }\n    }\n    /**\n     * Call at end of input to yield any remaining document.\n     *\n     * @param forceDoc - If the stream contains no document, still emit a final document including any comments and directives that would be applied to a subsequent document.\n     * @param endOffset - Should be set if `forceDoc` is also set, to set the document range end and to indicate errors correctly.\n     */\n    *end(forceDoc = false, endOffset = -1) {\n        if (this.doc) {\n            this.decorate(this.doc, true);\n            yield this.doc;\n            this.doc = null;\n        }\n        else if (forceDoc) {\n            const opts = Object.assign({ _directives: this.directives }, this.options);\n            const doc = new Document(undefined, opts);\n            if (this.atDirectives)\n                this.onError(endOffset, 'MISSING_CHAR', 'Missing directives-end indicator line');\n            doc.range = [0, endOffset, endOffset];\n            this.decorate(doc, false);\n            yield doc;\n        }\n    }\n}\n\nexport { Composer };\n","import { resolveBlockScalar } from '../compose/resolve-block-scalar.js';\nimport { resolveFlowScalar } from '../compose/resolve-flow-scalar.js';\nimport { YAMLParseError } from '../errors.js';\nimport { stringifyString } from '../stringify/stringifyString.js';\n\nfunction resolveAsScalar(token, strict = true, onError) {\n    if (token) {\n        const _onError = (pos, code, message) => {\n            const offset = typeof pos === 'number' ? pos : Array.isArray(pos) ? pos[0] : pos.offset;\n            if (onError)\n                onError(offset, code, message);\n            else\n                throw new YAMLParseError([offset, offset + 1], code, message);\n        };\n        switch (token.type) {\n            case 'scalar':\n            case 'single-quoted-scalar':\n            case 'double-quoted-scalar':\n                return resolveFlowScalar(token, strict, _onError);\n            case 'block-scalar':\n                return resolveBlockScalar({ options: { strict } }, token, _onError);\n        }\n    }\n    return null;\n}\n/**\n * Create a new scalar token with `value`\n *\n * Values that represent an actual string but may be parsed as a different type should use a `type` other than `'PLAIN'`,\n * as this function does not support any schema operations and won't check for such conflicts.\n *\n * @param value The string representation of the value, which will have its content properly indented.\n * @param context.end Comments and whitespace after the end of the value, or after the block scalar header. If undefined, a newline will be added.\n * @param context.implicitKey Being within an implicit key may affect the resolved type of the token's value.\n * @param context.indent The indent level of the token.\n * @param context.inFlow Is this scalar within a flow collection? This may affect the resolved type of the token's value.\n * @param context.offset The offset position of the token.\n * @param context.type The preferred type of the scalar token. If undefined, the previous type of the `token` will be used, defaulting to `'PLAIN'`.\n */\nfunction createScalarToken(value, context) {\n    const { implicitKey = false, indent, inFlow = false, offset = -1, type = 'PLAIN' } = context;\n    const source = stringifyString({ type, value }, {\n        implicitKey,\n        indent: indent > 0 ? ' '.repeat(indent) : '',\n        inFlow,\n        options: { blockQuote: true, lineWidth: -1 }\n    });\n    const end = context.end ?? [\n        { type: 'newline', offset: -1, indent, source: '\\n' }\n    ];\n    switch (source[0]) {\n        case '|':\n        case '>': {\n            const he = source.indexOf('\\n');\n            const head = source.substring(0, he);\n            const body = source.substring(he + 1) + '\\n';\n            const props = [\n                { type: 'block-scalar-header', offset, indent, source: head }\n            ];\n            if (!addEndtoBlockProps(props, end))\n                props.push({ type: 'newline', offset: -1, indent, source: '\\n' });\n            return { type: 'block-scalar', offset, indent, props, source: body };\n        }\n        case '\"':\n            return { type: 'double-quoted-scalar', offset, indent, source, end };\n        case \"'\":\n            return { type: 'single-quoted-scalar', offset, indent, source, end };\n        default:\n            return { type: 'scalar', offset, indent, source, end };\n    }\n}\n/**\n * Set the value of `token` to the given string `value`, overwriting any previous contents and type that it may have.\n *\n * Best efforts are made to retain any comments previously associated with the `token`,\n * though all contents within a collection's `items` will be overwritten.\n *\n * Values that represent an actual string but may be parsed as a different type should use a `type` other than `'PLAIN'`,\n * as this function does not support any schema operations and won't check for such conflicts.\n *\n * @param token Any token. If it does not include an `indent` value, the value will be stringified as if it were an implicit key.\n * @param value The string representation of the value, which will have its content properly indented.\n * @param context.afterKey In most cases, values after a key should have an additional level of indentation.\n * @param context.implicitKey Being within an implicit key may affect the resolved type of the token's value.\n * @param context.inFlow Being within a flow collection may affect the resolved type of the token's value.\n * @param context.type The preferred type of the scalar token. If undefined, the previous type of the `token` will be used, defaulting to `'PLAIN'`.\n */\nfunction setScalarValue(token, value, context = {}) {\n    let { afterKey = false, implicitKey = false, inFlow = false, type } = context;\n    let indent = 'indent' in token ? token.indent : null;\n    if (afterKey && typeof indent === 'number')\n        indent += 2;\n    if (!type)\n        switch (token.type) {\n            case 'single-quoted-scalar':\n                type = 'QUOTE_SINGLE';\n                break;\n            case 'double-quoted-scalar':\n                type = 'QUOTE_DOUBLE';\n                break;\n            case 'block-scalar': {\n                const header = token.props[0];\n                if (header.type !== 'block-scalar-header')\n                    throw new Error('Invalid block scalar header');\n                type = header.source[0] === '>' ? 'BLOCK_FOLDED' : 'BLOCK_LITERAL';\n                break;\n            }\n            default:\n                type = 'PLAIN';\n        }\n    const source = stringifyString({ type, value }, {\n        implicitKey: implicitKey || indent === null,\n        indent: indent !== null && indent > 0 ? ' '.repeat(indent) : '',\n        inFlow,\n        options: { blockQuote: true, lineWidth: -1 }\n    });\n    switch (source[0]) {\n        case '|':\n        case '>':\n            setBlockScalarValue(token, source);\n            break;\n        case '\"':\n            setFlowScalarValue(token, source, 'double-quoted-scalar');\n            break;\n        case \"'\":\n            setFlowScalarValue(token, source, 'single-quoted-scalar');\n            break;\n        default:\n            setFlowScalarValue(token, source, 'scalar');\n    }\n}\nfunction setBlockScalarValue(token, source) {\n    const he = source.indexOf('\\n');\n    const head = source.substring(0, he);\n    const body = source.substring(he + 1) + '\\n';\n    if (token.type === 'block-scalar') {\n        const header = token.props[0];\n        if (header.type !== 'block-scalar-header')\n            throw new Error('Invalid block scalar header');\n        header.source = head;\n        token.source = body;\n    }\n    else {\n        const { offset } = token;\n        const indent = 'indent' in token ? token.indent : -1;\n        const props = [\n            { type: 'block-scalar-header', offset, indent, source: head }\n        ];\n        if (!addEndtoBlockProps(props, 'end' in token ? token.end : undefined))\n            props.push({ type: 'newline', offset: -1, indent, source: '\\n' });\n        for (const key of Object.keys(token))\n            if (key !== 'type' && key !== 'offset')\n                delete token[key];\n        Object.assign(token, { type: 'block-scalar', indent, props, source: body });\n    }\n}\n/** @returns `true` if last token is a newline */\nfunction addEndtoBlockProps(props, end) {\n    if (end)\n        for (const st of end)\n            switch (st.type) {\n                case 'space':\n                case 'comment':\n                    props.push(st);\n                    break;\n                case 'newline':\n                    props.push(st);\n                    return true;\n            }\n    return false;\n}\nfunction setFlowScalarValue(token, source, type) {\n    switch (token.type) {\n        case 'scalar':\n        case 'double-quoted-scalar':\n        case 'single-quoted-scalar':\n            token.type = type;\n            token.source = source;\n            break;\n        case 'block-scalar': {\n            const end = token.props.slice(1);\n            let oa = source.length;\n            if (token.props[0].type === 'block-scalar-header')\n                oa -= token.props[0].source.length;\n            for (const tok of end)\n                tok.offset += oa;\n            delete token.props;\n            Object.assign(token, { type, source, end });\n            break;\n        }\n        case 'block-map':\n        case 'block-seq': {\n            const offset = token.offset + source.length;\n            const nl = { type: 'newline', offset, indent: token.indent, source: '\\n' };\n            delete token.items;\n            Object.assign(token, { type, source, end: [nl] });\n            break;\n        }\n        default: {\n            const indent = 'indent' in token ? token.indent : -1;\n            const end = 'end' in token && Array.isArray(token.end)\n                ? token.end.filter(st => st.type === 'space' ||\n                    st.type === 'comment' ||\n                    st.type === 'newline')\n                : [];\n            for (const key of Object.keys(token))\n                if (key !== 'type' && key !== 'offset')\n                    delete token[key];\n            Object.assign(token, { type, indent, source, end });\n        }\n    }\n}\n\nexport { createScalarToken, resolveAsScalar, setScalarValue };\n","/**\n * Stringify a CST document, token, or collection item\n *\n * Fair warning: This applies no validation whatsoever, and\n * simply concatenates the sources in their logical order.\n */\nconst stringify = (cst) => 'type' in cst ? stringifyToken(cst) : stringifyItem(cst);\nfunction stringifyToken(token) {\n    switch (token.type) {\n        case 'block-scalar': {\n            let res = '';\n            for (const tok of token.props)\n                res += stringifyToken(tok);\n            return res + token.source;\n        }\n        case 'block-map':\n        case 'block-seq': {\n            let res = '';\n            for (const item of token.items)\n                res += stringifyItem(item);\n            return res;\n        }\n        case 'flow-collection': {\n            let res = token.start.source;\n            for (const item of token.items)\n                res += stringifyItem(item);\n            for (const st of token.end)\n                res += st.source;\n            return res;\n        }\n        case 'document': {\n            let res = stringifyItem(token);\n            if (token.end)\n                for (const st of token.end)\n                    res += st.source;\n            return res;\n        }\n        default: {\n            let res = token.source;\n            if ('end' in token && token.end)\n                for (const st of token.end)\n                    res += st.source;\n            return res;\n        }\n    }\n}\nfunction stringifyItem({ start, key, sep, value }) {\n    let res = '';\n    for (const st of start)\n        res += st.source;\n    if (key)\n        res += stringifyToken(key);\n    if (sep)\n        for (const st of sep)\n            res += st.source;\n    if (value)\n        res += stringifyToken(value);\n    return res;\n}\n\nexport { stringify };\n","const BREAK = Symbol('break visit');\nconst SKIP = Symbol('skip children');\nconst REMOVE = Symbol('remove item');\n/**\n * Apply a visitor to a CST document or item.\n *\n * Walks through the tree (depth-first) starting from the root, calling a\n * `visitor` function with two arguments when entering each item:\n *   - `item`: The current item, which included the following members:\n *     - `start: SourceToken[]` – Source tokens before the key or value,\n *       possibly including its anchor or tag.\n *     - `key?: Token | null` – Set for pair values. May then be `null`, if\n *       the key before the `:` separator is empty.\n *     - `sep?: SourceToken[]` – Source tokens between the key and the value,\n *       which should include the `:` map value indicator if `value` is set.\n *     - `value?: Token` – The value of a sequence item, or of a map pair.\n *   - `path`: The steps from the root to the current node, as an array of\n *     `['key' | 'value', number]` tuples.\n *\n * The return value of the visitor may be used to control the traversal:\n *   - `undefined` (default): Do nothing and continue\n *   - `visit.SKIP`: Do not visit the children of this token, continue with\n *      next sibling\n *   - `visit.BREAK`: Terminate traversal completely\n *   - `visit.REMOVE`: Remove the current item, then continue with the next one\n *   - `number`: Set the index of the next step. This is useful especially if\n *     the index of the current token has changed.\n *   - `function`: Define the next visitor for this item. After the original\n *     visitor is called on item entry, next visitors are called after handling\n *     a non-empty `key` and when exiting the item.\n */\nfunction visit(cst, visitor) {\n    if ('type' in cst && cst.type === 'document')\n        cst = { start: cst.start, value: cst.value };\n    _visit(Object.freeze([]), cst, visitor);\n}\n// Without the `as symbol` casts, TS declares these in the `visit`\n// namespace using `var`, but then complains about that because\n// `unique symbol` must be `const`.\n/** Terminate visit traversal completely */\nvisit.BREAK = BREAK;\n/** Do not visit the children of the current item */\nvisit.SKIP = SKIP;\n/** Remove the current item */\nvisit.REMOVE = REMOVE;\n/** Find the item at `path` from `cst` as the root */\nvisit.itemAtPath = (cst, path) => {\n    let item = cst;\n    for (const [field, index] of path) {\n        const tok = item?.[field];\n        if (tok && 'items' in tok) {\n            item = tok.items[index];\n        }\n        else\n            return undefined;\n    }\n    return item;\n};\n/**\n * Get the immediate parent collection of the item at `path` from `cst` as the root.\n *\n * Throws an error if the collection is not found, which should never happen if the item itself exists.\n */\nvisit.parentCollection = (cst, path) => {\n    const parent = visit.itemAtPath(cst, path.slice(0, -1));\n    const field = path[path.length - 1][0];\n    const coll = parent?.[field];\n    if (coll && 'items' in coll)\n        return coll;\n    throw new Error('Parent collection not found');\n};\nfunction _visit(path, item, visitor) {\n    let ctrl = visitor(item, path);\n    if (typeof ctrl === 'symbol')\n        return ctrl;\n    for (const field of ['key', 'value']) {\n        const token = item[field];\n        if (token && 'items' in token) {\n            for (let i = 0; i < token.items.length; ++i) {\n                const ci = _visit(Object.freeze(path.concat([[field, i]])), token.items[i], visitor);\n                if (typeof ci === 'number')\n                    i = ci - 1;\n                else if (ci === BREAK)\n                    return BREAK;\n                else if (ci === REMOVE) {\n                    token.items.splice(i, 1);\n                    i -= 1;\n                }\n            }\n            if (typeof ctrl === 'function' && field === 'key')\n                ctrl = ctrl(item, path);\n        }\n    }\n    return typeof ctrl === 'function' ? ctrl(item, path) : ctrl;\n}\n\nexport { visit };\n","export { createScalarToken, resolveAsScalar, setScalarValue } from './cst-scalar.js';\nexport { stringify } from './cst-stringify.js';\nexport { visit } from './cst-visit.js';\n\n/** The byte order mark */\nconst BOM = '\\u{FEFF}';\n/** Start of doc-mode */\nconst DOCUMENT = '\\x02'; // C0: Start of Text\n/** Unexpected end of flow-mode */\nconst FLOW_END = '\\x18'; // C0: Cancel\n/** Next token is a scalar value */\nconst SCALAR = '\\x1f'; // C0: Unit Separator\n/** @returns `true` if `token` is a flow or block collection */\nconst isCollection = (token) => !!token && 'items' in token;\n/** @returns `true` if `token` is a flow or block scalar; not an alias */\nconst isScalar = (token) => !!token &&\n    (token.type === 'scalar' ||\n        token.type === 'single-quoted-scalar' ||\n        token.type === 'double-quoted-scalar' ||\n        token.type === 'block-scalar');\n/* istanbul ignore next */\n/** Get a printable representation of a lexer token */\nfunction prettyToken(token) {\n    switch (token) {\n        case BOM:\n            return '<BOM>';\n        case DOCUMENT:\n            return '<DOC>';\n        case FLOW_END:\n            return '<FLOW_END>';\n        case SCALAR:\n            return '<SCALAR>';\n        default:\n            return JSON.stringify(token);\n    }\n}\n/** Identify the type of a lexer token. May return `null` for unknown tokens. */\nfunction tokenType(source) {\n    switch (source) {\n        case BOM:\n            return 'byte-order-mark';\n        case DOCUMENT:\n            return 'doc-mode';\n        case FLOW_END:\n            return 'flow-error-end';\n        case SCALAR:\n            return 'scalar';\n        case '---':\n            return 'doc-start';\n        case '...':\n            return 'doc-end';\n        case '':\n        case '\\n':\n        case '\\r\\n':\n            return 'newline';\n        case '-':\n            return 'seq-item-ind';\n        case '?':\n            return 'explicit-key-ind';\n        case ':':\n            return 'map-value-ind';\n        case '{':\n            return 'flow-map-start';\n        case '}':\n            return 'flow-map-end';\n        case '[':\n            return 'flow-seq-start';\n        case ']':\n            return 'flow-seq-end';\n        case ',':\n            return 'comma';\n    }\n    switch (source[0]) {\n        case ' ':\n        case '\\t':\n            return 'space';\n        case '#':\n            return 'comment';\n        case '%':\n            return 'directive-line';\n        case '*':\n            return 'alias';\n        case '&':\n            return 'anchor';\n        case '!':\n            return 'tag';\n        case \"'\":\n            return 'single-quoted-scalar';\n        case '\"':\n            return 'double-quoted-scalar';\n        case '|':\n        case '>':\n            return 'block-scalar-header';\n    }\n    return null;\n}\n\nexport { BOM, DOCUMENT, FLOW_END, SCALAR, isCollection, isScalar, prettyToken, tokenType };\n","import { BOM, DOCUMENT, FLOW_END, SCALAR } from './cst.js';\n\n/*\nSTART -> stream\n\nstream\n  directive -> line-end -> stream\n  indent + line-end -> stream\n  [else] -> line-start\n\nline-end\n  comment -> line-end\n  newline -> .\n  input-end -> END\n\nline-start\n  doc-start -> doc\n  doc-end -> stream\n  [else] -> indent -> block-start\n\nblock-start\n  seq-item-start -> block-start\n  explicit-key-start -> block-start\n  map-value-start -> block-start\n  [else] -> doc\n\ndoc\n  line-end -> line-start\n  spaces -> doc\n  anchor -> doc\n  tag -> doc\n  flow-start -> flow -> doc\n  flow-end -> error -> doc\n  seq-item-start -> error -> doc\n  explicit-key-start -> error -> doc\n  map-value-start -> doc\n  alias -> doc\n  quote-start -> quoted-scalar -> doc\n  block-scalar-header -> line-end -> block-scalar(min) -> line-start\n  [else] -> plain-scalar(false, min) -> doc\n\nflow\n  line-end -> flow\n  spaces -> flow\n  anchor -> flow\n  tag -> flow\n  flow-start -> flow -> flow\n  flow-end -> .\n  seq-item-start -> error -> flow\n  explicit-key-start -> flow\n  map-value-start -> flow\n  alias -> flow\n  quote-start -> quoted-scalar -> flow\n  comma -> flow\n  [else] -> plain-scalar(true, 0) -> flow\n\nquoted-scalar\n  quote-end -> .\n  [else] -> quoted-scalar\n\nblock-scalar(min)\n  newline + peek(indent < min) -> .\n  [else] -> block-scalar(min)\n\nplain-scalar(is-flow, min)\n  scalar-end(is-flow) -> .\n  peek(newline + (indent < min)) -> .\n  [else] -> plain-scalar(min)\n*/\nfunction isEmpty(ch) {\n    switch (ch) {\n        case undefined:\n        case ' ':\n        case '\\n':\n        case '\\r':\n        case '\\t':\n            return true;\n        default:\n            return false;\n    }\n}\nconst hexDigits = new Set('0123456789ABCDEFabcdef');\nconst tagChars = new Set(\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-#;/?:@&=+$_.!~*'()\");\nconst flowIndicatorChars = new Set(',[]{}');\nconst invalidAnchorChars = new Set(' ,[]{}\\n\\r\\t');\nconst isNotAnchorChar = (ch) => !ch || invalidAnchorChars.has(ch);\n/**\n * Splits an input string into lexical tokens, i.e. smaller strings that are\n * easily identifiable by `tokens.tokenType()`.\n *\n * Lexing starts always in a \"stream\" context. Incomplete input may be buffered\n * until a complete token can be emitted.\n *\n * In addition to slices of the original input, the following control characters\n * may also be emitted:\n *\n * - `\\x02` (Start of Text): A document starts with the next token\n * - `\\x18` (Cancel): Unexpected end of flow-mode (indicates an error)\n * - `\\x1f` (Unit Separator): Next token is a scalar value\n * - `\\u{FEFF}` (Byte order mark): Emitted separately outside documents\n */\nclass Lexer {\n    constructor() {\n        /**\n         * Flag indicating whether the end of the current buffer marks the end of\n         * all input\n         */\n        this.atEnd = false;\n        /**\n         * Explicit indent set in block scalar header, as an offset from the current\n         * minimum indent, so e.g. set to 1 from a header `|2+`. Set to -1 if not\n         * explicitly set.\n         */\n        this.blockScalarIndent = -1;\n        /**\n         * Block scalars that include a + (keep) chomping indicator in their header\n         * include trailing empty lines, which are otherwise excluded from the\n         * scalar's contents.\n         */\n        this.blockScalarKeep = false;\n        /** Current input */\n        this.buffer = '';\n        /**\n         * Flag noting whether the map value indicator : can immediately follow this\n         * node within a flow context.\n         */\n        this.flowKey = false;\n        /** Count of surrounding flow collection levels. */\n        this.flowLevel = 0;\n        /**\n         * Minimum level of indentation required for next lines to be parsed as a\n         * part of the current scalar value.\n         */\n        this.indentNext = 0;\n        /** Indentation level of the current line. */\n        this.indentValue = 0;\n        /** Position of the next \\n character. */\n        this.lineEndPos = null;\n        /** Stores the state of the lexer if reaching the end of incpomplete input */\n        this.next = null;\n        /** A pointer to `buffer`; the current position of the lexer. */\n        this.pos = 0;\n    }\n    /**\n     * Generate YAML tokens from the `source` string. If `incomplete`,\n     * a part of the last line may be left as a buffer for the next call.\n     *\n     * @returns A generator of lexical tokens\n     */\n    *lex(source, incomplete = false) {\n        if (source) {\n            if (typeof source !== 'string')\n                throw TypeError('source is not a string');\n            this.buffer = this.buffer ? this.buffer + source : source;\n            this.lineEndPos = null;\n        }\n        this.atEnd = !incomplete;\n        let next = this.next ?? 'stream';\n        while (next && (incomplete || this.hasChars(1)))\n            next = yield* this.parseNext(next);\n    }\n    atLineEnd() {\n        let i = this.pos;\n        let ch = this.buffer[i];\n        while (ch === ' ' || ch === '\\t')\n            ch = this.buffer[++i];\n        if (!ch || ch === '#' || ch === '\\n')\n            return true;\n        if (ch === '\\r')\n            return this.buffer[i + 1] === '\\n';\n        return false;\n    }\n    charAt(n) {\n        return this.buffer[this.pos + n];\n    }\n    continueScalar(offset) {\n        let ch = this.buffer[offset];\n        if (this.indentNext > 0) {\n            let indent = 0;\n            while (ch === ' ')\n                ch = this.buffer[++indent + offset];\n            if (ch === '\\r') {\n                const next = this.buffer[indent + offset + 1];\n                if (next === '\\n' || (!next && !this.atEnd))\n                    return offset + indent + 1;\n            }\n            return ch === '\\n' || indent >= this.indentNext || (!ch && !this.atEnd)\n                ? offset + indent\n                : -1;\n        }\n        if (ch === '-' || ch === '.') {\n            const dt = this.buffer.substr(offset, 3);\n            if ((dt === '---' || dt === '...') && isEmpty(this.buffer[offset + 3]))\n                return -1;\n        }\n        return offset;\n    }\n    getLine() {\n        let end = this.lineEndPos;\n        if (typeof end !== 'number' || (end !== -1 && end < this.pos)) {\n            end = this.buffer.indexOf('\\n', this.pos);\n            this.lineEndPos = end;\n        }\n        if (end === -1)\n            return this.atEnd ? this.buffer.substring(this.pos) : null;\n        if (this.buffer[end - 1] === '\\r')\n            end -= 1;\n        return this.buffer.substring(this.pos, end);\n    }\n    hasChars(n) {\n        return this.pos + n <= this.buffer.length;\n    }\n    setNext(state) {\n        this.buffer = this.buffer.substring(this.pos);\n        this.pos = 0;\n        this.lineEndPos = null;\n        this.next = state;\n        return null;\n    }\n    peek(n) {\n        return this.buffer.substr(this.pos, n);\n    }\n    *parseNext(next) {\n        switch (next) {\n            case 'stream':\n                return yield* this.parseStream();\n            case 'line-start':\n                return yield* this.parseLineStart();\n            case 'block-start':\n                return yield* this.parseBlockStart();\n            case 'doc':\n                return yield* this.parseDocument();\n            case 'flow':\n                return yield* this.parseFlowCollection();\n            case 'quoted-scalar':\n                return yield* this.parseQuotedScalar();\n            case 'block-scalar':\n                return yield* this.parseBlockScalar();\n            case 'plain-scalar':\n                return yield* this.parsePlainScalar();\n        }\n    }\n    *parseStream() {\n        let line = this.getLine();\n        if (line === null)\n            return this.setNext('stream');\n        if (line[0] === BOM) {\n            yield* this.pushCount(1);\n            line = line.substring(1);\n        }\n        if (line[0] === '%') {\n            let dirEnd = line.length;\n            let cs = line.indexOf('#');\n            while (cs !== -1) {\n                const ch = line[cs - 1];\n                if (ch === ' ' || ch === '\\t') {\n                    dirEnd = cs - 1;\n                    break;\n                }\n                else {\n                    cs = line.indexOf('#', cs + 1);\n                }\n            }\n            while (true) {\n                const ch = line[dirEnd - 1];\n                if (ch === ' ' || ch === '\\t')\n                    dirEnd -= 1;\n                else\n                    break;\n            }\n            const n = (yield* this.pushCount(dirEnd)) + (yield* this.pushSpaces(true));\n            yield* this.pushCount(line.length - n); // possible comment\n            this.pushNewline();\n            return 'stream';\n        }\n        if (this.atLineEnd()) {\n            const sp = yield* this.pushSpaces(true);\n            yield* this.pushCount(line.length - sp);\n            yield* this.pushNewline();\n            return 'stream';\n        }\n        yield DOCUMENT;\n        return yield* this.parseLineStart();\n    }\n    *parseLineStart() {\n        const ch = this.charAt(0);\n        if (!ch && !this.atEnd)\n            return this.setNext('line-start');\n        if (ch === '-' || ch === '.') {\n            if (!this.atEnd && !this.hasChars(4))\n                return this.setNext('line-start');\n            const s = this.peek(3);\n            if ((s === '---' || s === '...') && isEmpty(this.charAt(3))) {\n                yield* this.pushCount(3);\n                this.indentValue = 0;\n                this.indentNext = 0;\n                return s === '---' ? 'doc' : 'stream';\n            }\n        }\n        this.indentValue = yield* this.pushSpaces(false);\n        if (this.indentNext > this.indentValue && !isEmpty(this.charAt(1)))\n            this.indentNext = this.indentValue;\n        return yield* this.parseBlockStart();\n    }\n    *parseBlockStart() {\n        const [ch0, ch1] = this.peek(2);\n        if (!ch1 && !this.atEnd)\n            return this.setNext('block-start');\n        if ((ch0 === '-' || ch0 === '?' || ch0 === ':') && isEmpty(ch1)) {\n            const n = (yield* this.pushCount(1)) + (yield* this.pushSpaces(true));\n            this.indentNext = this.indentValue + 1;\n            this.indentValue += n;\n            return yield* this.parseBlockStart();\n        }\n        return 'doc';\n    }\n    *parseDocument() {\n        yield* this.pushSpaces(true);\n        const line = this.getLine();\n        if (line === null)\n            return this.setNext('doc');\n        let n = yield* this.pushIndicators();\n        switch (line[n]) {\n            case '#':\n                yield* this.pushCount(line.length - n);\n            // fallthrough\n            case undefined:\n                yield* this.pushNewline();\n                return yield* this.parseLineStart();\n            case '{':\n            case '[':\n                yield* this.pushCount(1);\n                this.flowKey = false;\n                this.flowLevel = 1;\n                return 'flow';\n            case '}':\n            case ']':\n                // this is an error\n                yield* this.pushCount(1);\n                return 'doc';\n            case '*':\n                yield* this.pushUntil(isNotAnchorChar);\n                return 'doc';\n            case '\"':\n            case \"'\":\n                return yield* this.parseQuotedScalar();\n            case '|':\n            case '>':\n                n += yield* this.parseBlockScalarHeader();\n                n += yield* this.pushSpaces(true);\n                yield* this.pushCount(line.length - n);\n                yield* this.pushNewline();\n                return yield* this.parseBlockScalar();\n            default:\n                return yield* this.parsePlainScalar();\n        }\n    }\n    *parseFlowCollection() {\n        let nl, sp;\n        let indent = -1;\n        do {\n            nl = yield* this.pushNewline();\n            if (nl > 0) {\n                sp = yield* this.pushSpaces(false);\n                this.indentValue = indent = sp;\n            }\n            else {\n                sp = 0;\n            }\n            sp += yield* this.pushSpaces(true);\n        } while (nl + sp > 0);\n        const line = this.getLine();\n        if (line === null)\n            return this.setNext('flow');\n        if ((indent !== -1 && indent < this.indentNext && line[0] !== '#') ||\n            (indent === 0 &&\n                (line.startsWith('---') || line.startsWith('...')) &&\n                isEmpty(line[3]))) {\n            // Allowing for the terminal ] or } at the same (rather than greater)\n            // indent level as the initial [ or { is technically invalid, but\n            // failing here would be surprising to users.\n            const atFlowEndMarker = indent === this.indentNext - 1 &&\n                this.flowLevel === 1 &&\n                (line[0] === ']' || line[0] === '}');\n            if (!atFlowEndMarker) {\n                // this is an error\n                this.flowLevel = 0;\n                yield FLOW_END;\n                return yield* this.parseLineStart();\n            }\n        }\n        let n = 0;\n        while (line[n] === ',') {\n            n += yield* this.pushCount(1);\n            n += yield* this.pushSpaces(true);\n            this.flowKey = false;\n        }\n        n += yield* this.pushIndicators();\n        switch (line[n]) {\n            case undefined:\n                return 'flow';\n            case '#':\n                yield* this.pushCount(line.length - n);\n                return 'flow';\n            case '{':\n            case '[':\n                yield* this.pushCount(1);\n                this.flowKey = false;\n                this.flowLevel += 1;\n                return 'flow';\n            case '}':\n            case ']':\n                yield* this.pushCount(1);\n                this.flowKey = true;\n                this.flowLevel -= 1;\n                return this.flowLevel ? 'flow' : 'doc';\n            case '*':\n                yield* this.pushUntil(isNotAnchorChar);\n                return 'flow';\n            case '\"':\n            case \"'\":\n                this.flowKey = true;\n                return yield* this.parseQuotedScalar();\n            case ':': {\n                const next = this.charAt(1);\n                if (this.flowKey || isEmpty(next) || next === ',') {\n                    this.flowKey = false;\n                    yield* this.pushCount(1);\n                    yield* this.pushSpaces(true);\n                    return 'flow';\n                }\n            }\n            // fallthrough\n            default:\n                this.flowKey = false;\n                return yield* this.parsePlainScalar();\n        }\n    }\n    *parseQuotedScalar() {\n        const quote = this.charAt(0);\n        let end = this.buffer.indexOf(quote, this.pos + 1);\n        if (quote === \"'\") {\n            while (end !== -1 && this.buffer[end + 1] === \"'\")\n                end = this.buffer.indexOf(\"'\", end + 2);\n        }\n        else {\n            // double-quote\n            while (end !== -1) {\n                let n = 0;\n                while (this.buffer[end - 1 - n] === '\\\\')\n                    n += 1;\n                if (n % 2 === 0)\n                    break;\n                end = this.buffer.indexOf('\"', end + 1);\n            }\n        }\n        // Only looking for newlines within the quotes\n        const qb = this.buffer.substring(0, end);\n        let nl = qb.indexOf('\\n', this.pos);\n        if (nl !== -1) {\n            while (nl !== -1) {\n                const cs = this.continueScalar(nl + 1);\n                if (cs === -1)\n                    break;\n                nl = qb.indexOf('\\n', cs);\n            }\n            if (nl !== -1) {\n                // this is an error caused by an unexpected unindent\n                end = nl - (qb[nl - 1] === '\\r' ? 2 : 1);\n            }\n        }\n        if (end === -1) {\n            if (!this.atEnd)\n                return this.setNext('quoted-scalar');\n            end = this.buffer.length;\n        }\n        yield* this.pushToIndex(end + 1, false);\n        return this.flowLevel ? 'flow' : 'doc';\n    }\n    *parseBlockScalarHeader() {\n        this.blockScalarIndent = -1;\n        this.blockScalarKeep = false;\n        let i = this.pos;\n        while (true) {\n            const ch = this.buffer[++i];\n            if (ch === '+')\n                this.blockScalarKeep = true;\n            else if (ch > '0' && ch <= '9')\n                this.blockScalarIndent = Number(ch) - 1;\n            else if (ch !== '-')\n                break;\n        }\n        return yield* this.pushUntil(ch => isEmpty(ch) || ch === '#');\n    }\n    *parseBlockScalar() {\n        let nl = this.pos - 1; // may be -1 if this.pos === 0\n        let indent = 0;\n        let ch;\n        loop: for (let i = this.pos; (ch = this.buffer[i]); ++i) {\n            switch (ch) {\n                case ' ':\n                    indent += 1;\n                    break;\n                case '\\n':\n                    nl = i;\n                    indent = 0;\n                    break;\n                case '\\r': {\n                    const next = this.buffer[i + 1];\n                    if (!next && !this.atEnd)\n                        return this.setNext('block-scalar');\n                    if (next === '\\n')\n                        break;\n                } // fallthrough\n                default:\n                    break loop;\n            }\n        }\n        if (!ch && !this.atEnd)\n            return this.setNext('block-scalar');\n        if (indent >= this.indentNext) {\n            if (this.blockScalarIndent === -1)\n                this.indentNext = indent;\n            else {\n                this.indentNext =\n                    this.blockScalarIndent + (this.indentNext === 0 ? 1 : this.indentNext);\n            }\n            do {\n                const cs = this.continueScalar(nl + 1);\n                if (cs === -1)\n                    break;\n                nl = this.buffer.indexOf('\\n', cs);\n            } while (nl !== -1);\n            if (nl === -1) {\n                if (!this.atEnd)\n                    return this.setNext('block-scalar');\n                nl = this.buffer.length;\n            }\n        }\n        // Trailing insufficiently indented tabs are invalid.\n        // To catch that during parsing, we include them in the block scalar value.\n        let i = nl + 1;\n        ch = this.buffer[i];\n        while (ch === ' ')\n            ch = this.buffer[++i];\n        if (ch === '\\t') {\n            while (ch === '\\t' || ch === ' ' || ch === '\\r' || ch === '\\n')\n                ch = this.buffer[++i];\n            nl = i - 1;\n        }\n        else if (!this.blockScalarKeep) {\n            do {\n                let i = nl - 1;\n                let ch = this.buffer[i];\n                if (ch === '\\r')\n                    ch = this.buffer[--i];\n                const lastChar = i; // Drop the line if last char not more indented\n                while (ch === ' ')\n                    ch = this.buffer[--i];\n                if (ch === '\\n' && i >= this.pos && i + 1 + indent > lastChar)\n                    nl = i;\n                else\n                    break;\n            } while (true);\n        }\n        yield SCALAR;\n        yield* this.pushToIndex(nl + 1, true);\n        return yield* this.parseLineStart();\n    }\n    *parsePlainScalar() {\n        const inFlow = this.flowLevel > 0;\n        let end = this.pos - 1;\n        let i = this.pos - 1;\n        let ch;\n        while ((ch = this.buffer[++i])) {\n            if (ch === ':') {\n                const next = this.buffer[i + 1];\n                if (isEmpty(next) || (inFlow && flowIndicatorChars.has(next)))\n                    break;\n                end = i;\n            }\n            else if (isEmpty(ch)) {\n                let next = this.buffer[i + 1];\n                if (ch === '\\r') {\n                    if (next === '\\n') {\n                        i += 1;\n                        ch = '\\n';\n                        next = this.buffer[i + 1];\n                    }\n                    else\n                        end = i;\n                }\n                if (next === '#' || (inFlow && flowIndicatorChars.has(next)))\n                    break;\n                if (ch === '\\n') {\n                    const cs = this.continueScalar(i + 1);\n                    if (cs === -1)\n                        break;\n                    i = Math.max(i, cs - 2); // to advance, but still account for ' #'\n                }\n            }\n            else {\n                if (inFlow && flowIndicatorChars.has(ch))\n                    break;\n                end = i;\n            }\n        }\n        if (!ch && !this.atEnd)\n            return this.setNext('plain-scalar');\n        yield SCALAR;\n        yield* this.pushToIndex(end + 1, true);\n        return inFlow ? 'flow' : 'doc';\n    }\n    *pushCount(n) {\n        if (n > 0) {\n            yield this.buffer.substr(this.pos, n);\n            this.pos += n;\n            return n;\n        }\n        return 0;\n    }\n    *pushToIndex(i, allowEmpty) {\n        const s = this.buffer.slice(this.pos, i);\n        if (s) {\n            yield s;\n            this.pos += s.length;\n            return s.length;\n        }\n        else if (allowEmpty)\n            yield '';\n        return 0;\n    }\n    *pushIndicators() {\n        switch (this.charAt(0)) {\n            case '!':\n                return ((yield* this.pushTag()) +\n                    (yield* this.pushSpaces(true)) +\n                    (yield* this.pushIndicators()));\n            case '&':\n                return ((yield* this.pushUntil(isNotAnchorChar)) +\n                    (yield* this.pushSpaces(true)) +\n                    (yield* this.pushIndicators()));\n            case '-': // this is an error\n            case '?': // this is an error outside flow collections\n            case ':': {\n                const inFlow = this.flowLevel > 0;\n                const ch1 = this.charAt(1);\n                if (isEmpty(ch1) || (inFlow && flowIndicatorChars.has(ch1))) {\n                    if (!inFlow)\n                        this.indentNext = this.indentValue + 1;\n                    else if (this.flowKey)\n                        this.flowKey = false;\n                    return ((yield* this.pushCount(1)) +\n                        (yield* this.pushSpaces(true)) +\n                        (yield* this.pushIndicators()));\n                }\n            }\n        }\n        return 0;\n    }\n    *pushTag() {\n        if (this.charAt(1) === '<') {\n            let i = this.pos + 2;\n            let ch = this.buffer[i];\n            while (!isEmpty(ch) && ch !== '>')\n                ch = this.buffer[++i];\n            return yield* this.pushToIndex(ch === '>' ? i + 1 : i, false);\n        }\n        else {\n            let i = this.pos + 1;\n            let ch = this.buffer[i];\n            while (ch) {\n                if (tagChars.has(ch))\n                    ch = this.buffer[++i];\n                else if (ch === '%' &&\n                    hexDigits.has(this.buffer[i + 1]) &&\n                    hexDigits.has(this.buffer[i + 2])) {\n                    ch = this.buffer[(i += 3)];\n                }\n                else\n                    break;\n            }\n            return yield* this.pushToIndex(i, false);\n        }\n    }\n    *pushNewline() {\n        const ch = this.buffer[this.pos];\n        if (ch === '\\n')\n            return yield* this.pushCount(1);\n        else if (ch === '\\r' && this.charAt(1) === '\\n')\n            return yield* this.pushCount(2);\n        else\n            return 0;\n    }\n    *pushSpaces(allowTabs) {\n        let i = this.pos - 1;\n        let ch;\n        do {\n            ch = this.buffer[++i];\n        } while (ch === ' ' || (allowTabs && ch === '\\t'));\n        const n = i - this.pos;\n        if (n > 0) {\n            yield this.buffer.substr(this.pos, n);\n            this.pos = i;\n        }\n        return n;\n    }\n    *pushUntil(test) {\n        let i = this.pos;\n        let ch = this.buffer[i];\n        while (!test(ch))\n            ch = this.buffer[++i];\n        return yield* this.pushToIndex(i, false);\n    }\n}\n\nexport { Lexer };\n","/**\n * Tracks newlines during parsing in order to provide an efficient API for\n * determining the one-indexed `{ line, col }` position for any offset\n * within the input.\n */\nclass LineCounter {\n    constructor() {\n        this.lineStarts = [];\n        /**\n         * Should be called in ascending order. Otherwise, call\n         * `lineCounter.lineStarts.sort()` before calling `linePos()`.\n         */\n        this.addNewLine = (offset) => this.lineStarts.push(offset);\n        /**\n         * Performs a binary search and returns the 1-indexed { line, col }\n         * position of `offset`. If `line === 0`, `addNewLine` has never been\n         * called or `offset` is before the first known newline.\n         */\n        this.linePos = (offset) => {\n            let low = 0;\n            let high = this.lineStarts.length;\n            while (low < high) {\n                const mid = (low + high) >> 1; // Math.floor((low + high) / 2)\n                if (this.lineStarts[mid] < offset)\n                    low = mid + 1;\n                else\n                    high = mid;\n            }\n            if (this.lineStarts[low] === offset)\n                return { line: low + 1, col: 1 };\n            if (low === 0)\n                return { line: 0, col: offset };\n            const start = this.lineStarts[low - 1];\n            return { line: low, col: offset - start + 1 };\n        };\n    }\n}\n\nexport { LineCounter };\n","import { tokenType } from './cst.js';\nimport { Lexer } from './lexer.js';\n\nfunction includesToken(list, type) {\n    for (let i = 0; i < list.length; ++i)\n        if (list[i].type === type)\n            return true;\n    return false;\n}\nfunction findNonEmptyIndex(list) {\n    for (let i = 0; i < list.length; ++i) {\n        switch (list[i].type) {\n            case 'space':\n            case 'comment':\n            case 'newline':\n                break;\n            default:\n                return i;\n        }\n    }\n    return -1;\n}\nfunction isFlowToken(token) {\n    switch (token?.type) {\n        case 'alias':\n        case 'scalar':\n        case 'single-quoted-scalar':\n        case 'double-quoted-scalar':\n        case 'flow-collection':\n            return true;\n        default:\n            return false;\n    }\n}\nfunction getPrevProps(parent) {\n    switch (parent.type) {\n        case 'document':\n            return parent.start;\n        case 'block-map': {\n            const it = parent.items[parent.items.length - 1];\n            return it.sep ?? it.start;\n        }\n        case 'block-seq':\n            return parent.items[parent.items.length - 1].start;\n        /* istanbul ignore next should not happen */\n        default:\n            return [];\n    }\n}\n/** Note: May modify input array */\nfunction getFirstKeyStartProps(prev) {\n    if (prev.length === 0)\n        return [];\n    let i = prev.length;\n    loop: while (--i >= 0) {\n        switch (prev[i].type) {\n            case 'doc-start':\n            case 'explicit-key-ind':\n            case 'map-value-ind':\n            case 'seq-item-ind':\n            case 'newline':\n                break loop;\n        }\n    }\n    while (prev[++i]?.type === 'space') {\n        /* loop */\n    }\n    return prev.splice(i, prev.length);\n}\nfunction fixFlowSeqItems(fc) {\n    if (fc.start.type === 'flow-seq-start') {\n        for (const it of fc.items) {\n            if (it.sep &&\n                !it.value &&\n                !includesToken(it.start, 'explicit-key-ind') &&\n                !includesToken(it.sep, 'map-value-ind')) {\n                if (it.key)\n                    it.value = it.key;\n                delete it.key;\n                if (isFlowToken(it.value)) {\n                    if (it.value.end)\n                        Array.prototype.push.apply(it.value.end, it.sep);\n                    else\n                        it.value.end = it.sep;\n                }\n                else\n                    Array.prototype.push.apply(it.start, it.sep);\n                delete it.sep;\n            }\n        }\n    }\n}\n/**\n * A YAML concrete syntax tree (CST) parser\n *\n * ```ts\n * const src: string = ...\n * for (const token of new Parser().parse(src)) {\n *   // token: Token\n * }\n * ```\n *\n * To use the parser with a user-provided lexer:\n *\n * ```ts\n * function* parse(source: string, lexer: Lexer) {\n *   const parser = new Parser()\n *   for (const lexeme of lexer.lex(source))\n *     yield* parser.next(lexeme)\n *   yield* parser.end()\n * }\n *\n * const src: string = ...\n * const lexer = new Lexer()\n * for (const token of parse(src, lexer)) {\n *   // token: Token\n * }\n * ```\n */\nclass Parser {\n    /**\n     * @param onNewLine - If defined, called separately with the start position of\n     *   each new line (in `parse()`, including the start of input).\n     */\n    constructor(onNewLine) {\n        /** If true, space and sequence indicators count as indentation */\n        this.atNewLine = true;\n        /** If true, next token is a scalar value */\n        this.atScalar = false;\n        /** Current indentation level */\n        this.indent = 0;\n        /** Current offset since the start of parsing */\n        this.offset = 0;\n        /** On the same line with a block map key */\n        this.onKeyLine = false;\n        /** Top indicates the node that's currently being built */\n        this.stack = [];\n        /** The source of the current token, set in parse() */\n        this.source = '';\n        /** The type of the current token, set in parse() */\n        this.type = '';\n        // Must be defined after `next()`\n        this.lexer = new Lexer();\n        this.onNewLine = onNewLine;\n    }\n    /**\n     * Parse `source` as a YAML stream.\n     * If `incomplete`, a part of the last line may be left as a buffer for the next call.\n     *\n     * Errors are not thrown, but yielded as `{ type: 'error', message }` tokens.\n     *\n     * @returns A generator of tokens representing each directive, document, and other structure.\n     */\n    *parse(source, incomplete = false) {\n        if (this.onNewLine && this.offset === 0)\n            this.onNewLine(0);\n        for (const lexeme of this.lexer.lex(source, incomplete))\n            yield* this.next(lexeme);\n        if (!incomplete)\n            yield* this.end();\n    }\n    /**\n     * Advance the parser by the `source` of one lexical token.\n     */\n    *next(source) {\n        this.source = source;\n        if (this.atScalar) {\n            this.atScalar = false;\n            yield* this.step();\n            this.offset += source.length;\n            return;\n        }\n        const type = tokenType(source);\n        if (!type) {\n            const message = `Not a YAML token: ${source}`;\n            yield* this.pop({ type: 'error', offset: this.offset, message, source });\n            this.offset += source.length;\n        }\n        else if (type === 'scalar') {\n            this.atNewLine = false;\n            this.atScalar = true;\n            this.type = 'scalar';\n        }\n        else {\n            this.type = type;\n            yield* this.step();\n            switch (type) {\n                case 'newline':\n                    this.atNewLine = true;\n                    this.indent = 0;\n                    if (this.onNewLine)\n                        this.onNewLine(this.offset + source.length);\n                    break;\n                case 'space':\n                    if (this.atNewLine && source[0] === ' ')\n                        this.indent += source.length;\n                    break;\n                case 'explicit-key-ind':\n                case 'map-value-ind':\n                case 'seq-item-ind':\n                    if (this.atNewLine)\n                        this.indent += source.length;\n                    break;\n                case 'doc-mode':\n                case 'flow-error-end':\n                    return;\n                default:\n                    this.atNewLine = false;\n            }\n            this.offset += source.length;\n        }\n    }\n    /** Call at end of input to push out any remaining constructions */\n    *end() {\n        while (this.stack.length > 0)\n            yield* this.pop();\n    }\n    get sourceToken() {\n        const st = {\n            type: this.type,\n            offset: this.offset,\n            indent: this.indent,\n            source: this.source\n        };\n        return st;\n    }\n    *step() {\n        const top = this.peek(1);\n        if (this.type === 'doc-end' && (!top || top.type !== 'doc-end')) {\n            while (this.stack.length > 0)\n                yield* this.pop();\n            this.stack.push({\n                type: 'doc-end',\n                offset: this.offset,\n                source: this.source\n            });\n            return;\n        }\n        if (!top)\n            return yield* this.stream();\n        switch (top.type) {\n            case 'document':\n                return yield* this.document(top);\n            case 'alias':\n            case 'scalar':\n            case 'single-quoted-scalar':\n            case 'double-quoted-scalar':\n                return yield* this.scalar(top);\n            case 'block-scalar':\n                return yield* this.blockScalar(top);\n            case 'block-map':\n                return yield* this.blockMap(top);\n            case 'block-seq':\n                return yield* this.blockSequence(top);\n            case 'flow-collection':\n                return yield* this.flowCollection(top);\n            case 'doc-end':\n                return yield* this.documentEnd(top);\n        }\n        /* istanbul ignore next should not happen */\n        yield* this.pop();\n    }\n    peek(n) {\n        return this.stack[this.stack.length - n];\n    }\n    *pop(error) {\n        const token = error ?? this.stack.pop();\n        /* istanbul ignore if should not happen */\n        if (!token) {\n            const message = 'Tried to pop an empty stack';\n            yield { type: 'error', offset: this.offset, source: '', message };\n        }\n        else if (this.stack.length === 0) {\n            yield token;\n        }\n        else {\n            const top = this.peek(1);\n            if (token.type === 'block-scalar') {\n                // Block scalars use their parent rather than header indent\n                token.indent = 'indent' in top ? top.indent : 0;\n            }\n            else if (token.type === 'flow-collection' && top.type === 'document') {\n                // Ignore all indent for top-level flow collections\n                token.indent = 0;\n            }\n            if (token.type === 'flow-collection')\n                fixFlowSeqItems(token);\n            switch (top.type) {\n                case 'document':\n                    top.value = token;\n                    break;\n                case 'block-scalar':\n                    top.props.push(token); // error\n                    break;\n                case 'block-map': {\n                    const it = top.items[top.items.length - 1];\n                    if (it.value) {\n                        top.items.push({ start: [], key: token, sep: [] });\n                        this.onKeyLine = true;\n                        return;\n                    }\n                    else if (it.sep) {\n                        it.value = token;\n                    }\n                    else {\n                        Object.assign(it, { key: token, sep: [] });\n                        this.onKeyLine = !it.explicitKey;\n                        return;\n                    }\n                    break;\n                }\n                case 'block-seq': {\n                    const it = top.items[top.items.length - 1];\n                    if (it.value)\n                        top.items.push({ start: [], value: token });\n                    else\n                        it.value = token;\n                    break;\n                }\n                case 'flow-collection': {\n                    const it = top.items[top.items.length - 1];\n                    if (!it || it.value)\n                        top.items.push({ start: [], key: token, sep: [] });\n                    else if (it.sep)\n                        it.value = token;\n                    else\n                        Object.assign(it, { key: token, sep: [] });\n                    return;\n                }\n                /* istanbul ignore next should not happen */\n                default:\n                    yield* this.pop();\n                    yield* this.pop(token);\n            }\n            if ((top.type === 'document' ||\n                top.type === 'block-map' ||\n                top.type === 'block-seq') &&\n                (token.type === 'block-map' || token.type === 'block-seq')) {\n                const last = token.items[token.items.length - 1];\n                if (last &&\n                    !last.sep &&\n                    !last.value &&\n                    last.start.length > 0 &&\n                    findNonEmptyIndex(last.start) === -1 &&\n                    (token.indent === 0 ||\n                        last.start.every(st => st.type !== 'comment' || st.indent < token.indent))) {\n                    if (top.type === 'document')\n                        top.end = last.start;\n                    else\n                        top.items.push({ start: last.start });\n                    token.items.splice(-1, 1);\n                }\n            }\n        }\n    }\n    *stream() {\n        switch (this.type) {\n            case 'directive-line':\n                yield { type: 'directive', offset: this.offset, source: this.source };\n                return;\n            case 'byte-order-mark':\n            case 'space':\n            case 'comment':\n            case 'newline':\n                yield this.sourceToken;\n                return;\n            case 'doc-mode':\n            case 'doc-start': {\n                const doc = {\n                    type: 'document',\n                    offset: this.offset,\n                    start: []\n                };\n                if (this.type === 'doc-start')\n                    doc.start.push(this.sourceToken);\n                this.stack.push(doc);\n                return;\n            }\n        }\n        yield {\n            type: 'error',\n            offset: this.offset,\n            message: `Unexpected ${this.type} token in YAML stream`,\n            source: this.source\n        };\n    }\n    *document(doc) {\n        if (doc.value)\n            return yield* this.lineEnd(doc);\n        switch (this.type) {\n            case 'doc-start': {\n                if (findNonEmptyIndex(doc.start) !== -1) {\n                    yield* this.pop();\n                    yield* this.step();\n                }\n                else\n                    doc.start.push(this.sourceToken);\n                return;\n            }\n            case 'anchor':\n            case 'tag':\n            case 'space':\n            case 'comment':\n            case 'newline':\n                doc.start.push(this.sourceToken);\n                return;\n        }\n        const bv = this.startBlockValue(doc);\n        if (bv)\n            this.stack.push(bv);\n        else {\n            yield {\n                type: 'error',\n                offset: this.offset,\n                message: `Unexpected ${this.type} token in YAML document`,\n                source: this.source\n            };\n        }\n    }\n    *scalar(scalar) {\n        if (this.type === 'map-value-ind') {\n            const prev = getPrevProps(this.peek(2));\n            const start = getFirstKeyStartProps(prev);\n            let sep;\n            if (scalar.end) {\n                sep = scalar.end;\n                sep.push(this.sourceToken);\n                delete scalar.end;\n            }\n            else\n                sep = [this.sourceToken];\n            const map = {\n                type: 'block-map',\n                offset: scalar.offset,\n                indent: scalar.indent,\n                items: [{ start, key: scalar, sep }]\n            };\n            this.onKeyLine = true;\n            this.stack[this.stack.length - 1] = map;\n        }\n        else\n            yield* this.lineEnd(scalar);\n    }\n    *blockScalar(scalar) {\n        switch (this.type) {\n            case 'space':\n            case 'comment':\n            case 'newline':\n                scalar.props.push(this.sourceToken);\n                return;\n            case 'scalar':\n                scalar.source = this.source;\n                // block-scalar source includes trailing newline\n                this.atNewLine = true;\n                this.indent = 0;\n                if (this.onNewLine) {\n                    let nl = this.source.indexOf('\\n') + 1;\n                    while (nl !== 0) {\n                        this.onNewLine(this.offset + nl);\n                        nl = this.source.indexOf('\\n', nl) + 1;\n                    }\n                }\n                yield* this.pop();\n                break;\n            /* istanbul ignore next should not happen */\n            default:\n                yield* this.pop();\n                yield* this.step();\n        }\n    }\n    *blockMap(map) {\n        const it = map.items[map.items.length - 1];\n        // it.sep is true-ish if pair already has key or : separator\n        switch (this.type) {\n            case 'newline':\n                this.onKeyLine = false;\n                if (it.value) {\n                    const end = 'end' in it.value ? it.value.end : undefined;\n                    const last = Array.isArray(end) ? end[end.length - 1] : undefined;\n                    if (last?.type === 'comment')\n                        end?.push(this.sourceToken);\n                    else\n                        map.items.push({ start: [this.sourceToken] });\n                }\n                else if (it.sep) {\n                    it.sep.push(this.sourceToken);\n                }\n                else {\n                    it.start.push(this.sourceToken);\n                }\n                return;\n            case 'space':\n            case 'comment':\n                if (it.value) {\n                    map.items.push({ start: [this.sourceToken] });\n                }\n                else if (it.sep) {\n                    it.sep.push(this.sourceToken);\n                }\n                else {\n                    if (this.atIndentedComment(it.start, map.indent)) {\n                        const prev = map.items[map.items.length - 2];\n                        const end = prev?.value?.end;\n                        if (Array.isArray(end)) {\n                            Array.prototype.push.apply(end, it.start);\n                            end.push(this.sourceToken);\n                            map.items.pop();\n                            return;\n                        }\n                    }\n                    it.start.push(this.sourceToken);\n                }\n                return;\n        }\n        if (this.indent >= map.indent) {\n            const atMapIndent = !this.onKeyLine && this.indent === map.indent;\n            const atNextItem = atMapIndent &&\n                (it.sep || it.explicitKey) &&\n                this.type !== 'seq-item-ind';\n            // For empty nodes, assign newline-separated not indented empty tokens to following node\n            let start = [];\n            if (atNextItem && it.sep && !it.value) {\n                const nl = [];\n                for (let i = 0; i < it.sep.length; ++i) {\n                    const st = it.sep[i];\n                    switch (st.type) {\n                        case 'newline':\n                            nl.push(i);\n                            break;\n                        case 'space':\n                            break;\n                        case 'comment':\n                            if (st.indent > map.indent)\n                                nl.length = 0;\n                            break;\n                        default:\n                            nl.length = 0;\n                    }\n                }\n                if (nl.length >= 2)\n                    start = it.sep.splice(nl[1]);\n            }\n            switch (this.type) {\n                case 'anchor':\n                case 'tag':\n                    if (atNextItem || it.value) {\n                        start.push(this.sourceToken);\n                        map.items.push({ start });\n                        this.onKeyLine = true;\n                    }\n                    else if (it.sep) {\n                        it.sep.push(this.sourceToken);\n                    }\n                    else {\n                        it.start.push(this.sourceToken);\n                    }\n                    return;\n                case 'explicit-key-ind':\n                    if (!it.sep && !it.explicitKey) {\n                        it.start.push(this.sourceToken);\n                        it.explicitKey = true;\n                    }\n                    else if (atNextItem || it.value) {\n                        start.push(this.sourceToken);\n                        map.items.push({ start, explicitKey: true });\n                    }\n                    else {\n                        this.stack.push({\n                            type: 'block-map',\n                            offset: this.offset,\n                            indent: this.indent,\n                            items: [{ start: [this.sourceToken], explicitKey: true }]\n                        });\n                    }\n                    this.onKeyLine = true;\n                    return;\n                case 'map-value-ind':\n                    if (it.explicitKey) {\n                        if (!it.sep) {\n                            if (includesToken(it.start, 'newline')) {\n                                Object.assign(it, { key: null, sep: [this.sourceToken] });\n                            }\n                            else {\n                                const start = getFirstKeyStartProps(it.start);\n                                this.stack.push({\n                                    type: 'block-map',\n                                    offset: this.offset,\n                                    indent: this.indent,\n                                    items: [{ start, key: null, sep: [this.sourceToken] }]\n                                });\n                            }\n                        }\n                        else if (it.value) {\n                            map.items.push({ start: [], key: null, sep: [this.sourceToken] });\n                        }\n                        else if (includesToken(it.sep, 'map-value-ind')) {\n                            this.stack.push({\n                                type: 'block-map',\n                                offset: this.offset,\n                                indent: this.indent,\n                                items: [{ start, key: null, sep: [this.sourceToken] }]\n                            });\n                        }\n                        else if (isFlowToken(it.key) &&\n                            !includesToken(it.sep, 'newline')) {\n                            const start = getFirstKeyStartProps(it.start);\n                            const key = it.key;\n                            const sep = it.sep;\n                            sep.push(this.sourceToken);\n                            // @ts-expect-error type guard is wrong here\n                            delete it.key, delete it.sep;\n                            this.stack.push({\n                                type: 'block-map',\n                                offset: this.offset,\n                                indent: this.indent,\n                                items: [{ start, key, sep }]\n                            });\n                        }\n                        else if (start.length > 0) {\n                            // Not actually at next item\n                            it.sep = it.sep.concat(start, this.sourceToken);\n                        }\n                        else {\n                            it.sep.push(this.sourceToken);\n                        }\n                    }\n                    else {\n                        if (!it.sep) {\n                            Object.assign(it, { key: null, sep: [this.sourceToken] });\n                        }\n                        else if (it.value || atNextItem) {\n                            map.items.push({ start, key: null, sep: [this.sourceToken] });\n                        }\n                        else if (includesToken(it.sep, 'map-value-ind')) {\n                            this.stack.push({\n                                type: 'block-map',\n                                offset: this.offset,\n                                indent: this.indent,\n                                items: [{ start: [], key: null, sep: [this.sourceToken] }]\n                            });\n                        }\n                        else {\n                            it.sep.push(this.sourceToken);\n                        }\n                    }\n                    this.onKeyLine = true;\n                    return;\n                case 'alias':\n                case 'scalar':\n                case 'single-quoted-scalar':\n                case 'double-quoted-scalar': {\n                    const fs = this.flowScalar(this.type);\n                    if (atNextItem || it.value) {\n                        map.items.push({ start, key: fs, sep: [] });\n                        this.onKeyLine = true;\n                    }\n                    else if (it.sep) {\n                        this.stack.push(fs);\n                    }\n                    else {\n                        Object.assign(it, { key: fs, sep: [] });\n                        this.onKeyLine = true;\n                    }\n                    return;\n                }\n                default: {\n                    const bv = this.startBlockValue(map);\n                    if (bv) {\n                        if (atMapIndent && bv.type !== 'block-seq') {\n                            map.items.push({ start });\n                        }\n                        this.stack.push(bv);\n                        return;\n                    }\n                }\n            }\n        }\n        yield* this.pop();\n        yield* this.step();\n    }\n    *blockSequence(seq) {\n        const it = seq.items[seq.items.length - 1];\n        switch (this.type) {\n            case 'newline':\n                if (it.value) {\n                    const end = 'end' in it.value ? it.value.end : undefined;\n                    const last = Array.isArray(end) ? end[end.length - 1] : undefined;\n                    if (last?.type === 'comment')\n                        end?.push(this.sourceToken);\n                    else\n                        seq.items.push({ start: [this.sourceToken] });\n                }\n                else\n                    it.start.push(this.sourceToken);\n                return;\n            case 'space':\n            case 'comment':\n                if (it.value)\n                    seq.items.push({ start: [this.sourceToken] });\n                else {\n                    if (this.atIndentedComment(it.start, seq.indent)) {\n                        const prev = seq.items[seq.items.length - 2];\n                        const end = prev?.value?.end;\n                        if (Array.isArray(end)) {\n                            Array.prototype.push.apply(end, it.start);\n                            end.push(this.sourceToken);\n                            seq.items.pop();\n                            return;\n                        }\n                    }\n                    it.start.push(this.sourceToken);\n                }\n                return;\n            case 'anchor':\n            case 'tag':\n                if (it.value || this.indent <= seq.indent)\n                    break;\n                it.start.push(this.sourceToken);\n                return;\n            case 'seq-item-ind':\n                if (this.indent !== seq.indent)\n                    break;\n                if (it.value || includesToken(it.start, 'seq-item-ind'))\n                    seq.items.push({ start: [this.sourceToken] });\n                else\n                    it.start.push(this.sourceToken);\n                return;\n        }\n        if (this.indent > seq.indent) {\n            const bv = this.startBlockValue(seq);\n            if (bv) {\n                this.stack.push(bv);\n                return;\n            }\n        }\n        yield* this.pop();\n        yield* this.step();\n    }\n    *flowCollection(fc) {\n        const it = fc.items[fc.items.length - 1];\n        if (this.type === 'flow-error-end') {\n            let top;\n            do {\n                yield* this.pop();\n                top = this.peek(1);\n            } while (top && top.type === 'flow-collection');\n        }\n        else if (fc.end.length === 0) {\n            switch (this.type) {\n                case 'comma':\n                case 'explicit-key-ind':\n                    if (!it || it.sep)\n                        fc.items.push({ start: [this.sourceToken] });\n                    else\n                        it.start.push(this.sourceToken);\n                    return;\n                case 'map-value-ind':\n                    if (!it || it.value)\n                        fc.items.push({ start: [], key: null, sep: [this.sourceToken] });\n                    else if (it.sep)\n                        it.sep.push(this.sourceToken);\n                    else\n                        Object.assign(it, { key: null, sep: [this.sourceToken] });\n                    return;\n                case 'space':\n                case 'comment':\n                case 'newline':\n                case 'anchor':\n                case 'tag':\n                    if (!it || it.value)\n                        fc.items.push({ start: [this.sourceToken] });\n                    else if (it.sep)\n                        it.sep.push(this.sourceToken);\n                    else\n                        it.start.push(this.sourceToken);\n                    return;\n                case 'alias':\n                case 'scalar':\n                case 'single-quoted-scalar':\n                case 'double-quoted-scalar': {\n                    const fs = this.flowScalar(this.type);\n                    if (!it || it.value)\n                        fc.items.push({ start: [], key: fs, sep: [] });\n                    else if (it.sep)\n                        this.stack.push(fs);\n                    else\n                        Object.assign(it, { key: fs, sep: [] });\n                    return;\n                }\n                case 'flow-map-end':\n                case 'flow-seq-end':\n                    fc.end.push(this.sourceToken);\n                    return;\n            }\n            const bv = this.startBlockValue(fc);\n            /* istanbul ignore else should not happen */\n            if (bv)\n                this.stack.push(bv);\n            else {\n                yield* this.pop();\n                yield* this.step();\n            }\n        }\n        else {\n            const parent = this.peek(2);\n            if (parent.type === 'block-map' &&\n                ((this.type === 'map-value-ind' && parent.indent === fc.indent) ||\n                    (this.type === 'newline' &&\n                        !parent.items[parent.items.length - 1].sep))) {\n                yield* this.pop();\n                yield* this.step();\n            }\n            else if (this.type === 'map-value-ind' &&\n                parent.type !== 'flow-collection') {\n                const prev = getPrevProps(parent);\n                const start = getFirstKeyStartProps(prev);\n                fixFlowSeqItems(fc);\n                const sep = fc.end.splice(1, fc.end.length);\n                sep.push(this.sourceToken);\n                const map = {\n                    type: 'block-map',\n                    offset: fc.offset,\n                    indent: fc.indent,\n                    items: [{ start, key: fc, sep }]\n                };\n                this.onKeyLine = true;\n                this.stack[this.stack.length - 1] = map;\n            }\n            else {\n                yield* this.lineEnd(fc);\n            }\n        }\n    }\n    flowScalar(type) {\n        if (this.onNewLine) {\n            let nl = this.source.indexOf('\\n') + 1;\n            while (nl !== 0) {\n                this.onNewLine(this.offset + nl);\n                nl = this.source.indexOf('\\n', nl) + 1;\n            }\n        }\n        return {\n            type,\n            offset: this.offset,\n            indent: this.indent,\n            source: this.source\n        };\n    }\n    startBlockValue(parent) {\n        switch (this.type) {\n            case 'alias':\n            case 'scalar':\n            case 'single-quoted-scalar':\n            case 'double-quoted-scalar':\n                return this.flowScalar(this.type);\n            case 'block-scalar-header':\n                return {\n                    type: 'block-scalar',\n                    offset: this.offset,\n                    indent: this.indent,\n                    props: [this.sourceToken],\n                    source: ''\n                };\n            case 'flow-map-start':\n            case 'flow-seq-start':\n                return {\n                    type: 'flow-collection',\n                    offset: this.offset,\n                    indent: this.indent,\n                    start: this.sourceToken,\n                    items: [],\n                    end: []\n                };\n            case 'seq-item-ind':\n                return {\n                    type: 'block-seq',\n                    offset: this.offset,\n                    indent: this.indent,\n                    items: [{ start: [this.sourceToken] }]\n                };\n            case 'explicit-key-ind': {\n                this.onKeyLine = true;\n                const prev = getPrevProps(parent);\n                const start = getFirstKeyStartProps(prev);\n                start.push(this.sourceToken);\n                return {\n                    type: 'block-map',\n                    offset: this.offset,\n                    indent: this.indent,\n                    items: [{ start, explicitKey: true }]\n                };\n            }\n            case 'map-value-ind': {\n                this.onKeyLine = true;\n                const prev = getPrevProps(parent);\n                const start = getFirstKeyStartProps(prev);\n                return {\n                    type: 'block-map',\n                    offset: this.offset,\n                    indent: this.indent,\n                    items: [{ start, key: null, sep: [this.sourceToken] }]\n                };\n            }\n        }\n        return null;\n    }\n    atIndentedComment(start, indent) {\n        if (this.type !== 'comment')\n            return false;\n        if (this.indent <= indent)\n            return false;\n        return start.every(st => st.type === 'newline' || st.type === 'space');\n    }\n    *documentEnd(docEnd) {\n        if (this.type !== 'doc-mode') {\n            if (docEnd.end)\n                docEnd.end.push(this.sourceToken);\n            else\n                docEnd.end = [this.sourceToken];\n            if (this.type === 'newline')\n                yield* this.pop();\n        }\n    }\n    *lineEnd(token) {\n        switch (this.type) {\n            case 'comma':\n            case 'doc-start':\n            case 'doc-end':\n            case 'flow-seq-end':\n            case 'flow-map-end':\n            case 'map-value-ind':\n                yield* this.pop();\n                yield* this.step();\n                break;\n            case 'newline':\n                this.onKeyLine = false;\n            // fallthrough\n            case 'space':\n            case 'comment':\n            default:\n                // all other values are errors\n                if (token.end)\n                    token.end.push(this.sourceToken);\n                else\n                    token.end = [this.sourceToken];\n                if (this.type === 'newline')\n                    yield* this.pop();\n        }\n    }\n}\n\nexport { Parser };\n","import { Composer } from './compose/composer.js';\nimport { Document } from './doc/Document.js';\nimport { prettifyError, YAMLParseError } from './errors.js';\nimport { warn } from './log.js';\nimport { LineCounter } from './parse/line-counter.js';\nimport { Parser } from './parse/parser.js';\n\nfunction parseOptions(options) {\n    const prettyErrors = options.prettyErrors !== false;\n    const lineCounter = options.lineCounter || (prettyErrors && new LineCounter()) || null;\n    return { lineCounter, prettyErrors };\n}\n/**\n * Parse the input as a stream of YAML documents.\n *\n * Documents should be separated from each other by `...` or `---` marker lines.\n *\n * @returns If an empty `docs` array is returned, it will be of type\n *   EmptyStream and contain additional stream information. In\n *   TypeScript, you should use `'empty' in docs` as a type guard for it.\n */\nfunction parseAllDocuments(source, options = {}) {\n    const { lineCounter, prettyErrors } = parseOptions(options);\n    const parser = new Parser(lineCounter?.addNewLine);\n    const composer = new Composer(options);\n    const docs = Array.from(composer.compose(parser.parse(source)));\n    if (prettyErrors && lineCounter)\n        for (const doc of docs) {\n            doc.errors.forEach(prettifyError(source, lineCounter));\n            doc.warnings.forEach(prettifyError(source, lineCounter));\n        }\n    if (docs.length > 0)\n        return docs;\n    return Object.assign([], { empty: true }, composer.streamInfo());\n}\n/** Parse an input string into a single YAML.Document */\nfunction parseDocument(source, options = {}) {\n    const { lineCounter, prettyErrors } = parseOptions(options);\n    const parser = new Parser(lineCounter?.addNewLine);\n    const composer = new Composer(options);\n    // `doc` is always set by compose.end(true) at the very latest\n    let doc = null;\n    for (const _doc of composer.compose(parser.parse(source), true, source.length)) {\n        if (!doc)\n            doc = _doc;\n        else if (doc.options.logLevel !== 'silent') {\n            doc.errors.push(new YAMLParseError(_doc.range.slice(0, 2), 'MULTIPLE_DOCS', 'Source contains multiple documents; please use YAML.parseAllDocuments()'));\n            break;\n        }\n    }\n    if (prettyErrors && lineCounter) {\n        doc.errors.forEach(prettifyError(source, lineCounter));\n        doc.warnings.forEach(prettifyError(source, lineCounter));\n    }\n    return doc;\n}\nfunction parse(src, reviver, options) {\n    let _reviver = undefined;\n    if (typeof reviver === 'function') {\n        _reviver = reviver;\n    }\n    else if (options === undefined && reviver && typeof reviver === 'object') {\n        options = reviver;\n    }\n    const doc = parseDocument(src, options);\n    if (!doc)\n        return null;\n    doc.warnings.forEach(warning => warn(doc.options.logLevel, warning));\n    if (doc.errors.length > 0) {\n        if (doc.options.logLevel !== 'silent')\n            throw doc.errors[0];\n        else\n            doc.errors = [];\n    }\n    return doc.toJS(Object.assign({ reviver: _reviver }, options));\n}\nfunction stringify(value, replacer, options) {\n    let _replacer = null;\n    if (typeof replacer === 'function' || Array.isArray(replacer)) {\n        _replacer = replacer;\n    }\n    else if (options === undefined && replacer) {\n        options = replacer;\n    }\n    if (typeof options === 'string')\n        options = options.length;\n    if (typeof options === 'number') {\n        const indent = Math.round(options);\n        options = indent < 1 ? undefined : indent > 8 ? { indent: 8 } : { indent };\n    }\n    if (value === undefined) {\n        const { keepUndefined } = options ?? replacer ?? {};\n        if (!keepUndefined)\n            return undefined;\n    }\n    return new Document(value, _replacer, options).toString(options);\n}\n\nexport { parse, parseAllDocuments, parseDocument, stringify };\n","export { Composer } from './compose/composer.js';\nexport { Document } from './doc/Document.js';\nexport { Schema } from './schema/Schema.js';\nexport { YAMLError, YAMLParseError, YAMLWarning } from './errors.js';\nexport { Alias } from './nodes/Alias.js';\nexport { isAlias, isCollection, isDocument, isMap, isNode, isPair, isScalar, isSeq } from './nodes/identity.js';\nexport { Pair } from './nodes/Pair.js';\nexport { Scalar } from './nodes/Scalar.js';\nexport { YAMLMap } from './nodes/YAMLMap.js';\nexport { YAMLSeq } from './nodes/YAMLSeq.js';\nimport * as cst from './parse/cst.js';\nexport { cst as CST };\nexport { Lexer } from './parse/lexer.js';\nexport { LineCounter } from './parse/line-counter.js';\nexport { Parser } from './parse/parser.js';\nexport { parse, parseAllDocuments, parseDocument, stringify } from './public-api.js';\nexport { visit, visitAsync } from './visit.js';\n","// `export * as default from ...` fails on Webpack v4\n// https://github.com/eemeli/yaml/issues/228\nimport * as YAML from './dist/index.js'\nexport default YAML\nexport * from './dist/index.js'\n","/**\n * @typedef {import('vfile').VFile} VFile\n * @typedef {import('yaml').DocumentOptions} DocumentOptions\n * @typedef {import('yaml').ParseOptions} ParseOptions\n * @typedef {import('yaml').SchemaOptions} SchemaOptions\n * @typedef {import('yaml').ToJSOptions} ToJsOptions\n */\n\n/**\n * @template Type\n *   Type.\n * @typedef {{[Key in keyof Type]: Type[Key]} & {}} Prettify\n *   Flatten a TypeScript record.\n */\n\n/**\n * @typedef {Prettify<ParseOptions & DocumentOptions & SchemaOptions & ToJsOptions>} YamlOptions\n *   Options for the YAML parser.\n *\n *   Equivalent to `ParseOptions`, `DocumentOptions`, `SchemaOptions`, and `ToJsOptions`.\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [strip=false]\n *   Remove the YAML front matter from the file (default: `false`).\n * @property {YamlOptions | null | undefined} [yaml={}]\n *   Configuration for the YAML parser, passed to `yaml` as `x` in\n *   `yaml.parse('', x)` (default: `{}`).\n */\n\nimport yaml from 'yaml'\n\nconst regex = /^---(?:\\r?\\n|\\r)(?:([\\s\\S]*?)(?:\\r?\\n|\\r))?---(?:\\r?\\n|\\r|$)/\n\n/**\n * Parse the YAML front matter in a file and expose it as `file.data.matter`.\n *\n * If no matter is found in the file, nothing happens, except that\n * `file.data.matter` is set to an empty object (`{}`).\n *\n * If the file value is an `Uint8Array`, assumes it is encoded in UTF-8.\n *\n * @param {VFile} file\n *   Virtual file.\n * @param {Options | null | undefined} [options={}]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport function matter(file, options) {\n  const options_ = options || {}\n  const strip = options_.strip\n  const yamlOptions = options_.yaml || {}\n  let doc = String(file)\n  const match = regex.exec(doc)\n\n  if (match) {\n    file.data.matter = yaml.parse(match[1], yamlOptions)\n\n    if (strip) {\n      doc = doc.slice(match[0].length)\n\n      file.value =\n        file.value && typeof file.value === 'object'\n          ? new TextEncoder().encode(doc)\n          : doc\n    }\n  } else {\n    file.data.matter = {}\n  }\n}\n","/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\nimport { codeFrameColumns } from '@babel/code-frame';\n/**\n * Attempt to parse position information from an error message originating from the MDX compiler.\n * Only used if the error object doesn't contain\n */\nfunction parsePositionInformationFromErrorMessage(message) {\n    const positionInfoPattern = /\\d+:\\d+(-\\d+:\\d+)/g;\n    const match = message.match(positionInfoPattern);\n    if (match) {\n        // take the last match, that seems to be the most reliable source of the error.\n        const lastMatch = match.slice(-1)[0];\n        const [line, column] = lastMatch.split('-')[0].split(':');\n        return {\n            start: {\n                line: Number.parseInt(line, 10),\n                column: Number.parseInt(column, 10),\n            },\n        };\n    }\n}\n/**\n * Prints a nicely formatted error message from an error caught during MDX compilation.\n *\n * @param error - Error caught from the mdx compiler\n * @param source - Raw MDX string\n * @returns Error\n */\nexport function createFormattedMDXError(error, source) {\n    const position = error?.position ?? parsePositionInformationFromErrorMessage(error?.message);\n    const codeFrames = position\n        ? codeFrameColumns(source, {\n            start: {\n                line: position.start.line,\n                column: position.start.column ?? 0,\n            },\n        }, { linesAbove: 2, linesBelow: 2 })\n        : '';\n    const formattedError = new Error(`[next-mdx-remote] error compiling MDX:\n${error?.message}\n${codeFrames ? '\\n' + codeFrames + '\\n' : ''}\nMore information: https://mdxjs.com/docs/troubleshooting-mdx`);\n    formattedError.stack = '';\n    return formattedError;\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @typedef {Record<string, unknown>} Props\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\n *   Check for an arbitrary node, unaware of TypeScript inferral.\n *\n * @callback TestFunctionAnything\n *   Check if a node passes a test, unaware of TypeScript inferral.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | void}\n *   Whether this node passes the test.\n */\n\n/**\n * @template {Node} Kind\n *   Node type.\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\n *   Check for a node that can be inferred by TypeScript.\n */\n\n/**\n * Check if a node passes a certain test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback TestFunctionPredicate\n *   Complex test function for a node that can be inferred by TypeScript.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this node passes the test.\n */\n\n/**\n * @callback AssertAnything\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if a node is a node and passes a certain node test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback AssertPredicate\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @param test\n *   A check for a specific node.\n * @param index\n *   The node’s position in its parent.\n * @param parent\n *   The node’s parent.\n * @returns\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  /**\n   * @type {(\n   *   (() => false) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\n   *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\n   *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function is(node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      // @ts-expect-error Looks like a node.\n      return node && node.type && typeof node.type === 'string'\n        ? Boolean(check.call(context, node, index, parent))\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns\n *   An assertion.\n */\nexport const convert =\n  /**\n   * @type {(\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return ok\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<string | Props | TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node, ...parameters) {\n    return Boolean(\n      node &&\n        typeof node === 'object' &&\n        'type' in node &&\n        // @ts-expect-error: fine.\n        Boolean(check.call(this, node, ...parameters))\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n *\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [cascade=true]\n *   Whether to drop parent nodes if they had children, but all their children\n *   were filtered out.\n */\n\nimport {convert} from 'unist-util-is'\n\n/** @type {Array<unknown>} */\nconst empty = []\n\n/**\n * Change the given `tree` by removing all nodes that pass `test`.\n *\n * The tree is walked in preorder (NLR), visiting the node itself, then its\n * head, etc.\n *\n * @param tree\n *   Tree to change.\n * @param options\n *   Configuration (optional).\n * @param test\n *   `unist-util-is` compatible test.\n * @returns\n *   The given `tree` without nodes that pass `test`.\n *\n *   `null` is returned if `tree` itself didn’t pass the test or is cascaded\n *   away.\n */\n// To do: next major: don’t return `tree`.\nexport const remove =\n  /**\n   * @type {(\n   *  (<Tree extends Node>(node: Tree, options: Options, test: Test) => Tree | null) &\n   *  (<Tree extends Node>(node: Tree, test: Test) => Tree | null)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Options | null | undefined} [options]\n     * @param {Test | null | undefined} [test]\n     * @returns {Node | null}\n     */\n    function (tree, options, test) {\n      const is = convert(test || options)\n      const cascade =\n        !options || options.cascade === undefined || options.cascade === null\n          ? true\n          : options.cascade\n\n      return preorder(tree)\n\n      /**\n       * Check and remove nodes recursively in preorder.\n       * For each composite node, modify its children array in-place.\n       *\n       * @param {Node} node\n       * @param {number | null | undefined} [index]\n       * @param {Parent | null | undefined} [parent]\n       * @returns {Node | null}\n       */\n      function preorder(node, index, parent) {\n        /** @type {Array<Node>} */\n        // @ts-expect-error looks like a parent.\n        const children = node.children || empty\n        let childIndex = -1\n        let position = 0\n\n        if (is(node, index, parent)) {\n          return null\n        }\n\n        if (children.length > 0) {\n          // Move all living children to the beginning of the children array.\n          while (++childIndex < children.length) {\n            // @ts-expect-error looks like a parent.\n            if (preorder(children[childIndex], childIndex, node)) {\n              children[position++] = children[childIndex]\n            }\n          }\n\n          // Cascade delete.\n          if (cascade && !position) {\n            return null\n          }\n\n          // Drop other nodes.\n          children.length = position\n        }\n\n        return node\n      }\n    }\n  )\n","/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\nimport { remove } from 'unist-util-remove';\n/**\n * remark plugin which removes all import and export statements\n */\nexport function removeImportsExportsPlugin() {\n    return (tree) => remove(tree, 'mdxjsEsm');\n}\n","/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\nimport { compile } from '@mdx-js/mdx';\nimport { VFile } from 'vfile';\nimport { matter } from 'vfile-matter';\nimport { createFormattedMDXError } from './format-mdx-error.js';\nimport { removeImportsExportsPlugin } from './plugins/remove-imports-exports.js';\nfunction getCompileOptions(mdxOptions = {}, rsc = false) {\n    const areImportsEnabled = mdxOptions.useDynamicImport ?? false;\n    // don't modify the original object when adding our own plugin\n    // this allows code to reuse the same options object\n    const remarkPlugins = [\n        ...(mdxOptions.remarkPlugins || []),\n        ...(areImportsEnabled ? [] : [removeImportsExportsPlugin]),\n    ];\n    return {\n        ...mdxOptions,\n        remarkPlugins,\n        outputFormat: 'function-body',\n        // Disable the importSource option for RSC to ensure there's no `useMDXComponents` implemented.\n        providerImportSource: rsc ? undefined : '@mdx-js/react',\n        development: process.env.NODE_ENV !== 'production',\n    };\n}\n/**\n * Parses and compiles the provided MDX string. Returns a result which can be passed into <MDXRemote /> to be rendered.\n */\nexport async function serialize(source, { scope = {}, mdxOptions = {}, parseFrontmatter = false, } = {}, rsc = false) {\n    const vfile = new VFile(source);\n    // makes frontmatter available via vfile.data.matter\n    if (parseFrontmatter) {\n        matter(vfile, { strip: true });\n    }\n    let compiledMdx;\n    try {\n        compiledMdx = await compile(vfile, getCompileOptions(mdxOptions, rsc));\n    }\n    catch (error) {\n        throw createFormattedMDXError(error, String(vfile));\n    }\n    let compiledSource = String(compiledMdx);\n    return {\n        compiledSource,\n        frontmatter: (vfile.data.matter ?? {}),\n        scope: scope,\n    };\n}\n","/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\nimport React from 'react';\nimport { jsxRuntime } from './jsx-runtime.cjs';\nimport { serialize } from './serialize.js';\nexport async function compileMDX({ source, options, components = {}, }) {\n    const { compiledSource, frontmatter, scope } = await serialize(source, options, \n    // Enable RSC importSource\n    true);\n    // if we're ready to render, we can assemble the component tree and let React do its thing\n    // first we set up the scope which has to include the mdx custom\n    // create element function as well as any components we're using\n    const fullScope = Object.assign({\n        opts: jsxRuntime,\n    }, { frontmatter }, scope);\n    const keys = Object.keys(fullScope);\n    const values = Object.values(fullScope);\n    // now we eval the source code using a function constructor\n    // in order for this to work we need to have React, the mdx createElement,\n    // and all our components in scope for the function, which is the case here\n    // we pass the names (via keys) in as the function's args, and execute the\n    // function with the actual values.\n    const hydrateFn = Reflect.construct(Function, keys.concat(`${compiledSource}`));\n    const Content = hydrateFn.apply(hydrateFn, values).default;\n    return {\n        content: React.createElement(Content, { components: components }),\n        frontmatter,\n    };\n}\n/**\n * Renders compiled source from next-mdx-remote/serialize.\n */\nexport async function MDXRemote(props) {\n    const { content } = await compileMDX(props);\n    return content;\n}\n","/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\n\nexport * from './dist/rsc.js'\n","export var IconsManifest = [\n  {\n    \"id\": \"ci\",\n    \"name\": \"Circum Icons\",\n    \"projectUrl\": \"https://circumicons.com/\",\n    \"license\": \"MPL-2.0 license\",\n    \"licenseUrl\": \"https://github.com/Klarr-Agency/Circum-Icons/blob/main/LICENSE\"\n  },\n  {\n    \"id\": \"fa\",\n    \"name\": \"Font Awesome 5\",\n    \"projectUrl\": \"https://fontawesome.com/\",\n    \"license\": \"CC BY 4.0 License\",\n    \"licenseUrl\": \"https://creativecommons.org/licenses/by/4.0/\"\n  },\n  {\n    \"id\": \"fa6\",\n    \"name\": \"Font Awesome 6\",\n    \"projectUrl\": \"https://fontawesome.com/\",\n    \"license\": \"CC BY 4.0 License\",\n    \"licenseUrl\": \"https://creativecommons.org/licenses/by/4.0/\"\n  },\n  {\n    \"id\": \"io\",\n    \"name\": \"Ionicons 4\",\n    \"projectUrl\": \"https://ionicons.com/\",\n    \"license\": \"MIT\",\n    \"licenseUrl\": \"https://github.com/ionic-team/ionicons/blob/master/LICENSE\"\n  },\n  {\n    \"id\": \"io5\",\n    \"name\": \"Ionicons 5\",\n    \"projectUrl\": \"https://ionicons.com/\",\n    \"license\": \"MIT\",\n    \"licenseUrl\": \"https://github.com/ionic-team/ionicons/blob/master/LICENSE\"\n  },\n  {\n    \"id\": \"md\",\n    \"name\": \"Material Design icons\",\n    \"projectUrl\": \"http://google.github.io/material-design-icons/\",\n    \"license\": \"Apache License Version 2.0\",\n    \"licenseUrl\": \"https://github.com/google/material-design-icons/blob/master/LICENSE\"\n  },\n  {\n    \"id\": \"ti\",\n    \"name\": \"Typicons\",\n    \"projectUrl\": \"http://s-ings.com/typicons/\",\n    \"license\": \"CC BY-SA 3.0\",\n    \"licenseUrl\": \"https://creativecommons.org/licenses/by-sa/3.0/\"\n  },\n  {\n    \"id\": \"go\",\n    \"name\": \"Github Octicons icons\",\n    \"projectUrl\": \"https://octicons.github.com/\",\n    \"license\": \"MIT\",\n    \"licenseUrl\": \"https://github.com/primer/octicons/blob/master/LICENSE\"\n  },\n  {\n    \"id\": \"fi\",\n    \"name\": \"Feather\",\n    \"projectUrl\": \"https://feathericons.com/\",\n    \"license\": \"MIT\",\n    \"licenseUrl\": \"https://github.com/feathericons/feather/blob/master/LICENSE\"\n  },\n  {\n    \"id\": \"lu\",\n    \"name\": \"Lucide\",\n    \"projectUrl\": \"https://lucide.dev/\",\n    \"license\": \"ISC\",\n    \"licenseUrl\": \"https://github.com/lucide-icons/lucide/blob/main/LICENSE\"\n  },\n  {\n    \"id\": \"gi\",\n    \"name\": \"Game Icons\",\n    \"projectUrl\": \"https://game-icons.net/\",\n    \"license\": \"CC BY 3.0\",\n    \"licenseUrl\": \"https://creativecommons.org/licenses/by/3.0/\"\n  },\n  {\n    \"id\": \"wi\",\n    \"name\": \"Weather Icons\",\n    \"projectUrl\": \"https://erikflowers.github.io/weather-icons/\",\n    \"license\": \"SIL OFL 1.1\",\n    \"licenseUrl\": \"http://scripts.sil.org/OFL\"\n  },\n  {\n    \"id\": \"di\",\n    \"name\": \"Devicons\",\n    \"projectUrl\": \"https://vorillaz.github.io/devicons/\",\n    \"license\": \"MIT\",\n    \"licenseUrl\": \"https://opensource.org/licenses/MIT\"\n  },\n  {\n    \"id\": \"ai\",\n    \"name\": \"Ant Design Icons\",\n    \"projectUrl\": \"https://github.com/ant-design/ant-design-icons\",\n    \"license\": \"MIT\",\n    \"licenseUrl\": \"https://opensource.org/licenses/MIT\"\n  },\n  {\n    \"id\": \"bs\",\n    \"name\": \"Bootstrap Icons\",\n    \"projectUrl\": \"https://github.com/twbs/icons\",\n    \"license\": \"MIT\",\n    \"licenseUrl\": \"https://opensource.org/licenses/MIT\"\n  },\n  {\n    \"id\": \"ri\",\n    \"name\": \"Remix Icon\",\n    \"projectUrl\": \"https://github.com/Remix-Design/RemixIcon\",\n    \"license\": \"Apache License Version 2.0\",\n    \"licenseUrl\": \"http://www.apache.org/licenses/\"\n  },\n  {\n    \"id\": \"fc\",\n    \"name\": \"Flat Color Icons\",\n    \"projectUrl\": \"https://github.com/icons8/flat-color-icons\",\n    \"license\": \"MIT\",\n    \"licenseUrl\": \"https://opensource.org/licenses/MIT\"\n  },\n  {\n    \"id\": \"gr\",\n    \"name\": \"Grommet-Icons\",\n    \"projectUrl\": \"https://github.com/grommet/grommet-icons\",\n    \"license\": \"Apache License Version 2.0\",\n    \"licenseUrl\": \"http://www.apache.org/licenses/\"\n  },\n  {\n    \"id\": \"hi\",\n    \"name\": \"Heroicons\",\n    \"projectUrl\": \"https://github.com/tailwindlabs/heroicons\",\n    \"license\": \"MIT\",\n    \"licenseUrl\": \"https://opensource.org/licenses/MIT\"\n  },\n  {\n    \"id\": \"hi2\",\n    \"name\": \"Heroicons 2\",\n    \"projectUrl\": \"https://github.com/tailwindlabs/heroicons\",\n    \"license\": \"MIT\",\n    \"licenseUrl\": \"https://opensource.org/licenses/MIT\"\n  },\n  {\n    \"id\": \"si\",\n    \"name\": \"Simple Icons\",\n    \"projectUrl\": \"https://simpleicons.org/\",\n    \"license\": \"CC0 1.0 Universal\",\n    \"licenseUrl\": \"https://creativecommons.org/publicdomain/zero/1.0/\"\n  },\n  {\n    \"id\": \"sl\",\n    \"name\": \"Simple Line Icons\",\n    \"projectUrl\": \"https://thesabbir.github.io/simple-line-icons/\",\n    \"license\": \"MIT\",\n    \"licenseUrl\": \"https://opensource.org/licenses/MIT\"\n  },\n  {\n    \"id\": \"im\",\n    \"name\": \"IcoMoon Free\",\n    \"projectUrl\": \"https://github.com/Keyamoon/IcoMoon-Free\",\n    \"license\": \"CC BY 4.0 License\",\n    \"licenseUrl\": \"https://github.com/Keyamoon/IcoMoon-Free/blob/master/License.txt\"\n  },\n  {\n    \"id\": \"bi\",\n    \"name\": \"BoxIcons\",\n    \"projectUrl\": \"https://github.com/atisawd/boxicons\",\n    \"license\": \"MIT\",\n    \"licenseUrl\": \"https://github.com/atisawd/boxicons/blob/master/LICENSE\"\n  },\n  {\n    \"id\": \"cg\",\n    \"name\": \"css.gg\",\n    \"projectUrl\": \"https://github.com/astrit/css.gg\",\n    \"license\": \"MIT\",\n    \"licenseUrl\": \"https://opensource.org/licenses/MIT\"\n  },\n  {\n    \"id\": \"vsc\",\n    \"name\": \"VS Code Icons\",\n    \"projectUrl\": \"https://github.com/microsoft/vscode-codicons\",\n    \"license\": \"CC BY 4.0\",\n    \"licenseUrl\": \"https://creativecommons.org/licenses/by/4.0/\"\n  },\n  {\n    \"id\": \"tb\",\n    \"name\": \"Tabler Icons\",\n    \"projectUrl\": \"https://github.com/tabler/tabler-icons\",\n    \"license\": \"MIT\",\n    \"licenseUrl\": \"https://opensource.org/licenses/MIT\"\n  },\n  {\n    \"id\": \"tfi\",\n    \"name\": \"Themify Icons\",\n    \"projectUrl\": \"https://github.com/lykmapipo/themify-icons\",\n    \"license\": \"MIT\",\n    \"licenseUrl\": \"https://github.com/thecreation/standard-icons/blob/master/modules/themify-icons/LICENSE\"\n  },\n  {\n    \"id\": \"rx\",\n    \"name\": \"Radix Icons\",\n    \"projectUrl\": \"https://icons.radix-ui.com\",\n    \"license\": \"MIT\",\n    \"licenseUrl\": \"https://github.com/radix-ui/icons/blob/master/LICENSE\"\n  },\n  {\n    \"id\": \"pi\",\n    \"name\": \"Phosphor Icons\",\n    \"projectUrl\": \"https://github.com/phosphor-icons/core\",\n    \"license\": \"MIT\",\n    \"licenseUrl\": \"https://github.com/phosphor-icons/core/blob/main/LICENSE\"\n  },\n  {\n    \"id\": \"lia\",\n    \"name\": \"Icons8 Line Awesome\",\n    \"projectUrl\": \"https://icons8.com/line-awesome\",\n    \"license\": \"MIT\",\n    \"licenseUrl\": \"https://github.com/icons8/line-awesome/blob/master/LICENSE.md\"\n  }\n]","import React from \"react\";\nexport var DefaultContext = {\n  color: undefined,\n  size: undefined,\n  className: undefined,\n  style: undefined,\n  attr: undefined\n};\nexport var IconContext = React.createContext && /*#__PURE__*/React.createContext(DefaultContext);","var _excluded = [\"attr\", \"size\", \"title\"];\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } } return target; }\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport React from \"react\";\nimport { IconContext, DefaultContext } from \"./iconContext.mjs\";\nfunction Tree2Element(tree) {\n  return tree && tree.map((node, i) => /*#__PURE__*/React.createElement(node.tag, _objectSpread({\n    key: i\n  }, node.attr), Tree2Element(node.child)));\n}\nexport function GenIcon(data) {\n  return props => /*#__PURE__*/React.createElement(IconBase, _extends({\n    attr: _objectSpread({}, data.attr)\n  }, props), Tree2Element(data.child));\n}\nexport function IconBase(props) {\n  var elem = conf => {\n    var {\n        attr,\n        size,\n        title\n      } = props,\n      svgProps = _objectWithoutProperties(props, _excluded);\n    var computedSize = size || conf.size || \"1em\";\n    var className;\n    if (conf.className) className = conf.className;\n    if (props.className) className = (className ? className + \" \" : \"\") + props.className;\n    return /*#__PURE__*/React.createElement(\"svg\", _extends({\n      stroke: \"currentColor\",\n      fill: \"currentColor\",\n      strokeWidth: \"0\"\n    }, conf.attr, attr, svgProps, {\n      className: className,\n      style: _objectSpread(_objectSpread({\n        color: props.color || conf.color\n      }, conf.style), props.style),\n      height: computedSize,\n      width: computedSize,\n      xmlns: \"http://www.w3.org/2000/svg\"\n    }), title && /*#__PURE__*/React.createElement(\"title\", null, title), props.children);\n  };\n  return IconContext !== undefined ? /*#__PURE__*/React.createElement(IconContext.Consumer, null, conf => elem(conf)) : elem(DefaultContext);\n}","export * from \"./iconsManifest.mjs\";\nexport * from \"./iconBase.mjs\";\nexport * from \"./iconContext.mjs\";","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Parents} Parents\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is an element.\n * @param {unknown} this\n *   Context object (`this`) to call `test` with\n * @param {unknown} [element]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   Position of `element` in its parent.\n * @param {Parents | null | undefined} [parent]\n *   Parent of `element`.\n * @returns {boolean}\n *   Whether this is an element and passes a test.\n *\n * @typedef {Array<TestFunction | string> | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary element.\n *\n *   * when `string`, checks that the element has that tag name\n *   * when `function`, see `TestFunction`\n *   * when `Array`, checks if one of the subtests pass\n *\n * @callback TestFunction\n *   Check if an element passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Element} element\n *   An element.\n * @param {number | undefined} [index]\n *   Position of `element` in its parent.\n * @param {Parents | undefined} [parent]\n *   Parent of `element`.\n * @returns {boolean | undefined | void}\n *   Whether this element passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `element` is an `Element` and whether it passes the given test.\n *\n * @param element\n *   Thing to check, typically `element`.\n * @param test\n *   Check for a specific element.\n * @param index\n *   Position of `element` in its parent.\n * @param parent\n *   Parent of `element`.\n * @param context\n *   Context object (`this`) to call `test` with.\n * @returns\n *   Whether `element` is an `Element` and passes a test.\n * @throws\n *   When an incorrect `test`, `index`, or `parent` is given; there is no error\n *   thrown when `element` is not a node or not an element.\n */\nexport const isElement =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends TestFunction>(element: unknown, test: Condition, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element & Predicate<Condition, Element>) &\n   *   (<Condition extends string>(element: unknown, test: Condition, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element & {tagName: Condition}) &\n   *   ((element?: null | undefined) => false) &\n   *   ((element: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element) &\n   *   ((element: unknown, test?: Test, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [element]\n     * @param {Test | undefined} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parents | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (element, test, index, parent, context) {\n      const check = convertElement(test)\n\n      if (\n        index !== null &&\n        index !== undefined &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite `index`')\n      }\n\n      if (\n        parent !== null &&\n        parent !== undefined &&\n        (!parent.type || !parent.children)\n      ) {\n        throw new Error('Expected valid `parent`')\n      }\n\n      if (\n        (index === null || index === undefined) !==\n        (parent === null || parent === undefined)\n      ) {\n        throw new Error('Expected both `index` and `parent`')\n      }\n\n      return looksLikeAnElement(element)\n        ? check.call(context, element, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate a check from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * an `element`, `index`, and `parent`.\n *\n * @param test\n *   A test for a specific element.\n * @returns\n *   A check.\n */\nexport const convertElement =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends TestFunction>(test: Condition) => (element: unknown, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element & Predicate<Condition, Element>) &\n   *   (<Condition extends string>(test: Condition) => (element: unknown, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element & {tagName: Condition}) &\n   *   ((test?: null | undefined) => (element?: unknown, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test | null | undefined} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return element\n      }\n\n      if (typeof test === 'string') {\n        return tagNameFactory(test)\n      }\n\n      // Assume array.\n      if (typeof test === 'object') {\n        return anyFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or array as `test`')\n    }\n  )\n\n/**\n * Handle multiple tests.\n *\n * @param {Array<TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convertElement(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn a string into a test for an element with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction tagNameFactory(check) {\n  return castFactory(tagName)\n\n  /**\n   * @param {Element} element\n   * @returns {boolean}\n   */\n  function tagName(element) {\n    return element.tagName === check\n  }\n}\n\n/**\n * Turn a custom test into a test for an element that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeAnElement(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\n/**\n * Make sure something is an element.\n *\n * @param {unknown} element\n * @returns {element is Element}\n */\nfunction element(element) {\n  return Boolean(\n    element &&\n      typeof element === 'object' &&\n      'type' in element &&\n      element.type === 'element' &&\n      'tagName' in element &&\n      typeof element.tagName === 'string'\n  )\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Element}\n */\nfunction looksLikeAnElement(value) {\n  return (\n    value !== null &&\n    typeof value === 'object' &&\n    'type' in value &&\n    'tagName' in value\n  )\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Root} Root\n *\n * @typedef {import('hast-util-is-element').Test} Test\n */\n\n/**\n * @typedef {'after' | 'append' | 'before' | 'prepend' | 'wrap'} Behavior\n *   Behavior.\n *\n * @callback Build\n *   Generate content.\n * @param {Readonly<Element>} element\n *   Current heading.\n * @returns {Array<ElementContent> | ElementContent}\n *   Content.\n *\n * @callback BuildProperties\n *   Generate properties.\n * @param {Readonly<Element>} element\n *   Current heading.\n * @returns {Properties}\n *   Properties.\n *\n * @typedef Options\n *   Configuration.\n * @property {Behavior | null | undefined} [behavior='prepend']\n *   How to create links (default: `'prepend'`).\n * @property {Readonly<ElementContent> | ReadonlyArray<ElementContent> | Build | null | undefined} [content]\n *   Content to insert in the link (default: if `'wrap'` then `undefined`,\n *   otherwise `<span class=\"icon icon-link\"></span>`);\n *   if `behavior` is `'wrap'` and `Build` is passed, its result replaces the\n *   existing content, otherwise the content is added after existing content.\n * @property {Readonly<ElementContent> | ReadonlyArray<ElementContent> | Build | null | undefined} [group]\n *   Content to wrap the heading and link with, if `behavior` is `'after'` or\n *   `'before'` (optional).\n * @property {Readonly<Properties> | BuildProperties | null | undefined} [headingProperties]\n *   Extra properties to set on the heading (optional).\n * @property {Readonly<Properties> | BuildProperties | null | undefined} [properties]\n *   Extra properties to set on the link when injecting (default:\n *   `{ariaHidden: true, tabIndex: -1}` if `'append'` or `'prepend'`, otherwise\n *   `undefined`).\n * @property {Test | null | undefined} [test]\n *   Extra test for which headings are linked (optional).\n */\n\n/**\n * @template T\n *   Kind.\n * @typedef {(\n *   T extends Record<any, any>\n *     ? {-readonly [k in keyof T]: Cloneable<T[k]>}\n *     : T\n * )} Cloneable\n *   Deep clone.\n *\n *   See: <https://github.com/microsoft/TypeScript-DOM-lib-generator/issues/1237#issuecomment-1345515448>\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {headingRank} from 'hast-util-heading-rank'\nimport {convertElement} from 'hast-util-is-element'\nimport {SKIP, visit} from 'unist-util-visit'\n\n/** @type {Element} */\nconst contentDefaults = {\n  type: 'element',\n  tagName: 'span',\n  properties: {className: ['icon', 'icon-link']},\n  children: []\n}\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Add links from headings back to themselves.\n *\n * ###### Notes\n *\n * This plugin only applies to headings with `id`s.\n * Use `rehype-slug` to generate `id`s for headings that don’t have them.\n *\n * Several behaviors are supported:\n *\n * *   `'prepend'` (default) — inject link before the heading text\n * *   `'append'` — inject link after the heading text\n * *   `'wrap'` — wrap the whole heading text with the link\n * *   `'before'` — insert link before the heading\n * *   `'after'` — insert link after the heading\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns\n *   Transform.\n */\nexport default function rehypeAutolinkHeadings(options) {\n  const settings = options || emptyOptions\n  let properties = settings.properties\n  const headingOroperties = settings.headingProperties\n  const behavior = settings.behavior || 'prepend'\n  const content = settings.content\n  const group = settings.group\n  const is = convertElement(settings.test)\n\n  /** @type {import('unist-util-visit').Visitor<Element>} */\n  let method\n\n  if (behavior === 'after' || behavior === 'before') {\n    method = around\n  } else if (behavior === 'wrap') {\n    method = wrap\n  } else {\n    method = inject\n\n    if (!properties) {\n      properties = {ariaHidden: 'true', tabIndex: -1}\n    }\n  }\n\n  /**\n   * Transform.\n   *\n   * @param {Root} tree\n   *   Tree.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  return function (tree) {\n    visit(tree, 'element', function (node, index, parent) {\n      if (headingRank(node) && node.properties.id && is(node, index, parent)) {\n        Object.assign(node.properties, toProperties(headingOroperties, node))\n        return method(node, index, parent)\n      }\n    })\n  }\n\n  /** @type {import('unist-util-visit').Visitor<Element>} */\n  function inject(node) {\n    const children = toChildren(content || contentDefaults, node)\n    node.children[behavior === 'prepend' ? 'unshift' : 'push'](\n      create(node, toProperties(properties, node), children)\n    )\n\n    return [SKIP]\n  }\n\n  /** @type {import('unist-util-visit').Visitor<Element>} */\n  function around(node, index, parent) {\n    /* c8 ignore next -- uncommon */\n    if (typeof index !== 'number' || !parent) return\n\n    const children = toChildren(content || contentDefaults, node)\n    const link = create(node, toProperties(properties, node), children)\n    let nodes = behavior === 'before' ? [link, node] : [node, link]\n\n    if (group) {\n      const grouping = toNode(group, node)\n\n      if (grouping && !Array.isArray(grouping) && grouping.type === 'element') {\n        grouping.children = nodes\n        nodes = [grouping]\n      }\n    }\n\n    parent.children.splice(index, 1, ...nodes)\n\n    return [SKIP, index + nodes.length]\n  }\n\n  /** @type {import('unist-util-visit').Visitor<Element>} */\n  function wrap(node) {\n    /** @type {Array<ElementContent>} */\n    let before = node.children\n    /** @type {Array<ElementContent> | ElementContent} */\n    let after = []\n\n    if (typeof content === 'function') {\n      before = []\n      after = content(node)\n    } else if (content) {\n      after = clone(content)\n    }\n\n    node.children = [\n      create(\n        node,\n        toProperties(properties, node),\n        Array.isArray(after) ? [...before, ...after] : [...before, after]\n      )\n    ]\n\n    return [SKIP]\n  }\n}\n\n/**\n * Deep clone.\n *\n * @template T\n *   Kind.\n * @param {T} thing\n *   Thing to clone.\n * @returns {Cloneable<T>}\n *   Cloned thing.\n */\nfunction clone(thing) {\n  // Cast because it’s mutable now.\n  return /** @type {Cloneable<T>} */ (structuredClone(thing))\n}\n\n/**\n * Create an `a`.\n *\n * @param {Readonly<Element>} node\n *   Related heading.\n * @param {Properties | undefined} properties\n *   Properties to set on the link.\n * @param {Array<ElementContent>} children\n *   Content.\n * @returns {Element}\n *   Link.\n */\nfunction create(node, properties, children) {\n  return {\n    type: 'element',\n    tagName: 'a',\n    properties: {...properties, href: '#' + node.properties.id},\n    children\n  }\n}\n\n/**\n * Turn into children.\n *\n * @param {Readonly<ElementContent> | ReadonlyArray<ElementContent> | Build} value\n *   Content.\n * @param {Readonly<Element>} node\n *   Related heading.\n * @returns {Array<ElementContent>}\n *   Children.\n */\nfunction toChildren(value, node) {\n  const result = toNode(value, node)\n  return Array.isArray(result) ? result : [result]\n}\n\n/**\n * Turn into a node.\n *\n * @param {Readonly<ElementContent> | ReadonlyArray<ElementContent> | Build} value\n *   Content.\n * @param {Readonly<Element>} node\n *   Related heading.\n * @returns {Array<ElementContent> | ElementContent}\n *   Node.\n */\nfunction toNode(value, node) {\n  if (typeof value === 'function') return value(node)\n  return clone(value)\n}\n\n/**\n * Turn into properties.\n *\n * @param {Readonly<Properties> | BuildProperties | null | undefined} value\n *   Properties.\n * @param {Readonly<Element>} node\n *   Related heading.\n * @returns {Properties}\n *   Properties.\n */\nfunction toProperties(value, node) {\n  if (typeof value === 'function') return value(node)\n  return value ? clone(value) : {}\n}\n","// This module is generated by `script/`.\n/* eslint-disable no-control-regex, no-misleading-character-class, no-useless-escape */\nexport const regex = /[\\0-\\x1F!-,\\.\\/:-@\\[-\\^`\\{-\\xA9\\xAB-\\xB4\\xB6-\\xB9\\xBB-\\xBF\\xD7\\xF7\\u02C2-\\u02C5\\u02D2-\\u02DF\\u02E5-\\u02EB\\u02ED\\u02EF-\\u02FF\\u0375\\u0378\\u0379\\u037E\\u0380-\\u0385\\u0387\\u038B\\u038D\\u03A2\\u03F6\\u0482\\u0530\\u0557\\u0558\\u055A-\\u055F\\u0589-\\u0590\\u05BE\\u05C0\\u05C3\\u05C6\\u05C8-\\u05CF\\u05EB-\\u05EE\\u05F3-\\u060F\\u061B-\\u061F\\u066A-\\u066D\\u06D4\\u06DD\\u06DE\\u06E9\\u06FD\\u06FE\\u0700-\\u070F\\u074B\\u074C\\u07B2-\\u07BF\\u07F6-\\u07F9\\u07FB\\u07FC\\u07FE\\u07FF\\u082E-\\u083F\\u085C-\\u085F\\u086B-\\u089F\\u08B5\\u08C8-\\u08D2\\u08E2\\u0964\\u0965\\u0970\\u0984\\u098D\\u098E\\u0991\\u0992\\u09A9\\u09B1\\u09B3-\\u09B5\\u09BA\\u09BB\\u09C5\\u09C6\\u09C9\\u09CA\\u09CF-\\u09D6\\u09D8-\\u09DB\\u09DE\\u09E4\\u09E5\\u09F2-\\u09FB\\u09FD\\u09FF\\u0A00\\u0A04\\u0A0B-\\u0A0E\\u0A11\\u0A12\\u0A29\\u0A31\\u0A34\\u0A37\\u0A3A\\u0A3B\\u0A3D\\u0A43-\\u0A46\\u0A49\\u0A4A\\u0A4E-\\u0A50\\u0A52-\\u0A58\\u0A5D\\u0A5F-\\u0A65\\u0A76-\\u0A80\\u0A84\\u0A8E\\u0A92\\u0AA9\\u0AB1\\u0AB4\\u0ABA\\u0ABB\\u0AC6\\u0ACA\\u0ACE\\u0ACF\\u0AD1-\\u0ADF\\u0AE4\\u0AE5\\u0AF0-\\u0AF8\\u0B00\\u0B04\\u0B0D\\u0B0E\\u0B11\\u0B12\\u0B29\\u0B31\\u0B34\\u0B3A\\u0B3B\\u0B45\\u0B46\\u0B49\\u0B4A\\u0B4E-\\u0B54\\u0B58-\\u0B5B\\u0B5E\\u0B64\\u0B65\\u0B70\\u0B72-\\u0B81\\u0B84\\u0B8B-\\u0B8D\\u0B91\\u0B96-\\u0B98\\u0B9B\\u0B9D\\u0BA0-\\u0BA2\\u0BA5-\\u0BA7\\u0BAB-\\u0BAD\\u0BBA-\\u0BBD\\u0BC3-\\u0BC5\\u0BC9\\u0BCE\\u0BCF\\u0BD1-\\u0BD6\\u0BD8-\\u0BE5\\u0BF0-\\u0BFF\\u0C0D\\u0C11\\u0C29\\u0C3A-\\u0C3C\\u0C45\\u0C49\\u0C4E-\\u0C54\\u0C57\\u0C5B-\\u0C5F\\u0C64\\u0C65\\u0C70-\\u0C7F\\u0C84\\u0C8D\\u0C91\\u0CA9\\u0CB4\\u0CBA\\u0CBB\\u0CC5\\u0CC9\\u0CCE-\\u0CD4\\u0CD7-\\u0CDD\\u0CDF\\u0CE4\\u0CE5\\u0CF0\\u0CF3-\\u0CFF\\u0D0D\\u0D11\\u0D45\\u0D49\\u0D4F-\\u0D53\\u0D58-\\u0D5E\\u0D64\\u0D65\\u0D70-\\u0D79\\u0D80\\u0D84\\u0D97-\\u0D99\\u0DB2\\u0DBC\\u0DBE\\u0DBF\\u0DC7-\\u0DC9\\u0DCB-\\u0DCE\\u0DD5\\u0DD7\\u0DE0-\\u0DE5\\u0DF0\\u0DF1\\u0DF4-\\u0E00\\u0E3B-\\u0E3F\\u0E4F\\u0E5A-\\u0E80\\u0E83\\u0E85\\u0E8B\\u0EA4\\u0EA6\\u0EBE\\u0EBF\\u0EC5\\u0EC7\\u0ECE\\u0ECF\\u0EDA\\u0EDB\\u0EE0-\\u0EFF\\u0F01-\\u0F17\\u0F1A-\\u0F1F\\u0F2A-\\u0F34\\u0F36\\u0F38\\u0F3A-\\u0F3D\\u0F48\\u0F6D-\\u0F70\\u0F85\\u0F98\\u0FBD-\\u0FC5\\u0FC7-\\u0FFF\\u104A-\\u104F\\u109E\\u109F\\u10C6\\u10C8-\\u10CC\\u10CE\\u10CF\\u10FB\\u1249\\u124E\\u124F\\u1257\\u1259\\u125E\\u125F\\u1289\\u128E\\u128F\\u12B1\\u12B6\\u12B7\\u12BF\\u12C1\\u12C6\\u12C7\\u12D7\\u1311\\u1316\\u1317\\u135B\\u135C\\u1360-\\u137F\\u1390-\\u139F\\u13F6\\u13F7\\u13FE-\\u1400\\u166D\\u166E\\u1680\\u169B-\\u169F\\u16EB-\\u16ED\\u16F9-\\u16FF\\u170D\\u1715-\\u171F\\u1735-\\u173F\\u1754-\\u175F\\u176D\\u1771\\u1774-\\u177F\\u17D4-\\u17D6\\u17D8-\\u17DB\\u17DE\\u17DF\\u17EA-\\u180A\\u180E\\u180F\\u181A-\\u181F\\u1879-\\u187F\\u18AB-\\u18AF\\u18F6-\\u18FF\\u191F\\u192C-\\u192F\\u193C-\\u1945\\u196E\\u196F\\u1975-\\u197F\\u19AC-\\u19AF\\u19CA-\\u19CF\\u19DA-\\u19FF\\u1A1C-\\u1A1F\\u1A5F\\u1A7D\\u1A7E\\u1A8A-\\u1A8F\\u1A9A-\\u1AA6\\u1AA8-\\u1AAF\\u1AC1-\\u1AFF\\u1B4C-\\u1B4F\\u1B5A-\\u1B6A\\u1B74-\\u1B7F\\u1BF4-\\u1BFF\\u1C38-\\u1C3F\\u1C4A-\\u1C4C\\u1C7E\\u1C7F\\u1C89-\\u1C8F\\u1CBB\\u1CBC\\u1CC0-\\u1CCF\\u1CD3\\u1CFB-\\u1CFF\\u1DFA\\u1F16\\u1F17\\u1F1E\\u1F1F\\u1F46\\u1F47\\u1F4E\\u1F4F\\u1F58\\u1F5A\\u1F5C\\u1F5E\\u1F7E\\u1F7F\\u1FB5\\u1FBD\\u1FBF-\\u1FC1\\u1FC5\\u1FCD-\\u1FCF\\u1FD4\\u1FD5\\u1FDC-\\u1FDF\\u1FED-\\u1FF1\\u1FF5\\u1FFD-\\u203E\\u2041-\\u2053\\u2055-\\u2070\\u2072-\\u207E\\u2080-\\u208F\\u209D-\\u20CF\\u20F1-\\u2101\\u2103-\\u2106\\u2108\\u2109\\u2114\\u2116-\\u2118\\u211E-\\u2123\\u2125\\u2127\\u2129\\u212E\\u213A\\u213B\\u2140-\\u2144\\u214A-\\u214D\\u214F-\\u215F\\u2189-\\u24B5\\u24EA-\\u2BFF\\u2C2F\\u2C5F\\u2CE5-\\u2CEA\\u2CF4-\\u2CFF\\u2D26\\u2D28-\\u2D2C\\u2D2E\\u2D2F\\u2D68-\\u2D6E\\u2D70-\\u2D7E\\u2D97-\\u2D9F\\u2DA7\\u2DAF\\u2DB7\\u2DBF\\u2DC7\\u2DCF\\u2DD7\\u2DDF\\u2E00-\\u2E2E\\u2E30-\\u3004\\u3008-\\u3020\\u3030\\u3036\\u3037\\u303D-\\u3040\\u3097\\u3098\\u309B\\u309C\\u30A0\\u30FB\\u3100-\\u3104\\u3130\\u318F-\\u319F\\u31C0-\\u31EF\\u3200-\\u33FF\\u4DC0-\\u4DFF\\u9FFD-\\u9FFF\\uA48D-\\uA4CF\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA62C-\\uA63F\\uA673\\uA67E\\uA6F2-\\uA716\\uA720\\uA721\\uA789\\uA78A\\uA7C0\\uA7C1\\uA7CB-\\uA7F4\\uA828-\\uA82B\\uA82D-\\uA83F\\uA874-\\uA87F\\uA8C6-\\uA8CF\\uA8DA-\\uA8DF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA954-\\uA95F\\uA97D-\\uA97F\\uA9C1-\\uA9CE\\uA9DA-\\uA9DF\\uA9FF\\uAA37-\\uAA3F\\uAA4E\\uAA4F\\uAA5A-\\uAA5F\\uAA77-\\uAA79\\uAAC3-\\uAADA\\uAADE\\uAADF\\uAAF0\\uAAF1\\uAAF7-\\uAB00\\uAB07\\uAB08\\uAB0F\\uAB10\\uAB17-\\uAB1F\\uAB27\\uAB2F\\uAB5B\\uAB6A-\\uAB6F\\uABEB\\uABEE\\uABEF\\uABFA-\\uABFF\\uD7A4-\\uD7AF\\uD7C7-\\uD7CA\\uD7FC-\\uD7FF\\uE000-\\uF8FF\\uFA6E\\uFA6F\\uFADA-\\uFAFF\\uFB07-\\uFB12\\uFB18-\\uFB1C\\uFB29\\uFB37\\uFB3D\\uFB3F\\uFB42\\uFB45\\uFBB2-\\uFBD2\\uFD3E-\\uFD4F\\uFD90\\uFD91\\uFDC8-\\uFDEF\\uFDFC-\\uFDFF\\uFE10-\\uFE1F\\uFE30-\\uFE32\\uFE35-\\uFE4C\\uFE50-\\uFE6F\\uFE75\\uFEFD-\\uFF0F\\uFF1A-\\uFF20\\uFF3B-\\uFF3E\\uFF40\\uFF5B-\\uFF65\\uFFBF-\\uFFC1\\uFFC8\\uFFC9\\uFFD0\\uFFD1\\uFFD8\\uFFD9\\uFFDD-\\uFFFF]|\\uD800[\\uDC0C\\uDC27\\uDC3B\\uDC3E\\uDC4E\\uDC4F\\uDC5E-\\uDC7F\\uDCFB-\\uDD3F\\uDD75-\\uDDFC\\uDDFE-\\uDE7F\\uDE9D-\\uDE9F\\uDED1-\\uDEDF\\uDEE1-\\uDEFF\\uDF20-\\uDF2C\\uDF4B-\\uDF4F\\uDF7B-\\uDF7F\\uDF9E\\uDF9F\\uDFC4-\\uDFC7\\uDFD0\\uDFD6-\\uDFFF]|\\uD801[\\uDC9E\\uDC9F\\uDCAA-\\uDCAF\\uDCD4-\\uDCD7\\uDCFC-\\uDCFF\\uDD28-\\uDD2F\\uDD64-\\uDDFF\\uDF37-\\uDF3F\\uDF56-\\uDF5F\\uDF68-\\uDFFF]|\\uD802[\\uDC06\\uDC07\\uDC09\\uDC36\\uDC39-\\uDC3B\\uDC3D\\uDC3E\\uDC56-\\uDC5F\\uDC77-\\uDC7F\\uDC9F-\\uDCDF\\uDCF3\\uDCF6-\\uDCFF\\uDD16-\\uDD1F\\uDD3A-\\uDD7F\\uDDB8-\\uDDBD\\uDDC0-\\uDDFF\\uDE04\\uDE07-\\uDE0B\\uDE14\\uDE18\\uDE36\\uDE37\\uDE3B-\\uDE3E\\uDE40-\\uDE5F\\uDE7D-\\uDE7F\\uDE9D-\\uDEBF\\uDEC8\\uDEE7-\\uDEFF\\uDF36-\\uDF3F\\uDF56-\\uDF5F\\uDF73-\\uDF7F\\uDF92-\\uDFFF]|\\uD803[\\uDC49-\\uDC7F\\uDCB3-\\uDCBF\\uDCF3-\\uDCFF\\uDD28-\\uDD2F\\uDD3A-\\uDE7F\\uDEAA\\uDEAD-\\uDEAF\\uDEB2-\\uDEFF\\uDF1D-\\uDF26\\uDF28-\\uDF2F\\uDF51-\\uDFAF\\uDFC5-\\uDFDF\\uDFF7-\\uDFFF]|\\uD804[\\uDC47-\\uDC65\\uDC70-\\uDC7E\\uDCBB-\\uDCCF\\uDCE9-\\uDCEF\\uDCFA-\\uDCFF\\uDD35\\uDD40-\\uDD43\\uDD48-\\uDD4F\\uDD74\\uDD75\\uDD77-\\uDD7F\\uDDC5-\\uDDC8\\uDDCD\\uDDDB\\uDDDD-\\uDDFF\\uDE12\\uDE38-\\uDE3D\\uDE3F-\\uDE7F\\uDE87\\uDE89\\uDE8E\\uDE9E\\uDEA9-\\uDEAF\\uDEEB-\\uDEEF\\uDEFA-\\uDEFF\\uDF04\\uDF0D\\uDF0E\\uDF11\\uDF12\\uDF29\\uDF31\\uDF34\\uDF3A\\uDF45\\uDF46\\uDF49\\uDF4A\\uDF4E\\uDF4F\\uDF51-\\uDF56\\uDF58-\\uDF5C\\uDF64\\uDF65\\uDF6D-\\uDF6F\\uDF75-\\uDFFF]|\\uD805[\\uDC4B-\\uDC4F\\uDC5A-\\uDC5D\\uDC62-\\uDC7F\\uDCC6\\uDCC8-\\uDCCF\\uDCDA-\\uDD7F\\uDDB6\\uDDB7\\uDDC1-\\uDDD7\\uDDDE-\\uDDFF\\uDE41-\\uDE43\\uDE45-\\uDE4F\\uDE5A-\\uDE7F\\uDEB9-\\uDEBF\\uDECA-\\uDEFF\\uDF1B\\uDF1C\\uDF2C-\\uDF2F\\uDF3A-\\uDFFF]|\\uD806[\\uDC3B-\\uDC9F\\uDCEA-\\uDCFE\\uDD07\\uDD08\\uDD0A\\uDD0B\\uDD14\\uDD17\\uDD36\\uDD39\\uDD3A\\uDD44-\\uDD4F\\uDD5A-\\uDD9F\\uDDA8\\uDDA9\\uDDD8\\uDDD9\\uDDE2\\uDDE5-\\uDDFF\\uDE3F-\\uDE46\\uDE48-\\uDE4F\\uDE9A-\\uDE9C\\uDE9E-\\uDEBF\\uDEF9-\\uDFFF]|\\uD807[\\uDC09\\uDC37\\uDC41-\\uDC4F\\uDC5A-\\uDC71\\uDC90\\uDC91\\uDCA8\\uDCB7-\\uDCFF\\uDD07\\uDD0A\\uDD37-\\uDD39\\uDD3B\\uDD3E\\uDD48-\\uDD4F\\uDD5A-\\uDD5F\\uDD66\\uDD69\\uDD8F\\uDD92\\uDD99-\\uDD9F\\uDDAA-\\uDEDF\\uDEF7-\\uDFAF\\uDFB1-\\uDFFF]|\\uD808[\\uDF9A-\\uDFFF]|\\uD809[\\uDC6F-\\uDC7F\\uDD44-\\uDFFF]|[\\uD80A\\uD80B\\uD80E-\\uD810\\uD812-\\uD819\\uD824-\\uD82B\\uD82D\\uD82E\\uD830-\\uD833\\uD837\\uD839\\uD83D\\uD83F\\uD87B-\\uD87D\\uD87F\\uD885-\\uDB3F\\uDB41-\\uDBFF][\\uDC00-\\uDFFF]|\\uD80D[\\uDC2F-\\uDFFF]|\\uD811[\\uDE47-\\uDFFF]|\\uD81A[\\uDE39-\\uDE3F\\uDE5F\\uDE6A-\\uDECF\\uDEEE\\uDEEF\\uDEF5-\\uDEFF\\uDF37-\\uDF3F\\uDF44-\\uDF4F\\uDF5A-\\uDF62\\uDF78-\\uDF7C\\uDF90-\\uDFFF]|\\uD81B[\\uDC00-\\uDE3F\\uDE80-\\uDEFF\\uDF4B-\\uDF4E\\uDF88-\\uDF8E\\uDFA0-\\uDFDF\\uDFE2\\uDFE5-\\uDFEF\\uDFF2-\\uDFFF]|\\uD821[\\uDFF8-\\uDFFF]|\\uD823[\\uDCD6-\\uDCFF\\uDD09-\\uDFFF]|\\uD82C[\\uDD1F-\\uDD4F\\uDD53-\\uDD63\\uDD68-\\uDD6F\\uDEFC-\\uDFFF]|\\uD82F[\\uDC6B-\\uDC6F\\uDC7D-\\uDC7F\\uDC89-\\uDC8F\\uDC9A-\\uDC9C\\uDC9F-\\uDFFF]|\\uD834[\\uDC00-\\uDD64\\uDD6A-\\uDD6C\\uDD73-\\uDD7A\\uDD83\\uDD84\\uDD8C-\\uDDA9\\uDDAE-\\uDE41\\uDE45-\\uDFFF]|\\uD835[\\uDC55\\uDC9D\\uDCA0\\uDCA1\\uDCA3\\uDCA4\\uDCA7\\uDCA8\\uDCAD\\uDCBA\\uDCBC\\uDCC4\\uDD06\\uDD0B\\uDD0C\\uDD15\\uDD1D\\uDD3A\\uDD3F\\uDD45\\uDD47-\\uDD49\\uDD51\\uDEA6\\uDEA7\\uDEC1\\uDEDB\\uDEFB\\uDF15\\uDF35\\uDF4F\\uDF6F\\uDF89\\uDFA9\\uDFC3\\uDFCC\\uDFCD]|\\uD836[\\uDC00-\\uDDFF\\uDE37-\\uDE3A\\uDE6D-\\uDE74\\uDE76-\\uDE83\\uDE85-\\uDE9A\\uDEA0\\uDEB0-\\uDFFF]|\\uD838[\\uDC07\\uDC19\\uDC1A\\uDC22\\uDC25\\uDC2B-\\uDCFF\\uDD2D-\\uDD2F\\uDD3E\\uDD3F\\uDD4A-\\uDD4D\\uDD4F-\\uDEBF\\uDEFA-\\uDFFF]|\\uD83A[\\uDCC5-\\uDCCF\\uDCD7-\\uDCFF\\uDD4C-\\uDD4F\\uDD5A-\\uDFFF]|\\uD83B[\\uDC00-\\uDDFF\\uDE04\\uDE20\\uDE23\\uDE25\\uDE26\\uDE28\\uDE33\\uDE38\\uDE3A\\uDE3C-\\uDE41\\uDE43-\\uDE46\\uDE48\\uDE4A\\uDE4C\\uDE50\\uDE53\\uDE55\\uDE56\\uDE58\\uDE5A\\uDE5C\\uDE5E\\uDE60\\uDE63\\uDE65\\uDE66\\uDE6B\\uDE73\\uDE78\\uDE7D\\uDE7F\\uDE8A\\uDE9C-\\uDEA0\\uDEA4\\uDEAA\\uDEBC-\\uDFFF]|\\uD83C[\\uDC00-\\uDD2F\\uDD4A-\\uDD4F\\uDD6A-\\uDD6F\\uDD8A-\\uDFFF]|\\uD83E[\\uDC00-\\uDFEF\\uDFFA-\\uDFFF]|\\uD869[\\uDEDE-\\uDEFF]|\\uD86D[\\uDF35-\\uDF3F]|\\uD86E[\\uDC1E\\uDC1F]|\\uD873[\\uDEA2-\\uDEAF]|\\uD87A[\\uDFE1-\\uDFFF]|\\uD87E[\\uDE1E-\\uDFFF]|\\uD884[\\uDF4B-\\uDFFF]|\\uDB40[\\uDC00-\\uDCFF\\uDDF0-\\uDFFF]/g\n","import { regex } from './regex.js'\n\nconst own = Object.hasOwnProperty\n\n/**\n * Slugger.\n */\nexport default class BananaSlug {\n  /**\n   * Create a new slug class.\n   */\n  constructor () {\n    /** @type {Record<string, number>} */\n    // eslint-disable-next-line no-unused-expressions\n    this.occurrences\n\n    this.reset()\n  }\n\n  /**\n   * Generate a unique slug.\n  *\n  * Tracks previously generated slugs: repeated calls with the same value\n  * will result in different slugs.\n  * Use the `slug` function to get same slugs.\n   *\n   * @param  {string} value\n   *   String of text to slugify\n   * @param  {boolean} [maintainCase=false]\n   *   Keep the current case, otherwise make all lowercase\n   * @return {string}\n   *   A unique slug string\n   */\n  slug (value, maintainCase) {\n    const self = this\n    let result = slug(value, maintainCase === true)\n    const originalSlug = result\n\n    while (own.call(self.occurrences, result)) {\n      self.occurrences[originalSlug]++\n      result = originalSlug + '-' + self.occurrences[originalSlug]\n    }\n\n    self.occurrences[result] = 0\n\n    return result\n  }\n\n  /**\n   * Reset - Forget all previous slugs\n   *\n   * @return void\n   */\n  reset () {\n    this.occurrences = Object.create(null)\n  }\n}\n\n/**\n * Generate a slug.\n *\n * Does not track previously generated slugs: repeated calls with the same value\n * will result in the exact same slug.\n * Use the `GithubSlugger` class to get unique slugs.\n *\n * @param  {string} value\n *   String of text to slugify\n * @param  {boolean} [maintainCase=false]\n *   Keep the current case, otherwise make all lowercase\n * @return {string}\n *   A unique slug string\n */\nexport function slug (value, maintainCase) {\n  if (typeof value !== 'string') return ''\n  if (!maintainCase) value = value.toLowerCase()\n  return value.replace(regex, '').replace(/ /g, '-')\n}\n","/**\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Parents} Parents\n */\n\n/**\n * Get the plain-text value of a hast node.\n *\n * @param {Nodes} node\n *   Node to serialize.\n * @returns {string}\n *   Serialized node.\n */\nexport function toString(node) {\n  // “The concatenation of data of all the Text node descendants of the context\n  // object, in tree order.”\n  if ('children' in node) {\n    return all(node)\n  }\n\n  // “Context object’s data.”\n  return 'value' in node ? node.value : ''\n}\n\n/**\n * @param {Nodes} node\n *   Node.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(node) {\n  if (node.type === 'text') {\n    return node.value\n  }\n\n  return 'children' in node ? all(node) : ''\n}\n\n/**\n * @param {Parents} node\n *   Node.\n * @returns {string}\n *   Serialized node.\n */\nfunction all(node) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n\n  while (++index < node.children.length) {\n    result[index] = one(node.children[index])\n  }\n\n  return result.join('')\n}\n","/**\n * @typedef {import('hast').Root} Root\n */\n\n/**\n * @typedef Options\n *   Configuration (optional).\n * @property {string} [prefix='']\n *   Prefix to add in front of `id`s (default: `''`).\n */\n\nimport GithubSlugger from 'github-slugger'\nimport {headingRank} from 'hast-util-heading-rank'\nimport {toString} from 'hast-util-to-string'\nimport {visit} from 'unist-util-visit'\n\n/** @type {Options} */\nconst emptyOptions = {}\nconst slugs = new GithubSlugger()\n\n/**\n * Add `id`s to headings.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns\n *   Transform.\n */\nexport default function rehypeSlug(options) {\n  const settings = options || emptyOptions\n  const prefix = settings.prefix || ''\n\n  /**\n   * @param {Root} tree\n   *   Tree.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  return function (tree) {\n    slugs.reset()\n\n    visit(tree, 'element', function (node) {\n      if (headingRank(node) && !node.properties.id) {\n        node.properties.id = prefix + slugs.slug(toString(node))\n      }\n    })\n  }\n}\n","export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Text} Text\n * @typedef {import('unist-util-visit-parents').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef RegExpMatchObject\n *   Info on the match.\n * @property {number} index\n *   The index of the search at which the result was found.\n * @property {string} input\n *   A copy of the search string in the text node.\n * @property {[...Array<Parents>, Text]} stack\n *   All ancestors of the text node, where the last node is the text itself.\n *\n * @typedef {RegExp | string} Find\n *   Pattern to find.\n *\n *   Strings are escaped and then turned into global expressions.\n *\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *   Several find and replaces, in array form.\n *\n * @typedef {[Find, Replace?]} FindAndReplaceTuple\n *   Find and replace in tuple form.\n *\n * @typedef {ReplaceFunction | string | null | undefined} Replace\n *   Thing to replace with.\n *\n * @callback ReplaceFunction\n *   Callback called when a search matches.\n * @param {...any} parameters\n *   The parameters are the result of corresponding search expression:\n *\n *   * `value` (`string`) — whole match\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\n *   * `match` (`RegExpMatchObject`) — info on the match\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | null | undefined}\n *   Thing to replace with.\n *\n *   * when `null`, `undefined`, `''`, remove the match\n *   * …or when `false`, do not replace at all\n *   * …or when `string`, replace with a text node of that value\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\n *\n * @typedef {[RegExp, ReplaceFunction]} Pair\n *   Normalized find and replace.\n *\n * @typedef {Array<Pair>} Pairs\n *   All find and replaced.\n *\n * @typedef Options\n *   Configuration.\n * @property {Test | null | undefined} [ignore]\n *   Test for which nodes to ignore (optional).\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\n/**\n * Find patterns in a tree and replace them.\n *\n * The algorithm searches the tree in *preorder* for complete values in `Text`\n * nodes.\n * Partial matches are not supported.\n *\n * @param {Nodes} tree\n *   Tree to change.\n * @param {FindAndReplaceList | FindAndReplaceTuple} list\n *   Patterns to find.\n * @param {Options | null | undefined} [options]\n *   Configuration (when `find` is not `Find`).\n * @returns {undefined}\n *   Nothing.\n */\nexport function findAndReplace(tree, list, options) {\n  const settings = options || {}\n  const ignored = convert(settings.ignore || [])\n  const pairs = toPairs(list)\n  let pairIndex = -1\n\n  while (++pairIndex < pairs.length) {\n    visitParents(tree, 'text', visitor)\n  }\n\n  /** @type {import('unist-util-visit-parents').BuildVisitor<Root, 'text'>} */\n  function visitor(node, parents) {\n    let index = -1\n    /** @type {Parents | undefined} */\n    let grandparent\n\n    while (++index < parents.length) {\n      const parent = parents[index]\n      /** @type {Array<Nodes> | undefined} */\n      const siblings = grandparent ? grandparent.children : undefined\n\n      if (\n        ignored(\n          parent,\n          siblings ? siblings.indexOf(parent) : undefined,\n          grandparent\n        )\n      ) {\n        return\n      }\n\n      grandparent = parent\n    }\n\n    if (grandparent) {\n      return handler(node, parents)\n    }\n  }\n\n  /**\n   * Handle a text node which is not in an ignored parent.\n   *\n   * @param {Text} node\n   *   Text node.\n   * @param {Array<Parents>} parents\n   *   Parents.\n   * @returns {VisitorResult}\n   *   Result.\n   */\n  function handler(node, parents) {\n    const parent = parents[parents.length - 1]\n    const find = pairs[pairIndex][0]\n    const replace = pairs[pairIndex][1]\n    let start = 0\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children\n    const index = siblings.indexOf(node)\n    let change = false\n    /** @type {Array<PhrasingContent>} */\n    let nodes = []\n\n    find.lastIndex = 0\n\n    let match = find.exec(node.value)\n\n    while (match) {\n      const position = match.index\n      /** @type {RegExpMatchObject} */\n      const matchObject = {\n        index: match.index,\n        input: match.input,\n        stack: [...parents, node]\n      }\n      let value = replace(...match, matchObject)\n\n      if (typeof value === 'string') {\n        value = value.length > 0 ? {type: 'text', value} : undefined\n      }\n\n      // It wasn’t a match after all.\n      if (value === false) {\n        // False acts as if there was no match.\n        // So we need to reset `lastIndex`, which currently being at the end of\n        // the current match, to the beginning.\n        find.lastIndex = position + 1\n      } else {\n        if (start !== position) {\n          nodes.push({\n            type: 'text',\n            value: node.value.slice(start, position)\n          })\n        }\n\n        if (Array.isArray(value)) {\n          nodes.push(...value)\n        } else if (value) {\n          nodes.push(value)\n        }\n\n        start = position + match[0].length\n        change = true\n      }\n\n      if (!find.global) {\n        break\n      }\n\n      match = find.exec(node.value)\n    }\n\n    if (change) {\n      if (start < node.value.length) {\n        nodes.push({type: 'text', value: node.value.slice(start)})\n      }\n\n      parent.children.splice(index, 1, ...nodes)\n    } else {\n      nodes = [node]\n    }\n\n    return index + nodes.length\n  }\n}\n\n/**\n * Turn a tuple or a list of tuples into pairs.\n *\n * @param {FindAndReplaceList | FindAndReplaceTuple} tupleOrList\n *   Schema.\n * @returns {Pairs}\n *   Clean pairs.\n */\nfunction toPairs(tupleOrList) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (!Array.isArray(tupleOrList)) {\n    throw new TypeError('Expected find and replace tuple or list of tuples')\n  }\n\n  /** @type {FindAndReplaceList} */\n  // @ts-expect-error: correct.\n  const list =\n    !tupleOrList[0] || Array.isArray(tupleOrList[0])\n      ? tupleOrList\n      : [tupleOrList]\n\n  let index = -1\n\n  while (++index < list.length) {\n    const tuple = list[index]\n    result.push([toExpression(tuple[0]), toFunction(tuple[1])])\n  }\n\n  return result\n}\n\n/**\n * Turn a find into an expression.\n *\n * @param {Find} find\n *   Find.\n * @returns {RegExp}\n *   Expression.\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * Turn a replace into a function.\n *\n * @param {Replace} replace\n *   Replace.\n * @returns {ReplaceFunction}\n *   Function.\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function'\n    ? replace\n    : function () {\n        return replace\n      }\n}\n","/**\n * @import {RegExpMatchObject, ReplaceFunction} from 'mdast-util-find-and-replace'\n * @import {CompileContext, Extension as FromMarkdownExtension, Handle as FromMarkdownHandle, Transform as FromMarkdownTransform} from 'mdast-util-from-markdown'\n * @import {ConstructName, Options as ToMarkdownExtension} from 'mdast-util-to-markdown'\n * @import {Link, PhrasingContent} from 'mdast'\n */\n\nimport {ccount} from 'ccount'\nimport {ok as assert} from 'devlop'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\n\n/** @type {ConstructName} */\nconst inConstruct = 'phrasing'\n/** @type {Array<ConstructName>} */\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralFromMarkdown() {\n  return {\n    transforms: [transformGfmAutolinkLiterals],\n    enter: {\n      literalAutolink: enterLiteralAutolink,\n      literalAutolinkEmail: enterLiteralAutolinkValue,\n      literalAutolinkHttp: enterLiteralAutolinkValue,\n      literalAutolinkWww: enterLiteralAutolinkValue\n    },\n    exit: {\n      literalAutolink: exitLiteralAutolink,\n      literalAutolinkEmail: exitLiteralAutolinkEmail,\n      literalAutolinkHttp: exitLiteralAutolinkHttp,\n      literalAutolinkWww: exitLiteralAutolinkWww\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '@',\n        before: '[+\\\\-.\\\\w]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: '.',\n        before: '[Ww]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: ':',\n        before: '[ps]',\n        after: '\\\\/',\n        inConstruct,\n        notInConstruct\n      }\n    ]\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'link')\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/(?<=^|\\s|\\p{P}|\\p{S})([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/gu, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n * @returns {Array<PhrasingContent> | Link | false}\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {Link} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n * @returns {Link | false}\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[-\\d_]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string | undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n\n  if (!trailExec) {\n    return [url, undefined]\n  }\n\n  url = url.slice(0, trailExec.index)\n\n  let trail = trailExec[0]\n  let closingParenIndex = trail.indexOf(')')\n  const openingParens = ccount(url, '(')\n  let closingParens = ccount(url, ')')\n\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\n    url += trail.slice(0, closingParenIndex + 1)\n    trail = trail.slice(closingParenIndex + 1)\n    closingParenIndex = trail.indexOf(')')\n    closingParens++\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean | null | undefined} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    // If it’s an email, the previous character should not be a slash.\n    (!email || code !== 47)\n  )\n}\n","/**\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Map} Map\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\nimport {ok as assert} from 'devlop'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteDefinition: enterFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteCallString: enterFootnoteCallString\n    },\n    exit: {\n      gfmFootnoteDefinition: exitFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteCallString: exitFootnoteCallString\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown() {\n  return {\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['phrasing', 'label', 'reference']}],\n    handlers: {footnoteDefinition, footnoteReference}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteDefinition')\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteReference')\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteReference')\n  const subexit = state.enter('reference')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteDefinition} node\n */\nfunction footnoteDefinition(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteDefinition')\n  const subexit = state.enter('label')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  value += tracker.move(\n    ']:' + (node.children && node.children.length > 0 ? ' ' : '')\n  )\n  tracker.shift(4)\n  value += tracker.move(\n    state.indentLines(state.containerFlow(node, tracker.current()), map)\n  )\n  exit()\n\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, index, blank) {\n  if (index === 0) {\n    return line\n  }\n\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain strikethrough.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>\n *\n * @type {Array<ConstructName>}\n */\nconst constructsWithoutStrikethrough = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\nhandleDelete.peek = peekDelete\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughFromMarkdown() {\n  return {\n    canContainEols: ['delete'],\n    enter: {strikethrough: enterStrikethrough},\n    exit: {strikethrough: exitStrikethrough}\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '~',\n        inConstruct: 'phrasing',\n        notInConstruct: constructsWithoutStrikethrough\n      }\n    ],\n    handlers: {delete: handleDelete}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterStrikethrough(token) {\n  this.enter({type: 'delete', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitStrikethrough(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\nfunction handleDelete(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  const exit = state.enter('strikethrough')\n  let value = tracker.move('~~')\n  value += state.containerPhrasing(node, {\n    ...tracker.current(),\n    before: value,\n    after: '~'\n  })\n  value += tracker.move('~~')\n  exit()\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction peekDelete() {\n  return '~'\n}\n","/**\n * @typedef Options\n *   Configuration (optional).\n * @property {string|null|ReadonlyArray<string|null|undefined>} [align]\n *   One style for all columns, or styles for their respective columns.\n *   Each style is either `'l'` (left), `'r'` (right), or `'c'` (center).\n *   Other values are treated as `''`, which doesn’t place the colon in the\n *   alignment row but does align left.\n *   *Only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean} [padding=true]\n *   Whether to add a space of padding between delimiters and cells.\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {boolean} [delimiterStart=true]\n *   Whether to begin each row with the delimiter.\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean} [delimiterEnd=true]\n *   Whether to end each row with the delimiter.\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean} [alignDelimiters=true]\n *   Whether to align the delimiters.\n *   By default, they are aligned:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {(value: string) => number} [stringLength]\n *   Function to detect the length of table cell content.\n *   This is used when aligning the delimiters (`|`) between table cells.\n *   Full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source.\n *   To fix this, you can pass this function, which receives the cell content\n *   and returns its “visible” size.\n *   Note that what is and isn’t visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['中文', 'Charlie'],\n *     ['👩‍❤️‍👩', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | 中文 | Charlie |\n *   | 👩‍❤️‍👩 | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['中文', 'Charlie'],\n *       ['👩‍❤️‍👩', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | 中文  | Charlie |\n *   | 👩‍❤️‍👩    | Delta   |\n *   ```\n */\n\n/**\n * @typedef {Options} MarkdownTableOptions\n * @todo\n *   Remove next major.\n */\n\n/**\n * Generate a markdown ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables)) table..\n *\n * @param {ReadonlyArray<ReadonlyArray<string|null|undefined>>} table\n *   Table data (matrix of strings).\n * @param {Options} [options]\n *   Configuration (optional).\n * @returns {string}\n */\nexport function markdownTable(table, options = {}) {\n  const align = (options.align || []).concat()\n  const stringLength = options.stringLength || defaultStringLength\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\n  const alignments = []\n  /** @type {Array<Array<string>>} Cells per row. */\n  const cellMatrix = []\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\n  const sizeMatrix = []\n  /** @type {Array<number>} */\n  const longestCellByColumn = []\n  let mostCellsPerRow = 0\n  let rowIndex = -1\n\n  // This is a superfluous loop if we don’t align delimiters, but otherwise we’d\n  // do superfluous work when aligning, so optimize for aligning.\n  while (++rowIndex < table.length) {\n    /** @type {Array<string>} */\n    const row = []\n    /** @type {Array<number>} */\n    const sizes = []\n    let columnIndex = -1\n\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length\n    }\n\n    while (++columnIndex < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex])\n\n      if (options.alignDelimiters !== false) {\n        const size = stringLength(cell)\n        sizes[columnIndex] = size\n\n        if (\n          longestCellByColumn[columnIndex] === undefined ||\n          size > longestCellByColumn[columnIndex]\n        ) {\n          longestCellByColumn[columnIndex] = size\n        }\n      }\n\n      row.push(cell)\n    }\n\n    cellMatrix[rowIndex] = row\n    sizeMatrix[rowIndex] = sizes\n  }\n\n  // Figure out which alignments to use.\n  let columnIndex = -1\n\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex])\n    }\n  } else {\n    const code = toAlignment(align)\n\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code\n    }\n  }\n\n  // Inject the alignment row.\n  columnIndex = -1\n  /** @type {Array<string>} */\n  const row = []\n  /** @type {Array<number>} */\n  const sizes = []\n\n  while (++columnIndex < mostCellsPerRow) {\n    const code = alignments[columnIndex]\n    let before = ''\n    let after = ''\n\n    if (code === 99 /* `c` */) {\n      before = ':'\n      after = ':'\n    } else if (code === 108 /* `l` */) {\n      before = ':'\n    } else if (code === 114 /* `r` */) {\n      after = ':'\n    }\n\n    // There *must* be at least one hyphen-minus in each alignment cell.\n    let size =\n      options.alignDelimiters === false\n        ? 1\n        : Math.max(\n            1,\n            longestCellByColumn[columnIndex] - before.length - after.length\n          )\n\n    const cell = before + '-'.repeat(size) + after\n\n    if (options.alignDelimiters !== false) {\n      size = before.length + size + after.length\n\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size\n      }\n\n      sizes[columnIndex] = size\n    }\n\n    row[columnIndex] = cell\n  }\n\n  // Inject the alignment row.\n  cellMatrix.splice(1, 0, row)\n  sizeMatrix.splice(1, 0, sizes)\n\n  rowIndex = -1\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (++rowIndex < cellMatrix.length) {\n    const row = cellMatrix[rowIndex]\n    const sizes = sizeMatrix[rowIndex]\n    columnIndex = -1\n    /** @type {Array<string>} */\n    const line = []\n\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row[columnIndex] || ''\n      let before = ''\n      let after = ''\n\n      if (options.alignDelimiters !== false) {\n        const size =\n          longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0)\n        const code = alignments[columnIndex]\n\n        if (code === 114 /* `r` */) {\n          before = ' '.repeat(size)\n        } else if (code === 99 /* `c` */) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5)\n            after = ' '.repeat(size / 2 - 0.5)\n          } else {\n            before = ' '.repeat(size / 2)\n            after = before\n          }\n        } else {\n          after = ' '.repeat(size)\n        }\n      }\n\n      if (options.delimiterStart !== false && !columnIndex) {\n        line.push('|')\n      }\n\n      if (\n        options.padding !== false &&\n        // Don’t add the opening space if we’re not aligning and the cell is\n        // empty: there will be a closing space.\n        !(options.alignDelimiters === false && cell === '') &&\n        (options.delimiterStart !== false || columnIndex)\n      ) {\n        line.push(' ')\n      }\n\n      if (options.alignDelimiters !== false) {\n        line.push(before)\n      }\n\n      line.push(cell)\n\n      if (options.alignDelimiters !== false) {\n        line.push(after)\n      }\n\n      if (options.padding !== false) {\n        line.push(' ')\n      }\n\n      if (\n        options.delimiterEnd !== false ||\n        columnIndex !== mostCellsPerRow - 1\n      ) {\n        line.push('|')\n      }\n    }\n\n    lines.push(\n      options.delimiterEnd === false\n        ? line.join('').replace(/ +$/, '')\n        : line.join('')\n    )\n  }\n\n  return lines.join('\\n')\n}\n\n/**\n * @param {string|null|undefined} [value]\n * @returns {string}\n */\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value)\n}\n\n/**\n * @param {string} value\n * @returns {number}\n */\nfunction defaultStringLength(value) {\n  return value.length\n}\n\n/**\n * @param {string|null|undefined} value\n * @returns {number}\n */\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0\n\n  return code === 67 /* `C` */ || code === 99 /* `c` */\n    ? 99 /* `c` */\n    : code === 76 /* `L` */ || code === 108 /* `l` */\n    ? 108 /* `l` */\n    : code === 82 /* `R` */ || code === 114 /* `r` */\n    ? 114 /* `r` */\n    : 0\n}\n","/**\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Blockquote} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function blockquote(node, _, state, info) {\n  const exit = state.enter('blockquote')\n  const tracker = state.createTracker(info)\n  tracker.move('> ')\n  tracker.shift(2)\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return '>' + (blank ? '' : ' ') + line\n}\n","/**\n * @typedef {import('../types.js').ConstructName} ConstructName\n * @typedef {import('../types.js').Unsafe} Unsafe\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  if (!list || list.length === 0) {\n    return none\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {patternInScope} from '../util/pattern-in-scope.js'\n\n/**\n * @param {Break} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function hardBreak(_, _1, state, info) {\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    // If we can’t put eols in this construct (setext headings, tables), use a\n    // space instead.\n    if (\n      state.unsafe[index].character === '\\n' &&\n      patternInScope(state.stack, state.unsafe[index])\n    ) {\n      return /[ \\t]/.test(info.before) ? '' : ' '\n    }\n  }\n\n  return '\\\\\\n'\n}\n","/**\n * Get the count of the longest repeating streak of `substring` in `value`.\n *\n * @param {string} value\n *   Content to search in.\n * @param {string} substring\n *   Substring to look for, typically one character.\n * @returns {number}\n *   Count of most frequent adjacent `substring`s in `value`.\n */\nexport function longestStreak(value, substring) {\n  const source = String(value)\n  let index = source.indexOf(substring)\n  let expected = index\n  let count = 0\n  let max = 0\n\n  if (typeof substring !== 'string') {\n    throw new TypeError('Expected substring')\n  }\n\n  while (index !== -1) {\n    if (index === expected) {\n      if (++count > max) {\n        max = count\n      }\n    } else {\n      count = 1\n    }\n\n    expected = index + substring.length\n    index = source.indexOf(substring, expected)\n  }\n\n  return max\n}\n","/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Code} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatCodeAsIndented(node, state) {\n  return Boolean(\n    state.options.fences === false &&\n      node.value &&\n      // If there’s no info…\n      !node.lang &&\n      // And there’s a non-whitespace character…\n      /[^ \\r\\n]/.test(node.value) &&\n      // And the value doesn’t start or end in a blank…\n      !/^[\\t ]*(?:[\\r\\n]|$)|(?:^|[\\r\\n])[\\t ]*$/.test(node.value)\n  )\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['fence'], null | undefined>}\n */\nexport function checkFence(state) {\n  const marker = state.options.fence || '`'\n\n  if (marker !== '`' && marker !== '~') {\n    throw new Error(\n      'Cannot serialize code with `' +\n        marker +\n        '` for `options.fence`, expected `` ` `` or `~`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').State} State\n */\n\nimport {longestStreak} from 'longest-streak'\nimport {formatCodeAsIndented} from '../util/format-code-as-indented.js'\nimport {checkFence} from '../util/check-fence.js'\n\n/**\n * @param {Code} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function code(node, _, state, info) {\n  const marker = checkFence(state)\n  const raw = node.value || ''\n  const suffix = marker === '`' ? 'GraveAccent' : 'Tilde'\n\n  if (formatCodeAsIndented(node, state)) {\n    const exit = state.enter('codeIndented')\n    const value = state.indentLines(raw, map)\n    exit()\n    return value\n  }\n\n  const tracker = state.createTracker(info)\n  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3))\n  const exit = state.enter('codeFenced')\n  let value = tracker.move(sequence)\n\n  if (node.lang) {\n    const subexit = state.enter(`codeFencedLang${suffix}`)\n    value += tracker.move(\n      state.safe(node.lang, {\n        before: value,\n        after: ' ',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  if (node.lang && node.meta) {\n    const subexit = state.enter(`codeFencedMeta${suffix}`)\n    value += tracker.move(' ')\n    value += tracker.move(\n      state.safe(node.meta, {\n        before: value,\n        after: '\\n',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  value += tracker.move('\\n')\n\n  if (raw) {\n    value += tracker.move(raw + '\\n')\n  }\n\n  value += tracker.move(sequence)\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['quote'], null | undefined>}\n */\nexport function checkQuote(state) {\n  const marker = state.options.quote || '\"'\n\n  if (marker !== '\"' && marker !== \"'\") {\n    throw new Error(\n      'Cannot serialize title with `' +\n        marker +\n        '` for `options.quote`, expected `\"`, or `\\'`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\n/**\n * @param {Definition} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function definition(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('definition')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      before: value,\n      after: ']',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(']: ')\n\n  subexit()\n\n  if (\n    // If there’s no url, or…\n    !node.url ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : '\\n',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  exit()\n\n  return value\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['emphasis'], null | undefined>}\n */\nexport function checkEmphasis(state) {\n  const marker = state.options.emphasis || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize emphasis with `' +\n        marker +\n        '` for `options.emphasis`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkEmphasis} from '../util/check-emphasis.js'\n\nemphasis.peek = emphasisPeek\n\n// To do: there are cases where emphasis cannot “form” depending on the\n// previous or next character of sequences.\n// There’s no way around that though, except for injecting zero-width stuff.\n// Do we need to safeguard against that?\n/**\n * @param {Emphasis} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function emphasis(node, _, state, info) {\n  const marker = checkEmphasis(state)\n  const exit = state.enter('emphasis')\n  const tracker = state.createTracker(info)\n  let value = tracker.move(marker)\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: marker,\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(marker)\n  exit()\n  return value\n}\n\n/**\n * @param {Emphasis} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction emphasisPeek(_, _1, state) {\n  return state.options.emphasis || '*'\n}\n","/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../types.js').State} State\n */\n\nimport {EXIT, visit} from 'unist-util-visit'\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Heading} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatHeadingAsSetext(node, state) {\n  let literalWithBreak = false\n\n  // Look for literals with a line break.\n  // Note that this also\n  visit(node, function (node) {\n    if (\n      ('value' in node && /\\r?\\n|\\r/.test(node.value)) ||\n      node.type === 'break'\n    ) {\n      literalWithBreak = true\n      return EXIT\n    }\n  })\n\n  return Boolean(\n    (!node.depth || node.depth < 3) &&\n      toString(node) &&\n      (state.options.setext || literalWithBreak)\n  )\n}\n","/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {formatHeadingAsSetext} from '../util/format-heading-as-setext.js'\n\n/**\n * @param {Heading} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function heading(node, _, state, info) {\n  const rank = Math.max(Math.min(6, node.depth || 1), 1)\n  const tracker = state.createTracker(info)\n\n  if (formatHeadingAsSetext(node, state)) {\n    const exit = state.enter('headingSetext')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...tracker.current(),\n      before: '\\n',\n      after: '\\n'\n    })\n    subexit()\n    exit()\n\n    return (\n      value +\n      '\\n' +\n      (rank === 1 ? '=' : '-').repeat(\n        // The whole size…\n        value.length -\n          // Minus the position of the character after the last EOL (or\n          // 0 if there is none)…\n          (Math.max(value.lastIndexOf('\\r'), value.lastIndexOf('\\n')) + 1)\n      )\n    )\n  }\n\n  const sequence = '#'.repeat(rank)\n  const exit = state.enter('headingAtx')\n  const subexit = state.enter('phrasing')\n\n  // Note: for proper tracking, we should reset the output positions when there\n  // is no content returned, because then the space is not output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  tracker.move(sequence + ' ')\n\n  let value = state.containerPhrasing(node, {\n    before: '# ',\n    after: '\\n',\n    ...tracker.current()\n  })\n\n  if (/^[\\t ]/.test(value)) {\n    // To do: what effect has the character reference on tracking?\n    value =\n      '&#x' +\n      value.charCodeAt(0).toString(16).toUpperCase() +\n      ';' +\n      value.slice(1)\n  }\n\n  value = value ? sequence + ' ' + value : sequence\n\n  if (state.options.closeAtx) {\n    value += ' ' + sequence\n  }\n\n  subexit()\n  exit()\n\n  return value\n}\n","/**\n * @typedef {import('mdast').Html} Html\n */\n\nhtml.peek = htmlPeek\n\n/**\n * @param {Html} node\n * @returns {string}\n */\nexport function html(node) {\n  return node.value || ''\n}\n\n/**\n * @returns {string}\n */\nfunction htmlPeek() {\n  return '<'\n}\n","/**\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\nimage.peek = imagePeek\n\n/**\n * @param {Image} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function image(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('image')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  value += tracker.move(\n    state.safe(node.alt, {before: value, after: ']', ...tracker.current()})\n  )\n  value += tracker.move('](')\n\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n  exit()\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imagePeek() {\n  return '!'\n}\n","/**\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimageReference.peek = imageReferencePeek\n\n/**\n * @param {ImageReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function imageReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('imageReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  const alt = state.safe(node.alt, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(alt + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !alt || alt !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imageReferencePeek() {\n  return '!'\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').State} State\n */\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n    const expression = state.compilePattern(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../types.js').State} State\n */\n\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Link} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatLinkAsAutolink(node, state) {\n  const raw = toString(node)\n\n  return Boolean(\n    !state.options.resourceLink &&\n      // If there’s a url…\n      node.url &&\n      // And there’s a no title…\n      !node.title &&\n      // And the content of `node` is a single text node…\n      node.children &&\n      node.children.length === 1 &&\n      node.children[0].type === 'text' &&\n      // And if the url is the same as the content…\n      (raw === node.url || 'mailto:' + raw === node.url) &&\n      // And that starts w/ a protocol…\n      /^[a-z][a-z+.-]+:/i.test(node.url) &&\n      // And that doesn’t contain ASCII control codes (character escapes and\n      // references don’t work), space, or angle brackets…\n      !/[\\0- <>\\u007F]/.test(node.url)\n  )\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Exit} Exit\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkQuote} from '../util/check-quote.js'\nimport {formatLinkAsAutolink} from '../util/format-link-as-autolink.js'\n\nlink.peek = linkPeek\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function link(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const tracker = state.createTracker(info)\n  /** @type {Exit} */\n  let exit\n  /** @type {Exit} */\n  let subexit\n\n  if (formatLinkAsAutolink(node, state)) {\n    // Hide the fact that we’re in phrasing, because escapes don’t work.\n    const stack = state.stack\n    state.stack = []\n    exit = state.enter('autolink')\n    let value = tracker.move('<')\n    value += tracker.move(\n      state.containerPhrasing(node, {\n        before: value,\n        after: '>',\n        ...tracker.current()\n      })\n    )\n    value += tracker.move('>')\n    exit()\n    state.stack = stack\n    return value\n  }\n\n  exit = state.enter('link')\n  subexit = state.enter('label')\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: '](',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move('](')\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n\n  exit()\n  return value\n}\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nfunction linkPeek(node, _, state) {\n  return formatLinkAsAutolink(node, state) ? '<' : '['\n}\n","/**\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nlinkReference.peek = linkReferencePeek\n\n/**\n * @param {LinkReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function linkReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('linkReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  const text = state.containerPhrasing(node, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(text + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !text || text !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction linkReferencePeek() {\n  return '['\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBullet(state) {\n  const marker = state.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkBullet} from './check-bullet.js'\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBulletOther(state) {\n  const bullet = checkBullet(state)\n  const bulletOther = state.options.bulletOther\n\n  if (!bulletOther) {\n    return bullet === '*' ? '-' : '*'\n  }\n\n  if (bulletOther !== '*' && bulletOther !== '+' && bulletOther !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        bulletOther +\n        '` for `options.bulletOther`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  if (bulletOther === bullet) {\n    throw new Error(\n      'Expected `bullet` (`' +\n        bullet +\n        '`) and `bulletOther` (`' +\n        bulletOther +\n        '`) to be different'\n    )\n  }\n\n  return bulletOther\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bulletOrdered'], null | undefined>}\n */\nexport function checkBulletOrdered(state) {\n  const marker = state.options.bulletOrdered || '.'\n\n  if (marker !== '.' && marker !== ')') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bulletOrdered`, expected `.` or `)`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['rule'], null | undefined>}\n */\nexport function checkRule(state) {\n  const marker = state.options.rule || '*'\n\n  if (marker !== '*' && marker !== '-' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize rules with `' +\n        marker +\n        '` for `options.rule`, expected `*`, `-`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkBulletOther} from '../util/check-bullet-other.js'\nimport {checkBulletOrdered} from '../util/check-bullet-ordered.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {List} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function list(node, parent, state, info) {\n  const exit = state.enter('list')\n  const bulletCurrent = state.bulletCurrent\n  /** @type {string} */\n  let bullet = node.ordered ? checkBulletOrdered(state) : checkBullet(state)\n  /** @type {string} */\n  const bulletOther = node.ordered\n    ? bullet === '.'\n      ? ')'\n      : '.'\n    : checkBulletOther(state)\n  let useDifferentMarker =\n    parent && state.bulletLastUsed ? bullet === state.bulletLastUsed : false\n\n  if (!node.ordered) {\n    const firstListItem = node.children ? node.children[0] : undefined\n\n    // If there’s an empty first list item directly in two list items,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * - *\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (\n      // Bullet could be used as a thematic break marker:\n      (bullet === '*' || bullet === '-') &&\n      // Empty first list item:\n      firstListItem &&\n      (!firstListItem.children || !firstListItem.children[0]) &&\n      // Directly in two other list items:\n      state.stack[state.stack.length - 1] === 'list' &&\n      state.stack[state.stack.length - 2] === 'listItem' &&\n      state.stack[state.stack.length - 3] === 'list' &&\n      state.stack[state.stack.length - 4] === 'listItem' &&\n      // That are each the first child.\n      state.indexStack[state.indexStack.length - 1] === 0 &&\n      state.indexStack[state.indexStack.length - 2] === 0 &&\n      state.indexStack[state.indexStack.length - 3] === 0\n    ) {\n      useDifferentMarker = true\n    }\n\n    // If there’s a thematic break at the start of the first list item,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * ---\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (checkRule(state) === bullet && firstListItem) {\n      let index = -1\n\n      while (++index < node.children.length) {\n        const item = node.children[index]\n\n        if (\n          item &&\n          item.type === 'listItem' &&\n          item.children &&\n          item.children[0] &&\n          item.children[0].type === 'thematicBreak'\n        ) {\n          useDifferentMarker = true\n          break\n        }\n      }\n    }\n  }\n\n  if (useDifferentMarker) {\n    bullet = bulletOther\n  }\n\n  state.bulletCurrent = bullet\n  const value = state.containerFlow(node, info)\n  state.bulletLastUsed = bullet\n  state.bulletCurrent = bulletCurrent\n  exit()\n  return value\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\n */\nexport function checkListItemIndent(state) {\n  const style = state.options.listItemIndent || 'one'\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\n\n/**\n * @param {ListItem} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function listItem(node, parent, state, info) {\n  const listItemIndent = checkListItemIndent(state)\n  let bullet = state.bulletCurrent || checkBullet(state)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (state.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = state.createTracker(info)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = state.enter('listItem')\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n","/**\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Paragraph} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function paragraph(node, _, state, info) {\n  const exit = state.enter('paragraph')\n  const subexit = state.enter('phrasing')\n  const value = state.containerPhrasing(node, info)\n  subexit()\n  exit()\n  return value\n}\n","/**\n * @typedef {import('mdast').Html} Html\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n */\n\nimport {convert} from 'unist-util-is'\n\n/**\n * Check if the given value is *phrasing content*.\n *\n * > 👉 **Note**: Excludes `html`, which can be both phrasing or flow.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @returns\n *   Whether `value` is phrasing content.\n */\n\nexport const phrasing =\n  /** @type {(node?: unknown) => node is Exclude<PhrasingContent, Html>} */\n  (\n    convert([\n      'break',\n      'delete',\n      'emphasis',\n      // To do: next major: removed since footnotes were added to GFM.\n      'footnote',\n      'footnoteReference',\n      'image',\n      'imageReference',\n      'inlineCode',\n      // Enabled by `mdast-util-math`:\n      'inlineMath',\n      'link',\n      'linkReference',\n      // Enabled by `mdast-util-mdx`:\n      'mdxJsxTextElement',\n      // Enabled by `mdast-util-mdx`:\n      'mdxTextExpression',\n      'strong',\n      'text',\n      // Enabled by `mdast-util-directive`:\n      'textDirective'\n    ])\n  )\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {phrasing} from 'mdast-util-phrasing'\n\n/**\n * @param {Root} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function root(node, _, state, info) {\n  // Note: `html` nodes are ambiguous.\n  const hasPhrasing = node.children.some(function (d) {\n    return phrasing(d)\n  })\n  const fn = hasPhrasing ? state.containerPhrasing : state.containerFlow\n  return fn.call(state, node, info)\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['strong'], null | undefined>}\n */\nexport function checkStrong(state) {\n  const marker = state.options.strong || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize strong with `' +\n        marker +\n        '` for `options.strong`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkStrong} from '../util/check-strong.js'\n\nstrong.peek = strongPeek\n\n// To do: there are cases where emphasis cannot “form” depending on the\n// previous or next character of sequences.\n// There’s no way around that though, except for injecting zero-width stuff.\n// Do we need to safeguard against that?\n/**\n * @param {Strong} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function strong(node, _, state, info) {\n  const marker = checkStrong(state)\n  const exit = state.enter('strong')\n  const tracker = state.createTracker(info)\n  let value = tracker.move(marker + marker)\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: marker,\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(marker + marker)\n  exit()\n  return value\n}\n\n/**\n * @param {Strong} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction strongPeek(_, _1, state) {\n  return state.options.strong || '*'\n}\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').Text} Text\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Text} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function text(node, _, state, info) {\n  return state.safe(node.value, info)\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['ruleRepetition'], null | undefined>}\n */\nexport function checkRuleRepetition(state) {\n  const repetition = state.options.ruleRepetition || 3\n\n  if (repetition < 3) {\n    throw new Error(\n      'Cannot serialize rules with repetition `' +\n        repetition +\n        '` for `options.ruleRepetition`, expected `3` or more'\n    )\n  }\n\n  return repetition\n}\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkRuleRepetition} from '../util/check-rule-repetition.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {ThematicBreak} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nexport function thematicBreak(_, _1, state) {\n  const value = (\n    checkRule(state) + (state.options.ruleSpaces ? ' ' : '')\n  ).repeat(checkRuleRepetition(state))\n\n  return state.options.ruleSpaces ? value.slice(0, -1) : value\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {definition} from './definition.js'\nimport {emphasis} from './emphasis.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {image} from './image.js'\nimport {imageReference} from './image-reference.js'\nimport {inlineCode} from './inline-code.js'\nimport {link} from './link.js'\nimport {linkReference} from './link-reference.js'\nimport {list} from './list.js'\nimport {listItem} from './list-item.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default (CommonMark) handlers.\n */\nexport const handle = {\n  blockquote,\n  break: hardBreak,\n  code,\n  definition,\n  emphasis,\n  hardBreak,\n  heading,\n  html,\n  image,\n  imageReference,\n  inlineCode,\n  link,\n  linkReference,\n  list,\n  listItem,\n  paragraph,\n  root,\n  strong,\n  text,\n  thematicBreak\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').TableRow} TableRow\n *\n * @typedef {import('markdown-table').Options} MarkdownTableOptions\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').State} State\n * @typedef {import('mdast-util-to-markdown').Info} Info\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [tableCellPadding=true]\n *   Whether to add a space of padding between delimiters and cells (default:\n *   `true`).\n * @property {boolean | null | undefined} [tablePipeAlign=true]\n *   Whether to align the delimiters (default: `true`).\n * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]\n *   Function to detect the length of table cell content, used when aligning\n *   the delimiters between cells (optional).\n */\n\nimport {ok as assert} from 'devlop'\nimport {markdownTable} from 'markdown-table'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM tables in\n * markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM tables.\n */\nexport function gfmTableFromMarkdown() {\n  return {\n    enter: {\n      table: enterTable,\n      tableData: enterCell,\n      tableHeader: enterCell,\n      tableRow: enterRow\n    },\n    exit: {\n      codeText: exitCodeText,\n      table: exitTable,\n      tableData: exit,\n      tableHeader: exit,\n      tableRow: exit\n    }\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterTable(token) {\n  const align = token._align\n  assert(align, 'expected `_align` on table')\n  this.enter(\n    {\n      type: 'table',\n      align: align.map(function (d) {\n        return d === 'none' ? null : d\n      }),\n      children: []\n    },\n    token\n  )\n  this.data.inTable = true\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitTable(token) {\n  this.exit(token)\n  this.data.inTable = undefined\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exit(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCodeText(token) {\n  let value = this.resume()\n\n  if (this.data.inTable) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'inlineCode')\n  node.value = value\n  this.exit(token)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM tables in\n * markdown.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM tables.\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {}\n  const padding = settings.tableCellPadding\n  const alignDelimiters = settings.tablePipeAlign\n  const stringLength = settings.stringLength\n  const around = padding ? ' ' : '|'\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'tableCell'},\n      {character: '\\n', inConstruct: 'tableCell'},\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      {atBreak: true, character: '|', after: '[\\t :-]'},\n      // A pipe in a cell must be encoded.\n      {character: '|', inConstruct: 'tableCell'},\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      {atBreak: true, character: ':', after: '-'},\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      {atBreak: true, character: '-', after: '[:|-]'}\n    ],\n    handlers: {\n      inlineCode: inlineCodeWithTable,\n      table: handleTable,\n      tableCell: handleTableCell,\n      tableRow: handleTableRow\n    }\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n  function handleTable(node, _, state, info) {\n    return serializeData(handleTableAsData(node, state, info), node.align)\n  }\n\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n  function handleTableRow(node, _, state, info) {\n    const row = handleTableRowAsData(node, state, info)\n    const value = serializeData([row])\n    // `markdown-table` will always add an align row\n    return value.slice(0, value.indexOf('\\n'))\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n  function handleTableCell(node, _, state, info) {\n    const exit = state.enter('tableCell')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...info,\n      before: around,\n      after: around\n    })\n    subexit()\n    exit()\n    return value\n  }\n\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string | null | undefined> | null | undefined} [align]\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      alignDelimiters,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      padding,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      stringLength\n    })\n  }\n\n  /**\n   * @param {Table} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<Array<string>>} */\n    const result = []\n    const subexit = state.enter('table')\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(children[index], state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @param {TableRow} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableRowAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<string>} */\n    const result = []\n    const subexit = state.enter('tableRow')\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(children[index], node, state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n  function inlineCodeWithTable(node, parent, state) {\n    let value = defaultHandlers.inlineCode(node, parent, state)\n\n    if (state.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&')\n    }\n\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {ok as assert} from 'devlop'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM task\n * list items in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemFromMarkdown() {\n  return {\n    exit: {\n      taskListCheckValueChecked: exitCheck,\n      taskListCheckValueUnchecked: exitCheck,\n      paragraph: exitParagraphWithTaskListItem\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM task list\n * items in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemToMarkdown() {\n  return {\n    unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n    handlers: {listItem: listItemWithTaskListItem}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCheck(token) {\n  // We’re always in a paragraph, in a list item.\n  const node = this.stack[this.stack.length - 2]\n  assert(node.type === 'listItem')\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = this.stack[this.stack.length - 2]\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean'\n  ) {\n    const node = this.stack[this.stack.length - 1]\n    assert(node.type === 'paragraph')\n    const head = node.children[0]\n\n    if (head && head.type === 'text') {\n      const siblings = parent.children\n      let index = -1\n      /** @type {Paragraph | undefined} */\n      let firstParaghraph\n\n      while (++index < siblings.length) {\n        const sibling = siblings[index]\n        if (sibling.type === 'paragraph') {\n          firstParaghraph = sibling\n          break\n        }\n      }\n\n      if (firstParaghraph === node) {\n        // Must start with a space or a tab.\n        head.value = head.value.slice(1)\n\n        if (head.value.length === 0) {\n          node.children.shift()\n        } else if (\n          node.position &&\n          head.position &&\n          typeof head.position.start.offset === 'number'\n        ) {\n          head.position.start.column++\n          head.position.start.offset++\n          node.position.start = Object.assign({}, head.position.start)\n        }\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, state, info) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = state.createTracker(info)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = defaultHandlers.listItem(node, parent, state, {\n    ...info,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n","/**\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * @typedef {import('mdast-util-gfm-table').Options} Options\n *   Configuration.\n */\n\nimport {\n  gfmAutolinkLiteralFromMarkdown,\n  gfmAutolinkLiteralToMarkdown\n} from 'mdast-util-gfm-autolink-literal'\nimport {\n  gfmFootnoteFromMarkdown,\n  gfmFootnoteToMarkdown\n} from 'mdast-util-gfm-footnote'\nimport {\n  gfmStrikethroughFromMarkdown,\n  gfmStrikethroughToMarkdown\n} from 'mdast-util-gfm-strikethrough'\nimport {gfmTableFromMarkdown, gfmTableToMarkdown} from 'mdast-util-gfm-table'\nimport {\n  gfmTaskListItemFromMarkdown,\n  gfmTaskListItemToMarkdown\n} from 'mdast-util-gfm-task-list-item'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @returns {Array<FromMarkdownExtension>}\n *   Extension for `mdast-util-from-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmFromMarkdown() {\n  return [\n    gfmAutolinkLiteralFromMarkdown(),\n    gfmFootnoteFromMarkdown(),\n    gfmStrikethroughFromMarkdown(),\n    gfmTableFromMarkdown(),\n    gfmTaskListItemFromMarkdown()\n  ]\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmToMarkdown(options) {\n  return {\n    extensions: [\n      gfmAutolinkLiteralToMarkdown(),\n      gfmFootnoteToMarkdown(),\n      gfmStrikethroughToMarkdown(),\n      gfmTableToMarkdown(options),\n      gfmTaskListItemToMarkdown()\n    ]\n  }\n}\n","/**\n * @import {Code, ConstructRecord, Event, Extension, Previous, State, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { asciiAlpha, asciiAlphanumeric, asciiControl, markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\nconst wwwPrefix = {\n  tokenize: tokenizeWwwPrefix,\n  partial: true\n};\nconst domain = {\n  tokenize: tokenizeDomain,\n  partial: true\n};\nconst path = {\n  tokenize: tokenizePath,\n  partial: true\n};\nconst trail = {\n  tokenize: tokenizeTrail,\n  partial: true\n};\nconst emailDomainDotTrail = {\n  tokenize: tokenizeEmailDomainDotTrail,\n  partial: true\n};\nconst wwwAutolink = {\n  name: 'wwwAutolink',\n  tokenize: tokenizeWwwAutolink,\n  previous: previousWww\n};\nconst protocolAutolink = {\n  name: 'protocolAutolink',\n  tokenize: tokenizeProtocolAutolink,\n  previous: previousProtocol\n};\nconst emailAutolink = {\n  name: 'emailAutolink',\n  tokenize: tokenizeEmailAutolink,\n  previous: previousEmail\n};\n\n/** @type {ConstructRecord} */\nconst text = {};\n\n/**\n * Create an extension for `micromark` to support GitHub autolink literal\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   autolink literal syntax.\n */\nexport function gfmAutolinkLiteral() {\n  return {\n    text\n  };\n}\n\n/** @type {Code} */\nlet code = 48;\n\n// Add alphanumerics.\nwhile (code < 123) {\n  text[code] = emailAutolink;\n  code++;\n  if (code === 58) code = 65;else if (code === 91) code = 97;\n}\ntext[43] = emailAutolink;\ntext[45] = emailAutolink;\ntext[46] = emailAutolink;\ntext[95] = emailAutolink;\ntext[72] = [emailAutolink, protocolAutolink];\ntext[104] = [emailAutolink, protocolAutolink];\ntext[87] = [emailAutolink, wwwAutolink];\ntext[119] = [emailAutolink, wwwAutolink];\n\n// To do: perform email autolink literals on events, afterwards.\n// That’s where `markdown-rs` and `cmark-gfm` perform it.\n// It should look for `@`, then for atext backwards, and then for a label\n// forwards.\n// To do: `mailto:`, `xmpp:` protocol as prefix.\n\n/**\n * Email autolink literal.\n *\n * ```markdown\n * > | a contact@example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n  const self = this;\n  /** @type {boolean | undefined} */\n  let dot;\n  /** @type {boolean} */\n  let data;\n  return start;\n\n  /**\n   * Start of email autolink literal.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (!gfmAtext(code) || !previousEmail.call(self, self.previous) || previousUnbalanced(self.events)) {\n      return nok(code);\n    }\n    effects.enter('literalAutolink');\n    effects.enter('literalAutolinkEmail');\n    return atext(code);\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atext(code) {\n    if (gfmAtext(code)) {\n      effects.consume(code);\n      return atext;\n    }\n    if (code === 64) {\n      effects.consume(code);\n      return emailDomain;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In email domain.\n   *\n   * The reference code is a bit overly complex as it handles the `@`, of which\n   * there may be just one.\n   * Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L318>\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomain(code) {\n    // Dot followed by alphanumerical (not `-` or `_`).\n    if (code === 46) {\n      return effects.check(emailDomainDotTrail, emailDomainAfter, emailDomainDot)(code);\n    }\n\n    // Alphanumerical, `-`, and `_`.\n    if (code === 45 || code === 95 || asciiAlphanumeric(code)) {\n      data = true;\n      effects.consume(code);\n      return emailDomain;\n    }\n\n    // To do: `/` if xmpp.\n\n    // Note: normally we’d truncate trailing punctuation from the link.\n    // However, email autolink literals cannot contain any of those markers,\n    // except for `.`, but that can only occur if it isn’t trailing.\n    // So we can ignore truncating!\n    return emailDomainAfter(code);\n  }\n\n  /**\n   * In email domain, on dot that is not a trail.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainDot(code) {\n    effects.consume(code);\n    dot = true;\n    return emailDomain;\n  }\n\n  /**\n   * After email domain.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainAfter(code) {\n    // Domain must not be empty, must include a dot, and must end in alphabetical.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L332>.\n    if (data && dot && asciiAlpha(self.previous)) {\n      effects.exit('literalAutolinkEmail');\n      effects.exit('literalAutolink');\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * `www` autolink literal.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n  const self = this;\n  return wwwStart;\n\n  /**\n   * Start of www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwStart(code) {\n    if (code !== 87 && code !== 119 || !previousWww.call(self, self.previous) || previousUnbalanced(self.events)) {\n      return nok(code);\n    }\n    effects.enter('literalAutolink');\n    effects.enter('literalAutolinkWww');\n    // Note: we *check*, so we can discard the `www.` we parsed.\n    // If it worked, we consider it as a part of the domain.\n    return effects.check(wwwPrefix, effects.attempt(domain, effects.attempt(path, wwwAfter), nok), nok)(code);\n  }\n\n  /**\n   * After a www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwAfter(code) {\n    effects.exit('literalAutolinkWww');\n    effects.exit('literalAutolink');\n    return ok(code);\n  }\n}\n\n/**\n * Protocol autolink literal.\n *\n * ```markdown\n * > | a https://example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeProtocolAutolink(effects, ok, nok) {\n  const self = this;\n  let buffer = '';\n  let seen = false;\n  return protocolStart;\n\n  /**\n   * Start of protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolStart(code) {\n    if ((code === 72 || code === 104) && previousProtocol.call(self, self.previous) && !previousUnbalanced(self.events)) {\n      effects.enter('literalAutolink');\n      effects.enter('literalAutolinkHttp');\n      buffer += String.fromCodePoint(code);\n      effects.consume(code);\n      return protocolPrefixInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In protocol.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolPrefixInside(code) {\n    // `5` is size of `https`\n    if (asciiAlpha(code) && buffer.length < 5) {\n      // @ts-expect-error: definitely number.\n      buffer += String.fromCodePoint(code);\n      effects.consume(code);\n      return protocolPrefixInside;\n    }\n    if (code === 58) {\n      const protocol = buffer.toLowerCase();\n      if (protocol === 'http' || protocol === 'https') {\n        effects.consume(code);\n        return protocolSlashesInside;\n      }\n    }\n    return nok(code);\n  }\n\n  /**\n   * In slashes.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *           ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolSlashesInside(code) {\n    if (code === 47) {\n      effects.consume(code);\n      if (seen) {\n        return afterProtocol;\n      }\n      seen = true;\n      return protocolSlashesInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After protocol, before domain.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterProtocol(code) {\n    // To do: this is different from `markdown-rs`:\n    // https://github.com/wooorm/markdown-rs/blob/b3a921c761309ae00a51fe348d8a43adbc54b518/src/construct/gfm_autolink_literal.rs#L172-L182\n    return code === null || asciiControl(code) || markdownLineEndingOrSpace(code) || unicodeWhitespace(code) || unicodePunctuation(code) ? nok(code) : effects.attempt(domain, effects.attempt(path, protocolAfter), nok)(code);\n  }\n\n  /**\n   * After a protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *                              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolAfter(code) {\n    effects.exit('literalAutolinkHttp');\n    effects.exit('literalAutolink');\n    return ok(code);\n  }\n}\n\n/**\n * `www` prefix.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwPrefix(effects, ok, nok) {\n  let size = 0;\n  return wwwPrefixInside;\n\n  /**\n   * In www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *     ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixInside(code) {\n    if ((code === 87 || code === 119) && size < 3) {\n      size++;\n      effects.consume(code);\n      return wwwPrefixInside;\n    }\n    if (code === 46 && size === 3) {\n      effects.consume(code);\n      return wwwPrefixAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixAfter(code) {\n    // If there is *anything*, we can link.\n    return code === null ? nok(code) : ok(code);\n  }\n}\n\n/**\n * Domain.\n *\n * ```markdown\n * > | a https://example.org b\n *               ^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDomain(effects, ok, nok) {\n  /** @type {boolean | undefined} */\n  let underscoreInLastSegment;\n  /** @type {boolean | undefined} */\n  let underscoreInLastLastSegment;\n  /** @type {boolean | undefined} */\n  let seen;\n  return domainInside;\n\n  /**\n   * In domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *             ^^^^^^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainInside(code) {\n    // Check whether this marker, which is a trailing punctuation\n    // marker, optionally followed by more trailing markers, and then\n    // followed by an end.\n    if (code === 46 || code === 95) {\n      return effects.check(trail, domainAfter, domainAtPunctuation)(code);\n    }\n\n    // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n    // so that’s Unicode.\n    // Instead of some new production for Unicode alphanumerics, markdown\n    // already has that for Unicode punctuation and whitespace, so use those.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L12>.\n    if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code) || code !== 45 && unicodePunctuation(code)) {\n      return domainAfter(code);\n    }\n    seen = true;\n    effects.consume(code);\n    return domainInside;\n  }\n\n  /**\n   * In domain, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainAtPunctuation(code) {\n    // There is an underscore in the last segment of the domain\n    if (code === 95) {\n      underscoreInLastSegment = true;\n    }\n    // Otherwise, it’s a `.`: save the last segment underscore in the\n    // penultimate segment slot.\n    else {\n      underscoreInLastLastSegment = underscoreInLastSegment;\n      underscoreInLastSegment = undefined;\n    }\n    effects.consume(code);\n    return domainInside;\n  }\n\n  /**\n   * After domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^\n   * ```\n   *\n   * @type {State} */\n  function domainAfter(code) {\n    // Note: that’s GH says a dot is needed, but it’s not true:\n    // <https://github.com/github/cmark-gfm/issues/279>\n    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {\n      return nok(code);\n    }\n    return ok(code);\n  }\n}\n\n/**\n * Path.\n *\n * ```markdown\n * > | a https://example.org/stuff b\n *                          ^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePath(effects, ok) {\n  let sizeOpen = 0;\n  let sizeClose = 0;\n  return pathInside;\n\n  /**\n   * In path.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathInside(code) {\n    if (code === 40) {\n      sizeOpen++;\n      effects.consume(code);\n      return pathInside;\n    }\n\n    // To do: `markdown-rs` also needs this.\n    // If this is a paren, and there are less closings than openings,\n    // we don’t check for a trail.\n    if (code === 41 && sizeClose < sizeOpen) {\n      return pathAtPunctuation(code);\n    }\n\n    // Check whether this trailing punctuation marker is optionally\n    // followed by more trailing markers, and then followed\n    // by an end.\n    if (code === 33 || code === 34 || code === 38 || code === 39 || code === 41 || code === 42 || code === 44 || code === 46 || code === 58 || code === 59 || code === 60 || code === 63 || code === 93 || code === 95 || code === 126) {\n      return effects.check(trail, ok, pathAtPunctuation)(code);\n    }\n    if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    effects.consume(code);\n    return pathInside;\n  }\n\n  /**\n   * In path, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com/a\"b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathAtPunctuation(code) {\n    // Count closing parens.\n    if (code === 41) {\n      sizeClose++;\n    }\n    effects.consume(code);\n    return pathInside;\n  }\n}\n\n/**\n * Trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the entire trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | https://example.com\").\n *                        ^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTrail(effects, ok, nok) {\n  return trail;\n\n  /**\n   * In trail of domain or path.\n   *\n   * ```markdown\n   * > | https://example.com\").\n   *                        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trail(code) {\n    // Regular trailing punctuation.\n    if (code === 33 || code === 34 || code === 39 || code === 41 || code === 42 || code === 44 || code === 46 || code === 58 || code === 59 || code === 63 || code === 95 || code === 126) {\n      effects.consume(code);\n      return trail;\n    }\n\n    // `&` followed by one or more alphabeticals and then a `;`, is\n    // as a whole considered as trailing punctuation.\n    // In all other cases, it is considered as continuation of the URL.\n    if (code === 38) {\n      effects.consume(code);\n      return trailCharacterReferenceStart;\n    }\n\n    // Needed because we allow literals after `[`, as we fix:\n    // <https://github.com/github/cmark-gfm/issues/278>.\n    // Check that it is not followed by `(` or `[`.\n    if (code === 93) {\n      effects.consume(code);\n      return trailBracketAfter;\n    }\n    if (\n    // `<` is an end.\n    code === 60 ||\n    // So is whitespace.\n    code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In trail, after `]`.\n   *\n   * > 👉 **Note**: this deviates from `cmark-gfm` to fix a bug.\n   * > See end of <https://github.com/github/cmark-gfm/issues/278> for more.\n   *\n   * ```markdown\n   * > | https://example.com](\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailBracketAfter(code) {\n    // Whitespace or something that could start a resource or reference is the end.\n    // Switch back to trail otherwise.\n    if (code === null || code === 40 || code === 91 || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    return trail(code);\n  }\n\n  /**\n   * In character-reference like trail, after `&`.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharacterReferenceStart(code) {\n    // When non-alpha, it’s not a trail.\n    return asciiAlpha(code) ? trailCharacterReferenceInside(code) : nok(code);\n  }\n\n  /**\n   * In character-reference like trail.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharacterReferenceInside(code) {\n    // Switch back to trail if this is well-formed.\n    if (code === 59) {\n      effects.consume(code);\n      return trail;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return trailCharacterReferenceInside;\n    }\n\n    // It’s not a trail.\n    return nok(code);\n  }\n}\n\n/**\n * Dot in email domain trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | contact@example.org.\n *                        ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailDomainDotTrail(effects, ok, nok) {\n  return start;\n\n  /**\n   * Dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                    ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Must be dot.\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                     ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Not a trail if alphanumeric.\n    return asciiAlphanumeric(code) ? nok(code) : ok(code);\n  }\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L156>.\n *\n * @type {Previous}\n */\nfunction previousWww(code) {\n  return code === null || code === 40 || code === 42 || code === 95 || code === 91 || code === 93 || code === 126 || markdownLineEndingOrSpace(code);\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L214>.\n *\n * @type {Previous}\n */\nfunction previousProtocol(code) {\n  return !asciiAlpha(code);\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previousEmail(code) {\n  // Do not allow a slash “inside” atext.\n  // The reference code is a bit weird, but that’s what it results in.\n  // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L307>.\n  // Other than slash, every preceding character is allowed.\n  return !(code === 47 || gfmAtext(code));\n}\n\n/**\n * @param {Code} code\n * @returns {boolean}\n */\nfunction gfmAtext(code) {\n  return code === 43 || code === 45 || code === 46 || code === 95 || asciiAlphanumeric(code);\n}\n\n/**\n * @param {Array<Event>} events\n * @returns {boolean}\n */\nfunction previousUnbalanced(events) {\n  let index = events.length;\n  let result = false;\n  while (index--) {\n    const token = events[index][1];\n    if ((token.type === 'labelLink' || token.type === 'labelImage') && !token._balanced) {\n      result = true;\n      break;\n    }\n\n    // If we’ve seen this token, and it was marked as not having any unbalanced\n    // bracket before it, we can exit.\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false;\n      break;\n    }\n  }\n  if (events.length > 0 && !result) {\n    // Mark the last token as “walked into” w/o finding\n    // anything.\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true;\n  }\n  return result;\n}","/**\n * @import {Event, Exiter, Extension, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { blankLine } from 'micromark-core-commonmark';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n};\n\n// To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only\n// affects label start (image).\n// That will let us drop `tokenizePotentialGfmFootnote*`.\n// It currently has a `_hiddenFootnoteSupport`, which affects that and more.\n// That can be removed when `micromark-extension-footnote` is archived.\n\n/**\n * Create an extension for `micromark` to enable GFM footnote syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to\n *   enable GFM footnote syntax.\n */\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        name: 'gfmFootnoteDefinition',\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        name: 'gfmFootnoteCall',\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        name: 'gfmPotentialFootnoteCall',\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  };\n}\n\n// To do: remove after micromark update.\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  /** @type {Token} */\n  let labelStart;\n\n  // Find an opening.\n  while (index--) {\n    const token = self.events[index][1];\n    if (token.type === \"labelImage\") {\n      labelStart = token;\n      break;\n    }\n\n    // Exit if we’ve walked far enough.\n    if (token.type === 'gfmFootnoteCall' || token.type === \"labelLink\" || token.type === \"label\" || token.type === \"image\" || token.type === \"link\") {\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * @type {State}\n   */\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code);\n    }\n    const id = normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    }));\n    if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code);\n    }\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    return ok(code);\n  }\n}\n\n// To do: remove after micromark update.\n/** @type {Resolver} */\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length;\n  /** @type {Token | undefined} */\n  let labelStart;\n\n  // Find an opening.\n  while (index--) {\n    if (events[index][1].type === \"labelImage\" && events[index][0] === 'enter') {\n      labelStart = events[index][1];\n      break;\n    }\n  }\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = \"data\";\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker';\n\n  // The whole (without `!`):\n  /** @type {Token} */\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n  // The `^` marker\n  /** @type {Token} */\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  };\n  // Increment the end 1 character.\n  marker.end.column++;\n  marker.end.offset++;\n  marker.end._bufferIndex++;\n  /** @type {Token} */\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  };\n  /** @type {Token} */\n  const chunk = {\n    type: \"chunkString\",\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  };\n\n  /** @type {Array<Event>} */\n  const replacement = [\n  // Take the `labelImageMarker` (now `data`, the `!`)\n  events[index + 1], events[index + 2], ['enter', call, context],\n  // The `[`\n  events[index + 3], events[index + 4],\n  // The `^`.\n  ['enter', marker, context], ['exit', marker, context],\n  // Everything in between.\n  ['enter', string, context], ['enter', chunk, context], ['exit', chunk, context], ['exit', string, context],\n  // The ending (`]`, properly parsed and labelled).\n  events[events.length - 2], events[events.length - 1], ['exit', call, context]];\n  events.splice(index, events.length - index + 1, ...replacement);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  let size = 0;\n  /** @type {boolean} */\n  let data;\n\n  // Note: the implementation of `markdown-rs` is different, because it houses\n  // core *and* extensions in one project.\n  // Therefore, it can include footnote logic inside `label-end`.\n  // We can’t do that, but luckily, we can parse footnotes in a simpler way than\n  // needed for labels.\n  return start;\n\n  /**\n   * Start of footnote label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteCall');\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    return callStart;\n  }\n\n  /**\n   * After `[`, at `^`.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callStart(code) {\n    if (code !== 94) return nok(code);\n    effects.enter('gfmFootnoteCallMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallMarker');\n    effects.enter('gfmFootnoteCallString');\n    effects.enter('chunkString').contentType = 'string';\n    return callData;\n  }\n\n  /**\n   * In label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callData(code) {\n    if (\n    // Too long.\n    size > 999 ||\n    // Closing brace with nothing.\n    code === 93 && !data ||\n    // Space or tab is not supported by GFM for some reason.\n    // `\\n` and `[` not being supported makes sense.\n    code === null || code === 91 || markdownLineEndingOrSpace(code)) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit('chunkString');\n      const token = effects.exit('gfmFootnoteCallString');\n      if (!defined.includes(normalizeIdentifier(self.sliceSerialize(token)))) {\n        return nok(code);\n      }\n      effects.enter('gfmFootnoteCallLabelMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteCallLabelMarker');\n      effects.exit('gfmFootnoteCall');\n      return ok;\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true;\n    }\n    size++;\n    effects.consume(code);\n    return code === 92 ? callEscape : callData;\n  }\n\n  /**\n   * On character after escape.\n   *\n   * ```markdown\n   * > | a [^b\\c] d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return callData;\n    }\n    return callData(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  /** @type {string} */\n  let identifier;\n  let size = 0;\n  /** @type {boolean | undefined} */\n  let data;\n  return start;\n\n  /**\n   * Start of GFM footnote definition.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true;\n    effects.enter('gfmFootnoteDefinitionLabel');\n    effects.enter('gfmFootnoteDefinitionLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteDefinitionLabelMarker');\n    return labelAtMarker;\n  }\n\n  /**\n   * In label, at caret.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAtMarker(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteDefinitionMarker');\n      effects.enter('gfmFootnoteDefinitionLabelString');\n      effects.enter('chunkString').contentType = 'string';\n      return labelInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label.\n   *\n   * > 👉 **Note**: `cmark-gfm` prevents whitespace from occurring in footnote\n   * > definition labels.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n    // Too long.\n    size > 999 ||\n    // Closing brace with nothing.\n    code === 93 && !data ||\n    // Space or tab is not supported by GFM for some reason.\n    // `\\n` and `[` not being supported makes sense.\n    code === null || code === 91 || markdownLineEndingOrSpace(code)) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit('chunkString');\n      const token = effects.exit('gfmFootnoteDefinitionLabelString');\n      identifier = normalizeIdentifier(self.sliceSerialize(token));\n      effects.enter('gfmFootnoteDefinitionLabelMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteDefinitionLabelMarker');\n      effects.exit('gfmFootnoteDefinitionLabel');\n      return labelAfter;\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true;\n    }\n    size++;\n    effects.consume(code);\n    return code === 92 ? labelEscape : labelInside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * > 👉 **Note**: `cmark-gfm` currently does not support escaped brackets:\n   * > <https://github.com/github/cmark-gfm/issues/240>\n   *\n   * ```markdown\n   * > | [^a\\*b]: c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code);\n  }\n\n  /**\n   * After definition label.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker');\n      effects.consume(code);\n      effects.exit('definitionMarker');\n      if (!defined.includes(identifier)) {\n        defined.push(identifier);\n      }\n\n      // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n      return factorySpace(effects, whitespaceAfter, 'gfmFootnoteDefinitionWhitespace');\n    }\n    return nok(code);\n  }\n\n  /**\n   * After definition prefix.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function whitespaceAfter(code) {\n    // `markdown-rs` has a wrapping token for the prefix that is closed here.\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  /// Start of footnote definition continuation.\n  ///\n  /// ```markdown\n  ///   | [^a]: b\n  /// > |     c\n  ///     ^\n  /// ```\n  //\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok));\n}\n\n/** @type {Exiter} */\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition');\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, 'gfmFootnoteDefinitionIndent', 4 + 1);\n\n  /**\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === 'gfmFootnoteDefinitionIndent' && tail[2].sliceSerialize(tail[1], true).length === 4 ? ok(code) : nok(code);\n  }\n}","/**\n * @import {Options} from 'micromark-extension-gfm-strikethrough'\n * @import {Event, Extension, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/**\n * Create an extension for `micromark` to enable GFM strikethrough syntax.\n *\n * @param {Options | null | undefined} [options={}]\n *   Configuration.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions`, to\n *   enable GFM strikethrough syntax.\n */\nexport function gfmStrikethrough(options) {\n  const options_ = options || {};\n  let single = options_.singleTilde;\n  const tokenizer = {\n    name: 'strikethrough',\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  };\n  if (single === null || single === undefined) {\n    single = true;\n  }\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  };\n\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n  function resolveAllStrikethrough(events, context) {\n    let index = -1;\n\n    // Walk through all events.\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (events[index][0] === 'enter' && events[index][1].type === 'strikethroughSequenceTemporary' && events[index][1]._close) {\n        let open = index;\n\n        // Now walk back to find an opener.\n        while (open--) {\n          // Find a token that can open the closer.\n          if (events[open][0] === 'exit' && events[open][1].type === 'strikethroughSequenceTemporary' && events[open][1]._open &&\n          // If the sizes are the same:\n          events[index][1].end.offset - events[index][1].start.offset === events[open][1].end.offset - events[open][1].start.offset) {\n            events[index][1].type = 'strikethroughSequence';\n            events[open][1].type = 'strikethroughSequence';\n\n            /** @type {Token} */\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            };\n\n            /** @type {Token} */\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            };\n\n            // Opening.\n            /** @type {Array<Event>} */\n            const nextEvents = [['enter', strikethrough, context], ['enter', events[open][1], context], ['exit', events[open][1], context], ['enter', text, context]];\n            const insideSpan = context.parser.constructs.insideSpan.null;\n            if (insideSpan) {\n              // Between.\n              splice(nextEvents, nextEvents.length, 0, resolveAll(insideSpan, events.slice(open + 1, index), context));\n            }\n\n            // Closing.\n            splice(nextEvents, nextEvents.length, 0, [['exit', text, context], ['enter', events[index][1], context], ['exit', events[index][1], context], ['exit', strikethrough, context]]);\n            splice(events, open - 1, index - open + 3, nextEvents);\n            index = open + nextEvents.length - 2;\n            break;\n          }\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = \"data\";\n      }\n    }\n    return events;\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous;\n    const events = this.events;\n    let size = 0;\n    return start;\n\n    /** @type {State} */\n    function start(code) {\n      if (previous === 126 && events[events.length - 1][1].type !== \"characterEscape\") {\n        return nok(code);\n      }\n      effects.enter('strikethroughSequenceTemporary');\n      return more(code);\n    }\n\n    /** @type {State} */\n    function more(code) {\n      const before = classifyCharacter(previous);\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code);\n        effects.consume(code);\n        size++;\n        return more;\n      }\n      if (size < 2 && !single) return nok(code);\n      const token = effects.exit('strikethroughSequenceTemporary');\n      const after = classifyCharacter(code);\n      token._open = !after || after === 2 && Boolean(before);\n      token._close = !before || before === 2 && Boolean(after);\n      return ok(code);\n    }\n  }\n}","/**\n * @import {Event} from 'micromark-util-types'\n */\n\n// Port of `edit_map.rs` from `markdown-rs`.\n// This should move to `markdown-js` later.\n\n// Deal with several changes in events, batching them together.\n//\n// Preferably, changes should be kept to a minimum.\n// Sometimes, it’s needed to change the list of events, because parsing can be\n// messy, and it helps to expose a cleaner interface of events to the compiler\n// and other users.\n// It can also help to merge many adjacent similar events.\n// And, in other cases, it’s needed to parse subcontent: pass some events\n// through another tokenizer and inject the result.\n\n/**\n * @typedef {[number, number, Array<Event>]} Change\n * @typedef {[number, number, number]} Jump\n */\n\n/**\n * Tracks a bunch of edits.\n */\nexport class EditMap {\n  /**\n   * Create a new edit map.\n   */\n  constructor() {\n    /**\n     * Record of changes.\n     *\n     * @type {Array<Change>}\n     */\n    this.map = [];\n  }\n\n  /**\n   * Create an edit: a remove and/or add at a certain place.\n   *\n   * @param {number} index\n   * @param {number} remove\n   * @param {Array<Event>} add\n   * @returns {undefined}\n   */\n  add(index, remove, add) {\n    addImplementation(this, index, remove, add);\n  }\n\n  // To do: add this when moving to `micromark`.\n  // /**\n  //  * Create an edit: but insert `add` before existing additions.\n  //  *\n  //  * @param {number} index\n  //  * @param {number} remove\n  //  * @param {Array<Event>} add\n  //  * @returns {undefined}\n  //  */\n  // addBefore(index, remove, add) {\n  //   addImplementation(this, index, remove, add, true)\n  // }\n\n  /**\n   * Done, change the events.\n   *\n   * @param {Array<Event>} events\n   * @returns {undefined}\n   */\n  consume(events) {\n    this.map.sort(function (a, b) {\n      return a[0] - b[0];\n    });\n\n    /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n    if (this.map.length === 0) {\n      return;\n    }\n\n    // To do: if links are added in events, like they are in `markdown-rs`,\n    // this is needed.\n    // // Calculate jumps: where items in the current list move to.\n    // /** @type {Array<Jump>} */\n    // const jumps = []\n    // let index = 0\n    // let addAcc = 0\n    // let removeAcc = 0\n    // while (index < this.map.length) {\n    //   const [at, remove, add] = this.map[index]\n    //   removeAcc += remove\n    //   addAcc += add.length\n    //   jumps.push([at, removeAcc, addAcc])\n    //   index += 1\n    // }\n    //\n    // . shiftLinks(events, jumps)\n\n    let index = this.map.length;\n    /** @type {Array<Array<Event>>} */\n    const vecs = [];\n    while (index > 0) {\n      index -= 1;\n      vecs.push(events.slice(this.map[index][0] + this.map[index][1]), this.map[index][2]);\n\n      // Truncate rest.\n      events.length = this.map[index][0];\n    }\n    vecs.push([...events]);\n    events.length = 0;\n    let slice = vecs.pop();\n    while (slice) {\n      events.push(...slice);\n      slice = vecs.pop();\n    }\n\n    // Truncate everything.\n    this.map.length = 0;\n  }\n}\n\n/**\n * Create an edit.\n *\n * @param {EditMap} editMap\n * @param {number} at\n * @param {number} remove\n * @param {Array<Event>} add\n * @returns {undefined}\n */\nfunction addImplementation(editMap, at, remove, add) {\n  let index = 0;\n\n  /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n  if (remove === 0 && add.length === 0) {\n    return;\n  }\n  while (index < editMap.map.length) {\n    if (editMap.map[index][0] === at) {\n      editMap.map[index][1] += remove;\n\n      // To do: before not used by tables, use when moving to micromark.\n      // if (before) {\n      //   add.push(...editMap.map[index][2])\n      //   editMap.map[index][2] = add\n      // } else {\n      editMap.map[index][2].push(...add);\n      // }\n\n      return;\n    }\n    index += 1;\n  }\n  editMap.map.push([at, remove, add]);\n}\n\n// /**\n//  * Shift `previous` and `next` links according to `jumps`.\n//  *\n//  * This fixes links in case there are events removed or added between them.\n//  *\n//  * @param {Array<Event>} events\n//  * @param {Array<Jump>} jumps\n//  */\n// function shiftLinks(events, jumps) {\n//   let jumpIndex = 0\n//   let index = 0\n//   let add = 0\n//   let rm = 0\n\n//   while (index < events.length) {\n//     const rmCurr = rm\n\n//     while (jumpIndex < jumps.length && jumps[jumpIndex][0] <= index) {\n//       add = jumps[jumpIndex][2]\n//       rm = jumps[jumpIndex][1]\n//       jumpIndex += 1\n//     }\n\n//     // Ignore items that will be removed.\n//     if (rm > rmCurr) {\n//       index += rm - rmCurr\n//     } else {\n//       // ?\n//       // if let Some(link) = &events[index].link {\n//       //     if let Some(next) = link.next {\n//       //         events[next].link.as_mut().unwrap().previous = Some(index + add - rm);\n//       //         while jumpIndex < jumps.len() && jumps[jumpIndex].0 <= next {\n//       //             add = jumps[jumpIndex].2;\n//       //             rm = jumps[jumpIndex].1;\n//       //             jumpIndex += 1;\n//       //         }\n//       //         events[index].link.as_mut().unwrap().next = Some(next + add - rm);\n//       //         index = next;\n//       //         continue;\n//       //     }\n//       // }\n//       index += 1\n//     }\n//   }\n// }","/**\n * @import {Event} from 'micromark-util-types'\n */\n\n/**\n * @typedef {'center' | 'left' | 'none' | 'right'} Align\n */\n\n/**\n * Figure out the alignment of a GFM table.\n *\n * @param {Readonly<Array<Event>>} events\n *   List of events.\n * @param {number} index\n *   Table enter event.\n * @returns {Array<Align>}\n *   List of aligns.\n */\nexport function gfmTableAlign(events, index) {\n  let inDelimiterRow = false;\n  /** @type {Array<Align>} */\n  const align = [];\n  while (index < events.length) {\n    const event = events[index];\n    if (inDelimiterRow) {\n      if (event[0] === 'enter') {\n        // Start of alignment value: set a new column.\n        // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n        if (event[1].type === 'tableContent') {\n          align.push(events[index + 1][1].type === 'tableDelimiterMarker' ? 'left' : 'none');\n        }\n      }\n      // Exits:\n      // End of alignment value: change the column.\n      // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n      else if (event[1].type === 'tableContent') {\n        if (events[index - 1][1].type === 'tableDelimiterMarker') {\n          const alignIndex = align.length - 1;\n          align[alignIndex] = align[alignIndex] === 'left' ? 'center' : 'right';\n        }\n      }\n      // Done!\n      else if (event[1].type === 'tableDelimiterRow') {\n        break;\n      }\n    } else if (event[0] === 'enter' && event[1].type === 'tableDelimiterRow') {\n      inDelimiterRow = true;\n    }\n    index += 1;\n  }\n  return align;\n}","/**\n * @import {Event, Extension, Point, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\n/**\n * @typedef {[number, number, number, number]} Range\n *   Cell info.\n *\n * @typedef {0 | 1 | 2 | 3} RowKind\n *   Where we are: `1` for head row, `2` for delimiter row, `3` for body row.\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { EditMap } from './edit-map.js';\nimport { gfmTableAlign } from './infer.js';\n\n/**\n * Create an HTML extension for `micromark` to support GitHub tables syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   table syntax.\n */\nexport function gfmTable() {\n  return {\n    flow: {\n      null: {\n        name: 'table',\n        tokenize: tokenizeTable,\n        resolveAll: resolveTable\n      }\n    }\n  };\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTable(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  let sizeB = 0;\n  /** @type {boolean | undefined} */\n  let seen;\n  return start;\n\n  /**\n   * Start of a GFM table.\n   *\n   * If there is a valid table row or table head before, then we try to parse\n   * another row.\n   * Otherwise, we try to parse a head.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length - 1;\n    while (index > -1) {\n      const type = self.events[index][1].type;\n      if (type === \"lineEnding\" ||\n      // Note: markdown-rs uses `whitespace` instead of `linePrefix`\n      type === \"linePrefix\") index--;else break;\n    }\n    const tail = index > -1 ? self.events[index][1].type : null;\n    const next = tail === 'tableHead' || tail === 'tableRow' ? bodyRowStart : headRowBefore;\n\n    // Don’t allow lazy body rows.\n    if (next === bodyRowStart && self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    return next(code);\n  }\n\n  /**\n   * Before table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBefore(code) {\n    effects.enter('tableHead');\n    effects.enter('tableRow');\n    return headRowStart(code);\n  }\n\n  /**\n   * Before table head row, after whitespace.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowStart(code) {\n    if (code === 124) {\n      return headRowBreak(code);\n    }\n\n    // To do: micromark-js should let us parse our own whitespace in extensions,\n    // like `markdown-rs`:\n    //\n    // ```js\n    // // 4+ spaces.\n    // if (markdownSpace(code)) {\n    //   return nok(code)\n    // }\n    // ```\n\n    seen = true;\n    // Count the first character, that isn’t a pipe, double.\n    sizeB += 1;\n    return headRowBreak(code);\n  }\n\n  /**\n   * At break in table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *       ^\n   *         ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBreak(code) {\n    if (code === null) {\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      // If anything other than one pipe (ignoring whitespace) was used, it’s fine.\n      if (sizeB > 1) {\n        sizeB = 0;\n        // To do: check if this works.\n        // Feel free to interrupt:\n        self.interrupt = true;\n        effects.exit('tableRow');\n        effects.enter(\"lineEnding\");\n        effects.consume(code);\n        effects.exit(\"lineEnding\");\n        return headDelimiterStart;\n      }\n\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code);\n    }\n    if (markdownSpace(code)) {\n      // To do: check if this is fine.\n      // effects.attempt(State::Next(StateName::GfmTableHeadRowBreak), State::Nok)\n      // State::Retry(space_or_tab(tokenizer))\n      return factorySpace(effects, headRowBreak, \"whitespace\")(code);\n    }\n    sizeB += 1;\n    if (seen) {\n      seen = false;\n      // Header cell count.\n      size += 1;\n    }\n    if (code === 124) {\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      // Whether a delimiter was seen.\n      seen = true;\n      return headRowBreak;\n    }\n\n    // Anything else is cell data.\n    effects.enter(\"data\");\n    return headRowData(code);\n  }\n\n  /**\n   * In table head row data.\n   *\n   * ```markdown\n   * > | | a |\n   *       ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"data\");\n      return headRowBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? headRowEscape : headRowData;\n  }\n\n  /**\n   * In table head row escape.\n   *\n   * ```markdown\n   * > | | a\\-b |\n   *         ^\n   *   | | ---- |\n   *   | | c    |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code);\n      return headRowData;\n    }\n    return headRowData(code);\n  }\n\n  /**\n   * Before delimiter row.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterStart(code) {\n    // Reset `interrupt`.\n    self.interrupt = false;\n\n    // Note: in `markdown-rs`, we need to handle piercing here too.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    effects.enter('tableDelimiterRow');\n    // Track if we’ve seen a `:` or `|`.\n    seen = false;\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return headDelimiterBefore(code);\n  }\n\n  /**\n   * Before delimiter row, after optional whitespace.\n   *\n   * Reused when a `|` is found later, to parse another cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterBefore(code) {\n    if (code === 45 || code === 58) {\n      return headDelimiterValueBefore(code);\n    }\n    if (code === 124) {\n      seen = true;\n      // If we start with a pipe, we open a cell marker.\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      return headDelimiterCellBefore;\n    }\n\n    // More whitespace / empty row not allowed at start.\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * After `|`, before delimiter cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellBefore(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterValueBefore, \"whitespace\")(code);\n    }\n    return headDelimiterValueBefore(code);\n  }\n\n  /**\n   * Before delimiter cell value.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterValueBefore(code) {\n    // Align: left.\n    if (code === 58) {\n      sizeB += 1;\n      seen = true;\n      effects.enter('tableDelimiterMarker');\n      effects.consume(code);\n      effects.exit('tableDelimiterMarker');\n      return headDelimiterLeftAlignmentAfter;\n    }\n\n    // Align: none.\n    if (code === 45) {\n      sizeB += 1;\n      // To do: seems weird that this *isn’t* left aligned, but that state is used?\n      return headDelimiterLeftAlignmentAfter(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return headDelimiterCellAfter(code);\n    }\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * After delimiter cell left alignment marker.\n   *\n   * ```markdown\n   *   | | a  |\n   * > | | :- |\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterLeftAlignmentAfter(code) {\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller');\n      return headDelimiterFiller(code);\n    }\n\n    // Anything else is not ok after the left-align colon.\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * In delimiter cell filler.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterFiller(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return headDelimiterFiller;\n    }\n\n    // Align is `center` if it was `left`, `right` otherwise.\n    if (code === 58) {\n      seen = true;\n      effects.exit('tableDelimiterFiller');\n      effects.enter('tableDelimiterMarker');\n      effects.consume(code);\n      effects.exit('tableDelimiterMarker');\n      return headDelimiterRightAlignmentAfter;\n    }\n    effects.exit('tableDelimiterFiller');\n    return headDelimiterRightAlignmentAfter(code);\n  }\n\n  /**\n   * After delimiter cell right alignment marker.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterRightAlignmentAfter(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterCellAfter, \"whitespace\")(code);\n    }\n    return headDelimiterCellAfter(code);\n  }\n\n  /**\n   * After delimiter cell.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellAfter(code) {\n    if (code === 124) {\n      return headDelimiterBefore(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      // Exit when:\n      // * there was no `:` or `|` at all (it’s a thematic break or setext\n      //   underline instead)\n      // * the header cell count is not the delimiter cell count\n      if (!seen || size !== sizeB) {\n        return headDelimiterNok(code);\n      }\n\n      // Note: in markdown-rs`, a reset is needed here.\n      effects.exit('tableDelimiterRow');\n      effects.exit('tableHead');\n      // To do: in `markdown-rs`, resolvers need to be registered manually.\n      // effects.register_resolver(ResolveName::GfmTable)\n      return ok(code);\n    }\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * In delimiter row, at a disallowed byte.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | x |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterNok(code) {\n    // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n    return nok(code);\n  }\n\n  /**\n   * Before table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowStart(code) {\n    // Note: in `markdown-rs` we need to manually take care of a prefix,\n    // but in `micromark-js` that is done for us, so if we’re here, we’re\n    // never at whitespace.\n    effects.enter('tableRow');\n    return bodyRowBreak(code);\n  }\n\n  /**\n   * At break in table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   *       ^\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowBreak(code) {\n    if (code === 124) {\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      return bodyRowBreak;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('tableRow');\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, bodyRowBreak, \"whitespace\")(code);\n    }\n\n    // Anything else is cell content.\n    effects.enter(\"data\");\n    return bodyRowData(code);\n  }\n\n  /**\n   * In table body row data.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"data\");\n      return bodyRowBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? bodyRowEscape : bodyRowData;\n  }\n\n  /**\n   * In table body row escape.\n   *\n   * ```markdown\n   *   | | a    |\n   *   | | ---- |\n   * > | | b\\-c |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code);\n      return bodyRowData;\n    }\n    return bodyRowData(code);\n  }\n}\n\n/** @type {Resolver} */\n\nfunction resolveTable(events, context) {\n  let index = -1;\n  let inFirstCellAwaitingPipe = true;\n  /** @type {RowKind} */\n  let rowKind = 0;\n  /** @type {Range} */\n  let lastCell = [0, 0, 0, 0];\n  /** @type {Range} */\n  let cell = [0, 0, 0, 0];\n  let afterHeadAwaitingFirstBodyRow = false;\n  let lastTableEnd = 0;\n  /** @type {Token | undefined} */\n  let currentTable;\n  /** @type {Token | undefined} */\n  let currentBody;\n  /** @type {Token | undefined} */\n  let currentCell;\n  const map = new EditMap();\n  while (++index < events.length) {\n    const event = events[index];\n    const token = event[1];\n    if (event[0] === 'enter') {\n      // Start of head.\n      if (token.type === 'tableHead') {\n        afterHeadAwaitingFirstBodyRow = false;\n\n        // Inject previous (body end and) table end.\n        if (lastTableEnd !== 0) {\n          flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);\n          currentBody = undefined;\n          lastTableEnd = 0;\n        }\n\n        // Inject table start.\n        currentTable = {\n          type: 'table',\n          start: Object.assign({}, token.start),\n          // Note: correct end is set later.\n          end: Object.assign({}, token.end)\n        };\n        map.add(index, 0, [['enter', currentTable, context]]);\n      } else if (token.type === 'tableRow' || token.type === 'tableDelimiterRow') {\n        inFirstCellAwaitingPipe = true;\n        currentCell = undefined;\n        lastCell = [0, 0, 0, 0];\n        cell = [0, index + 1, 0, 0];\n\n        // Inject table body start.\n        if (afterHeadAwaitingFirstBodyRow) {\n          afterHeadAwaitingFirstBodyRow = false;\n          currentBody = {\n            type: 'tableBody',\n            start: Object.assign({}, token.start),\n            // Note: correct end is set later.\n            end: Object.assign({}, token.end)\n          };\n          map.add(index, 0, [['enter', currentBody, context]]);\n        }\n        rowKind = token.type === 'tableDelimiterRow' ? 2 : currentBody ? 3 : 1;\n      }\n      // Cell data.\n      else if (rowKind && (token.type === \"data\" || token.type === 'tableDelimiterMarker' || token.type === 'tableDelimiterFiller')) {\n        inFirstCellAwaitingPipe = false;\n\n        // First value in cell.\n        if (cell[2] === 0) {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1];\n            currentCell = flushCell(map, context, lastCell, rowKind, undefined, currentCell);\n            lastCell = [0, 0, 0, 0];\n          }\n          cell[2] = index;\n        }\n      } else if (token.type === 'tableCellDivider') {\n        if (inFirstCellAwaitingPipe) {\n          inFirstCellAwaitingPipe = false;\n        } else {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1];\n            currentCell = flushCell(map, context, lastCell, rowKind, undefined, currentCell);\n          }\n          lastCell = cell;\n          cell = [lastCell[1], index, 0, 0];\n        }\n      }\n    }\n    // Exit events.\n    else if (token.type === 'tableHead') {\n      afterHeadAwaitingFirstBodyRow = true;\n      lastTableEnd = index;\n    } else if (token.type === 'tableRow' || token.type === 'tableDelimiterRow') {\n      lastTableEnd = index;\n      if (lastCell[1] !== 0) {\n        cell[0] = cell[1];\n        currentCell = flushCell(map, context, lastCell, rowKind, index, currentCell);\n      } else if (cell[1] !== 0) {\n        currentCell = flushCell(map, context, cell, rowKind, index, currentCell);\n      }\n      rowKind = 0;\n    } else if (rowKind && (token.type === \"data\" || token.type === 'tableDelimiterMarker' || token.type === 'tableDelimiterFiller')) {\n      cell[3] = index;\n    }\n  }\n  if (lastTableEnd !== 0) {\n    flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);\n  }\n  map.consume(context.events);\n\n  // To do: move this into `html`, when events are exposed there.\n  // That’s what `markdown-rs` does.\n  // That needs updates to `mdast-util-gfm-table`.\n  index = -1;\n  while (++index < context.events.length) {\n    const event = context.events[index];\n    if (event[0] === 'enter' && event[1].type === 'table') {\n      event[1]._align = gfmTableAlign(context.events, index);\n    }\n  }\n  return events;\n}\n\n/**\n * Generate a cell.\n *\n * @param {EditMap} map\n * @param {Readonly<TokenizeContext>} context\n * @param {Readonly<Range>} range\n * @param {RowKind} rowKind\n * @param {number | undefined} rowEnd\n * @param {Token | undefined} previousCell\n * @returns {Token | undefined}\n */\n// eslint-disable-next-line max-params\nfunction flushCell(map, context, range, rowKind, rowEnd, previousCell) {\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCell' : 'tableCell'\n  const groupName = rowKind === 1 ? 'tableHeader' : rowKind === 2 ? 'tableDelimiter' : 'tableData';\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCellValue' : 'tableCellText'\n  const valueName = 'tableContent';\n\n  // Insert an exit for the previous cell, if there is one.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //          ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[0] !== 0) {\n    previousCell.end = Object.assign({}, getPoint(context.events, range[0]));\n    map.add(range[0], 0, [['exit', previousCell, context]]);\n  }\n\n  // Insert enter of this cell.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //           ^-- enter\n  //           ^^^^-- this cell\n  // ```\n  const now = getPoint(context.events, range[1]);\n  previousCell = {\n    type: groupName,\n    start: Object.assign({}, now),\n    // Note: correct end is set later.\n    end: Object.assign({}, now)\n  };\n  map.add(range[1], 0, [['enter', previousCell, context]]);\n\n  // Insert text start at first data start and end at last data end, and\n  // remove events between.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //            ^-- enter\n  //             ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[2] !== 0) {\n    const relatedStart = getPoint(context.events, range[2]);\n    const relatedEnd = getPoint(context.events, range[3]);\n    /** @type {Token} */\n    const valueToken = {\n      type: valueName,\n      start: Object.assign({}, relatedStart),\n      end: Object.assign({}, relatedEnd)\n    };\n    map.add(range[2], 0, [['enter', valueToken, context]]);\n    if (rowKind !== 2) {\n      // Fix positional info on remaining events\n      const start = context.events[range[2]];\n      const end = context.events[range[3]];\n      start[1].end = Object.assign({}, end[1].end);\n      start[1].type = \"chunkText\";\n      start[1].contentType = \"text\";\n\n      // Remove if needed.\n      if (range[3] > range[2] + 1) {\n        const a = range[2] + 1;\n        const b = range[3] - range[2] - 1;\n        map.add(a, b, []);\n      }\n    }\n    map.add(range[3] + 1, 0, [['exit', valueToken, context]]);\n  }\n\n  // Insert an exit for the last cell, if at the row end.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //                    ^-- exit\n  //               ^^^^^^-- this cell (the last one contains two “between” parts)\n  // ```\n  if (rowEnd !== undefined) {\n    previousCell.end = Object.assign({}, getPoint(context.events, rowEnd));\n    map.add(rowEnd, 0, [['exit', previousCell, context]]);\n    previousCell = undefined;\n  }\n  return previousCell;\n}\n\n/**\n * Generate table end (and table body end).\n *\n * @param {Readonly<EditMap>} map\n * @param {Readonly<TokenizeContext>} context\n * @param {number} index\n * @param {Token} table\n * @param {Token | undefined} tableBody\n */\n// eslint-disable-next-line max-params\nfunction flushTableEnd(map, context, index, table, tableBody) {\n  /** @type {Array<Event>} */\n  const exits = [];\n  const related = getPoint(context.events, index);\n  if (tableBody) {\n    tableBody.end = Object.assign({}, related);\n    exits.push(['exit', tableBody, context]);\n  }\n  table.end = Object.assign({}, related);\n  exits.push(['exit', table, context]);\n  map.add(index + 1, 0, exits);\n}\n\n/**\n * @param {Readonly<Array<Event>>} events\n * @param {number} index\n * @returns {Readonly<Point>}\n */\nfunction getPoint(events, index) {\n  const event = events[index];\n  const side = event[0] === 'enter' ? 'start' : 'end';\n  return event[1][side];\n}","/**\n * @import {Extension, State, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nconst tasklistCheck = {\n  name: 'tasklistCheck',\n  tokenize: tokenizeTasklistCheck\n};\n\n/**\n * Create an HTML extension for `micromark` to support GFM task list items\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM task list items when serializing to HTML.\n */\nexport function gfmTaskListItem() {\n  return {\n    text: {\n      [91]: tasklistCheck\n    }\n  };\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this;\n  return open;\n\n  /**\n   * At start of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (\n    // Exit if there’s stuff before.\n    self.previous !== null ||\n    // Exit if not in the first content that is the first child of a list\n    // item.\n    !self._gfmTasklistFirstContentOfListItem) {\n      return nok(code);\n    }\n    effects.enter('taskListCheck');\n    effects.enter('taskListCheckMarker');\n    effects.consume(code);\n    effects.exit('taskListCheckMarker');\n    return inside;\n  }\n\n  /**\n   * In task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // Currently we match how GH works in files.\n    // To match how GH works in comments, use `markdownSpace` (`[\\t ]`) instead\n    // of `markdownLineEndingOrSpace` (`[\\t\\n\\r ]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueUnchecked');\n      return close;\n    }\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueChecked');\n      return close;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At close of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function close(code) {\n    if (code === 93) {\n      effects.enter('taskListCheckMarker');\n      effects.consume(code);\n      effects.exit('taskListCheckMarker');\n      effects.exit('taskListCheck');\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   */\n  function after(code) {\n    // EOL in paragraph means there must be something else after it.\n    if (markdownLineEnding(code)) {\n      return ok(code);\n    }\n\n    // Space or tab?\n    // Check what comes after.\n    if (markdownSpace(code)) {\n      return effects.check({\n        tokenize: spaceThenNonSpace\n      }, ok, nok)(code);\n    }\n\n    // EOF, or non-whitespace, both wrong.\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction spaceThenNonSpace(effects, ok, nok) {\n  return factorySpace(effects, after, \"whitespace\");\n\n  /**\n   * After whitespace, after task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // EOF means there was nothing, so bad.\n    // EOL means there’s content after it, so good.\n    // Impossible to have more spaces.\n    // Anything else is good.\n    return code === null ? nok(code) : ok(code);\n  }\n}","/**\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {\n  combineExtensions,\n  combineHtmlExtensions\n} from 'micromark-util-combine-extensions'\nimport {\n  gfmAutolinkLiteral,\n  gfmAutolinkLiteralHtml\n} from 'micromark-extension-gfm-autolink-literal'\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\nimport {\n  gfmStrikethrough,\n  gfmStrikethroughHtml\n} from 'micromark-extension-gfm-strikethrough'\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\nimport {\n  gfmTaskListItem,\n  gfmTaskListItemHtml\n} from 'micromark-extension-gfm-task-list-item'\n\n/**\n * Create an extension for `micromark` to enable GFM syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-strikethrough`.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   syntax.\n */\nexport function gfm(options) {\n  return combineExtensions([\n    gfmAutolinkLiteral(),\n    gfmFootnote(),\n    gfmStrikethrough(options),\n    gfmTable(),\n    gfmTaskListItem()\n  ])\n}\n\n/**\n * Create an extension for `micromark` to support GFM when serializing to HTML.\n *\n * @param {HtmlOptions | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-footnote`.\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM when serializing to HTML.\n */\nexport function gfmHtml(options) {\n  return combineHtmlExtensions([\n    gfmAutolinkLiteralHtml(),\n    gfmFootnoteHtml(options),\n    gfmStrikethroughHtml(),\n    gfmTableHtml(),\n    gfmTagfilterHtml(),\n    gfmTaskListItemHtml()\n  ])\n}\n","/// <reference types=\"remark-parse\" />\n/// <reference types=\"remark-stringify\" />\n\n/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-gfm').Options} MdastOptions\n * @typedef {import('micromark-extension-gfm').Options} MicromarkOptions\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {MicromarkOptions & MdastOptions} Options\n *   Configuration.\n */\n\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\nimport {gfm} from 'micromark-extension-gfm'\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Add support GFM (autolink literals, footnotes, strikethrough, tables,\n * tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkGfm(options) {\n  // @ts-expect-error: TS is wrong about `this`.\n  // eslint-disable-next-line unicorn/no-this-assignment\n  const self = /** @type {Processor} */ (this)\n  const settings = options || emptyOptions\n  const data = self.data()\n\n  const micromarkExtensions =\n    data.micromarkExtensions || (data.micromarkExtensions = [])\n  const fromMarkdownExtensions =\n    data.fromMarkdownExtensions || (data.fromMarkdownExtensions = [])\n  const toMarkdownExtensions =\n    data.toMarkdownExtensions || (data.toMarkdownExtensions = [])\n\n  micromarkExtensions.push(gfm(settings))\n  fromMarkdownExtensions.push(gfmFromMarkdown())\n  toMarkdownExtensions.push(gfmToMarkdown(settings))\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @param {string} d\n * @returns {string}\n */\nexport function color(d) {\n  return d\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n"],"names":["XHTMLEntities","__webpack_require__","hexNumber","decimalNumber","acornJsxMap","WeakMap","getJsxTokens","acorn","Parser","acornJsx","get","tt","tokTypes","TokContext","TokenType","tc_oTag","tc_cTag","tc_expr","jsxName","jsxText","beforeExpr","jsxTagStart","startsExpr","jsxTagEnd","updateContext","context","push","exprAllowed","prevType","out","pop","slash","curContext","tokContexts","set","getQualifiedJSXName","object","type","name","namespace","property","module","exports","options","plugin","tok","isNewLine","isIdentifierStart","isIdentifierChar","jsx_readToken","chunkStart","pos","input","length","raise","start","ch","charCodeAt","finishToken","getTokenFromCode","slice","jsx_readEntity","jsx_readNewLine","normalizeCRLF","String","fromCharCode","locations","curLine","lineStart","jsx_readString","quote","string","str","count","entity","startPos","substr","test","parseInt","jsx_readWord","jsx_parseIdentifier","node","startNode","value","keyword","unexpected","next","finishNode","jsx_parseNamespacedName","startLoc","allowNamespaces","eat","colon","startNodeAt","jsx_parseElementName","dot","allowNamespacedObjects","newNode","jsx_parseAttributeValue","braceL","jsx_parseExpressionContainer","expression","parseExprAtom","jsx_parseEmptyExpression","lastTokEnd","lastTokEndLoc","finishNodeAt","braceR","parseExpression","expect","jsx_parseAttribute","ellipsis","argument","parseMaybeAssign","eq","jsx_parseOpeningElementAt","attributes","nodeName","selfClosing","jsx_parseClosingElementAt","jsx_parseElementAt","children","openingElement","closingElement","contents","fragmentOrElement","relational","jsx_parseText","parseLiteral","jsx_parseElement","refShortHandDefaultPos","readToken","code","b_expr","b_tmpl","Object","defineProperty","configurable","enumerable","quot","amp","apos","lt","gt","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","tilde","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","empty","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","prop","infin","ang","and","or","cap","cup","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","colorConvert","wrapAnsi16","fn","offset","apply","arguments","wrapAnsi256","wrapAnsi16m","rgb","codes","Map","styles","modifier","reset","bold","dim","italic","underline","inverse","hidden","strikethrough","color","black","red","green","yellow","blue","magenta","cyan","white","gray","redBright","greenBright","yellowBright","blueBright","magentaBright","cyanBright","whiteBright","bgColor","bgBlack","bgRed","bgGreen","bgYellow","bgBlue","bgMagenta","bgCyan","bgWhite","bgBlackBright","bgRedBright","bgGreenBright","bgYellowBright","bgBlueBright","bgMagentaBright","bgCyanBright","bgWhiteBright","groupName","grey","keys","group","styleName","style","open","close","ansi2ansi","n","rgb2rgb","r","g","b","key","ansi","ansi256","ansi16m","suite","ansi16","escapeStringRegexp","ansiStyles","stdoutColor","stdout","template","isSimpleWindowsTerm","process","platform","env","TERM","toLowerCase","startsWith","levelMapping","skipModels","Set","create","applyOptions","obj","scLevel","level","undefined","enabled","Chalk","chalk","args","call","chalkTag","concat","setPrototypeOf","prototype","constructor","closeRe","build","_styles","_empty","model","visible","has","toUpperCase","proto","defineProperties","builder","applyStyle","self","hasGrey","__proto__","argsLen","a","originalDim","reverse","replace","strings","Array","isArray","join","parts","raw","i","supportsColor","TEMPLATE_REGEX","STYLE_REGEX","STRING_REGEX","ESCAPE_REGEX","ESCAPES","unescape","c","buildStyle","layer","current","tmp","chunks","chunk","m","escapeChar","chr","parseStyle","matches","lastIndex","results","exec","parseArguments","trim","split","isNaN","match","escape","Number","cssKeywords","reverseKeywords","hasOwnProperty","convert","channels","labels","hsl","hsv","hwb","cmyk","xyz","lab","lch","hex","hcg","apple","h","l","min","Math","max","s","rdif","gdif","bdif","v","diff","diffc","w","k","y","currentClosestKeyword","reversed","currentClosestDistance","Infinity","distance","pow","x","z","t1","t2","t3","val","smin","lmin","sv","f","floor","p","q","t","sl","vmin","wh","bl","ratio","y2","x2","z2","hr","atan2","PI","sqrt","cos","sin","round","mult","rem","integer","toString","substring","colorString","map","char","grayscale","chroma","hue","pure","hi","mg","conversions","route","models","forEach","fromModel","routes","routeModels","toModel","wrappedFn","result","len","conversion","graph","deriveBFS","buildGraph","parent","queue","adjacents","adjacent","unshift","wrapConversion","path","cur","link","from","to","Q","values","index","indexOf","end","matchOperatorsRe","hasOwn","toStr","gOPD","getOwnPropertyDescriptor","arr","isPlainObject","hasOwnConstructor","hasIsPrototypeOf","setProperty","target","newValue","writable","getProperty","extend","src","copyIsArray","clone","deep","selector","defaultTagName","subvalue","previous","props","search","id","className","tagName","properties","find","normalize","parseSelector","spaces","commas","schema","caseSensitive","adjust","createAdjustMap","own","addProperty","info","spaceSeparated","commaSeparated","commaOrSpaceSeparated","parsePrimitives","parsePrimitive","addChild","nodes","content","number","positiveNumber","boolean","overloadedBoolean","html","factory","displayName","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","lineno","column","updatePosition","lines","lastIndexOf","position","line","Position","source","errorsList","error","msg","err","reason","filename","silent","re","comments","rules","comment","FORWARD_SLASH","charAt","ASTERISK","EMPTY_STRING","declarations","decl","decls","declaration","ret","character","alphabetical","decimal","matchToToken","token","closed","_global_process","_global_process1","e","byteLength","getLens","toByteArray","o","u","fromByteArray","encodeChunk","Uint8Array","Symbol","for","createBuffer","Buffer","allocUnsafe","fromString","isEncoding","write","ArrayBuffer","isView","fromArrayLike","isInstance","buffer","SharedArrayBuffer","fromArrayBuffer","valueOf","fromObject","isBuffer","checked","data","toPrimitive","assertSize","utf8ToBytes","base64ToBytes","slowToString","hexSlice","utf8Slice","asciiSlice","latin1Slice","utf16leSlice","swap","bidirectionalIndexOf","arrayIndexOf","read","readUInt16BE","decodeCodePointsArray","checkOffset","checkInt","checkIEEE754","writeFloat","writeDouble","SlowBuffer","alloc","INSPECT_MAX_BYTES","kMaxLength","TYPED_ARRAY_SUPPORT","typedArraySupport","foo","console","byteOffset","poolSize","fill","allocUnsafeSlow","_isBuffer","compare","swap16","swap32","swap64","toLocaleString","equals","inspect","includes","isFinite","hexWrite","blitBuffer","asciiToBytes","utf16leToBytes","toJSON","_arr","subarray","readUIntLE","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","copyWithin","base64clean","NaN","abs","log","LN2","__nccwpck_require__","ab","__dirname","defaultSetTimout","defaultClearTimeout","runTimeout","setTimeout","clearTimeout","cleanUpNextTick","drainQueue","run","runClearTimeout","Item","fun","array","noop","nextTick","title","browser","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","umask","dynamic","dynamicOptions","mergedOptions","loadableOptions","loading","isLoading","pastDelay","param","loader","Loadable","modules","loadableGenerated","_bailouttocsr","require","BailoutToCSR","window","BailoutToCSRError","_default","convertModule","mod","default","hasDefault","defaultOptions","Promise","resolve","ssr","opts","Lazy","lazy","then","Loading","LoadableComponent","fallbackElement","_jsxruntime","jsx","jsxs","Fragment","PreloadCss","moduleIds","Suspense","fallback","_requestasyncstorageexternal","allFiles","getExpectedRequestStore","requestStore","manifest","reactLoadableManifest","cssFiles","file","rel","href","as","assetPrefix","encodeURI","el","characters","document","createElement","innerHTML","textContent","legacy","invalid","hexadecimal","alphanumerical","decodeEntity","option","settings","defaults","indent","parse","entityCharacters","namedEntity","terminated","reference","following","warning","output","begin","prev","additional","nonTerminated","handleText","text","handleReference","handleWarning","textContext","referenceContext","warningContext","now","messages","hexa","deci","tests","attribute","bases","flush","Function","isColorSupported","createColors","Prism","_self","uniqueId","plainTextGrammar","_","manual","disableWorkerMessageHandler","util","encode","tokens","Token","alias","objId","deepClone","visited","getLanguage","element","parentElement","setLanguage","language","RegExp","classList","add","currentScript","stack","scripts","getElementsByTagName","isActive","defaultActivation","no","contains","languages","plain","plaintext","txt","redef","insertBefore","inside","before","insert","root","grammar","newToken","old","DFS","callback","propertyType","plugins","highlightAll","async","highlightAllUnder","container","hooks","elements","querySelectorAll","highlightElement","insertHighlightedCode","highlightedCode","hasAttribute","setAttribute","Worker","worker","onmessage","evt","postMessage","JSON","stringify","immediateClose","highlight","tokenize","rest","tokenList","LinkedList","addAfter","head","matchGrammar","rematch","patterns","j","cause","patternObj","lookbehind","greedy","pattern","global","flags","currentNode","tail","reach","removeCount","matchPattern","matchStr","after","removeFrom","removeRange","list","nestedRematch","toArray","all","callbacks","matchedStr","lookbehindLength","tag","classes","aliases","addEventListener","message","script","highlightAutomaticallyCallback","readyState","defer","requestAnimationFrame","WorkerGlobalScope","DefinedInfo","Info","normal","Type","valid","dash","camelcase","kebab","$0","merge","xlink","xml","xmlns","aria","types","booleanish","transform","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDescribedBy","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","caseInsensitiveTransform","space","acceptcharset","classname","htmlfor","httpequiv","mustUseProperty","abbr","accept","acceptCharset","accessKey","action","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","alt","autoCapitalize","autoComplete","autoFocus","autoPlay","capture","charSet","cite","cols","colSpan","contentEditable","controls","controlsList","coords","crossOrigin","dateTime","decoding","dir","dirName","disabled","download","draggable","encType","enterKeyHint","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","high","hrefLang","htmlFor","httpEquiv","imageSizes","imageSrcSet","inputMode","integrity","is","isMap","itemId","itemProp","itemRef","itemScope","itemType","kind","label","loop","low","maxLength","media","method","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforePrint","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextMenu","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","optimum","ping","placeholder","playsInline","poster","preload","readOnly","referrerPolicy","required","rows","rowSpan","sandbox","scope","scoped","seamless","selected","shape","size","sizes","slot","span","spellCheck","srcDoc","srcLang","srcSet","step","tabIndex","translate","typeMustMatch","useMap","width","wrap","align","aLink","archive","axis","background","border","borderColor","bottomMargin","cellPadding","cellSpacing","charOff","classId","clear","codeBase","codeType","compact","declare","event","face","frame","frameBorder","hSpace","leftMargin","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","profile","prompt","rev","rightMargin","scheme","scrolling","standby","summary","topMargin","valueType","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","prefix","security","unselectable","caseSensitiveTransform","Schema","definition","defined","checks","checksLength","mask","check","xtend","definitions","powers","increment","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xmlLang","xmlBase","xmlSpace","xmlnsxlink","xmlnsXLink","_arrayLikeToArray","_typeof","iterator","_defineProperty","defaultAstGenerator","defaultStyle","_extends","assign","bind","ownKeys","enumerableOnly","getOwnPropertySymbols","symbols","filter","sym","_objectSpread","getOwnPropertyDescriptors","classNameCombinations","_excluded","highlight_ownKeys","highlight_objectSpread","newLineRegex","AllLineNumbers","_ref2","_ref","startingLineNumber","codeString","codeStyle","_ref2$containerStyle","containerStyle","_ref2$numberStyle","numberStyle","react","paddingRight","getInlineLineNumber","lineNumber","inlineLineNumberStyle","assembleLineNumberStyles","lineNumberStyle","largestLineNumber","defaultLineNumberStyle","display","minWidth","num","textAlign","userSelect","customLineNumberStyle","createLineElement","_ref3","showInlineLineNumbers","_ref3$lineProps","lineProps","_ref3$className","showLineNumbers","wrapLongLines","defaultRenderer","_ref5","stylesheet","useInlineStyles","_ref$style","TagName","childrenCount","childrenCreator","child","allStylesheetSelectors","reduce","startingClassName","createClassNameString","createStyleObject","classNames","elementStyle","classNamesCombinations","arrLength","styleObject","isHighlightJs","astGenerator","highlightAuto","highlighter","refractor_default","_ref7","_ref7$style","_ref7$customStyle","customStyle","_ref7$codeTagProps","codeTagProps","_ref7$useInlineStyles","_ref7$showLineNumbers","_ref7$showInlineLineN","_ref7$startingLineNum","lineNumberContainerStyle","_ref7$lineNumberStyle","wrapLines","_ref7$wrapLongLines","_ref7$lineProps","renderer","_ref7$PreTag","PreTag","_ref7$CodeTag","CodeTag","_ref7$code","_objectWithoutProperties","_objectWithoutPropertiesLoose","propertyIsEnumerable","allLineNumbers","defaultPreStyle","hljs","backgroundColor","generatorClassName","preProps","whiteSpace","defaultCodeValue","codeTree","getCodeTree","_ref6","hasLanguage","langs","listLanguages","processLines","_ref4","tree","flattenCodeTree","newTree","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","lastLineBreakIndex","createLine","createWrappedLine","createUnwrappedLine","_loop","splitValue","newChild","_line","stringChild","lastLineInPreviousSpan","newElem","splice","_line2","_line3","supportedLanguages","esm_prism","__webpack_exports__","Z","ctx","globalThis","restore","decode","markup","css","clike","js","Refractor","refract","register","registered","stringifyAll","attrs","refractor","abap","operator","punctuation","abnf","coreRules","range","terminal","repetition","rule","actionscript","ada","variable","agda","function","al","antlr4","command","annotation","constant","g4","apacheconf","regex","refractorSql","apex","keywords","insertClassName","classNameInside","sql","trigger","apl","statement","assignment","dfn","applescript","aql","identifier","refractorCpp","arduino","builtin","ino","arff","asciidoc","quoted","interpreted","table","specifiers","admonition","callout","macro","inline","url","replacement","copyFromAsciiDoc","adoc","asm6502","directive","asmatmel","refractorCsharp","aspnet","csharp","javascript","autohotkey","symbol","important","autoit","avisynth","replacements","allinternals","avs","avroIdl","avdl","bash","envVars","commandAfterHeredoc","insideString","environment","shebang","toBeCopied","shell","basic","batch","parameter","bbcode","shortcode","bicep","interpolation","datatype","decorator","birb","metadata","refractorC","bison","delimiter","bnf","rbnf","brainfuck","pointer","decrement","branching","brightscript","bro","bsl","oscript","cfscript","cfc","chaiscript","cpp","cil","clojure","cmake","inserted","cobol","coffeescript","coffee","concurnas","langext","conc","coq","commentSource","punct","modName","generic","refractorRuby","crystal","ruby","expansion","nested","depthLog2","keywordsToPattern","words","typeDeclarationKeywords","keywordKinds","nonTypeKeywords","nonContextualKeywords","nestedRound","genericName","typeExpressionWithoutTuple","tupleElement","tuple","typeExpression","typeInside","regularString","verbatimString","preprocessor","regularStringOrCharacter","regularStringCharacterOrComment","roundExpression","attrTarget","attr","formatString","mInterpolationRound","mInterpolation","sInterpolationRound","sInterpolation","createInterpolationInside","interpolationRound","dotnet","cs","cshtml","commentLike","stringLike","square","curly","angle","tagAttrs","tagContent","tagRegion","block","razor","csp","none","hash","host","cssExtras","selectorInside","class","combinator","unit","hexcode","atrule","addInlined","addAttribute","csv","cypher","relationship","d","dart","packagePrefix","generics","dataweave","date","dax","measure","dhall","PREFIXES","coord","unchanged","refractorMarkupTemplating","django","markupTemplating","buildPlaceholders","tokenizePlaceholders","jinja2","dnsZoneFile","docker","spaceAfterBackSlash","stringRule","commentRule","instruction","dockerfile","ID","IDInside","withID","gv","ebnf","special","editorconfig","section","eiffel","ejs","elixir","doc","atom","elm","hvariable","erb","erlang","refractorLua","etlua","lua","excelFormula","sheet","cell","row","factor","comment_inside","string_inside","arrToWordsRegExp","builtins","regexp","combinators","$false","firestoreSecurityRules","flow","fortran","fsharp","ftl","FTL_EXPR","gap","continuation","gcode","checksum","gdscript","gedcom","gherkin","tableRow","pystring","feature","scenario","outline","td","th","git","deleted","glsl","gml","gamemakerlanguage","gn","gni","goModule","go","graphql","description","markdown","scalar","fragment","validTokens","currentIndex","startToken","inputVariables","isTokenType","getToken","definitionEnd","findClosingBracket","addAlias","mutationEnd","varToken","stackHeight","groovy","haml","doctype","filters","all_filters","filter_pattern","handlebars","brackets","hbs","haskell","hs","haxe","reification","hcl","heredoc","hlsl","hoon","hpkp","hsts","http","headerValueOf","uri","header","httpLanguages","json","suffixTypes","contentType","getSuffixPattern","suffix","ichigojam","icon","icuMessageFormat","stringPattern","argumentSource","nestedMessage","refractorHaskell","idris","idr","iecst","address","ignore","entry","gitignore","hgignore","npmignore","inform7","substitution","verb","ini","io","adverb","conjunction","java","classNamePrefix","refractorJava","refractorJavadoclike","javadoc","codeLinePattern","memberReference","field","javadoclike","addSupport","javaDocLike","docLanguage","docCommentSupport","tokenName","hashbang","javastacktrace","exceptions","more","jexl","jolie","aggregates","redirects","jq","stringInterpolation","jsExtras","withId","imports","spread","arrow","dom","maybeClassNameTokens","jsTemplates","templateString","templateLiteralPattern","interpolationObject","interpolationPunctuationObject","interpolationPattern","createTemplate","tokenizeWithHooks","Boolean","typescript","ts","tsx","findTemplateStrings","embedded","stringContent","tokenizeEmbedded","_tokens","placeholderCounter","placeholderMap","embeddedTokens","counter","interpolationExpression","placeholders","walkTokens","middle","tokenizeInterpolationExpression","tempGrammar","afterTokens","refractorTypescript","jsdoc","parameterPrefix","example","null","webmanifest","refractorJson","json5","jsonp","jsstacktrace","braces","stringifyToken","openedTags","notTagNorBrace","openedBraces","plainText","julia","keepalived","ip","email","keyman","kotlin","interpolationInside","kt","kts","kumir","nonId","wrapId","prolog","kum","kusto","datetime","latex","funcPattern","insideEqu","cdata","equation","headline","tex","refractorPhp","latte","markupLatte","php","less","refractorScheme","lilypond","schemeExpression","ly","liquid","insideRaw","tagMatch","lisp","simple_form","primitive","marker","par","nestedPar","heading","interactive","defvar","defun","car","arg","varform","forms","arglist","sublist","elisp","emacs","livescript","llvm","exception","separator","domain","uuid","time","lolcode","magma","generator","makefile","inner","createInline","tableCell","tableLine","yaml","blockquote","strike","codeLang","codeBlock","cls","tagPattern","fromCodePoint","autoloader","Date","random","loadLanguages","ele","getElementById","KNOWN_ENTITY_NAMES","md","getPlaceholder","placeholderPattern","replaceFilter","tokenStack","includedCdataInside","def","attrName","mathml","svg","ssml","rss","matlab","maxscript","mel","flag","mermaid","mizar","mongodb","operatorsSource","operators","monkey","moonscript","moon","n1ql","n4js","n4jsd","nand2tetrisHdl","naniscript","expressionDef","params","define","nani","getTextContent","isBracketsBalanced","bracket","bracketsIndex","nasm","neon","literal","nevod","fields","quantifier","nginx","nim","nix","antiquotation","nsis","objectivec","objc","ocaml","variant","opencl","openqasm","qasm","oz","parigp","parser","pascal","asm","objectpascal","pascaligo","accum","pcaxis","tlist","px","peoplecode","pcode","perl","filehandle","phpExtras","this","string_interpolation","package","phpdoc","plsql","powerquery","pq","mscript","powershell","processing","promql","vectorMatching","aggregations","protobuf","builtinTypes","psl","pug","each","branch","mixin","puppet","inlineLanguageRe","inlineLanguages","purebasic","pbfasm","purescript","purs","python","py","qml","jsString","jsComment","jsExpr","qore","qsharp","qualifiedName","interpolationExpr","qs","racket","rkt","specialEscape","rangeChar","backreference","anchor","alternation","rego","renpy","rpy","rip","roboconf","component","optional","wildcard","robotframework","createSection","extendecInside","docTag","testNameLike","testPropertyLike","documentation","variables","tasks","robot","percentExpression","symbolName","rb","rust","multilineComment","sas","numericConstant","macroVariable","macroKeyword","func","format","altformat","globalStatements","submitStatement","actionSets","casActions","datalines","sass","scala","SortedBNF","scss","refractorBash","shellSession","user","smali","smalltalk","smarty","smartyPattern","smartyLiteralMode","sml","word","smlnj","solidity","sol","solutionFile","guid","soy","numberPattern","soyLitteralMode","refractorTurtle","sparql","rq","splunkSpl","sqf","squirrel","stan","higherOrderFunctions","constraint","stylus","swift","nil","omit","systemd","quotesSource","refractorT4Templating","t4Cs","t4","createT4","t4Templating","createBlock","contentAlias","insideLang","standard","refractorVbnet","t4Vb","refractorYaml","tap","fail","pass","pragma","bailout","plan","subtest","yamlish","tcl","textile","modifierRegex","parenthesesRegex","withModifier","modifierTokens","phrase","footnote","acronym","mark","phraseInside","nestedPatterns","phraseInlineInside","phraseTableInside","toml","insertKey","tremor","extractor","troy","trickle","refractorJsx","tt2","turtle","trig","twig","at","typoscript","tsconfig","unrealscript","category","uc","uscript","uorazor","query","pair","authority","port","vala","refractorBasic","vbnet","velocity","unparsed","verilog","vhdl","vim","visualBasic","vb","vba","warpscript","wasm","webIdl","wiki","emphasis","nowiki","wolfram","blank","mathematica","wl","nb","wren","xeora","xeoracube","xmlDoc","insertDocComment","docComment","slashDocComment","xojo","xquery","extension","anchorOrAlias","plainKey","createValuePattern","yml","yang","zig","IDENTIFIER","ALIGN","TYPE","StyleToObject","hasIterator","stderr","pcWithForcedColor","rf","rawLines","loc","highlighted","highlightCode","forceColor","_highlight","shouldHighlight","colors","_picocolors","defs","gutter","compose","maybeHighlight","fmt","markerLines","getMarkerLines","endLoc","linesAbove","linesBelow","startLine","startColumn","endLine","endColumn","lineDiff","sourceLength","NEWLINE","hasColumns","numberMaxWidth","highlightedLines","paddedNumber","hasMarker","lastMarkerLine","markerLine","markerSpacing","numberOfMarkers","repeat","_interopRequireWildcard","__esModule","_getRequireWildcardCache","FORCE_COLOR","isIdentifierName","isFirst","cp","trail","nonASCIIidentifierStartChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","_identifier","_keyword","isKeyword","isReservedWord","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isStrictReservedWord","inModule","reservedWordsStrictSet","reservedWordsStrictBindSet","highlightTokens","colorize","capitalized","jsxIdentifier","punctuator","_jsTokens","_helperValidatorIdentifier","sometimesKeywords","BRACKET","JSX_TAG","getTokenType","chalkWithForcedColor","getChalk","jsxRuntime","deserializer","$","unpair","BigInt","deserialize","serialized","serialize_toString","typeOf","asString","shouldSkip","serializer","strict","entries","toISOString","serialize","lossy","esm","structuredClone","any","ccount","ok","unreachable","headingRank","emptyOptions","one","includeImageAlt","includeHtml","blankLine","effects","nok","micromark_util_character__WEBPACK_IMPORTED_MODULE_0__","xz","micromark_factory_space__WEBPACK_IMPORTED_MODULE_1__","Ch","partial","factorySpace","limit","POSITIVE_INFINITY","enter","consume","exit","asciiAlpha","regexCheck","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","unicodePunctuation","unicodeWhitespace","remove","items","parameters","classifyCharacter","z3","B8","Xh","combineExtensions","extensions","syntaxExtension","hook","left","maybe","right","constructs","existing","micromark_util_chunked__WEBPACK_IMPORTED_MODULE_0__","normalizeIdentifier","resolveAll","events","called","ForInStatement","FunctionDeclaration","RestElement","BinaryExpression","ArrayExpression","BlockStatement","blockEndNewlines","stringifyPosition","point","VFileMessage","Error","causeOrReason","optionsOrParentOrPlace","origin","legacyCause","place","ancestors","ruleId","fatal","actual","expected","note","minpath","basename","extname","seenNonSlash","assertPath","codePointAt","firstNonSlashEnd","extnameIndex","dirname","unmatchedSlash","startPart","startDot","preDotState","segments","joined","absolute","normalizeString","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","sep","minproc","isUrl","fileUrlOrPath","protocol","auth","order","VFile","history","stored","assertNonEmpty","assertPart","lib_assertPath","stem","urlToPath","URL","getPathFromURLPosix","hostname","pathname","third","decodeURIComponent","encoding","decoder","TextDecoder","markdown_extensions","enterMdxFlowExpression","enterMdxTextExpression","exitMdxExpression","resume","estree","lib_default","exitMdxExpressionData","config","handleMdxExpression","characterEntitiesLegacy","characterReferenceInvalid","isDecimal","isHexadecimal","isAlphanumerical","isAlphabetical","index_dom_element","decodeNamedCharacterReference","characterReference","defaultSubsetRegex","surrogatePairsRegex","controlCharactersRegex","regexEscapeRegex","subsetToRegexCache","formatBasic","inferDepth","state","depth","createIndent","peekElement","enterMdxjsEsm","exitMdxjsEsm","exitMdxjsEsmData","handleMdxjsEsm","CONTINUE","EXIT","SKIP","toResult","nodelike","eventsToAcorn","acornOptions","onComment","onToken","swallow","acornConfig","preserveParens","collection","collect","tokenTypes","stops","sliceStream","shift","serializeChunks","atTab","isEmptyExpression","allowEmpty","parseOffsetToUnistPoint","parseExpressionAt","error_","raisedAt","body","sourceType","visitor","leave","esnode","parents","fixPosition","visit","cKey","grandparents","cIndex","subresult","nodeOrToken","pointStart","pointEnd","acornOffset","sourceOffset","relativeToPoint","relative","stopRelative","stopAbsolute","positionFromEstree","nodeLike","pointOrUndefined","estreePoint","estreeOffset","numberOrUndefined","trouble","nonSpreadHash","factoryMdxExpression","markerType","chunkType","addResult","allowLazy","lastCrash","eventStart","micromark_util_character","eolAfter","mdxExpressionParse","startRe","contRe","contReJsx","nameRe","nameReJsx","lib_start","cont","lib_name","factory_tag_trouble","factoryTag","tagType","tagMarkerType","tagClosingMarkerType","tagSelfClosingMarker","tagNameType","tagNamePrimaryType","tagNameMemberMarkerType","tagNameMemberType","tagNamePrefixMarkerType","tagNameLocalType","tagExpressionAttributeType","tagExpressionAttributeMarkerType","tagExpressionAttributeValueType","tagAttributeType","tagAttributeNameType","tagAttributeNamePrimaryType","tagAttributeNamePrefixMarkerType","tagAttributeNameLocalType","tagAttributeInitializerMarkerType","tagAttributeValueLiteralType","tagAttributeValueLiteralMarkerType","tagAttributeValueLiteralValueType","tagAttributeValueExpressionType","tagAttributeValueExpressionMarkerType","tagAttributeValueExpressionValueType","returnState","startAfter","nameBefore","esWhitespaceStart","closingTagNameBefore","tagEnd","primaryName","crash","primaryNameAfter","memberNameBefore","localNameBefore","attributeBefore","memberName","memberNameAfter","localName","localNameAfter","attributeExpressionAfter","attributePrimaryName","attributePrimaryNameAfter","attributeLocalNameBefore","attributeValueBefore","attributeLocalName","attributeLocalNameAfter","attributeValueQuotedStart","attributeValueQuoted","attributeValueExpressionAfter","esWhitespaceEolAfter","esWhitespaceInside","padStart","blankLineBefore","attempt","blank_line","syntax_trouble","allowedAcornTypes","lib_emptyOptions","remarkMdx","micromarkExtensions","fromMarkdownExtensions","toMarkdownExtensions","mdxjs","_b","acorn_jsx","ecmaVersion","micromark_util_combine_extensions","W","mdxjsEsm","exportImportConstruct","definedModuleSpecifiers","interrupt","jv","atEnd","continuationStart","specifier","local","concrete","mdxExpression","options_","micromark_factory_space","lessThanValue","jsxTag","mdxJsx","leftBraceValue","disable","mdxFlowExpression","mdxTextExpression","mdxFlowExpressionChunk","mdxTextExpressionChunk","mdxJsxFromMarkdown","canContainEols","mdxJsxFlowTag","enterMdxJsxTag","mdxJsxFlowTagClosingMarker","enterMdxJsxTagClosingMarker","mdxJsxFlowTagAttribute","enterMdxJsxTagAttribute","mdxJsxFlowTagExpressionAttribute","enterMdxJsxTagExpressionAttribute","mdxJsxFlowTagAttributeValueLiteral","mdxJsxFlowTagAttributeValueExpression","mdxJsxFlowTagSelfClosingMarker","enterMdxJsxTagSelfClosingMarker","mdxJsxTextTag","mdxJsxTextTagClosingMarker","mdxJsxTextTagAttribute","mdxJsxTextTagExpressionAttribute","mdxJsxTextTagAttributeValueLiteral","mdxJsxTextTagAttributeValueExpression","mdxJsxTextTagSelfClosingMarker","exitMdxJsxTagClosingMarker","mdxJsxFlowTagNamePrimary","exitMdxJsxTagNamePrimary","mdxJsxFlowTagNameMember","exitMdxJsxTagNameMember","mdxJsxFlowTagNameLocal","exitMdxJsxTagNameLocal","exitMdxJsxTagExpressionAttribute","mdxJsxFlowTagExpressionAttributeValue","mdxJsxFlowTagAttributeNamePrimary","exitMdxJsxTagAttributeNamePrimary","mdxJsxFlowTagAttributeNameLocal","exitMdxJsxTagAttributeNameLocal","exitMdxJsxTagAttributeValueLiteral","mdxJsxFlowTagAttributeValueLiteralValue","exitMdxJsxTagAttributeValueExpression","mdxJsxFlowTagAttributeValueExpressionValue","exitMdxJsxTagSelfClosingMarker","exitMdxJsxTag","mdxJsxTextTagNamePrimary","mdxJsxTextTagNameMember","mdxJsxTextTagNameLocal","mdxJsxTextTagExpressionAttributeValue","mdxJsxTextTagAttributeNamePrimary","mdxJsxTextTagAttributeNameLocal","mdxJsxTextTagAttributeValueLiteralValue","mdxJsxTextTagAttributeValueExpressionValue","mdxJsxTagStack","mdxJsxTag","enterMdxJsxTagAnyAttribute","sliceSerialize","parseEntities","characterReferenceCharacters","namedReference","referenceCode","serializeAbbreviatedTag","onErrorRightIsTag","onErrorLeftIsTag","closing","mdxjsEsmData","handlers","unsafe","inConstruct","atBreak","mdxJsxToMarkdown","quoteSmart","tightSelfClosing","printWidth","alternative","mdxElement","peek","mdxJsxFlowElement","mdxJsxTextElement","fences","resourceLink","currentIndent","trackerOneLine","createTracker","trackerMultiLine","serializedAttributes","move","appliedQuote","core_core","subset","charactersToExpressionCached","cached","charactersToExpression","groups","escapeOnly","attributesOnTheirOwnLine","attributesOnOneLine","tracker","containerPhrasing","containerFlow","indexStack","childInfo","handle","serializedChild","indentLines","bulletLastUsed","SpliceBuffer","initial","setCursor","stop","deleteCount","trunc","removed","chunkedPush","item","pushMany","unshiftMany","subtokenize","eventsArray","lineIndex","otherIndex","otherEvent","subevents","jumps","_tokenizer","_isInFirstContentOfListItem","subcontent","eventIndex","stream","startPosition","startPositions","tokenizer","childEvents","gaps","breaks","defineSkip","_gfmTasklistFirstContentOfListItem","_container","micromark_util_chunked","contentStart","contentInitial","document_document","childFlow","childToken","lineStartOffset","continued","containerState","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","flowStart","_gfmTableDynamicInterruptHack","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","containerContinue","flowContinue","writeToChild","eof","seen","content_content","chunkInside","contentEnd","continuationConstruct","contentContinue","prefixed","flowInitial","afterConstruct","resolver","createResolver","initializeFactory","text_text","notText","resolveAllLineSuffixes","extraResolver","tabs","bufferIndex","_index","_bufferIndex","thematicBreak","sequence","initialSize","pY","atMarker","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","Av","enclosed","enclosedEscape","rawEscape","factoryLabel","labelInside","labelEscape","factoryTitle","factoryWhitespace","titleBefore","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","setextUnderline","paragraph","resolveTo","htmlBlockNames","htmlRawNames","html_flow_blankLineBefore","nonLazyContinuationStart","nonLazyContinuation","codeFenced","closeStart","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","sequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","numeric","H$","AF","characterEscape","sR","lineEnding","labelEnd","labelStart","_balanced","_inactive","labelEndNok","micromark_util_normalize_identifier","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","V","micromark_util_resolve_all","C","insideSpan","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","attention","attentionMarkers","micromark_util_classify_character","_open","_close","openingSequence","closingSequence","use","nextEvents","movePoint","labelStartLink","constructs_document","labelAfter","markerAfter","destinationBefore","destinationAfter","afterWhitespace","constructs_flow","sequenceFurther","closingTag","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","commentOpenInside","cdataOpenInside","basicSelfClosing","completeClosingTagAfter","completeEnd","completeAttributeNameBefore","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationAfter","continuationStartNonLazy","continuationBefore","continuationRawEndTag","constructs_string","constructs_text","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","n9","emailLabel","emailValue","tagOpen","commentEnd","commentClose","lineEndingBefore","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","between","tailExitIndex","headEnterIndex","decodeNumericCharacterReference","base","characterEscapeOrReference","$1","$2","lib_own","lib_point","defaultOnError","remarkParse","atCarriageReturn","mdastExtensions","compiler","transforms","autolink","opener","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeText","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","hardBreakEscape","hardBreak","hardBreakTrailing","htmlFlow","htmlFlowData","htmlText","htmlTextData","listItem","_spread","listItemValue","expectingFirstListItemValue","ancestor","listOrdered","listUnordered","referenceType","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitdata","characterEscapeValue","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","characterReferenceType","flowCodeInside","codeFencedFence","onexithardbreak","inReference","labelText","atHardBreak","setextHeadingSlurpLineEnding","resource","setextHeadingLineSequence","setextHeadingText","configure","combined","listStack","prepareList","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","handler","errorHandler","siblings","onExitError","lib","B","ordered","postprocess","constructs_namespaceObject","createTokenizer","initialize","columnStart","resolveAllConstructs","accountForPotentialSkip","constructFactory","construct","onsuccessfulcheck","expandTabs","create_tokenizer_serializeChunks","main","chunkIndex","sliceChunks","view","startIndex","startBufferIndex","endIndex","endBufferIndex","onreturn","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","handleConstruct","store","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","preprocess","endPosition","ceil","normalizeUri","skip","encodeURIComponent","defaultFootnoteBackContent","rereferenceIndex","defaultFootnoteBackLabel","referenceIndex","unist_util_position_lib_point","lib_position","revert","subtype","listItemLoose","trimLine","handlers_handlers","patch","applyData","break","delete","footnoteReference","clobberPrefix","safeId","footnoteOrder","reuseCounter","footnoteCounts","dataFootnoteRef","allowDangerousHtml","imageReference","definitionById","inlineCode","linkReference","loose","listLoose","firstRow","tableContent","rowIndex","cellIndex","cells","alignValue","trimLines","last","footnoteDefinition","state_own","state_emptyOptions","hName","hChildren","hProperties","ZP","trimMarkdownSpaceStart","toHast","createState","footnoteById","passThrough","shallow","unknown","unknownHandler","unist_util_visit_lib","Vn","foot","footer","footnoteBackContent","footnoteBackLabel","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","listItems","backReferences","counts","dataFootnoteBackref","tailTail","dataFootnotes","remarkRehype","destination","hastTree","bail","getPrototypeOf","toStringTag","CallableInstance","constr","unified_lib_own","Processor","Compiler","attachers","freezeIndex","frozen","transformers","trough","fns","pipeline","middlewareIndex","lib_wrap","middleware","fnExpectsCallback","done","middelware","attacher","assertUnfrozen","freeze","transformer","realFile","vfile","assertParser","assertCompiler","executor","reject","parseTree","realDone","compileResult","processSync","complete","assertDone","assertNode","outputTree","resultingTree","runSync","addPlugin","addList","addPreset","entryIndex","primary","currentPrimary","unified","asyncName","lib_looksLikeAVFile","WalkerBase","should_skip","should_remove","SyncWalker","_should_skip","_should_remove","_replacement","skipped","isNode","walk","ast","instance","analyze","globals","Scope","references","current_scope","is_reference","computed","extract_names","add_declaration","add_reference","find_owner","initialised_declarations","declarator","init","extract_identifiers","handle_element","specifiersToDeclarations","importNamespaceSpecifier","otherSpecifiers","imported","exported","shorthand","toIdOrMemberExpression","ids","toJsxIdOrMemberExpression","recmaDocument","baseUrl","baseHref","outputFormat","pragmaFrag","pragmaImportSource","jsxImportSource","importMetaUrl","layout","exportedIdentifiers","exportAllCount","injectPragma","handleEsm","isDeclaration","importSpecifier","handleExport","createMdxContent","usesImportMetaUrlVariable","usesResolveDynamicHelper","declarators","callee","consequent","alternate","finalizer","hasInternalLayout","awaitExpression","await","_mdxIsPragmaComment","toIdentifier","lib_create","toMemberExpression","identifiers","recmaJsxBuild","development","buildJsx","automatic","runtime","annotations","jsxFrag","jsxDEV","injectIndex","importSource","toProperty","valueExpression","nodeValue","isStaticChildren","filePath","toBinaryAddition","expressions","recmaJsxRewrite","providerImportSource","currentScope","scopeInfo","functionStack","importProvider","createErrorHelper","newScope","components","idToInvalidComponentName","objects","tags","isNamedFunction","inScope","functionScope","fullId","isInScope","parentScope","_mdxExplicitJsx","jsxIdExpression","invalidComponentName","sort","statements","componentsPattern","componentsInit","componentName","localeCompare","scopeNode","createImportProvider","endsWith","OPERATOR_PRECEDENCE","in","instanceof","EXPRESSIONS_PRECEDENCE","TaggedTemplateExpression","ThisExpression","Identifier","PrivateIdentifier","Literal","TemplateLiteral","Super","SequenceExpression","MemberExpression","ChainExpression","CallExpression","NewExpression","ArrowFunctionExpression","ClassExpression","FunctionExpression","ObjectExpression","UpdateExpression","UnaryExpression","AwaitExpression","LogicalExpression","ConditionalExpression","AssignmentExpression","YieldExpression","formatSequence","expressionNeedsParenthesis","parentNode","isRightHand","nodePrecedence","expressionsPrecedence","parentNodePrecedence","formatExpression","formatComments","lineEnd","reindent","formatVariableDeclaration","VariableDeclarator","GENERATOR","Program","indentLevel","writeComments","trailingComments","statementIndent","ClassBody","StaticBlock","EmptyStatement","ExpressionStatement","precedence","IfStatement","LabeledStatement","BreakStatement","ContinueStatement","WithStatement","SwitchStatement","caseIndent","discriminant","cases","occurences","occurencesCount","occurence","consequentCount","ReturnStatement","ThrowStatement","TryStatement","WhileStatement","DoWhileStatement","ForStatement","update","ForOfStatement","DebuggerStatement","VariableDeclaration","ClassDeclaration","superClass","ImportDeclaration","ImportExpression","ExportDefaultDeclaration","ExportNamedDeclaration","ExportAllDeclaration","MethodDefinition","static","SpreadElement","delegate","quasis","quasi","TemplateElement","ArrayPattern","propertyIndent","comma","Property","PropertyDefinition","ObjectPattern","needsParentheses","AssignmentPattern","isIn","hasCallExpression","MetaProperty","RegExpLiteral","bigint","EMPTY_OBJECT","State","setup","writeToStream","startingIndentLevel","sourceMap","writeAndMap","writeToStreamAndMap","lineEndSize","mapping","original","generated","_file","addMapping","estree_util_to_js_lib_emptyOptions","toJs","SourceMapGenerator","generate","JSXAttribute","encodeJsx","JSXClosingElement","JSXClosingFragment","JSXElement","JSXEmptyExpression","JSXExpressionContainer","JSXFragment","openingFragment","closingFragment","JSXIdentifier","JSXMemberExpression","JSXNamespacedName","JSXOpeningElement","JSXOpeningFragment","JSXSpreadAttribute","JSXText","replaceJsxChar","recmaStringify","normalize_normalize","types_boolean","types_namespaceObject","create_own","create_create","html_html","blocking","fetchPriority","inert","onBeforeMatch","onBeforeToggle","onContextLost","onContextRestored","onScrollEnd","popover","popoverTarget","popoverTargetAction","shadowRootClonable","shadowRootDelegatesFocus","shadowRootMode","writingSuggestions","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","transformOrigin","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","defaultAction","descent","diffuseConstant","direction","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","filterRes","filterUnits","focusable","focusHighlight","fr","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in2","intercept","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","opacity","orient","orientation","overflow","overlay","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","restart","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x1","xChannelSelector","y1","yChannelSelector","zoomAndPan","property_information_html","property_information_svg","zwitch_own","hastToReact","element_own","element_cap","dashSomething","tableCellElement","transformStyleToCssCasing","toDash","toCamel","estree_util_attach_comments_lib_own","emptyComments","attachComments","lib_walk","leading","trailing","compareEnd","mdx_expression_mdxExpression","inherit","mdxJsxElement","parentSchema","attributeValue","createJsxAttributeName","argumentValue","createJsxElementName","lib_empty","styleProperties","dashes","elementAttributeNameCase","comma_separated_tokens_stringify","padRight","padLeft","cssProp","node_modules_style_to_object","stylePropertyNameCase","transformStylesToCssCasing","domCasing","cssCasing","cssProperties","tableCellAlignToStyle","cleanChildren","thing","lib_state_own","tableElements","state_all","ignoreLineBreak","state_patch","createJsxNameFromString","names","rehypeRecma","toEstree","state_createState","zwitch","program","rehypeRemoveRaw","collapse_white_space_html","replaceLineEnding","replaceSpace","remarkMarkAndUnravel","oneOrMore","collapseWhiteSpace","preserveLineEndings","trimFactory","newChildren","nodeTypes","removedOptions","warned","ALIAS","DOC","MAP","PAIR","SCALAR","SEQ","NODE_TYPE","isAlias","isDocument","isPair","isScalar","isSeq","isCollection","identity_isNode","hasAnchor","BREAK","visit_SKIP","REMOVE","visit_visit","visitor_","initVisitor","visit_","ctrl","callVisitor","replaceNode","ci","ck","cv","visitAsync","visitAsync_","Collection","Node","Value","Alias","Scalar","Seq","Pair","pt","escapeChars","escapeTagName","tn","Directives","docStart","docEnd","defaultYaml","defaultTags","atDocument","res","atNextDocument","explicit","isValid","verbatim","tagString","tagNames","tagEntries","_key","some","anchorIsValid","sa","anchorNames","anchors","findNewAnchor","exclude","applyReviver","reviver","v0","v1","toJS","aliasCount","onCreate","keep","NodeBase","mapAsMap","maxAliasCount","onAnchor","mapKeyWarned","found","_arg","getAliasCount","_onComment","_onChompKeep","verifyAliasOrder","implicitKey","isScalarValue","createNode","ref","aliasDuplicateObjects","onTagObj","sourceObjects","defaultTagPrefix","tagObj","findTagObject","identify","nodeClass","collectionFromPath","isInteger","keepUndefined","BLOCK_FOLDED","BLOCK_LITERAL","PLAIN","QUOTE_DOUBLE","QUOTE_SINGLE","isEmptyPath","it","addIn","deleteIn","getIn","keepScalar","hasAllNullValues","allowScalar","every","commentBefore","hasIn","setIn","stringifyComment","indentComment","lineComment","FOLD_FLOW","FOLD_BLOCK","FOLD_QUOTED","foldFlowLines","indentAtStart","lineWidth","minContentWidth","onFold","onOverflow","endStep","folds","escapedFolds","escStart","escEnd","consumeMoreIndentedLines","fold","getFoldOptions","isBlock","containsDocumentMarker","doubleQuotedString","doubleQuotedAsJSON","minMultiLineLength","doubleQuotedMinMultiLineLength","singleQuotedString","singleQuote","quotedString","hasDouble","hasSingle","blockString","onChompKeep","chomp","endStart","startEnd","commentString","forceBlockIndent","lineLengthOverLimit","indentLength","strLen","endNlPos","startWithSpace","startNlPos","indentSize","stringifyString","inFlow","ss","_stringify","_type","plainString","actualString","indentStep","compat","defaultKeyType","defaultStringType","createStringifyContext","opt","directives","falseStr","flowCollectionPadding","indentSeq","nullStr","simpleKeys","trueStr","toStringOptions","collectionStyle","stringify_stringify","resolvedAliases","getTagObject","stringifyProps","warn","logLevel","emitWarning","addPairToJSMap","isMergeKey","mergeToJSMap","jsKey","stringKey","stringifyKey","strCtx","inStringifyKey","strKey","jsonStr","jsValue","createPair","stringifyPair","vsb","vcb","valueComment","allNullValues","keyComment","explicitKey","keyCommentDone","chompKeep","spaceBefore","valueCommentDone","valueStr","ws","vs0","nl0","hasNewline","hasPropsLine","sp0","stringifyCollection","flowChars","itemIndent","fcPadding","itemCtx","reqNewline","linesAtValue","addCommentBefore","ik","iv","blockItemPrefix","ic","trimStart","findPair","YAMLMap","replacer","sortMapEntries","overwrite","_pair","sortEntries","findIndex","del","YAMLSeq","idx","asItemIndex","seq","string_string","nullTag","boolTag","stringifyNumber","minFractionDigits","floatNaN","NEGATIVE_INFINITY","floatExp","parseFloat","toExponential","float_float","intIdentify","intResolve","radix","intAsBigInt","intStringify","intOct","_onError","int_int","intHex","schema_intIdentify","stringifyJSON","schema_schema","binary","atob","buf","btoa","resolvePairs","cn","createPairs","iterable","pairs","YAMLOMap","omap","seenKeys","boolStringify","boolObj","trueTag","falseTag","int_intIdentify","int_intResolve","sign","int_intStringify","YAMLSet","keepPair","parseSexagesimal","asBigInt","stringifySexagesimal","_60","intTime","floatTime","timestamp","year","month","day","hour","minute","second","UTC","tz","yaml_1_1_schema_schema","schemas","tagsByName","bool","float","int","coreKnownTags","getTags","customTags","schemaName","sortMapEntriesByKey","Schema_Schema","resolveKnownTags","toStringDefaults","knownTags","Document","errors","warnings","_replacer","keepSourceTokens","prettyErrors","uniqueKeys","_directives","setSchema","assertCollection","createAlias","asStr","anchorPrefix","setAnchors","createNodeAnchors","aliasObjects","prevAnchors","jsonArg","stringifyDocument","hasDirectives","contentComment","dc","YAMLError","YAMLParseError","YAMLWarning","prettifyError","lc","linePos","col","lineStr","lineStarts","resolveProps","indicator","parentIndent","startOnNewline","atNewline","hasSpace","commentSep","reqSpace","tab","newlineAfterProp","cb","containsNewline","st","flowIndentCheck","fc","mapIncludes","isEqual","startColMsg","resolveEnd","blockMsg","resolveCollection","CN","coll","resolveBlockMap","composeNode","composeEmptyNode","bm","atRoot","collItem","keyProps","keyStart","keyNode","valueProps","valueNode","srcToken","resolveBlockSeq","bs","resolveFlowCollection","fcName","prevItemComment","expectedEnd","ce","ee","cePos","Coll","resolveBlockScalar","parseBlockScalarHeader","splitLines","first","chompStart","trimIndent","prevMoreIndented","crlf","resolveFlowScalar","plainValue","badChar","foldLines","doubleQuotedValue","foldNewline","cc","escapeCodes","U","parseCharCode","wsStart","valueEnd","N","L","P","composeScalar","tagToken","findScalarTagByName","matchWithTest","findScalarTagByTest","isSrcToken","composeAlias","composeCollection","nl","lastProp","expType","emptyScalarPosition","getErrorPos","parsePrelude","prelude","atComment","afterEmptyLine","Composer","atDirectives","decorate","afterDoc","streamInfo","forceDoc","endOffset","composeDoc","resolveAsScalar","createScalarToken","he","addEndtoBlockProps","setScalarValue","afterKey","setBlockScalarValue","setFlowScalarValue","oa","cst_stringify_stringify","cst","stringifyItem","cst_visit_BREAK","cst_visit_SKIP","cst_visit_REMOVE","cst_visit_visit","_visit","itemAtPath","parentCollection","BOM","DOCUMENT","FLOW_END","cst_SCALAR","cst_isCollection","cst_isScalar","prettyToken","tokenType","isEmpty","hexDigits","tagChars","flowIndicatorChars","invalidAnchorChars","isNotAnchorChar","Lexer","blockScalarIndent","blockScalarKeep","flowKey","flowLevel","indentNext","indentValue","lineEndPos","lex","incomplete","TypeError","hasChars","parseNext","atLineEnd","continueScalar","dt","getLine","setNext","parseStream","parseLineStart","parseBlockStart","parseDocument","parseFlowCollection","parseQuotedScalar","parseBlockScalar","parsePlainScalar","pushCount","dirEnd","pushSpaces","pushNewline","sp","ch0","ch1","pushIndicators","pushUntil","qb","pushToIndex","lastChar","pushTag","allowTabs","LineCounter","addNewLine","mid","includesToken","findNonEmptyIndex","isFlowToken","getPrevProps","getFirstKeyStartProps","fixFlowSeqItems","onNewLine","atNewLine","atScalar","onKeyLine","lexer","lexeme","sourceToken","top","blockScalar","blockMap","blockSequence","flowCollection","documentEnd","bv","startBlockValue","atIndentedComment","atMapIndent","atNextItem","fs","flowScalar","parseOptions","lineCounter","parseAllDocuments","composer","docs","_doc","public_api_parse","_reviver","public_api_stringify","lib_regex","castFactory","anyFactory","unist_util_remove_lib_empty","cascade","preorder","childIndex","removeImportsExportsPlugin","mdxOptions","parseFrontmatter","rsc","compiledMdx","matter","strip","yamlOptions","TextEncoder","compile","vfileCompatible","compileOptions","resolve_file_and_options_resolveFileAndOptions","looksLikeAVFile","mdExtensions","core_createProcessor","remarkRehypeOptions","remarkPlugins","rehypePlugins","recmaPlugins","getCompileOptions","areImportsEnabled","useDynamicImport","createFormattedMDXError","parsePositionInformationFromErrorMessage","lastMatch","codeFrames","code_frame_lib","formattedError","compiledSource","frontmatter","compileMDX","fullScope","jsx_runtime","hydrateFn","Reflect","Content","MDXRemote","DefaultContext","IconContext","React","_toPropertyKey","_toPrimitive","GenIcon","IconBase","Tree2Element","elem","conf","svgProps","excluded","sourceSymbolKeys","computedSize","Consumer","convertElement","lib_element","testFunction","looksLikeAnElement","contentDefaults","rehypeAutolinkHeadings","headingOroperties","headingProperties","behavior","toChildren","toProperties","grouping","toNode","unist_util_visit_parents_lib","AM","BananaSlug","occurrences","slug","maintainCase","originalSlug","slugs","rehypeSlug","lib_all","notInConstruct","enterLiteralAutolink","enterLiteralAutolinkValue","exitLiteralAutolinkHttp","exitLiteralAutolinkWww","exitLiteralAutolinkEmail","exitLiteralAutolink","transformGfmAutolinkLiterals","findAndReplace","ignored","unist_util_is_lib","O","toPairs","tupleOrList","toFunction","pairIndex","S4","grandparent","change","matchObject","findUrl","findEmail","isCorrectDomain","splitUrl","trailExec","closingParenIndex","openingParens","closingParens","atext","enterFootnoteDefinition","enterFootnoteDefinitionLabelString","exitFootnoteDefinitionLabelString","exitFootnoteDefinition","enterFootnoteCall","enterFootnoteCallString","exitFootnoteCallString","exitFootnoteCall","subexit","safe","associationId","constructsWithoutStrikethrough","enterStrikethrough","exitStrikethrough","handleDelete","defaultStringLength","toAlignment","compilePattern","listItemIndent","checkListItemIndent","bullet","bulletCurrent","checkBullet","incrementListMarker","enterTable","_align","inTable","exitTable","enterRow","enterCell","exitCodeText","exitCheck","exitParagraphWithTaskListItem","firstParaghraph","sibling","listItemWithTaskListItem","checkable","checkbox","wwwPrefix","wwwPrefixInside","wwwPrefixAfter","underscoreInLastSegment","underscoreInLastLastSegment","domainInside","domainAfter","domainAtPunctuation","sizeClose","pathInside","pathAtPunctuation","trailCharacterReferenceStart","trailBracketAfter","trailCharacterReferenceInside","emailDomainDotTrail","wwwAutolink","previousWww","previousUnbalanced","wwwAfter","protocolAutolink","previousProtocol","protocolPrefixInside","protocolSlashesInside","afterProtocol","protocolAfter","emailAutolink","gfmAtext","previousEmail","emailDomain","emailDomainAfter","emailDomainDot","syntax_text","syntax_code","_gfmAutolinkLiteralWalkedInto","tokenizePotentialGfmFootnoteCall","gfmFootnotes","resolveToPotentialGfmFootnoteCall","tokenizeGfmFootnoteCall","callStart","callData","callEscape","tokenizeDefinitionStart","labelAtMarker","whitespaceAfter","tokenizeDefinitionContinuation","gfmFootnoteDefinitionEnd","EditMap","addImplementation","editMap","vecs","tokenizeTable","sizeB","bodyRowStart","headRowBefore","headRowBreak","headDelimiterStart","headRowData","headRowEscape","headDelimiterBefore","headDelimiterValueBefore","headDelimiterCellBefore","headDelimiterLeftAlignmentAfter","headDelimiterCellAfter","headDelimiterFiller","headDelimiterRightAlignmentAfter","bodyRowBreak","bodyRowData","bodyRowEscape","resolveTable","currentTable","currentBody","currentCell","inFirstCellAwaitingPipe","rowKind","lastCell","afterHeadAwaitingFirstBodyRow","lastTableEnd","flushTableEnd","flushCell","gfmTableAlign","inDelimiterRow","alignIndex","rowEnd","previousCell","getPoint","relatedStart","relatedEnd","valueToken","tableBody","exits","related","tasklistCheck","spaceThenNonSpace","remarkGfm","gfmStrikethrough","single","singleTilde","literalAutolink","literalAutolinkEmail","literalAutolinkHttp","literalAutolinkWww","gfmFootnoteDefinition","gfmFootnoteDefinitionLabelString","gfmFootnoteCall","gfmFootnoteCallString","tableData","tableHeader","taskListCheckValueChecked","taskListCheckValueUnchecked","gfmTableToMarkdown","padding","tableCellPadding","alignDelimiters","tablePipeAlign","stringLength","around","serializeData","handleTableAsData","handleTableRowAsData","handleTableCell","matrix","markdownTable","alignments","cellMatrix","sizeMatrix","longestCellByColumn","mostCellsPerRow","columnIndex","delimiterStart","delimiterEnd","nodeAsRecord","checkAsRecord","looksLikeANode","visitParents","nodeAsParent","testOrVisitor","visitorOrReverse","maybeReverse","unist_util_visit_parents__WEBPACK_IMPORTED_MODULE_0__"],"sourceRoot":""}