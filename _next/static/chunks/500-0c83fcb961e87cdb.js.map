{"version":3,"file":"static/chunks/500-0c83fcb961e87cdb.js","mappings":"kIAGA,IAAMA,EAAqBC,CAAAA,EAAAA,SAAAA,aAAAA,EAAc,CAAC,yDCG1C,IAAMC,EAAsBD,CAAAA,EAAAA,SAAAA,aAAAA,EAAc,CACtCE,mBAAoB,GAAOC,EAC3BC,SAAU,GACVC,cAAe,OACnB,0DCJA,IAAMC,EAAkBN,CAAAA,EAAAA,SAAAA,aAAAA,EAAc,iC+CHtCO,E7CHA,SAAAC,EAAAC,CAAA,EACA,OAAAA,OAAAA,GACA,iBAAAA,GACA,mBAAAA,EAAAC,KAAA,kCCHA,IAAAC,EAAA,GACAC,MAAAC,OAAA,CAAAJ,GCDA,SAAAK,EAAAC,CAAA,CAAAC,CAAA,EACA,IAAAJ,MAAAC,OAAA,CAAAG,GACA,SACA,IAAAC,EAAAD,EAAAE,MAAA,CACA,GAAAD,IAAAF,EAAAG,MAAA,CACA,SACA,QAAAC,EAAA,EAAoBA,EAAAF,EAAgBE,IACpC,GAAAH,CAAA,CAAAG,EAAA,GAAAJ,CAAA,CAAAI,EAAA,CACA,SAEA,QACA,CCRA,SAAAC,EAAAX,CAAA,EACA,uBAAAA,GAAAG,MAAAC,OAAA,CAAAJ,EACA,CCLA,SAAAY,EAAAC,CAAA,EACA,IAAAC,EAAA,IAAqB,GAAI,CAKzB,OAJAD,MAAAA,GAAAA,EAAAE,MAAA,CAAAC,OAAA,EAAAC,EAAAC,KACAJ,CAAA,IAAAI,EAAA,CAAAD,EAAAE,GAAA,GACAL,CAAA,IAAAI,EAAA,CAAAD,EAAAG,WAAA,EACA,GACAN,CACA,CACA,SAAAO,EAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAX,CAAA,EAIA,sBAAAU,EAAA,CACA,IAAAE,EAAAC,EAAA,CAAAd,EAAAC,GACAU,EAAAA,EAAAC,KAAAG,IAAAH,EAAAA,EAAAF,EAAAE,MAAA,CAAAC,EAAAC,EACA,CAaA,GARA,iBAAAH,GACAA,CAAAA,EAAAD,EAAAM,QAAA,EAAAN,EAAAM,QAAA,CAAAL,EAAA,EAOA,mBAAAA,EAAA,CACA,IAAAE,EAAAC,EAAA,CAAAd,EAAAC,GACAU,EAAAA,EAAAC,KAAAG,IAAAH,EAAAA,EAAAF,EAAAE,MAAA,CAAAC,EAAAC,EACA,CACA,OAAAH,CACA,CC/BA,SAAAM,EAAAhB,CAAA,CAAAU,CAAA,CAAAC,CAAA,EACA,IAAAF,EAAAT,EAAAiB,QAAA,GACA,OAAWT,EAAuBC,EAAAC,EAAAC,KAAAG,IAAAH,EAAAA,EAAAF,EAAAE,MAAA,CAAAX,EAClC,CCLA,IAAAkB,EAAA,CACA,UACA,cACA,aACA,aACA,WACA,YACA,OACA,CACAC,EAAA,cAAAD,EAAA,CCNAE,EAAA,CACA,uBACA,IACA,IACA,IACA,aACA,aACA,aACA,QACA,SACA,SACA,SACA,UACA,UACA,UACA,OACA,QACA,QACA,CAIAC,EAAA,IAAAC,IAAAF,GCnBAG,EAAA,GAAAC,IAAAA,EACAC,EAAA,GAAAC,EAAA,ICLAC,EAAA,CACAC,KAAA,SACAC,UAAA,IACAC,QAAA,GACAC,UAAA,EACA,EACAC,EAAA,KACAJ,KAAA,SACAC,UAAA,IACAC,QAAAG,IAAAA,EAAA,EAAAC,KAAAC,IAAA,SACAJ,UAAA,EACA,GACAK,EAAA,CACAR,KAAA,YACAS,SAAA,EACA,EAKAC,EAAA,CACAV,KAAA,YACAU,KAAA,eACAD,SAAA,EACA,EACAE,EAAA,CAAAC,EAAA,CAA0CC,UAAAA,CAAA,CAAW,GACrD,EAAA7C,MAAA,GACAwC,EAEaf,EAAcqB,GAAA,CAAAF,GAC3BA,EAAAG,UAAA,UACAX,EAAAS,CAAA,KACAd,EAEAW,EC5BA,SAAAM,EAAAC,CAAA,CAAAxC,CAAA,EACA,OAAAwC,CAAA,CAAAxC,EAAA,EACAwC,EAAA,SACAA,CACA,CCZA,IAAAC,EAAA,CACAC,eAAA,GACAC,gBAAA,EACA,ECHAC,EAAA,CACArC,QAAA,EACA,ECFAsC,EAAA,GAAA9C,OAAAA,EACA,SAAA+C,EAAAV,CAAA,EAAuCW,OAAAA,CAAA,CAAAC,WAAAA,EAAA,OAA6B,CAAAC,CAAA,EACpE,IAAAC,EAAAd,EAAAe,MAAA,CAAAN,GACAO,EAAAL,GAAAC,SAAAA,GAAAD,EAAA,KACA,EACAG,EAAA3D,MAAA,GACA,UAAA0D,KAAAxC,IAAAwC,EAEAA,EADAC,CAAA,CAAAE,EAAA,KsLJAC,EGGAC,EAAAC,avLHA,IAAAC,EAAA,CACA,OACA,mBACA,SACA,YACA,SACA,aACA,CAEA,SAAAC,EAAAC,CAAA,CAAAC,CAAA,EACA,IAAAC,EAAA,GACAC,EAAA,GACAjE,EAAA,CACAkE,MAAA,EACAC,UAAA,EACAC,aAAA,EACA,EACAC,EAAA,IAAAL,EAAA,GACAM,EAAAV,EAAAW,MAAA,EAAAC,EAAApE,KACAoE,CAAA,CAAApE,EAAA,CAAmBqE,SDtBnBT,CAAA,EAKA,IAAAU,EAAA,IAAArD,IACAsD,EAAA,IAAAtD,IAKA+C,EAAA,GACAQ,EAAA,GAIAC,EAAA,IAAAC,QACAC,EAAA,CACAb,MAAA,EACAC,UAAA,EACAC,aAAA,EACA,EACA,SAAAY,EAAAC,CAAA,EACAJ,EAAApC,GAAA,CAAAwC,KACAC,EAAAC,QAAA,CAAAF,GACAjB,KAEAiB,EAAAF,EACA,CACA,IAAAG,EAAA,CAIAC,SAAA,CAAAF,EAAAG,EAAA,GAAAC,EAAA,MAEA,IAAAC,EAAAC,GADAnB,EACAM,EAAAC,EAKA,OAJAS,GACAP,EAAAW,GAAA,CAAAP,GACAK,EAAA7C,GAAA,CAAAwC,IACAK,EAAAE,GAAA,CAAAP,GACAA,CACA,EAIAQ,OAAA,IACAd,EAAAe,MAAA,CAAAT,GACAJ,EAAAa,MAAA,CAAAT,EACA,EAIAU,QAAA,IAOA,GANAZ,EAAAa,EAMAxB,EAAA,CACAQ,EAAA,GACA,MACA,CACAR,EAAA,GACA,CAAAM,EAAAC,EAAA,EAAAA,EAAAD,EAAA,CAEAC,EAAAkB,KAAA,GAEAnB,EAAAxE,OAAA,CAAA8E,GACAZ,EAAA,GACAQ,IACAA,EAAA,GACAM,EAAAS,OAAA,CAAAC,GAEA,CACA,EACA,OAAAV,CACA,ECvDmCb,GACnCG,GACK,IACL,CAAYsB,KAAAA,CAAA,CAAAC,iBAAAA,CAAA,CAAAC,OAAAA,CAAA,CAAAC,UAAAA,CAAA,CAAAC,OAAAA,CAAA,CAAAC,WAAAA,CAAA,EAAgE7B,EAC5E8B,EAAA,KACA,IAAAjC,EAA0BtB,EAAkBE,eAAA,CAC5C/C,EAAAmE,SAAA,CACAkC,YAAArH,GAAA,GACAgF,EAAA,GACAhE,EAAAkE,KAAA,CAAAD,EACA,OACAhC,KAAAqE,GAAA,CAAArE,KAAAsE,GAAA,CAAApC,EAAAnE,EAAAmE,SAAA,CAtBA,IAsBA,GACAnE,EAAAmE,SAAA,CAAAA,EACAnE,EAAAoE,YAAA,IAEA0B,EAAAH,OAAA,CAAA3F,GACA+F,EAAAJ,OAAA,CAAA3F,GACAgG,EAAAL,OAAA,CAAA3F,GACAiG,EAAAN,OAAA,CAAA3F,GACAkG,EAAAP,OAAA,CAAA3F,GACAmG,EAAAR,OAAA,CAAA3F,GACAA,EAAAoE,YAAA,IACAJ,GAAAD,IACAE,EAAA,GACAH,EAAAsC,GAEA,EACAI,EAAA,KACAxC,EAAA,GACAC,EAAA,GACAjE,EAAAoE,YAAA,EACAN,EAAAsC,EAEA,EAeA,OAAajB,SAdbvB,EAAAW,MAAA,EAAAC,EAAApE,KACA,IAAA8E,EAAAZ,CAAA,CAAAlE,EAAA,CAMA,OALAoE,CAAA,CAAApE,EAAA,EAAAuF,EAAAP,EAAA,GAAAC,EAAA,MACArB,GACAwC,IACAtB,EAAAC,QAAA,CAAAQ,EAAAP,EAAAC,IAEAb,CACA,EAAK,IAMQiB,OALb,IACA,QAAA7F,EAAA,EAAwBA,EAAAgE,EAAAjE,MAAA,CAAuBC,IAC/C0E,CAAA,CAAAV,CAAA,CAAAhE,EAAA,EAAA6F,MAAA,CAAAE,EAEA,EACa3F,MAAAA,EAAAsE,MAAAA,CAAA,CACb,CCpEA,IAAQa,SAAUsB,CAAK,CAAAhB,OAAAiB,CAAA,CAAA1G,MAAA4F,CAAA,CAAAtB,MAAAA,CAAA,EAAoDT,EAAmB,oBAAA8C,sBAAAA,sBAAwEC,EAAAC,CAAI,KCA1KC,EAAA,iBAAAC,IAAA,CAAA7H,kBEAA,IAAA8H,EAAA,kCAAAD,IAAA,CAAA7H,GCHA+H,EAAA,uBAAA7G,GAAAA,EAAAsC,UAAA,CAAAwE,GACAC,EAAAF,EAAA,MACAG,EAAAH,EAAA,UACAI,EAAA,GAEA,EADAD,EAAAjH,IAIAmH,EAAAP,IAAA,CAAA5G,EAAAoH,KAAA,UAAAC,IAAA,IAEAF,EAAA,sFCGAG,EAEA,2DCfAC,EAAA,CAAAnB,EAAAD,EAAApH,IACA,EAAAoH,EACAA,EACApH,EAAAqH,EACAA,EACArH,ECHAyI,EAAA,CACAZ,KAAA,oBAAA7H,EACA0I,MAAAC,WACAC,UAAA,GAAA5I,CACA,EACA6I,EAAA,CACA,GAAAJ,CAAA,CACAG,UAAA,GAAsBJ,EAAK,IAAAxI,EAC3B,EACA8I,EAAA,CACA,GAAAL,CAAA,CACAM,QAAA,CACA,ECRAC,EAAA,GAAAjG,KAAAkG,KAAA,CAAAjJ,IAAAA,GAAA,IACAkJ,EAAA,8BACAC,EAAA,qHACAC,EAAA,sHACA,SAAAC,GAAArJ,CAAA,EACA,uBAAAA,CACA,CCVA,IAAAsJ,GAAA,KACAzB,KAAA,GAAiBwB,GAAQrJ,IAAAA,EAAAuJ,QAAA,CAAAC,IAAAxJ,IAAAA,EAAAqI,KAAA,MAAA5H,MAAA,CACzBiI,MAAAC,WACAC,UAAA,MAAyB5I,EAAE,EAAEwJ,EAAK,EAClC,EACAC,GAAAH,GAAA,OACAI,GAAAJ,GAAA,KACAK,GAAAL,GAAA,MACAM,GAAAN,GAAA,MACAO,GAAAP,GAAA,MACAQ,GAAA,CACA,GAAAJ,EAAA,CACAhB,MAAA,GAAAgB,GAAAhB,KAAA,CAAA1I,GAAA,IACA4I,UAAA,GAAAc,GAAAd,SAAA,CAAA5I,IAAAA,EACA,ECZA+J,GAAA,IAAA5H,IAAA,CACA,QACA,SACA,MACA,OACA,QACA,SACA,IACA,IACA,aACA,aACA,EACA6H,GAAA,GAAAhK,IAAmCyI,GAAMzI,IAAU2J,GACnDM,GAAA,CAAAC,EAAAC,IAAAxB,WAAAuB,EAAA7B,KAAA,OAAA8B,EAAA,EACAC,GAAA,CAAAC,EAAAC,IAAA,CAAAC,EAAA,CAAyD3B,UAAAA,CAAA,CAAW,IACpE,GAAAA,SAAAA,GAAA,CAAAA,EACA,SACA,IAAA4B,EAAA5B,EAAA6B,KAAA,wBACA,GAAAD,EACA,OAAAP,GAAAO,CAAA,IAAAF,EAEA,EACA,IAAAJ,EAAAtB,EAAA6B,KAAA,6BACA,EACAR,GAAAC,CAAA,IAAAG,GAGA,CAEA,CACA,EACAK,GAAA,IAAAvI,IAAA,eACAwI,GAAsC1I,EAAkBoC,MAAA,KAAAqG,GAAAnH,GAAA,CAAArC,IAYxD0J,GAAA,CAEAC,MAAA,EAAcC,EAAAA,CAAA,CAAG,EAAIC,YAAAA,EAAA,IAAAC,aAAAA,EAAA,IAAuC,GAAAF,EAAA1D,GAAA,CAAA0D,EAAAzD,GAAA,CAAAsB,WAAAoC,GAAApC,WAAAqC,GAC5DC,OAAA,EAAeC,EAAAA,CAAA,CAAG,EAAIC,WAAAA,EAAA,IAAAC,cAAAA,EAAA,IAAuC,GAAAF,EAAA9D,GAAA,CAAA8D,EAAA7D,GAAA,CAAAsB,WAAAwC,GAAAxC,WAAAyC,GAC7DC,IAAA,CAAAd,EAAA,CAAmBc,IAAAA,CAAA,CAAK,GAAA1C,WAAA0C,GACxBC,KAAA,CAAAf,EAAA,CAAoBe,KAAAA,CAAA,CAAM,GAAA3C,WAAA2C,GAC1BC,OAAA,EAAeL,EAAAA,CAAA,CAAG,EAAIG,IAAAA,CAAA,CAAK,GAAA1C,WAAA0C,GAAAH,CAAAA,EAAA9D,GAAA,CAAA8D,EAAA7D,GAAA,EAC3BmE,MAAA,EAAcV,EAAAA,CAAA,CAAG,EAAIQ,KAAAA,CAAA,CAAM,GAAA3C,WAAA2C,GAAAR,CAAAA,EAAA1D,GAAA,CAAA0D,EAAAzD,GAAA,EAE3ByD,EAAAV,GAAA,MACAc,EAAAd,GAAA,KACA,CAEAQ,CAAAA,GAAAa,UAAA,CAAAb,GAAAE,CAAA,CACAF,GAAAc,UAAA,CAAAd,GAAAM,CAAA,CC3DA,IAAAS,GAAA,MAAAlJ,EAAAoF,IAAA,CAAA7H,GEKA4L,GAAA,CAA6BnD,EAAQkB,GAAID,GAASD,GAASI,GAAID,GDL/D,CACA/B,KAAA,GAAA7H,SAAAA,EACA0I,MAAA,GAAA1I,CACA,ECEuE,CAIvE6L,GAAA,GAAAD,GAAAE,IAAA,CAA+DH,GAAa3L,ICT5E+L,GAAA,IAAA5J,IACA6J,GAAA,GACAC,GAAA,GACA,SAAAC,KACA,GAAAD,GAAA,CACA,IAAAE,EAAAhM,MAAAiM,IAAA,CAAAL,IAAA1H,MAAA,IAAAgI,EAAAC,gBAAA,EACAC,EAAA,IAAApK,IAAAgK,EAAAK,GAAA,IAAAH,EAAAI,OAAA,GACAC,EAAA,IAAAC,IAKAJ,EAAAvL,OAAA,KACA,IAAA4L,EAAsCC,SJqBtChM,CAAA,EACA,IAAA+L,EAAA,GAQA,OAPAjC,GAAA3J,OAAA,KACA,IAAAC,EAAAJ,EAAAiM,QAAA,CAAA5L,EACAS,MAAAA,IAAAV,IACA2L,EAAAG,IAAA,EAAA7L,EAAAD,EAAAE,GAAA,KACAF,EAAA+L,GAAA,CAAA9L,EAAAsC,UAAA,eAEA,GACAoJ,CACA,EI/BqEH,EACrEG,CAAAA,EAAAnM,MAAA,GAEAiM,EAAAM,GAAA,CAAAP,EAAAG,GACAH,EAAAzF,MAAA,GACA,GAEAmF,EAAAnL,OAAA,IAAAqL,EAAAY,mBAAA,IAEAV,EAAAvL,OAAA,KACAyL,EAAAzF,MAAA,GACA,IAAAkG,EAAAR,EAAAvL,GAAA,CAAAsL,GACAS,GACAA,EAAAlM,OAAA,GAAAE,EAAAD,EAAA,IACA,IAAAkM,CACA,QAAAA,CAAAA,EAAAV,EAAAK,QAAA,CAAA5L,EAAA,GAAAiM,KAAA,IAAAA,GAAAA,EAAAH,GAAA,CAAA/L,EACA,EAEA,GAEAkL,EAAAnL,OAAA,IAAAqL,EAAAe,eAAA,IAEAjB,EAAAnL,OAAA,KACAW,KAAAA,IAAA0K,EAAAgB,gBAAA,EACAC,OAAAC,QAAA,GAAAlB,EAAAgB,gBAAA,CAEA,EACA,CACApB,GAAA,GACAD,GAAA,GACAD,GAAA/K,OAAA,IAAAqL,EAAAmB,QAAA,IACAzB,GAAApF,KAAA,EACA,CACA,SAAA8G,KACA1B,GAAA/K,OAAA,KACAqL,EAAAqB,aAAA,GACArB,EAAAC,gBAAA,EACAL,CAAAA,GAAA,GAEA,EACA,CAKA,MAAA0B,GACAC,YAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAvB,CAAA,CAAAwB,EAAA,IAKA,KAAAC,UAAA,IAMA,KAAAD,OAAA,IAKA,KAAA3B,gBAAA,IAKA,KAAAN,WAAA,IACA,KAAA6B,mBAAA,KAAAA,EAAA,CACA,KAAAC,UAAA,CAAAA,EACA,KAAAC,IAAA,CAAAA,EACA,KAAAC,WAAA,CAAAA,EACA,KAAAvB,OAAA,CAAAA,EACA,KAAAwB,OAAA,CAAAA,CACA,CACAE,iBAAA,CACA,KAAAnC,WAAA,IACA,KAAAiC,OAAA,EACAlC,GAAAzF,GAAA,OACA0F,KACAA,GAAA,GACgBzE,EAAKX,IAAA,CAAA6G,IACLlG,EAAKV,gBAAA,CAAAqF,OAIrB,KAAAwB,aAAA,GACA,KAAAF,QAAA,GAEA,CACAE,eAAA,CACA,IAAgBG,oBAAAA,CAAA,CAAAE,KAAAA,CAAA,CAAAtB,QAAAA,CAAA,CAAAuB,YAAAA,CAAA,EAAkD,KAKlE,QAAAtN,EAAA,EAAwBA,EAAAmN,EAAApN,MAAA,CAAgCC,IACxD,GAAAmN,OAAAA,CAAA,CAAAnN,EAAA,EAIA,GAAAA,IAAAA,EAAA,CACA,IAAA0N,EAAAJ,MAAAA,EAAA,OAAAA,EAAA7M,GAAA,GACAgD,EAAA0J,CAAA,CAAAA,EAAApN,MAAA,IACA,GAAA2N,KAAAzM,IAAAyM,EACAP,CAAA,IAAAO,OAEA,GAAA3B,GAAAsB,EAAA,CACA,IAAAM,EAAA5B,EAAA6B,SAAA,CAAAP,EAAA5J,SACAkK,GACAR,CAAAA,CAAA,IAAAQ,CAAA,CAEA,CACA1M,KAAAA,IAAAkM,CAAA,KACAA,CAAAA,CAAA,IAAA1J,CAAA,EAEA6J,GAAAI,KAAAzM,IAAAyM,GACAJ,EAAAhB,GAAA,CAAAa,CAAA,IAEA,MAEAA,CAAA,CAAAnN,EAAA,CAAAmN,CAAA,CAAAnN,EAAA,GAIA,CACA6N,kBAAA,EACAtB,qBAAA,EACAuB,iBAAA,EACApB,iBAAA,EACAI,UAAA,CACA,KAAAU,UAAA,IACA,KAAAJ,UAAA,MAAAD,mBAAA,MAAA1J,aAAA,EACA4H,GAAAvF,MAAA,MACA,CACAD,QAAA,CACA,KAAA2H,UAAA,GACA,KAAAlC,WAAA,IACAD,GAAAvF,MAAA,OAEA,CACAiI,QAAA,CACA,KAAAP,UAAA,EACA,KAAAC,eAAA,EACA,CACA,CC3JA,IAAAO,GAAA,CAAAjM,EAAAkM,IAAA,GACAC,CAAAA,CAAA,IAA4B5O,IAAOoJ,EAAgBvB,IAAA,CAAA7H,IAAAA,EAAAwD,UAAA,CAAAf,IACnDkM,GACA,MAAsB3O,GACtB6O,OAAAC,SAAA,CAAAC,cAAA,CAAAC,IAAA,CAAAhP,EAAA2O,EAAA,EAEAM,GAAA,CAAAC,EAAAC,EAAAC,IAAA,IACA,IAAS/F,GAAQrJ,GACjB,OAAAA,EACA,IAAAqP,EAAAC,EAAAC,EAAA1G,EAAA,CAAA7I,EAAAyK,KAAA,CAAqCvB,GACrC,OACA,CAAAgG,EAAA,CAAAvG,WAAA0G,GACA,CAAAF,EAAA,CAAAxG,WAAA2G,GACA,CAAAF,EAAA,CAAAzG,WAAA4G,GACA1G,MAAAA,KAAAlH,IAAAkH,EAAAF,WAAAE,GAAA,CACA,CACA,ECjBA2G,GAAA,GAA4BhH,EAAK,MAAAxI,GACjCyP,GAAA,CACA,GAAOhH,CAAM,CACbG,UAAA,GAAA7F,KAAAkG,KAAA,CAAAuG,GAAAxP,GACA,EACA0P,GAAA,CACA7H,KAAwB6G,GAAa,aACrChG,MAAyBuG,GAAU,sBACnCrG,UAAA,EAAkB+G,IAAAA,CAAA,CAAAC,MAAAA,CAAA,CAAAC,KAAAA,CAAA,CAAAhH,MAAAiH,EAAA,EAAsC,WACxDL,GAAA7G,SAAA,CAAA+G,GACA,KACAF,GAAA7G,SAAA,CAAAgH,GACA,KACAH,GAAA7G,SAAA,CAAAiH,GACA,KACQ7G,EAASH,EAAKD,SAAA,CAAAkH,IACtB,GACA,ECWAC,GAAA,CACAlI,KAAwB6G,GAAa,KACrChG,MAhCA,SAAA1I,CAAA,EACA,IAAAgQ,EAAA,GACAC,EAAA,GACAX,EAAA,GACAD,EAAA,GAmBA,OAjBArP,EAAAS,MAAA,IACAuP,EAAAhQ,EAAAkQ,SAAA,MACAD,EAAAjQ,EAAAkQ,SAAA,MACAZ,EAAAtP,EAAAkQ,SAAA,MACAb,EAAArP,EAAAkQ,SAAA,QAIAF,EAAAhQ,EAAAkQ,SAAA,MACAD,EAAAjQ,EAAAkQ,SAAA,MACAZ,EAAAtP,EAAAkQ,SAAA,MACAb,EAAArP,EAAAkQ,SAAA,MACAF,GAAAA,EACAC,GAAAA,EACAX,GAAAA,EACAD,GAAAA,GAEA,CACAM,IAAAQ,SAAAH,EAAA,IACAJ,MAAAO,SAAAF,EAAA,IACAJ,KAAAM,SAAAb,EAAA,IACAzG,MAAAwG,EAAAc,SAAAd,EAAA,SACA,CACA,EAIAzG,UAAe8G,GAAI9G,SAAA,EC/BnBwH,GAAA,CACAvI,KAAwB6G,GAAa,aACrChG,MAAyBuG,GAAU,gCACnCrG,UAAA,EAAkByH,IAAAA,CAAA,CAAAC,WAAAA,CAAA,CAAAC,UAAAA,CAAA,CAAA1H,MAAAiH,EAAA,EAAgD,GAClE,QACA/M,KAAAkG,KAAA,CAAAoH,GACA,KACY3G,GAAOd,SAAA,CAAWI,EAAQsH,IACtC,KACY5G,GAAOd,SAAA,CAAWI,EAAQuH,IACtC,KACYvH,EAASH,EAAKD,SAAA,CAAAkH,IAC1B,GAEA,ECdAU,GAAA,CACA3I,KAAA,GAAiB6H,GAAI7H,IAAA,CAAA7H,IAAY+P,GAAGlI,IAAA,CAAA7H,IAAYoQ,GAAIvI,IAAA,CAAA7H,GACpD0I,MAAA,GACA,GAAgBb,IAAA,CAAA7H,GACG0P,GAAIhH,KAAA,CAAA1I,GAENoQ,GAAIvI,IAAA,CAAA7H,GACFoQ,GAAI1H,KAAA,CAAA1I,GAGJ+P,GAAGrH,KAAA,CAAA1I,GAGtB4I,UAAA,GACeS,GAAQrJ,GACvBA,EACAA,EAAA+O,cAAA,QACkBW,GAAI9G,SAAA,CAAA5I,GACJoQ,GAAIxH,SAAA,CAAA5I,EAEtB,ECdAyQ,GAAA,SACAC,GAAA,QAKAC,GAAA,kOACA,SAAAC,GAAA3P,CAAA,EACA,IAAA4P,EAAA5P,EAAA6P,QAAA,GACA/P,EAAA,GACAgQ,EAAA,CACAP,MAAA,GACA/H,OAAA,GACAuI,IAAA,IAEAC,EAAA,GACAvQ,EAAA,EAoBA2H,EAAA6I,EAnBAC,OAAA,CAAAR,GAAA,IACYH,GAAK3I,IAAA,CAAAuJ,IACjBL,EAAAP,KAAA,CAAAzD,IAAA,CAAArM,GACAuQ,EAAAlE,IAAA,CAAA2D,IACA3P,EAAAgM,IAAA,CAAwByD,GAAK9H,KAAA,CAAA0I,KAE7BA,EAAA5N,UAAA,CApBA,SAqBAuN,EAAAC,GAAA,CAAAjE,IAAA,CAAArM,GACAuQ,EAAAlE,IAAA,CAvBA,OAwBAhM,EAAAgM,IAAA,CAAAqE,KAGAL,EAAAtI,MAAA,CAAAsE,IAAA,CAAArM,GACAuQ,EAAAlE,IAAA,CAAA0D,IACA1P,EAAAgM,IAAA,CAAApE,WAAAyI,KAEA,EAAA1Q,EA7BA,QAgCA2H,KAAA,CAhCA,OAiCA,OAAatH,OAAAA,EAAAsH,MAAAA,EAAA0I,QAAAA,EAAAE,MAAAA,CAAA,CACb,CACA,SAAAI,GAAArR,CAAA,EACA,OAAA4Q,GAAA5Q,GAAAe,MAAA,CAEA,SAAAuQ,GAAAC,CAAA,EACA,IAAYlJ,MAAAA,CAAA,CAAA4I,MAAAA,CAAA,EAAeL,GAAAW,GAC3BC,EAAAnJ,EAAA5H,MAAA,CACA,WACA,IAAAgR,EAAA,GACA,QAAA/Q,EAAA,EAAwBA,EAAA8Q,EAAiB9Q,IAEzC,GADA+Q,GAAApJ,CAAA,CAAA3H,EAAA,CACAV,KAAA2B,IAAA3B,CAAA,CAAAU,EAAA,EACA,IAAA+B,EAAAwO,CAAA,CAAAvQ,EAAA,CACA+B,IAAAgO,GACAgB,GAA8BzI,EAAQhJ,CAAA,CAAAU,EAAA,EAEtC+B,IAAAiO,GACAe,GAA8BjB,GAAK5H,SAAA,CAAA5I,CAAA,CAAAU,EAAA,EAGnC+Q,GAAAzR,CAAA,CAAAU,EAAA,CAIA,OAAA+Q,CACA,CACA,CACA,IAAAC,GAAA,oBAAA1R,EAAA,EAAAA,EAMA2R,GAAA,CACA9J,KAhFA,SAAA7H,CAAA,EACA,IAAAmN,EAAAyE,EACA,OAAAC,MAAA7R,IACQqJ,GAAQrJ,IAChB,SAAAmN,CAAAA,EAAAnN,EAAAyK,KAAA,CAAwBvB,EAAU,GAAAiE,KAAA,IAAAA,EAAA,OAAAA,EAAA1M,MAAA,MAClC,SAAAmR,CAAAA,EAAA5R,EAAAyK,KAAA,CAA4BtB,EAAU,GAAAyI,KAAA,IAAAA,EAAA,OAAAA,EAAAnR,MAAA,MACtC,CACA,EA0EAiI,MAAA2I,GACAC,kBAAAA,GACAQ,kBATA,SAAA9R,CAAA,EACA,IAAA+R,EAAAV,GAAArR,GAEA,OAAAgS,GADAhS,GACA+R,EAAAvF,GAAA,CAAAkF,IACA,CAMA,ECjFAO,GAAA,IAAA9P,IAAA,gDACA,SAAA+P,GAAAlS,CAAA,EACA,IAAA+N,EAAA9M,EAAA,CAAAjB,EAAAmS,KAAA,OAAA9J,KAAA,MACA,GAAA0F,gBAAAA,EACA,OAAA/N,EACA,IAAAyI,EAAA,CAAAxH,EAAAwJ,KAAA,CAAiCvB,IAAU,GAC3C,IAAAT,EACA,OAAAzI,EACA,IAAAwJ,EAAAvI,EAAAkQ,OAAA,CAAA1I,EAAA,IACA2J,EAAAH,GAAA1O,GAAA,CAAAwK,GAAA,IAGA,OAFAtF,IAAAxH,GACAmR,CAAAA,GAAA,KACArE,EAAA,IAAAqE,EAAA5I,EAAA,GACA,CACA,IAAA6I,GAAA,uBACAhO,GAAA,CACA,GAAOsN,EAAO,CACdG,kBAAA,IACA,IAAAQ,EAAAtS,EAAAyK,KAAA,CAAA4H,IACA,OAAAC,EAAAA,EAAA9F,GAAA,CAAA0F,IAAAK,IAAA,MAAAvS,CACA,CACA,ECzBMwS,GAAG,CACT,GAAO/J,CAAM,CACbG,UAAA7F,KAAAkG,KAAA,ECAAwJ,GAAA,CAEAC,YAAiB/I,GACjBgJ,eAAoBhJ,GACpBiJ,iBAAsBjJ,GACtBkJ,kBAAuBlJ,GACvBmJ,gBAAqBnJ,GACrBoJ,aAAkBpJ,GAClBqJ,OAAYrJ,GACZsJ,oBAAyBtJ,GACzBuJ,qBAA0BvJ,GAC1BwJ,wBAA6BxJ,GAC7ByJ,uBAA4BzJ,GAE5BkB,MAAWlB,GACX0J,SAAc1J,GACdsB,OAAYtB,GACZ2J,UAAe3J,GACf4J,KAAU5J,GACV0B,IAAS1B,GACT6B,MAAW7B,GACX4B,OAAY5B,GACZ2B,KAAU3B,GAEV6J,QAAa7J,GACbwB,WAAgBxB,GAChBqB,aAAkBrB,GAClByB,cAAmBzB,GACnBoB,YAAiBpB,GACjB8J,OAAY9J,GACZ+J,UAAe/J,GACfgK,YAAiBhK,GACjBiK,aAAkBjK,GAClBkK,WAAgBlK,GAEhBmK,OAAYrK,GACZsK,QAAatK,GACbuK,QAAavK,GACbwK,QAAaxK,GACbX,MAASA,EACToL,OAAYpL,EACZqL,OAAYrL,EACZsL,OAAYtL,EACZuL,KAAU5K,GACV6K,MAAW7K,GACX8K,MAAW9K,GACX+K,SAAc7K,GACd8B,WAAgB9B,GAChB+B,WAAgB/B,GAChB8K,WAAgB9K,GAChBmB,EAAOnB,GACPuB,EAAOvB,GACP+K,EAAO/K,GACPgL,YAAiBhL,GACjBiL,qBAA0BjL,GAC1BkL,QAAahM,EACbiM,QAAahL,GACbiL,QAAajL,GACbkL,QAAarL,GAEbsL,OAAYzC,GACZ0C,oBAAyBvL,GACzBwL,oBAAyBxL,GAEzByL,YAAiBvM,EACjBwM,cAAmBxM,EACnByM,WAAgB9C,EAChB,EChEA+C,GAAA,CACA,GAAO9C,EAAgB,CAEvBjC,MAASA,GACTgF,gBAAqBhF,GACrBiF,aAAkBjF,GAClBkF,KAAUlF,GACVmF,OAAYnF,GAEZoF,YAAiBpF,GACjBqF,eAAoBrF,GACpBsF,iBAAsBtF,GACtBuF,kBAAuBvF,GACvBwF,gBAAqBxF,GACrBnM,OAAUA,GACV4R,aAAkB5R,EAClB,EAIA6R,GAAA,GAAAX,EAAA,CAAArU,EAAA,CCvBA,SAASiV,GAAiBjV,CAAA,CAAAD,CAAA,EAC1B,IAAAmV,EAA2BF,GAAmBhV,GAI9C,OAHAkV,IAA6B/R,IAC7B+R,CAAAA,EAA2BzE,EAAA,EAE3ByE,EAAAtE,iBAAA,CACAsE,EAAAtE,iBAAA,CAAA7Q,GACAU,KAAAA,CACA,CCHA,IAAA0U,GAAA,IAAAlU,IAAA,oBCDA,OAAAmU,WAAmC3I,GACnCC,YAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAvB,CAAA,EACA,MAAAoB,EAAAC,EAAAC,EAAAC,EAAAvB,EAAA,GACA,CACAiB,eAAA,CACA,IAAgBG,oBAAAA,CAAA,CAAApB,QAAAA,CAAA,CAAAsB,KAAAA,CAAA,EAAqC,KACrD,IAAAtB,GAAA,CAAAA,EAAAhL,OAAA,CACA,OACA,MAAAiM,gBAIA,QAAAhN,EAAA,EAAwBA,EAAAmN,EAAApN,MAAA,CAAgCC,IAAA,CACxD,IAAA6V,EAAA1I,CAAA,CAAAnN,EAAA,CACA,oBAAA6V,GAEoBpO,EADpBoO,EAAAA,EAAAjO,IAAA,IACsC,CACtC,IAAAkO,EAAqCC,StBDrCA,EAAAhV,CAAA,CAAAgL,CAAA,CAAAiK,EAAA,GACI,GAAAC,EAAAC,CAAA,EAASF,GAFb,EAEa,yDAA6EjV,EAAQ,uDAClG,IAAAuG,EAAA6O,EAAA,CAAAC,SAVArV,CAAA,EACA,IAAAgJ,EAAAlC,EAAAwO,IAAA,CAAAtV,GACA,IAAAgJ,EACA,UACA,KAAAuM,EAAAC,EAAAJ,EAAA,CAAApM,EACA,YAAiBuM,MAAAA,EAAAA,EAAAC,EAAuD,EAAAJ,EAAA,EAKxEpV,GAEA,IAAAuG,EACA,OAEA,IAAAwO,EAAAlJ,OAAA4J,gBAAA,CAAAzK,GAAA0K,gBAAA,CAAAnP,GACA,GAAAwO,EAAA,CACA,IAAAY,EAAAZ,EAAAlO,IAAA,GACA,OAAeR,EAAiBsP,GAAAzO,WAAAyO,GAAAA,CAChC,CACA,OAAWjP,EAAkB0O,GAC7BJ,EAAAI,EAAApK,EAAAiK,EAAA,GACAG,CACA,EsBdqDN,EAAA9J,EAAAhL,OAAA,CACrDE,MAAAA,IAAA6U,GACA3I,CAAAA,CAAA,CAAAnN,EAAA,CAAA8V,CAAA,EAEA9V,IAAAmN,EAAApN,MAAA,IACA,MAAA0D,aAAA,CAAAoS,CAAA,CAEA,CAEA,CAaA,GAPA,KAAAc,oBAAA,GAOA,CAAatN,GAAcxG,GAAA,CAAAwK,IAAAF,IAAAA,EAAApN,MAAA,CAC3B,OAEA,IAAA6W,EAAAxU,EAAA,CAAA+K,EACA0J,EAA2B1L,GAAsByL,GACjDE,EAA2B3L,GAAsB/I,GAIjD,GAAAyU,IAAAC,GAMA,GAAYxN,GAAauN,IAAgBvN,GAAawN,GACtD,QAAA9W,EAAA,EAA4BA,EAAAmN,EAAApN,MAAA,CAAgCC,IAAA,CAC5D,IAAAO,EAAA4M,CAAA,CAAAnN,EAAA,CACA,iBAAAO,GACA4M,CAAAA,CAAA,CAAAnN,EAAA,CAAAiI,WAAA1H,EAAA,CAEA,MAMA,KAAAqL,gBAAA,IAEA,CACA+K,sBAAA,CACA,IAAgBxJ,oBAAAA,CAAA,CAAAE,KAAAA,CAAA,EAA4B,KAC5C0J,EAAA,GACA,QAAA/W,EAAA,EAAwBA,EAAAmN,EAAApN,MAAA,CAAgCC,IAAA,KzB9ExDO,EACA,kBADAA,EyB+EsB4M,CAAA,CAAAnN,EAAA,EzB7EtBO,IAAAA,EAEA,OAAAA,GACAA,SAAAA,GAAAA,MAAAA,GAAoD2G,EAAiB3G,EAIrE,GyBuEAwW,EAAA1K,IAAA,CAAArM,EAEA,CACA+W,EAAAhX,MAAA,EACYiX,SD5EZ7J,CAAA,CAAA4J,CAAA,CAAA1J,CAAA,EACA,IACA4J,EADAjX,EAAA,EAEA,KAAAA,EAAAmN,EAAApN,MAAA,GAAAkX,GAAA,CACA,IAAApB,EAAA1I,CAAA,CAAAnN,EAAA,CACA,iBAAA6V,GACA,CAAAF,GAAA9S,GAAA,CAAAgT,IACY3F,GAAmB2F,GAAAxV,MAAA,CAAAN,MAAA,EAC/BkX,CAAAA,EAAA9J,CAAA,CAAAnN,EAAA,EAEAA,GACA,CACA,GAAAiX,GAAA5J,EACA,QAAA6J,KAAAH,EACA5J,CAAA,CAAA+J,EAAA,CAA6CzB,GAAiBpI,EAAA4J,EAG9D,EC2DuC9J,EAAA4J,EAAA1J,EAEvC,CACAd,qBAAA,CACA,IAAgBR,QAAAA,CAAA,CAAAoB,oBAAAA,CAAA,CAAAE,KAAAA,CAAA,EAAqC,KACrD,IAAAtB,GAAA,CAAAA,EAAAhL,OAAA,CACA,MACA,YAAAsM,GACA,MAAAV,gBAAA,CAAAC,OAAAuK,WAAA,EAEA,KAAAC,cAAA,CAA8BlN,EAAgB,CAAAmD,EAAA,CAAAtB,EAAAsL,kBAAA,GAAAzK,OAAA4J,gBAAA,CAAAzK,EAAAhL,OAAA,GAC9CoM,CAAA,SAAAiK,cAAA,CAEA,IAAAE,EAAAnK,CAAA,CAAAA,EAAApN,MAAA,SACAkB,IAAAqW,GACAvL,EAAAK,QAAA,CAAAiB,EAAAiK,GAAAC,IAAA,CAAAD,EAAA,GAEA,CACA5K,iBAAA,CACA,IAAAD,EACA,IAAgBV,QAAAA,CAAA,CAAAsB,KAAAA,CAAA,CAAAF,oBAAAA,CAAA,EAAqC,KACrD,IAAApB,GAAA,CAAAA,EAAAhL,OAAA,CACA,OACA,IAAAR,EAAAwL,EAAAK,QAAA,CAAAiB,EACA9M,CAAAA,GAAAA,EAAAgX,IAAA,MAAAH,cAAA,KACA,IAAAI,EAAArK,EAAApN,MAAA,GACA0D,EAAA0J,CAAA,CAAAqK,EAAA,CACArK,CAAA,CAAAqK,EAAA,CAAkDtN,EAAgB,CAAAmD,EAAA,CAAAtB,EAAAsL,kBAAA,GAAAzK,OAAA4J,gBAAA,CAAAzK,EAAAhL,OAAA,GAClE,OAAA0C,GAAA,KAAAxC,IAAA,KAAAwC,aAAA,EACA,MAAAA,aAAA,CAAAA,CAAA,EAGA,QAAAgJ,CAAAA,EAAA,KAAAP,iBAAA,GAAAO,KAAA,IAAAA,EAAA,OAAAA,EAAA1M,MAAA,GACA,KAAAmM,iBAAA,CAAA5L,OAAA,GAAAmX,EAAAC,EAAA,IACA3L,EACAK,QAAA,CAAAqL,GACAnL,GAAA,CAAAoL,EACA,GAEA,KAAAf,oBAAA,EACA,CACA,CC/HA,SAAAgB,GAAAtS,CAAA,EACA,IAAAuS,EACA,WACA3W,KAAAA,IAAA2W,GACAA,CAAAA,EAAAvS,GAAA,EACAuS,EAEA,CCHA,SAAAC,KACAzY,EAAA6B,KAAAA,CACA,CASA,IAAA6W,GAAA,CACA1Y,IAAA,KACA6B,KAAAA,IAAA7B,GACA0Y,GAAAxL,GAAA,CAAqBtG,EAASxB,YAAA,EAAiBvB,EAAkBE,eAAA,CAC/C6C,EAASzB,SAAA,CAC3BkC,YAAArH,GAAA,IAEAA,GAEAkN,IAAA,IACAlN,EAAA2Y,EACAC,eAAAH,GACA,CACA,ECjBAI,GAAA,CAAA1X,EAAA8M,IAEA,WAAAA,MAKA,iBAAA9M,GAAAd,MAAAC,OAAA,CAAAa,IAEA,iBAAAA,GACS0Q,CAAAA,GAAO9J,IAAA,CAAA5G,IAAAA,MAAAA,CAAA,GAChB,CAAAA,EAAAuC,UAAA,SEPA,OAAAoV,GACAhL,YAAA,CAAkBiL,SAAAA,EAAA,GAAAC,MAAAA,EAAA,EAAArW,KAAAA,EAAA,YAAAwB,OAAAA,EAAA,EAAA8U,YAAAA,EAAA,EAAA7U,WAAAA,EAAA,UAAA8U,EAA8G,EAEhI,KAAAC,SAAA,IACA,KAAAC,mBAAA,IACA,KAAAC,SAAA,CAAyBX,GAAI1Y,GAAA,GAC7B,KAAAkZ,OAAA,EACAH,SAAAA,EACAC,MAAAA,EACArW,KAAAA,EACAwB,OAAAA,EACA8U,YAAAA,EACA7U,WAAAA,EACA,GAAA8U,CAAA,EAEA,KAAAI,qBAAA,EACA,CAWAC,eAAA,QACA,KAAAC,UAAA,EAEA,KAAAA,UAAA,MAAAH,SAAA,CA/BA,GAgCA,KAAAG,UAAA,CACA,KAAAH,SAAA,CAOA,IAAA3C,UAAA,CAIA,OAHA,KAAA+C,SAAA,OAAAL,mBAAA,GlBGAzL,KACAvB,MkBDA,KAAAqN,SAAA,CAOAC,oBAAAlW,CAAA,CAAAa,CAAA,EACA,KAAAmV,UAAA,CAA0Bd,GAAI1Y,GAAA,GAC9B,KAAAoZ,mBAAA,IACA,IAAgBnL,KAAAA,CAAA,CAAAtL,KAAAA,CAAA,CAAAf,SAAAA,CAAA,CAAAoX,MAAAA,CAAA,CAAAhL,WAAAA,CAAA,CAAA2L,SAAAA,CAAA,CAAAC,YAAAA,CAAA,EAAkE,KAAAV,OAAA,CAKlF,IAAAU,GAAA,CAA6BC,SD7D7BrW,CAAA,CAAAyK,CAAA,CAAAtL,CAAA,CAAAf,CAAA,EAMA,IAAAkY,EAAAtW,CAAA,IACA,GAAAsW,OAAAA,EACA,SAMA,GAAA7L,YAAAA,GAAAA,eAAAA,EACA,SACA,IAAA8L,EAAAvW,CAAA,CAAAA,EAAA7C,MAAA,IACAqZ,EAA+BnB,GAAYiB,EAAA7L,GAC3CgM,EAA+BpB,GAAYkB,EAAA9L,SAG3C,CAFI,EAAA4I,EAAAqD,CAAA,EAAOF,IAAAC,EAAA,6BAAyEhM,EAAA,OAAM,EAAQ6L,EAAe,QAAQC,EAAe,KAAKD,EAAA,2DAAgB,EAA4DA,EAAA,0BAAgB,EAA2BC,EAAA,4BAAgB,KAEpRC,KAAAC,GAGAE,CAAAA,SAjCA3W,CAAA,EACA,IAAA7B,EAAA6B,CAAA,IACA,GAAAA,IAAAA,EAAA7C,MAAA,CACA,SACA,QAAAC,EAAA,EAAoBA,EAAA4C,EAAA7C,MAAA,CAAsBC,IAC1C,GAAA4C,CAAA,CAAA5C,EAAA,GAAAe,EACA,QAEA,EAyBA6B,IAAAb,WAAAA,GAAAf,CAAA,CACA,ECoCuC4B,EAAAyK,EAAAtL,EAAAf,GAAA,CAEvC,GAAgBoC,EAAqBrC,OAAA,GAAAqX,EAAA,CACrCW,MAAAA,GAAAA,EAA6EzV,EAAgBV,EAAA,KAAA0V,OAAA,CAAA7U,IAC7F2J,MAAAA,GAAAA,IACA,KAAAoM,sBAAA,GACA,MACA,CAGA,KAAAlB,OAAA,CAAA9V,QAAA,EAEA,CACA,IAAAiX,EAAA,KAAAC,YAAA,CAAA9W,EAAAa,EACA,MAAAgW,IAEA,KAAAZ,SAAA,EACAjW,UAAAA,EACAa,cAAAA,EACA,GAAAgW,CAAA,EAEA,KAAAE,cAAA,GACA,CACAA,gBAAA,EAMAC,KAAAC,CAAA,CAAAC,CAAA,EACA,YAAAC,sBAAA,CAAAH,IAAA,CAAAC,EAAAC,EACA,CACApB,uBAAA,CACA,KAAAqB,sBAAA,KAAAC,QAAA,IACA,KAAAR,sBAAA,CAAAK,CACA,EACA,CACA,CE3GA,SAAAI,GAAAC,CAAA,CAAAC,CAAA,CAAApZ,CAAA,MDGAC,EAAAoZ,ECFA,IAAAC,EAAAhY,KAAAqE,GAAA,CAAAyT,EAFA,EAEA,GACA,ODCAnZ,ECD4BD,EAAAmZ,EAAAG,GDE5BD,CADAA,ECD4BD,EAAAE,GDE5BrZ,IAAAoZ,EAAApZ,EAAA,CCDA,CC8EA,SAAAsZ,GAAAC,CAAA,CAAAC,CAAA,EACA,OAAAD,EAAAlY,KAAAC,IAAA,GAAAkY,EAAAA,EACA,CClFA,IAAAC,GAAA,sBACAC,GAAA,+BACA,SAAAC,GAAArC,CAAA,CAAAsC,CAAA,EACA,OAAAA,EAAAC,IAAA,IAAAvC,KAAArX,IAAAqX,CAAA,CAAA9X,EAAA,CACA,CAuBA,SAAAsa,GAAA,CAAkBlY,UAAAA,CAAA,CAAAmY,UAAAA,CAAA,CAAA7Y,UAAAA,CAAA,IAAAoW,EAA6C,MA0B/D0C,EAzBA,IAAApE,EAAAhU,CAAA,IACAR,EAAAQ,CAAA,CAAAA,EAAA7C,MAAA,IAKAK,EAAA,CAAoB6a,KAAA,GAAA1a,MAAAqW,CAAA,EACpB,CAAY5U,UAAAA,CAAA,CAAAC,QAAAA,CAAA,CAAAiZ,KAAAA,CAAA,CAAA1Y,SAAAA,CAAA,CAAAxB,SAAAA,CAAA,CAAAma,uBAAAA,CAAA,EAAwEC,SA9BpF9C,CAAA,EACA,IAAA+C,EAAA,CACAra,SAAA,EACAgB,UAAA,IACAC,QAAA,GACAiZ,KAAA,EACAC,uBAAA,GACA,GAAA7C,CAAA,EAGA,IAAAqC,GAAArC,EAAAoC,KACAC,GAAArC,EAAAmC,IAAA,CACA,IAAAa,EAAwBC,SDZxB,CAAsB/Y,SAAAA,EAAA,IAAAgZ,OAAAA,EAAA,IAAAxa,SAAAA,EAAA,EAAAka,KAAAA,EAAA,EAAwD,MAC9EO,EACAC,EACI,GAAAzF,EAAAqD,CAAA,EAAO9W,GAAad,EANxB,IAM6C,8CAC7C,IAAA8Y,EAAA,EAAAgB,EAIAhB,EAAmB1S,EAVnB,IACA,EASwB0S,GACxBhY,EAAesF,EAbf,IACA,GAY+ClG,EAAqBY,IACpEgY,EAAA,GAIAiB,EAAA,IACA,IAAAE,EAAApB,EAAAC,EACAlW,EAAAqX,EAAAnZ,EAIA,OAAAoZ,KAAA,CAHAD,EAAA3a,CAAA,EACAsZ,GAAAC,EAAAC,GACAnY,KAAAwZ,GAAA,EAAAvX,EAEA,EACAoX,EAAA,IAEA,IAAApX,EAAAqX,EADAnB,EACAhY,EAEAsZ,EAAAzZ,KAAA0Z,GAAA,CAAAvB,EAAA,GAAAnY,KAAA0Z,GAAA,CAAAxB,EAAA,GAAA/X,EAEA+M,EAAA+K,GAAAjY,KAAA0Z,GAAA,CAAAxB,EAAA,GAAAC,GAEA,OAAAwB,EALAhb,EAAAA,EAKA8a,CAAAA,EAHAzZ,KAAAwZ,GAAA,EAAAvX,GAEA,EAAAmX,EAAAlB,GAlCA,KAkCA,QACAhL,CACA,IAMAkM,EAAA,GAGA,MAAA9M,KAFAkN,GAAA,EAAAtB,EAAA/X,GACA,EAAA+X,EAAAvZ,CAAA,EAAAwB,EAAA,GAGAkZ,EAAA,GAGA/M,EADAnM,EAAAxB,CAAAA,EAAAuZ,CAAA,EADAlY,KAAAwZ,GAAA,EAAAtB,EAAA/X,IAMA,IAAA+X,EAAA0B,SAmBAR,CAAA,CAAAC,CAAA,CAAAQ,CAAA,EACA,IAAAtE,EAAAsE,EACA,QAAAlc,EAAA,EAAoBA,EAHpB,GAGwCA,IACxC4X,GAAA6D,EAAA7D,GAAA8D,EAAA9D,GAEA,OAAAA,CACA,EAzBA6D,EAAAC,EADA,EAAAlZ,GAGA,GADAA,EAAed,EAAqBc,GACpC2O,MAAAoJ,GACA,OACAvY,UAAA,IACAC,QAAA,GACAO,SAAAA,CACA,CAEA,EACA,IAAAR,EAAAK,KAAA0Z,GAAA,CAAAxB,EAAA,GAAAW,EACA,OACAlZ,UAAAA,EACAC,QAAAuY,EAAAA,EAAAnY,KAAAC,IAAA,CAAA4Y,EAAAlZ,GACAQ,SAAAA,CACA,CACA,CACA,ECtDkC8V,EAMlC+C,CALAA,CAAAA,EAAA,CACA,GAAAA,CAAA,CACA,GAAAC,CAAA,CACAJ,KAAA,CACA,GACAC,sBAAA,GACA,CACA,OAAAE,CACA,EASoF,CACpF,GAAA/C,CAAA,CACAtX,SAAA,CAAmBY,EAAqB0W,EAAAtX,QAAA,IACxC,GACAmb,EAAAnb,GAAA,EACAwZ,EAAAvY,EAAA,GAAAI,KAAAC,IAAA,CAAAN,EAAAkZ,EAAA,EACAkB,EAAAha,EAAAwU,EACAyF,EAAgCza,EAAqBS,KAAAC,IAAA,CAAAN,EAAAkZ,IAQrDoB,EAAAja,EAAAA,KAAAka,GAAA,CAAAH,GAIA,GAHAla,GAAAA,CAAAA,EAAAoa,EAAA,OACAvB,GAAAA,CAAAA,EAAAuB,EAAA,SAEA9B,EAAA,GACA,IAAAgC,EAA4BlC,GAAe+B,EAAA7B,GAE3CQ,EAAA,GAEA5Y,EACAqZ,KAFAI,GAAA,EAAArB,EAAA6B,EAAAlC,GAGA,EAAAgC,EACA3B,EAAA6B,EAAAD,CAAA,EACAI,EACAna,KAAAoa,GAAA,CAAAD,EAAArC,GACAiC,EAAA/Z,KAAAqa,GAAA,CAAAF,EAAArC,EAAA,CAEA,MACA,GAAAK,IAAAA,EAEAQ,EAAA,GAAA5Y,EACAC,KAAAwZ,GAAA,EAAAQ,EAAAlC,GACAiC,CAAAA,EACA,CAAAD,EAAAE,EAAAD,CAAA,EAAAjC,CAAAA,MAEA,CAEA,IAAAwC,EAAAN,EAAAha,KAAAC,IAAA,CAAAkY,EAAAA,EAAA,GACAQ,EAAA,IACA,IAAAS,EAAApZ,KAAAwZ,GAAA,EAAArB,EAAA6B,EAAAlC,GAEAyC,EAAAva,KAAAsE,GAAA,CAAAgW,EAAAxC,EAAA,KACA,OAAA/X,EACA,EACA,EAAA+Z,EACA3B,EAAA6B,EAAAD,CAAA,EACA/Z,KAAAwa,IAAA,CAAAD,GACAD,EACAP,EACA/Z,KAAAya,IAAA,CAAAF,EAAA,EACAD,CACA,CACA,CACA,OACAI,mBAAA5B,GAAA3Y,GAAA,KACA5C,KAAA,IACA,IAAAmB,EAAAia,EAAAb,GACA,GAAAgB,EAmBA/a,EAAA6a,IAAA,CAAAd,GAAA3X,MAnBA,CACA,IAAAwa,EAAA,EAMAxC,EAAA,GACAwC,CAAAA,EACA7C,IAAAA,EAC8BzY,EAAqBya,GACrBlC,GAAqBe,EAAAb,EAAApZ,EAAA,EAEnD,IAAAkc,EAAA5a,KAAAka,GAAA,CAAAS,IAAA9a,EACAgb,EAAA7a,KAAAka,GAAA,CAAAna,EAAArB,IAAAga,CACA3a,CAAAA,EAAA6a,IAAA,CACAgC,GAAAC,CACA,CAKA,OADA9c,EAAAG,KAAA,CAAAH,EAAA6a,IAAA,CAAA7Y,EAAArB,EACAX,CACA,CACA,CACA,CC3HA,SAAA+c,GAAA,CAAmBva,UAAAA,CAAA,CAAA5B,SAAAA,EAAA,EAAAoc,MAAAA,EAAA,GAAAC,aAAAA,EAAA,IAAAC,cAAAA,EAAA,GAAAC,gBAAAA,EAAA,IAAAC,aAAAA,CAAA,CAAA7W,IAAAA,CAAA,CAAAD,IAAAA,CAAA,CAAAqU,UAAAA,EAAA,GAAA7Y,UAAAA,CAAA,CAA4J,MAqC/Kub,EACAC,EArCA,IAAA9G,EAAAhU,CAAA,IACAxC,EAAA,CACA6a,KAAA,GACA1a,MAAAqW,CACA,EACA+G,EAAA,QAAA1c,IAAA0F,GAAArH,EAAAqH,GAAAD,KAAAzF,IAAAyF,GAAApH,EAAAoH,EACAkX,EAAA,GACA,KAAA3c,IAAA0F,EACAD,EACAA,KAAAzF,IAAAyF,EACAC,EACAtE,KAAAka,GAAA,CAAA5V,EAAArH,GAAA+C,KAAAka,GAAA,CAAA7V,EAAApH,GAAAqH,EAAAD,EAEAmX,EAAAT,EAAApc,EACA8c,EAAAlH,EAAAiH,EACAzb,EAAAob,KAAAvc,IAAAuc,EAAAM,EAAAN,EAAAM,GAKA1b,IAAA0b,GACAD,CAAAA,EAAAzb,EAAAwU,CAAA,EACA,IAAAmH,EAAA,IAAAF,EAAAxb,KAAAwZ,GAAA,EAAA1B,EAAAkD,GACAW,EAAA,GAAA5b,EAAA2b,EAAA5D,GACA8D,EAAA,IACA,IAAA3Z,EAAAyZ,EAAA5D,GACA+D,EAAAF,EAAA7D,EACA/Z,CAAAA,EAAA6a,IAAA,CAAA5Y,KAAAka,GAAA,CAAAjY,IAAAyW,EACA3a,EAAAG,KAAA,CAAAH,EAAA6a,IAAA,CAAA7Y,EAAA8b,CACA,EASAC,EAAA,IACAR,EAAAvd,EAAAG,KAAA,IAEAkd,EAAAtD,EACAuD,EAAmB5C,GAAM,CACzBlY,UAAA,CAAAxC,EAAAG,KAAA,CAAAqd,EAAAxd,EAAAG,KAAA,GACAS,SAAsBiZ,GAAqB+D,EAAA7D,EAAA/Z,EAAAG,KAAA,EAC3C0B,QAAAqb,EACAtb,UAAAub,EACAxC,UAAAA,EACA7Y,UAAAA,CACA,GACA,EAEA,OADAic,EAAA,GACA,CACApB,mBAAA,KACAnd,KAAA,IAOA,IAAAwe,EAAA,SAUA,CATAV,GAAAD,KAAAxc,IAAAwc,IACAW,EAAA,GACAH,EAAA9D,GACAgE,EAAAhE,IAMAsD,KAAAxc,IAAAwc,GAAAtD,GAAAsD,GACAC,EAAA9d,IAAA,CAAAua,EAAAsD,IAGA,GAAAQ,EAAA9D,GACA/Z,EAEA,CACA,CACA,CChEA,IAAAie,GAAA,CAAAlE,EAAAmE,EAAAC,IAAA,OAAAA,EAAA,EAAAD,CAAA,EAAAnE,EAAA,GAAAoE,EAAA,EAAAD,CAAA,GAAAnE,EAAA,EAAAmE,CAAA,EACAnE,EAoBA,SAAAqE,GAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,EAEA,GAAAH,IAAAC,GAAAC,IAAAC,EACA,OAAe5X,EAAAC,CAAI,CACnB,IAAA4X,EAAA,GAAAC,CArBA,SAAA1U,CAAA,CAAA2U,CAAA,CAAAC,CAAA,CAAAP,CAAA,CAAAE,CAAA,MACAM,EACAC,EACA,IAAAlf,EAAA,EACA,EAGAif,CADAA,EAAAZ,GADAa,EAAAH,EAAA,CAAAC,EAAAD,CAAA,IACAN,EAAAE,GAAAvU,CAAAA,EACA,EACA4U,EAAAE,EAGAH,EAAAG,QAEM7c,KAAAka,GAAA,CAAA0C,GAfN,MAgBA,EAAAjf,EAfA,GAeA,CACA,OAAAkf,CACA,GAKAC,EAAA,IAAAV,EAAAE,GAEA,UAAAxE,IAAAA,GAAAA,IAAAA,EAAAA,EAAAkE,GAAAQ,EAAA1E,GAAAuE,EAAAE,EACA,CC9CA,IAAAQ,GAA6BZ,GAAW,WACxCa,GAA8Bb,GAAW,WACzCc,GAAgCd,GAAW,aCJ3Ce,GAAA,GACA9f,MAAAC,OAAA,CAAA+C,IAAA,iBAAAA,CAAA,ICCA+c,GAAA,MAAAxgB,GAAA,GAAAygB,EAAA,EAAAzgB,GAAA,KAAAygB,EAAA,KAAAzgB,CAAAA,EAAA,ICAA0gB,GAAA,QAAAD,EAAA,EAAAzgB,GCCA2gB,GAAA,KAAAtd,KAAAoa,GAAA,CAAApa,KAAAud,IAAA,CAAA5gB,IACA6gB,GAAgBH,GAAaC,IAC7BG,GAAkBN,GAAYG,ICD9BI,GAA8BvB,GAAW,kBACzCwB,GAA6BN,GAAaK,IAC1CE,GAAgCT,GAAYQ,IEE5CE,GAAA,CACAC,OAAYnZ,EAAAC,CAAI,CAChBmY,OAAUA,GACVE,UAAaA,GACbD,QAAWA,GACXM,OAAUA,GACVG,UAAaA,GACbD,QAAWA,GACXG,OAAUA,GACVC,UAAaA,GACbF,QAAWA,GACXK,WDjBA,IAAAphB,GAAA,QAA+CghB,GAAMhhB,GAAA,MAAAqD,KAAA0Z,GAAA,OAAA/c,CAAAA,EAAA,ICkBrD,EACAqhB,GAAA,IACA,GAAA5gB,MAAAC,OAAA,CAAAmB,GAAA,CAEQ,GAAAoV,EAAAC,CAAA,EAASrV,IAAAA,EAAAd,MAAA,4DACjB,IAAAugB,EAAAC,EAAAC,EAAAC,EAAA,CAAA5f,EACA,OAAe2d,GAAW8B,EAAAC,EAAAC,EAAAC,EAC1B,OACA,iBAAA5f,GAEQ,GAAAoV,EAAAC,CAAA,EAASgK,KAAAjf,IAAAif,EAAA,CAAArf,EAAA,yBAAiEA,EAAW,IAC7Fqf,EAAA,CAAArf,EAAA,EAEAA,CACA,EC3BA6f,GAAA,CAAA/R,EAAAC,IAAA,GAAAA,EAAAD,EAAArP,IACAqhB,GAAA,IAAAC,IAAAA,EAAAjc,MAAA,CAAA+b,ICIAG,GAAA,CAAAnV,EAAAoV,EAAAvgB,KACA,IAAAwgB,EAAAD,EAAApV,EACA,OAAAqV,IAAAA,EAAA,GAAAxgB,EAAAmL,CAAA,EAAAqV,CACA,ECMAC,GAAA,CAAAtV,EAAAoV,EAAAD,IACAnV,EAAA,CAAAoV,EAAApV,CAAA,EAAAmV,ECrBA,SAAAI,GAAAjiB,CAAA,CAAAkiB,CAAA,CAAA/G,CAAA,QAKA,CAJAA,EAAA,GACAA,CAAAA,GAAA,GACAA,EAAA,GACAA,CAAAA,GAAA,GACAA,EAAA,KACAnb,EAAA,CAAAkiB,EAAAliB,CAAAA,EAAA,EAAAmb,EACAA,EAAA,GACA+G,EACA/G,EAAA,IACAnb,EAAA,CAAAkiB,EAAAliB,CAAAA,EAAA,KAAAmb,CAAAA,EAAA,EACAnb,CACA,CCbA,SAAAmiB,GAAAxS,CAAA,CAAAC,CAAA,EACA,UAAA5P,EAAA,EAAA4P,EAAAD,CACA,CCSA,IAAAyS,GAAA,CAAA1V,EAAAoV,EAAAxhB,KACA,IAAA+hB,EAAA3V,EAAAA,EACA4V,EAAAhiB,EAAAwhB,CAAAA,EAAAA,EAAAO,CAAA,EAAAA,EACA,OAAAC,EAAA,IAAAjf,KAAAC,IAAA,CAAAgf,EACA,EACAC,GAAA,CAAoBlS,GAAKL,GAAMU,GAAI,CACnC8R,GAAA,GAAAD,GAAAnW,IAAA,IAAArJ,EAAAoF,IAAA,CAAA7H,IACA,SAAAmiB,GAAA3R,CAAA,EACA,IAAA/N,EAAAyf,GAAA1R,GAEA,GADI,GAAAmG,EAAAqD,CAAA,EAAOpL,CAAAA,CAAAnM,EAAA,IAAoB+N,EAAM,uEACrC,CAAA/N,EACA,SACA,IAAA2f,EAAA3f,EAAAiG,KAAA,CAAA8H,GAKA,OAJA/N,IAAiB2N,IAEjBgS,CAAAA,EAAgBC,SFZhB,CAAsBhS,IAAAA,CAAA,CAAAC,WAAAA,CAAA,CAAAC,UAAAA,CAAA,CAAA1H,MAAAA,CAAA,CAAmC,EACzDwH,GAAA,IAEAE,GAAA,IACA,IAAAZ,EAAA,EACAC,EAAA,EACAC,EAAA,EACA,GALAS,GAAA,IAQA,CACA,IAAAsR,EAAArR,EAAA,GACAA,EAAA,GAAAD,CAAA,EACAC,EAAAD,EAAAC,EAAAD,EACA5Q,EAAA,EAAA6Q,EAAAqR,EACAjS,EAAAgS,GAAAjiB,EAAAkiB,EAAAvR,EAAA,KACAT,EAAA+R,GAAAjiB,EAAAkiB,EAAAvR,GACAR,EAAA8R,GAAAjiB,EAAAkiB,EAAAvR,EAAA,IACA,MAVAV,EAAAC,EAAAC,EAAAU,EAWA,OACAZ,IAAA5M,KAAAkG,KAAA,CAAA0G,IAAAA,GACAC,MAAA7M,KAAAkG,KAAA,CAAA2G,IAAAA,GACAC,KAAA9M,KAAAkG,KAAA,CAAA4G,IAAAA,GACAhH,MAAAA,CACA,CACA,EEb0BuZ,EAAA,EAE1BA,CACA,CACA,IAAAE,GAAA,CAAAlW,EAAAoV,KACA,IAAAe,EAAAJ,GAAA/V,GACAoW,EAAAL,GAAAX,GACA,IAAAe,GAAA,CAAAC,EACA,OAAeX,GAAYzV,EAAAoV,GAE3B,IAAAiB,EAAA,CAAsB,GAAAF,CAAA,EACtB,WACAE,EAAA9S,GAAA,CAAAmS,GAAAS,EAAA5S,GAAA,CAAA6S,EAAA7S,GAAA,CAAA3P,GACAyiB,EAAA7S,KAAA,CAAAkS,GAAAS,EAAA3S,KAAA,CAAA4S,EAAA5S,KAAA,CAAA5P,GACAyiB,EAAA5S,IAAA,CAAAiS,GAAAS,EAAA1S,IAAA,CAAA2S,EAAA3S,IAAA,CAAA7P,GACAyiB,EAAA5Z,KAAA,CAAwB6Y,GAASa,EAAA1Z,KAAA,CAAA2Z,EAAA3Z,KAAA,CAAA7I,GAClB0P,GAAI9G,SAAA,CAAA6Z,GAEnB,EC5CAC,GAAA,IAAAvgB,IAAA,mBCUA,SAASwgB,GAAStT,CAAA,CAAAC,CAAA,EAClB,UAAkBoS,GAAWrS,EAAAC,EAAA5P,EAC7B,CACA,SAAAkjB,GAAAvT,CAAA,QACA,iBAAAA,EACesT,GAEf,iBAAAtT,EACelH,EAAkBkH,GACnBwS,GACArR,GAAK3I,IAAA,CAAAwH,GACDiT,GAClBO,GAEA1iB,MAAAC,OAAA,CAAAiP,GACAyT,GAEA,iBAAAzT,EACemB,GAAK3I,IAAA,CAAAwH,GAAWiT,GAAQS,GAE5BlB,EACX,CACA,SAAAiB,GAAAzT,CAAA,CAAAC,CAAA,EACA,IAAAmC,EAAA,IAAApC,EAAA,CACA2T,EAAAvR,EAAAhR,MAAA,CACAwiB,EAAA5T,EAAA7C,GAAA,EAAAxM,EAAAU,IAAAkiB,GAAA5iB,GAAAA,EAAAsP,CAAA,CAAA5O,EAAA,GACA,WACA,QAAAA,EAAA,EAAwBA,EAAAsiB,EAAetiB,IACvC+Q,CAAA,CAAA/Q,EAAA,CAAAuiB,CAAA,CAAAviB,EAAA,CAAAhB,GAEA,OAAA+R,CACA,CACA,CACA,SAAAsR,GAAA1T,CAAA,CAAAC,CAAA,EACA,IAAAmC,EAAA,CAAqB,GAAApC,CAAA,IAAAC,CAAA,EACrB2T,EAAA,GACA,QAAA/hB,KAAAuQ,EACA9P,KAAAA,IAAA0N,CAAA,CAAAnO,EAAA,EAAAoO,KAAA3N,IAAA2N,CAAA,CAAApO,EAAA,EACA+hB,CAAAA,CAAA,CAAA/hB,EAAA,CAAA0hB,GAAAvT,CAAA,CAAAnO,EAAA,EAAAmO,CAAA,CAAAnO,EAAA,CAAAoO,CAAA,CAAApO,EAAA,GAGA,WACA,QAAAA,KAAA+hB,EACAxR,CAAA,CAAAvQ,EAAA,CAAA+hB,CAAA,CAAA/hB,EAAA,CAAAlB,GAEA,OAAAyR,CACA,CACA,CAcA,IAAAoR,GAAA,CAAAvL,EAAAxU,KACA,IAAAogB,EAAqBvR,GAAOL,iBAAA,CAAAxO,GAC5BqgB,EAAwBvS,GAAmB0G,GAC3C8L,EAAwBxS,GAAmB9N,UAI3C,EAHAiO,OAAA,CAAAC,GAAA,CAAAvQ,MAAA,GAAA2iB,EAAArS,OAAA,CAAAC,GAAA,CAAAvQ,MAAA,EACA0iB,EAAApS,OAAA,CAAAP,KAAA,CAAA/P,MAAA,GAAA2iB,EAAArS,OAAA,CAAAP,KAAA,CAAA/P,MAAA,EACA0iB,EAAApS,OAAA,CAAAtI,MAAA,CAAAhI,MAAA,EAAA2iB,EAAArS,OAAA,CAAAtI,MAAA,CAAAhI,MAAA,CAEA,GAA4B8C,GAAA,CAAA+T,IAC5B,CAAA8L,EAAAriB,MAAA,CAAAN,MAAA,EACaiiB,GAAenf,GAAA,CAAAT,IAC5B,CAAAqgB,EAAApiB,MAAA,CAAAN,MAAA,CD3EA,GAAA8C,GAAA,CC4EgC+T,GD3EhC,GAAA5X,GAAA,EC2EgC4X,EAAAxU,EDxEhC,GAAApD,GAAA,ECwEgCoD,EAAAwU,EAEjB+J,GAAIyB,GAAAO,SA3BnB/L,CAAA,CAAAxU,CAAA,EACA,IAAAqK,EACA,IAAAmW,EAAA,GACAC,EAAA,CAAuB/S,MAAA,EAAAQ,IAAA,EAAAvI,OAAA,GACvB,QAAA/H,EAAA,EAAoBA,EAAAoC,EAAA/B,MAAA,CAAAN,MAAA,CAA0BC,IAAA,CAC9C,IAAA+B,EAAAK,EAAAmO,KAAA,CAAAvQ,EAAA,CACA8iB,EAAAlM,EAAAvG,OAAA,CAAAtO,EAAA,CAAA8gB,CAAA,CAAA9gB,EAAA,EACAghB,EAAA,OAAAtW,CAAAA,EAAAmK,EAAAvW,MAAA,CAAAyiB,EAAA,GAAArW,KAAA,IAAAA,EAAAA,EAAA,CACAmW,CAAAA,CAAA,CAAA5iB,EAAA,CAAA+iB,EACAF,CAAA,CAAA9gB,EAAA,EACA,CACA,OAAA6gB,CACA,EAemBH,EAAAC,GAAAA,EAAAriB,MAAA,EAAAmiB,IAGX,GAAAvM,EAAAqD,CAAA,EAAO,sBAA0B1C,EAAO,SAASxU,EAAO,2KACjD+e,GAAYvK,EAAAxU,GAE3B,ECxFA,SAAA4gB,GAAAtX,CAAA,CAAAoV,CAAA,CAAA9hB,CAAA,QACA,iBAAA0M,GACA,iBAAAoV,GACA,iBAAA9hB,EACegiB,GAAStV,EAAAoV,EAAA9hB,GAGxBikB,GAD0BvX,GAC1BA,EAAAoV,EACA,CKDA,SAAAle,GAAA,CAAqBJ,SAAAA,EAAA,IAAAI,UAAAsgB,CAAA,CAAAC,MAAAA,CAAA,CAAA1gB,KAAAA,EAAA,YAAuE,EAK5F,IAAA2gB,EAA4B7D,GAAa9c,GACzCA,EAAAqJ,GAAA,CAAmBuU,IACTA,GAA0B5d,GAKpCrC,EAAA,CACA6a,KAAA,GACA1a,MAAA2iB,CAAA,KAWAG,EAA8BC,SJK9BC,CAAA,CAAAxS,CAAA,EAAsCjJ,MAAA0b,EAAA,GAAA/gB,KAAAA,CAAA,CAAAwgB,MAAAA,CAAA,EAAqC,EAAI,EAC/E,IAAAQ,EAAAF,EAAAxjB,MAAA,CAMA,GALI,GAAAkW,EAAAC,CAAA,EAASuN,IAAA1S,EAAAhR,MAAA,yDAKb0jB,IAAAA,EACA,UAAA1S,CAAA,IACA,GAAA0S,IAAAA,GAAAF,CAAA,MAAAA,CAAA,IACA,UAAAxS,CAAA,IAEAwS,CAAA,IAAAA,CAAA,CAAAE,EAAA,KACAF,EAAA,IAAAA,EAAA,CAAAG,OAAA,GACA3S,EAAA,IAAAA,EAAA,CAAA2S,OAAA,IAEA,IAAAC,EAAAC,SAjDA7S,CAAA,CAAAtO,CAAA,CAAAohB,CAAA,EACA,IAAAF,EAAA,GACAG,EAAAD,GAAwCb,GACxCe,EAAAhT,EAAAhR,MAAA,GACA,QAAAC,EAAA,EAAoBA,EAAA+jB,EAAe/jB,IAAA,CACnC,IAAAijB,EAAAa,EAAA/S,CAAA,CAAA/Q,EAAA,CAAA+Q,CAAA,CAAA/Q,EAAA,IACAyC,GAEAwgB,CAAAA,EAAoBtC,GADpBlhB,MAAAC,OAAA,CAAA+C,GAAAA,CAAA,CAAAzC,EAAA,EAAoEgH,EAAAC,CAAI,CAAAxE,EAChDwgB,EAAA,EAExBU,EAAAtX,IAAA,CAAA4W,EACA,CACA,OAAAU,CACA,EAoCA5S,EAAAtO,EAAAwgB,GACAc,EAAAJ,EAAA5jB,MAAA,CACAikB,EAAA,IACA,IAAAhkB,EAAA,EACA,GAAA+jB,EAAA,EACA,KACA,EADmBR,EAAAxjB,MAAA,KACnBT,CAAAA,EAAAikB,CAAA,CAAAvjB,EAAA,IADyCA,KAKzC,IAAAikB,EAAgCpD,GAAQ0C,CAAA,CAAAvjB,EAAA,CAAAujB,CAAA,CAAAvjB,EAAA,GAAAV,GACxC,OAAAqkB,CAAA,CAAA3jB,EAAA,CAAAikB,EACA,EACA,OAAAT,EACA,GAAAQ,EAA8Blc,EAAKyb,CAAA,IAAAA,CAAA,CAAAE,EAAA,GAAAnkB,IACnC0kB,CACA,EGvEAE,CC+BAf,GAAAA,EAAApjB,MAAA,GAAAmjB,EAAAnjB,MAAA,CACAojB,EACUgB,SFhCVC,CAAA,EACA,IAAAF,EAAA,IAEA,OADIG,SDDJH,CAAA,CAAAI,CAAA,EACA,IAAA3d,EAAAud,CAAA,CAAAA,EAAAnkB,MAAA,IACA,QAAAC,EAAA,EAAoBA,GAAAskB,EAAgBtkB,IAAA,CACpC,IAAAukB,EAA+B1D,GAAQ,EAAAyD,EAAAtkB,GACvCkkB,EAAA7X,IAAA,CAAoB2U,GAASra,EAAA,EAAA4d,GAC7B,CACA,ECLcL,EAAAE,EAAArkB,MAAA,IACdmkB,CACA,EE4BuBhB,EAAA,EDjCvBpX,GAAA,IAAA0Y,ECiCuBhiB,GACkB0gB,EAAA,CACzCzgB,KAAAhD,MAAAC,OAAA,CAAA0jB,GACAA,EA7BA/iB,EAAAyL,GAAA,KAAA2T,GAAsCH,IAASmF,MAAA,GAAApkB,EAAAN,MAAA,GA+B/C,GACA,OACAgd,mBAAAva,EACA5C,KAAA,IACAQ,EAAAG,KAAA,CAAA8iB,EAAAlJ,GACA/Z,EAAA6a,IAAA,CAAAd,GAAA3X,EACApC,EAEA,CACA,CE7CA,IAAAskB,GAAA,IACA,IAAAC,EAAA,EAA6BpgB,UAAAA,CAAA,CAAW,GAAA6B,EAAA7B,GACxC,OACAhF,MAAA,IAAqBsH,EAAKT,MAAA,CAAAue,EAAA,IAC1BC,KAAA,IAAoB9d,EAAW6d,GAK/BvlB,IAAA,IAAoB4G,EAASxB,YAAA,CAAgBwB,EAASzB,SAAA,CAAauT,GAAI1Y,GAAA,EACvE,CACA,ECAAylB,GAAA,CACAC,MAAW3H,GACXA,QAAWA,GACX4H,MAAWniB,GACXA,UAAeA,GACfkY,OAAUA,EACV,EACAkK,GAAA,GAAAhc,EAAA,GAMA,OAAAic,WAAkC/M,GAClChL,YAAAoL,CAAA,EACA,MAAAA,GAIA,KAAA4M,QAAA,MAIA,KAAAC,UAAA,MAIA,KAAAC,WAAA,GAIA,KAAAC,aAAA,GAMA,KAAAC,gBAAA,WAIA,KAAAC,SAAA,MACA,KAAAnlB,KAAA,QAKA,KAAAwkB,IAAA,MAGA,GAFA,KAAAjZ,QAAA,CAAA9F,MAAA,GACA,KAAA0S,SAAA,IACA,cAAAnY,KAAA,CACA,OACA,KAAAolB,QAAA,GACA,IAAoBC,OAAAA,CAAA,EAAS,KAAAnN,OAAA,CAC7BmN,GAAAA,GACA,EACA,IAAgBpY,KAAAA,CAAA,CAAAC,YAAAA,CAAA,CAAAvB,QAAAA,CAAA,CAAAnJ,UAAAA,CAAA,EAAwC,KAAA0V,OAAA,CACxDoN,EAAA,CAAA3Z,MAAAA,EAAA,OAAAA,EAAAkB,gBAAA,GAAmHA,EAEnH,MAAAtB,QAAA,KAAA+Z,EAAA9iB,EADA,CAAAc,EAAAD,IAAA,KAAAqV,mBAAA,CAAApV,EAAAD,GACA4J,EAAAC,EAAAvB,GACA,KAAAJ,QAAA,CAAA8B,eAAA,EACA,CACAiM,aAAAiM,CAAA,MASAC,EACAC,EATA,IAAgB9jB,KAAAA,EAAA,YAAAwB,OAAAA,EAAA,EAAA8U,YAAAA,EAAA,EAAA7U,WAAAA,CAAA,CAAAxC,SAAAA,EAAA,GAA6E,KAAAsX,OAAA,CAC7FwN,EAAAjB,EAAA,CAAA9iB,EAAA,EAAqDa,GASrDkjB,IAAiCljB,IACjC,iBAAA+iB,CAAA,MAIAC,EAAoCjF,GAAIqE,GAAoBhC,GAAG2C,CAAA,IAAAA,CAAA,MAC/DA,EAAA,SAEA,IAAAI,EAAAD,EAAA,CAA6C,QAAAxN,OAAA,CAAA1V,UAAA+iB,CAAA,EAK7C,YAAAniB,GACAqiB,CAAAA,EAAAC,EAAA,CACA,QAAAxN,OAAA,CACA1V,UAAA,IAAA+iB,EAAA,CAAAjC,OAAA,GACA1iB,SAAA,CAAAA,CACA,EAAa,EAUb,OAAA+kB,EAAAhJ,kBAAA,EACAgJ,CAAAA,EAAAhJ,kBAAA,CAA2CiJ,SF/G3CD,CAAA,EACA,IAAAvjB,EAAA,EAEApC,EAAA2lB,EAAAnmB,IAAA,CAAA4C,GACA,MAAApC,EAAA6a,IAAA,EAAAzY,EALA,KAMAA,GAHA,GAIApC,EAAA2lB,EAAAnmB,IAAA,CAAA4C,GAEA,OAAAA,GATA,IASAyjB,IAAAzjB,CACA,EEsGgEujB,EAAA,EAEhE,IAAgBhJ,mBAAAA,CAAA,EAAqBgJ,EACrCG,EAAAnJ,EAAA1E,EAEA,OACA0N,UAAAA,EACAF,kBAAAA,EACAD,sBAAAA,EACA7I,mBAAAA,EACAmJ,iBAAAA,EACAC,cAPAD,EAAA3iB,CAAAA,EAAA,GAAA8U,CAQA,CACA,CACAsB,gBAAA,CACA,IAAgBxB,SAAAA,EAAA,IAAkB,KAAAG,OAAA,CAClC,KAAA8N,IAAA,GACA,gBAAAd,gBAAA,EAAAnN,EAIA,KAAA/X,KAAA,MAAAklB,gBAAA,CAHA,KAAAe,KAAA,EAKA,CACAC,KAAA/hB,CAAA,CAAAgiB,EAAA,IACA,IAAgBzQ,SAAAA,CAAA,EAAW,KAE3B,IAAAA,EAAA,CACA,IAAoBlT,UAAAA,CAAA,EAAY,KAAA0V,OAAA,CAChC,OAAqB2C,KAAA,GAAA1a,MAAAqC,CAAA,CAAAA,EAAA7C,MAAA,IACrB,CACA,IAAgB0D,cAAAA,CAAA,CAAAsiB,UAAAA,CAAA,CAAAF,kBAAAA,CAAA,CAAAD,sBAAAA,CAAA,CAAAhjB,UAAAA,CAAA,CAAAma,mBAAAA,CAAA,CAAAoJ,cAAAA,CAAA,CAAAD,iBAAAA,CAAA,EAAsIpQ,EACtJ,eAAAyP,SAAA,CACA,OAAAQ,EAAAnmB,IAAA,IACA,IAAgBwY,MAAAA,CAAA,CAAA7U,OAAAA,CAAA,CAAAC,WAAAA,CAAA,CAAA6U,YAAAA,CAAA,CAAAU,SAAAA,CAAA,EAAmD,KAAAT,OAAA,CAOnE,KAAAkO,KAAA,GACA,KAAAjB,SAAA,CAAAljB,KAAAsE,GAAA,MAAA4e,SAAA,CAAAhhB,GAEA,KAAAiiB,KAAA,IACA,MAAAjB,SAAA,CAAAljB,KAAAsE,GAAA,CAAApC,EAAA4hB,EAAA,KAAAK,KAAA,MAAAjB,SAAA,GAGAgB,EACA,KAAAnB,WAAA,CAAA7gB,EAEA,YAAA2gB,QAAA,CACA,KAAAE,WAAA,MAAAF,QAAA,CAMA,KAAAE,WAAA,CACA/iB,KAAAkG,KAAA,CAAAhE,EAAA,KAAAghB,SAAA,OAAAiB,KAAA,CAGA,IAAAC,EAAA,KAAArB,WAAA,CAAAhN,EAAA,MAAAoO,KAAA,UACAE,EAAA,KAAAF,KAAA,IACAC,EAAA,EACAA,EAAAN,CACA,MAAAf,WAAA,CAAA/iB,KAAAqE,GAAA,CAAA+f,EAAA,GAEA,kBAAArmB,KAAA,cAAA8kB,QAAA,EACA,MAAAE,WAAA,CAAAe,CAAA,EAEA,IAAAQ,EAAA,KAAAvB,WAAA,CACAwB,EAAAb,EACA,GAAAxiB,EAAA,CAMA,IAAAsd,EAAAxe,KAAAsE,GAAA,MAAAye,WAAA,CAAAe,GAAAD,EAKAW,EAAAxkB,KAAAykB,KAAA,CAAAjG,GAKAkG,EAAAlG,EAAA,CAKA,EAAAkG,GAAAlG,GAAA,GACAkG,CAAAA,EAAA,GAEAA,IAAAA,GAAAF,IACAA,CAAAA,EAAAxkB,KAAAsE,GAAA,CAAAkgB,EAAAtjB,EAAA,IAIA,IAEAC,YAAAA,GACAujB,EAAA,EAAAA,EACA1O,GACA0O,CAAAA,GAAA1O,EAAA6N,CAAA,GAGA,WAAA1iB,GACAojB,CAAAA,EAAAf,CAAA,GAGAc,EAAsB7e,EAAK,IAAAif,GAAAb,CAC3B,CAMA,IAAA9lB,EAAAsmB,EACA,CAAgBzL,KAAA,GAAA1a,MAAAqC,CAAA,KAChBgkB,EAAAhnB,IAAA,CAAA+mB,GACAf,GACAxlB,CAAAA,EAAAG,KAAA,CAAAqlB,EAAAxlB,EAAAG,KAAA,GAEA,IAAc0a,KAAAA,CAAA,EAAO7a,EACrBsmB,GAAA3J,OAAAA,GACA9B,CAAAA,EACA,KAAAuL,KAAA,IACA,KAAApB,WAAA,EAAAe,EACA,KAAAf,WAAA,KAEA,IAAA4B,EAAA,YAAA9B,QAAA,EACA,mBAAA9kB,KAAA,mBAAAA,KAAA,EAAA6a,CAAA,EAUA,OATA+L,GAAAvjB,KAAAxC,IAAAwC,GACArD,CAAAA,EAAAG,KAAA,CAA0B+C,EAAgBV,EAAA,KAAA0V,OAAA,CAAA7U,EAAA,EAE1CsV,GACAA,EAAA3Y,EAAAG,KAAA,EAEAymB,GACA,KAAAC,MAAA,GAEA7mB,CACA,CACA,IAAAoC,UAAA,CACA,IAAgBsT,SAAAA,CAAA,EAAW,KAC3B,OAAAA,EAA0BlU,EAAqBkU,EAAAiH,kBAAA,GAC/C,CACA,IAAAjF,MAAA,CACA,OAAelW,EAAqB,KAAAwjB,WAAA,CACpC,CACA,IAAAtN,KAAAC,CAAA,EACAA,EAAkBrW,EAAqBqW,GACvC,KAAAqN,WAAA,CAAArN,EACA,YAAAmN,QAAA,WAAAsB,KAAA,CACA,KAAAtB,QAAA,CAAAnN,EAEA,KAAAmP,MAAA,EACA,MAAA3B,SAAA,MAAA2B,MAAA,CAAA9nB,GAAA,GAAA2Y,EAAA,KAAAyO,KAAA,CAEA,CACA,IAAAA,OAAA,CACA,YAAAnB,aAAA,CAEA,IAAAmB,MAAAW,CAAA,EACA,IAAAC,EAAA,KAAA/B,aAAA,GAAA8B,CACA,MAAA9B,aAAA,CAAA8B,EACAC,GACA,MAAAtP,IAAA,CAAwBlW,EAAqB,KAAAwjB,WAAA,EAE7C,CACAgB,MAAA,CAIA,GAHA,KAAAza,QAAA,CAAAL,WAAA,EACA,KAAAK,QAAA,CAAAoC,MAAA,GAEA,MAAA8K,SAAA,EACA,KAAAyM,gBAAA,WACA,MACA,CACA,QAAA/M,SAAA,CACA,OACA,IAAgB2O,OAAAA,EAASxC,EAAe,CAAA2C,OAAAA,CAAA,CAAA9B,UAAAA,CAAA,EAAsB,KAAAjN,OAAA,CAC9D,KAAA4O,MAAA,EACA,MAAAA,MAAA,CAAAA,EAAA,QAAAZ,IAAA,CAAA/hB,GAAA,EAEA8iB,GAAAA,IACA,IAAAjoB,EAAA,KAAA8nB,MAAA,CAAA9nB,GAAA,EACA,aAAA8lB,QAAA,CACA,KAAAK,SAAA,CAAAnmB,EAAA,KAAA8lB,QAAA,CAEA,KAAAK,SAAA,CAGA,kBAAAnlB,KAAA,EACA,MAAAmlB,SAAA,CAAAnmB,CAAA,EAHA,KAAAmmB,SAAA,CAAAA,MAAAA,EAAAA,EAAA,KAAA5M,aAAA,GAKA,kBAAAvY,KAAA,EACA,KAAAsY,qBAAA,GAEA,KAAAyM,UAAA,MAAAI,SAAA,CACA,KAAAL,QAAA,MAKA,KAAA9kB,KAAA,WACA,KAAA8mB,MAAA,CAAA3nB,KAAA,EACA,CACA8mB,OAAA,CACA,IAAA5Z,EACA,SAAAoM,SAAA,EACA,KAAAyM,gBAAA,UACA,MACA,CACA,KAAAllB,KAAA,UACA,KAAA8kB,QAAA,QAAAzY,CAAAA,EAAA,KAAA2Y,WAAA,GAAA3Y,KAAA,IAAAA,EAAAA,EAAA,CACA,CACAK,UAAA,CACA,iBAAA1M,KAAA,EACA,KAAAgmB,IAAA,GAEA,KAAAd,gBAAA,MAAAllB,KAAA,YACA,KAAA8kB,QAAA,KACA,CACA+B,QAAA,CACA,KAAAzB,QAAA,GACA,KAAAplB,KAAA,YACA,IAAgBgN,WAAAA,CAAA,EAAa,KAAAkL,OAAA,CAC7BlL,GAAAA,GACA,CACAvH,QAAA,CACA,YAAAsf,UAAA,EACA,KAAAmB,IAAA,MAAAnB,UAAA,EAEA,KAAAK,QAAA,GACA,KAAA9M,qBAAA,EACA,CACA8M,UAAA,CACA,KAAAplB,KAAA,QACA,KAAAknB,UAAA,GACA,KAAA9N,sBAAA,GACA,KAAAd,qBAAA,GACA,KAAA6M,SAAA,MAAAJ,UAAA,MACA,KAAAxZ,QAAA,CAAA9F,MAAA,EACA,CACAyhB,YAAA,CACA,KAAAJ,MAAA,GAEA,KAAAA,MAAA,CAAAtC,IAAA,GACA,KAAAsC,MAAA,CAAAjmB,KAAAA,EACA,CACAslB,OAAAzO,CAAA,EAEA,OADA,KAAAyN,SAAA,GACA,KAAAe,IAAA,CAAAxO,EAAA,GACA,CACA,CCnXA,IAAAyP,GAAA,IAAA9lB,IAAA,CACA,UACA,WACA,SACA,YAIA,ECXA+lB,GAAA,GAAA/nB,MAAAC,OAAA,CAAA+f,IAAA,iBAAAA,CAAA,ICQAgI,GAAA,EAAA9Y,EAAAC,EAAAC,EAAAmN,EAAA,mBAA8DrN,EAAE,IAAIC,EAAE,IAAIC,EAAE,IAAImN,EAAE,GAClF0L,GAAA,CACAvH,OAAA,SACA1d,KAAA,OACA2c,OAAA,UACAC,QAAA,WACAC,UAAA,cACAK,OAAA8H,GAAA,eACA5H,QAAA4H,GAAA,eACAzH,OAAAyH,GAAA,oBACA1H,QAAA0H,GAAA,mBACA,EACA,SAAAE,GAAAlI,CAAA,EACA,OAAAmI,GAAAnI,IACAiI,GAAArI,OAAA,CAEA,SAAAuI,GAAAnI,CAAA,EACA,GAAAA,SAGA,GAA+BA,GAC/BgI,GAAAhI,GAEAhgB,MAAAC,OAAA,CAAA+f,GACAA,EAAA3T,GAAA,CAAA6b,IAGAD,EAAA,CAAAjI,EAAA,CExBA,IAAAoI,GAAoClQ,GAAI,IAAAxJ,OAAAE,cAAA,CAAAC,IAAA,CAAAwZ,QAAA1Z,SAAA,YAoDxC,OAAA2Z,WAAmC7P,GACnChL,YAAAoL,CAAA,EACA,MAAAA,GACA,IAAgBjL,KAAAA,CAAA,CAAAC,YAAAA,CAAA,CAAAvB,QAAAA,CAAA,CAAAnJ,UAAAA,CAAA,EAAwC,KAAA0V,OAAA,CACxD,KAAA3M,QAAA,KAA4BiK,GAAoBhT,EAAA,CAAAc,EAAAD,IAAA,KAAAqV,mBAAA,CAAApV,EAAAD,GAAA4J,EAAAC,EAAAvB,GAChD,KAAAJ,QAAA,CAAA8B,eAAA,EACA,CACAiM,aAAA9W,CAAA,CAAAa,CAAA,MACAgJ,EA3CA6L,EA4CA,IAAc9V,SAAAA,EAAA,IAAA2gB,MAAAA,CAAA,CAAA1gB,KAAAA,CAAA,CAAAV,KAAAA,CAAA,CAAAuL,YAAAA,CAAA,CAAAD,KAAAA,CAAA,CAAAkY,UAAAA,CAAA,EAAmE,KAAAjN,OAAA,CAKjF,YAAA7L,CAAAA,EAAAa,EAAA0a,KAAA,GAAAvb,KAAA,IAAAA,EAAA,OAAAA,EAAA1L,OAAA,EACA,SAKA,GAtDAuX,WAAAA,CADAA,EAuDA,KAAAA,OAAA,EAtDAvW,IAAA,GAAyCkmB,SF3BzCA,EAAAxI,CAAA,EACA,MAAAvR,CAAAA,CAAA,EAAAuR,GACA,iBAAAA,GAAAA,KAAAiI,IACQF,GAAkB/H,IAC1BhgB,MAAAC,OAAA,CAAA+f,IAAAA,EAAAyI,KAAA,CAAAD,EAAA,CACA,EEsB+D3P,EAAA7V,IAAA,EAsD/D,CACA,IAAoB2K,WAAAA,CAAA,CAAA2L,SAAAA,CAAA,CAAAzL,YAAAA,CAAA,CAAAvB,QAAAA,CAAA,IAAAuM,EAAA,CAAyD,KAAAA,OAAA,CAC7E6P,EAAAC,SAtDAxlB,CAAA,CAAA0V,CAAA,EAMA,IAAA+P,EAAA,IAAgCpD,GAAmB,CACnD,GAAA3M,CAAA,CACA1V,UAAAA,EACAW,OAAA,EACA6U,MAAA,EACAY,YAAA,EACA,GACA5Y,EAAA,CAAkB6a,KAAA,GAAA1a,MAAAqC,CAAA,KAClB0lB,EAAA,GAKAnO,EAAA,EACA,MAAA/Z,EAAA6a,IAAA,EAAAd,EA7BiB,KA+BjBmO,EAAAjc,IAAA,CAAAjM,CADAA,EAAAioB,EAAA9B,MAAA,CAAApM,EAAA,EACA5Z,KAAA,EACA4Z,GArCA,GAuCA,OACAgJ,MAAAliB,KAAAA,EACA2B,UAAA0lB,EACA9lB,SAAA2X,EA1CA,GA2CA1X,KAAA,QACA,CACA,EAuBAG,EAAA0V,EAKA,KAAA1V,CAJAA,EAAAulB,EAAAvlB,SAAA,EAIA7C,MAAA,EACA6C,CAAAA,CAAA,IAAAA,CAAA,KAEAJ,EAAA2lB,EAAA3lB,QAAA,CACA2gB,EAAAgF,EAAAhF,KAAA,CACA1gB,EAAA0lB,EAAA1lB,IAAA,CACAV,EAAA,WACA,CACA,IAAAwmB,EAA0BC,SDhG1Bzc,CAAA,CAAA0c,CAAA,CAAA7lB,CAAA,EAAuDwV,MAAAA,EAAA,EAAA5V,SAAAA,EAAA,IAAAe,OAAAA,EAAA,EAAAC,WAAAA,EAAA,OAAAf,KAAAA,CAAA,CAAA0gB,MAAAA,CAAA,EAA2E,EAAI,EACtI,IAAAuF,EAAA,CAA8B,CAAAD,EAAA,CAAA7lB,CAAA,EAC9BugB,GACAuF,CAAAA,EAAAxE,MAAA,CAAAf,CAAA,EACA,IAAA1D,EAAmBmI,GAAuBnlB,GAM1C,OAFAhD,MAAAC,OAAA,CAAA+f,IACAiJ,CAAAA,EAAAjJ,MAAA,CAAAA,CAAA,EACA1T,EAAA4c,OAAA,CAAAD,EAAA,CACAtQ,MAAAA,EACA5V,SAAAA,EACAid,OAAA,MAAA/f,OAAA,CAAA+f,GAAA,SAAAA,EACAzK,KAAA,OACA4T,WAAArlB,EAAA,EACAslB,UAAArlB,YAAAA,EAAA,oBACA,EACA,EC8EsC8J,EAAA0a,KAAA,CAAAjnB,OAAA,CAAAsM,EAAAzK,EAAA,CAA+C,QAAA0V,OAAA,CAAA9V,SAAAA,EAAA2gB,MAAAA,EAAA1gB,KAAAA,CAAA,GAyBrF,OAtBA8lB,EAAAhD,SAAA,CAAAA,MAAAA,EAAAA,EAAA,KAAA5M,aAAA,GACA,KAAAmQ,eAAA,EACAP,EAAAQ,QAAA,MAAAD,eAAA,CACA,KAAAA,eAAA,CAAA7nB,KAAAA,GAWAsnB,EAAAS,QAAA,MACA,IAAwB5b,WAAAA,CAAA,EAAa,KAAAkL,OAAA,CACrChL,EAAAhB,GAAA,CAAgChJ,EAAgBV,EAAA,KAAA0V,OAAA,CAAA7U,IAChD2J,GAAAA,IACA,KAAAvH,MAAA,GACA,KAAA2T,sBAAA,EACA,EAEA,CACA+O,UAAAA,EACA/lB,SAAAA,EACA2gB,MAAAA,EACAphB,KAAAA,EACAU,KAAAA,EACAG,UAAAA,CACA,CACA,CACA,IAAAJ,UAAA,CACA,IAAgBsT,SAAAA,CAAA,EAAW,KAC3B,IAAAA,EACA,SACA,IAAgBtT,SAAAA,CAAA,EAAWsT,EAC3B,OAAelU,EAAqBY,EACpC,CACA,IAAAsV,MAAA,CACA,IAAgBhC,SAAAA,CAAA,EAAW,KAC3B,IAAAA,EACA,SACA,IAAgByS,UAAAA,CAAA,EAAYzS,EAC5B,OAAelU,EAAqB2mB,EAAAnD,WAAA,IACpC,CACA,IAAAtN,KAAAC,CAAA,EACA,IAAgBjC,SAAAA,CAAA,EAAW,KAC3B,IAAAA,EACA,OACA,IAAgByS,UAAAA,CAAA,EAAYzS,CAC5ByS,CAAAA,EAAAnD,WAAA,CAAgC1jB,EAAqBqW,EACrD,CACA,IAAAyO,OAAA,CACA,IAAgB1Q,SAAAA,CAAA,EAAW,KAC3B,IAAAA,EACA,SACA,IAAgByS,UAAAA,CAAA,EAAYzS,EAC5B,OAAAyS,EAAAU,YAAA,CAEA,IAAAzC,MAAAW,CAAA,EACA,IAAgBrR,SAAAA,CAAA,EAAW,KAC3B,IAAAA,EACA,OACA,IAAgByS,UAAAA,CAAA,EAAYzS,CAC5ByS,CAAAA,EAAAU,YAAA,CAAA9B,CACA,CACA,IAAA/mB,OAAA,CACA,IAAgB0V,SAAAA,CAAA,EAAW,KAC3B,IAAAA,EACA,aACA,IAAgByS,UAAAA,CAAA,EAAYzS,EAC5B,OAAAyS,EAAAW,SAAA,CAEA,IAAA3D,WAAA,CACA,IAAgBzP,SAAAA,CAAA,EAAW,KAC3B,IAAAA,EACA,YACA,IAAgByS,UAAAA,CAAA,EAAYzS,EAG5B,OAAAyS,EAAAhD,SAAA,CAMA4D,eAAAJ,CAAA,EACA,QAAAlQ,SAAA,CAGA,CACA,IAAoB/C,SAAAA,CAAA,EAAW,KAC/B,IAAAA,EACA,OAAuB9O,EAAAC,CAAI,CAC3B,IAAoBshB,UAAAA,CAAA,EAAYzS,CAChCyS,CAAAA,EAAAQ,QAAA,CAAAA,EACAR,EAAAS,QAAA,KACA,MATA,KAAAF,eAAA,CAAAC,EAUA,OAAe/hB,EAAAC,CAAI,CAEnBmf,MAAA,CACA,QAAA7N,SAAA,CACA,OACA,IAAgBzC,SAAAA,CAAA,EAAW,KAC3B,IAAAA,EACA,OACA,IAAgByS,UAAAA,CAAA,EAAYzS,CAC5B,cAAAyS,EAAAW,SAAA,EACA,KAAAxQ,qBAAA,GAEA6P,EAAAnC,IAAA,EACA,CACAC,OAAA,CACA,IAAgBvQ,SAAAA,CAAA,EAAW,KAC3B,IAAAA,EACA,OACA,IAAgByS,UAAAA,CAAA,EAAYzS,EAC5ByS,EAAAlC,KAAA,EACA,CACAzB,MAAA,CAGA,GAFA,KAAAjZ,QAAA,CAAA9F,MAAA,GACA,KAAA0S,SAAA,IACA,cAAAnY,KAAA,CACA,OACA,KAAAoZ,sBAAA,GACA,KAAAd,qBAAA,GACA,IAAgB5C,SAAAA,CAAA,EAAW,KAC3B,IAAAA,EACA,OACA,IAAgByS,UAAAA,CAAA,CAAA3lB,UAAAA,CAAA,CAAAJ,SAAAA,CAAA,CAAAT,KAAAA,CAAA,CAAAU,KAAAA,CAAA,CAAA0gB,MAAAA,CAAA,EAAoDrN,EACpE,GAAAyS,SAAAA,EAAAW,SAAA,EACAX,aAAAA,EAAAW,SAAA,CACA,OAUA,QAAApR,IAAA,EACA,IAAoBxK,YAAAA,CAAA,CAAAyL,SAAAA,CAAA,CAAA3L,WAAAA,CAAA,CAAArB,QAAAA,CAAA,IAAAuM,EAAA,CAAyD,KAAAA,OAAA,CAC7E+P,EAAA,IAAwCpD,GAAmB,CAC3D,GAAA3M,CAAA,CACA1V,UAAAA,EACAJ,SAAAA,EACAT,KAAAA,EACAU,KAAAA,EACA0gB,MAAAA,EACAnK,YAAA,EACA,GACAoQ,EAA+B1nB,EAAqB,KAAAoW,IAAA,EACpDxK,EAAA+b,eAAA,CAAAhB,EAAA9B,MAAA,CAAA6C,EA9OA,IA8OA7oB,KAAA,CAAA8nB,EAAA9B,MAAA,CAAA6C,GAAA7oB,KAAA,CA9OA,GA+OA,CACA,IAAgBklB,OAAAA,CAAA,EAAS,KAAAnN,OAAA,CACzBmN,GAAAA,IACA,KAAA5f,MAAA,EACA,CACAiH,UAAA,CACA,IAAgBgJ,SAAAA,CAAA,EAAW,KAC3BA,GAEAA,EAAAyS,SAAA,CAAAtB,MAAA,EACA,CACAphB,QAAA,CACA,IAAgBiQ,SAAAA,CAAA,EAAW,KAC3BA,GAEAA,EAAAyS,SAAA,CAAA1iB,MAAA,EACA,CACA,OAAAyjB,SAAAhR,CAAA,EACA,IAAgBhL,YAAAA,CAAA,CAAAD,KAAAA,CAAA,CAAAgL,YAAAA,CAAA,CAAA7U,WAAAA,CAAA,CAAAvB,QAAAA,CAAA,CAAAF,KAAAA,CAAA,EAA4DuW,EAC5E,OAAAuP,MACAxa,GACYka,GAAiB1kB,GAAA,CAAAwK,IAC7BC,GACAA,EAAA0a,KAAA,EACA1a,EAAA0a,KAAA,CAAAjnB,OAAA,YAAAwoB,aAKA,CAAAjc,EAAA0a,KAAA,CAAA5mB,QAAA,GAAA2X,QAAA,EACA,CAAAV,GACA7U,WAAAA,GACAvB,IAAAA,GACAF,YAAAA,CACA,CACA,CEjSA,IAAAynB,GAA+B7R,GAAI,IAAA/K,KAAA3L,IAAA2L,OAAA6c,cAAA,CCCnC,OAAAC,GACAxc,YAAAyc,CAAA,EAEA,KAAA/E,IAAA,UAAAgF,MAAA,SACA,KAAAD,UAAA,CAAAA,EAAAhmB,MAAA,CAAAuK,QACA,CACA0L,KAAAiQ,CAAA,CAAAC,CAAA,EACA,OAAA9P,QAAA+P,GAAA,MAAAJ,UAAA,EAAA/P,IAAA,CAAAiQ,GAAAG,KAAA,CAAAF,EACA,CAIAG,OAAAC,CAAA,EACA,YAAAP,UAAA,IAAAO,EAAA,CAEAC,OAAAD,CAAA,CAAAE,CAAA,EACA,QAAApqB,EAAA,EAAwBA,EAAA,KAAA2pB,UAAA,CAAA5pB,MAAA,CAA4BC,IACpD,KAAA2pB,UAAA,CAAA3pB,EAAA,CAAAkqB,EAAA,CAAAE,CAEA,CACAjB,eAAAJ,CAAA,EACA,IAAAsB,EAAA,KAAAV,UAAA,CAAA7d,GAAA,KACA,GAAgB0d,CAAAA,OAAsBjB,EAAAY,cAAA,CAKtC,OADAZ,EAAAlC,KAAA,GACuBiE,SF5BvBlkB,CAAA,CAAA2iB,CAAA,MACAwB,EACA,IAAAC,EAAA,KACA,IAAgBpF,YAAAA,CAAA,EAAc2D,EAE9BlI,EAAA4J,CADArF,OAAAA,EAAA,EAAAA,EAAA7kB,KAAA,EACA,IACAgqB,IAAA1J,GACAza,EAAAya,GAEA0J,EAAA1J,CACA,EAEA,OADIha,EAAKT,MAAA,CAAAokB,EAAA,IACT,IAAiB1jB,EAAW0jB,EAC5B,EEesC,IACtCjC,EAAAzQ,IAAA,CAAAyQ,EAAA/lB,QAAA,CAAAqe,CACA,EAAiBkI,GANjBR,EAAAY,cAAA,CAAAJ,EAQA,GACA,WACAsB,EAAA/pB,OAAA,EAAAoqB,EAAA1qB,KACA0qB,GACAA,IACA,KAAAf,UAAA,CAAA3pB,EAAA,CAAA4kB,IAAA,EACA,EACA,CACA,CACA,IAAA9M,MAAA,CACA,YAAAmS,MAAA,QACA,CACA,IAAAnS,KAAAA,CAAA,EACA,KAAAqS,MAAA,QAAArS,EACA,CACA,IAAA0O,OAAA,CACA,YAAAyD,MAAA,SACA,CACA,IAAAzD,MAAAA,CAAA,EACA,KAAA2D,MAAA,SAAA3D,EACA,CACA,IAAAjB,WAAA,CACA,YAAA0E,MAAA,aACA,CACA,IAAAznB,UAAA,CACA,IAAAkE,EAAA,EACA,QAAA1G,EAAA,EAAwBA,EAAA,KAAA2pB,UAAA,CAAA5pB,MAAA,CAA4BC,IACpD0G,EAAArE,KAAAqE,GAAA,CAAAA,EAAA,KAAAijB,UAAA,CAAA3pB,EAAA,CAAAwC,QAAA,EAEA,OAAAkE,CACA,CACAkjB,OAAAe,CAAA,EACA,KAAAhB,UAAA,CAAArpB,OAAA,IAAAsqB,CAAA,CAAAD,EAAA,GACA,CACAvE,MAAA,CACA,KAAAwD,MAAA,QACA,CACAvD,OAAA,CACA,KAAAuD,MAAA,SACA,CACA/jB,QAAA,CACA,KAAA+jB,MAAA,UACA,CACA9c,UAAA,CACA,KAAA8c,MAAA,YACA,CACA,CCrEA,IAAAiB,GAAA,CAAAxd,EAAA9M,EAAA6B,EAAAY,EAAA,EAAgE,CAAA+I,EAAA+e,EAOhEC,IAAA,IACA,IAAAC,EAA4BjoB,EAAkBC,EAAAqK,IAAA,GAM9C+K,EAAA4S,EAAA5S,KAAA,EAAApV,EAAAoV,KAAA,IAKA,CAAUuO,QAAAA,EAAA,GAAc3jB,EACxB2jB,GAAwBjlB,EAAqB0W,GAC7C,IAAAE,EAAA,CACA1V,UAAAnD,MAAAC,OAAA,CAAA0C,GAAAA,EAAA,MAAAA,EAAA,CACAK,KAAA,UACAzB,SAAAT,EAAAG,WAAA,GACA,GAAAsqB,CAAA,CACA5S,MAAA,CAAAuO,EACA5N,SAAA,IACAxY,EAAA+L,GAAA,CAAAhN,GACA0rB,EAAAjS,QAAA,EAAAiS,EAAAjS,QAAA,CAAAzZ,EACA,EACA8N,WAAA,KACAA,IACA4d,EAAA5d,UAAA,EAAA4d,EAAA5d,UAAA,GACA2d,GAAAA,GACA,EACAtF,OAAAsF,EACA1d,KAAAA,EACAC,YAAA/M,EACAwL,QAAA+e,EAAA7pB,KAAAA,EAAA8K,CACA,CAKA,EAASkf,S9EnDT,CAA+BC,KAAAA,CAAA,CAAA9S,MAAA+S,CAAA,CAAAC,cAAAA,CAAA,CAAAC,gBAAAA,CAAA,CAAAC,iBAAAA,CAAA,CAAA/nB,OAAAA,CAAA,CAAAC,WAAAA,CAAA,CAAA6U,YAAAA,CAAA,CAAA3M,KAAAA,CAAA,CAAAib,QAAAA,CAAA,IAAA3jB,EAAsI,EACrK,QAAAmL,OAAAyM,IAAA,CAAA5X,GAAAjD,MAAA,E8EkD4BirB,IAC5B1S,CAAAA,EAAA,CACA,GAAAA,CAAA,CACA,GAAe5V,EAAoB2K,EAAAiL,EAAA,CACnC,EAOAA,EAAA9V,QAAA,EACA8V,CAAAA,EAAA9V,QAAA,CAA2Bd,EAAqB4W,EAAA9V,QAAA,GAEhD8V,EAAAD,WAAA,EACAC,CAAAA,EAAAD,WAAA,CAA8B3W,EAAqB4W,EAAAD,WAAA,GAEnDpX,KAAAA,IAAAqX,EAAA5M,IAAA,EACA4M,CAAAA,EAAA1V,SAAA,IAAA0V,EAAA5M,IAAA,EAEA,IAAA6f,EAAA,GAmBA,GAlBA,KAAAjT,EAAAvW,IAAA,EACAuW,CAAAA,IAAAA,EAAA9V,QAAA,EAAA8V,EAAAD,WAAA,IACAC,EAAA9V,QAAA,GACA,IAAA8V,EAAAF,KAAA,EACAmT,CAAAA,EAAA,KAGQnoB,CAAAA,EAAqBrC,OAAA,EACrBkC,EAAkBC,cAAA,IAC1BqoB,EAAA,GACAjT,EAAA9V,QAAA,GACA8V,EAAAF,KAAA,IAOAmT,GAAA,CAAAT,GAAAvqB,KAAAU,IAAAV,EAAAE,GAAA,IACA,IAAAgD,EAA8BH,EAAgBgV,EAAA1V,SAAA,CAAAooB,GAC9C,GAAAvnB,KAAAxC,IAAAwC,EAOA,OANYoD,EAAKT,MAAA,MACjBkS,EAAAS,QAAA,CAAAtV,GACA6U,EAAAlL,UAAA,EACA,GAGA,IAAuBsc,GAAqB,GAE5C,OAMA,CAAAoB,GAAsB/C,GAAoBuB,QAAA,CAAAhR,GAC1C,IAAmByP,GAAoBzP,GAGvC,IAAmB2M,GAAmB3M,EAEtC,ECpHAkT,GAAA,GACAtd,CAAAA,CAAA5O,CAAAA,GAAA,iBAAAA,GAAAA,EAAA0jB,GAAA,EAAA1jB,EAAAmsB,OAAA,EAEAC,GAAA,GAEWlsB,EAAiBF,GAAAA,CAAA,CAAAA,EAAAS,MAAA,OAAAT,ECP5B,SAAAqsB,GAAAvH,CAAA,CAAAwH,CAAA,EACA,KAAAxH,EAAAyH,OAAA,CAAAD,IACAxH,EAAA/X,IAAA,CAAAuf,EACA,CACA,SAAAE,GAAA1H,CAAA,CAAAwH,CAAA,EACA,IAAAhoB,EAAAwgB,EAAAyH,OAAA,CAAAD,GACAhoB,EAAA,IACAwgB,EAAAK,MAAA,CAAA7gB,EAAA,EACA,CCNA,MAAAmoB,GACA7e,aAAA,CACA,KAAA8e,aAAA,IAEApmB,IAAAqmB,CAAA,EAEA,OADQN,GAAa,KAAAK,aAAA,CAAAC,GACrB,IAAqBH,GAAU,KAAAE,aAAA,CAAAC,EAC/B,CACAC,OAAAvd,CAAA,CAAAC,CAAA,CAAAC,CAAA,EACA,IAAAsd,EAAA,KAAAH,aAAA,CAAAjsB,MAAA,CACA,GAAAosB,GAEA,GAAAA,IAAAA,EAIA,KAAAH,aAAA,IAAArd,EAAAC,EAAAC,QAGA,QAAA7O,EAAA,EAA4BA,EAAAmsB,EAAsBnsB,IAAA,CAKlD,IAAAisB,EAAA,KAAAD,aAAA,CAAAhsB,EAAA,CACAisB,GAAAA,EAAAtd,EAAAC,EAAAC,EACA,EAEA,CACAud,SAAA,CACA,YAAAJ,aAAA,CAAAjsB,MAAA,CAEAkG,OAAA,CACA,KAAA+lB,aAAA,CAAAjsB,MAAA,EACA,CACA,CC1BA,IAAAssB,GAAA,GACA,CAAAlb,MAAAlJ,WAAA1H,IAEA+rB,GAAA,CACAvrB,QAAAE,KAAAA,CACA,CAMA,OAAAsrB,GASArf,YAAAsf,CAAA,CAAAlU,EAAA,EAAkC,EAKlC,KAAAmU,OAAA,UAQA,KAAAC,gBAAA,MAIA,KAAAC,MAAA,IACA,KAAAC,eAAA,EAAAttB,EAAAgH,EAAA,MACA,IAAA8e,EAAgCtN,GAAI1Y,GAAA,EAMpC,MAAAytB,SAAA,GAAAzH,GACA,KAAA0H,iBAAA,GAEA,KAAAjtB,IAAA,MAAAkB,OAAA,CACA,KAAAgsB,UAAA,CAAAztB,GAEA,KAAAyB,OAAA,QAAAlB,IAAA,OAAA8sB,MAAA,CAAAK,MAAA,EACA,KAAAL,MAAA,CAAAK,MAAA,CAAAd,MAAA,MAAAnrB,OAAA,EAGAuF,GAAA,KAAAqmB,MAAA,CAAAM,aAAA,EACA,KAAAN,MAAA,CAAAM,aAAA,CAAAf,MAAA,MAAAnrB,OAAA,CAEA,EACA,KAAAmsB,WAAA,IACA,KAAAH,UAAA,CAAAP,GACA,KAAAxE,KAAA,CAAA1P,EAAA0P,KAAA,CAEA+E,WAAAhsB,CAAA,EACA,KAAAA,OAAA,CAAAA,EACA,KAAA8rB,SAAA,CAAyB/U,GAAI1Y,GAAA,GAC7B,YAAAstB,gBAAA,EAAA3rB,KAAAE,IAAAF,GACA,MAAA2rB,gBAAA,CAAAL,GAAA,KAAAtrB,OAAA,EAEA,CACA+rB,kBAAAK,EAAA,KAAApsB,OAAA,EACA,KAAAosB,cAAA,CAAAA,EACA,KAAAC,aAAA,MAAAP,SAAA,CA0CAQ,SAAAC,CAAA,EAIA,YAAAC,EAAA,UAAAD,EACA,CACAC,GAAAC,CAAA,CAAAnoB,CAAA,EACA,KAAAsnB,MAAA,CAAAa,EAAA,EACA,MAAAb,MAAA,CAAAa,EAAA,KAAyCzB,EAAmB,EAE5D,IAAA0B,EAAA,KAAAd,MAAA,CAAAa,EAAA,CAAA5nB,GAAA,CAAAP,SACA,WAAAmoB,EACA,KACAC,IAKgB5mB,EAAKX,IAAA,MACrB,KAAAymB,MAAA,CAAAK,MAAA,CAAAZ,OAAA,IACA,KAAAxH,IAAA,EAEA,EACA,EAEA6I,CACA,CACAC,gBAAA,CACA,QAAAC,KAAA,KAAAhB,MAAA,CACA,KAAAA,MAAA,CAAAgB,EAAA,CAAA1nB,KAAA,EAEA,CAMA2nB,OAAAC,CAAA,CAAAC,CAAA,EACA,KAAAD,aAAA,CAAAA,EACA,KAAAC,iBAAA,CAAAA,CACA,CAgBAxhB,IAAAhN,CAAA,CAAAgH,EAAA,IACA,QAAAunB,aAAA,CAIA,KAAAA,aAAA,CAAAvuB,EAAA,KAAAstB,eAAA,EAHA,KAAAA,eAAA,CAAAttB,EAAAgH,EAKA,CACA+iB,gBAAAxpB,CAAA,CAAAkB,CAAA,CAAAuD,CAAA,EACA,KAAAgI,GAAA,CAAAvL,GACA,KAAAlB,IAAA,CAAAoB,KAAAA,EACA,KAAAksB,cAAA,CAAAttB,EACA,KAAAutB,aAAA,MAAAP,SAAA,CAAAvoB,CACA,CAKAiT,KAAAjY,CAAA,CAAAyuB,EAAA,IACA,KAAAnB,eAAA,CAAAttB,GACA,KAAAO,IAAA,CAAAP,EACA,KAAA8tB,aAAA,MAAAD,cAAA,CAAAlsB,KAAAA,EACA8sB,GAAA,KAAAnJ,IAAA,GACA,KAAAkJ,iBAAA,EACA,KAAAA,iBAAA,EACA,CAQArtB,KAAA,CAIA,OAHA6rB,GAAAvrB,OAAA,EACAurB,GAAAvrB,OAAA,CAAAsL,IAAA,OAEA,KAAAtL,OAAA,CAKAitB,aAAA,CACA,YAAAnuB,IAAA,CASAa,aAAA,K3CnOAM,E2CoOA,IAAAokB,EAA4BtN,GAAI1Y,GAAA,GAChC,SAAAstB,gBAAA,EACA,KAAAzrB,IAAA,KAAAksB,cAAA,EACA/H,EAAA,KAAAyH,SAAA,CAnOA,GAoOA,SAEA,IAAAvoB,EAAAjC,KAAAsE,GAAA,MAAAkmB,SAAA,MAAAO,aAAA,CAtOA,IAwOA,O3C5OApsB,E2C4OgCiH,WAAA,KAAAlH,OAAA,EAChCkH,WAAA,KAAAklB,cAAA,E3C5OA/S,EAAApZ,I2C4OAsD,E3C5OAtD,EAAA,C2C6OA,CAaAzB,MAAA0uB,CAAA,EAEA,OADA,KAAArJ,IAAA,GACA,IAAA5K,QAAA,IACA,KAAAkT,WAAA,IACA,KAAA3E,SAAA,CAAA0F,EAAApU,GACA,KAAA8S,MAAA,CAAAuB,cAAA,EACA,KAAAvB,MAAA,CAAAuB,cAAA,CAAAhC,MAAA,EAEA,GAAStS,IAAA,MACT,KAAA+S,MAAA,CAAAwB,iBAAA,EACA,KAAAxB,MAAA,CAAAwB,iBAAA,CAAAjC,MAAA,GAEA,KAAAkC,cAAA,EACA,EACA,CAMAxJ,MAAA,CACA,KAAA2D,SAAA,GACA,KAAAA,SAAA,CAAA3D,IAAA,GACA,KAAA+H,MAAA,CAAA0B,eAAA,EACA,KAAA1B,MAAA,CAAA0B,eAAA,CAAAnC,MAAA,IAGA,KAAAkC,cAAA,EACA,CAMAE,aAAA,CACA,aAAA/F,SAAA,CAEA6F,gBAAA,CACA,YAAA7F,SAAA,CAWAgG,SAAA,CACA,KAAAb,cAAA,GACA,KAAA9I,IAAA,GACA,KAAAkJ,iBAAA,EACA,KAAAA,iBAAA,EAEA,CACA,CACA,SAAAxgB,GAAAkf,CAAA,CAAAlU,CAAA,EACA,WAAAiU,GAAAC,EAAAlU,EACA,CEzTA,IAAAkW,GAAA,GAAAC,EAAAhe,OAAA,6BAAAie,WAAA,GCAAC,GAAA,QAA+CH,GAD/C,kBEEA,SAAAI,GAAAvhB,CAAA,SACA,EAAsBxK,GAAA,CAAAwK,GACtB,YAEaka,GAAiB1kB,GAAA,CAAAwK,GACfmhB,GAAWnhB,SAE1B,CCPA,MAAAwhB,WAAoCtC,GACpCrf,aAAA,CACA,SAAA4hB,WACA,KAAA/d,MAAA,IACA,KAAAge,MAAA,KAAA9iB,GACA,CACArG,IAAAyH,CAAA,EACA,IAAA2hB,EAA0BJ,GAAiBvhB,GAC3C,IAAA2hB,EACA,OAMA,IAAAC,EAAA,KAAAF,MAAA,CAAAtuB,GAAA,CAAAuuB,IAAA,EACA,KAAAD,MAAA,CAAAziB,GAAA,CAAA0iB,EAAAC,EAAA,GACA,IAAAA,IACA,KAAAle,MAAA,CAAA1E,IAAA,CAAA2iB,GACA,KAAA5oB,MAAA,IAKA,IAAA8oB,EAAA,GACA,WACA,GAAAA,EACA,OACAA,EAAA,GACA,IAAAC,EAAA,KAAAJ,MAAA,CAAAtuB,GAAA,CAAAuuB,GAAA,EACA,KAAAD,MAAA,CAAAziB,GAAA,CAAA0iB,EAAAG,GACA,IAAAA,IACgBrD,GAAU,KAAA/a,MAAA,CAAAie,GAC1B,KAAA5oB,MAAA,GAEA,CACA,CACAA,QAAA,CACA,KAAAkG,GAAA,MAAAyE,MAAA,CAAAhR,MAAA,MAAAgR,MAAA,CAAAc,IAAA,cACA,CACA,CC5CA,IAAAud,GAAA,GAAAlhB,CAAAA,CAAA3N,CAAAA,GAAAA,EAAAG,WAAA,EEGA,SAAA2uB,GAAAlvB,CAAA,CAAAK,CAAA,MACAiM,EDFAlM,ECGA,IAAAJ,EAAAmvB,eAAA,CACA,OACA,IAAAC,EAAApvB,EAAAiM,QAAA,eAaA,GARAmjB,GAAA,QAAA9iB,CAAAA,EAAAtM,EAAAS,KAAA,CAAA4uB,KAAA,GAAA/iB,KAAA,IAAAA,EAAA,OAAAA,EAAA8iB,UAAA,IACAA,EAAA,IAAyBV,GAAqB,QAC9C1uB,EAAAsvB,QAAA,cAAAF,IDXmBH,GADnB7uB,ECkB+BgvB,IDjBChvB,EAAAqF,GAAA,CCkBhC,OAAA2pB,EAAA3pB,GAAA,CAAApF,EAEA,CCJA,SAAAkvB,GAAAvvB,CAAA,CAAAwvB,CAAA,EAA6DvX,MAAAA,EAAA,EAAAwX,mBAAAA,CAAA,CAAA7tB,KAAAA,CAAA,EAAsC,EAAI,EACvG,IAAA0K,EACA,IAAUzJ,WAAAA,EAAA7C,EAAAuC,oBAAA,GAAAmtB,cAAAA,CAAA,IAAAztB,EAAA,CAA8EutB,EACxFC,GACA5sB,CAAAA,EAAA4sB,CAAA,EACA,IAAAjG,EAAA,GACAmG,EAAA/tB,GACA5B,EAAA4vB,cAAA,EACA5vB,EAAA4vB,cAAA,CAAAC,QAAA,GAAAjuB,EAAA,CACA,QAAAvB,KAAA4B,EAAA,CACA,IAAA7B,EAAAJ,EAAAiM,QAAA,CAAA5L,EAAA,OAAAiM,CAAAA,EAAAtM,EAAA8vB,YAAA,CAAAzvB,EAAA,GAAAiM,KAAA,IAAAA,EAAAA,EAAA,MACAyjB,EAAA9tB,CAAA,CAAA5B,EAAA,CACA,GAAA0vB,KAAAjvB,IAAAivB,GACAJ,GACAK,SAnBA,CAAgCC,cAAAA,CAAA,CAAAC,eAAAA,CAAA,CAA+B,CAAA7vB,CAAA,EAC/D,IAAA8vB,EAAAF,EAAA/hB,cAAA,CAAA7N,IAAA6vB,CAAA,IAAAA,CAAA,CAAA7vB,EAAA,CAEA,OADA6vB,CAAA,CAAA7vB,EAAA,IACA8vB,CACA,EAeAR,EAAAtvB,GACA,SAEA,IAAAwqB,EAAA,CACA5S,MAAAA,EACA,GAAerV,EAAkBC,GAAA,GAAiBxC,EAAA,EAMlDsqB,EAAA,GACA,GAAAle,OAAA2jB,sBAAA,EACA,IAAAC,EN3CArwB,EAAAS,KAAA,CAA+B+tB,GAA4B,CM4C3D,GAAA6B,EAAA,CACA,IAAAjL,EAAA3Y,OAAA2jB,sBAAA,CAAAC,EAAAhwB,EAA+EqG,EAC/E,QAAA0e,IACAyF,EAAAzF,SAAA,CAAAA,EACAuF,EAAA,GAEA,CACA,CACAvqB,EAAAhB,KAAA,CAAoBsrB,GAAkBrqB,EAAAD,EAAA2vB,EAAA/vB,EAAAswB,kBAAA,EAA8DjvB,EAAcqB,GAAA,CAAArC,GAClH,CAAgBuB,KAAA,IAChBipB,EAAA7qB,EAAA2qB,EAAyDuE,GAAoBlvB,EAAAK,KAC7E,IAAA+nB,EAAAhoB,EAAAgoB,SAAA,CACAA,GACAoB,EAAAtd,IAAA,CAAAkc,EAEA,CAQA,OAPAsH,GACA7V,QAAA+P,GAAA,CAAAJ,GAAA/P,IAAA,MACY/S,EAAKT,MAAA,MACjBypB,GAAiCa,STlDjCvwB,CAAA,CAAAU,CAAA,EAEA,IAAUgvB,cAAAA,EAAA,EAAkB,CAAA7sB,WAAAA,EAAA,EAAiB,IAAAZ,EAAA,CAAc0T,EADxB3V,EAAAU,IACwB,GAE3D,QAAAL,KADA4B,EAAA,CAAe,GAAAA,CAAA,IAAAytB,CAAA,EACf,CACA,IAAAtvB,EAAsBmrB,GAA4BtpB,CAAA,CAAA5B,EAAA,EAZlDL,EAAAwwB,QAAA,CAaAnwB,GAZAL,EAAAiM,QAAA,CAYA5L,GAZA8L,GAAA,CAYA/L,GATAJ,EAAAsvB,QAAA,CASAjvB,EAToC8M,GASpC/M,GACA,CACA,ES0C0CJ,EAAA0vB,EAC1C,EACA,GAEAlG,CACA,CCpEA,SAAAiH,GAAAzwB,CAAA,CAAA0wB,CAAA,CAAAvY,EAAA,EAA4D,EAC5D,IAAA7L,EACA,IAAAqJ,EAAqB3U,EAAchB,EAAA0wB,EAAAvY,SAAAA,EAAAvW,IAAA,CACnC,OAAA0K,CAAAA,EAAAtM,EAAA2wB,eAAA,GAAArkB,KAAA,IAAAA,EAAA,OAAAA,EAAA3L,MAAA,CACAG,KAAAA,GACA,CAAU+B,WAAAA,EAAA7C,EAAAuC,oBAAA,QAA0DoT,GAAA,EACpEwC,CAAAA,EAAAsX,kBAAA,EACA5sB,CAAAA,EAAAsV,EAAAsX,kBAAA,EAMA,IAAAmB,EAAAjb,EACA,IAAAkE,QAAA+P,GAAA,CAA4B2F,GAAavvB,EAAA2V,EAAAwC,IACzC,IAAA0B,QAAAH,OAAA,GAKAmX,EAAA7wB,EAAA8wB,eAAA,EAAA9wB,EAAA8wB,eAAA,CAAApe,IAAA,CACA,CAAAqe,EAAA,KACA,IAAoB9F,cAAAA,EAAA,EAAAC,gBAAAA,CAAA,CAAAC,iBAAAA,CAAA,EAAwDtoB,EAC5E,OAAAmuB,SAkBAhxB,CAAA,CAAA0wB,CAAA,CAAAzF,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAhT,CAAA,EACA,IAAAqR,EAAA,GACAyH,EAAA,CAAAjxB,EAAA8wB,eAAA,CAAApe,IAAA,IAAAwY,EACAgG,EAAA/F,IAAAA,EACA,CAAAtrB,EAAA,IAAAA,EAAAqrB,EACA,CAAArrB,EAAA,IAAAoxB,EAAApxB,EAAAqrB,EAUA,OATA5rB,MAAAiM,IAAA,CAAAvL,EAAA8wB,eAAA,EACAK,IAAA,CAAAC,IACAjxB,OAAA,EAAAkxB,EAAAxxB,KACAwxB,EAAAtF,MAAA,kBAAA2E,GACAlH,EAAAtd,IAAA,CAAAukB,GAAAY,EAAAX,EAAA,CACA,GAAAvY,CAAA,CACAF,MAAAgT,EAAAiG,EAAArxB,EACA,GAAS4Z,IAAA,KAAA4X,EAAAtF,MAAA,qBAAA2E,IACT,GACA7W,QAAA+P,GAAA,CAAAJ,EACA,EAlCAxpB,EAAA0wB,EAAAzF,EAAA8F,EAAA7F,EAAAC,EAAAhT,EACA,EACA,IAAA0B,QAAAH,OAAA,GAKA,CAAYqR,KAAAA,CAAA,EAAOloB,EACnB,IAAAkoB,EAOA,OAAAlR,QAAA+P,GAAA,EAAAgH,IAAAC,EAAA1Y,EAAAF,KAAA,GAPA,EACA,IAAAqZ,EAAAC,EAAA,CAAAxG,mBAAAA,EACA,CAAA6F,EAAAC,EAAA,CACA,CAAAA,EAAAD,EAAA,CACA,OAAAU,IAAA7X,IAAA,KAAA8X,IACA,CAIA,CAkBA,SAAAH,GAAA5iB,CAAA,CAAAC,CAAA,EACA,OAAAD,EAAAgjB,gBAAA,CAAA/iB,EACA,CEvDA,IAAAgjB,GAAA,IAAiCvwB,EAAoB,CAAAqiB,OAAA,GACrDmO,GAA0BxwB,EAAoBtB,MAAA,CA0S9C,SAAA+xB,GAAAC,EAAA,IACA,OACAA,SAAAA,EACA3B,cAAA,GACAC,eAAA,GACA2B,mBAAA,EACA,CACA,CACA,SAAAC,KACA,OACAtJ,QAAAmJ,GAAA,IACAI,YAAAJ,KACAK,WAAAL,KACAM,SAAAN,KACAO,UAAAP,KACAQ,WAAAR,KACAS,KAAAT,IACA,CACA,CCrUA,MAAAU,GACAtlB,YAAAulB,CAAA,EACA,KAAAC,SAAA,IACA,KAAAD,IAAA,CAAAA,CACA,CACArsB,QAAA,EACA,CCFA,MAAAusB,WAA+BH,GAM/BtlB,YAAAulB,CAAA,EACA,MAAAA,GACAA,EAAA1C,cAAA,EAAA0C,CAAAA,EAAA1C,cAAA,CAAsD6C,SFCtDzyB,CAAA,EACA,IAAAwoB,EAHA,GAAA3O,QAAA+P,GAAA,CAAAJ,EAAA7d,GAAA,GAAyDyc,UAAAA,CAAA,CAAAjQ,QAAAA,CAAA,CAAoB,GAAKua,CDPlF,SAAA1yB,CAAA,CAAAU,CAAA,CAAAyX,EAAA,EAAqE,MAErEiQ,EACA,GAFApoB,EAAA+rB,MAAA,kBAAArrB,GAEApB,MAAAC,OAAA,CAAAmB,GAEA0nB,EAAAvO,QAAA+P,GAAA,CADAlpB,EAAAiL,GAAA,IAAuD8kB,GAAczwB,EAAA0wB,EAAAvY,UAGrE,oBAAAzX,EACA0nB,EAAoBqI,GAAczwB,EAAAU,EAAAyX,OAElC,CACA,IAAAwa,EAAA,mBAAAjyB,EACcM,EAAchB,EAAAU,EAAAyX,EAAAxX,MAAA,EAC5BD,EACA0nB,EAAAvO,QAAA+P,GAAA,CAAgC2F,GAAavvB,EAAA2yB,EAAAxa,GAC7C,CACA,OAAAiQ,EAAA3O,IAAA,MACAzZ,EAAA+rB,MAAA,qBAAArrB,EACA,EACA,GCTAV,EAHsGooB,EAAAjQ,KAItGlY,EAAA6xB,KACAc,EAAA,GAKAC,EAAA,IAAApuB,EAAA/D,KACA,IAAA4L,EACA,IAAAqJ,EAAyB3U,EAAchB,EAAAU,EAAAkB,SAAAA,EACvC,OAAA0K,CAAAA,EAAAtM,EAAA2wB,eAAA,GAAArkB,KAAA,IAAAA,EAAA,OAAAA,EAAA3L,MAAA,CACAG,KAAAA,GACA,GAAA6U,EAAA,CACA,IAAoB9S,WAAAA,CAAA,CAAA6sB,cAAAA,CAAA,IAAAztB,EAAA,CAAuC0T,EAC3DlR,EAAA,CAAoB,GAAAA,CAAA,IAAAxC,CAAA,IAAAytB,CAAA,CACpB,CACA,OAAAjrB,CACA,EAkBA,SAAAquB,EAAAC,CAAA,EACA,IAAAtyB,EAAAT,EAAAiB,QAAA,GACA+xB,EAAAhzB,EAAAizB,iBAAA,SAKAzJ,EAAA,GAKA0J,EAAA,IAAA5xB,IAMA6xB,EAAA,GAKAC,EAAAtN,IAOA,QAAAjmB,EAAA,EAAwBA,EAAA6xB,GAAuB7xB,IAAA,KA2N/CH,EA1NA,IAAAkC,EAAA6vB,EAAA,CAAA5xB,EAAA,CACAwzB,EAAApzB,CAAA,CAAA2B,EAAA,CACA0xB,EAAA7yB,KAAAK,IAAAL,CAAA,CAAAmB,EAAA,CACAnB,CAAA,CAAAmB,EAAA,CACAoxB,CAAA,CAAApxB,EAAA,CACA2xB,EAAkCzzB,EAAcwzB,GAKhDE,EAAA5xB,IAAAmxB,EAAAM,EAAAzB,QAAA,KACA,MAAA4B,GACAJ,CAAAA,EAAAvzB,CAAAA,EAOA,IAAA4zB,EAAAH,IAAAN,CAAA,CAAApxB,EAAA,EACA0xB,IAAA7yB,CAAA,CAAAmB,EAAA,EACA2xB,EAeA,GAXAE,GACAb,GACA5yB,EAAA0zB,sBAAA,EACAD,CAAAA,EAAA,IAMAJ,EAAApD,aAAA,EAAwC,GAAAkD,CAAA,EAIxC,CAAAE,EAAAzB,QAAA,EAAA4B,OAAAA,GAEA,CAAAF,GAAA,CAAAD,EAAAM,QAAA,EAEgBz0B,EAAmBo0B,IACnC,kBAAAA,EACA,SAQA,IAAAM,EAAAC,CAAAA,EADAR,EAAAM,QAAA,CACAE,CAuKA,iBAxKAP,EAyKA7zB,IAAAC,IAEAJ,MAAAC,OAAA,CA3KA+zB,IA4KA,CAAgB9zB,EA5KhB8zB,EA4K8B5zB,EAC9B,GA1KAkC,IAAAmxB,GACAM,EAAAzB,QAAA,EACA,CAAA6B,GACAF,GAEA1zB,EAAAuzB,GAAAG,CAAA,EACAO,EAAA,GAKAC,EAAAz0B,MAAAC,OAAA,CAAA+zB,GAAAA,EAAA,CAAAA,EAAA,CAKAU,EAAAD,EAAAvvB,MAAA,CAAAquB,EAAAjxB,GAAA,GACA,MAAA4xB,GACAQ,CAAAA,EAAA,IAUA,IAAoBnC,mBAAAA,EAAA,IAA0BwB,EAC9CY,EAAA,CACA,GAAApC,CAAA,CACA,GAAAmC,CAAA,EAEAE,EAAA,IACAN,EAAA,GACAV,EAAAxwB,GAAA,CAAArC,KACAyzB,EAAA,GACAZ,EAAAvtB,MAAA,CAAAtF,IAEAgzB,EAAAnD,cAAA,CAAA7vB,EAAA,IACA,IAAA8M,EAAAnN,EAAAiM,QAAA,CAAA5L,GACA8M,GACAA,CAAAA,EAAAgnB,SAAA,IACA,EACA,QAAA9zB,KAAA4zB,EAAA,CACA,IAAAx0B,EAAAu0B,CAAA,CAAA3zB,EAAA,CACAX,EAAAmyB,CAAA,CAAAxxB,EAAA,CAEA,IAAA8yB,EAAAjlB,cAAA,CAAA7N,IAMoBhB,EAAiBI,IAAUJ,EAAiBK,GACzBF,EAAcC,EAAAC,GAGrDD,IAAAC,GAYAD,KAAAqB,IAAArB,GAAAyzB,EAAAxwB,GAAA,CAAArC,GAKA6zB,EAAA7zB,GAOAgzB,EAAApD,aAAA,CAAA5vB,EAAA,IArBAZ,MAAAA,EAEAy0B,EAAA7zB,GAIA6yB,EAAAztB,GAAA,CAAApF,EAiBA,CAKAgzB,EAAAM,QAAA,CAAAL,EACAD,EAAAxB,kBAAA,CAAAmC,EAIAX,EAAAzB,QAAA,EACAuB,CAAAA,EAAA,CAAoC,GAAAA,CAAA,IAAAa,CAAA,GAEpCpB,GAAA5yB,EAAAo0B,qBAAA,EACAR,CAAAA,EAAA,IAKAA,GAAA,EAAAH,GAAAK,CAAA,GACAtK,EAAAtd,IAAA,IAAA6nB,EAAApoB,GAAA,MACAyc,UAAAA,EACAjQ,QAAA,CAA+BvW,KAAAA,CAAA,CAC/B,IAEA,CAMA,GAAAsxB,EAAAxgB,IAAA,EACA,IAAA2hB,EAAA,GACAnB,EAAA/yB,OAAA,KACA,IAAAm0B,EAAAt0B,EAAAu0B,aAAA,CAAAl0B,GACA8M,EAAAnN,EAAAiM,QAAA,CAAA5L,GACA8M,GACAA,CAAAA,EAAAgnB,SAAA,KAEAE,CAAA,CAAAh0B,EAAA,CAAAi0B,MAAAA,EAAAA,EAAA,IACA,GACA9K,EAAAtd,IAAA,EAA8Bkc,UAAAiM,CAAA,EAC9B,CACA,IAAAG,EAAAzmB,CAAAA,CAAAyb,EAAA5pB,MAAA,CAOA,OANAgzB,GACAnyB,CAAAA,CAAA,IAAAA,EAAAg0B,OAAA,EAAAh0B,EAAAg0B,OAAA,GAAAh0B,EAAA+nB,OAAA,GACA,CAAAxoB,EAAA0zB,sBAAA,EACAc,CAAAA,EAAA,IAEA5B,EAAA,GACA4B,EAAAhM,EAAAgB,GAAA3P,QAAAH,OAAA,EACA,CAkBA,OACAoZ,eAAAA,EACA4B,UAhBA,SAAA9yB,CAAA,CAAAgwB,CAAA,EACA,IAAAtlB,EAEA,GAAArM,CAAA,CAAA2B,EAAA,CAAAgwB,QAAA,GAAAA,EACA,OAAA/X,QAAAH,OAAA,EAEA,QAAApN,CAAAA,EAAAtM,EAAA8wB,eAAA,GAAAxkB,KAAA,IAAAA,GAAAA,EAAAnM,OAAA,KAA0G,IAAAmM,EAAQ,cAAAA,CAAAA,EAAA+kB,EAAAzB,cAAA,GAAAtjB,KAAA,IAAAA,EAAA,OAAAA,EAAAooB,SAAA,CAAA9yB,EAAAgwB,EAAA,GAClH3xB,CAAA,CAAA2B,EAAA,CAAAgwB,QAAA,CAAAA,EACA,IAAApI,EAAAsJ,EAAAlxB,GACA,QAAAvB,KAAAJ,EACAA,CAAA,CAAAI,EAAA,CAAA4vB,aAAA,IAEA,OAAAzG,CACA,EAIAmL,mBA9PA,SAAAC,CAAA,EACApM,EAAAoM,EAAA50B,EACA,EA6PA6vB,SAAA,IAAA5vB,EACA40B,MAAA,KACA50B,EAAA6xB,KACAc,EAAA,EACA,CACA,CACA,EE7R0EN,EAAA,CAC1E,CACAwC,qCAAA,CACA,IAAgBtM,QAAAA,CAAA,EAAU,KAAA8J,IAAA,CAAArxB,QAAA,GACd/B,EAAmBspB,IAC/B,MAAAuM,eAAA,CAAAvM,EAAAwM,SAAA,MAAA1C,IAAA,EAEA,CAIA2C,OAAA,CACA,KAAAH,mCAAA,EACA,CACA7uB,QAAA,CACA,IAAgBuiB,QAAAA,CAAA,EAAU,KAAA8J,IAAA,CAAArxB,QAAA,GAC1B,CAAgBunB,QAAA0M,CAAA,EAAuB,KAAA5C,IAAA,CAAA6C,SAAA,KACvC3M,IAAA0M,GACA,KAAAJ,mCAAA,EAEA,CACAM,SAAA,CACA,IAAA9oB,EACA,KAAAgmB,IAAA,CAAA1C,cAAA,CAAAiF,KAAA,GACA,OAAAvoB,CAAAA,EAAA,KAAAyoB,eAAA,GAAAzoB,KAAA,IAAAA,GAAAA,EAAA6B,IAAA,MACA,CACA,CCpCA,IAAAknB,GAAA,CACA,OAAAC,WAAmCjD,GACnCtlB,aAAA,CACA,SAAA4hB,WACA,KAAA0G,EAAA,CAAAA,IACA,CACApvB,QAAA,CACA,SAAAqsB,IAAA,CAAA3B,eAAA,CACA,OACA,IAAgB4E,UAAAA,CAAA,CAAAC,eAAAA,CAAA,EAA4B,KAAAlD,IAAA,CAAA3B,eAAA,CAC5C,CAAgB4E,UAAAE,CAAA,EAA2B,KAAAnD,IAAA,CAAAoD,mBAAA,KAC3C,SAAApD,IAAA,CAAA1C,cAAA,EAAA2F,IAAAE,EACA,OAEA,IAAAE,EAAA,KAAArD,IAAA,CAAA1C,cAAA,CAAA8E,SAAA,SAAAa,GACAC,GAAA,CAAAD,GACAI,EAAAlc,IAAA,KAAA+b,EAAA,KAAAH,EAAA,EAEA,CACAJ,OAAA,CACA,IAAgBW,SAAAA,CAAA,EAAW,KAAAtD,IAAA,CAAA3B,eAAA,KAC3BiF,GACA,MAAAR,OAAA,CAAAQ,EAAA,KAAAP,EAAA,EAEA,CACAD,SAAA,EACA,CE5BA,IAAAS,GAAA,GACA,UAAAC,EAAAC,WAAA,CACA,iBAAAD,EAAAE,MAAA,EAAAF,EAAAE,MAAA,IAWAF,CAAA,IAAAA,EAAAG,SAAA,CCXA,SAAAC,GAAAJ,CAAA,CAAAK,EAAA,QACA,OACAC,MAAA,CACAnsB,EAAA6rB,CAAA,IAAwBK,EAAU,IAClC9rB,EAAAyrB,CAAA,IAAwBK,EAAU,IAElC,CACA,CACA,IAAAE,GAAA,GACA,GAAsBR,GAAgBC,IAAAhK,EAAAgK,EAAAI,GAAAJ,ICXtC,SAAAQ,GAAAr0B,CAAA,CAAAorB,CAAA,CAAAvB,CAAA,CAAA3T,EAAA,CAA6Doe,QAAA,GAAe,EAE5E,OADAt0B,EAAAu0B,gBAAA,CAAAnJ,EAAAvB,EAAA3T,GACA,IAAAlW,EAAAw0B,mBAAA,CAAApJ,EAAAvB,EACA,CCAA,SAAA4K,GAAAz0B,CAAA,CAAAorB,CAAA,CAAAvB,CAAA,CAAA3T,CAAA,EACA,OAAWme,GAAWr0B,EAAAorB,EAAoBgJ,GAAcvK,GAAA3T,EACxD,CCLA,IAAAxE,GAAA,CAAAnF,EAAAC,IAAAvM,KAAAka,GAAA,CAAA5N,EAAAC,ECWA,OAAAkoB,GACA5pB,YAAA+oB,CAAA,CAAAc,CAAA,EAAmCh4B,mBAAAA,CAAA,CAAAi4B,cAAAA,CAAA,CAAAC,iBAAAA,EAAA,IAA8D,EAAI,EAgErG,GA5DA,KAAAC,UAAA,MAIA,KAAAC,aAAA,MAIA,KAAAC,iBAAA,MAIA,KAAAL,QAAA,IAIA,KAAAC,aAAA,CAAApqB,OACA,KAAAyqB,WAAA,UDhCA1oB,EAAAC,ECiCA,UAAAuoB,aAAA,OAAAC,iBAAA,EACA,OACA,IAAAE,EAAAC,GAAA,KAAAH,iBAAA,MAAAI,OAAA,EACAC,EAAA,YAAAP,UAAA,CAIAQ,EAA4CC,CAAAA,EAAUL,EAAApT,MAAA,CDxCtDtV,ECwCsD,CAAgBxE,EAAA,EAAAI,EAAA,GDpCtEnI,KAAAC,IAAA,CAAAs1B,GAFAjpB,EAAAvE,CAAA,CAAAwE,EAAAxE,CAAA,GAEA,EAAAytB,GADAlpB,EAAAnE,CAAA,CAAAoE,EAAApE,CAAA,GACA,ICoCkF,GAClF,IAAAitB,GAAA,CAAAC,EACA,OACA,IAAoBnB,MAAAA,CAAA,EAAQe,EAC5B,CAAoB/yB,UAAAA,CAAA,EAAcyB,EAClC,KAAAwxB,OAAA,CAAAnrB,IAAA,EAAgC,GAAAkqB,CAAA,CAAAhyB,UAAAA,CAAA,GAChC,IAAoBuzB,QAAAA,CAAA,CAAAC,OAAAA,CAAA,EAAkB,KAAAhB,QAAA,CACtCU,IACAK,GAAAA,EAAA,KAAAX,aAAA,CAAAG,GACA,KAAAJ,UAAA,MAAAC,aAAA,EAEAY,GAAAA,EAAA,KAAAZ,aAAA,CAAAG,EACA,EACA,KAAAU,iBAAA,EAAA/B,EAAAqB,KACA,KAAAH,aAAA,CAAAlB,EACA,KAAAmB,iBAAA,CAAAa,GAAAX,EAAA,KAAAv4B,kBAAA,EAEY8H,EAAKT,MAAA,MAAAixB,WAAA,IACjB,EACA,KAAAa,eAAA,EAAAjC,EAAAqB,KACA,KAAAa,GAAA,GACA,IAAoBpN,MAAAA,CAAA,CAAAqN,aAAAA,CAAA,CAAAC,gBAAAA,CAAA,EAAuC,KAAAtB,QAAA,CAG3D,GAFA,KAAAE,gBAAA,EACAoB,GAAAA,IACA,OAAAlB,aAAA,OAAAC,iBAAA,EACA,OACA,IAAAkB,EAAAf,GAAAtB,kBAAAA,EAAAl0B,IAAA,CACA,KAAAq1B,iBAAA,CACAa,GAAAX,EAAA,KAAAv4B,kBAAA,OAAAy4B,OAAA,CACA,MAAAN,UAAA,EAAAnM,GACAA,EAAAkL,EAAAqC,GAEAF,GAAAA,EAAAnC,EAAAqC,EACA,EAEA,CAAatC,GAAgBC,GAC7B,MACA,MAAAgB,gBAAA,CAAAA,EACA,KAAAF,QAAA,CAAAA,EACA,KAAAh4B,kBAAA,CAAAA,EACA,KAAAi4B,aAAA,CAAAA,GAAApqB,OAEA,IAAA2rB,EAAAN,GADqB5B,GAAgBJ,GACrC,KAAAl3B,kBAAA,EACA,CAAgBw3B,MAAAA,CAAA,EAAQgC,EACxB,CAAgBh0B,UAAAA,CAAA,EAAcyB,CAC9B,MAAAwxB,OAAA,GAA0B,GAAAjB,CAAA,CAAAhyB,UAAAA,CAAA,EAAqB,CAC/C,IAAgBi0B,eAAAA,CAAA,EAAiBzB,CACjCyB,CAAAA,GACAA,EAAAvC,EAAAsB,GAAAgB,EAAA,KAAAf,OAAA,GACA,KAAAiB,eAAA,CAA+B9X,GAAKkW,GAAe,KAAAG,aAAA,oBAAAgB,iBAAA,EAA6DnB,GAAe,KAAAG,aAAA,kBAAAkB,eAAA,EAAyDrB,GAAe,KAAAG,aAAA,sBAAAkB,eAAA,EACvM,CACAQ,eAAA3B,CAAA,EACA,KAAAA,QAAA,CAAAA,CACA,CACAoB,KAAA,CACA,KAAAM,eAAA,OAAAA,eAAA,GACQ3xB,EAAW,KAAAuwB,WAAA,CACnB,CACA,CACA,SAAAY,GAAAX,CAAA,CAAAv4B,CAAA,EACA,OAAAA,EAAA,CAAkCw3B,MAAAx3B,EAAAu4B,EAAAf,KAAA,GAAwCe,CAC1E,CACA,SAAAqB,GAAAhqB,CAAA,CAAAC,CAAA,EACA,OAAaxE,EAAAuE,EAAAvE,CAAA,CAAAwE,EAAAxE,CAAA,CAAAI,EAAAmE,EAAAnE,CAAA,CAAAoE,EAAApE,CAAA,CACb,CACA,SAAA+sB,GAAA,CAAsBhB,MAAAA,CAAA,CAAO,CAAAiB,CAAA,EAC7B,OACAjB,MAAAA,EACAjyB,MAAAq0B,GAAApC,EAAAqC,GAAApB,IACAtT,OAAAyU,GAAApC,EAKAiB,CAAA,KAJAx2B,SAAAN,SASA82B,CAAA,CAAAqB,CAAA,EACA,GAAArB,EAAAz3B,MAAA,GACA,OAAiBqK,EAAA,EAAAI,EAAA,GAEjB,IAAAxK,EAAAw3B,EAAAz3B,MAAA,GACA+4B,EAAA,KACAC,EAAAH,GAAApB,GACA,KAEA,GAFA,IACAsB,EAAAtB,CAAA,CAAAx3B,EAAA,EACA+4B,CAAAA,EAAAx0B,SAAA,CAAAu0B,EAAAv0B,SAAA,CACY7C,EAnBZ,GAmBiC,IAGjC1B,IAEA,IAAA84B,EACA,OAAiB1uB,EAAA,EAAAI,EAAA,GAEjB,IAAAsN,EAAiBlW,EAAqBm3B,EAAAx0B,SAAA,CAAAu0B,EAAAv0B,SAAA,EACtC,GAAAuT,IAAAA,EACA,OAAiB1N,EAAA,EAAAI,EAAA,GAEjB,IAAAwS,EAAA,CACA5S,EAAA,CAAA2uB,EAAA3uB,CAAA,CAAA0uB,EAAA1uB,CAAA,EAAA0N,EACAtN,EAAA,CAAAuuB,EAAAvuB,CAAA,CAAAsuB,EAAAtuB,CAAA,EAAAsN,CACA,EAOA,OANAkF,EAAA5S,CAAA,GAAA6b,KACAjJ,CAAAA,EAAA5S,CAAA,IAEA4S,EAAAxS,CAAA,GAAAyb,KACAjJ,CAAAA,EAAAxS,CAAA,IAEAwS,CACA,EA1CAwa,EAAA,EACA,CACA,CAIA,SAAAoB,GAAApB,CAAA,EACA,OAAAA,CAAA,CAAAA,EAAAz3B,MAAA,ICtHA,SAAAi5B,GAAA3rB,CAAA,EACA,IAAA4rB,EAAA,KACA,UAIA,OAAAA,IACAA,EAAA5rB,EAJA,KACA4rB,EAAA,IACA,EAOA,CACA,IAAAC,GAAAF,GAAA,kBACAG,GAAAH,GAAA,gBACA,SAAAI,GAAAC,CAAA,EACA,IAAAJ,EAAA,GACA,GAAAI,MAAAA,EACAJ,EAAAE,UAEA,GAAAE,MAAAA,EACAJ,EAAAC,SAEA,CACA,IAAAI,EAAAJ,KACAK,EAAAJ,IACAG,CAAAA,GAAAC,EACAN,EAAA,KACAK,IACAC,GACA,GAIAD,GACAA,IACAC,GACAA,IAEA,CACA,OAAAN,CACA,CACA,SAAAO,KAGA,IAAAC,EAAAL,GAAA,UACA,CAAAK,IAEAA,IACA,GACA,CClDA,SAAAC,GAAAC,CAAA,EACA,OAAAA,GACA,iBAAAA,GACAxrB,OAAAC,SAAA,CAAAC,cAAA,CAAAC,IAAA,CAAAqrB,EAAA,UACA,CCIA,SAAAC,GAAAC,CAAA,EACA,OAAAA,EAAAnzB,GAAA,CAAAmzB,EAAAlzB,GAAA,CAKA,SAAAmzB,GAAAx1B,CAAA,CAAAuM,CAAA,CAAAzO,CAAA,CAAAwU,EAAA,IACAtS,EAAAsS,MAAA,CAAAA,EACAtS,EAAAy1B,WAAA,CAAwB/Y,GAASnQ,EAAAlK,GAAA,CAAAkK,EAAAnK,GAAA,CAAApC,EAAAsS,MAAA,EACjCtS,EAAA8D,KAAA,CAAAwxB,GAAAx3B,GAAAw3B,GAAA/oB,GACAvM,EAAA01B,SAAA,CACQhZ,GAAS5e,EAAAuE,GAAA,CAAAvE,EAAAsE,GAAA,CAAApC,EAAAsS,MAAA,EAAAtS,EAAAy1B,WAAA,CACjB,GAAA3xB,KAAA,EAjBA,OAiBA9D,EAAA8D,KAAA,EAhBA,QAiBA+I,MAAA7M,EAAA8D,KAAA,IACA9D,CAAAA,EAAA8D,KAAA,IAEA,GAAA4xB,SAAA,EAlBA,MAmBA11B,EAAA01B,SAAA,EAlBA,KAmBA7oB,MAAA7M,EAAA01B,SAAA,IACA11B,CAAAA,EAAA01B,SAAA,GAEA,CACA,SAAAC,GAAA31B,CAAA,CAAAuM,CAAA,CAAAzO,CAAA,CAAAwU,CAAA,EACAkjB,GAAAx1B,EAAA8F,CAAA,CAAAyG,EAAAzG,CAAA,CAAAhI,EAAAgI,CAAA,CAAAwM,EAAAA,EAAAxC,OAAA,CAAAnT,KAAAA,GACA64B,GAAAx1B,EAAAkG,CAAA,CAAAqG,EAAArG,CAAA,CAAApI,EAAAoI,CAAA,CAAAoM,EAAAA,EAAAvC,OAAA,CAAApT,KAAAA,EACA,CACA,SAAAi5B,GAAA93B,CAAA,CAAA+3B,CAAA,CAAAC,CAAA,EACAh4B,EAAAuE,GAAA,CAAAyzB,EAAAzzB,GAAA,CAAAwzB,EAAAxzB,GAAA,CACAvE,EAAAsE,GAAA,CAAAtE,EAAAuE,GAAA,CAAAizB,GAAAO,EACA,CAKA,SAAAE,GAAAj4B,CAAA,CAAAk4B,CAAA,CAAAF,CAAA,EACAh4B,EAAAuE,GAAA,CAAA2zB,EAAA3zB,GAAA,CAAAyzB,EAAAzzB,GAAA,CACAvE,EAAAsE,GAAA,CAAAtE,EAAAuE,GAAA,CAAAizB,GAAAU,EACA,CACA,SAAAC,GAAAn4B,CAAA,CAAAk4B,CAAA,CAAAF,CAAA,EACAC,GAAAj4B,EAAAgI,CAAA,CAAAkwB,EAAAlwB,CAAA,CAAAgwB,EAAAhwB,CAAA,EACAiwB,GAAAj4B,EAAAoI,CAAA,CAAA8vB,EAAA9vB,CAAA,CAAA4vB,EAAA5vB,CAAA,CACA,CCnBA,SAAAgwB,GAAAX,CAAA,CAAAlzB,CAAA,CAAAD,CAAA,EACA,OACAC,IAAAA,KAAA1F,IAAA0F,EAAAkzB,EAAAlzB,GAAA,CAAAA,EAAA1F,KAAAA,EACAyF,IAAAA,KAAAzF,IAAAyF,EACAmzB,EAAAnzB,GAAA,CAAAA,EAAAmzB,CAAAA,EAAAnzB,GAAA,CAAAmzB,EAAAlzB,GAAA,EACA1F,KAAAA,CACA,CACA,CAcA,SAAAw5B,GAAAC,CAAA,CAAAC,CAAA,EACA,IAAAh0B,EAAAg0B,EAAAh0B,GAAA,CAAA+zB,EAAA/zB,GAAA,CACAD,EAAAi0B,EAAAj0B,GAAA,CAAAg0B,EAAAh0B,GAAA,CAOA,OAJAi0B,EAAAj0B,GAAA,CAAAi0B,EAAAh0B,GAAA,CACA+zB,EAAAh0B,GAAA,CAAAg0B,EAAA/zB,GAAA,EACA,EAAAA,EAAAD,EAAA,EAAAA,EAAAC,EAAA,EAEA,CAAaA,IAAAA,EAAAD,IAAAA,CAAA,CACb,CAuDA,SAAAk0B,GAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,EACA,OACAp0B,IAAAq0B,GAAAH,EAAAC,GACAp0B,IAAAs0B,GAAAH,EAAAE,EACA,CACA,CACA,SAAAC,GAAAH,CAAA,CAAAI,CAAA,EACA,uBAAAJ,EACAA,EACAA,CAAA,CAAAI,EAAA,GACA,CC9HA,IAAAC,GAAA,MACAlB,UAAA,EACA5xB,MAAA,EACAwO,OAAA,EACAmjB,YAAA,CACA,GACAoB,GAAA,MACA/wB,EAAA8wB,KACA1wB,EAAA0wB,IACA,GACAE,GAAA,MAA4Bz0B,IAAA,EAAAD,IAAA,IAC5B20B,GAAA,MACAjxB,EAAAgxB,KACA5wB,EAAA4wB,IACA,GCdA,SAAAE,GAAAj2B,CAAA,EACA,OAAAA,EAAA,KAAAA,EAAA,MCIA,SAAAk2B,GAAA,CAAmC5wB,IAAAA,CAAA,CAAAC,KAAAA,CAAA,CAAAE,MAAAA,CAAA,CAAAD,OAAAA,CAAA,CAA2B,EAC9D,OACAT,EAAA,CAAazD,IAAAiE,EAAAlE,IAAAoE,CAAA,EACbN,EAAA,CAAa7D,IAAAgE,EAAAjE,IAAAmE,CAAA,CACb,CACA,CCVA,SAAA2wB,GAAApzB,CAAA,EACA,OAAAA,KAAAnH,IAAAmH,GAAAA,IAAAA,CACA,CACA,SAAAqzB,GAAA,CAAoBrzB,MAAAA,CAAA,CAAAoL,OAAAA,CAAA,CAAAC,OAAAA,CAAA,CAAuB,EAC3C,OAAA+nB,GAAApzB,IACA,CAAAozB,GAAAhoB,IACA,CAAAgoB,GAAA/nB,EACA,CACA,SAAAioB,GAAAr7B,CAAA,EACA,OAAAo7B,GAAAp7B,IACAs7B,GAAAt7B,IACAA,EAAA2T,CAAA,EACA3T,EAAA+S,MAAA,EACA/S,EAAAgT,OAAA,EACAhT,EAAAiT,OAAA,EACAjT,EAAAuT,KAAA,EACAvT,EAAAwT,KAAA,CAEA,SAAA8nB,GAAAt7B,CAAA,MAGAE,EAAAA,EAFA,MAAAq7B,CAEAr7B,EAFAF,EAAA+J,CAAA,GAGA7J,OAAAA,GAAAA,CADAA,EAFAF,EAAAmK,CAAA,GAGAjK,OAAAA,CAFA,CCNA,SAAAs7B,GAAAtF,CAAA,CAAAyD,CAAA,CAAA5xB,CAAA,CAAA2xB,CAAA,CAAA+B,CAAA,EAIA,OAHA76B,KAAAA,IAAA66B,GACAvF,CAAAA,EAPAwD,EADA3xB,EADAmuB,CAAAA,EASAwD,CATA,CASA,EAEAA,EAVA3xB,EADAmuB,CAAAA,EAWAwD,CAXA,EAWAC,CACA,CAIA,SAAA+B,GAAAlC,CAAA,CAAAG,EAAA,EAAA5xB,EAAA,EAAA2xB,CAAA,CAAA+B,CAAA,EACAjC,EAAAlzB,GAAA,CAAAk1B,GAAAhC,EAAAlzB,GAAA,CAAAqzB,EAAA5xB,EAAA2xB,EAAA+B,GACAjC,EAAAnzB,GAAA,CAAAm1B,GAAAhC,EAAAnzB,GAAA,CAAAszB,EAAA5xB,EAAA2xB,EAAA+B,EACA,CAIA,SAAAE,GAAAC,CAAA,EAA8B7xB,EAAAA,CAAA,CAAAI,EAAAA,CAAA,CAAM,EACpCuxB,GAAAE,EAAA7xB,CAAA,CAAAA,EAAA4vB,SAAA,CAAA5vB,EAAAhC,KAAA,CAAAgC,EAAA2vB,WAAA,EACAgC,GAAAE,EAAAzxB,CAAA,CAAAA,EAAAwvB,SAAA,CAAAxvB,EAAApC,KAAA,CAAAoC,EAAAuvB,WAAA,CACA,CA+DA,SAAAmC,GAAArC,CAAA,CAAA/lB,CAAA,EACA+lB,EAAAlzB,GAAA,CAAAkzB,EAAAlzB,GAAA,CAAAmN,EACA+lB,EAAAnzB,GAAA,CAAAmzB,EAAAnzB,GAAA,CAAAoN,CACA,CAMA,SAAAqoB,GAAAtC,CAAA,CAAAuC,CAAA,CAAAC,CAAA,CAAAP,CAAA,CAAAQ,EAAA,IACA,IAAAvC,EAAwB/Y,GAAS6Y,EAAAlzB,GAAA,CAAAkzB,EAAAnzB,GAAA,CAAA41B,GAEjCP,GAAAlC,EAAAuC,EAAAC,EAAAtC,EAAA+B,EACA,CAIA,SAAAS,GAAAN,CAAA,CAAA/zB,CAAA,EACAi0B,GAAAF,EAAA7xB,CAAA,CAAAlC,EAAAkC,CAAA,CAAAlC,EAAAsL,MAAA,CAAAtL,EAAAE,KAAA,CAAAF,EAAAkM,OAAA,EACA+nB,GAAAF,EAAAzxB,CAAA,CAAAtC,EAAAsC,CAAA,CAAAtC,EAAAuL,MAAA,CAAAvL,EAAAE,KAAA,CAAAF,EAAAmM,OAAA,CACA,CCjHA,SAAAgD,GAAAmlB,CAAA,CAAAvE,CAAA,EACA,OAAWsD,GAAwBkB,SHenClG,CAAA,CAAA0B,CAAA,EACA,IAAAA,EACA,OAAA1B,EACA,IAAAmG,EAAAzE,EAAA,CAAqC7tB,EAAAmsB,EAAA3rB,IAAA,CAAAJ,EAAA+rB,EAAA5rB,GAAA,GACrCgyB,EAAA1E,EAAA,CAAyC7tB,EAAAmsB,EAAAzrB,KAAA,CAAAN,EAAA+rB,EAAA1rB,MAAA,GACzC,OACAF,IAAA+xB,EAAAlyB,CAAA,CACAI,KAAA8xB,EAAAtyB,CAAA,CACAS,OAAA8xB,EAAAnyB,CAAA,CACAM,MAAA6xB,EAAAvyB,CAAA,CAEA,EG1BqDoyB,EAAAI,qBAAA,GAAA3E,GACrD,CCJA,IAAA4E,GAAA,EAA4B97B,QAAAA,CAAA,CAAS,GACrCA,EAAAA,EAAA+7B,aAAA,CAAAC,WAAA,MCkBAC,GAAA,IAAAC,OAKA,OAAAC,GACAhwB,YAAA/M,CAAA,EAIA,KAAAg9B,cAAA,MACA,KAAAC,UAAA,IACA,KAAAC,gBAAA,MACA,KAAAtD,WAAA,EAA6B3vB,EAAA,EAAAI,EAAA,GAI7B,KAAA8yB,WAAA,IACA,KAAAC,qBAAA,IAIA,KAAAC,OAAA,CAAuBnC,KACvB,KAAAl7B,aAAA,CAAAA,CACA,CACAZ,MAAAk+B,CAAA,EAAyBC,aAAAA,EAAA,IAAuB,EAAI,EAIpD,IAAgB5M,gBAAAA,CAAA,EAAkB,KAAA3wB,aAAA,CAClC,GAAA2wB,GAAAA,CAAA,IAAAA,EAAA4E,SAAA,CACA,OAgGA,IAAgBuB,iBAAAA,CAAA,EAAmB,KAAA71B,QAAA,EACnC,MAAAu8B,UAAA,KAA8B7G,GAAU2G,EAAA,CACxCjF,eAjGA,IACA,IAAoBvB,iBAAAA,CAAA,EAAmB,KAAA71B,QAAA,EAGvC61B,CAAAA,EAAA,KAAA2G,cAAA,QAAAC,aAAA,GACAH,GACA,KAAAA,YAAA,CAAkCrH,GAAgBJ,EAAA,QAAAM,KAAA,CAElD,EA0FAuB,QAzFA,CAAA7B,EAAAqB,KACA,IAAA7qB,EAEA,IAAoB4sB,KAAAA,CAAA,CAAAyE,gBAAAA,CAAA,CAAAC,YAAAA,CAAA,EAAqC,KAAA38B,QAAA,GACzD,GAAAi4B,GAAA,CAAAyE,IACA,KAAAX,cAAA,EACA,KAAAA,cAAA,GACA,KAAAA,cAAA,CAAsC/D,GAAaC,GAEnD,MAAA8D,cAAA,EACA,MAEA,MAAAC,UAAA,IACA,KAAAC,gBAAA,MACA,KAAAW,kBAAA,GACA,KAAA79B,aAAA,CAAA89B,UAAA,GACA,KAAA99B,aAAA,CAAA89B,UAAA,CAAAC,kBAAA,IACA,KAAA/9B,aAAA,CAAA89B,UAAA,CAAA77B,MAAA,CAAAnB,KAAAA,GAKYq6B,GAAQ,IACpB,IAAAv6B,EAAA,KAAAo9B,kBAAA,CAAAtE,GAAAp5B,GAAA,MAIA,GAAoBuI,GAAO7B,IAAA,CAAApG,GAAA,CAC3B,IAA4Bk9B,WAAAA,CAAA,EAAa,KAAA99B,aAAA,CACzC,GAAA89B,GAAAA,EAAA3D,MAAA,EACA,IAAA8D,EAAAH,EAAA3D,MAAA,CAAA+D,SAAA,CAAAxE,EAAA,CACA,GAAAuE,EAAA,CACA,IAAAr+B,EAA2C65B,GAAUwE,GACrDr9B,EAAAhB,WAAAgB,GAAA,IAAAhB,CACA,CACA,CACA,CACA,KAAAg6B,WAAA,CAAAF,EAAA,CAAA94B,CACA,GAEAg9B,GACgBl3B,EAAKN,UAAA,KAAAw3B,EAAA9H,EAAAqB,IAErB,OAAA7qB,CAAAA,EAAA,KAAA6xB,gBAAA,GAAA7xB,KAAA,IAAAA,GAAAA,EAAA6B,IAAA,OACA,KAAAgwB,gBAAA,CAAoCjP,GAAoB,KAAAlvB,aAAA,cACxD,IAAoB4vB,eAAAA,CAAA,EAAiB,KAAA5vB,aAAA,CACrC4vB,GAAAA,EAAA8E,SAAA,gBACA,EA2CAkD,OA1CA,CAAA9B,EAAAqB,KAEA,IAAoBwG,gBAAAA,CAAA,CAAAS,kBAAAA,CAAA,CAAAC,gBAAAA,CAAA,CAAAC,OAAAA,CAAA,EAA+D,KAAAr9B,QAAA,GAEnF,IAAA08B,GAAA,MAAAX,cAAA,CACA,OACA,IAAoBjZ,OAAAA,CAAA,EAASoT,EAE7B,GAAAiH,GAAA,YAAAlB,gBAAA,EACA,KAAAA,gBAAA,CAAAqB,SAwWAxa,CAAA,CAAAya,EAAA,IACA,IAAA9V,EAAA,KAOA,OANAxmB,KAAAka,GAAA,CAAA2H,EAAA1Z,CAAA,EAAAm0B,EACA9V,EAAA,IAEAxmB,KAAAka,GAAA,CAAA2H,EAAA9Z,CAAA,EAAAu0B,GACA9V,CAAAA,EAAA,KAEAA,CACA,EAjXA3E,GAEA,YAAAmZ,gBAAA,EACAmB,GAAAA,EAAA,KAAAnB,gBAAA,EAEA,MACA,CAEA,KAAAuB,UAAA,KAAAtH,EAAAf,KAAA,CAAArS,GACA,KAAA0a,UAAA,KAAAtH,EAAAf,KAAA,CAAArS,GAOA,KAAA/jB,aAAA,CAAAmG,MAAA,GAKAm4B,GAAAA,EAAAxI,EAAAqB,EACA,EAYAc,aAXA,CAAAnC,EAAAqB,IAAA,KAAA1S,IAAA,CAAAqR,EAAAqB,GAYAe,gBAXA,IAAsCiD,GAAQ,IAC9C,IAAA7uB,EACA,sBAAAoyB,iBAAA,CAAAhF,IACA,QAAAptB,CAAAA,EAAA,KAAA0xB,kBAAA,CAAAtE,GAAAtR,SAAA,GAAA9b,KAAA,IAAAA,EAAA,OAAAA,EAAA2Z,IAAA,GACA,EAQA,EAAS,CACTrnB,mBAAA,KAAAoB,aAAA,CAAA2+B,qBAAA,GACA7H,iBAAAA,EACAD,cAA2B6F,GAAgB,KAAA18B,aAAA,CAC3C,EACA,CACAykB,KAAAqR,CAAA,CAAAqB,CAAA,EACA,IAAA7qB,CACA,QAAAA,CAAAA,EAAA,KAAA6xB,gBAAA,GAAA7xB,KAAA,IAAAA,GAAAA,EAAA6B,IAAA,OACA,IAAA8uB,EAAA,KAAAA,UAAA,CAEA,GADA,KAAAv3B,MAAA,GACA,CAAAu3B,EACA,OACA,IAAgBp8B,SAAAA,CAAA,EAAWs2B,EAC3B,KAAArJ,cAAA,CAAAjtB,GACA,IAAgB+9B,UAAAA,CAAA,EAAY,KAAA39B,QAAA,GAC5B29B,GACYl4B,EAAKN,UAAA,KAAAw4B,EAAA9I,EAAAqB,GAEjB,CACAzxB,QAAA,CACA,KAAAu3B,UAAA,IACA,IAAgBa,WAAAA,CAAA,CAAAlO,eAAAA,CAAA,EAA6B,KAAA5vB,aAAA,CAC7C89B,GACAA,CAAAA,EAAAC,kBAAA,KAEA,KAAAP,UAAA,OAAAA,UAAA,CAAAxF,GAAA,GACA,KAAAwF,UAAA,CAAA18B,KAAAA,EACA,IAAgB68B,gBAAAA,CAAA,EAAkB,KAAA18B,QAAA,EAClC,EAAA08B,GAAA,KAAAX,cAAA,GACA,KAAAA,cAAA,GACA,KAAAA,cAAA,OAEApN,GAAAA,EAAA8E,SAAA,gBACA,CACA+J,WAAA/E,CAAA,CAAAmF,CAAA,CAAA9a,CAAA,EACA,IAAgBmV,KAAAA,CAAA,EAAO,KAAAj4B,QAAA,GAEvB,IAAA8iB,GAAA,CAAA+a,GAAApF,EAAAR,EAAA,KAAAgE,gBAAA,EACA,OACA,IAAA6B,EAAA,KAAAf,kBAAA,CAAAtE,GACAj6B,EAAA,KAAAm6B,WAAA,CAAAF,EAAA,CAAA3V,CAAA,CAAA2V,EAAA,CAEA,KAAAyD,WAAA,OAAAA,WAAA,CAAAzD,EAAA,EACAj6B,CAAAA,EAAmBu/B,SR5LnB5I,CAAA,EAAmC5vB,IAAAA,CAAA,CAAAD,IAAAA,CAAA,CAAU,CAAA82B,CAAA,EAa7C,OAZA72B,KAAA1F,IAAA0F,GAAA4vB,EAAA5vB,EAEA4vB,EAAAiH,EACcxc,GAASra,EAAA4vB,EAAAiH,EAAA72B,GAAA,EACvBtE,KAAAqE,GAAA,CAAA6vB,EAAA5vB,GAEA1F,KAAAA,IAAAyF,GAAA6vB,EAAA7vB,GAEA6vB,CAAAA,EAAAiH,EACcxc,GAASta,EAAA6vB,EAAAiH,EAAA92B,GAAA,EACvBrE,KAAAsE,GAAA,CAAA4vB,EAAA7vB,EAAA,EAEA6vB,CACA,EQ8KmC32B,EAAA,KAAA09B,WAAA,CAAAzD,EAAA,MAAA2D,OAAA,CAAA3D,EAAA,GAEnCqF,EAAA5yB,GAAA,CAAA1M,EACA,CACAo+B,oBAAA,CACA,IAAAvxB,EACA,IAAgB2yB,gBAAAA,CAAA,CAAAvE,YAAAA,CAAA,EAA+B,KAAAz5B,QAAA,GAC/Ck5B,EAAA,KAAAn6B,aAAA,CAAA89B,UAAA,EACA,MAAA99B,aAAA,CAAA89B,UAAA,CAAA3D,MAAA,CACA,KAAAn6B,aAAA,CAAA89B,UAAA,CAAAoB,OAAA,KACA,OAAA5yB,CAAAA,EAAA,KAAAtM,aAAA,CAAA89B,UAAA,GAAAxxB,KAAA,IAAAA,EAAA,OAAAA,EAAA6tB,MAAA,CACAgF,EAAA,KAAAhC,WAAA,CACA8B,GAA+B1F,GAAW0F,GAC1C,KAAA9B,WAAA,EACA,MAAAA,WAAA,MAAAiC,qBAAA,IAIAH,GAAA9E,EACA,KAAAgD,WAAA,CAAmCkC,SR/KnCnB,CAAA,EAA8C1zB,IAAAA,CAAA,CAAAC,KAAAA,CAAA,CAAAC,OAAAA,CAAA,CAAAC,MAAAA,CAAA,CAA0B,EACxE,OACAV,EAAAowB,GAAA6D,EAAAj0B,CAAA,CAAAQ,EAAAE,GACAN,EAAAgwB,GAAA6D,EAAA7zB,CAAA,CAAAG,EAAAE,EACA,CACA,EQ0K0DyvB,EAAA+D,SAAA,CAAAe,GAG1D,KAAA9B,WAAA,IAGA,KAAAE,OAAA,CAAuBiC,SRvHvB5E,EAJA,GAIA,EAOA,MANAA,CAAA,IAAAA,EACAA,EAAA,EAEA,KAAAA,GACAA,CAAAA,EATA,GASA,EAEA,CACAzwB,EAAAwwB,GAAAC,EAAA,gBACArwB,EAAAowB,GAAAC,EAAA,eACA,CACA,EQ4GyCA,GAKzCyE,IAAA,KAAAhC,WAAA,EACAhD,GACA,KAAAgD,WAAA,EACA,MAAAC,qBAAA,EACYjC,GAAQ,IACpB,UAAAgC,WAAA,EACA,KAAAa,kBAAA,CAAAtE,IACA,MAAAyD,WAAA,CAAAzD,EAAA,CAA6C6F,SRjJ7CpF,CAAA,CAAAgD,CAAA,EACA,IAAAqC,EAAA,GAOA,OANA1+B,KAAAA,IAAAq8B,EAAA32B,GAAA,EACAg5B,CAAAA,EAAAh5B,GAAA,CAAA22B,EAAA32B,GAAA,CAAA2zB,EAAA3zB,GAAA,EAEA1F,KAAAA,IAAAq8B,EAAA52B,GAAA,EACAi5B,CAAAA,EAAAj5B,GAAA,CAAA42B,EAAA52B,GAAA,CAAA4zB,EAAA3zB,GAAA,EAEAg5B,CACA,EQwIkErF,EAAA+D,SAAA,CAAAxE,EAAA,MAAAyD,WAAA,CAAAzD,EAAA,EAElE,EAEA,CACA0F,uBAAA,KR/KAlB,EQgLA,IAAgBe,gBAAA9B,CAAA,CAAAsC,yBAAAA,CAAA,EAAyD,KAAAx+B,QAAA,GACzE,IAAAk8B,GAAA,CAA6B5D,GAAW4D,GACxC,SACA,IAAAuC,EAAAvC,EAAAv8B,OAAA,CACQ,GAAAkV,EAAAC,CAAA,EAAS2pB,OAAAA,EAAA,0GACjB,IAAgB5B,WAAAA,CAAA,EAAa,KAAA99B,aAAA,CAE7B,IAAA89B,GAAA,CAAAA,EAAA3D,MAAA,CACA,SACA,IAAAwF,EAA+BC,SFpP/Bh0B,CAAA,CAAAi0B,CAAA,CAAAjhC,CAAA,EACA,IAAAkhC,EAAA5oB,GAAAtL,EAAAhN,GACA,CAAYmhC,OAAAA,CAAA,EAASF,EAKrB,OAJAE,IACQhE,GAAa+D,EAAA71B,CAAA,CAAA81B,EAAAhc,MAAA,CAAA9Z,CAAA,EACb8xB,GAAa+D,EAAAz1B,CAAA,CAAA01B,EAAAhc,MAAA,CAAA1Z,CAAA,GAErBy1B,CACA,EE4O6CJ,EAAA5B,EAAAkC,IAAA,MAAAhgC,aAAA,CAAA2+B,qBAAA,IAC7CsB,ERzLA,CACAh2B,EAAAqwB,GAAA4D,CAFAA,EQ0LyDJ,EAAA3D,MAAA,CAAA+D,SAAA,ERxLzDj0B,CAAA,CAAA01B,EAAA11B,CAAA,EACAI,EAAAiwB,GAAA4D,EAAA7zB,CAAA,CAAAs1B,EAAAt1B,CAAA,CACA,EQ2LA,GAAAo1B,EAAA,CACA,IAAAS,EAAAT,EAA6DU,SLtP7D,CAAmCl2B,EAAAA,CAAA,CAAAI,EAAAA,CAAA,CAAM,EACzC,OAAaG,IAAAH,EAAA7D,GAAA,CAAAmE,MAAAV,EAAA1D,GAAA,CAAAmE,OAAAL,EAAA9D,GAAA,CAAAkE,KAAAR,EAAAzD,GAAA,CACb,EKoPoFy5B,GACpF,MAAA7C,qBAAA,GAAA8C,EACAA,GACAD,CAAAA,EAAsC7E,GAAuB8E,EAAA,CAE7D,CACA,OAAAD,CACA,CACAnS,eAAAjtB,CAAA,EACA,IAAgBq4B,KAAAA,CAAA,CAAAkH,aAAAA,CAAA,CAAA1F,YAAAA,CAAA,CAAA2F,eAAAA,CAAA,CAAAvJ,iBAAAA,CAAA,CAAAwJ,oBAAAA,CAAA,EAA0F,KAAAr/B,QAAA,GAC1Gk8B,EAAA,KAAAA,WAAA,KAiCA,OAAAtjB,QAAA+P,GAAA,CAhCmCuR,GAAQ,IAC3C,IAAA2D,GAAApF,EAAAR,EAAA,KAAAgE,gBAAA,EACA,OAEA,IAAAr6B,EAAA,GAAAs6B,CAAA,CAAAzD,EAAA,KACA5C,GACAj0B,CAAAA,EAAA,CAA+B2D,IAAA,EAAAD,IAAA,IAS/B,IAAAyW,EAAA,CACApb,KAAA,UACAf,SAAAu/B,EAAAv/B,CAAA,CAAA64B,EAAA,GACAtc,gBALAsd,EAAA,QAMAvd,cALAud,EAAA,OAMAxd,aAAA,IACAtC,UAAA,EACA7Y,UAAA,GACA,GAAAs+B,CAAA,CACA,GAAAx9B,CAAA,EAKA,YAAA09B,uBAAA,CAAA7G,EAAA1c,EACA,IAEAvD,IAAA,CAAA6mB,EACA,CACAC,wBAAA7G,CAAA,CAAA72B,CAAA,EACA,IAAAk8B,EAAA,KAAAf,kBAAA,CAAAtE,GACA,OAAAqF,EAAA3/B,KAAA,CAA+BsrB,GAAkBgP,EAAAqF,EAAA,EAAAl8B,EAAA,KAAA7C,aAAA,IAA4DkvB,GAAoB,KAAAlvB,aAAA,CAAA05B,IACjI,CACAgE,eAAA,CACQvC,GAAQ,QAAA6C,kBAAA,CAAAtE,GAAAjV,IAAA,GAChB,CACAgZ,gBAAA,CACQtC,GAAQ,IAAa,IAAA7uB,EAAQ,cAAAA,CAAAA,EAAA,KAAA0xB,kBAAA,CAAAtE,GAAAtR,SAAA,GAAA9b,KAAA,IAAAA,EAAA,OAAAA,EAAA4Z,KAAA,IACrC,CACAwY,kBAAAhF,CAAA,EACA,IAAAptB,EACA,cAAAA,CAAAA,EAAA,KAAA0xB,kBAAA,CAAAtE,GAAAtR,SAAA,GAAA9b,KAAA,IAAAA,EAAA,OAAAA,EAAArM,KAAA,CAQA+9B,mBAAAtE,CAAA,EACA,IAAA8G,EAAA,QAAgC9G,EAAA+G,WAAA,GAAmB,EACnDhgC,EAAA,KAAAT,aAAA,CAAAiB,QAAA,GAEA,OAAAy/B,CADA,CAAAF,EAAA,EAGA,KAAAxgC,aAAA,CAAAiM,QAAA,CAAAytB,EAAA,CAAAj5B,EAAAg0B,OAAA,CACAh0B,EAAAg0B,OAAA,CAAAiF,EAAA,CACA54B,KAAAA,CAAA,KACA,CACAy8B,aAAAnH,CAAA,EACQ+E,GAAQ,IAChB,IAAoBjC,KAAAA,CAAA,EAAO,KAAAj4B,QAAA,GAE3B,IAAA69B,GAAApF,EAAAR,EAAA,KAAAgE,gBAAA,EACA,OACA,IAAoBY,WAAAA,CAAA,EAAa,KAAA99B,aAAA,CACjC++B,EAAA,KAAAf,kBAAA,CAAAtE,GACA,GAAAoE,GAAAA,EAAA3D,MAAA,EACA,IAAwB3zB,IAAAA,CAAA,CAAAD,IAAAA,CAAA,EAAWu3B,EAAA3D,MAAA,CAAA+D,SAAA,CAAAxE,EAAA,CACnCqF,EAAA5yB,GAAA,CAAAiqB,CAAA,CAAAsD,EAAA,CAA4C7Y,GAASra,EAAAD,EAAA,IACrD,CACA,EACA,CAMAo6B,gCAAA,CACA,SAAA3gC,aAAA,CAAAY,OAAA,CACA,OACA,IAAgBs4B,KAAAA,CAAA,CAAA+F,gBAAAA,CAAA,EAAwB,KAAAh+B,QAAA,GACxC,CAAgB68B,WAAAA,CAAA,EAAa,KAAA99B,aAAA,CAC7B,IAAau5B,GAAW0F,IAAA,CAAAnB,GAAA,MAAAX,WAAA,CACxB,OAKA,KAAAO,aAAA,GAKA,IAAAkD,EAAA,CAA8B32B,EAAA,EAAAI,EAAA,GACtB8wB,GAAQ,IAChB,IAAA4D,EAAA,KAAAf,kBAAA,CAAAtE,GACA,GAAAqF,GAAA,UAAA5B,WAAA,EACA,IAAApf,EAAAghB,EAAAz+B,GAAA,EACAsgC,CAAAA,CAAA,CAAAlH,EAAA,CAAoCmH,SRzSpCnwB,CAAA,CAAAzO,CAAA,EACA,IAAAwU,EAAA,GACAqqB,EAAyBrH,GAAU/oB,GACnCqwB,EAAyBtH,GAAUx3B,GAOnC,OANA8+B,EAAAD,EACArqB,EAAiBiK,GAAQze,EAAAuE,GAAA,CAAAvE,EAAAsE,GAAA,CAAAu6B,EAAApwB,EAAAlK,GAAA,EAEzBs6B,EAAAC,GACAtqB,CAAAA,EAAiBiK,GAAQhQ,EAAAlK,GAAA,CAAAkK,EAAAnK,GAAA,CAAAw6B,EAAA9+B,EAAAuE,GAAA,GAEdmB,EAAK,IAAA8O,EAChB,EQ8R8C,CAAGjQ,IAAAuX,EAAAxX,IAAAwX,CAAA,EAA0B,KAAAof,WAAA,CAAAzD,EAAA,CAC3E,CACA,GAIA,IAAgBsH,kBAAAA,CAAA,EAAoB,KAAAhhC,aAAA,CAAAiB,QAAA,EACpC,MAAAjB,aAAA,CAAAY,OAAA,CAAAyuB,KAAA,CAAAtnB,SAAA,CAAAi5B,EACAA,EAAA,GAAkC,IAClC,OACAlD,EAAAkC,IAAA,EAAAlC,EAAAkC,IAAA,CAAAiB,YAAA,GACAnD,EAAAoD,YAAA,GACA,KAAArD,kBAAA,GAKQ1C,GAAQ,IAChB,IAAA2D,GAAApF,EAAAR,EAAA,MACA,OAIA,IAAA6F,EAAA,KAAAf,kBAAA,CAAAtE,GACA,CAAoBlzB,IAAAA,CAAA,CAAAD,IAAAA,CAAA,EAAW,KAAA42B,WAAA,CAAAzD,EAAA,CAC/BqF,EAAA5yB,GAAA,CAA0B0U,GAASra,EAAAD,EAAAq6B,CAAA,CAAAlH,EAAA,EACnC,EACA,CACAyH,cAAA,CACA,SAAAnhC,aAAA,CAAAY,OAAA,CACA,OACAi8B,GAAA1wB,GAAA,MAAAnM,aAAA,OAKA,IAAAohC,EAAoC1K,GAJpC,KAAA12B,aAAA,CAAAY,OAAA,CAImD,kBACnD,IAAoBs4B,KAAAA,CAAA,CAAAmI,aAAAA,EAAA,IAA4B,KAAApgC,QAAA,EAChDi4B,CAAAA,GAAAmI,GAAA,KAAAjiC,KAAA,CAAA02B,EACA,GACAwL,EAAA,KACA,IAAoBrC,gBAAAA,CAAA,EAAkB,KAAAh+B,QAAA,GACtBs4B,GAAW0F,IAAAA,EAAAr+B,OAAA,EAC3B,MAAAu8B,WAAA,MAAAiC,qBAAA,GAEA,EACA,CAAgBtB,WAAAA,CAAA,EAAa,KAAA99B,aAAA,CAC7BuhC,EAAAzD,EAAAtH,gBAAA,WAAA8K,GACAxD,GAAA,CAAAA,EAAA3D,MAAA,GACA2D,EAAAkC,IAAA,EAAAlC,EAAAkC,IAAA,CAAAiB,YAAA,GACAnD,EAAAoD,YAAA,IAEQx6B,EAAKX,IAAA,CAAAu7B,GAKb,IAAAE,EAAmClL,GAAW7pB,OAAA,kBAAAk0B,8BAAA,IAK9Cc,EAAA3D,EAAAtH,gBAAA,eAAsFryB,MAAAA,CAAA,CAAAu9B,iBAAAA,CAAA,CAAyB,IAC/G,KAAAzE,UAAA,EAAAyE,IACgBvG,GAAQ,IACxB,IAAAhuB,EAAA,KAAA6wB,kBAAA,CAAAtE,GACAvsB,IAEA,KAAAysB,WAAA,CAAAF,EAAA,EAAAv1B,CAAA,CAAAu1B,EAAA,CAAAG,SAAA,CACA1sB,EAAAhB,GAAA,CAAAgB,EAAA7M,GAAA,GAAA6D,CAAA,CAAAu1B,EAAA,CAAAG,SAAA,EACA,GACA,KAAA75B,aAAA,CAAAmG,MAAA,GAEA,GACA,WACAq7B,IACAJ,IACAG,IACAE,GAAAA,GACA,CACA,CACAxgC,UAAA,CACA,IAAAR,EAAA,KAAAT,aAAA,CAAAiB,QAAA,GACA,CAAgBi4B,KAAAA,EAAA,GAAAkF,kBAAAA,EAAA,GAAAT,gBAAAA,EAAA,GAAAsB,gBAAAA,EAAA,GAAAvE,YAAAA,ERnWhB,GQmWuI,CAAA0F,aAAAA,EAAA,IAAyB3/B,EAChK,OACA,GAAAA,CAAA,CACAy4B,KAAAA,EACAkF,kBAAAA,EACAT,gBAAAA,EACAsB,gBAAAA,EACAvE,YAAAA,EACA0F,aAAAA,CACA,CACA,CACA,CACA,SAAAtB,GAAApW,CAAA,CAAAwQ,CAAA,CAAAgE,CAAA,EACA,OAAAhE,CAAA,IAAAA,GAAAA,IAAAxQ,CAAA,GACAwU,CAAAA,OAAAA,GAAAA,IAAAxU,CAAA,CACA,CCldA,MAAAiZ,WAA0BtP,GAC1BtlB,YAAAulB,CAAA,EACA,MAAAA,GACA,KAAAsP,mBAAA,CAAmC/6B,EAAAC,CAAI,CACvC,KAAAwxB,eAAA,CAA+BzxB,EAAAC,CAAI,CACnC,KAAA2jB,QAAA,KAA4BsS,GAAyBzK,EACrD,CACA2C,OAAA,CAGA,IAAgB4M,aAAAA,CAAA,EAAe,KAAAvP,IAAA,CAAArxB,QAAA,GAC/B4gC,GACA,MAAAD,mBAAA,CAAAC,EAAA7M,SAAA,MAAAvK,QAAA,GAEA,KAAA6N,eAAA,MAAA7N,QAAA,CAAA0W,YAAA,IAA+Dt6B,EAAAC,CAAI,CAEnEsuB,SAAA,CACA,KAAAwM,mBAAA,GACA,KAAAtJ,eAAA,EACA,CACA,CCjBA,IAAAwJ,GAAA,IAAAhM,EAAAqB,KACArL,GACQplB,EAAKN,UAAA,KAAA0lB,EAAAgK,EAAAqB,GAEb,CACA,OAAA4K,WAAyB1P,GACzBtlB,aAAA,CACA,SAAA4hB,WACA,KAAAqT,yBAAA,CAAyCn7B,EAAAC,CAAI,CAE7Cm7B,cAAAC,CAAA,EACA,KAAAC,OAAA,KAA2BxL,GAAUuL,EAAA,KAAAE,iBAAA,IACrCxjC,mBAAA,KAAA0zB,IAAA,CAAAqM,qBAAA,GACA9H,cAA2B6F,GAAgB,KAAApK,IAAA,CAC3C,EACA,CACA8P,mBAAA,CACA,IAAgBC,kBAAAA,CAAA,CAAAC,WAAAA,CAAA,CAAAC,MAAAA,CAAA,CAAAC,SAAAA,CAAA,EAAiD,KAAAlQ,IAAA,CAAArxB,QAAA,GACjE,OACAo3B,eAAAyJ,GAAAO,GACA1K,QAAAmK,GAAAQ,GACA1K,OAAA2K,EACA3X,MAAA,CAAAkL,EAAAqB,KACA,YAAAgL,OAAA,CACAK,GACoB97B,EAAKN,UAAA,KAAAo8B,EAAA1M,EAAAqB,GAEzB,CACA,CACA,CACAlC,OAAA,CACA,KAAA+M,yBAAA,CAAyCtL,GAAe,KAAApE,IAAA,CAAA1xB,OAAA,uBAAAqhC,aAAA,CAAAnM,GACxD,CACA7vB,QAAA,CACA,KAAAk8B,OAAA,OAAAA,OAAA,CAAA5J,cAAA,MAAA6J,iBAAA,GACA,CACAhN,SAAA,CACA,KAAA4M,yBAAA,GACA,KAAAG,OAAA,OAAAA,OAAA,CAAAnK,GAAA,EACA,CACA,qDEzCA,IAAMyK,GAA2B/jC,CAAAA,EAAAA,GAAAA,aAAAA,EAAc,CAAC,GCDhDgkC,GAAA,CAKAC,uBAAA,GAKAC,eAAA,EACA,ECdA,SAAAC,GAAAC,CAAA,CAAApJ,CAAA,SACA,EAAAnzB,GAAA,GAAAmzB,EAAAlzB,GAAA,CACA,EACA,EAAAkzB,CAAAA,EAAAnzB,GAAA,CAAAmzB,EAAAlzB,GAAA,KACA,CAQA,IAAAu8B,GAAA,CACAC,QAAA,CAAAjlB,EAAAuU,KACA,IAAAA,EAAArwB,MAAA,CACA,OAAA8b,EAKA,oBAAAA,EAAA,CACA,IAAgBjV,GAAE9B,IAAA,CAAA+W,GAIlB,OAAAA,EAHAA,EAAAjW,WAAAiW,EAKA,CAKA,IAAA9T,EAAA44B,GAAA9kB,EAAAuU,EAAArwB,MAAA,CAAAgI,CAAA,EACAI,EAAAw4B,GAAA9kB,EAAAuU,EAAArwB,MAAA,CAAAoI,CAAA,EACA,SAAkBJ,EAAE,IAAII,EAAE,GAE1B,EEtCA44B,GAAA,GCEA,CAAQ79B,SAAA89B,EAAA,CAAAx9B,OAAAy9B,EAAA,EAAiDr/B,EAAmB+T,eAAA,GCW5E,OAAMurB,WAAiCC,GAAAA,SAASA,CAM5CC,mBAAoB,CAChB,GAAM,CAAEtjC,cAAAA,CAAa,CAAEujC,YAAAA,CAAW,CAAEC,kBAAAA,CAAiB,CAAEC,SAAAA,CAAQ,CAAE,CAAG,IAAI,CAAChjC,KAAK,CACxE,CAAEq9B,WAAAA,CAAU,CAAE,CAAG99B,EFnB/BgO,OAAA01B,MAAA,CAAAT,GEoB0BU,IACd7F,IACIyF,EAAYK,KAAK,EACjBL,EAAYK,KAAK,CAACn+B,GAAG,CAACq4B,GACtB0F,GAAqBA,EAAkB5N,QAAQ,EAAI6N,GACnDD,EAAkB5N,QAAQ,CAACkI,GAE/BA,EAAWkC,IAAI,CAAC6D,SAAS,GACzB/F,EAAWtH,gBAAgB,CAAC,oBAAqB,KAC7C,IAAI,CAACsN,YAAY,EACrB,GACAhG,EAAWiG,UAAU,CAAC,CAClB,GAAGjG,EAAW3lB,OAAO,CACrBqd,eAAgB,IAAM,IAAI,CAACsO,YAAY,EAC3C,IAEJpB,GAAsBE,cAAc,CAAG,EAC3C,CACAoB,wBAAwB7O,CAAS,CAAE,CAC/B,GAAM,CAAE8O,iBAAAA,CAAgB,CAAEjkC,cAAAA,CAAa,CAAEk5B,KAAAA,CAAI,CAAE3D,UAAAA,CAAS,CAAE,CAAG,IAAI,CAAC90B,KAAK,CACjEq9B,EAAa99B,EAAc89B,UAAU,QACtCA,IASLA,EAAWvI,SAAS,CAAGA,EACnB2D,GACA/D,EAAU8O,gBAAgB,GAAKA,GAC/BA,KAAqBnjC,IAArBmjC,EACAnG,EAAWoG,UAAU,GAGrB,IAAI,CAACJ,YAAY,GAEjB3O,EAAUI,SAAS,GAAKA,IACpBA,EACAuI,EAAWqG,OAAO,GAEZrG,EAAWsG,QAAQ,IAMzBC,EAAMj+B,UAAU,CAAC,KACb,IAAMk+B,EAAQxG,EAAWyG,QAAQ,GAC5BD,GAAUA,EAAME,OAAO,CAAC5kC,MAAM,EAC/B,IAAI,CAACkkC,YAAY,EAEzB,KAhCG,IAoCf,CACAW,oBAAqB,CACjB,GAAM,CAAE3G,WAAAA,CAAU,CAAE,CAAG,IAAI,CAACr9B,KAAK,CAACT,aAAa,CAC3C89B,IACAA,EAAWkC,IAAI,CAAC6D,SAAS,GACzBX,GAAU98B,UAAU,CAAC,KACb,CAAC03B,EAAW4G,gBAAgB,EAAI5G,EAAW6G,MAAM,IACjD,IAAI,CAACb,YAAY,EAEzB,GAER,CACAc,sBAAuB,CACnB,GAAM,CAAE5kC,cAAAA,CAAa,CAAEujC,YAAAA,CAAW,CAAEC,kBAAmBqB,CAAc,CAAG,CAAG,IAAI,CAACpkC,KAAK,CAC/E,CAAEq9B,WAAAA,CAAU,CAAE,CAAG99B,EACnB89B,IACAA,EAAWgH,yBAAyB,GAChCvB,GAAeA,EAAYK,KAAK,EAChCL,EAAYK,KAAK,CAACmB,MAAM,CAACjH,GACzB+G,GAAkBA,EAAeG,UAAU,EAC3CH,EAAeG,UAAU,CAAClH,GAEtC,CACAgG,cAAe,CACX,GAAM,CAAEA,aAAAA,CAAY,CAAE,CAAG,IAAI,CAACrjC,KAAK,CACnCqjC,GAAgBA,GACpB,CACA39B,QAAS,CACL,OAAO,IACX,CACJ,CACA,SAAS8+B,GAAcxkC,CAAK,EACxB,GAAM,CAAC80B,EAAWuO,EAAa,CAAGoB,WPrFtC,IAAAlS,EAAoB,GAAAmS,GAAAC,UAAA,EAAWC,GAAAC,CAAe,EAC9C,GAAAtS,OAAAA,EACA,gBACA,IAAYuC,UAAAA,CAAA,CAAAC,eAAAA,CAAA,CAAAI,SAAAA,CAAA,EAAsC5C,EAGlDqC,EAAe,GAAA8P,GAAAI,KAAA,IACX,GAAAJ,GAAAK,SAAA,EAAS,IAAA5P,EAAAP,GAAA,IACb,IAAAyO,EAAyB,GAAAqB,GAAAM,WAAA,EAAW,IAAAjQ,GAAAA,EAAAH,GAAA,CAAAA,EAAAG,EAAA,EACpC,OAAAD,GAAAC,EAAA,IAAAsO,EAAA,SO6EUP,EAAc6B,CAAAA,EAAAA,GAAAA,UAAAA,EAAW3mC,GAAAA,CAAkBA,EACjD,MAAQinC,CAAAA,EAAAA,GAAAA,GAAAA,EAAItC,GAA0B,CAAE,GAAG3iC,CAAK,CAAE8iC,YAAaA,EAAaC,kBAAmB4B,CAAAA,EAAAA,GAAAA,UAAAA,EAAW3C,IAA2BlN,UAAWA,EAAWuO,aAAcA,CAAa,EAC1L,CACA,IAAMH,GAAyB,CAC3BzxB,aAAc,CACV,GAAG6wB,EAAmB,CACtB4C,QAAS,CACL,sBACA,uBACA,yBACA,0BACH,EAELvzB,oBAAqB2wB,GACrB1wB,qBAAsB0wB,GACtBxwB,uBAAwBwwB,GACxBzwB,wBAAyBywB,GACzB6C,UH/HJ,CACA5C,QAAA,CAAAjlB,EAAA,CAAwB8nB,UAAAA,CAAA,CAAAC,gBAAAA,CAAA,CAA4B,IAEpD,IAAAC,EAAuBj1B,GAAOjJ,KAAA,CAAAkW,GAE9B,GAAAgoB,EAAAnmC,MAAA,GACA,OAJAme,EAKA,IAAAsE,EAAyBvR,GAAOL,iBAAA,CAAAsN,GAChCgG,EAAA,iBAAAgiB,CAAA,QAEAC,EAAAF,EAAA77B,CAAA,CAAAhC,KAAA,CAAA49B,EAAA57B,CAAA,CACAg8B,EAAAH,EAAAz7B,CAAA,CAAApC,KAAA,CAAA49B,EAAAx7B,CAAA,CACA07B,CAAA,GAAAhiB,EAAA,EAAAiiB,EACAD,CAAA,GAAAhiB,EAAA,EAAAkiB,EAOA,IAAAC,EAA6BrlB,GAASmlB,EAAAC,EAAA,IAOtC,MALA,iBAAAF,CAAA,GAAAhiB,EAAA,EACAgiB,CAAAA,CAAA,GAAAhiB,EAAA,EAAAmiB,CAAA,EAEA,iBAAAH,CAAA,GAAAhiB,EAAA,EACAgiB,CAAAA,CAAA,GAAAhiB,EAAA,EAAAmiB,CAAA,EACA7jB,EAAA0jB,EACA,CACA,CGmGA,EC7HAI,GAAA,kDACAC,GAAAD,GAAAvmC,MAAA,CACAymC,GAAA,oBAAAjmC,EAAA0H,WAAA1H,GAAAA,EACAkmC,GAAA,oBAAAlmC,GAAqD0I,GAAE9B,IAAA,CAAA5G,GA0CvD,SAAAmmC,GAAArmC,CAAA,CAAAsmC,CAAA,EACA,OAAAtmC,KAAAY,IAAAZ,CAAA,CAAAsmC,EAAA,CACAtmC,CAAA,CAAAsmC,EAAA,CACAtmC,EAAAgS,YAAA,CAyBA,IAAAu0B,GAAAC,GAAA,KAAuDhnB,IACvDinB,GAAAD,GAAA,OAA2D7/B,EAAAC,CAAI,EAC/D,SAAA4/B,GAAAlgC,CAAA,CAAAD,CAAA,CAAA+Y,CAAA,EACA,UAEA,EAAA9Y,EACA,EACA3H,EAAA0H,EACA,EACA+Y,EAAsBoB,GAAQla,EAAAD,EAAA1H,GAE9B,CCrFA,SAAA+nC,GAAAlN,CAAA,CAAAmN,CAAA,EACAnN,EAAAlzB,GAAA,CAAAqgC,EAAArgC,GAAA,CACAkzB,EAAAnzB,GAAA,CAAAsgC,EAAAtgC,GAAA,CAOA,SAAAugC,GAAAhL,CAAA,CAAAiL,CAAA,EACAH,GAAA9K,EAAA7xB,CAAA,CAAA88B,EAAA98B,CAAA,EACA28B,GAAA9K,EAAAzxB,CAAA,CAAA08B,EAAA18B,CAAA,CACA,CAMA,SAAA28B,GAAA7iC,CAAA,CAAA8iC,CAAA,EACA9iC,EAAA01B,SAAA,CAAAoN,EAAApN,SAAA,CACA11B,EAAA8D,KAAA,CAAAg/B,EAAAh/B,KAAA,CACA9D,EAAAy1B,WAAA,CAAAqN,EAAArN,WAAA,CACAz1B,EAAAsS,MAAA,CAAAwwB,EAAAxwB,MAAA,CCpBA,SAAAywB,GAAA9Q,CAAA,CAAAyD,CAAA,CAAA5xB,CAAA,CAAA2xB,CAAA,CAAA+B,CAAA,EAMA,OALAvF,GAAAyD,EACAzD,EhBAAwD,EADA3xB,EgBCsBA,EhBFtBmuB,CAAAA,EgBEsBwD,ChBFtB,EgBGA94B,KAAAA,IAAA66B,GACAvF,CAAAA,EhBFAwD,EADA3xB,EgBG0B0zB,EhBJ1BvF,CAAAA,EgBI0BwD,ChBJ1B,CgBI0B,EAE1BxD,CACA,CAsBA,SAAA+Q,GAAAzN,CAAA,CAAA0N,CAAA,EAAA/mC,EAAAgnC,EAAAC,EAAA,CAAA7wB,CAAA,CAAA8wB,CAAA,GACAC,SAnBA9N,CAAA,CAAAG,EAAA,EAAA5xB,EAAA,EAAAwO,EAAA,GAAAklB,CAAA,CAAAkL,EAAAnN,CAAA,CAAA6N,EAAA7N,CAAA,EAMA,GALQ7wB,GAAO7B,IAAA,CAAA6yB,KACfA,EAAA/xB,WAAA+xB,GAEAA,EAAA4N,GAD0CF,EAAA/gC,GAAA,CAAA+gC,EAAAhhC,GAAA,CAAAszB,EAAA,KAC1C0N,EAAA/gC,GAAA,EAEA,iBAAAqzB,EACA,OACA,IAAAD,EAAsB/Y,GAASgmB,EAAArgC,GAAA,CAAAqgC,EAAAtgC,GAAA,CAAAkQ,GAC/BijB,IAAAmN,GACAjN,CAAAA,GAAAC,CAAA,EACAH,EAAAlzB,GAAA,CAAA0gC,GAAAxN,EAAAlzB,GAAA,CAAAqzB,EAAA5xB,EAAA2xB,EAAA+B,GACAjC,EAAAnzB,GAAA,CAAA2gC,GAAAxN,EAAAnzB,GAAA,CAAAszB,EAAA5xB,EAAA2xB,EAAA+B,EACA,EAMAjC,EAAA0N,CAAA,CAAA/mC,EAAA,CAAA+mC,CAAA,CAAAC,EAAA,CAAAD,CAAA,CAAAE,EAAA,CAAAF,EAAAn/B,KAAA,CAAAwO,EAAA8wB,EACA,CAIA,IAAAG,GAAA,yBACAC,GAAA,yBAKA,SAAAC,GAAA9L,CAAA,CAAAsL,CAAA,CAAAL,CAAA,CAAAc,CAAA,EACAV,GAAArL,EAAA7xB,CAAA,CAAAm9B,EAAAM,GAAAX,EAAAA,EAAA98B,CAAA,CAAAnJ,KAAAA,EAAA+mC,EAAAA,EAAA59B,CAAA,CAAAnJ,KAAAA,GACAqmC,GAAArL,EAAAzxB,CAAA,CAAA+8B,EAAAO,GAAAZ,EAAAA,EAAA18B,CAAA,CAAAvJ,KAAAA,EAAA+mC,EAAAA,EAAAx9B,CAAA,CAAAvJ,KAAAA,EACA,CCjDA,SAAAgnC,GAAA3jC,CAAA,EACA,OAAAA,IAAAA,EAAA01B,SAAA,EAAA11B,IAAAA,EAAA8D,KAAA,CAEA,SAAA8/B,GAAA5jC,CAAA,EACA,OAAA2jC,GAAA3jC,EAAA8F,CAAA,GAAA69B,GAAA3jC,EAAAkG,CAAA,CACA,CACA,SAAA29B,GAAAx5B,CAAA,CAAAC,CAAA,EACA,OAAAD,EAAAhI,GAAA,GAAAiI,EAAAjI,GAAA,EAAAgI,EAAAjI,GAAA,GAAAkI,EAAAlI,GAAA,CAKA,SAAA0hC,GAAAz5B,CAAA,CAAAC,CAAA,EACA,OAAAvM,KAAAkG,KAAA,CAAAoG,EAAAhI,GAAA,IAAAtE,KAAAkG,KAAA,CAAAqG,EAAAjI,GAAA,GACAtE,KAAAkG,KAAA,CAAAoG,EAAAjI,GAAA,IAAArE,KAAAkG,KAAA,CAAAqG,EAAAlI,GAAA,CACA,CACA,SAAA2hC,GAAA15B,CAAA,CAAAC,CAAA,EACA,OAAAw5B,GAAAz5B,EAAAvE,CAAA,CAAAwE,EAAAxE,CAAA,GAAAg+B,GAAAz5B,EAAAnE,CAAA,CAAAoE,EAAApE,CAAA,CACA,CACA,SAAA89B,GAAArM,CAAA,EACA,OAAWrC,GAAUqC,EAAA7xB,CAAA,EAAUwvB,GAAUqC,EAAAzxB,CAAA,CACzC,CACA,SAAA+9B,GAAA55B,CAAA,CAAAC,CAAA,EACA,OAAAD,EAAAqrB,SAAA,GAAAprB,EAAAorB,SAAA,EACArrB,EAAAvG,KAAA,GAAAwG,EAAAxG,KAAA,EACAuG,EAAAorB,WAAA,GAAAnrB,EAAAmrB,WAAA,CCzBA,MAAAyO,GACAt7B,aAAA,CACA,KAAAy3B,OAAA,IAEA/+B,IAAA6sB,CAAA,EACQ9G,GAAa,KAAAgZ,OAAA,CAAAlS,GACrBA,EAAAgW,cAAA,EACA,CACAvD,OAAAzS,CAAA,EAKA,GAJQ3G,GAAU,KAAA6Y,OAAA,CAAAlS,GAClBA,IAAA,KAAAiW,QAAA,EACA,MAAAA,QAAA,CAAAznC,KAAAA,CAAA,EAEAwxB,IAAA,KAAAkW,IAAA,EACA,IAAAD,EAAA,KAAA/D,OAAA,MAAAA,OAAA,CAAA5kC,MAAA,IACA2oC,GACA,KAAApE,OAAA,CAAAoE,EAEA,CACA,CACAnE,SAAA9R,CAAA,MAOAiW,EANA,IAAAE,EAAA,KAAAjE,OAAA,CAAAkE,SAAA,IAAApW,IAAAqW,GACA,GAAAF,IAAAA,EACA,SAKA,QAAA5oC,EAAA4oC,EAAkC5oC,GAAA,EAAQA,IAAA,CAC1C,IAAA8oC,EAAA,KAAAnE,OAAA,CAAA3kC,EAAA,CACA,GAAA8oC,CAAA,IAAAA,EAAApT,SAAA,EACAgT,EAAAI,EACA,KACA,CACA,OACA,EAAAJ,IACA,KAAApE,OAAA,CAAAoE,GACA,GAKA,CACApE,QAAA7R,CAAA,CAAAsW,CAAA,EACA,IAAAL,EAAA,KAAAC,IAAA,CACA,GAAAlW,IAAAiW,IAEA,KAAAA,QAAA,CAAAA,EACA,KAAAC,IAAA,CAAAlW,EACAA,EAAAuW,IAAA,GACAN,GAAA,CACAA,EAAAlM,QAAA,EAAAkM,EAAAD,cAAA,GACAhW,EAAAgW,cAAA,GACAhW,EAAAwW,UAAA,CAAAP,EACAK,GACAtW,CAAAA,EAAAwW,UAAA,CAAAC,eAAA,KAEAR,EAAAS,QAAA,GACA1W,EAAA0W,QAAA,CAAAT,EAAAS,QAAA,CACA1W,EAAA0W,QAAA,CAAAlZ,YAAA,CACAyY,EAAAU,eAAA,EAAAV,EAAAzY,YAAA,EAEAwC,EAAA0N,IAAA,EAAA1N,EAAA0N,IAAA,CAAAkJ,UAAA,EACA5W,CAAAA,EAAA6W,aAAA,KAEA,IAAoBC,UAAAA,CAAA,EAAY9W,EAAAna,OAAA,EAChC,IAAAixB,GACAb,EAAAc,IAAA,EAcA,CACA,CACAC,uBAAA,CACA,KAAA9E,OAAA,CAAArkC,OAAA,KACA,IAAoBgY,QAAAA,CAAA,CAAAoxB,aAAAA,CAAA,EAAwBjX,CAC5Cna,CAAAA,EAAAqd,cAAA,EAAArd,EAAAqd,cAAA,GACA+T,GACAA,EAAApxB,OAAA,CAAAqd,cAAA,EACA+T,EAAApxB,OAAA,CAAAqd,cAAA,EAEA,EACA,CACA8S,gBAAA,CACA,KAAA9D,OAAA,CAAArkC,OAAA,KACAmyB,EAAA+J,QAAA,EAAA/J,EAAAgW,cAAA,IACA,EACA,CAKAkB,oBAAA,CACA,KAAAhB,IAAA,OAAAA,IAAA,CAAAQ,QAAA,EACA,MAAAR,IAAA,CAAAQ,QAAA,CAAAloC,KAAAA,CAAA,CAEA,CACA,CE7GA,IAAA2oC,GAAA,CAAAj7B,EAAAC,IAAAD,EAAAqH,KAAA,CAAApH,EAAAoH,KAAA,OCGA6zB,GACA38B,aAAA,CACA,KAAA48B,QAAA,IACA,KAAAC,OAAA,GACA,CACAnkC,IAAA4rB,CAAA,EACQ7F,GAAa,KAAAme,QAAA,CAAAtY,GACrB,KAAAuY,OAAA,GACA,CACA7E,OAAA1T,CAAA,EACQ1F,GAAU,KAAAge,QAAA,CAAAtY,GAClB,KAAAuY,OAAA,GACA,CACAzpC,QAAA+E,CAAA,EACA,KAAA0kC,OAAA,OAAAD,QAAA,CAAAxY,IAAA,CAA2CsY,IAC3C,KAAAG,OAAA,IACA,KAAAD,QAAA,CAAAxpC,OAAA,CAAA+E,EACA,CACA,CCbA,SAAA2kC,GAAAzpC,CAAA,EACA,IAAA0pC,EAA2B7a,GAAa7uB,GAAAA,EAAAE,GAAA,GAAAF,EACxC,OAAWirB,GAAaye,GACxBA,EAAAxe,OAAA,GACAwe,CACA,CIeA,IAAAC,GAAA,CACAnoC,KAAA,kBACAooC,WAAA,EACAC,qBAAA,EACAC,uBAAA,CACA,EACAC,GAAA,oBAAA19B,QAAAA,KAAA3L,IAAA2L,OAAA29B,WAAA,CACAC,GAAA,iBACAC,GAAA,CAA2BC,WAAA,UAMvBC,GAAE,EACN,SAAAC,GAAApqC,CAAA,CAAAL,CAAA,CAAAE,CAAA,CAAAwqC,CAAA,EACA,IAAY5a,aAAAA,CAAA,EAAe9vB,CAE3B8vB,CAAAA,CAAA,CAAAzvB,EAAA,GACAH,CAAA,CAAAG,EAAA,CAAAyvB,CAAA,CAAAzvB,EAAA,CACAL,EAAA2qC,cAAA,CAAAtqC,EAAA,GACAqqC,GACAA,CAAAA,CAAA,CAAArqC,EAAA,IAGA,CAkBA,SAAAuqC,GAAA,CAAgCC,qBAAAA,CAAA,CAAAC,cAAAA,CAAA,CAAAC,cAAAA,CAAA,CAAAC,kBAAAA,CAAA,CAAAC,eAAAA,CAAA,CAAwF,EACxH,aACAl+B,YAAA+iB,EAAA,EAAqC,CAAAmK,EAAA6Q,MAAAA,EAAA,OAAAA,GAAA,EAIrC,KAAAzV,EAAA,CAAsBmV,KAItB,KAAAU,WAAA,GAOA,KAAAvB,QAAA,KAAAroC,IAKA,KAAA6W,OAAA,IAMA,KAAAgzB,eAAA,IACA,KAAApN,kBAAA,IAOA,KAAAoL,aAAA,IAKA,KAAAiC,iBAAA,IAKA,KAAAC,uBAAA,IAKA,KAAAC,gBAAA,IAIA,KAAAC,qBAAA,IACA,KAAAC,qBAAA,IAKA,KAAAtC,UAAA,IAIA,KAAAuC,KAAA,IAKA,KAAAC,UAAA,IAIA,KAAAC,oBAAA,IAOA,KAAAC,yBAAA,IASA,KAAA/F,SAAA,EAA+B57B,EAAA,EAAAI,EAAA,GAI/B,KAAAwhC,aAAA,KAAA//B,IACA,KAAAggC,eAAA,IAEA,KAAAC,eAAA,IACA,KAAAC,cAAA,UAAA/lC,MAAA,GACA,KAAAgmC,yBAAA,IACA,KAAAC,iBAAA,MACA,KAAAhD,UAAA,GACA,KAAAA,UAAA,IACA,KAAAiD,iBAAA,GAEA,EAMA,KAAAC,gBAAA,MACA,KAAAH,yBAAA,IAKA9B,IACAJ,CAAAA,GAAAC,UAAA,CACAD,GAAAE,oBAAA,CACAF,GAAAG,sBAAA,CACA,GAEA,KAAAmC,KAAA,CAAAlsC,OAAA,CAAAmsC,IACA,KAAAD,KAAA,CAAAlsC,OAAA,CAAAosC,IACA,KAAAF,KAAA,CAAAlsC,OAAA,CAAAqsC,IACA,KAAAH,KAAA,CAAAlsC,OAAA,CAAAssC,IACAtC,IACA19B,OAAA29B,WAAA,CAAAsC,MAAA,CAAA3C,GAEA,EAIA,KAAA4C,wBAAA,GACA,KAAAC,YAAA,IACA,KAAAC,SAAA,IACA,KAAAC,iBAAA,GAKA,KAAAC,WAAA,KAAAjhC,IACA,KAAAgkB,YAAA,CAAAA,EACA,KAAAkQ,IAAA,CAAA/F,EAAAA,EAAA+F,IAAA,EAAA/F,EAAA,KACA,KAAA+S,IAAA,CAAA/S,EAAA,IAAAA,EAAA+S,IAAA,CAAA/S,EAAA,IACA,KAAAA,MAAA,CAAAA,EACA,KAAApkB,KAAA,CAAAokB,EAAAA,EAAApkB,KAAA,KACA,QAAAhW,EAAA,EAA4BA,EAAA,KAAAmtC,IAAA,CAAAptC,MAAA,CAAsBC,IAClD,KAAAmtC,IAAA,CAAAntC,EAAA,CAAA8rC,oBAAA,GAEA,MAAA3L,IAAA,SACA,MAAAqM,KAAA,KAAiC3C,EAAQ,CACzC,CACAlT,iBAAAtpB,CAAA,CAAA4e,CAAA,EAIA,OAHA,KAAA+f,aAAA,CAAAnpC,GAAA,CAAAwK,IACA,KAAA2+B,aAAA,CAAA1/B,GAAA,CAAAe,EAAA,IAAiD0e,IAEjD,KAAAigB,aAAA,CAAAvrC,GAAA,CAAA4M,GAAAzH,GAAA,CAAAqmB,EACA,CACAmhB,gBAAA//B,CAAA,IAAAggC,CAAA,EACA,IAAAC,EAAA,KAAAtB,aAAA,CAAAvrC,GAAA,CAAA4M,EACAigC,CAAAA,GAAAA,EAAAphB,MAAA,IAAAmhB,EACA,CACAE,aAAAlgC,CAAA,EACA,YAAA2+B,aAAA,CAAAnpC,GAAA,CAAAwK,EACA,CAIA+nB,MAAAoH,CAAA,CAAA8M,EAAA,KAAAnJ,IAAA,CAAA8L,eAAA,EACA,QAAAzP,QAAA,CACA,MACA,MAAAoP,KAAA,CFnPA7/B,aAAAyhC,YAAAzhC,QAAAA,EAAA0hC,OAAA,CEoPA,KAAAjR,QAAA,CAAAA,EACA,IAAoBoH,SAAAA,CAAA,CAAAtJ,OAAAA,CAAA,CAAAn6B,cAAAA,CAAA,EAAkC,KAAAmY,OAAA,CAStD,GARAnY,GAAA,CAAAA,EAAAY,OAAA,EACAZ,EAAAi1B,KAAA,CAAAoH,GAEA,KAAA2D,IAAA,CAAAqM,KAAA,CAAA5mC,GAAA,OACA,KAAAw0B,MAAA,OAAAA,MAAA,CAAA0P,QAAA,CAAAlkC,GAAA,OACA0jC,GAAAhP,CAAAA,GAAAsJ,CAAA,GACA,MAAA0F,aAAA,KAEA0B,EAAA,KACA0C,EACA,IAAAC,EAAA,SAAAxN,IAAA,CAAAwL,qBAAA,IACAX,EAAAxO,EAAA,KACA,KAAA2D,IAAA,CAAAwL,qBAAA,IACA+B,GAAAA,IACAA,EAAkCt1B,SH/PlC/S,CAAA,CAAAuoC,CAAA,EACA,IAAAruC,EAAkBuY,GAAI1Y,GAAA,GACtByuC,EAAA,EAA4BtpC,UAAAA,CAAA,CAAW,IACvC,IAAAoiB,EAAApiB,EAAAhF,EACAonB,GG2PuC,MH1P3B7f,EAAW+mC,GACvBxoC,EAAAshB,EGyPuC,KHvPvC,EAEA,OADI9f,EAAKX,IAAA,CAAA2nC,EAAA,IACT,IAAiB/mC,EAAW+mC,EAC5B,EGoPuCF,EAAA,GACf9K,GAAqBC,sBAAA,GACrBD,GAAqBC,sBAAA,IAC7C,KAAA0J,KAAA,CAAAlsC,OAAA,CAAAwtC,IAEA,EACA,CACAlK,GACA,KAAAzD,IAAA,CAAA4N,kBAAA,CAAAnK,EAAA,MAGA,UAAAtrB,OAAA,CAAAqQ,OAAA,EACAxoB,GACAyjC,CAAAA,GAAAtJ,CAAA,GACA,KAAA3D,gBAAA,eAAsDryB,MAAAA,CAAA,CAAAu9B,iBAAAA,CAAA,CAAAmM,yBAAAA,CAAA,CAAA1T,OAAA2T,CAAA,CAAuE,IAC7H,QAAAC,sBAAA,IACA,KAAA9rC,MAAA,CAAAnB,KAAAA,EACA,KAAAktC,cAAA,CAAAltC,KAAAA,EACA,MACA,CAEA,IAAAmtC,EAAA,KAAA91B,OAAA,CAAAtV,UAAA,EACA7C,EAAAuC,oBAAA,IACA2rC,GACA,CAA4BC,uBAAAA,CAAA,CAAAC,0BAAAA,CAAA,EAAqDpuC,EAAAiB,QAAA,GAKjFotC,EAAA,MAAAC,YAAA,EACA,CAAyBpG,GAAgB,KAAAoG,YAAA,CAAAR,IACzCD,EAMAU,EAAA,CAAA7M,GAAAmM,EACA,QAAA11B,OAAA,CAAAq2B,UAAA,EACA,KAAA1F,UAAA,OAAAA,UAAA,CAAAzM,QAAA,EACAkS,GACA7M,GACA2M,CAAAA,GAAA,MAAA3J,gBAAA,GACA,KAAAoE,UAAA,GACA,KAAAS,YAAA,MAAAT,UAAA,CACA,KAAAS,YAAA,CAAAA,YAAA,CAAAzoC,KAAAA,GAEA,KAAA2tC,kBAAA,CAAAtqC,EAAAoqC,GACA,IAAAG,EAAA,CACA,GAA+B9rC,EAAkBqrC,EAAA,UACjD/mB,OAAAinB,EACAlhC,WAAAmhC,CACA,EACApuC,CAAAA,EAAAswB,kBAAA,EACA,KAAAnY,OAAA,CAAAq2B,UAAA,IACAE,EAAAz2B,KAAA,GACAy2B,EAAA9sC,IAAA,KAEA,KAAAksB,cAAA,CAAA4gB,EACA,MAOAhN,GACAiM,GAAA,MAEA,KAAAhJ,MAAA,SAAAxsB,OAAA,CAAAqd,cAAA,EACA,KAAArd,OAAA,CAAAqd,cAAA,EAGA,MAAA8Y,YAAA,CAAAR,CACA,EAEA,CACA1Y,SAAA,CACA,KAAAjd,OAAA,CAAAsrB,QAAA,OAAAS,UAAA,GACA,KAAAlE,IAAA,CAAAqM,KAAA,CAAAtH,MAAA,OACA,IAAAT,EAAA,KAAAC,QAAA,EACAD,CAAAA,GAAAA,EAAAS,MAAA,OACA,KAAA9K,MAAA,OAAAA,MAAA,CAAA0P,QAAA,CAAAhkC,MAAA,OACA,KAAA02B,QAAA,CAAAv7B,KAAAA,EACY6F,EAAW,KAAAylC,gBAAA,CACvB,CAEAuC,aAAA,CACA,KAAApD,qBAAA,GACA,CACAqD,eAAA,CACA,KAAArD,qBAAA,GACA,CACAsD,iBAAA,CACA,YAAAtD,qBAAA,OAAAC,qBAAA,CAEAuC,wBAAA,CACA,YAAAhQ,kBAAA,EACA,KAAA9D,MAAA,OAAAA,MAAA,CAAA8T,sBAAA,IACA,EACA,CAEAe,aAAA,EACA,KAAAD,eAAA,KAEA,KAAA3F,UAAA,IACA,KAAAmD,KAAA,OAAAA,KAAA,CAAAlsC,OAAA,CAAA4uC,IACA,KAAA7D,WAAA,GACA,CACA8D,sBAAA,CACA,IAAoBhvC,cAAAA,CAAA,EAAgB,KAAAmY,OAAA,CACpC,OAAAnY,GAAAA,EAAAiB,QAAA,GAAA+/B,iBAAA,CAEAkD,WAAA+K,EAAA,IAEA,GADA,KAAAjP,IAAA,CAAA8L,eAAA,IACA,KAAA9L,IAAA,CAAA6O,eAAA,IACA,KAAA12B,OAAA,CAAAqd,cAAA,OAAArd,OAAA,CAAAqd,cAAA,GACA,MACA,CAkBA,GALA/oB,OAAAyiC,8BAAA,EACA,MAAAtD,yBAAA,EACAuD,SApVAA,EAAAC,CAAA,EAEA,GADAA,EAAAxD,yBAAA,IACAwD,EAAApP,IAAA,GAAAoP,EACA,OACA,IAAYpvC,cAAAA,CAAA,EAAgBovC,EAAAj3B,OAAA,CAC5B,IAAAnY,EACA,OACA,IAAAqwB,EtD1DArwB,EAAAS,KAAA,CAA+B+tB,GAA4B,CsD2D3D,GAAA/hB,OAAA4iC,2BAAA,CAAAhf,EAAA,cACA,IAAgB8J,OAAAA,CAAA,CAAAsJ,SAAAA,CAAA,EAAmB2L,EAAAj3B,OAAA,CACnC1L,OAAAyiC,8BAAA,CAAA7e,EAAA,YAAqE3pB,EAAK,CAAAyzB,CAAAA,GAAAsJ,CAAA,EAC1E,CACA,IAAYxJ,OAAAA,CAAA,EAASmV,EACrBnV,GAAA,CAAAA,EAAA2R,yBAAA,EACAuD,EAAAlV,EAEA,EAoUA,MAEA,KAAA+F,IAAA,CAAAkJ,UAAA,OAAAlJ,IAAA,CAAA8O,WAAA,GACA,KAAA3F,aAAA,CACA,MACA,MAAAA,aAAA,IACA,QAAAtpC,EAAA,EAA4BA,EAAA,KAAAmtC,IAAA,CAAAptC,MAAA,CAAsBC,IAAA,CAClD,IAAAyyB,EAAA,KAAA0a,IAAA,CAAAntC,EAAA,CACAyyB,EAAAqZ,oBAAA,IACArZ,EAAA2O,YAAA,aACA3O,EAAAna,OAAA,CAAAq2B,UAAA,EACAlc,EAAA4R,UAAA,IAEA,CACA,IAAoBT,SAAAA,CAAA,CAAAtJ,OAAAA,CAAA,EAAmB,KAAAhiB,OAAA,CACvC,GAAAsrB,KAAA3iC,IAAA2iC,GAAA,CAAAtJ,EACA,OACA,IAAA6G,EAAA,KAAAgO,oBAAA,EACA,MAAAM,0BAAA,CAAAtO,EACAA,EAAA,KAAAlR,YAAA,KACAhvB,KAAAA,EACA,KAAAyuC,cAAA,GACAN,GAAA,KAAAhC,eAAA,cACA,CACAhnC,QAAA,CAMA,GALA,KAAA8lC,eAAA,IACA,KAAA8C,eAAA,GAIA,CACA,KAAAD,aAAA,GACA,KAAAzC,iBAAA,GACA,KAAAE,KAAA,CAAAlsC,OAAA,CAAAqvC,IACA,MACA,CACA,KAAAtG,UAAA,EACA,KAAAmD,KAAA,CAAAlsC,OAAA,CAAAsvC,IAEA,KAAAvG,UAAA,IAIA,KAAAmD,KAAA,CAAAlsC,OAAA,CAAAuvC,IAKA,KAAArD,KAAA,CAAAlsC,OAAA,CAAA+gC,IAKA,KAAAmL,KAAA,CAAAlsC,OAAA,CAAAwvC,IACA,KAAAxD,iBAAA,GAMA,IAAAltC,EAAwB0Y,GAAI1Y,GAAA,EAChB4G,CAAAA,EAAS1B,KAAA,CAASwD,EAAK,SAAA1I,EAAqB4G,EAASzB,SAAA,EACrDyB,EAASzB,SAAA,CAAAnF,EACT4G,EAASxB,YAAA,IACTE,EAAK0B,MAAA,CAAAL,OAAA,CAAgBC,GACrBtB,EAAK2B,SAAA,CAAAN,OAAA,CAAmBC,GACxBtB,EAAK4B,MAAA,CAAAP,OAAA,CAAgBC,GACrBA,EAASxB,YAAA,GACrB,CACAw/B,WAAA,CACA,KAAAkI,eAAA,GACA,KAAAA,eAAA,IACgB7I,GAASn9B,IAAA,MAAAimC,cAAA,EAEzB,CACAG,mBAAA,CACA,KAAAE,KAAA,CAAAlsC,OAAA,CAAAyvC,IACA,KAAA7C,WAAA,CAAA5sC,OAAA,CAAA0vC,GACA,CACAC,0BAAA,CACA,KAAA7D,yBAAA,GACA,KAAAA,yBAAA,IACgBvlC,EAAKR,SAAA,MAAAkmC,gBAAA,QAErB,CACAtH,2BAAA,CAMYp+B,EAAKN,UAAA,MACjB,KAAA+iC,aAAA,CACA,KAAAnJ,IAAA,CAAA6D,SAAA,GAGA,KAAA7D,IAAA,CAAAkM,iBAAA,EAEA,EACA,CAIAqD,gBAAA,EACA,KAAAvG,QAAA,OAAA3M,QAAA,EAEA,MAAA2M,QAAA,MAAA9J,OAAA,GACA,CACAgC,cAAA,CACA,SAAA7E,QAAA,GAGA,KAAA4E,YAAA,GACA,OAAA9oB,OAAA,CAAA43B,mBAAA,OAAApL,MAAA,KACA,MAAAwE,aAAA,EAJA,OAcA,QAAAL,UAAA,QAAAA,UAAA,CAAAzM,QAAA,CACA,QAAAx8B,EAAA,EAAgCA,EAAA,KAAAmtC,IAAA,CAAAptC,MAAA,CAAsBC,IAEtDyyB,IADA,CAAA0a,IAAA,CAAAntC,EAAA,CACAohC,YAAA,GAGA,IAAA+O,EAAA,KAAA7V,MAAA,CACA,KAAAA,MAAA,MAAA+E,OAAA,KACA,KAAA+Q,eAAA,CAAmC/U,KACnC,KAAAiO,aAAA,IACA,KAAArD,eAAA,CAAAhlC,KAAAA,EACA,KAAAmsC,eAAA,gBAAA9S,MAAA,CAAA+D,SAAA,EACA,IAAoBl+B,cAAAA,CAAA,EAAgB,KAAAmY,OAAA,CACpCnY,GACAA,EAAA+rB,MAAA,sBAAAoO,MAAA,CAAA+D,SAAA,CAAA8R,EAAAA,EAAA9R,SAAA,CAAAp9B,KAAAA,EACA,CACAmgC,aAAAiP,EAAA,WACA,IAAAzkC,EAAAsC,CAAAA,CAAA,MAAAoK,OAAA,CAAAg4B,YAAA,OAAA9T,QAAA,EAMA,GALA,KAAA0D,MAAA,EACA,KAAAA,MAAA,CAAAmL,WAAA,QAAAlL,IAAA,CAAAkL,WAAA,EACA,KAAAnL,MAAA,CAAAmQ,KAAA,GAAAA,GACAzkC,CAAAA,EAAA,IAEAA,EAAA,CACA,IAAA2kC,EAAApF,EAAA,KAAA3O,QAAA,CACA,MAAA0D,MAAA,EACAmL,YAAA,KAAAlL,IAAA,CAAAkL,WAAA,CACAgF,MAAAA,EACAE,OAAAA,EACArsB,OAAAgnB,EAAA,KAAA1O,QAAA,EACAgU,QAAA,KAAAtQ,MAAA,MAAAA,MAAA,CAAAqQ,MAAA,CAAAA,CACA,CACA,CACA,CACAnF,gBAAA,CACA,IAAAA,EACA,OACA,IAAAqF,EAAA,KAAAnH,aAAA,EACA,KAAAwC,oBAAA,EACA,KAAAxzB,OAAA,CAAA43B,mBAAA,CACAQ,EAAA,KAAAzK,eAAA,GAA2DiC,GAAW,KAAAjC,eAAA,EACtE9E,EAAA,KAAAgO,oBAAA,GACAwB,EAAAxP,EACAA,EAAA,KAAAlR,YAAA,KACAhvB,KAAAA,EACA2vC,EAAAD,IAAA,KAAAlB,0BAAA,CACAgB,GACAC,CAAAA,GACoBhV,GAAY,KAAAzL,YAAA,GAChC2gB,CAAA,IACAxF,EAAA,KAAA5O,QAAA,CAAAmU,GACA,KAAA7E,oBAAA,IACA,KAAArD,cAAA,GAEA,CACApJ,QAAAwR,EAAA,QAm+BA5U,EAl+BA,IAAA6U,EAAA,KAAA/Q,cAAA,GACA1B,EAAA,KAAA0S,mBAAA,CAAAD,GAUA,OAJAD,GACAxS,CAAAA,EAAA,KAAAwS,eAAA,CAAAxS,EAAA,EA29BA2S,GAAA/U,CADAA,EAx9BAoC,GAy9BAj0B,CAAA,EACA4mC,GAAA/U,EAAAzxB,CAAA,EAz9BA,CACA6gC,YAAA,KAAAlL,IAAA,CAAAkL,WAAA,CACA4F,YAAAH,EACAzS,UAAAA,EACApO,aAAA,GACApf,OAAA,KAAA2kB,EAAA,CAEA,CACAuK,gBAAA,CACA,IAAAtzB,EACA,IAAoBtM,cAAAA,CAAA,EAAgB,KAAAmY,OAAA,CACpC,IAAAnY,EACA,OAAuBk7B,KACvB,IAAAY,EAAA97B,EAAAkX,kBAAA,GAEA,IADA,SAAA5K,CAAAA,EAAA,KAAAyzB,MAAA,GAAAzzB,KAAA,IAAAA,EAAA,OAAAA,EAAA+jC,OAAA,QAAArD,IAAA,CAAAtyB,IAAA,CAAAq2B,GAAA,EACA,CAEA,IAAwBhR,OAAAA,CAAA,EAAS,KAAAC,IAAA,CACjCD,IACoBhE,GAAaD,EAAA7xB,CAAA,CAAA81B,EAAAhc,MAAA,CAAA9Z,CAAA,EACb8xB,GAAaD,EAAAzxB,CAAA,CAAA01B,EAAAhc,MAAA,CAAA1Z,CAAA,EAEjC,CACA,OAAAyxB,CACA,CACA8U,oBAAA9U,CAAA,EACA,IAAAxvB,EACA,IAAA0kC,EAAqC9V,KAErC,GADY4L,GAAWkK,EAAAlV,GACvB,OAAAxvB,CAAAA,EAAA,KAAAyzB,MAAA,GAAAzzB,KAAA,IAAAA,EAAA,OAAAA,EAAA+jC,OAAA,CACA,OAAAW,EAMA,QAAAnxC,EAAA,EAA4BA,EAAA,KAAAmtC,IAAA,CAAAptC,MAAA,CAAsBC,IAAA,CAClD,IAAAyyB,EAAA,KAAA0a,IAAA,CAAAntC,EAAA,CACA,CAAwBkgC,OAAAA,CAAA,CAAA5nB,QAAAA,CAAA,EAAkBma,EAC1CA,IAAA,KAAA0N,IAAA,EAAAD,GAAA5nB,EAAAg4B,YAAA,GAKApQ,EAAAsQ,OAAA,EACwBvJ,GAAWkK,EAAAlV,GAEfC,GAAaiV,EAAA/mC,CAAA,CAAA81B,EAAAhc,MAAA,CAAA9Z,CAAA,EACb8xB,GAAaiV,EAAA3mC,CAAA,CAAA01B,EAAAhc,MAAA,CAAA1Z,CAAA,EAEjC,CACA,OAAA2mC,CACA,CACAC,eAAAnV,CAAA,CAAAoV,EAAA,IACA,IAAAC,EAAmCjW,KACvB4L,GAAWqK,EAAArV,GACvB,QAAAj8B,EAAA,EAA4BA,EAAA,KAAAmtC,IAAA,CAAAptC,MAAA,CAAsBC,IAAA,CAClD,IAAAyyB,EAAA,KAAA0a,IAAA,CAAAntC,EAAA,EACAqxC,GACA5e,EAAAna,OAAA,CAAAg4B,YAAA,EACA7d,EAAAyN,MAAA,EACAzN,IAAAA,EAAA0N,IAAA,EACoB5D,GAAY+U,EAAA,CAChClnC,EAAA,CAAAqoB,EAAAyN,MAAA,CAAAhc,MAAA,CAAA9Z,CAAA,CACAI,EAAA,CAAAioB,EAAAyN,MAAA,CAAAhc,MAAA,CAAA1Z,CAAA,GAGqBkxB,GAAYjJ,EAAAxC,YAAA,GAEjBsM,GAAY+U,EAAA7e,EAAAxC,YAAA,CAC5B,CAIA,OAHgByL,GAAY,KAAAzL,YAAA,GACZsM,GAAY+U,EAAA,KAAArhB,YAAA,EAE5BqhB,CACA,CACAT,gBAAA5U,CAAA,EACA,IAAAsV,EAAwClW,KAC5B4L,GAAWsK,EAAAtV,GACvB,QAAAj8B,EAAA,EAA4BA,EAAA,KAAAmtC,IAAA,CAAAptC,MAAA,CAAsBC,IAAA,CAClD,IAAAyyB,EAAA,KAAA0a,IAAA,CAAAntC,EAAA,CACA,IAAAyyB,EAAA+J,QAAA,EAEA,CAAqBd,GAAYjJ,EAAAxC,YAAA,EADjC,QAGgBwL,CAAAA,GAAQhJ,EAAAxC,YAAA,GAAAwC,EAAAid,cAAA,GACxB,IAAA1H,EAAkC3M,KAElB4L,GAAWe,EAD3BvV,EAAAsN,cAAA,IAEgBgI,GAAmBwJ,EAAA9e,EAAAxC,YAAA,CAAAwC,EAAA0W,QAAA,CAAA1W,EAAA0W,QAAA,CAAA9K,SAAA,CAAAp9B,KAAAA,EAAA+mC,EACnC,CAIA,OAHgBtM,GAAY,KAAAzL,YAAA,GACZ8X,GAAmBwJ,EAAA,KAAAthB,YAAA,EAEnCshB,CACA,CACAC,eAAAltC,CAAA,EACA,KAAAmtC,WAAA,CAAAntC,EACA,KAAA67B,IAAA,CAAA8P,wBAAA,GACA,KAAA1E,iBAAA,GACA,CACArH,WAAA5rB,CAAA,EACA,KAAAA,OAAA,EACA,QAAAA,OAAA,CACA,GAAAA,CAAA,CACAixB,UAAAjxB,KAAArX,IAAAqX,EAAAixB,SAAA,EAAAjxB,EAAAixB,SAAA,CAEA,CACAoG,mBAAA,CACA,KAAAzP,MAAA,CAAAj/B,KAAAA,EACA,KAAAq5B,MAAA,CAAAr5B,KAAAA,EACA,KAAAkoC,QAAA,CAAAloC,KAAAA,EACA,KAAAwuC,0BAAA,CAAAxuC,KAAAA,EACA,KAAAwwC,WAAA,CAAAxwC,KAAAA,EACA,KAAAmB,MAAA,CAAAnB,KAAAA,EACA,KAAAqoC,aAAA,GACA,CACAoI,oCAAA,CACA,KAAAC,cAAA,EAQA,KAAAA,cAAA,CAAA7E,wBAAA,GACgB9mC,EAASzB,SAAA,EACzB,KAAAotC,cAAA,CAAAjF,kBAAA,IAEA,CACAA,mBAAAkF,EAAA,QACAnlC,EhCvqBArK,EAAA+3B,EAAAC,EgC6qBA,IAAAuO,EAAA,KAAAkJ,OAAA,EACA,MAAAtG,iBAAA,QAAAA,iBAAA,CAAA5C,EAAA4C,iBAAA,EACA,KAAAE,gBAAA,QAAAA,gBAAA,CAAA9C,EAAA8C,gBAAA,EACA,KAAAD,uBAAA,QAAAA,uBAAA,CAAA7C,EAAA6C,uBAAA,EACA,IAAAsG,EAAA5jC,CAAAA,CAAA,KAAAw7B,YAAA,SAAAf,EAWA,GANA,CAAAiJ,CAAAA,GACAE,GAAA,KAAAtG,uBAAA,EACA,KAAAD,iBAAA,EACA,QAAA9+B,CAAAA,EAAA,KAAA2tB,MAAA,GAAA3tB,KAAA,IAAAA,EAAA,OAAAA,EAAA8+B,iBAAA,GACA,KAAAwG,8BAAA,EACA,KAAA5R,IAAA,CAAAwL,qBAAA,EAEA,OACA,IAAoBrR,OAAAA,CAAA,CAAAsJ,SAAAA,CAAA,EAAmB,KAAAtrB,OAAA,CAIvC,QAAAgiB,MAAA,EAAAA,CAAAA,GAAAsJ,CAAA,GAQA,GANA,KAAAkJ,wBAAA,CAA4C9mC,EAASzB,SAAA,CAMrD,MAAAktC,WAAA,QAAAtD,cAAA,EACA,IAAAwD,EAAA,KAAAK,0BAAA,EACAL,CAAAA,GACAA,EAAArX,MAAA,EACA,SAAA2S,iBAAA,EACA,KAAA0E,cAAA,CAAAA,EACA,KAAAD,kCAAA,GACA,KAAAvD,cAAA,CAA0C9S,KAC1C,KAAA4W,oBAAA,CAAgD5W,KAC5Bd,GAAoB,KAAA0X,oBAAA,MAAA3X,MAAA,CAAA+D,SAAA,CAAAsT,EAAArX,MAAA,CAAA+D,SAAA,EACpB4I,GAAW,KAAAkH,cAAA,MAAA8D,oBAAA,GAG/B,KAAAN,cAAA,MAAAxD,cAAA,CAAAltC,KAAAA,CAEA,CAKA,QAAAktC,cAAA,OAAAsD,WAAA,EAyCA,IApCA,KAAArvC,MAAA,GACA,KAAAA,MAAA,CAA8Bi5B,KAC9B,KAAA6W,oBAAA,CAA4C7W,MAK5C,KAAA8S,cAAA,EACA,KAAA8D,oBAAA,EACA,KAAAN,cAAA,EACA,KAAAA,cAAA,CAAAvvC,MAAA,GACA,KAAAsvC,kCAAA,GhC9uBAtvC,EgC+uB+B,KAAAA,MAAA,ChC/uB/B+3B,EgC+uB+B,KAAAgU,cAAA,ChC/uB/B/T,EgC+uB+B,KAAAuX,cAAA,CAAAvvC,MAAA,ChC9uB/B83B,GAAA93B,EAAAgI,CAAA,CAAA+vB,EAAA/vB,CAAA,CAAAgwB,EAAAhwB,CAAA,EACA8vB,GAAA93B,EAAAoI,CAAA,CAAA2vB,EAAA3vB,CAAA,CAAA4vB,EAAA5vB,CAAA,GgCkvBA,KAAAinC,WAAA,EACA,KAAA/H,YAAA,CAEA,KAAAtnC,MAAA,MAAAgvC,cAAA,MAAA9W,MAAA,CAAA+D,SAAA,EAGoB4I,GAAW,KAAA7kC,MAAA,MAAAk4B,MAAA,CAAA+D,SAAA,EAEfrC,GAAa,KAAA55B,MAAA,MAAAqvC,WAAA,GAMbxK,GAAW,KAAA7kC,MAAA,MAAAk4B,MAAA,CAAA+D,SAAA,EAK3B,KAAA0T,8BAAA,EACA,KAAAA,8BAAA,IACA,IAAAJ,EAAA,KAAAK,0BAAA,EACAL,CAAAA,GACAzjC,CAAAA,CAAAyjC,EAAAjI,YAAA,EACAx7B,CAAAA,CAAA,KAAAw7B,YAAA,EACA,CAAAiI,EAAAr5B,OAAA,CAAAg4B,YAAA,EACAqB,EAAAvvC,MAAA,EACA,SAAA6qC,iBAAA,EACA,KAAA0E,cAAA,CAAAA,EACA,KAAAD,kCAAA,GACA,KAAAvD,cAAA,CAA0C9S,KAC1C,KAAA4W,oBAAA,CAAgD5W,KAC5Bd,GAAoB,KAAA0X,oBAAA,MAAA7vC,MAAA,CAAAuvC,EAAAvvC,MAAA,EACpB6kC,GAAW,KAAAkH,cAAA,MAAA8D,oBAAA,GAG/B,KAAAN,cAAA,MAAAxD,cAAA,CAAAltC,KAAAA,CAEA,CAIAqpC,IACAJ,GAAAE,oBAAA,IAEA,CACA4H,4BAAA,OACA,MAAA5X,MAAA,EACgBqB,GAAQ,KAAArB,MAAA,CAAAnK,YAAA,GACR0L,GAAc,KAAAvB,MAAA,CAAAnK,YAAA,EAC9B,OAEA,KAAAmK,MAAA,CAAA+X,YAAA,GACA,KAAA/X,MAAA,CAGA,KAAAA,MAAA,CAAA4X,0BAAA,EAEA,CACAG,cAAA,CACA,MAAAjkC,CAAAA,CAAA,OAAAigC,cAAA,EACA,KAAAsD,WAAA,EACA,KAAAn5B,OAAA,CAAAq2B,UAAA,GACA,KAAArU,MAAA,CACA,CACAqS,gBAAA,CACA,IAAAlgC,EACA,IAAAk8B,EAAA,KAAAkJ,OAAA,GACAC,EAAA5jC,CAAAA,CAAA,KAAAw7B,YAAA,SAAAf,EACAyJ,EAAA,GAuBA,GAlBA,MAAA7G,iBAAA,UAAA9+B,CAAAA,EAAA,KAAA2tB,MAAA,GAAA3tB,KAAA,IAAAA,EAAA,OAAAA,EAAA8+B,iBAAA,IACA6G,CAAAA,EAAA,IAMAN,GACA,MAAAtG,uBAAA,OAAAC,gBAAA,GACA2G,CAAAA,EAAA,IAMA,KAAAtF,wBAAA,GAAkD9mC,EAASzB,SAAA,EAC3D6tC,CAAAA,EAAA,IAEAA,EACA,OACA,IAAoB9X,OAAAA,CAAA,CAAAsJ,SAAAA,CAAA,EAAmB,KAAAtrB,OAAA,CAWvC,GANA,KAAAgzB,eAAA,CAAAp9B,CAAAA,CAAA,MAAAksB,MAAA,OAAAA,MAAA,CAAAkR,eAAA,EACA,KAAAzG,gBAAA,EACA,KAAAwN,gBAAA,EACA,KAAA/G,eAAA,EACA,MAAAmG,WAAA,MAAAtD,cAAA,CAAAltC,KAAAA,CAAA,EAEA,MAAAq5B,MAAA,GAAAA,CAAAA,GAAAsJ,CAAA,EACA,OAKYqD,GAAW,KAAAmJ,eAAA,MAAA9V,MAAA,CAAA+D,SAAA,EAIvB,IAAAiU,EAAA,KAAAtM,SAAA,CAAA57B,CAAA,CACAmoC,EAAA,KAAAvM,SAAA,CAAAx7B,CAAA,EAKYgoC,S1Bz2BZvW,CAAA,CAAA+J,CAAA,CAAAyM,CAAA,CAAAC,EAAA,QAMAjgB,EACAnuB,EANA,IAAAquC,EAAAF,EAAA1yC,MAAA,CACA,GAAA4yC,GAGA3M,EAAA57B,CAAA,CAAA47B,EAAAx7B,CAAA,GAGA,QAAAxK,EAAA,EAAoBA,EAAA2yC,EAAgB3yC,IAAA,CAEpCsE,EAAAmuB,CADAA,EAAAggB,CAAA,CAAAzyC,EAAA,EACAimC,eAAA,CAKA,IAAgB9lC,cAAAA,CAAA,EAAgBsyB,EAAAna,OAAA,CAChCnY,CAAAA,CAAAA,IACAA,EAAAS,KAAA,CAAA4uB,KAAA,EACArvB,aAAAA,EAAAS,KAAA,CAAA4uB,KAAA,CAAAojB,OAAA,IAGAF,GACAjgB,EAAAna,OAAA,CAAAg4B,YAAA,EACA7d,EAAAyN,MAAA,EACAzN,IAAAA,EAAA0N,IAAA,EACA5D,GAAAN,EAAA,CACA7xB,EAAA,CAAAqoB,EAAAyN,MAAA,CAAAhc,MAAA,CAAA9Z,CAAA,CACAI,EAAA,CAAAioB,EAAAyN,MAAA,CAAAhc,MAAA,CAAA1Z,CAAA,GAGAlG,IAEA0hC,EAAA57B,CAAA,EAAA9F,EAAA8F,CAAA,CAAAhC,KAAA,CACA49B,EAAAx7B,CAAA,EAAAlG,EAAAkG,CAAA,CAAApC,KAAA,CAEA4zB,GAAAC,EAAA33B,IAEAouC,GAAkChX,GAAYjJ,EAAAxC,YAAA,GAC9CsM,GAAAN,EAAAxJ,EAAAxC,YAAA,EAEA,CAKA+V,EAAA57B,CAAA,CApDA,iBAqDA47B,EAAA57B,CAAA,CAtDA,eAuDA47B,CAAAA,EAAA57B,CAAA,IAEA47B,EAAAx7B,CAAA,CAxDA,iBAyDAw7B,EAAAx7B,CAAA,CA1DA,eA2DAw7B,CAAAA,EAAAx7B,CAAA,IAEA,E0BozB2B,KAAA4lC,eAAA,MAAApK,SAAA,MAAAmH,IAAA,CAAA2E,GAK3BnJ,EAAArO,MAAA,EACA,CAAAqO,EAAAvmC,MAAA,EACA,UAAA4jC,SAAA,CAAA57B,CAAA,WAAA47B,SAAA,CAAAx7B,CAAA,IACAm+B,EAAAvmC,MAAA,CAAAumC,EAAArO,MAAA,CAAA+D,SAAA,CACAsK,EAAAuJ,oBAAA,CAA4C7W,MAE5C,IAAoBj5B,OAAAA,CAAA,EAASumC,EAC7B,IAAAvmC,EAAA,CAMA,KAAAywC,mBAAA,GACA,KAAAC,sBAAA,GACA,KAAArK,cAAA,IAEA,MACA,CACA,KAAAxC,eAAA,OAAA4M,mBAAA,EAIgB1L,GAAiB,KAAA0L,mBAAA,CAAAzoC,CAAA,MAAA67B,eAAA,CAAA77B,CAAA,EACjB+8B,GAAiB,KAAA0L,mBAAA,CAAAroC,CAAA,MAAAy7B,eAAA,CAAAz7B,CAAA,GAJjC,KAAAsoC,sBAAA,GAeY7Y,GAAY,KAAAgM,eAAA,MAAAmK,eAAA,CAAAhuC,EAAA,KAAA6tB,YAAA,EACxB,KAAA+V,SAAA,CAAA57B,CAAA,GAAAkoC,GACA,KAAAtM,SAAA,CAAAx7B,CAAA,GAAA+nC,GACiBhK,GAAe,KAAAtC,eAAA,CAAA77B,CAAA,MAAAyoC,mBAAA,CAAAzoC,CAAA,GACfm+B,GAAe,KAAAtC,eAAA,CAAAz7B,CAAA,MAAAqoC,mBAAA,CAAAroC,CAAA,IAChC,KAAAuiC,YAAA,IACA,KAAAtE,cAAA,GACA,KAAA2E,eAAA,oBAAAhrC,IAKAkoC,IACAJ,GAAAG,sBAAA,EAEA,CACAb,MAAA,CACA,KAAAwD,SAAA,GAEA,CACAhE,MAAA,CACA,KAAAgE,SAAA,GAEA,CACAvE,eAAAsK,EAAA,IACA,IAAAtmC,EAEA,GADA,OAAAA,CAAAA,EAAA,KAAA6L,OAAA,CAAAnY,aAAA,GAAAsM,KAAA,IAAAA,GAAAA,EAAAg8B,cAAA,GACAsK,EAAA,CACA,IAAAtO,EAAA,KAAAC,QAAA,EACAD,CAAAA,GAAAA,EAAAgE,cAAA,EACA,CACA,KAAAiB,YAAA,QAAAA,YAAA,CAAAlN,QAAA,EACA,MAAAkN,YAAA,CAAAzoC,KAAAA,CAAA,CAEA,CACA6xC,wBAAA,CACA,KAAAD,mBAAA,CAAuC1X,KACvC,KAAA8K,eAAA,CAAmC9K,KACnC,KAAA6X,4BAAA,CAAgD7X,IAChD,CACAyT,mBAAAtqC,CAAA,CAAAoqC,EAAA,QAuBAuE,EAtBA,IAAA9J,EAAA,KAAAA,QAAA,CACA+J,EAAA/J,EACAA,EAAAlZ,YAAA,CACA,GACAkjB,EAAA,CAAkC,QAAAljB,YAAA,EAClCwhB,EAAgCtW,IAChC,MAAAwW,cAAA,EACA,KAAAA,cAAA,CAAAr5B,OAAA,CAAAq2B,UAAA,EACA,MAAAR,cAAA,MAAA8D,oBAAA,CAAAhxC,KAAAA,CAAA,EAEA,KAAA8wC,8BAAA,EAAArD,EACA,IAAA0E,EAAmC/X,KAGnCgY,EAAAC,CAFAnK,EAAAA,EAAAt4B,MAAA,CAAA5P,KAAAA,CAAA,IACA,MAAAq5B,MAAA,MAAAA,MAAA,CAAAzpB,MAAA,CAAA5P,KAAAA,CAAA,EAEAwjC,EAAA,KAAAC,QAAA,GACA6O,EAAA,CAAA9O,GAAAA,EAAAE,OAAA,CAAA5kC,MAAA,IACAyzC,EAAAtlC,CAAAA,CAAAmlC,CAAAA,GACA,CAAAE,GACA,UAAAj7B,OAAA,CAAAixB,SAAA,EACA,MAAA4D,IAAA,CAAAtyB,IAAA,CAAA44B,GAAA,CACA,MAAAxG,iBAAA,GAEA,KAAAyG,cAAA,KACA,IAAA7yB,EAAA3C,EAAA,IAIA,GAHAy1B,GAAAlC,EAAArnC,CAAA,CAAA9F,EAAA8F,CAAA,CAAAyW,GACA8yB,GAAAlC,EAAAjnC,CAAA,CAAAlG,EAAAkG,CAAA,CAAAqW,GACA,KAAA2wB,cAAA,CAAAC,GACA,KAAAtD,cAAA,EACA,KAAA8D,oBAAA,EACA,KAAA3X,MAAA,EACA,KAAAqX,cAAA,EACA,KAAAA,cAAA,CAAArX,MAAA,MTz/BA3rB,EAAAC,ES0/CAmC,EAAArF,EAhgBoB6uB,GAAoB6Y,EAAA,KAAA9Y,MAAA,CAAA+D,SAAA,MAAAsT,cAAA,CAAArX,MAAA,CAAA+D,SAAA,EAggBxCttB,EA/fA,KAAAo9B,cAAA,CA+fAziC,EA/fA,KAAAumC,oBAAA,CAggBA2B,GAAA7iC,EAAA3G,CAAA,CAAAsB,EAAAtB,CAAA,CAAA0W,EAAA1W,CAAA,CAhgBAyW,GAigBA+yB,GAAA7iC,EAAAvG,CAAA,CAAAkB,EAAAlB,CAAA,CAAAsW,EAAAtW,CAAA,CAjgBAqW,GAKAoyB,IThgCAtkC,ESigCiC,KAAAw/B,cAAA,CTjgCjCv/B,ESigCiCqkC,EThgCjC9K,GAAAx5B,EAAAvE,CAAA,CAAAwE,EAAAxE,CAAA,GAAA+9B,GAAAx5B,EAAAnE,CAAA,CAAAoE,EAAApE,CAAA,ISigCA,MAAA+gC,iBAAA,KAEA0H,GACAA,CAAAA,EAA6C5X,IAAS,EAClC4L,GAAWgM,EAAA,KAAA9E,cAAA,CAC/B,CACAkF,IACA,KAAAjK,eAAA,CAAA+J,EACoBU,SZ3gCpBzxC,CAAA,CAAA0xC,CAAA,CAAAnL,CAAA,CAAA9nB,CAAA,CAAA2yB,CAAA,CAAAD,CAAA,EACAC,GACApxC,EAAA+R,OAAA,CAAyB6M,GAAS,EAElC2nB,KAAA1nC,IAAA0nC,EAAAx0B,OAAA,CAAAw0B,EAAAx0B,OAAA,GAAAyyB,GAAA/lB,IACAze,EAAA2xC,WAAA,CAA6B/yB,GAAS8yB,KAAA7yC,IAAA6yC,EAAA3/B,OAAA,CAAA2/B,EAAA3/B,OAAA,KAAA2yB,GAAAjmB,KAEtC0yB,GACAnxC,CAAAA,EAAA+R,OAAA,CAAyB6M,GAAS8yB,KAAA7yC,IAAA6yC,EAAA3/B,OAAA,CAAA2/B,EAAA3/B,OAAA,GAAAw0B,KAAA1nC,IAAA0nC,EAAAx0B,OAAA,CAAAw0B,EAAAx0B,OAAA,GAAA0M,EAAA,EAKlC,QAAA7gB,EAAA,EAAoBA,EAAAumC,GAAgBvmC,IAAA,CACpC,IAAAg0C,EAAA,SAAqC1N,EAAA,CAAAtmC,EAAA,CAAW,QAChDi0C,EAAAvN,GAAAoN,EAAAE,GACAE,EAAAxN,GAAAiC,EAAAqL,GACAC,CAAAA,KAAAhzC,IAAAgzC,GAAAC,KAAAjzC,IAAAizC,CAAA,IAEAD,GAAAA,CAAAA,EAAA,GACAC,GAAAA,CAAAA,EAAA,GACAD,IAAAA,GACAC,IAAAA,GACAzN,GAAAwN,KAAAxN,GAAAyN,IAEA9xC,CAAA,CAAA4xC,EAAA,CAAA3xC,KAAAqE,GAAA,CAA2Csa,GAASwlB,GAAAyN,GAAAzN,GAAA0N,GAAArzB,GAAA,GACpC7X,CAAAA,GAAO7B,IAAA,CAAA+sC,IAAqBlrC,GAAO7B,IAAA,CAAA8sC,EAAA,GACnD7xC,CAAAA,CAAA,CAAA4xC,EAAA,QAIA5xC,CAAA,CAAA4xC,EAAA,CAAAE,EAEA,CAIAJ,CAAAA,EAAA1gC,MAAA,EAAAu1B,EAAAv1B,MAAA,GACAhR,CAAAA,EAAAgR,MAAA,CAAwB4N,GAAS8yB,EAAA1gC,MAAA,IAAAu1B,EAAAv1B,MAAA,IAAAyN,EAAA,CAEjC,EYm+B6BsyB,EAAAD,EAAA,KAAAjjB,YAAA,CAAApP,EAAA2yB,EAAAD,IAE7B,KAAApT,IAAA,CAAA8P,wBAAA,GACA,KAAAxH,cAAA,GACA,KAAAwE,iBAAA,CAAApsB,CACA,EACA,KAAA6yB,cAAA,MAAAp7B,OAAA,CAAAq2B,UAAA,OACA,CACA1gB,eAAA3V,CAAA,EACA,KAAA80B,eAAA,mBACA,KAAAvI,gBAAA,OAAAA,gBAAA,CAAAjgB,IAAA,GACA,KAAA8kB,YAAA,OAAAA,YAAA,CAAA7E,gBAAA,EACA,KAAA6E,YAAA,CAAA7E,gBAAA,CAAAjgB,IAAA,GAEA,KAAAytB,gBAAA,GACgBvrC,EAAW,KAAAurC,gBAAA,EAC3B,KAAAA,gBAAA,CAAApxC,KAAAA,GAOA,KAAAoxC,gBAAA,CAAoCxrC,EAAKT,MAAA,MACzBy8B,GAAqBC,sBAAA,IACrC,KAAA+B,gBAAA,CAAwCsP,SD1iCxC5zC,CAAA,CAAAqC,CAAA,CAAA0V,CAAA,EACA,IAAA87B,EAA0BhlB,GCyiCgC,KDziCD9hB,GCyiCC,GDviC1D,OADA8mC,EAAA70C,KAAA,CAAwBsrB,GAAkB,GAAAupB,ECmC1C,IDnC0C97B,IAC1C87B,EAAA7rB,SAAA,ECuiC0D,EArgC1D,EAqgC0D,CAC1D,GAAAjQ,CAAA,CACAS,SAAA,IACA,KAAA26B,cAAA,CAAAx1B,GACA5F,EAAAS,QAAA,EAAAT,EAAAS,QAAA,CAAAmF,EACA,EACA9Q,WAAA,KACAkL,EAAAlL,UAAA,EAAAkL,EAAAlL,UAAA,GACA,KAAAinC,iBAAA,EACA,CACA,GACA,KAAA3K,YAAA,EACA,MAAAA,YAAA,CAAA7E,gBAAA,MAAAA,gBAAA,EAEA,KAAAwN,gBAAA,CAAApxC,KAAAA,CACA,EACA,CACAozC,mBAAA,CACA,KAAA3K,YAAA,GACA,KAAAA,YAAA,CAAA7E,gBAAA,CAAA5jC,KAAAA,EACA,KAAAyoC,YAAA,CAAAR,eAAA,CAAAjoC,KAAAA,GAEA,IAAAwjC,EAAA,KAAAC,QAAA,EACAD,CAAAA,GAAAA,EAAAgF,qBAAA,GACA,KAAAC,YAAA,CACA,KAAA7E,gBAAA,CACA,KAAAuE,eAAA,CACAnoC,KAAAA,EACA,KAAAmsC,eAAA,qBACA,CACAU,iBAAA,CACA,KAAAjJ,gBAAA,GACA,KAAA6O,cAAA,OAAAA,cAAA,CAriCA,KAsiCA,KAAA7O,gBAAA,CAAAjgB,IAAA,IAEA,KAAAyvB,iBAAA,EACA,CACAC,yBAAA,CACA,IAAA3L,EAAA,KAAAkJ,OAAA,GACA,CAAkBK,qBAAAA,CAAA,CAAA9vC,OAAAA,CAAA,CAAAk4B,OAAAA,CAAA,CAAArK,aAAAA,CAAA,EAAqD0Y,EACvE,MAAAvmC,GAAAk4B,GAOA,UAAAqO,GACA,KAAArO,MAAA,EACAA,GACAia,GAAA,KAAAj8B,OAAA,CAAAk8B,aAAA,MAAAla,MAAA,CAAA+D,SAAA,CAAA/D,EAAA+D,SAAA,GACAj8B,EAAA,KAAAA,MAAA,EAAwCi5B,KACxC,IAAAoZ,EAAgC7a,GAAU,KAAAU,MAAA,CAAA+D,SAAA,CAAAj0B,CAAA,CAC1ChI,CAAAA,EAAAgI,CAAA,CAAAzD,GAAA,CAAAgiC,EAAAvmC,MAAA,CAAAgI,CAAA,CAAAzD,GAAA,CACAvE,EAAAgI,CAAA,CAAA1D,GAAA,CAAAtE,EAAAgI,CAAA,CAAAzD,GAAA,CAAA8tC,EACA,IAAAC,EAAgC9a,GAAU,KAAAU,MAAA,CAAA+D,SAAA,CAAA7zB,CAAA,CAC1CpI,CAAAA,EAAAoI,CAAA,CAAA7D,GAAA,CAAAgiC,EAAAvmC,MAAA,CAAAoI,CAAA,CAAA7D,GAAA,CACAvE,EAAAoI,CAAA,CAAA9D,GAAA,CAAAtE,EAAAoI,CAAA,CAAA7D,GAAA,CAAA+tC,CACA,CACYzN,GAAWiL,EAAA9vC,GAMXm6B,GAAY2V,EAAAjiB,GAOZgK,GAAY,KAAA+Y,4BAAA,MAAA5C,eAAA,CAAA8B,EAAAjiB,GACxB,CACA8d,mBAAAnK,CAAA,CAAAnR,CAAA,EACA,KAAAya,WAAA,CAAArqC,GAAA,CAAA+gC,IACA,KAAAsJ,WAAA,CAAA5gC,GAAA,CAAAs3B,EAAA,IAAmD4E,IAGnD/D,IADA,CAAAyI,WAAA,CAAAzsC,GAAA,CAAAmjC,GACAh+B,GAAA,CAAA6sB,GACA,IAAAkiB,EAAAliB,EAAAna,OAAA,CAAAs8B,sBAAA,CACAniB,EAAA6R,OAAA,EACAthC,WAAA2xC,EAAAA,EAAA3xC,UAAA,CAAA/B,KAAAA,EACA8nC,sBAAA4L,GAAAA,EAAAE,2BAAA,CACAF,EAAAE,2BAAA,CAAApiB,GACAxxB,KAAAA,CACA,EACA,CACA6jC,QAAA,CACA,IAAAL,EAAA,KAAAC,QAAA,GACA,MAAAD,CAAAA,GAAAA,EAAAkE,IAAA,QAEAkJ,SAAA,CACA,IAAAplC,EACA,IAAoBm3B,SAAAA,CAAA,EAAW,KAAAtrB,OAAA,CAC/B,OAAAsrB,GAAA,QAAAn3B,CAAAA,EAAA,KAAAi4B,QAAA,KAAAj4B,KAAA,IAAAA,EAAA,OAAAA,EAAAk8B,IAAA,QAEAmM,aAAA,CACA,IAAAroC,EACA,IAAoBm3B,SAAAA,CAAA,EAAW,KAAAtrB,OAAA,CAC/B,OAAAsrB,EAAA,OAAAn3B,CAAAA,EAAA,KAAAi4B,QAAA,KAAAj4B,KAAA,IAAAA,EAAA,OAAAA,EAAAi8B,QAAA,CAAAznC,KAAAA,CACA,CACAyjC,UAAA,CACA,IAAoBd,SAAAA,CAAA,EAAW,KAAAtrB,OAAA,CAC/B,GAAAsrB,EACA,YAAAzD,IAAA,CAAA+M,WAAA,CAAAzsC,GAAA,CAAAmjC,EACA,CACAU,QAAA,CAAkBuH,WAAAA,CAAA,CAAA7oC,WAAAA,CAAA,CAAA+lC,sBAAAA,CAAA,EAAiD,EAAI,EACvE,IAAAtE,EAAA,KAAAC,QAAA,GACAD,GACAA,EAAAH,OAAA,MAAAyE,GACA8C,IACA,KAAA5F,eAAA,CAAAhlC,KAAAA,EACA,KAAA4qC,UAAA,KAEA7oC,GACA,KAAAkhC,UAAA,EAAkClhC,WAAAA,CAAA,EAClC,CACAuhC,UAAA,CACA,IAAAE,EAAA,KAAAC,QAAA,SACA,EAAAD,GACAA,EAAAF,QAAA,MAKA,CACA2K,sBAAA,CACA,IAAoB/uC,cAAAA,CAAA,EAAgB,KAAAmY,OAAA,CACpC,IAAAnY,EACA,OAEA,IAAA40C,EAAA,GAKA,CAAoB9kB,aAAAA,CAAA,EAAe9vB,EAWnC,GAVA8vB,CAAAA,EAAAjc,CAAA,EACAic,EAAA7c,MAAA,EACA6c,EAAA5c,OAAA,EACA4c,EAAA3c,OAAA,EACA2c,EAAA1c,OAAA,EACA0c,EAAArc,KAAA,EACAqc,EAAApc,KAAA,GACAkhC,CAAAA,EAAA,IAGA,CAAAA,EACA,OACA,IAAAC,EAAA,EACA/kB,CAAAA,EAAAjc,CAAA,EACA42B,GAAA,IAAAzqC,EAAA60C,EAAA,KAAA5L,eAAA,EAGA,QAAAppC,EAAA,EAA4BA,EAAAwqC,GAAAzqC,MAAA,CAA0BC,IACtD4qC,GAAA,SAAkDJ,EAAA,CAAAxqC,EAAA,CAAiB,EAAAG,EAAA60C,EAAA,KAAA5L,eAAA,EACnEwB,GAAA,OAAgDJ,EAAA,CAAAxqC,EAAA,CAAiB,EAAAG,EAAA60C,EAAA,KAAA5L,eAAA,EAMjE,QAAA5oC,KAFAL,EAAAmG,MAAA,GAEA0uC,EACA70C,EAAA2qC,cAAA,CAAAtqC,EAAAw0C,CAAA,CAAAx0C,EAAA,EACA,KAAA4oC,eAAA,EACA,MAAAA,eAAA,CAAA5oC,EAAA,CAAAw0C,CAAA,CAAAx0C,EAAA,EAKAL,EAAAsoC,cAAA,EACA,CACAwM,oBAAAC,CAAA,EACA,IAAAzoC,EAAAyE,EACA,SAAAsrB,QAAA,OAAAoP,KAAA,CACA,OACA,SAAAoB,SAAA,CACA,OAAAvC,GAEA,IAAA0K,EAAA,CACAzK,WAAA,EACA,EACAvJ,EAAA,KAAAgO,oBAAA,GACA,QAAAtD,UAAA,CAQA,OAPA,KAAAA,UAAA,IACAsJ,EAAAhhC,OAAA,IACAghC,EAAAC,aAAA,CACoBpL,GAAkBkL,MAAAA,EAAA,OAAAA,EAAAE,aAAA,MACtCD,EAAAjtC,SAAA,CAAAi5B,EACAA,EAAA,KAAAlR,YAAA,KACA,OACAklB,EAEA,IAAAxM,EAAA,KAAAkJ,OAAA,GACA,SAAA5L,eAAA,QAAA3L,MAAA,GAAAqO,EAAAvmC,MAAA,EACA,IAAAizC,EAAA,GAeA,OAdA,KAAA/8B,OAAA,CAAAsrB,QAAA,GACAyR,EAAAlhC,OAAA,CACA,KAAAlT,IAAA,KAAAgvB,YAAA,CAAA9b,OAAA,CACA,KAAA8b,YAAA,CAAA9b,OAAA,CACA,EACAkhC,EAAAD,aAAA,CACwBpL,GAAkBkL,MAAAA,EAAA,OAAAA,EAAAE,aAAA,OAE1C,KAAArI,YAAA,GAA0CrR,GAAY,KAAAzL,YAAA,IACtDolB,EAAAntC,SAAA,CAAAi5B,EACAA,EAAA,GAA8C,IAC9C,OACA,KAAA4L,YAAA,KAEAsI,CACA,CACA,IAAAC,EAAA3M,EAAAS,eAAA,EAAAT,EAAA1Y,YAAA,CACA,KAAAqkB,uBAAA,GACAa,EAAAjtC,SAAA,CAA+BqtC,SPrwC/BjxC,CAAA,CAAA0hC,CAAA,CAAAwP,CAAA,EACA,IAAAttC,EAAA,GAOAutC,EAAAnxC,EAAA8F,CAAA,CAAA4vB,SAAA,CAAAgM,EAAA57B,CAAA,CACAsrC,EAAApxC,EAAAkG,CAAA,CAAAwvB,SAAA,CAAAgM,EAAAx7B,CAAA,CACAmrC,EAAA,CAAAH,MAAAA,EAAA,OAAAA,EAAAxhC,CAAA,KAWA,GAVAyhC,CAAAA,GAAAC,GAAAC,CAAA,GACAztC,CAAAA,EAAA,eAAmCutC,EAAW,MAAMC,EAAW,MAAMC,EAAW,OAMhF3P,CAAAA,IAAAA,EAAA57B,CAAA,EAAA47B,IAAAA,EAAAx7B,CAAA,GACAtC,CAAAA,GAAA,SAA8B,EAAA89B,EAAA57B,CAAA,CAAgB,IAAI,EAAA47B,EAAAx7B,CAAA,CAAgB,KAElEgrC,EAAA,CACA,IAAgBthC,qBAAAA,CAAA,CAAAd,OAAAA,CAAA,CAAAC,QAAAA,CAAA,CAAAC,QAAAA,CAAA,CAAAM,MAAAA,CAAA,CAAAC,MAAAA,CAAA,EAA+D2hC,EAC/EthC,GACAhM,CAAAA,EAAA,eAAuCgM,EAAqB,MAAMhM,EAAU,GAC5EkL,GACAlL,CAAAA,GAAA,UAAmCkL,EAAO,QAC1CC,GACAnL,CAAAA,GAAA,WAAoCmL,EAAQ,QAC5CC,GACApL,CAAAA,GAAA,WAAoCoL,EAAQ,QAC5CM,GACA1L,CAAAA,GAAA,SAAkC0L,EAAM,QACxCC,GACA3L,CAAAA,GAAA,SAAkC2L,EAAM,OACxC,CAKA,IAAA+hC,EAAAtxC,EAAA8F,CAAA,CAAAhC,KAAA,CAAA49B,EAAA57B,CAAA,CACAyrC,EAAAvxC,EAAAkG,CAAA,CAAApC,KAAA,CAAA49B,EAAAx7B,CAAA,CAIA,MAHAorC,CAAAA,IAAAA,GAAAC,IAAAA,CAAA,GACA3tC,CAAAA,GAAA,SAA8B0tC,EAAc,IAAIC,EAAc,IAE9D3tC,GAAA,MACA,EOutCuD,KAAA8qC,4BAAA,MAAAhN,SAAA,CAAAsP,GACvDnU,GACAgU,CAAAA,EAAAjtC,SAAA,CAAAi5B,EAAAmU,EAAAH,EAAAjtC,SAAA,GAEA,IAAoBkC,EAAAA,CAAA,CAAAI,EAAAA,CAAA,EAAO,KAAAy7B,eAAA,CA+B3B,QAAAzlC,KA9BA20C,EAAAW,eAAA,IAAwC1rC,IAAAA,EAAAwM,MAAA,CAAe,IAAIpM,IAAAA,EAAAoM,MAAA,CAAe,KAC1E+xB,EAAAS,eAAA,CAKA+L,EAAAhhC,OAAA,CACAw0B,IAAA,KACA,OAAAz3B,CAAAA,EAAA,OAAAzE,CAAAA,EAAA6oC,EAAAnhC,OAAA,GAAA1H,KAAA,IAAAA,EAAAA,EAAA,KAAAwjB,YAAA,CAAA9b,OAAA,GAAAjD,KAAA,IAAAA,EAAAA,EAAA,EACA,KAAAg4B,eAAA,CACA,KAAAjZ,YAAA,CAAA9b,OAAA,CACAmhC,EAAAvB,WAAA,CAOAoB,EAAAhhC,OAAA,CACAw0B,IAAA,KACA2M,KAAAr0C,IAAAq0C,EAAAnhC,OAAA,CACAmhC,EAAAnhC,OAAA,CACA,GACAmhC,KAAAr0C,IAAAq0C,EAAAvB,WAAA,CACAuB,EAAAvB,WAAA,CACA,EAK8B3Q,GAAe,CAC7C,GAAAkS,KAAAr0C,IAAAq0C,CAAA,CAAA90C,EAAA,CACA,SACA,IAAwB2iC,QAAAA,CAAA,CAAA2C,QAAAA,CAAA,EAAqB1C,EAAe,CAAA5iC,EAAA,CAO5Du1C,EAAAZ,SAAAA,EAAAjtC,SAAA,CACAotC,CAAA,CAAA90C,EAAA,CACA2iC,EAAAmS,CAAA,CAAA90C,EAAA,CAAAmoC,GACA,GAAA7C,EAAA,CACA,IAAAkQ,EAAAlQ,EAAA/lC,MAAA,CACA,QAAAC,EAAA,EAAoCA,EAAAg2C,EAASh2C,IAC7Cm1C,CAAA,CAAArP,CAAA,CAAA9lC,EAAA,EAAA+1C,CAEA,MAEAZ,CAAA,CAAA30C,EAAA,CAAAu1C,CAEA,CAYA,OANA,KAAAz9B,OAAA,CAAAsrB,QAAA,EACAuR,CAAAA,EAAAC,aAAA,CACAzM,IAAA,KAC0BqB,GAAkBkL,MAAAA,EAAA,OAAAA,EAAAE,aAAA,MAC5C,QAEAD,CACA,CACApF,eAAA,CACA,KAAA9G,UAAA,MAAAE,QAAA,CAAAloC,KAAAA,CACA,CAEAg1C,WAAA,CACA,KAAA9V,IAAA,CAAAqM,KAAA,CAAAlsC,OAAA,KAAgD,IAAAmM,EAAQ,cAAAA,CAAAA,EAAAgmB,EAAAoS,gBAAA,GAAAp4B,KAAA,IAAAA,EAAA,OAAAA,EAAAmY,IAAA,KACxD,KAAAub,IAAA,CAAAqM,KAAA,CAAAlsC,OAAA,CAAAqvC,IACA,KAAAxP,IAAA,CAAA+M,WAAA,CAAAjnC,KAAA,EACA,CACA,CACA,CACA,SAAAo7B,GAAA5O,CAAA,EACAA,EAAA4O,YAAA,EACA,CACA,SAAAyO,GAAArd,CAAA,EACA,IAAAhmB,EACA,IAAA08B,EAAA,QAAA18B,CAAAA,EAAAgmB,EAAAwW,UAAA,GAAAx8B,KAAA,IAAAA,EAAA,OAAAA,EAAA08B,QAAA,GAAA1W,EAAA0W,QAAA,CACA,GAAA1W,EAAAqS,MAAA,IACArS,EAAA6H,MAAA,EACA6O,GACA1W,EAAA8a,YAAA,eACA,IAAgBlP,UAAA/D,CAAA,CAAA2W,YAAAiF,CAAA,EAAiDzjB,EAAA6H,MAAA,CACjE,CAAgBka,cAAAA,CAAA,EAAgB/hB,EAAAna,OAAA,CAChCw5B,EAAA3I,EAAAt4B,MAAA,GAAA4hB,EAAA6H,MAAA,CAAAzpB,MAAA,CAGA,SAAA2jC,EACYlZ,GAAQ,IACpB,IAAA6a,EAAArE,EACA3I,EAAA8H,WAAA,CAAApX,EAAA,CACAsP,EAAA9K,SAAA,CAAAxE,EAAA,CACA95B,EAA+B65B,GAAUuc,EACzCA,CAAAA,EAAAxvC,GAAA,CAAA2zB,CAAA,CAAAT,EAAA,CAAAlzB,GAAA,CACAwvC,EAAAzvC,GAAA,CAAAyvC,EAAAxvC,GAAA,CAAA5G,CACA,GAEAw0C,GAAAC,EAAArL,EAAA9K,SAAA,CAAA/D,IACYgB,GAAQ,IACpB,IAAA6a,EAAArE,EACA3I,EAAA8H,WAAA,CAAApX,EAAA,CACAsP,EAAA9K,SAAA,CAAAxE,EAAA,CACA95B,EAA+B65B,GAAUU,CAAA,CAAAT,EAAA,CACzCsc,CAAAA,EAAAzvC,GAAA,CAAAyvC,EAAAxvC,GAAA,CAAA5G,EAIA0yB,EAAA0b,cAAA,GAAA1b,EAAAoS,gBAAA,GACApS,EAAA8Y,iBAAA,IACA9Y,EAAA0b,cAAA,CAAAtU,EAAA,CAAAnzB,GAAA,CACA+rB,EAAA0b,cAAA,CAAAtU,EAAA,CAAAlzB,GAAA,CAAA5G,EAEA,GAEA,IAAAq2C,EAA4Bjb,KACpBlB,GAAYmc,EAAA9b,EAAA6O,EAAA9K,SAAA,EACpB,IAAAgY,EAA4Blb,KAC5B2W,EACY7X,GAAYoc,EAAA5jB,EAAA2e,cAAA,CAAA8E,EAAA,IAAA/M,EAAA8H,WAAA,EAGZhX,GAAYoc,EAAA/b,EAAA6O,EAAA9K,SAAA,EAExB,IAAAwD,EAAA,CAAkCqG,GAAWkO,GAC7CpI,EAAA,GACA,IAAAvb,EAAAwW,UAAA,EACA,IAAA0I,EAAAlf,EAAAuf,0BAAA,GAKA,GAAAL,GAAA,CAAAA,EAAA1I,UAAA,EACA,IAAwBE,SAAAmN,CAAA,CAAAhc,OAAAic,CAAA,EAAiD5E,EACzE,GAAA2E,GAAAC,EAAA,CACA,IAAAC,EAA6Cnb,KACzBd,GAAoBic,EAAArN,EAAA9K,SAAA,CAAAiY,EAAAjY,SAAA,EACxC,IAAA+U,EAA2C/X,KACvBd,GAAoB6Y,EAAA9Y,EAAAic,EAAAlY,SAAA,EACfgK,GAAgBmO,EAAApD,IACzCpF,CAAAA,EAAA,IAEA2D,EAAAr5B,OAAA,CAAAq2B,UAAA,GACAlc,EAAA0b,cAAA,CAAAiF,EACA3gB,EAAAwf,oBAAA,CAAAuE,EACA/jB,EAAAkf,cAAA,CAAAA,EAEA,CACA,CACA,CACAlf,EAAA2a,eAAA,cACA9S,OAAAA,EACA6O,SAAAA,EACA7kC,MAAA+xC,EACAD,YAAAA,EACAvU,iBAAAA,EACAmM,yBAAAA,CACA,EACA,MACA,GAAAvb,EAAAqS,MAAA,IACA,IAAgBnP,eAAAA,CAAA,EAAiBlD,EAAAna,OAAA,CACjCqd,GAAAA,GACA,CAMAlD,EAAAna,OAAA,CAAAtV,UAAA,CAAA/B,KAAAA,CACA,CACA,SAAAwrC,GAAAha,CAAA,EAIA6X,IACAJ,GAAAC,UAAA,GAEA1X,EAAA2H,MAAA,GAQA3H,EAAA0f,YAAA,IACA1f,CAAAA,EAAA8Y,iBAAA,CAAA9Y,EAAA2H,MAAA,CAAAmR,iBAAA,EAOA9Y,EAAA+Y,uBAAA,EAAA/Y,CAAAA,EAAA+Y,uBAAA,CAAAt9B,CAAAA,CAAAukB,CAAAA,EAAA8Y,iBAAA,EACA9Y,EAAA2H,MAAA,CAAAmR,iBAAA,EACA9Y,EAAA2H,MAAA,CAAAoR,uBAAA,GACA/Y,EAAAgZ,gBAAA,EAAAhZ,CAAAA,EAAAgZ,gBAAA,CAAAhZ,EAAA2H,MAAA,CAAAqR,gBAAA,EACA,CACA,SAAAmB,GAAAna,CAAA,EACAA,EAAA8Y,iBAAA,CACA9Y,EAAA+Y,uBAAA,CACA/Y,EAAAgZ,gBAAA,CACA,EACA,CACA,SAAAsE,GAAAtd,CAAA,EACAA,EAAAsd,aAAA,EACA,CACA,SAAAJ,GAAAld,CAAA,EACAA,EAAAkd,iBAAA,EACA,CACA,SAAAC,GAAAnd,CAAA,EACAA,EAAA6W,aAAA,GACA,CACA,SAAAuG,GAAApd,CAAA,EACA,IAAYtyB,cAAAA,CAAA,EAAgBsyB,EAAAna,OAAA,CAC5BnY,GAAAA,EAAAiB,QAAA,GAAAq1C,qBAAA,EACAt2C,EAAA+rB,MAAA,wBAEAuG,EAAA2Y,cAAA,EACA,CACA,SAAA0C,GAAArb,CAAA,EACAA,EAAAqb,eAAA,GACArb,EAAAgf,WAAA,CAAAhf,EAAA0b,cAAA,CAAA1b,EAAArwB,MAAA,CAAAnB,KAAAA,EACAwxB,EAAA8Y,iBAAA,GACA,CACA,SAAAmB,GAAAja,CAAA,EACAA,EAAAia,kBAAA,EACA,CACA,SAAAC,GAAAla,CAAA,EACAA,EAAAka,cAAA,EACA,CACA,SAAAuC,GAAAzc,CAAA,EACAA,EAAAyc,oBAAA,EACA,CACA,SAAAc,GAAAvL,CAAA,EACAA,EAAAkF,kBAAA,EACA,CACA,SAAAgK,GAAA5iC,CAAA,CAAAzM,CAAA,CAAAtF,CAAA,EACA+R,EAAAipB,SAAA,CAAuBhZ,GAAS1c,EAAA01B,SAAA,GAAAh7B,GAChC+R,EAAA3I,KAAA,CAAmB4Y,GAAS1c,EAAA8D,KAAA,GAAApJ,GAC5B+R,EAAA6F,MAAA,CAAAtS,EAAAsS,MAAA,CACA7F,EAAAgpB,WAAA,CAAAz1B,EAAAy1B,WAAA,CAEA,SAAA6Z,GAAA7iC,CAAA,CAAArF,CAAA,CAAAoV,CAAA,CAAA9hB,CAAA,EACA+R,EAAApK,GAAA,CAAiBqa,GAAStV,EAAA/E,GAAA,CAAAma,EAAAna,GAAA,CAAA3H,GAC1B+R,EAAArK,GAAA,CAAiBsa,GAAStV,EAAAhF,GAAA,CAAAoa,EAAApa,GAAA,CAAA1H,EAC1B,CAKA,SAAAy0C,GAAAhhB,CAAA,EACA,OAAAA,EAAA2W,eAAA,EAAA3W,KAAAxxB,IAAAwxB,EAAA2W,eAAA,CAAA2K,WAAA,CAEA,IAAA1F,GAAA,CACA7rC,SAAA,IACAC,KAAA,aAEAi0C,GAAA,uBAAAC,WACAA,UAAAC,SAAA,EACAD,UAAAC,SAAA,CAAAloB,WAAA,GAAAmoB,QAAA,CAAAC,GAMAC,GAAAL,GAAA,kBAAAA,GAAA,WACAr0C,KAAAkG,KAAA,CACMvB,EAAAC,CAAI,CACV,SAAA+pC,GAAAnX,CAAA,EAEAA,EAAAlzB,GAAA,CAAAowC,GAAAld,EAAAlzB,GAAA,EACAkzB,EAAAnzB,GAAA,CAAAqwC,GAAAld,EAAAnzB,GAAA,CACA,CAKA,SAAA6tC,GAAAC,CAAA,CAAArL,CAAA,CAAA7O,CAAA,EACA,MAAAka,aAAAA,GACAA,oBAAAA,IhC1hDAnyC,CAAAA,IAAAA,KAAAka,GAAA,CAAAhc,GgC2hD+B4oC,GAAYb,GAAWhO,GhC3hDtD,CgC4hDA,CACA,SAAA4W,GAAAze,CAAA,EACA,IAAAhmB,EACA,OAAAgmB,IAAAA,EAAA0N,IAAA,UAAA1zB,CAAAA,EAAAgmB,EAAAyN,MAAA,GAAAzzB,KAAA,IAAAA,EAAA,OAAAA,EAAA+jC,OAAA,CACA,CCziDA,IAAAwG,GAA+BjM,GAAoB,CACnDC,qBAAA,CAAArR,EAAAzN,IAA2CuK,GAAWkD,EAAA,SAAAzN,GACtDgf,cAAA,MACA9gC,EAAA6sC,SAAAC,eAAA,CAAAC,UAAA,EAAAF,SAAAG,IAAA,CAAAD,UAAA,CACA3sC,EAAAysC,SAAAC,eAAA,CAAAG,SAAA,EAAAJ,SAAAG,IAAA,CAAAC,SAAA,CACA,EACAlM,kBAAA,MACA,GCPAnL,GAAA,CACAj/B,QAAAE,KAAAA,CACA,EACAq2C,GAA2BvM,GAAoB,CAC/CG,cAAA,KACA9gC,EAAAoyB,EAAA2a,UAAA,CACA3sC,EAAAgyB,EAAA6a,SAAA,CACA,EACApM,cAAA,KACA,IAAAjL,GAAAj/B,OAAA,EACA,IAAAw2C,EAAA,IAAqCP,GAAsB,IAC3DO,EAAAniB,KAAA,CAAAxoB,QACA2qC,EAAArT,UAAA,EAAsCoM,aAAA,KACtCtQ,GAAAj/B,OAAA,CAAAw2C,CACA,CACA,OAAAvX,GAAAj/B,OAAA,EAEAqqC,eAAA,CAAA5O,EAAAj8B,KACAi8B,EAAAhN,KAAA,CAAAtnB,SAAA,CAAA3H,KAAAU,IAAAV,EAAAA,EAAA,MACA,EACA4qC,kBAAA,GAAAv+B,UAAAA,OAAA4J,gBAAA,CAAAgmB,GAAAgb,QAAA,GEjBA,SAAAC,GAAAhlB,CAAA,CAAAV,CAAA,EACA,IACA2lB,EAAA3lB,EAAA,4BAaA,OAAW8E,GAAepE,EAAA1xB,OAAA,CAd1BgxB,EAAA,8BAEA,CAAAkE,EAAAqB,KACA,GAAArB,UAAAA,EAAAC,WAAA,EAA6CsD,KAC7C,OACA,IAAA54B,EAAA6xB,EAAArxB,QAAA,EACAqxB,CAAAA,EAAA1C,cAAA,EAAAnvB,EAAAuxB,UAAA,EACAM,EAAA1C,cAAA,CAAA8E,SAAA,cAAA9C,GAEA,IAAA1sB,EAAAzE,CAAA,CAAA82C,EAAA,CACAryC,GACYwB,EAAKN,UAAA,KAAAlB,EAAA4wB,EAAAqB,GAEjB,EAC0B,CAC1BZ,QAAA,CAAAjE,EAAArxB,QAAA,GAAAs2C,EAAA,EAEA,CACA,MAAAC,WAA2BnlB,GAC3B4C,OAAA,CACA,KAAAG,OAAA,CAAuB5U,GAAI82B,GAAA,KAAAhlB,IAAA,KAAAglB,GAAA,KAAAhlB,IAAA,KAC3B,CACA8C,SAAA,EACA,CC1BA,MAAAqiB,WAA2BplB,GAC3BtlB,aAAA,CACA,SAAA4hB,WACA,KAAAiD,QAAA,GACA,CACA8lB,SAAA,CACA,IAAAC,EAAA,GAOA,IACAA,EAAA,KAAArlB,IAAA,CAAA1xB,OAAA,CAAAg3C,OAAA,kBACA,CACA,MAAAj8B,EAAA,CACAg8B,EAAA,EACA,CACAA,GAAA,KAAArlB,IAAA,CAAA1C,cAAA,GAEA,KAAA0C,IAAA,CAAA1C,cAAA,CAAA8E,SAAA,kBACA,KAAA9C,QAAA,IACA,CACAimB,QAAA,CACA,KAAAjmB,QAAA,OAAAU,IAAA,CAAA1C,cAAA,GAEA,KAAA0C,IAAA,CAAA1C,cAAA,CAAA8E,SAAA,kBACA,KAAA9C,QAAA,IACA,CACAqD,OAAA,CACA,KAAAG,OAAA,CAAuB5U,GAAK8V,GAAW,KAAAhE,IAAA,CAAA1xB,OAAA,kBAAA82C,OAAA,IAAoDphB,GAAW,KAAAhE,IAAA,CAAA1xB,OAAA,iBAAAi3C,MAAA,IACtG,CACAziB,SAAA,EACA,CC/BA,IAAA0iB,GAAA,CAAA7d,EAAA5I,IACA,EAAAA,IAGA4I,IAAA5I,GAIAymB,GAAA7d,EAAA5I,EAAA0mB,aAAA,GCLA,SAAAC,GAAA9qC,CAAA,CAAA4e,CAAA,EACA,IAAAA,EACA,OACA,IAAAmsB,EAAA,IAAAC,aAAA,UAAAhrC,GACA4e,EAAAmsB,EAAmC/hB,GAAgB+hB,GACnD,CACA,MAAAE,WAA2B9lB,GAC3BtlB,aAAA,CACA,SAAA4hB,WACA,KAAAypB,oBAAA,CAAoCvxC,EAAAC,CAAI,CACxC,KAAAuxC,kBAAA,CAAkCxxC,EAAAC,CAAI,CACtC,KAAAwxC,yBAAA,CAAyCzxC,EAAAC,CAAI,CAC7C,KAAAyxC,iBAAA,EAAAxhB,EAAAyhB,KACA,QAAAC,UAAA,CACA,OACA,KAAAJ,kBAAA,GACA,IAAA53C,EAAA,KAAA6xB,IAAA,CAAArxB,QAAA,GAiBAy3C,EAA4ChiB,GAAejqB,OAAA,YAhB3D,CAAAksC,EAAAC,KACA,SAAAC,aAAA,GACA,OACA,IAAwBC,MAAAA,CAAA,CAAAC,YAAAA,CAAA,CAAAC,gBAAAA,CAAA,EAAsC,KAAA1mB,IAAA,CAAArxB,QAAA,GAK9D6qB,EAAA,GACqBgsB,GAAa,KAAAxlB,IAAA,CAAA1xB,OAAA,CAAA+3C,EAAA12C,MAAA,EAElC62C,EADAC,EAEAjtB,GACoBplB,EAAKT,MAAA,KAAA6lB,EAAA6sB,EAAAC,GAEzB,EAC2D,CAC3DriB,QAAA,CAAA91B,CAAAA,EAAAq4C,KAAA,EAAAr4C,EAAA,YACA,GACAw4C,EAAgDviB,GAAejqB,OAAA,iBAAAysC,EAAAC,IAAA,KAAAC,WAAA,CAAAF,EAAAC,GAAA,CAC/D5iB,QAAA,CAAA91B,CAAAA,EAAAs4C,WAAA,EACAt4C,EAAA,gBACA,EACA,MAAA43C,kBAAA,CAAsC73B,GAAIk4B,EAAAO,GAC1C,KAAAI,UAAA,CAAAtiB,EAAAyhB,EACA,EACA,KAAAc,oBAAA,MAoBA,IAAAC,EAA0CjjB,GAAW,KAAAhE,IAAA,CAAA1xB,OAAA,WAnBrD,IACA,UAAA44C,EAAAn5C,GAAA,OAAAo4C,UAAA,GAYA,KAAAJ,kBAAA,GACA,KAAAA,kBAAA,CAA0C/hB,GAAW,KAAAhE,IAAA,CAAA1xB,OAAA,SAXrD,IACA,UAAA64C,EAAAp5C,GAAA,OAAAw4C,aAAA,IAEAb,GAAA,MAAAliB,EAAAqB,KACA,IAAgC2hB,MAAAA,CAAA,EAAQ,KAAAxmB,IAAA,CAAArxB,QAAA,GACxC63C,GAC4BpyC,EAAKN,UAAA,KAAA0yC,EAAAhjB,EAAAqB,GAEjC,EACA,GAGA6gB,GAAA,QAAAliB,EAAAqB,KACA,KAAAkiB,UAAA,CAAAvjB,EAAAqB,EACA,GACA,GAOAuiB,EAAuCpjB,GAAW,KAAAhE,IAAA,CAAA1xB,OAAA,QALlD,KACA,KAAA63C,UAAA,EAEAT,GAAA,UAAAkB,EAAAC,IAAA,KAAAC,WAAA,CAAAF,EAAAC,GACA,EAEA,MAAAb,yBAAA,CAA6C93B,GAAI+4B,EAAAG,EACjD,CACA,CACAL,WAAAvjB,CAAA,CAAAqB,CAAA,EACA,KAAAshB,UAAA,IACA,IAAgBkB,WAAAA,CAAA,CAAA1nB,SAAAA,CAAA,EAAuB,KAAAK,IAAA,CAAArxB,QAAA,GAIvCgxB,GAAA,KAAAK,IAAA,CAAA1C,cAAA,EACA,KAAA0C,IAAA,CAAA1C,cAAA,CAAA8E,SAAA,gBAEAilB,GACYjzC,EAAKN,UAAA,KAAAuzC,EAAA7jB,EAAAqB,GAEjB,CACA0hB,eAAA,CAOA,OANA,KAAAR,kBAAA,GACA,KAAAI,UAAA,IAEAh4C,IADA,CAAA6xB,IAAA,CAAArxB,QAAA,GACAgxB,QAAA,OAAAK,IAAA,CAAA1C,cAAA,EACA,KAAA0C,IAAA,CAAA1C,cAAA,CAAA8E,SAAA,gBAEA,CAAgB2E,IAChB,CACA+f,YAAAtjB,CAAA,CAAAqB,CAAA,EACA,SAAA0hB,aAAA,GACA,OACA,IAAgBE,YAAAA,CAAA,EAAc,KAAAzmB,IAAA,CAAArxB,QAAA,GAC9B83C,GACYryC,EAAKN,UAAA,KAAA2yC,EAAAjjB,EAAAqB,GAEjB,CACAlC,OAAA,CACA,IAAAx0B,EAAA,KAAA6xB,IAAA,CAAArxB,QAAA,GACA24C,EAAsCljB,GAAej2B,EAAAu4C,eAAA,CAAAvsC,OAAA,KAAA6lB,IAAA,CAAA1xB,OAAA,oBAAA23C,iBAAA,EACrDhiB,QAAA,CAAA91B,CAAAA,EAAAk5C,UAAA,EACAl5C,EAAA,eACA,GACAo5C,EAAoCvjB,GAAW,KAAAhE,IAAA,CAAA1xB,OAAA,cAAA04C,oBAAA,CAC/C,MAAAlB,oBAAA,CAAoC53B,GAAIo5B,EAAAC,EACxC,CACAzkB,SAAA,CACA,KAAAgjB,oBAAA,GACA,KAAAC,kBAAA,GACA,KAAAC,yBAAA,EACA,CACA,CC1HA,IAAAwB,GAAA,IAAAhd,QAMAid,GAAA,IAAAjd,QACAkd,GAAA,IACA,IAAA90C,EAAA40C,GAAAx5C,GAAA,CAAA25C,EAAAh4C,MAAA,CACAiD,CAAAA,GAAAA,EAAA+0C,EACA,EACAC,GAAA,IACAC,EAAAh6C,OAAA,CAAA65C,GACA,ECfAI,GAAA,CACA1/B,KAAA,EACAkP,IAAA,CACA,CACA,OAAAywB,WAA4BhoB,GAC5BtlB,aAAA,CACA,SAAA4hB,WACA,KAAA2rB,cAAA,IACA,KAAAC,QAAA,GACA,CACAC,eAAA,CACA,KAAAplB,OAAA,GACA,IAAgBqlB,SAAAA,EAAA,IAAgB,KAAAnoB,IAAA,CAAArxB,QAAA,GAChC,CAAgB++B,KAAAA,CAAA,CAAAptB,OAAA8nC,CAAA,CAAAC,OAAAA,EAAA,OAAAC,KAAAA,CAAA,EAAkDH,EAClEtiC,EAAA,CACA6nB,KAAAA,EAAAA,EAAAp/B,OAAA,CAAAE,KAAAA,EACA45C,WAAAA,EACAG,UAAA,iBAAAF,EAAAA,EAAAP,EAAA,CAAAO,EAAA,EA+BA,OAAeG,SDbflvC,CAAA,CAAAuM,CAAA,CAAAjT,CAAA,EACA,IAAA61C,EAAAC,SApBA,CAAoChb,KAAAA,CAAA,IAAA7nB,EAAkB,EACtD,IAAA8iC,EAAAjb,GAAA8W,SAIAiD,GAAAr3C,GAAA,CAAAu4C,IACAlB,GAAA5tC,GAAA,CAAA8uC,EAAA,IAEA,IAAAC,EAAAnB,GAAAz5C,GAAA,CAAA26C,GACA56C,EAAA86C,KAAAC,SAAA,CAAAjjC,GAQA,OAHA+iC,CAAA,CAAA76C,EAAA,EACA66C,CAAAA,CAAA,CAAA76C,EAAA,KAAAg7C,qBAAAnB,GAAA,CAAkFla,KAAAA,EAAA,GAAA7nB,CAAA,EAAkB,EAEpG+iC,CAAA,CAAA76C,EAAA,EAGA8X,GAGA,OAFA2hC,GAAA3tC,GAAA,CAAAP,EAAA1G,GACA61C,EAAAO,OAAA,CAAA1vC,GACA,KACAkuC,GAAAn0C,MAAA,CAAAiG,GACAmvC,EAAAQ,SAAA,CAAA3vC,EACA,CACA,ECKkC,KAAA0mB,IAAA,CAAA1xB,OAAA,CAAAuX,EA7BlC,IACA,IAAoBqjC,eAAAA,CAAA,EAAiBvB,EAIrC,QAAAM,QAAA,GAAAiB,IAEA,KAAAjB,QAAA,CAAAiB,EAKAZ,GAAA,CAAAY,GAAA,KAAAlB,cAAA,EANA,OASAkB,GACA,MAAAlB,cAAA,KAEA,KAAAhoB,IAAA,CAAA1C,cAAA,EACA,KAAA0C,IAAA,CAAA1C,cAAA,CAAA8E,SAAA,eAAA8mB,GAMA,IAAoBC,gBAAAA,CAAA,CAAAC,gBAAAA,CAAA,EAAmC,KAAAppB,IAAA,CAAArxB,QAAA,GACvDiE,EAAAs2C,EAAAC,EAAAC,CACAx2C,CAAAA,GAAAA,EAAA+0C,EACA,EAEA,CACAhlB,OAAA,CACA,KAAAulB,aAAA,EACA,CACAv0C,QAAA,CACA,uBAAAo1C,qBACA,OACA,IAAgB56C,MAAAA,CAAA,CAAA00B,UAAAA,CAAA,EAAmB,KAAA7C,IAAA,CACnC,2BAAA5X,IAAA,CAAAihC,SAOA,CAAoClB,SAAAA,EAAA,GAAe,EAAIA,SAAAmB,EAAA,IAA8B,EAAI,EACzF,UAAAnB,CAAA,CAAAvtC,EAAA,GAAA0uC,CAAA,CAAA1uC,EAAA,EARAzM,EAAA00B,KAEA,KAAAqlB,aAAA,EAEA,CACAplB,SAAA,EACA,gBG/DA,IAAMymB,GAAgBn9C,CAAAA,EAAAA,GAAAA,aAAAA,EAAc,CAAC,mBCArC,IAAMo9C,GAAcp9C,CAAAA,EAAAA,GAAAA,aAAAA,EAAc,CAAEq9C,OAAQ,EAAM,GCQlDC,GAAA,GAiFA,SAAAC,KACAxvC,OAAAyvC,uBAAA,GACA,CE1FA,SAAAC,GAAA17C,CAAA,EACA,OAAYvB,EAAmBuB,EAAA+nB,OAAA,GACvBrnB,EAAYuZ,IAAA,IAAgB5a,EAAcW,CAAA,CAAAyM,EAAA,EAClD,CACA,SAAAkvC,GAAA37C,CAAA,EACA,MAAAsN,CAAAA,CAAAouC,CAAAA,GAAA17C,IAAAA,EAAAM,QAAA,CACA,CEFA,SAAAs7C,GAAA/oB,CAAA,EACA,OAAAh0B,MAAAC,OAAA,CAAA+zB,GAAAA,EAAA5hB,IAAA,MAAA4hB,CACA,CCVA,IAAAgpB,GAAA,CACAl0B,UAAA,CACA,UACA,WACA,aACA,WACA,OACA,cACA,aACA,YACA,CACAgK,KAAA,SACA8G,KAAA,wBACAqjB,MAAA,eACAC,MAAA,2CACAC,IAAA,gDACAC,IAAA,sDACAC,OAAA,oDACAxiB,OAAA,uBAEAyiB,GAAA,GACA,QAAAv8C,KAAAi8C,GACAM,EAAA,CAAAv8C,EAAA,EACAw8C,UAAA,GAAAP,EAAA,CAAAj8C,EAAA,CAAAqa,IAAA,MAAAja,CAAA,CAAAyM,EAAA,CACA,kBExBA,IAAA4vC,GAAAC,OAAAC,GAAA,0BEIAC,GAAA,CACA,UACA,SACA,OACA,OACA,UACA,IACA,QACA,OACA,SACA,SACA,OACA,WACA,OACA,UACA,UACA,WACA,OACA,OACA,SACA,SACA,MACA,OACA,QACA,MACA,OACA,CC5BA,SAAAC,GAAA7Z,CAAA,EACA,GAKA,iBAAAA,GAIAA,EAAAqT,QAAA,YAGA,GAIIuG,GAAoBvxB,OAAA,CAAA2X,GAAA,IAIxB,SAAAr8B,IAAA,CAAAq8B,GACA,SAEA,QACA,CC3BA,SAAA8Z,GAAAvxC,CAAA,EAA+ByjB,MAAAA,CAAA,CAAA+tB,KAAAA,CAAA,CAAa,CAAArI,CAAA,CAAAjX,CAAA,EAG5C,QAAAz9B,KAFA2N,OAAA01B,MAAA,CAAA93B,EAAAyjB,KAAA,CAAAA,EAAAyO,GAAAA,EAAAgX,mBAAA,CAAAC,IAEAqI,EACAxxC,EAAAyjB,KAAA,CAAAguB,WAAA,CAAAh9C,EAAA+8C,CAAA,CAAA/8C,EAAA,CAEA,CCHA,IAAAi9C,GAAA,IAAAh8C,IAAA,CACA,gBACA,kBACA,eACA,mBACA,aACA,WACA,oBACA,eACA,cACA,aACA,UACA,UACA,eACA,mBACA,mBACA,eACA,cACA,UACA,oBACA,aACA,cACA,aACA,eACA,ECvBA,SAAAi8C,GAAA3xC,CAAA,CAAA4xC,CAAA,CAAAC,CAAA,CAAA3f,CAAA,EAEA,QAAAz9B,KADI88C,GAAUvxC,EAAA4xC,EAAA18C,KAAAA,EAAAg9B,GACd0f,EAAAE,KAAA,CACA9xC,EAAA+xC,YAAA,IAAiDj7C,GAAA,CAAArC,GAAuBA,EAAXguB,GAAWhuB,GAAAm9C,EAAAE,KAAA,CAAAr9C,EAAA,CAExE,CCNA,SAAAu9C,GAAAv9C,CAAA,EAAoC85B,OAAAA,CAAA,CAAAsJ,SAAAA,CAAA,CAAkB,EACtD,OAAYpiC,EAAcqB,GAAA,CAAArC,IAC1BA,EAAAsC,UAAA,YACA,CAAAw3B,GAAAsJ,KAAA3iC,IAAA2iC,CAAA,GACA,GAAeR,EAAe,CAAA5iC,EAAA,EAAAA,YAAAA,CAAA,CAC9B,CCLA,SAAAw9C,GAAAp9C,CAAA,CAAA00B,CAAA,CAAAn1B,CAAA,EACA,IAAAsM,EACA,IAAY+iB,MAAAA,CAAA,EAAQ5uB,EACpBq9C,EAAA,GACA,QAAAz9C,KAAAgvB,EACYJ,CAAAA,GAAaI,CAAA,CAAAhvB,EAAA,GACzB80B,EAAA9F,KAAA,EACgBJ,GAAakG,EAAA9F,KAAA,CAAAhvB,EAAA,GACjBu9C,GAAmBv9C,EAAAI,IAC/B,QAAA6L,CAAAA,EAAAtM,MAAAA,EAAA,OAAAA,EAAAiM,QAAA,CAAA5L,EAAA,GAAAiM,KAAA,IAAAA,EAAA,OAAAA,EAAA6nB,SAAA,IAAArzB,KAAAA,CAAA,GACAg9C,CAAAA,CAAA,CAAAz9C,EAAA,CAAAgvB,CAAA,CAAAhvB,EAAA,EAUA,OAHAL,GAAAqvB,GAAA,iBAAAA,EAAAD,UAAA,EACApvB,CAAAA,EAAAmvB,eAAA,KAEA2uB,CACA,CCpBA,SAASC,GAA2Bt9C,CAAA,CAAA00B,CAAA,CAAAn1B,CAAA,EACpC,IAAA89C,EAAsBD,GAA6Bp9C,EAAA00B,EAAAn1B,GACnD,QAAAK,KAAAI,EACYwuB,CAAAA,GAAaxuB,CAAA,CAAAJ,EAAA,GACb4uB,GAAakG,CAAA,CAAA90B,EAAA,IAIzBy9C,CAAAA,CAAA,CAH8B18C,KAAAA,EAAkBsqB,OAAA,CAAArrB,GAChD,OAAAA,EAAA29C,MAAA,IAAAvd,WAAA,GAAApgC,EAAAgP,SAAA,IACAhP,EACA,CAAAI,CAAA,CAAAJ,EAAA,EAGA,OAAAy9C,CACA,iBCKA,IAAAG,GAAA,IAAAx9C,EAAA3B,KACA,IAAAk0B,EAAoB,GAAAmS,GAAAC,UAAA,EAAWyW,IAC/BlrB,EAA4B,GAAAwU,GAAAC,UAAA,EAAWC,GAAAC,CAAe,EACtD4Y,EAAA,IAAAC,CAbA,UAAqBhvB,gBAAAA,EAAA,GAAA0uB,4BAAAA,CAAA,CAAAO,kBAAAA,CAAA,CAAAC,QAAAA,CAAA,CAAmF,CAAA59C,CAAA,CAAAuyB,CAAA,CAAArC,CAAA,CAAA7xB,CAAA,EACxG,IAAAmB,EAAA,CACA6vB,aAAAwuB,SA8BA79C,CAAA,CAAAuyB,CAAA,CAAArC,CAAA,CAAA4tB,CAAA,CAAAC,CAAA,EACA,IAAAlyC,EACA,IAAApM,EAAA,GACAkvB,EAAA,GACAD,EAAAovB,GAAA,QAAAjyC,CAAAA,EAAA7L,EAAA4uB,KAAA,GAAA/iB,KAAA,IAAAA,EAAA,OAAAA,EAAA8iB,UAAA,IAAAtuB,KAAAA,EACA29C,EAAAD,EAAA/9C,EAAA,IACA,QAAAJ,KAAAo+C,EACAv+C,CAAA,CAAAG,EAAA,CAAsBwpC,GAAkB4U,CAAA,CAAAp+C,EAAA,EAExC,IAAUo0B,QAAAA,CAAA,CAAAjM,QAAAA,CAAA,EAAmB/nB,EAC7Bi+C,EAAoCvC,GAAqB17C,GACzDk+C,EAA4BvC,GAAa37C,GACzCuyB,GACA2rB,GACA,CAAAD,GACAj+C,CAAA,IAAAA,EAAAm+C,OAAA,GACA99C,KAAAA,IAAA2zB,GACAA,CAAAA,EAAAzB,EAAAyB,OAAA,EACA3zB,KAAAA,IAAA0nB,GACAA,CAAAA,EAAAwK,EAAAxK,OAAA,GAEA,IAAAq2B,EAAAluB,EAAAA,GACAA,CAAA,IAAAA,EAAA8D,OAAA,CAGAqqB,EAAAD,CADAA,EAAAA,GAAApqB,CAAA,IAAAA,CAAA,EACAjM,EAAAiM,EAuCA,OAtCAqqB,GACA,kBAAAA,GACA,CAAS5/C,EAAmB4/C,IAC5BC,GAAAt+C,EAAAq+C,EAAA,CAAA78C,EAAAytB,KACA,QAAArvB,KAAA4B,EAAA,CACA,IAAA8tB,EAAA9tB,CAAA,CAAA5B,EAAA,CACA,GAAAf,MAAAC,OAAA,CAAAwwB,GAAA,CAKA,IAAAtsB,EAAAo7C,EACA9uB,EAAAnwB,MAAA,GACA,EACAmwB,EAAAA,CAAA,CAAAtsB,EAAA,CAEA,OAAAssB,GACA7vB,CAAAA,CAAA,CAAAG,EAAA,CAAA0vB,CAAA,CAEA,CACA,QAAA1vB,KAAAqvB,EACAxvB,CAAA,CAAAG,EAAA,CAAAqvB,CAAA,CAAArvB,EAAA,GAKA8uB,IACA3G,GAAAiM,CAAA,IAAAA,GAAA,CAA6Cv1B,EAAmBspB,IAChEu2B,GAAAt+C,EAAA+nB,EAAA,IACA,QAAAnoB,KAAA4B,GACA+8C,SAxEA5vB,CAAA,CAAAliB,CAAA,EACA,IAAA+xC,EAAuBxwB,GAAiBvhB,GACxC+xC,GACQzzB,GAAa4D,EAAA6vB,EAErB,EAmEA7vB,EAAA/uB,EAEA,GAEA+uB,EAAAxvB,MAAA,EACAM,CAAAA,EAAAkvB,UAAA,CAAAA,EAAA1d,IAAA,QAGAxR,CACA,EA/FAO,EAAAuyB,EAAArC,EAAA7xB,CAAAA,GAAAqwB,EAAA0uB,GACAL,YAAAY,GACA,EAIA,OAHAC,GACAp+C,CAAAA,EAAAg1B,KAAA,IAAAopB,EAAA59C,EAAA47B,EAAAp8B,EAAA,EAEAA,CACA,GAIAu0C,EAAA/zC,EAAAuyB,EAAArC,EAAA7xB,GACA,OAAAA,EAAAo/C,IAA+B,GAAAgB,GAAAC,CAAA,EAAWjB,EAC1C,EAOA,SAAAa,GAAAt+C,CAAA,CAAAC,CAAA,CAAAwE,CAAA,EACA,IAAAk6C,EAAA9/C,MAAAC,OAAA,CAAAmB,GAAAA,EAAA,CAAAA,EAAA,CACA,QAAAb,EAAA,EAAoBA,EAAAu/C,EAAAx/C,MAAA,CAAiBC,IAAA,CACrC,IAAA8V,EAAyBnV,EAAuBC,EAAA2+C,CAAA,CAAAv/C,EAAA,EAChD,GAAA8V,EAAA,CACA,IAAoB+Z,cAAAA,CAAA,CAAA7sB,WAAAA,CAAA,IAAAZ,EAAA,CAAuC0T,EAC3DzQ,EAAAjD,EAAAytB,EACA,CACA,CACA,CC1CA,IAAA2vB,GAAA,MACAhwB,MAAA,GACAtnB,UAAA,GACA4tC,gBAAA,GACAyH,KAAA,EACA,GCHAkC,GAAA,MACA,GAAOD,IAAqB,CAC5B3B,MAAA,EACA,GCFA6B,GAAA,CAAAn/C,EAAAwB,IACAA,GAAA,iBAAAxB,EACAwB,EAAAmG,SAAA,CAAA3H,GACAA,ECFAo/C,GAAA,CACAv1C,EAAA,aACAI,EAAA,aACAwJ,EAAA,aACAE,qBAAA,aACA,EACA0rC,GAAsBr+C,EAAkBxB,MAAA,CCJxC,SAAA8/C,GAAAz/C,CAAA,CAAA6vB,CAAA,CAAAkR,CAAA,EACA,IAAY3R,MAAAA,CAAA,CAAA+tB,KAAAA,CAAA,CAAAzH,gBAAAA,CAAA,EAA+B11C,EAE3Cs7B,EAAA,GACAokB,EAAA,GAOA,QAAAt/C,KAAAyvB,EAAA,CACA,IAAA1vB,EAAA0vB,CAAA,CAAAzvB,EAAA,CACA,GAAYgB,EAAcqB,GAAA,CAAArC,GAAA,CAE1Bk7B,EAAA,GACA,QACA,CACA,GAAiBn0B,EAAiB/G,GAAA,CAClC+8C,CAAA,CAAA/8C,EAAA,CAAAD,EACA,QACA,CACA,CAEA,IAAAw/C,EAAgCL,GAAcn/C,EAAQwR,EAAgB,CAAAvR,EAAA,EACtEA,EAAAsC,UAAA,YAEAg9C,EAAA,GACAhK,CAAA,CAAAt1C,EAAA,CACAu/C,GAGAvwB,CAAA,CAAAhvB,EAAA,CAAAu/C,CAEA,CACA,CAiBA,GAhBA,CAAA9vB,EAAA/nB,SAAA,GACAwzB,GAAAyF,EACA3R,EAAAtnB,SAAA,CAA8B83C,SD3B9B/vB,CAAA,CAAA/nB,CAAA,CAAAi5B,CAAA,EAEA,IAAA8e,EAAA,GACAC,EAAA,GAKA,QAAAlgD,EAAA,EAAoBA,EAAA4/C,GAAmB5/C,IAAA,CACvC,IAAAQ,EAAoBe,CAAkB,CAAAvB,EAAA,CACtCO,EAAA0vB,CAAA,CAAAzvB,EAAA,CACA,GAAAD,KAAAU,IAAAV,EACA,SACA,IAAA4/C,EAAA,GAOA,KALAA,EADA,iBAAA5/C,EACAA,IAAAC,CAAAA,EAAAsC,UAAA,eAGAmF,IAAAA,WAAA1H,KAEA4gC,EAAA,CACA,IAAA4e,EAAgCL,GAAcn/C,EAAQwR,EAAgB,CAAAvR,EAAA,EACtE,IAAA2/C,EAAA,CACAD,EAAA,GACA,IAAAE,EAAAT,EAAA,CAAAn/C,EAAA,EAAAA,EACAy/C,GAAA,GAAsCG,EAAc,GAAGL,EAAY,IAEnE5e,GACAj5B,CAAAA,CAAA,CAAA1H,EAAA,CAAAu/C,CAAA,CAEA,CACA,CAUA,OATAE,EAAAA,EAAAr4C,IAAA,GAGAu5B,EACA8e,EAAA9e,EAAAj5B,EAAAg4C,EAAA,GAAAD,GAEAC,GACAD,CAAAA,EAAA,QAEAA,CACA,ECf4ChwB,EAAA7vB,EAAA8H,SAAA,CAAAi5B,GAE5C3R,EAAAtnB,SAAA,EAKAsnB,CAAAA,EAAAtnB,SAAA,UAOA43C,EAAA,CACA,IAAgB1rC,QAAAA,EAAA,MAAAC,QAAAA,EAAA,MAAAC,QAAAA,EAAA,GAAiDwhC,CACjEtmB,CAAAA,EAAAsmB,eAAA,IAAmC1hC,EAAA,CAAS,EAAEC,EAAA,CAAS,EAAEC,EAAQ,EAEjE,CC5DA,SAAS+rC,GAAUzpC,CAAA,CAAAsN,CAAA,CAAArR,CAAA,EACnB,uBAAA+D,EACAA,EACU3N,GAAEf,SAAA,CAAAgc,EAAArR,EAAA+D,EACZ,CCJA,IAAA0pC,GAAA,CACAp8B,OAAA,oBACAq8B,MAAA,kBACA,EACAC,GAAA,CACAt8B,OAAA,mBACAq8B,MAAA,iBACA,ECFA,SAAAE,GAAArgD,CAAA,EAAgCsgD,MAAAA,CAAA,CAAAC,MAAAA,CAAA,CAAAC,UAAAA,CAAA,CAAAxsC,QAAAA,CAAA,CAAAC,QAAAA,CAAA,CAAAwsC,WAAAA,CAAA,CAAAC,YAAAA,EAAA,EAAAC,WAAAA,EAAA,EAEhC,GAAA7iC,EAAW,CAAA8iC,CAAA,CAAA7f,CAAA,EAMX,GALI0e,GAAez/C,EAAA8d,EAAAijB,GAKnB6f,EAAA,CACA5gD,EAAAovB,KAAA,CAAAyxB,OAAA,EACA7gD,CAAAA,EAAAy9C,KAAA,CAAAoD,OAAA,CAAA7gD,EAAAovB,KAAA,CAAAyxB,OAAA,EAEA,MACA,CACA7gD,EAAAy9C,KAAA,CAAAz9C,EAAAovB,KAAA,CACApvB,EAAAovB,KAAA,IACA,IAAYquB,MAAAA,CAAA,CAAAruB,MAAAA,CAAA,CAAA0xB,WAAAA,CAAA,EAA2B9gD,CAKvCy9C,CAAAA,EAAA31C,SAAA,GACAg5C,GACA1xB,CAAAA,EAAAtnB,SAAA,CAAA21C,EAAA31C,SAAA,EACA,OAAA21C,EAAA31C,SAAA,EAGAg5C,GACA9sC,CAAAA,KAAAnT,IAAAmT,GAAAC,KAAApT,IAAAoT,GAAAmb,EAAAtnB,SAAA,GACAsnB,CAAAA,EAAAsmB,eAAA,CAAgCqL,SFzBhCD,CAAA,CAAA9sC,CAAA,CAAAC,CAAA,EACA,IAAA+sC,EAAsBf,GAAUjsC,EAAA8sC,EAAA92C,CAAA,CAAA82C,EAAA/2C,KAAA,EAChCk3C,EAAsBhB,GAAUhsC,EAAA6sC,EAAA12C,CAAA,CAAA02C,EAAA32C,MAAA,EAChC,SAAc62C,EAAA,CAAW,EAAEC,EAAU,GEsBiBH,EAAA9sC,KAAAnT,IAAAmT,EAAAA,EAAA,GAAAC,KAAApT,IAAAoT,EAAAA,EAAA,KAGtDpT,KAAAA,IAAAy/C,GACA7C,CAAAA,EAAAzzC,CAAA,CAAAs2C,CAAA,EACAz/C,KAAAA,IAAA0/C,GACA9C,CAAAA,EAAArzC,CAAA,CAAAm2C,CAAA,EACA1/C,KAAAA,IAAA2/C,GACA/C,CAAAA,EAAAz1C,KAAA,CAAAw4C,CAAA,EAEA3/C,KAAAA,IAAA4/C,GACQS,SD9BRzD,CAAA,CAAA99C,CAAA,CAAAwhD,EAAA,EAAAr9B,EAAA,EAAAs9B,EAAA,IAEA3D,EAAAgD,UAAA,GAGA,IAAAjmC,EAAA4mC,EAAAlB,GAAAE,EAEA3C,CAAAA,CAAA,CAAAjjC,EAAAsJ,MAAA,EAAyBjb,GAAEf,SAAA,EAAAgc,GAE3B,IAAA28B,EAAuB53C,GAAEf,SAAA,CAAAnI,GACzB+gD,EAAwB73C,GAAEf,SAAA,CAAAq5C,EAC1B1D,CAAAA,CAAA,CAAAjjC,EAAA2lC,KAAA,KAA2BM,EAAA,CAAY,EAAEC,EAAY,GCmBjCjD,EAAAgD,EAAAC,EAAAC,EAAA,GAEpB,CCjDA,IAAAC,GAAA,oBAAAS,GAAAA,QAAAA,EAAA/yB,WAAA,GCQAgzB,GAAA,CACAC,eAAoBvD,GAAkB,CACtCJ,4BAAqCE,GACrCK,kBAA2BkB,GAC3BjB,QAAA,CAAA59C,EAAA47B,EAAA,CAAqCmhB,YAAAA,CAAA,CAAA1tB,aAAAA,CAAA,CAA2B,IACpDppB,EAAKX,IAAA,MACjB,IACAy3C,EAAAuD,UAAA,CACA,mBAAA1kB,EAAAolB,OAAA,CAEAplB,EAAAolB,OAAA,GACAplB,EAAAI,qBAAA,EACA,CACA,MAAA9gB,EAAA,CAEA6hC,EAAAuD,UAAA,EACA92C,EAAA,EACAI,EAAA,EACAL,MAAA,EACAI,OAAA,CACA,CACA,CACA,GACY1D,EAAKP,MAAA,MACDm6C,GAAa9C,EAAA1tB,EAA4B+wB,GAAQxkB,EAAAiR,OAAA,EAAA7sC,EAAAugC,iBAAA,EACjDuc,GAASlhB,EAAAmhB,EACzB,EACA,CACA,EACA,ECjCAkE,GAAA,CACAF,eAAoBvD,GAAkB,CACtC9uB,gBAAA,GACA0uB,4BAAmCA,GACnCO,kBAA2BiB,EAC3B,EACA,ECJA,SAAAsC,GAAA1/C,CAAA,CAAAyO,CAAA,CAAAjQ,CAAA,EACA,QAAAJ,KAAAqQ,EACaue,GAAave,CAAA,CAAArQ,EAAA,GAAkBu9C,GAAmBv9C,EAAAI,IAC/DwB,CAAAA,CAAA,CAAA5B,EAAA,CAAAqQ,CAAA,CAAArQ,EAAA,CAGA,CCNA,IAAAuhD,GAAA,IAAAtgD,IAAA,CACA,UACA,OACA,WACA,UACA,QACA,SACA,WACA,aACA,oBACA,SACA,UACA,wBACA,mBACA,sBACA,WACA,cACA,SACA,YACA,2BACA,kBACA,sBACA,SACA,SACA,eACA,aACA,kBACA,kBACA,kBACA,eACA,WACA,EASA,SAAAugD,GAAAxhD,CAAA,EACA,OAAAA,EAAAsC,UAAA,WACAtC,EAAAsC,UAAA,UAAAtC,cAAAA,GACAA,EAAAsC,UAAA,YACAtC,EAAAsC,UAAA,WACAtC,EAAAsC,UAAA,WACAtC,EAAAsC,UAAA,cACAi/C,GAAAl/C,GAAA,CAAArC,EACA,CCpDA,IAAAyhD,GAAA,IAA8BD,GAAiBxhD,GAoB/C,KAnBAqD,EAyBAq+C,QAAA,0BAAA75C,OAAA,GArBA45C,CAAAA,GAAA,GAAAzhD,EAAAsC,UAAA,QAAqDk/C,GAAiBxhD,GAAAqD,EAAArD,EAAA,CAsBtE,CACA,MAAAiM,EAAA,CAEA,CI/BA,IAAA01C,GAAA,CAA+BphD,QAAA,MAC/BqhD,GAAA,CAAmCrhD,QAAA,IGFnCshD,GAAA,IAAAplB,QCQAqlB,GAAA,IAAuBp3C,GAAqB4E,GAAOmB,GAAO,CAI1DsxC,GAAA,GAAAD,GAAAl3C,IAAA,CAA6CH,GAAa3L,ICW1DkjD,GAAA,CACA,iBACA,oBACA,SACA,sBACA,gBACA,uBACA,0BACA,CACAC,GAAwBnhD,EAAYvB,MAAA,OAKpC2iD,GAQA1E,4BAAA2E,CAAA,CAAAC,CAAA,CAAAC,CAAA,EACA,QACA,CACA31C,YAAA,CAAkBktB,OAAAA,CAAA,CAAAx5B,MAAAA,CAAA,CAAAkwB,gBAAAA,CAAA,CAAAgyB,oBAAAA,CAAA,CAAAvuB,sBAAAA,CAAA,CAAAwuB,YAAAA,CAAA,CAA0F,CAAAzqC,EAAA,EAAc,EAK1H,KAAAgX,eAAA,IAKA,KAAAvuB,OAAA,MAIA,KAAA+oC,QAAA,KAAAroC,IAIA,KAAA86C,aAAA,IACA,KAAAD,qBAAA,IAQA,KAAA7rB,kBAAA,MAMA,KAAApwB,MAAA,KAAA4L,IACA,KAAAgB,gBAAA,CAAgCA,GAIhC,KAAA+1C,QAAA,IAKA,KAAAC,kBAAA,KAAAh3C,IAMA,KAAAi3C,gBAAA,IAIA,KAAAv2B,MAAA,IAMA,KAAAw2B,sBAAA,IACA,KAAAC,YAAA,UAAAl3B,MAAA,eAAA+D,YAAA,EACA,KAAA3pB,MAAA,MACA,KAAA+8C,iBAAA,IACA,KAAAtiD,OAAA,GAEA,KAAAuiD,YAAA,GACA,KAAAC,cAAA,MAAAxiD,OAAA,MAAA48C,WAAA,MAAA/8C,KAAA,CAAA4uB,KAAA,MAAAyO,UAAA,EACA,EACA,KAAAolB,iBAAA,IACA,KAAA5a,cAAA,MACA,KAAA4a,iBAAA,GACA,KAAAA,iBAAA,IACgBx8C,EAAKP,MAAA,MAAAA,MAAA,QAErB,EACA,IAAgB2pB,aAAAA,CAAA,CAAA0tB,YAAAA,CAAA,EAA4BoF,CAC5C,MAAA9yB,YAAA,CAAAA,EACA,KAAAuzB,UAAA,EAA4B,GAAAvzB,CAAA,EAC5B,KAAAwzB,aAAA,CAAA7iD,EAAAg0B,OAAA,EAA+C,GAAA3E,CAAA,EAAkB,GACjE,KAAA0tB,WAAA,CAAAA,EACA,KAAAvjB,MAAA,CAAAA,EACA,KAAAx5B,KAAA,CAAAA,EACA,KAAAkwB,eAAA,CAAAA,EACA,KAAA9a,KAAA,CAAAokB,EAAAA,EAAApkB,KAAA,KACA,KAAA8sC,mBAAA,CAAAA,EACA,KAAAxqC,OAAA,CAAAA,EACA,KAAAic,qBAAA,CAAArmB,CAAAA,CAAAqmB,EACA,KAAA+nB,qBAAA,CAAqCA,GAAqB17C,GAC1D,KAAA27C,aAAA,CAA6BA,GAAa37C,GAC1C,KAAA27C,aAAA,EACA,MAAAtrB,eAAA,KAAAxvB,GAAA,EAEA,KAAAoyB,sBAAA,CAAA3lB,CAAAA,CAAAksB,CAAAA,GAAAA,EAAAr5B,OAAA,EAWA,IAAgBwuB,WAAAA,CAAA,IAAAm0B,EAAA,CAAqC,KAAA1F,2BAAA,CAAAp9C,EAAA,GAA4C,MACjG,QAAAJ,KAAAkjD,EAAA,CACA,IAAAnjD,EAAAmjD,CAAA,CAAAljD,EAAA,MACAS,IAAAgvB,CAAA,CAAAzvB,EAAA,EAAmD4uB,GAAa7uB,IAChEA,EAAA+L,GAAA,CAAA2jB,CAAA,CAAAzvB,EAAA,IAEA,CACA,CACA40B,MAAAoH,CAAA,EACA,KAAAz7B,OAAA,CAAAy7B,EACQ6lB,GAAkB/1C,GAAA,CAAAkwB,EAAA,MAC1B,KAAAyB,UAAA,QAAAA,UAAA,CAAAzB,QAAA,EACA,KAAAyB,UAAA,CAAA7I,KAAA,CAAAoH,GAEA,KAAApC,MAAA,OAAAmiB,aAAA,QAAAD,qBAAA,EACA,MAAAqH,qBAAA,MAAAvpB,MAAA,CAAAwpB,eAAA,QAEA,KAAAvjD,MAAA,CAAAC,OAAA,EAAAC,EAAAC,IAAA,KAAAqjD,iBAAA,CAAArjD,EAAAD,IACa6hD,GAAwBrhD,OAAA,EACzB+iD,WJrKZ,GADI1B,GAAwBrhD,OAAA,IACnBgjD,GAAAC,CAAS,EAElB,GAAAp3C,OAAAq3C,UAAA,EACA,IAAAC,EAAAt3C,OAAAq3C,UAAA,6BACAE,EAAA,IAAmDhC,GAAoBphD,OAAA,CAAAmjD,EAAAnM,OAAA,CACvEmM,EAAAE,WAAA,CAAAD,GACAA,GACA,MAEQhC,GAAoBphD,OAAA,IAE5B,II4JA,KAAA0vB,kBAAA,CACA,eAAAqyB,mBAAA,EAEA,iBAAAA,mBAAA,EAEsBX,GAAoBphD,OAAA,EAI1C,KAAAq5B,MAAA,EACA,KAAAA,MAAA,CAAA0P,QAAA,CAAAlkC,GAAA,OACA,KAAAQ,MAAA,MAAAxF,KAAA,MAAAkwB,eAAA,CACA,CACAyE,SAAA,CASA,QAAA/0B,KARQ6hD,GAAkBv8C,MAAA,MAAA/E,OAAA,EAC1B,KAAAk9B,UAAA,OAAAA,UAAA,CAAA1I,OAAA,GACQzuB,EAAW,KAAAs8C,YAAA,EACXt8C,EAAW,KAAAR,MAAA,EACnB,KAAA28C,kBAAA,CAAA3iD,OAAA,IAAA4kC,KACA,KAAA+d,kBAAA,CAAAh9C,KAAA,GACA,KAAA09C,qBAAA,OAAAA,qBAAA,GACA,KAAAvpB,MAAA,OAAAA,MAAA,CAAA0P,QAAA,CAAAhkC,MAAA,OACA,KAAA6mB,MAAA,CACA,KAAAA,MAAA,CAAAnsB,EAAA,CAAAyF,KAAA,GAEA,QAAAzF,KAAA,KAAAwiD,QAAA,EACA,IAAAqB,EAAA,KAAArB,QAAA,CAAAxiD,EAAA,CACA6jD,IACAA,EAAA9uB,OAAA,GACA8uB,EAAA3xB,SAAA,IAEA,CACA,KAAA3xB,OAAA,KACA,CACA8iD,kBAAArjD,CAAA,CAAAD,CAAA,MAaA+jD,EAZA,KAAArB,kBAAA,CAAApgD,GAAA,CAAArC,IACA,KAAAyiD,kBAAA,CAAAxiD,GAAA,CAAAD,KAEA,IAAA+jD,EAAiC/iD,EAAcqB,GAAA,CAAArC,GAC/CgkD,EAAAjkD,EAAAgtB,EAAA,cACA,KAAA0C,YAAA,CAAAzvB,EAAA,CAAAikD,EACA,KAAA7jD,KAAA,CAAAmY,QAAA,EAAmClS,EAAKR,SAAA,MAAA+8C,YAAA,EACxCmB,GAAA,KAAAtmB,UAAA,EACA,MAAAA,UAAA,CAAAwN,gBAAA,IAEA,GACAiZ,EAAAnkD,EAAAgtB,EAAA,sBAAAkb,cAAA,CAEA77B,CAAAA,OAAA+3C,qBAAA,EACAL,CAAAA,EAAA13C,OAAA+3C,qBAAA,MAAAnkD,EAAAD,EAAA,EAEA,KAAA0iD,kBAAA,CAAA32C,GAAA,CAAA9L,EAAA,KACAgkD,IACAE,IACAJ,GACAA,IACA/jD,EAAAynB,KAAA,EACAznB,EAAAqkB,IAAA,EACA,EACA,CACA+M,iBAAAizB,CAAA,SAIA,KAAA7jD,OAAA,EACA,KAAA8jD,wBAAA,EACA,KAAA9iD,IAAA,GAAA6iD,EAAA7iD,IAAA,CAGA,KAAA8iD,wBAAA,MAAA9jD,OAAA,CAAA6jD,EAAA7jD,OAAA,EAFA,CAGA,CACA+jD,gBAAA,CACA,IAAAtkD,EAAA,YACA,IAAAA,KAAoBu8C,GAAkB,CACtC,IAAAgI,EAAsChI,EAAkB,CAAAv8C,EAAA,CACxD,IAAAukD,EACA,SACA,IAAoB/H,UAAAA,CAAA,CAAAxqB,QAAAwyB,CAAA,EAAyCD,EAY7D,GARA,MAAA/B,QAAA,CAAAxiD,EAAA,EACAwkD,GACAhI,EAAA,KAAAp8C,KAAA,GACA,MAAAoiD,QAAA,CAAAxiD,EAAA,KAAAwkD,EAAA,OAKA,KAAAhC,QAAA,CAAAxiD,EAAA,EACA,IAAA6jD,EAAA,KAAArB,QAAA,CAAAxiD,EAAA,CACA6jD,EAAA3xB,SAAA,CACA2xB,EAAAj+C,MAAA,IAGAi+C,EAAAjvB,KAAA,GACAivB,EAAA3xB,SAAA,IAEA,CACA,CACA,CACA4wB,cAAA,CACA,KAAA2B,KAAA,MAAAtH,WAAA,MAAA1tB,YAAA,MAAArvB,KAAA,CACA,CAMAyW,oBAAA,CACA,YAAAtW,OAAA,CACA,KAAAmkD,0BAAA,MAAAnkD,OAAA,MAAAH,KAAA,EACcy6B,IACd,CACA8pB,eAAA3kD,CAAA,EACA,YAAAyvB,YAAA,CAAAzvB,EAAA,CAEAsqC,eAAAtqC,CAAA,CAAAD,CAAA,EACA,KAAA0vB,YAAA,CAAAzvB,EAAA,CAAAD,CACA,CAKA6F,OAAAxF,CAAA,CAAAkwB,CAAA,EACAlwB,CAAAA,EAAAugC,iBAAA,OAAAvgC,KAAA,CAAAugC,iBAAA,GACA,KAAAsH,cAAA,GAEA,KAAAnT,SAAA,MAAA10B,KAAA,CACA,KAAAA,KAAA,CAAAA,EACA,KAAAi1B,mBAAA,MAAA/E,eAAA,CACA,KAAAA,eAAA,CAAAA,EAIA,QAAA9wB,EAAA,EAAwBA,EAAAwiD,GAAAziD,MAAA,CAA8BC,IAAA,CACtD,IAAAQ,EAAAgiD,EAAA,CAAAxiD,EAAA,CACA,KAAAmjD,sBAAA,CAAA3iD,EAAA,GACA,KAAA2iD,sBAAA,CAAA3iD,EAAA,GACA,YAAA2iD,sBAAA,CAAA3iD,EAAA,EAGA,IAAA4kD,EAAAxkD,CAAA,CADA,KAAAJ,EACA,CACA4kD,GACA,MAAAjC,sBAAA,CAAA3iD,EAAA,MAAA+sB,EAAA,CAAA/sB,EAAA4kD,EAAA,CAEA,CACA,KAAAlC,gBAAA,CAAgCmC,SH3ThCt5C,CAAA,CAAAnM,CAAA,CAAAC,CAAA,EACA,QAAAW,KAAAZ,EAAA,CACA,IAAA0lD,EAAA1lD,CAAA,CAAAY,EAAA,CACA+kD,EAAA1lD,CAAA,CAAAW,EAAA,CACA,GAAY4uB,GAAak2B,GAKzBv5C,EAAA0jB,QAAA,CAAAjvB,EAAA8kD,QASA,GAAiBl2B,GAAam2B,GAK9Bx5C,EAAA0jB,QAAA,CAAAjvB,EAAkC8M,GAAWg4C,EAAA,CAAct9B,MAAAjc,CAAA,SAE3D,GAAAw5C,IAAAD,GAMA,GAAAv5C,EAAA4kB,QAAA,CAAAnwB,GAAA,CACA,IAAAglD,EAAAz5C,EAAAK,QAAA,CAAA5L,EACAglD,EAAA,IAAAA,EAAAlxB,SAAA,CACAkxB,EAAAjuC,IAAA,CAAA+tC,GAEAE,EAAAt4B,WAAA,EACAs4B,EAAAl5C,GAAA,CAAAg5C,EAEA,KACA,CACA,IAAAb,EAAA14C,EAAAo5C,cAAA,CAAA3kD,GACAuL,EAAA0jB,QAAA,CAAAjvB,EAAsC8M,GAAWm3C,KAAAxjD,IAAAwjD,EAAAA,EAAAa,EAAA,CAAwDt9B,MAAAjc,CAAA,GACzG,EAEA,CAEA,QAAAvL,KAAAX,EACAoB,KAAAA,IAAArB,CAAA,CAAAY,EAAA,EACAuL,EAAA05C,WAAA,CAAAjlD,GAEA,OAAAZ,CACA,EGuQ2D,UAAAo+C,2BAAA,CAAAp9C,EAAA,KAAA00B,SAAA,YAAA4tB,gBAAA,EAC3D,KAAAwC,sBAAA,EACA,KAAAA,sBAAA,EAEA,CACAtkD,UAAA,CACA,YAAAR,KAAA,CAKA+kD,WAAAt4C,CAAA,EACA,YAAAzM,KAAA,CAAAM,QAAA,MAAAN,KAAA,CAAAM,QAAA,CAAAmM,EAAA,CAAApM,KAAAA,CACA,CAIAyB,sBAAA,CACA,YAAA9B,KAAA,CAAAoC,UAAA,CAEA87B,uBAAA,CACA,YAAAl+B,KAAA,CAAA7B,kBAAA,CAEA6mD,uBAAA,CACA,YAAArJ,aAAA,CACA,KACA,KAAAniB,MAAA,CACA,KAAAA,MAAA,CAAAwrB,qBAAA,GACA3kD,KAAAA,CACA,CACAmyB,kBAAAyyB,EAAA,IACA,GAAAA,EACA,YAAAzrB,MAAA,MAAAA,MAAA,CAAAhH,iBAAA,GAAAnyB,KAAAA,EAEA,SAAAq7C,qBAAA,EACA,IAAAnpB,EAAA,KAAAiH,MAAA,EACA,KAAAA,MAAA,CAAAhH,iBAAA,OAKA,OAHAnyB,KAAAA,IAAA,KAAAL,KAAA,CAAAg0B,OAAA,EACAzB,CAAAA,EAAAyB,OAAA,MAAAh0B,KAAA,CAAAg0B,OAAA,EAEAzB,CACA,CACA,IAAAA,EAAA,GACA,QAAAnzB,EAAA,EAAwBA,EAAAyiD,GAAqBziD,IAAA,CAC7C,IAAAqN,EAAyB/L,CAAY,CAAAtB,EAAA,CACrCyzB,EAAA,KAAA7yB,KAAA,CAAAyM,EAAA,CACgBpN,CAAAA,EAAcwzB,IAAAA,CAAA,IAAAA,CAAA,GAC9BN,CAAAA,CAAA,CAAA9lB,EAAA,CAAAomB,CAAA,CAEA,CACA,OAAAN,CACA,CAIAywB,gBAAApyB,CAAA,EACA,IAAAs0B,EAAA,KAAAF,qBAAA,GACA,GAAAE,EAGA,OAFAA,EAAA70B,eAAA,EACA60B,EAAA70B,eAAA,CAAArrB,GAAA,CAAA4rB,GACA,IAAAs0B,EAAA70B,eAAA,CAAAnrB,MAAA,CAAA0rB,EAEA,CAIA/B,SAAAjvB,CAAA,CAAAD,CAAA,EAEA,IAAAilD,EAAA,KAAAnlD,MAAA,CAAAI,GAAA,CAAAD,GACAD,IAAAilD,IACAA,GACA,KAAAC,WAAA,CAAAjlD,GACA,KAAAqjD,iBAAA,CAAArjD,EAAAD,GACA,KAAAF,MAAA,CAAAiM,GAAA,CAAA9L,EAAAD,GACA,KAAA0vB,YAAA,CAAAzvB,EAAA,CAAAD,EAAAE,GAAA,GAEA,CAIAglD,YAAAjlD,CAAA,EACA,KAAAH,MAAA,CAAAyF,MAAA,CAAAtF,GACA,IAAAitB,EAAA,KAAAw1B,kBAAA,CAAAxiD,GAAA,CAAAD,GACAitB,IACAA,IACA,KAAAw1B,kBAAA,CAAAn9C,MAAA,CAAAtF,IAEA,YAAAyvB,YAAA,CAAAzvB,EAAA,CACA,KAAAulD,0BAAA,CAAAvlD,EAAA,KAAAm9C,WAAA,CACA,CAIAhtB,SAAAnwB,CAAA,EACA,YAAAH,MAAA,CAAAwC,GAAA,CAAArC,EACA,CACA4L,SAAA5L,CAAA,CAAAkR,CAAA,EACA,QAAA9Q,KAAA,CAAAP,MAAA,OAAAO,KAAA,CAAAP,MAAA,CAAAG,EAAA,CACA,YAAAI,KAAA,CAAAP,MAAA,CAAAG,EAAA,CAEA,IAAAD,EAAA,KAAAF,MAAA,CAAAI,GAAA,CAAAD,GAKA,OAJAS,KAAAA,IAAAV,GAAAmR,KAAAzQ,IAAAyQ,IACAnR,EAAoB+M,GAAWoE,OAAAA,EAAAzQ,KAAAA,EAAAyQ,EAAA,CAAqDsW,MAAA,OACpF,KAAAyH,QAAA,CAAAjvB,EAAAD,IAEAA,CACA,CAMAqN,UAAApN,CAAA,CAAA4B,CAAA,EACA,IAAAqK,EACA,IAAAlM,EAAA,KAAAU,IAAA,KAAAgvB,YAAA,CAAAzvB,EAAA,OAAAO,OAAA,CAEA,OAAA0L,CAAAA,EAAA,KAAAu5C,sBAAA,MAAAplD,KAAA,CAAAJ,EAAA,GAAAiM,KAAA,IAAAA,EAAAA,EAAA,KAAAw5C,qBAAA,MAAAllD,OAAA,CAAAP,EAAA,KAAA8X,OAAA,EADA,KAAA2X,YAAA,CAAAzvB,EAAA,CAaA,aAXAD,IACA,iBAAAA,GACiB6G,CAAAA,EAAiB7G,IAAW2G,EAAiB3G,EAAA,EAE9DA,EAAA0H,WAAA1H,GAEA,CAAsBgiD,GAAahiD,IAAW0Q,GAAO9J,IAAA,CAAA/E,IACrD7B,CAAAA,EAAwBkV,GAAiBjV,EAAA4B,EAAA,EAEzC,KAAA8jD,aAAA,CAAA1lD,EAAoC4uB,GAAa7uB,GAAAA,EAAAE,GAAA,GAAAF,IAElC6uB,GAAa7uB,GAAAA,EAAAE,GAAA,GAAAF,CAC5B,CAKA2lD,cAAA1lD,CAAA,CAAAD,CAAA,EACA,KAAAijD,UAAA,CAAAhjD,EAAA,CAAAD,CACA,CAKAm0B,cAAAl0B,CAAA,MACAiM,MAEA05C,EADA,IAAgBvxB,QAAAA,CAAA,EAAU,KAAAh0B,KAAA,CAE1B,oBAAAg0B,GAAA,iBAAAA,EAAA,CACA,IAAA/D,EAA4BlwB,EAAuB,KAAAC,KAAA,CAAAg0B,EAAA,OAAAnoB,CAAAA,EAAA,KAAAqkB,eAAA,GAAArkB,KAAA,IAAAA,EAAA,OAAAA,EAAA3L,MAAA,EACnD+vB,GACAs1B,CAAAA,EAAAt1B,CAAA,CAAArwB,EAAA,CAEA,CAIA,GAAAo0B,GAAAuxB,KAAAllD,IAAAklD,EACA,OAAAA,EAMA,IAAA/jD,EAAA,KAAA4jD,sBAAA,MAAAplD,KAAA,CAAAJ,UACA,KAAAS,IAAAmB,GAAqCgtB,GAAahtB,GAMlD,KAAAnB,IAAA,KAAAwiD,aAAA,CAAAjjD,EAAA,EACA2lD,KAAAllD,IAAAklD,EACAllD,KAAAA,EACA,KAAAuiD,UAAA,CAAAhjD,EAAA,CARA4B,CASA,CACAmrB,GAAAC,CAAA,CAAAnoB,CAAA,EAIA,OAHA,KAAAsnB,MAAA,CAAAa,EAAA,EACA,MAAAb,MAAA,CAAAa,EAAA,KAAyCzB,EAAmB,EAE5D,KAAAY,MAAA,CAAAa,EAAA,CAAA5nB,GAAA,CAAAP,EACA,CACA6mB,OAAAsB,CAAA,IAAA6f,CAAA,EACA,KAAA1gB,MAAA,CAAAa,EAAA,EACA,KAAAb,MAAA,CAAAa,EAAA,CAAAtB,MAAA,IAAAmhB,EAEA,CACA,CCrfA,MAAA+Y,WAA+B1D,GAC/Bx1C,aAAA,CACA,SAAA4hB,WACA,KAAA7hB,gBAAA,CAAgC2I,EAChC,CACAivC,yBAAAl2C,CAAA,CAAAC,CAAA,EAMA,OAAAD,EAAAA,EAAA03C,uBAAA,CAAAz3C,GAAA,IACA,CACAo3C,uBAAAplD,CAAA,CAAAJ,CAAA,EACA,OAAAI,EAAA4uB,KAAA,CACA5uB,EAAA4uB,KAAA,CAAAhvB,EAAA,CACAS,KAAAA,CACA,CACA8kD,2BAAAvlD,CAAA,EAAsC+8C,KAAAA,CAAA,CAAA/tB,MAAAA,CAAA,CAAa,EACnD,OAAA+tB,CAAA,CAAA/8C,EAAA,CACA,OAAAgvB,CAAA,CAAAhvB,EAAA,CAEA,CCZA,MAAA8lD,WAAgCF,GAChCl5C,aAAA,CACA,SAAA4hB,WACA,KAAA/sB,IAAA,QACA,KAAAutB,eAAA,IACA,KAAAi0B,cAAA,CAA8BjG,EAC9B,CACA2I,sBAAAzpB,CAAA,CAAAh8B,CAAA,EACA,GAAYgB,EAAcqB,GAAA,CAAArC,GAAA,CAC1B,IAAA+lD,EAAgC/wC,GAAmBhV,GACnD,OAAA+lD,GAAAA,EAAAl+C,OAAA,GACA,CACA,CACA,IAAAm+C,EAfA55C,OAAA4J,gBAAA,CAeAgmB,GACAj8B,EAAA,CAA2BgH,EAAiB/G,GAC5CgmD,EAAA/vC,gBAAA,CAAAjW,GACAgmD,CAAA,CAAAhmD,EAAA,KACA,uBAAAD,EAAAA,EAAAqH,IAAA,GAAArH,CACA,CACA,CACA2kD,2BAAA1oB,CAAA,EAA2Cz9B,mBAAAA,CAAA,CAAoB,EAC/D,OAAesY,GAAkBmlB,EAAAz9B,EACjC,CACAkmD,MAAAtH,CAAA,CAAA1tB,CAAA,CAAArvB,CAAA,EACQi/C,GAAelC,EAAA1tB,EAAArvB,EAAAugC,iBAAA,CACvB,CACA6c,4BAAAp9C,CAAA,CAAA00B,CAAA,CAAAn1B,CAAA,EACA,OAAe69C,GAA2Bp9C,EAAA00B,EAAAn1B,EAC1C,CACAulD,wBAAA,CACA,KAAAe,iBAAA,GACA,KAAAA,iBAAA,GACA,YAAAA,iBAAA,EAEA,IAAgB3c,SAAAA,CAAA,EAAW,KAAAlpC,KAAA,CACfwuB,GAAa0a,IACzB,MAAA2c,iBAAA,CAAA3c,EAAAvc,EAAA,cACA,KAAAxsB,OAAA,EACA,MAAAA,OAAA,CAAA2lD,WAAA,IAAkDxoC,EAAO,EACzD,EAAa,CAEb,CACA,CC5CA,MAAAyoC,WAA+BP,GAC/Bl5C,aAAA,CACA,SAAA4hB,WACA,KAAA/sB,IAAA,OACA,KAAAi/C,QAAA,IACA,KAAAkE,0BAAA,CAA0C7pB,EAC1C,CACA2qB,uBAAAplD,CAAA,CAAAJ,CAAA,EACA,OAAAI,CAAA,CAAAJ,EAAA,CAEAylD,sBAAAzpB,CAAA,CAAAh8B,CAAA,EACA,GAAYgB,EAAcqB,GAAA,CAAArC,GAAA,CAC1B,IAAA+lD,EAAgC/wC,GAAmBhV,GACnD,OAAA+lD,GAAAA,EAAAl+C,OAAA,GACA,CAEA,OADA7H,EAAA,GAAkCqC,GAAA,CAAArC,GAAuBA,EAAXguB,GAAWhuB,GACzDg8B,EAAAoqB,YAAA,CAAApmD,EACA,CACAw9C,4BAAAp9C,CAAA,CAAA00B,CAAA,CAAAn1B,CAAA,EACA,OAAe+9C,GAA2Bt9C,EAAA00B,EAAAn1B,EAC1C,CACA8kD,MAAAtH,CAAA,CAAA1tB,CAAA,CAAArvB,CAAA,EACQ6/C,GAAa9C,EAAA1tB,EAAA,KAAA+wB,QAAA,CAAApgD,EAAAugC,iBAAA,CACrB,CACAoiB,eAAA/mB,CAAA,CAAAmhB,CAAA,CAAAzI,CAAA,CAAAjX,CAAA,EACQyf,GAASlhB,EAAAmhB,EAAAzI,EAAAjX,EACjB,CACA7I,MAAAoH,CAAA,EACA,KAAAwkB,QAAA,CAAwBA,GAAQxkB,EAAAiR,OAAA,EAChC,MAAArY,MAAAoH,EACA,CACA,CGvCA,IAAAqqB,GAA6BC,SnND7BC,CAAA,EACA,uBAAAC,MACA,OAAAD,EAMA,IAAAE,EAAA,IAAAh7C,IAOA,WAAA+6C,MANA,IAAA3Z,IAIA0Z,KAAA1Z,GAEA,CAMA5sC,IAAA,CAAAymD,EAAA1mD,IACA,WAAAA,EACAumD,GAIAE,EAAApkD,GAAA,CAAArC,IACAymD,EAAA36C,GAAA,CAAA9L,EAAAumD,EAAAvmD,IAEAymD,EAAAxmD,GAAA,CAAAD,GAEA,EACA,GuM7BAsD,EWCwE,CpGHxEykB,UAAA,CACAiK,QAAiBG,EACjB,EACAJ,KAAA,CACAC,QAAiBiD,EACjB,EmDHAqnB,OAAA,CACAtqB,QAAiBgoB,EACjB,EACAoC,IAAA,CACApqB,QAAiB8lB,EACjB,EACAoE,MAAA,CACAlqB,QAAiBolB,EACjB,EACA+E,MAAA,CACAnqB,QAAiBmlB,EACjB,EPXAkF,IAAA,CACArqB,QAAiB0P,EACjB,EACA7I,KAAA,CACA7G,QAAiBsP,GACjBqlB,eAAwB7P,GACxBlS,cAAqBA,EACrB,EQTA9K,OAAA,CACA6sB,eAAwB7P,GACxBlS,cAAqBA,EACrB,CgDKA,EXNArhC,EUDA,CAAAy/B,EAAAlrB,IACW+kC,GAAc7Z,GACzB,IAAcmjB,GAAgBruC,GAC9B,IAAcguC,GAAiBhuC,EAAA,CAC/B8uC,gBAAA5jB,IAA2C8B,GAAA+hB,QAAQ,GVFnD,SAAA7jB,CAAA,EAAuD8jB,mBAAAA,CAAA,EAAqB,CAAIA,mBAAA,GAA2B,EAW3G,OAAeC,S1BOwBC,CAAiF,KAAjF,CAAE1jD,kBAAAA,CAAiB,CAAEC,oBAAAA,CAAmB,CAAE0jD,UAAAA,CAAS,CAAE9F,eAAAA,CAAc,CAAEne,UAAAA,CAAS,CAAG,CAAjFgkB,CACnC1jD,CAAAA,GAAqB4jD,SFxBzB1E,CAAA,EACA,QAAAxiD,KAAAwiD,EACQjG,EAAkB,CAAAv8C,EAAA,EAC1B,GAAeu8C,EAAkB,CAAAv8C,EAAA,CACjC,GAAAwiD,CAAA,CAAAxiD,EAAA,CAGA,EEiBsCsD,GAiClC,IAAM6jD,EAA4BC,CAAAA,EAAAA,GAAAA,UAAAA,EAhClC,SAAyBhnD,CAAK,CAAEinD,CAAW,MPpB/C1nD,MOyBYilC,EACJ,IAAM0iB,EAAiB,CACnB,GAAGviB,CAAAA,EAAAA,GAAAA,UAAAA,EAAWzmC,GAAAA,CAAmBA,CAAC,CAClC,GAAG8B,CAAK,CACRgjC,SAAUmkB,SA2BDP,CAAY,KAAZ,CAAE5jB,SAAAA,CAAQ,CAAE,CAAZ4jB,EACXQ,EAAgBziB,CAAAA,EAAAA,GAAAA,UAAAA,EAAW3mC,GAAAA,CAAkBA,EAAE42B,EAAE,CACvD,OAAOwyB,GAAiBpkB,KAAa3iC,IAAb2iC,EAClBokB,EAAgB,IAAMpkB,EACtBA,CACV,EAhCkChjC,EAC1B,EACM,CAAE3B,SAAAA,CAAQ,CAAE,CAAG6oD,EACf30B,EAAU80B,SJnCxBrnD,CAAA,EACA,IAAYg0B,QAAAA,CAAA,CAAAjM,QAAAA,CAAA,EAAqBu/B,SDFjCtnD,CAAA,CAAAuyB,CAAA,EACA,GAAQmpB,GAAqB17C,GAAA,CAC7B,IAAgBg0B,QAAAA,CAAA,CAAAjM,QAAAA,CAAA,EAAmB/nB,EACnC,OACAg0B,QAAAA,CAAA,IAAAA,GAA0C30B,EAAc20B,GACxDA,EACA3zB,KAAAA,EACA0nB,QAAqB1oB,EAAc0oB,GAAAA,EAAA1nB,KAAAA,CACnC,CACA,CACA,MAAAL,CAAA,IAAAA,EAAAm+C,OAAA,CAAA5rB,EAAA,EACA,ECTuDvyB,EAAQ,GAAA0kC,GAAAC,UAAA,EAAWyW,KAC1E,MAAW,GAAA1W,GAAA6iB,OAAA,EAAO,MAAUvzB,QAAAA,EAAAjM,QAAAA,CAAA,GAAkB,CAAA6zB,GAAA5nB,GAAA4nB,GAAA7zB,GAAA,CAC9C,EIgC+C/nB,GACjCmiD,EAAcpB,EAAe/gD,EAAO3B,GAC1C,GAAI,CAACA,GAAYmpD,GAAAA,CAASA,CAAE,CA6Bf7iB,CAAAA,EAAAA,GAAAA,UAAAA,EAAW0W,IAAaC,MAAM,CA3BvC,IAAMmM,EAAmBC,SAyCD1nD,CAAK,EACrC,GAAM,CAAEy4B,KAAAA,CAAI,CAAEiB,OAAAA,CAAM,CAAE,CAAGyiB,GACzB,GAAI,CAAC1jB,GAAQ,CAACiB,EACV,MAAO,CAAC,EACZ,IAAMiuB,EAAW,CAAE,GAAGlvB,CAAI,CAAE,GAAGiB,CAAM,EACrC,MAAO,CACH8K,cAAe,CAAC/L,MAAAA,EAAmC,KAAK,EAAIA,EAAK2jB,SAAS,CAACp8C,EAAAA,GAAY05B,CAAAA,MAAAA,EAAuC,KAAK,EAAIA,EAAO0iB,SAAS,CAACp8C,EAAAA,EAClJ2nD,EAASnjB,aAAa,CACtBnkC,KAAAA,EACNkmD,eAAgBoB,EAASpB,cAAc,CAE/C,EApDgEW,GACpD1iB,EAAgBijB,EAAiBjjB,aAAa,CAO9CjS,EAAQhzB,aAAa,CAAGqoD,SRvCpChlB,CAAA,CAAAuf,CAAA,CAAAniD,CAAA,CAAAmD,CAAA,CAAA0kD,CAAA,EACA,IAAAh8C,EACA,IAAYtM,cAAAi6B,CAAA,EAA0B,GAAAkL,GAAAC,UAAA,EAAWyW,IACjD0M,EAAwB,GAAApjB,GAAAC,UAAA,EAAW0W,IACnCnrB,EAA4B,GAAAwU,GAAAC,UAAA,EAAWC,GAAAC,CAAe,EACtDqd,EAAgC,GAAAxd,GAAAC,UAAA,EAAWzmC,GAAA6pD,CAAmB,EAAAzpD,aAAA,CAC9D0pD,EAA6B,GAAAtjB,GAAAujB,MAAA,IAI7B9kD,EAAAA,GAAA2kD,EAAAI,QAAA,CACA,CAAAF,EAAA7nD,OAAA,EAAAgD,GACA6kD,CAAAA,EAAA7nD,OAAA,CAAAgD,EAAAy/B,EAAA,CACAuf,YAAAA,EACA3oB,OAAAA,EACAx5B,MAAAA,EACAkwB,gBAAAA,EACAyD,sBAAAzD,EAAAA,GACAA,CAAA,IAAAA,EAAA8D,OAAA,CAEAkuB,oBAAAA,CACA,EAAS,EAET,IAAA3iD,EAAAyoD,EAAA7nD,OAAA,CAKAgoD,EAAqC,GAAAzjB,GAAAC,UAAA,EAAW3C,IAChDziC,GACA,CAAAA,EAAA89B,UAAA,EACAwqB,GACAtoD,CAAAA,SAAAA,EAAA4B,IAAA,EAAA5B,QAAAA,EAAA4B,IAAA,GACQinD,SAkDqB7oD,CAAA,CAAAS,CAAA,CAAA6nD,CAAA,CAAA7T,CAAA,EAC7B,IAAYhR,SAAAA,CAAA,CAAAtJ,OAAAA,CAAA,CAAAjB,KAAAA,CAAA,CAAA+F,gBAAAA,CAAA,CAAAkR,aAAAA,CAAA,CAAA3B,WAAAA,CAAA,EAAqE/tC,CACjFT,CAAAA,EAAA89B,UAAA,KAAAwqB,EAAAtoD,EAAA8vB,YAAA,CAAArvB,CAAA,0BACAK,KAAAA,EACAgoD,SAmBAA,EAAA9oD,CAAA,EACA,GAAAA,EAEA,MAAAA,CAAA,IAAAA,EAAAmY,OAAA,CAAA8uC,eAAA,CACAjnD,EAAA89B,UAAA,CACAgrB,EAAA9oD,EAAAi6B,MAAA,CACA,EAzBAj6B,EAAAi6B,MAAA,GACAj6B,EAAA89B,UAAA,CAAAiG,UAAA,EACAN,SAAAA,EACAtJ,OAAAA,EACA4V,oBAAAhiC,CAAAA,CAAAmrB,GAAA+F,GAAkE1F,GAAW0F,GAC7Ej/B,cAAAA,EAQAq0C,cAAA,iBAAAla,EAAAA,EAAA,OACAsa,uBAAAA,EACAtE,aAAAA,EACA3B,WAAAA,CACA,EACA,EAxE4Bia,EAAA7nD,OAAA,CAAAH,EAAA6nD,EAAAM,GAExB,GAAAzjB,GAAA4jB,kBAAA,EAAkB,KACtB/oD,GAAAA,EAAAiG,MAAA,CAAAxF,EAAAkwB,EACA,GAKA,IAAAq4B,EAAAvoD,CAAA,CAAoC+tB,GAA4B,CAChEy6B,EAAyB,GAAA9jB,GAAAujB,MAAA,EAAM36C,CAAAA,CAAAi7C,GAC/B,CAAAv8C,OAAAyvC,uBAAA,EACA,QAAA5vC,CAAAA,EAAAG,OAAA4iC,2BAAA,GAAA/iC,KAAA,IAAAA,EAAA,OAAAA,EAAA6B,IAAA,CAAA1B,OAAAu8C,EAAA,GAiCA,MAhCI,GAAAE,GAAAC,CAAA,EAAyB,KAC7BnpD,IAEAA,EAAA2kD,cAAA,GACQzhB,GAAS/8B,MAAA,CAAAnG,EAAAmG,MAAA,EAWjB8iD,EAAAroD,OAAA,EAAAZ,EAAA4vB,cAAA,EACA5vB,EAAA4vB,cAAA,CAAAkD,cAAA,GAEA,GACI,GAAAqS,GAAAK,SAAA,EAAS,KACbxlC,IAEA,CAAAipD,EAAAroD,OAAA,EAAAZ,EAAA4vB,cAAA,EACA5vB,EAAA4vB,cAAA,CAAAkD,cAAA,GAEAm2B,EAAAroD,OAAA,IAEAo7C,KACAA,GAAA,GACAnkC,eAAAokC,KAEA,GACAj8C,CACA,EQxCqDqjC,EAAWuf,EAAa+E,EAAgB/jD,EAAqBskD,EAAiBlB,cAAc,CACzI,CAKA,MAAQoC,CAAAA,EAAAA,GAAAA,IAAAA,EAAKvN,GAAcwN,QAAQ,CAAE,CAAEjpD,MAAO4yB,EAAS2W,SAAU,CAAC1E,GAAiBjS,EAAQhzB,aAAa,CAAI0lC,CAAAA,EAAAA,GAAAA,GAAAA,EAAIT,EAAe,CAAEjlC,cAAegzB,EAAQhzB,aAAa,CAAE,GAAG2nD,CAAc,GAAO,KAAML,EAAUjkB,EAAW5iC,GPlDlOT,EOkDmQgzB,EAAQhzB,aAAa,CPjD7Q,GAAAmlC,GAAAM,WAAA,EAAW,IACtBpJ,GAAAumB,EAAA3tB,KAAA,EAAA2tB,EAAA3tB,KAAA,CAAAoH,GACAr8B,IACAq8B,EACAr8B,EAAAi1B,KAAA,CAAAoH,GAGAr8B,EAAAo1B,OAAA,IO0C0RsyB,IPtC1R,mBOsC0RA,EPrC1RA,EAAArrB,GAEqB9C,GOmCqQmuB,IPlC1RA,CAAAA,EAAA9mD,OAAA,CAAAy7B,CAAA,EAGA,EAMA,CAAAr8B,EAAA,GOyBwS4iD,EAAa9jD,EAAUk0B,EAAQhzB,aAAa,EAAE,EAClV,GAGA,OADAwnD,CAAyB,CAAC1K,GAAsB,CAAGzZ,EAC5CmkB,CACX,E0BnDA,CAD8B,GAFHtK,GAAc7Z,GAC3Bke,GACAG,EAEd,CACA/9C,kBAAAA,EACA2jD,UAAuBgC,SDPvBnC,EAAA,IAsBA,MArBA,CAAA9jB,EAAA5iC,EAAA+4B,EAAA,CAAgD1J,aAAAA,CAAA,CAAc,CAAAhxB,KAI9D,IAAAyqD,EAAAC,CAH+BtM,GAAc7Z,GDH7C,SAAA5iC,CAAA,CAAAmiD,CAAA,CAAA6G,CAAA,CAAApmB,CAAA,EACA,IAAAkmB,EAAwB,GAAApkB,GAAA6iB,OAAA,EAAO,KAC/B,IAAA/nD,EAAsBq/C,KAEtB,OADQgB,GAAargD,EAAA2iD,EAAqB/B,GAAQxd,GAAA5iC,EAAAugC,iBAAA,EAClD,CACA,GAAA/gC,EAAAy9C,KAAA,CACAruB,MAAA,CAAqB,GAAApvB,EAAAovB,KAAA,CACrB,CACA,EAAK,CAAAuzB,EAAA,EACL,GAAAniD,EAAA4uB,KAAA,EACA,IAAAq6B,EAAA,GACQ/H,GAAiB+H,EAAAjpD,EAAA4uB,KAAA,CAAA5uB,GACzB8oD,EAAAl6B,KAAA,EAA8B,GAAAq6B,CAAA,IAAAH,EAAAl6B,KAAA,CAC9B,CACA,OAAAk6B,CACA,EHSA,SAAA9oD,CAAA,CAAAmiD,CAAA,EAEA,IAAA+G,EAAA,GACAt6B,EAAAu6B,SAbAnpD,CAAA,CAAAmiD,CAAA,EACA,IAAA7N,EAAAt0C,EAAA4uB,KAAA,KACAA,EAAA,GAMA,OAFAsyB,GAAAtyB,EAAA0lB,EAAAt0C,GACAuN,OAAA01B,MAAA,CAAArU,EAAAw6B,SAdA,CAAkC7oB,kBAAAA,CAAA,CAAmB,CAAA4hB,CAAA,EACrD,MAAW,GAAAzd,GAAA6iB,OAAA,EAAO,KAClB,IAAA/nD,EAAsBo/C,KAEtB,OADQK,GAAez/C,EAAA2iD,EAAA5hB,GACvBhzB,OAAA01B,MAAA,IAA+BzjC,EAAAm9C,IAAA,CAAAn9C,EAAAovB,KAAA,CAC/B,EAAK,CAAAuzB,EAAA,CACL,EAQAniD,EAAAmiD,IACAvzB,CACA,EAIA5uB,EAAAmiD,GAoBA,OAnBAniD,EAAAy4B,IAAA,EAAAz4B,CAAA,IAAAA,EAAA4gC,YAAA,GAEAsoB,EAAAG,SAAA,IAEAz6B,EAAA06B,UAAA,CACA16B,EAAA26B,gBAAA,CACA36B,EAAA46B,kBAAA,CACA,OAEA56B,EAAA66B,WAAA,CACAzpD,CAAA,IAAAA,EAAAy4B,IAAA,CACA,OACA,OAAyBz4B,MAAAA,EAAAy4B,IAAA,SAA+B,GAExDp4B,KAAAA,IAAAL,EAAA0pD,QAAA,EACA1pD,CAAAA,EAAAq4C,KAAA,EAAAr4C,EAAAk5C,UAAA,EAAAl5C,EAAAwxB,QAAA,GACA03B,CAAAA,EAAAQ,QAAA,IAEAR,EAAAt6B,KAAA,CAAAA,EACAs6B,CACA,CI3Cc,EACdlpD,EAAAqvB,EAAAhxB,EAAAukC,GACA+mB,EAA8BC,SFoB9B5pD,CAAA,CAAA6pD,CAAA,CAAAnD,CAAA,EACA,IAAAiD,EAAA,GACA,QAAA/pD,KAAAI,EAQAJ,CAAAA,WAAAA,GAAA,iBAAAI,EAAAP,MAAA,GAEA4hD,CAAAA,GAAAzhD,IACA8mD,CAAA,IAAAA,GAA4CtF,GAAiBxhD,IAC7D,CAAAiqD,GAAA,CAAwBzI,GAAiBxhD,IAEzCI,EAAA,WACAJ,EAAAsC,UAAA,aACAynD,CAAAA,CAAA,CAAA/pD,EAAA,CACAI,CAAA,CAAAJ,EAAA,EAGA,OAAA+pD,CACA,EE3CyC3pD,EAAA,iBAAA4iC,EAAA8jB,GACzCoD,EAAAlnB,IAA2C8B,GAAA+hB,QAAQ,CACnD,CAAgB,GAAAkD,CAAA,IAAAb,CAAA,CAAA/vB,IAAAA,CAAA,EAChB,GAMA,CAAgBmQ,SAAAA,CAAA,EAAWlpC,EAC3B+pD,EAAiC,GAAArlB,GAAA6iB,OAAA,EAAO,IAAQ/4B,GAAa0a,GAAAA,EAAArpC,GAAA,GAAAqpC,EAAA,CAAAA,EAAA,EAC7D,MAAe,GAAAxE,GAAAslB,aAAA,EAAapnB,EAAA,CAC5B,GAAAknB,CAAA,CACA5gB,SAAA6gB,CACA,EACA,CAEA,EChBsCrD,GACtCvjD,oBAAAA,EACAy/B,UAAAA,CACA,EAEA,iGajBA,IAAAqnB,EAAcC,EAAA7jD,CAAI,CAClB8jD,EAAgBD,EAAA7jD,CAAI,wDCHpB,IAAAmhD,EAAA,oBAAAx7C,8DCAA,IAAA5F,EAAA,GAAAgkD,wECSA,SAAAC,EAAAz+B,CAAA,EACA,IAAAmN,EAAgB,GAAAuxB,EAAArC,MAAA,EAAM,MAItB,OAHA,OAAAlvB,EAAA54B,OAAA,EACA44B,CAAAA,EAAA54B,OAAA,CAAAyrB,GAAA,EAEAmN,EAAA54B,OAAA,wECXA,IAAAoqD,EAAkCC,SAAApH,CAAS,CAAGkH,EAAAG,eAAe,CAAGH,EAAAvlB,SAAS","sources":["webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/context/LayoutGroupContext.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/context/MotionConfigContext.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/context/PresenceContext.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/components/create-proxy.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/utils/is-animation-controls.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/utils/is-keyframes-target.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/shallow-compare.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/utils/is-variant-label.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/utils/resolve-variants.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/utils/resolve-dynamic-variants.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/utils/variant-props.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/html/utils/transform.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/time-conversion.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/utils/default-transitions.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/utils/transitions.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/GlobalConfig.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/use-instant-transition-state.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/animators/waapi/utils/get-final-keyframe.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/frameloop/render-step.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/frameloop/batcher.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/frameloop/frame.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/is-zero-value-string.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/utils/is-none.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/is-numerical-string.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/dom/utils/is-css-variable.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/clamp.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/value/types/numbers/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/value/types/utils.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/value/types/numbers/units.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/dom/utils/unit-conversion.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/dom/value-types/test.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/dom/value-types/type-auto.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/dom/value-types/dimensions.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/utils/KeyframesResolver.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/value/types/color/utils.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/value/types/color/rgba.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/value/types/color/hex.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/value/types/color/hsla.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/value/types/color/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/value/types/complex/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/value/types/complex/filter.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/dom/value-types/type-int.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/dom/value-types/number.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/dom/value-types/defaults.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/dom/value-types/animatable-none.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/html/utils/make-none-animatable.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/dom/DOMKeyframesResolver.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/memo.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/frameloop/sync-time.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/utils/is-animatable.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/animators/utils/can-animate.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/animators/BaseAnimation.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/velocity-per-second.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/generators/utils/velocity.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/generators/spring/find.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/generators/spring/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/generators/inertia.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/easing/cubic-bezier.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/easing/ease.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/easing/utils/is-easing-array.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/easing/modifiers/mirror.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/easing/modifiers/reverse.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/easing/circ.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/easing/back.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/easing/anticipate.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/easing/utils/map.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/pipe.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/progress.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/mix/number.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/hsla-to-rgba.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/mix/immediate.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/mix/color.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/mix/visibility.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/mix/complex.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/mix/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/interpolate.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/offsets/fill.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/offsets/default.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/offsets/time.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/generators/keyframes.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/generators/utils/calc-duration.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/animators/drivers/driver-frameloop.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/animators/MainThreadAnimation.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/animators/utils/accelerated-values.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/easing/utils/is-bezier-definition.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/animators/waapi/easing.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/animators/waapi/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/animators/AcceleratedAnimation.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/dom/scroll/observe.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/dom/scroll/supports.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/GroupPlaybackControls.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/interfaces/motion-value.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/resolve-value.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/array.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/subscription-manager.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/value/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/utils/setters.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/dom/utils/camel-to-dash.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/optimized-appear/data-id.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/optimized-appear/get-appear-id.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/value/use-will-change/get-will-change-name.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/value/use-will-change/WillChangeMotionValue.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/value/utils/is-motion-value.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/value/use-will-change/is.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/value/use-will-change/add-will-change.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/interfaces/visual-element-target.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/interfaces/visual-element-variant.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/interfaces/visual-element.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/utils/animation-state.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/motion/features/Feature.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/motion/features/animation/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/motion/features/animation/exit.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/motion/features/animations.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/events/utils/is-primary-pointer.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/events/event-info.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/events/add-dom-event.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/events/add-pointer-event.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/distance.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/gestures/pan/PanSession.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/gestures/drag/utils/lock.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/is-ref-object.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/projection/geometry/delta-calc.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/projection/geometry/models.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/projection/utils/each-axis.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/projection/geometry/conversion.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/projection/utils/has-transform.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/projection/utils/measure.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/get-context-window.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/gestures/drag/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/gestures/pan/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/context/SwitchLayoutGroupContext.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/projection/node/state.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/projection/styles/scale-border-radius.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/projection/styles/scale-correction.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/frameloop/microtask.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/projection/animation/mix-values.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/projection/geometry/copy.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/projection/geometry/delta-remove.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/projection/geometry/utils.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/projection/shared/stack.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/projection/styles/transform.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/utils/compare-by-depth.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/utils/flat-tree.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/value/utils/resolve-motion-value.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/delay.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/dom/utils/is-svg-element.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/interfaces/single-value.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/projection/node/DocumentProjectionNode.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/projection/node/HTMLProjectionNode.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/motion/features/drag.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/gestures/hover.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/gestures/focus.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/gestures/utils/is-node-or-child.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/gestures/press.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/motion/features/viewport/observers.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/motion/features/viewport/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/motion/features/gestures.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/motion/features/layout.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/context/MotionContext/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/context/LazyContext.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/motion/utils/use-visual-element.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/utils/is-controlling-variants.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/context/MotionContext/utils.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/context/MotionContext/create.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/motion/features/definitions.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/motion/features/load-features.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/motion/utils/symbol.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/motion/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/svg/lowercase-elements.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/dom/utils/is-svg-component.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/html/utils/render.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/svg/utils/camel-case-attrs.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/svg/utils/render.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/motion/utils/is-forced-motion-value.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/html/utils/scrape-motion-values.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/svg/utils/scrape-motion-values.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/html/utils/create-render-state.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/svg/utils/create-render-state.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/dom/value-types/get-as-type.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/html/utils/build-styles.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/svg/utils/transform-origin.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/svg/utils/path.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/svg/utils/is-svg-tag.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/svg/config-motion.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/html/config-motion.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/html/use-props.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/motion/utils/valid-prop.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/dom/utils/filter-props.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/svg/use-props.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/dom/use-render.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/components/create-factory.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/reduced-motion/state.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/reduced-motion/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/utils/motion-values.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/store.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/dom/value-types/find.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/VisualElement.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/dom/DOMVisualElement.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/html/HTMLVisualElement.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/svg/SVGVisualElement.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/dom/create-visual-element.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/components/motion/create.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/components/motion/proxy.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/errors.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/is-browser.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/noop.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/use-constant.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.5.4_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs"],"sourcesContent":["\"use client\";\nimport { createContext } from 'react';\n\nconst LayoutGroupContext = createContext({});\n\nexport { LayoutGroupContext };\n","\"use client\";\nimport { createContext } from 'react';\n\n/**\n * @public\n */\nconst MotionConfigContext = createContext({\n    transformPagePoint: (p) => p,\n    isStatic: false,\n    reducedMotion: \"never\",\n});\n\nexport { MotionConfigContext };\n","\"use client\";\nimport { createContext } from 'react';\n\n/**\n * @public\n */\nconst PresenceContext = createContext(null);\n\nexport { PresenceContext };\n","import { warnOnce } from '../../utils/warn-once.mjs';\n\nfunction createDOMMotionComponentProxy(componentFactory) {\n    if (typeof Proxy === \"undefined\") {\n        return componentFactory;\n    }\n    /**\n     * A cache of generated `motion` components, e.g `motion.div`, `motion.input` etc.\n     * Rather than generating them anew every render.\n     */\n    const componentCache = new Map();\n    const deprecatedFactoryFunction = (...args) => {\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(false, \"motion() is deprecated. Use motion.create() instead.\");\n        }\n        return componentFactory(...args);\n    };\n    return new Proxy(deprecatedFactoryFunction, {\n        /**\n         * Called when `motion` is referenced with a prop: `motion.div`, `motion.input` etc.\n         * The prop name is passed through as `key` and we can use that to generate a `motion`\n         * DOM component with that name.\n         */\n        get: (_target, key) => {\n            if (key === \"create\")\n                return componentFactory;\n            /**\n             * If this element doesn't exist in the component cache, create it and cache.\n             */\n            if (!componentCache.has(key)) {\n                componentCache.set(key, componentFactory(key));\n            }\n            return componentCache.get(key);\n        },\n    });\n}\n\nexport { createDOMMotionComponentProxy };\n","function isAnimationControls(v) {\n    return (v !== null &&\n        typeof v === \"object\" &&\n        typeof v.start === \"function\");\n}\n\nexport { isAnimationControls };\n","const isKeyframesTarget = (v) => {\n    return Array.isArray(v);\n};\n\nexport { isKeyframesTarget };\n","function shallowCompare(next, prev) {\n    if (!Array.isArray(prev))\n        return false;\n    const prevLength = prev.length;\n    if (prevLength !== next.length)\n        return false;\n    for (let i = 0; i < prevLength; i++) {\n        if (prev[i] !== next[i])\n            return false;\n    }\n    return true;\n}\n\nexport { shallowCompare };\n","/**\n * Decides if the supplied variable is variant label\n */\nfunction isVariantLabel(v) {\n    return typeof v === \"string\" || Array.isArray(v);\n}\n\nexport { isVariantLabel };\n","function getValueState(visualElement) {\n    const state = [{}, {}];\n    visualElement === null || visualElement === void 0 ? void 0 : visualElement.values.forEach((value, key) => {\n        state[0][key] = value.get();\n        state[1][key] = value.getVelocity();\n    });\n    return state;\n}\nfunction resolveVariantFromProps(props, definition, custom, visualElement) {\n    /**\n     * If the variant definition is a function, resolve.\n     */\n    if (typeof definition === \"function\") {\n        const [current, velocity] = getValueState(visualElement);\n        definition = definition(custom !== undefined ? custom : props.custom, current, velocity);\n    }\n    /**\n     * If the variant definition is a variant label, or\n     * the function returned a variant label, resolve.\n     */\n    if (typeof definition === \"string\") {\n        definition = props.variants && props.variants[definition];\n    }\n    /**\n     * At this point we've resolved both functions and variant labels,\n     * but the resolved variant label might itself have been a function.\n     * If so, resolve. This can only have returned a valid target object.\n     */\n    if (typeof definition === \"function\") {\n        const [current, velocity] = getValueState(visualElement);\n        definition = definition(custom !== undefined ? custom : props.custom, current, velocity);\n    }\n    return definition;\n}\n\nexport { resolveVariantFromProps };\n","import { resolveVariantFromProps } from './resolve-variants.mjs';\n\nfunction resolveVariant(visualElement, definition, custom) {\n    const props = visualElement.getProps();\n    return resolveVariantFromProps(props, definition, custom !== undefined ? custom : props.custom, visualElement);\n}\n\nexport { resolveVariant };\n","const variantPriorityOrder = [\n    \"animate\",\n    \"whileInView\",\n    \"whileFocus\",\n    \"whileHover\",\n    \"whileTap\",\n    \"whileDrag\",\n    \"exit\",\n];\nconst variantProps = [\"initial\", ...variantPriorityOrder];\n\nexport { variantPriorityOrder, variantProps };\n","/**\n * Generate a list of every possible transform key.\n */\nconst transformPropOrder = [\n    \"transformPerspective\",\n    \"x\",\n    \"y\",\n    \"z\",\n    \"translateX\",\n    \"translateY\",\n    \"translateZ\",\n    \"scale\",\n    \"scaleX\",\n    \"scaleY\",\n    \"rotate\",\n    \"rotateX\",\n    \"rotateY\",\n    \"rotateZ\",\n    \"skew\",\n    \"skewX\",\n    \"skewY\",\n];\n/**\n * A quick lookup for transform props.\n */\nconst transformProps = new Set(transformPropOrder);\n\nexport { transformPropOrder, transformProps };\n","/**\n * Converts seconds to milliseconds\n *\n * @param seconds - Time in seconds.\n * @return milliseconds - Converted time in milliseconds.\n */\nconst secondsToMilliseconds = (seconds) => seconds * 1000;\nconst millisecondsToSeconds = (milliseconds) => milliseconds / 1000;\n\nexport { millisecondsToSeconds, secondsToMilliseconds };\n","import { transformProps } from '../../render/html/utils/transform.mjs';\n\nconst underDampedSpring = {\n    type: \"spring\",\n    stiffness: 500,\n    damping: 25,\n    restSpeed: 10,\n};\nconst criticallyDampedSpring = (target) => ({\n    type: \"spring\",\n    stiffness: 550,\n    damping: target === 0 ? 2 * Math.sqrt(550) : 30,\n    restSpeed: 10,\n});\nconst keyframesTransition = {\n    type: \"keyframes\",\n    duration: 0.8,\n};\n/**\n * Default easing curve is a slightly shallower version of\n * the default browser easing curve.\n */\nconst ease = {\n    type: \"keyframes\",\n    ease: [0.25, 0.1, 0.35, 1],\n    duration: 0.3,\n};\nconst getDefaultTransition = (valueKey, { keyframes }) => {\n    if (keyframes.length > 2) {\n        return keyframesTransition;\n    }\n    else if (transformProps.has(valueKey)) {\n        return valueKey.startsWith(\"scale\")\n            ? criticallyDampedSpring(keyframes[1])\n            : underDampedSpring;\n    }\n    return ease;\n};\n\nexport { getDefaultTransition };\n","/**\n * Decide whether a transition is defined on a given Transition.\n * This filters out orchestration options and returns true\n * if any options are left.\n */\nfunction isTransitionDefined({ when, delay: _delay, delayChildren, staggerChildren, staggerDirection, repeat, repeatType, repeatDelay, from, elapsed, ...transition }) {\n    return !!Object.keys(transition).length;\n}\nfunction getValueTransition(transition, key) {\n    return (transition[key] ||\n        transition[\"default\"] ||\n        transition);\n}\n\nexport { getValueTransition, isTransitionDefined };\n","const MotionGlobalConfig = {\n    skipAnimations: false,\n    useManualTiming: false,\n};\n\nexport { MotionGlobalConfig };\n","const instantAnimationState = {\n    current: false,\n};\n\nexport { instantAnimationState };\n","const isNotNull = (value) => value !== null;\nfunction getFinalKeyframe(keyframes, { repeat, repeatType = \"loop\" }, finalKeyframe) {\n    const resolvedKeyframes = keyframes.filter(isNotNull);\n    const index = repeat && repeatType !== \"loop\" && repeat % 2 === 1\n        ? 0\n        : resolvedKeyframes.length - 1;\n    return !index || finalKeyframe === undefined\n        ? resolvedKeyframes[index]\n        : finalKeyframe;\n}\n\nexport { getFinalKeyframe };\n","function createRenderStep(runNextFrame) {\n    /**\n     * We create and reuse two queues, one to queue jobs for the current frame\n     * and one for the next. We reuse to avoid triggering GC after x frames.\n     */\n    let thisFrame = new Set();\n    let nextFrame = new Set();\n    /**\n     * Track whether we're currently processing jobs in this step. This way\n     * we can decide whether to schedule new jobs for this frame or next.\n     */\n    let isProcessing = false;\n    let flushNextFrame = false;\n    /**\n     * A set of processes which were marked keepAlive when scheduled.\n     */\n    const toKeepAlive = new WeakSet();\n    let latestFrameData = {\n        delta: 0.0,\n        timestamp: 0.0,\n        isProcessing: false,\n    };\n    function triggerCallback(callback) {\n        if (toKeepAlive.has(callback)) {\n            step.schedule(callback);\n            runNextFrame();\n        }\n        callback(latestFrameData);\n    }\n    const step = {\n        /**\n         * Schedule a process to run on the next frame.\n         */\n        schedule: (callback, keepAlive = false, immediate = false) => {\n            const addToCurrentFrame = immediate && isProcessing;\n            const queue = addToCurrentFrame ? thisFrame : nextFrame;\n            if (keepAlive)\n                toKeepAlive.add(callback);\n            if (!queue.has(callback))\n                queue.add(callback);\n            return callback;\n        },\n        /**\n         * Cancel the provided callback from running on the next frame.\n         */\n        cancel: (callback) => {\n            nextFrame.delete(callback);\n            toKeepAlive.delete(callback);\n        },\n        /**\n         * Execute all schedule callbacks.\n         */\n        process: (frameData) => {\n            latestFrameData = frameData;\n            /**\n             * If we're already processing we've probably been triggered by a flushSync\n             * inside an existing process. Instead of executing, mark flushNextFrame\n             * as true and ensure we flush the following frame at the end of this one.\n             */\n            if (isProcessing) {\n                flushNextFrame = true;\n                return;\n            }\n            isProcessing = true;\n            [thisFrame, nextFrame] = [nextFrame, thisFrame];\n            // Clear the next frame queue\n            nextFrame.clear();\n            // Execute this frame\n            thisFrame.forEach(triggerCallback);\n            isProcessing = false;\n            if (flushNextFrame) {\n                flushNextFrame = false;\n                step.process(frameData);\n            }\n        },\n    };\n    return step;\n}\n\nexport { createRenderStep };\n","import { MotionGlobalConfig } from '../utils/GlobalConfig.mjs';\nimport { createRenderStep } from './render-step.mjs';\n\nconst stepsOrder = [\n    \"read\", // Read\n    \"resolveKeyframes\", // Write/Read/Write/Read\n    \"update\", // Compute\n    \"preRender\", // Compute\n    \"render\", // Write\n    \"postRender\", // Compute\n];\nconst maxElapsed = 40;\nfunction createRenderBatcher(scheduleNextBatch, allowKeepAlive) {\n    let runNextFrame = false;\n    let useDefaultElapsed = true;\n    const state = {\n        delta: 0.0,\n        timestamp: 0.0,\n        isProcessing: false,\n    };\n    const flagRunNextFrame = () => (runNextFrame = true);\n    const steps = stepsOrder.reduce((acc, key) => {\n        acc[key] = createRenderStep(flagRunNextFrame);\n        return acc;\n    }, {});\n    const { read, resolveKeyframes, update, preRender, render, postRender } = steps;\n    const processBatch = () => {\n        const timestamp = MotionGlobalConfig.useManualTiming\n            ? state.timestamp\n            : performance.now();\n        runNextFrame = false;\n        state.delta = useDefaultElapsed\n            ? 1000 / 60\n            : Math.max(Math.min(timestamp - state.timestamp, maxElapsed), 1);\n        state.timestamp = timestamp;\n        state.isProcessing = true;\n        // Unrolled render loop for better per-frame performance\n        read.process(state);\n        resolveKeyframes.process(state);\n        update.process(state);\n        preRender.process(state);\n        render.process(state);\n        postRender.process(state);\n        state.isProcessing = false;\n        if (runNextFrame && allowKeepAlive) {\n            useDefaultElapsed = false;\n            scheduleNextBatch(processBatch);\n        }\n    };\n    const wake = () => {\n        runNextFrame = true;\n        useDefaultElapsed = true;\n        if (!state.isProcessing) {\n            scheduleNextBatch(processBatch);\n        }\n    };\n    const schedule = stepsOrder.reduce((acc, key) => {\n        const step = steps[key];\n        acc[key] = (process, keepAlive = false, immediate = false) => {\n            if (!runNextFrame)\n                wake();\n            return step.schedule(process, keepAlive, immediate);\n        };\n        return acc;\n    }, {});\n    const cancel = (process) => {\n        for (let i = 0; i < stepsOrder.length; i++) {\n            steps[stepsOrder[i]].cancel(process);\n        }\n    };\n    return { schedule, cancel, state, steps };\n}\n\nexport { createRenderBatcher, stepsOrder };\n","import { noop } from '../utils/noop.mjs';\nimport { createRenderBatcher } from './batcher.mjs';\n\nconst { schedule: frame, cancel: cancelFrame, state: frameData, steps, } = createRenderBatcher(typeof requestAnimationFrame !== \"undefined\" ? requestAnimationFrame : noop, true);\n\nexport { cancelFrame, frame, frameData, steps };\n","/**\n * Check if the value is a zero value string like \"0px\" or \"0%\"\n */\nconst isZeroValueString = (v) => /^0[^.\\s]+$/u.test(v);\n\nexport { isZeroValueString };\n","import { isZeroValueString } from '../../utils/is-zero-value-string.mjs';\n\nfunction isNone(value) {\n    if (typeof value === \"number\") {\n        return value === 0;\n    }\n    else if (value !== null) {\n        return value === \"none\" || value === \"0\" || isZeroValueString(value);\n    }\n    else {\n        return true;\n    }\n}\n\nexport { isNone };\n","/**\n * Check if value is a numerical string, ie a string that is purely a number eg \"100\" or \"-100.1\"\n */\nconst isNumericalString = (v) => /^-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)$/u.test(v);\n\nexport { isNumericalString };\n","const checkStringStartsWith = (token) => (key) => typeof key === \"string\" && key.startsWith(token);\nconst isCSSVariableName = checkStringStartsWith(\"--\");\nconst startsAsVariableToken = checkStringStartsWith(\"var(--\");\nconst isCSSVariableToken = (value) => {\n    const startsWithToken = startsAsVariableToken(value);\n    if (!startsWithToken)\n        return false;\n    // Ensure any comments are stripped from the value as this can harm performance of the regex.\n    return singleCssVariableRegex.test(value.split(\"/*\")[0].trim());\n};\nconst singleCssVariableRegex = /var\\(--(?:[\\w-]+\\s*|[\\w-]+\\s*,(?:\\s*[^)(\\s]|\\s*\\((?:[^)(]|\\([^)(]*\\))*\\))+\\s*)\\)$/iu;\n\nexport { isCSSVariableName, isCSSVariableToken };\n","import { invariant } from '../../../utils/errors.mjs';\nimport { isNumericalString } from '../../../utils/is-numerical-string.mjs';\nimport { isCSSVariableToken } from './is-css-variable.mjs';\n\n/**\n * Parse Framer's special CSS variable format into a CSS token and a fallback.\n *\n * ```\n * `var(--foo, #fff)` => [`--foo`, '#fff']\n * ```\n *\n * @param current\n */\nconst splitCSSVariableRegex = \n// eslint-disable-next-line redos-detector/no-unsafe-regex -- false positive, as it can match a lot of words\n/^var\\(--(?:([\\w-]+)|([\\w-]+), ?([a-zA-Z\\d ()%#.,-]+))\\)/u;\nfunction parseCSSVariable(current) {\n    const match = splitCSSVariableRegex.exec(current);\n    if (!match)\n        return [,];\n    const [, token1, token2, fallback] = match;\n    return [`--${token1 !== null && token1 !== void 0 ? token1 : token2}`, fallback];\n}\nconst maxDepth = 4;\nfunction getVariableValue(current, element, depth = 1) {\n    invariant(depth <= maxDepth, `Max CSS variable fallback depth detected in property \"${current}\". This may indicate a circular fallback dependency.`);\n    const [token, fallback] = parseCSSVariable(current);\n    // No CSS variable detected\n    if (!token)\n        return;\n    // Attempt to read this CSS variable off the element\n    const resolved = window.getComputedStyle(element).getPropertyValue(token);\n    if (resolved) {\n        const trimmed = resolved.trim();\n        return isNumericalString(trimmed) ? parseFloat(trimmed) : trimmed;\n    }\n    return isCSSVariableToken(fallback)\n        ? getVariableValue(fallback, element, depth + 1)\n        : fallback;\n}\n\nexport { getVariableValue, parseCSSVariable };\n","const clamp = (min, max, v) => {\n    if (v > max)\n        return max;\n    if (v < min)\n        return min;\n    return v;\n};\n\nexport { clamp };\n","import { clamp } from '../../../utils/clamp.mjs';\n\nconst number = {\n    test: (v) => typeof v === \"number\",\n    parse: parseFloat,\n    transform: (v) => v,\n};\nconst alpha = {\n    ...number,\n    transform: (v) => clamp(0, 1, v),\n};\nconst scale = {\n    ...number,\n    default: 1,\n};\n\nexport { alpha, number, scale };\n","/**\n * TODO: When we move from string as a source of truth to data models\n * everything in this folder should probably be referred to as models vs types\n */\n// If this number is a decimal, make it just five decimal places\n// to avoid exponents\nconst sanitize = (v) => Math.round(v * 100000) / 100000;\nconst floatRegex = /-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/gu;\nconst colorRegex = /(?:#[\\da-f]{3,8}|(?:rgb|hsl)a?\\((?:-?[\\d.]+%?[,\\s]+){2}-?[\\d.]+%?\\s*(?:[,/]\\s*)?(?:\\b\\d+(?:\\.\\d+)?|\\.\\d+)?%?\\))/giu;\nconst singleColorRegex = /^(?:#[\\da-f]{3,8}|(?:rgb|hsl)a?\\((?:-?[\\d.]+%?[,\\s]+){2}-?[\\d.]+%?\\s*(?:[,/]\\s*)?(?:\\b\\d+(?:\\.\\d+)?|\\.\\d+)?%?\\))$/iu;\nfunction isString(v) {\n    return typeof v === \"string\";\n}\nfunction isNullish(v) {\n    return v == null;\n}\n\nexport { colorRegex, floatRegex, isNullish, isString, sanitize, singleColorRegex };\n","import { isString } from '../utils.mjs';\n\nconst createUnitType = (unit) => ({\n    test: (v) => isString(v) && v.endsWith(unit) && v.split(\" \").length === 1,\n    parse: parseFloat,\n    transform: (v) => `${v}${unit}`,\n});\nconst degrees = /*@__PURE__*/ createUnitType(\"deg\");\nconst percent = /*@__PURE__*/ createUnitType(\"%\");\nconst px = /*@__PURE__*/ createUnitType(\"px\");\nconst vh = /*@__PURE__*/ createUnitType(\"vh\");\nconst vw = /*@__PURE__*/ createUnitType(\"vw\");\nconst progressPercentage = {\n    ...percent,\n    parse: (v) => percent.parse(v) / 100,\n    transform: (v) => percent.transform(v * 100),\n};\n\nexport { degrees, percent, progressPercentage, px, vh, vw };\n","import { transformPropOrder } from '../../html/utils/transform.mjs';\nimport { number } from '../../../value/types/numbers/index.mjs';\nimport { px } from '../../../value/types/numbers/units.mjs';\n\nconst positionalKeys = new Set([\n    \"width\",\n    \"height\",\n    \"top\",\n    \"left\",\n    \"right\",\n    \"bottom\",\n    \"x\",\n    \"y\",\n    \"translateX\",\n    \"translateY\",\n]);\nconst isNumOrPxType = (v) => v === number || v === px;\nconst getPosFromMatrix = (matrix, pos) => parseFloat(matrix.split(\", \")[pos]);\nconst getTranslateFromMatrix = (pos2, pos3) => (_bbox, { transform }) => {\n    if (transform === \"none\" || !transform)\n        return 0;\n    const matrix3d = transform.match(/^matrix3d\\((.+)\\)$/u);\n    if (matrix3d) {\n        return getPosFromMatrix(matrix3d[1], pos3);\n    }\n    else {\n        const matrix = transform.match(/^matrix\\((.+)\\)$/u);\n        if (matrix) {\n            return getPosFromMatrix(matrix[1], pos2);\n        }\n        else {\n            return 0;\n        }\n    }\n};\nconst transformKeys = new Set([\"x\", \"y\", \"z\"]);\nconst nonTranslationalTransformKeys = transformPropOrder.filter((key) => !transformKeys.has(key));\nfunction removeNonTranslationalTransform(visualElement) {\n    const removedTransforms = [];\n    nonTranslationalTransformKeys.forEach((key) => {\n        const value = visualElement.getValue(key);\n        if (value !== undefined) {\n            removedTransforms.push([key, value.get()]);\n            value.set(key.startsWith(\"scale\") ? 1 : 0);\n        }\n    });\n    return removedTransforms;\n}\nconst positionalValues = {\n    // Dimensions\n    width: ({ x }, { paddingLeft = \"0\", paddingRight = \"0\" }) => x.max - x.min - parseFloat(paddingLeft) - parseFloat(paddingRight),\n    height: ({ y }, { paddingTop = \"0\", paddingBottom = \"0\" }) => y.max - y.min - parseFloat(paddingTop) - parseFloat(paddingBottom),\n    top: (_bbox, { top }) => parseFloat(top),\n    left: (_bbox, { left }) => parseFloat(left),\n    bottom: ({ y }, { top }) => parseFloat(top) + (y.max - y.min),\n    right: ({ x }, { left }) => parseFloat(left) + (x.max - x.min),\n    // Transform\n    x: getTranslateFromMatrix(4, 13),\n    y: getTranslateFromMatrix(5, 14),\n};\n// Alias translate longform names\npositionalValues.translateX = positionalValues.x;\npositionalValues.translateY = positionalValues.y;\n\nexport { isNumOrPxType, positionalKeys, positionalValues, removeNonTranslationalTransform };\n","/**\n * Tests a provided value against a ValueType\n */\nconst testValueType = (v) => (type) => type.test(v);\n\nexport { testValueType };\n","/**\n * ValueType for \"auto\"\n */\nconst auto = {\n    test: (v) => v === \"auto\",\n    parse: (v) => v,\n};\n\nexport { auto };\n","import { number } from '../../../value/types/numbers/index.mjs';\nimport { px, percent, degrees, vw, vh } from '../../../value/types/numbers/units.mjs';\nimport { testValueType } from './test.mjs';\nimport { auto } from './type-auto.mjs';\n\n/**\n * A list of value types commonly used for dimensions\n */\nconst dimensionValueTypes = [number, px, percent, degrees, vw, vh, auto];\n/**\n * Tests a dimensional value against the list of dimension ValueTypes\n */\nconst findDimensionValueType = (v) => dimensionValueTypes.find(testValueType(v));\n\nexport { dimensionValueTypes, findDimensionValueType };\n","import { removeNonTranslationalTransform } from '../dom/utils/unit-conversion.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\nconst toResolve = new Set();\nlet isScheduled = false;\nlet anyNeedsMeasurement = false;\nfunction measureAllKeyframes() {\n    if (anyNeedsMeasurement) {\n        const resolversToMeasure = Array.from(toResolve).filter((resolver) => resolver.needsMeasurement);\n        const elementsToMeasure = new Set(resolversToMeasure.map((resolver) => resolver.element));\n        const transformsToRestore = new Map();\n        /**\n         * Write pass\n         * If we're measuring elements we want to remove bounding box-changing transforms.\n         */\n        elementsToMeasure.forEach((element) => {\n            const removedTransforms = removeNonTranslationalTransform(element);\n            if (!removedTransforms.length)\n                return;\n            transformsToRestore.set(element, removedTransforms);\n            element.render();\n        });\n        // Read\n        resolversToMeasure.forEach((resolver) => resolver.measureInitialState());\n        // Write\n        elementsToMeasure.forEach((element) => {\n            element.render();\n            const restore = transformsToRestore.get(element);\n            if (restore) {\n                restore.forEach(([key, value]) => {\n                    var _a;\n                    (_a = element.getValue(key)) === null || _a === void 0 ? void 0 : _a.set(value);\n                });\n            }\n        });\n        // Read\n        resolversToMeasure.forEach((resolver) => resolver.measureEndState());\n        // Write\n        resolversToMeasure.forEach((resolver) => {\n            if (resolver.suspendedScrollY !== undefined) {\n                window.scrollTo(0, resolver.suspendedScrollY);\n            }\n        });\n    }\n    anyNeedsMeasurement = false;\n    isScheduled = false;\n    toResolve.forEach((resolver) => resolver.complete());\n    toResolve.clear();\n}\nfunction readAllKeyframes() {\n    toResolve.forEach((resolver) => {\n        resolver.readKeyframes();\n        if (resolver.needsMeasurement) {\n            anyNeedsMeasurement = true;\n        }\n    });\n}\nfunction flushKeyframeResolvers() {\n    readAllKeyframes();\n    measureAllKeyframes();\n}\nclass KeyframeResolver {\n    constructor(unresolvedKeyframes, onComplete, name, motionValue, element, isAsync = false) {\n        /**\n         * Track whether this resolver has completed. Once complete, it never\n         * needs to attempt keyframe resolution again.\n         */\n        this.isComplete = false;\n        /**\n         * Track whether this resolver is async. If it is, it'll be added to the\n         * resolver queue and flushed in the next frame. Resolvers that aren't going\n         * to trigger read/write thrashing don't need to be async.\n         */\n        this.isAsync = false;\n        /**\n         * Track whether this resolver needs to perform a measurement\n         * to resolve its keyframes.\n         */\n        this.needsMeasurement = false;\n        /**\n         * Track whether this resolver is currently scheduled to resolve\n         * to allow it to be cancelled and resumed externally.\n         */\n        this.isScheduled = false;\n        this.unresolvedKeyframes = [...unresolvedKeyframes];\n        this.onComplete = onComplete;\n        this.name = name;\n        this.motionValue = motionValue;\n        this.element = element;\n        this.isAsync = isAsync;\n    }\n    scheduleResolve() {\n        this.isScheduled = true;\n        if (this.isAsync) {\n            toResolve.add(this);\n            if (!isScheduled) {\n                isScheduled = true;\n                frame.read(readAllKeyframes);\n                frame.resolveKeyframes(measureAllKeyframes);\n            }\n        }\n        else {\n            this.readKeyframes();\n            this.complete();\n        }\n    }\n    readKeyframes() {\n        const { unresolvedKeyframes, name, element, motionValue } = this;\n        /**\n         * If a keyframe is null, we hydrate it either by reading it from\n         * the instance, or propagating from previous keyframes.\n         */\n        for (let i = 0; i < unresolvedKeyframes.length; i++) {\n            if (unresolvedKeyframes[i] === null) {\n                /**\n                 * If the first keyframe is null, we need to find its value by sampling the element\n                 */\n                if (i === 0) {\n                    const currentValue = motionValue === null || motionValue === void 0 ? void 0 : motionValue.get();\n                    const finalKeyframe = unresolvedKeyframes[unresolvedKeyframes.length - 1];\n                    if (currentValue !== undefined) {\n                        unresolvedKeyframes[0] = currentValue;\n                    }\n                    else if (element && name) {\n                        const valueAsRead = element.readValue(name, finalKeyframe);\n                        if (valueAsRead !== undefined && valueAsRead !== null) {\n                            unresolvedKeyframes[0] = valueAsRead;\n                        }\n                    }\n                    if (unresolvedKeyframes[0] === undefined) {\n                        unresolvedKeyframes[0] = finalKeyframe;\n                    }\n                    if (motionValue && currentValue === undefined) {\n                        motionValue.set(unresolvedKeyframes[0]);\n                    }\n                }\n                else {\n                    unresolvedKeyframes[i] = unresolvedKeyframes[i - 1];\n                }\n            }\n        }\n    }\n    setFinalKeyframe() { }\n    measureInitialState() { }\n    renderEndStyles() { }\n    measureEndState() { }\n    complete() {\n        this.isComplete = true;\n        this.onComplete(this.unresolvedKeyframes, this.finalKeyframe);\n        toResolve.delete(this);\n    }\n    cancel() {\n        if (!this.isComplete) {\n            this.isScheduled = false;\n            toResolve.delete(this);\n        }\n    }\n    resume() {\n        if (!this.isComplete)\n            this.scheduleResolve();\n    }\n}\n\nexport { KeyframeResolver, flushKeyframeResolvers };\n","import { isString, singleColorRegex, isNullish, floatRegex } from '../utils.mjs';\n\n/**\n * Returns true if the provided string is a color, ie rgba(0,0,0,0) or #000,\n * but false if a number or multiple colors\n */\nconst isColorString = (type, testProp) => (v) => {\n    return Boolean((isString(v) && singleColorRegex.test(v) && v.startsWith(type)) ||\n        (testProp &&\n            !isNullish(v) &&\n            Object.prototype.hasOwnProperty.call(v, testProp)));\n};\nconst splitColor = (aName, bName, cName) => (v) => {\n    if (!isString(v))\n        return v;\n    const [a, b, c, alpha] = v.match(floatRegex);\n    return {\n        [aName]: parseFloat(a),\n        [bName]: parseFloat(b),\n        [cName]: parseFloat(c),\n        alpha: alpha !== undefined ? parseFloat(alpha) : 1,\n    };\n};\n\nexport { isColorString, splitColor };\n","import { clamp } from '../../../utils/clamp.mjs';\nimport { alpha, number } from '../numbers/index.mjs';\nimport { sanitize } from '../utils.mjs';\nimport { isColorString, splitColor } from './utils.mjs';\n\nconst clampRgbUnit = (v) => clamp(0, 255, v);\nconst rgbUnit = {\n    ...number,\n    transform: (v) => Math.round(clampRgbUnit(v)),\n};\nconst rgba = {\n    test: /*@__PURE__*/ isColorString(\"rgb\", \"red\"),\n    parse: /*@__PURE__*/ splitColor(\"red\", \"green\", \"blue\"),\n    transform: ({ red, green, blue, alpha: alpha$1 = 1 }) => \"rgba(\" +\n        rgbUnit.transform(red) +\n        \", \" +\n        rgbUnit.transform(green) +\n        \", \" +\n        rgbUnit.transform(blue) +\n        \", \" +\n        sanitize(alpha.transform(alpha$1)) +\n        \")\",\n};\n\nexport { rgbUnit, rgba };\n","import { rgba } from './rgba.mjs';\nimport { isColorString } from './utils.mjs';\n\nfunction parseHex(v) {\n    let r = \"\";\n    let g = \"\";\n    let b = \"\";\n    let a = \"\";\n    // If we have 6 characters, ie #FF0000\n    if (v.length > 5) {\n        r = v.substring(1, 3);\n        g = v.substring(3, 5);\n        b = v.substring(5, 7);\n        a = v.substring(7, 9);\n        // Or we have 3 characters, ie #F00\n    }\n    else {\n        r = v.substring(1, 2);\n        g = v.substring(2, 3);\n        b = v.substring(3, 4);\n        a = v.substring(4, 5);\n        r += r;\n        g += g;\n        b += b;\n        a += a;\n    }\n    return {\n        red: parseInt(r, 16),\n        green: parseInt(g, 16),\n        blue: parseInt(b, 16),\n        alpha: a ? parseInt(a, 16) / 255 : 1,\n    };\n}\nconst hex = {\n    test: /*@__PURE__*/ isColorString(\"#\"),\n    parse: parseHex,\n    transform: rgba.transform,\n};\n\nexport { hex };\n","import { alpha } from '../numbers/index.mjs';\nimport { percent } from '../numbers/units.mjs';\nimport { sanitize } from '../utils.mjs';\nimport { isColorString, splitColor } from './utils.mjs';\n\nconst hsla = {\n    test: /*@__PURE__*/ isColorString(\"hsl\", \"hue\"),\n    parse: /*@__PURE__*/ splitColor(\"hue\", \"saturation\", \"lightness\"),\n    transform: ({ hue, saturation, lightness, alpha: alpha$1 = 1 }) => {\n        return (\"hsla(\" +\n            Math.round(hue) +\n            \", \" +\n            percent.transform(sanitize(saturation)) +\n            \", \" +\n            percent.transform(sanitize(lightness)) +\n            \", \" +\n            sanitize(alpha.transform(alpha$1)) +\n            \")\");\n    },\n};\n\nexport { hsla };\n","import { isString } from '../utils.mjs';\nimport { hex } from './hex.mjs';\nimport { hsla } from './hsla.mjs';\nimport { rgba } from './rgba.mjs';\n\nconst color = {\n    test: (v) => rgba.test(v) || hex.test(v) || hsla.test(v),\n    parse: (v) => {\n        if (rgba.test(v)) {\n            return rgba.parse(v);\n        }\n        else if (hsla.test(v)) {\n            return hsla.parse(v);\n        }\n        else {\n            return hex.parse(v);\n        }\n    },\n    transform: (v) => {\n        return isString(v)\n            ? v\n            : v.hasOwnProperty(\"red\")\n                ? rgba.transform(v)\n                : hsla.transform(v);\n    },\n};\n\nexport { color };\n","import { color } from '../color/index.mjs';\nimport { isString, floatRegex, colorRegex, sanitize } from '../utils.mjs';\n\nfunction test(v) {\n    var _a, _b;\n    return (isNaN(v) &&\n        isString(v) &&\n        (((_a = v.match(floatRegex)) === null || _a === void 0 ? void 0 : _a.length) || 0) +\n            (((_b = v.match(colorRegex)) === null || _b === void 0 ? void 0 : _b.length) || 0) >\n            0);\n}\nconst NUMBER_TOKEN = \"number\";\nconst COLOR_TOKEN = \"color\";\nconst VAR_TOKEN = \"var\";\nconst VAR_FUNCTION_TOKEN = \"var(\";\nconst SPLIT_TOKEN = \"${}\";\n// this regex consists of the `singleCssVariableRegex|rgbHSLValueRegex|digitRegex`\nconst complexRegex = /var\\s*\\(\\s*--(?:[\\w-]+\\s*|[\\w-]+\\s*,(?:\\s*[^)(\\s]|\\s*\\((?:[^)(]|\\([^)(]*\\))*\\))+\\s*)\\)|#[\\da-f]{3,8}|(?:rgb|hsl)a?\\((?:-?[\\d.]+%?[,\\s]+){2}-?[\\d.]+%?\\s*(?:[,/]\\s*)?(?:\\b\\d+(?:\\.\\d+)?|\\.\\d+)?%?\\)|-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/giu;\nfunction analyseComplexValue(value) {\n    const originalValue = value.toString();\n    const values = [];\n    const indexes = {\n        color: [],\n        number: [],\n        var: [],\n    };\n    const types = [];\n    let i = 0;\n    const tokenised = originalValue.replace(complexRegex, (parsedValue) => {\n        if (color.test(parsedValue)) {\n            indexes.color.push(i);\n            types.push(COLOR_TOKEN);\n            values.push(color.parse(parsedValue));\n        }\n        else if (parsedValue.startsWith(VAR_FUNCTION_TOKEN)) {\n            indexes.var.push(i);\n            types.push(VAR_TOKEN);\n            values.push(parsedValue);\n        }\n        else {\n            indexes.number.push(i);\n            types.push(NUMBER_TOKEN);\n            values.push(parseFloat(parsedValue));\n        }\n        ++i;\n        return SPLIT_TOKEN;\n    });\n    const split = tokenised.split(SPLIT_TOKEN);\n    return { values, split, indexes, types };\n}\nfunction parseComplexValue(v) {\n    return analyseComplexValue(v).values;\n}\nfunction createTransformer(source) {\n    const { split, types } = analyseComplexValue(source);\n    const numSections = split.length;\n    return (v) => {\n        let output = \"\";\n        for (let i = 0; i < numSections; i++) {\n            output += split[i];\n            if (v[i] !== undefined) {\n                const type = types[i];\n                if (type === NUMBER_TOKEN) {\n                    output += sanitize(v[i]);\n                }\n                else if (type === COLOR_TOKEN) {\n                    output += color.transform(v[i]);\n                }\n                else {\n                    output += v[i];\n                }\n            }\n        }\n        return output;\n    };\n}\nconst convertNumbersToZero = (v) => typeof v === \"number\" ? 0 : v;\nfunction getAnimatableNone(v) {\n    const parsed = parseComplexValue(v);\n    const transformer = createTransformer(v);\n    return transformer(parsed.map(convertNumbersToZero));\n}\nconst complex = {\n    test,\n    parse: parseComplexValue,\n    createTransformer,\n    getAnimatableNone,\n};\n\nexport { analyseComplexValue, complex };\n","import { complex } from './index.mjs';\nimport { floatRegex } from '../utils.mjs';\n\n/**\n * Properties that should default to 1 or 100%\n */\nconst maxDefaults = new Set([\"brightness\", \"contrast\", \"saturate\", \"opacity\"]);\nfunction applyDefaultFilter(v) {\n    const [name, value] = v.slice(0, -1).split(\"(\");\n    if (name === \"drop-shadow\")\n        return v;\n    const [number] = value.match(floatRegex) || [];\n    if (!number)\n        return v;\n    const unit = value.replace(number, \"\");\n    let defaultValue = maxDefaults.has(name) ? 1 : 0;\n    if (number !== value)\n        defaultValue *= 100;\n    return name + \"(\" + defaultValue + unit + \")\";\n}\nconst functionRegex = /\\b([a-z-]*)\\(.*?\\)/gu;\nconst filter = {\n    ...complex,\n    getAnimatableNone: (v) => {\n        const functions = v.match(functionRegex);\n        return functions ? functions.map(applyDefaultFilter).join(\" \") : v;\n    },\n};\n\nexport { filter };\n","import { number } from '../../../value/types/numbers/index.mjs';\n\nconst int = {\n    ...number,\n    transform: Math.round,\n};\n\nexport { int };\n","import { scale, alpha } from '../../../value/types/numbers/index.mjs';\nimport { px, degrees, progressPercentage } from '../../../value/types/numbers/units.mjs';\nimport { int } from './type-int.mjs';\n\nconst numberValueTypes = {\n    // Border props\n    borderWidth: px,\n    borderTopWidth: px,\n    borderRightWidth: px,\n    borderBottomWidth: px,\n    borderLeftWidth: px,\n    borderRadius: px,\n    radius: px,\n    borderTopLeftRadius: px,\n    borderTopRightRadius: px,\n    borderBottomRightRadius: px,\n    borderBottomLeftRadius: px,\n    // Positioning props\n    width: px,\n    maxWidth: px,\n    height: px,\n    maxHeight: px,\n    size: px,\n    top: px,\n    right: px,\n    bottom: px,\n    left: px,\n    // Spacing props\n    padding: px,\n    paddingTop: px,\n    paddingRight: px,\n    paddingBottom: px,\n    paddingLeft: px,\n    margin: px,\n    marginTop: px,\n    marginRight: px,\n    marginBottom: px,\n    marginLeft: px,\n    // Transform props\n    rotate: degrees,\n    rotateX: degrees,\n    rotateY: degrees,\n    rotateZ: degrees,\n    scale,\n    scaleX: scale,\n    scaleY: scale,\n    scaleZ: scale,\n    skew: degrees,\n    skewX: degrees,\n    skewY: degrees,\n    distance: px,\n    translateX: px,\n    translateY: px,\n    translateZ: px,\n    x: px,\n    y: px,\n    z: px,\n    perspective: px,\n    transformPerspective: px,\n    opacity: alpha,\n    originX: progressPercentage,\n    originY: progressPercentage,\n    originZ: px,\n    // Misc\n    zIndex: int,\n    backgroundPositionX: px,\n    backgroundPositionY: px,\n    // SVG\n    fillOpacity: alpha,\n    strokeOpacity: alpha,\n    numOctaves: int,\n};\n\nexport { numberValueTypes };\n","import { color } from '../../../value/types/color/index.mjs';\nimport { filter } from '../../../value/types/complex/filter.mjs';\nimport { numberValueTypes } from './number.mjs';\n\n/**\n * A map of default value types for common values\n */\nconst defaultValueTypes = {\n    ...numberValueTypes,\n    // Color props\n    color,\n    backgroundColor: color,\n    outlineColor: color,\n    fill: color,\n    stroke: color,\n    // Border props\n    borderColor: color,\n    borderTopColor: color,\n    borderRightColor: color,\n    borderBottomColor: color,\n    borderLeftColor: color,\n    filter,\n    WebkitFilter: filter,\n};\n/**\n * Gets the default ValueType for the provided value key\n */\nconst getDefaultValueType = (key) => defaultValueTypes[key];\n\nexport { defaultValueTypes, getDefaultValueType };\n","import { complex } from '../../../value/types/complex/index.mjs';\nimport { filter } from '../../../value/types/complex/filter.mjs';\nimport { getDefaultValueType } from './defaults.mjs';\n\nfunction getAnimatableNone(key, value) {\n    let defaultValueType = getDefaultValueType(key);\n    if (defaultValueType !== filter)\n        defaultValueType = complex;\n    // If value is not recognised as animatable, ie \"none\", create an animatable version origin based on the target\n    return defaultValueType.getAnimatableNone\n        ? defaultValueType.getAnimatableNone(value)\n        : undefined;\n}\n\nexport { getAnimatableNone };\n","import { analyseComplexValue } from '../../../value/types/complex/index.mjs';\nimport { getAnimatableNone } from '../../dom/value-types/animatable-none.mjs';\n\n/**\n * If we encounter keyframes like \"none\" or \"0\" and we also have keyframes like\n * \"#fff\" or \"200px 200px\" we want to find a keyframe to serve as a template for\n * the \"none\" keyframes. In this case \"#fff\" or \"200px 200px\" - then these get turned into\n * zero equivalents, i.e. \"#fff0\" or \"0px 0px\".\n */\nconst invalidTemplates = new Set([\"auto\", \"none\", \"0\"]);\nfunction makeNoneKeyframesAnimatable(unresolvedKeyframes, noneKeyframeIndexes, name) {\n    let i = 0;\n    let animatableTemplate = undefined;\n    while (i < unresolvedKeyframes.length && !animatableTemplate) {\n        const keyframe = unresolvedKeyframes[i];\n        if (typeof keyframe === \"string\" &&\n            !invalidTemplates.has(keyframe) &&\n            analyseComplexValue(keyframe).values.length) {\n            animatableTemplate = unresolvedKeyframes[i];\n        }\n        i++;\n    }\n    if (animatableTemplate && name) {\n        for (const noneIndex of noneKeyframeIndexes) {\n            unresolvedKeyframes[noneIndex] = getAnimatableNone(name, animatableTemplate);\n        }\n    }\n}\n\nexport { makeNoneKeyframesAnimatable };\n","import { isNone } from '../../animation/utils/is-none.mjs';\nimport { getVariableValue } from './utils/css-variables-conversion.mjs';\nimport { isCSSVariableToken } from './utils/is-css-variable.mjs';\nimport { positionalKeys, isNumOrPxType, positionalValues } from './utils/unit-conversion.mjs';\nimport { findDimensionValueType } from './value-types/dimensions.mjs';\nimport { KeyframeResolver } from '../utils/KeyframesResolver.mjs';\nimport { makeNoneKeyframesAnimatable } from '../html/utils/make-none-animatable.mjs';\n\nclass DOMKeyframesResolver extends KeyframeResolver {\n    constructor(unresolvedKeyframes, onComplete, name, motionValue, element) {\n        super(unresolvedKeyframes, onComplete, name, motionValue, element, true);\n    }\n    readKeyframes() {\n        const { unresolvedKeyframes, element, name } = this;\n        if (!element || !element.current)\n            return;\n        super.readKeyframes();\n        /**\n         * If any keyframe is a CSS variable, we need to find its value by sampling the element\n         */\n        for (let i = 0; i < unresolvedKeyframes.length; i++) {\n            let keyframe = unresolvedKeyframes[i];\n            if (typeof keyframe === \"string\") {\n                keyframe = keyframe.trim();\n                if (isCSSVariableToken(keyframe)) {\n                    const resolved = getVariableValue(keyframe, element.current);\n                    if (resolved !== undefined) {\n                        unresolvedKeyframes[i] = resolved;\n                    }\n                    if (i === unresolvedKeyframes.length - 1) {\n                        this.finalKeyframe = keyframe;\n                    }\n                }\n            }\n        }\n        /**\n         * Resolve \"none\" values. We do this potentially twice - once before and once after measuring keyframes.\n         * This could be seen as inefficient but it's a trade-off to avoid measurements in more situations, which\n         * have a far bigger performance impact.\n         */\n        this.resolveNoneKeyframes();\n        /**\n         * Check to see if unit type has changed. If so schedule jobs that will\n         * temporarily set styles to the destination keyframes.\n         * Skip if we have more than two keyframes or this isn't a positional value.\n         * TODO: We can throw if there are multiple keyframes and the value type changes.\n         */\n        if (!positionalKeys.has(name) || unresolvedKeyframes.length !== 2) {\n            return;\n        }\n        const [origin, target] = unresolvedKeyframes;\n        const originType = findDimensionValueType(origin);\n        const targetType = findDimensionValueType(target);\n        /**\n         * Either we don't recognise these value types or we can animate between them.\n         */\n        if (originType === targetType)\n            return;\n        /**\n         * If both values are numbers or pixels, we can animate between them by\n         * converting them to numbers.\n         */\n        if (isNumOrPxType(originType) && isNumOrPxType(targetType)) {\n            for (let i = 0; i < unresolvedKeyframes.length; i++) {\n                const value = unresolvedKeyframes[i];\n                if (typeof value === \"string\") {\n                    unresolvedKeyframes[i] = parseFloat(value);\n                }\n            }\n        }\n        else {\n            /**\n             * Else, the only way to resolve this is by measuring the element.\n             */\n            this.needsMeasurement = true;\n        }\n    }\n    resolveNoneKeyframes() {\n        const { unresolvedKeyframes, name } = this;\n        const noneKeyframeIndexes = [];\n        for (let i = 0; i < unresolvedKeyframes.length; i++) {\n            if (isNone(unresolvedKeyframes[i])) {\n                noneKeyframeIndexes.push(i);\n            }\n        }\n        if (noneKeyframeIndexes.length) {\n            makeNoneKeyframesAnimatable(unresolvedKeyframes, noneKeyframeIndexes, name);\n        }\n    }\n    measureInitialState() {\n        const { element, unresolvedKeyframes, name } = this;\n        if (!element || !element.current)\n            return;\n        if (name === \"height\") {\n            this.suspendedScrollY = window.pageYOffset;\n        }\n        this.measuredOrigin = positionalValues[name](element.measureViewportBox(), window.getComputedStyle(element.current));\n        unresolvedKeyframes[0] = this.measuredOrigin;\n        // Set final key frame to measure after next render\n        const measureKeyframe = unresolvedKeyframes[unresolvedKeyframes.length - 1];\n        if (measureKeyframe !== undefined) {\n            element.getValue(name, measureKeyframe).jump(measureKeyframe, false);\n        }\n    }\n    measureEndState() {\n        var _a;\n        const { element, name, unresolvedKeyframes } = this;\n        if (!element || !element.current)\n            return;\n        const value = element.getValue(name);\n        value && value.jump(this.measuredOrigin, false);\n        const finalKeyframeIndex = unresolvedKeyframes.length - 1;\n        const finalKeyframe = unresolvedKeyframes[finalKeyframeIndex];\n        unresolvedKeyframes[finalKeyframeIndex] = positionalValues[name](element.measureViewportBox(), window.getComputedStyle(element.current));\n        if (finalKeyframe !== null && this.finalKeyframe === undefined) {\n            this.finalKeyframe = finalKeyframe;\n        }\n        // If we removed transform values, reapply them before the next render\n        if ((_a = this.removedTransforms) === null || _a === void 0 ? void 0 : _a.length) {\n            this.removedTransforms.forEach(([unsetTransformName, unsetTransformValue]) => {\n                element\n                    .getValue(unsetTransformName)\n                    .set(unsetTransformValue);\n            });\n        }\n        this.resolveNoneKeyframes();\n    }\n}\n\nexport { DOMKeyframesResolver };\n","function memo(callback) {\n    let result;\n    return () => {\n        if (result === undefined)\n            result = callback();\n        return result;\n    };\n}\n\nexport { memo };\n","import { MotionGlobalConfig } from '../utils/GlobalConfig.mjs';\nimport { frameData } from './frame.mjs';\n\nlet now;\nfunction clearTime() {\n    now = undefined;\n}\n/**\n * An eventloop-synchronous alternative to performance.now().\n *\n * Ensures that time measurements remain consistent within a synchronous context.\n * Usually calling performance.now() twice within the same synchronous context\n * will return different values which isn't useful for animations when we're usually\n * trying to sync animations to the same frame.\n */\nconst time = {\n    now: () => {\n        if (now === undefined) {\n            time.set(frameData.isProcessing || MotionGlobalConfig.useManualTiming\n                ? frameData.timestamp\n                : performance.now());\n        }\n        return now;\n    },\n    set: (newTime) => {\n        now = newTime;\n        queueMicrotask(clearTime);\n    },\n};\n\nexport { time };\n","import { complex } from '../../value/types/complex/index.mjs';\n\n/**\n * Check if a value is animatable. Examples:\n *\n * ✅: 100, \"100px\", \"#fff\"\n * ❌: \"block\", \"url(2.jpg)\"\n * @param value\n *\n * @internal\n */\nconst isAnimatable = (value, name) => {\n    // If the list of keys tat might be non-animatable grows, replace with Set\n    if (name === \"zIndex\")\n        return false;\n    // If it's a number or a keyframes array, we can animate it. We might at some point\n    // need to do a deep isAnimatable check of keyframes, or let Popmotion handle this,\n    // but for now lets leave it like this for performance reasons\n    if (typeof value === \"number\" || Array.isArray(value))\n        return true;\n    if (typeof value === \"string\" && // It's animatable if we have a string\n        (complex.test(value) || value === \"0\") && // And it contains numbers and/or colors\n        !value.startsWith(\"url(\") // Unless it starts with \"url(\"\n    ) {\n        return true;\n    }\n    return false;\n};\n\nexport { isAnimatable };\n","import { warning } from '../../../utils/errors.mjs';\nimport { isAnimatable } from '../../utils/is-animatable.mjs';\n\nfunction hasKeyframesChanged(keyframes) {\n    const current = keyframes[0];\n    if (keyframes.length === 1)\n        return true;\n    for (let i = 0; i < keyframes.length; i++) {\n        if (keyframes[i] !== current)\n            return true;\n    }\n}\nfunction canAnimate(keyframes, name, type, velocity) {\n    /**\n     * Check if we're able to animate between the start and end keyframes,\n     * and throw a warning if we're attempting to animate between one that's\n     * animatable and another that isn't.\n     */\n    const originKeyframe = keyframes[0];\n    if (originKeyframe === null)\n        return false;\n    /**\n     * These aren't traditionally animatable but we do support them.\n     * In future we could look into making this more generic or replacing\n     * this function with mix() === mixImmediate\n     */\n    if (name === \"display\" || name === \"visibility\")\n        return true;\n    const targetKeyframe = keyframes[keyframes.length - 1];\n    const isOriginAnimatable = isAnimatable(originKeyframe, name);\n    const isTargetAnimatable = isAnimatable(targetKeyframe, name);\n    warning(isOriginAnimatable === isTargetAnimatable, `You are trying to animate ${name} from \"${originKeyframe}\" to \"${targetKeyframe}\". ${originKeyframe} is not an animatable value - to enable this animation set ${originKeyframe} to a value animatable to ${targetKeyframe} via the \\`style\\` property.`);\n    // Always skip if any of these are true\n    if (!isOriginAnimatable || !isTargetAnimatable) {\n        return false;\n    }\n    return hasKeyframesChanged(keyframes) || (type === \"spring\" && velocity);\n}\n\nexport { canAnimate };\n","import { time } from '../../frameloop/sync-time.mjs';\nimport { flushKeyframeResolvers } from '../../render/utils/KeyframesResolver.mjs';\nimport { instantAnimationState } from '../../utils/use-instant-transition-state.mjs';\nimport { canAnimate } from './utils/can-animate.mjs';\nimport { getFinalKeyframe } from './waapi/utils/get-final-keyframe.mjs';\n\n/**\n * Maximum time allowed between an animation being created and it being\n * resolved for us to use the latter as the start time.\n *\n * This is to ensure that while we prefer to \"start\" an animation as soon\n * as it's triggered, we also want to avoid a visual jump if there's a big delay\n * between these two moments.\n */\nconst MAX_RESOLVE_DELAY = 40;\nclass BaseAnimation {\n    constructor({ autoplay = true, delay = 0, type = \"keyframes\", repeat = 0, repeatDelay = 0, repeatType = \"loop\", ...options }) {\n        // Track whether the animation has been stopped. Stopped animations won't restart.\n        this.isStopped = false;\n        this.hasAttemptedResolve = false;\n        this.createdAt = time.now();\n        this.options = {\n            autoplay,\n            delay,\n            type,\n            repeat,\n            repeatDelay,\n            repeatType,\n            ...options,\n        };\n        this.updateFinishedPromise();\n    }\n    /**\n     * This method uses the createdAt and resolvedAt to calculate the\n     * animation startTime. *Ideally*, we would use the createdAt time as t=0\n     * as the following frame would then be the first frame of the animation in\n     * progress, which would feel snappier.\n     *\n     * However, if there's a delay (main thread work) between the creation of\n     * the animation and the first commited frame, we prefer to use resolvedAt\n     * to avoid a sudden jump into the animation.\n     */\n    calcStartTime() {\n        if (!this.resolvedAt)\n            return this.createdAt;\n        return this.resolvedAt - this.createdAt > MAX_RESOLVE_DELAY\n            ? this.resolvedAt\n            : this.createdAt;\n    }\n    /**\n     * A getter for resolved data. If keyframes are not yet resolved, accessing\n     * this.resolved will synchronously flush all pending keyframe resolvers.\n     * This is a deoptimisation, but at its worst still batches read/writes.\n     */\n    get resolved() {\n        if (!this._resolved && !this.hasAttemptedResolve) {\n            flushKeyframeResolvers();\n        }\n        return this._resolved;\n    }\n    /**\n     * A method to be called when the keyframes resolver completes. This method\n     * will check if its possible to run the animation and, if not, skip it.\n     * Otherwise, it will call initPlayback on the implementing class.\n     */\n    onKeyframesResolved(keyframes, finalKeyframe) {\n        this.resolvedAt = time.now();\n        this.hasAttemptedResolve = true;\n        const { name, type, velocity, delay, onComplete, onUpdate, isGenerator, } = this.options;\n        /**\n         * If we can't animate this value with the resolved keyframes\n         * then we should complete it immediately.\n         */\n        if (!isGenerator && !canAnimate(keyframes, name, type, velocity)) {\n            // Finish immediately\n            if (instantAnimationState.current || !delay) {\n                onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(getFinalKeyframe(keyframes, this.options, finalKeyframe));\n                onComplete === null || onComplete === void 0 ? void 0 : onComplete();\n                this.resolveFinishedPromise();\n                return;\n            }\n            // Finish after a delay\n            else {\n                this.options.duration = 0;\n            }\n        }\n        const resolvedAnimation = this.initPlayback(keyframes, finalKeyframe);\n        if (resolvedAnimation === false)\n            return;\n        this._resolved = {\n            keyframes,\n            finalKeyframe,\n            ...resolvedAnimation,\n        };\n        this.onPostResolved();\n    }\n    onPostResolved() { }\n    /**\n     * Allows the returned animation to be awaited or promise-chained. Currently\n     * resolves when the animation finishes at all but in a future update could/should\n     * reject if its cancels.\n     */\n    then(resolve, reject) {\n        return this.currentFinishedPromise.then(resolve, reject);\n    }\n    updateFinishedPromise() {\n        this.currentFinishedPromise = new Promise((resolve) => {\n            this.resolveFinishedPromise = resolve;\n        });\n    }\n}\n\nexport { BaseAnimation };\n","/*\n  Convert velocity into velocity per second\n\n  @param [number]: Unit per frame\n  @param [number]: Frame duration in ms\n*/\nfunction velocityPerSecond(velocity, frameDuration) {\n    return frameDuration ? velocity * (1000 / frameDuration) : 0;\n}\n\nexport { velocityPerSecond };\n","import { velocityPerSecond } from '../../../utils/velocity-per-second.mjs';\n\nconst velocitySampleDuration = 5; // ms\nfunction calcGeneratorVelocity(resolveValue, t, current) {\n    const prevT = Math.max(t - velocitySampleDuration, 0);\n    return velocityPerSecond(current - resolveValue(prevT), t - prevT);\n}\n\nexport { calcGeneratorVelocity };\n","import { warning } from '../../../utils/errors.mjs';\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { secondsToMilliseconds, millisecondsToSeconds } from '../../../utils/time-conversion.mjs';\n\nconst safeMin = 0.001;\nconst minDuration = 0.01;\nconst maxDuration = 10.0;\nconst minDamping = 0.05;\nconst maxDamping = 1;\nfunction findSpring({ duration = 800, bounce = 0.25, velocity = 0, mass = 1, }) {\n    let envelope;\n    let derivative;\n    warning(duration <= secondsToMilliseconds(maxDuration), \"Spring duration must be 10 seconds or less\");\n    let dampingRatio = 1 - bounce;\n    /**\n     * Restrict dampingRatio and duration to within acceptable ranges.\n     */\n    dampingRatio = clamp(minDamping, maxDamping, dampingRatio);\n    duration = clamp(minDuration, maxDuration, millisecondsToSeconds(duration));\n    if (dampingRatio < 1) {\n        /**\n         * Underdamped spring\n         */\n        envelope = (undampedFreq) => {\n            const exponentialDecay = undampedFreq * dampingRatio;\n            const delta = exponentialDecay * duration;\n            const a = exponentialDecay - velocity;\n            const b = calcAngularFreq(undampedFreq, dampingRatio);\n            const c = Math.exp(-delta);\n            return safeMin - (a / b) * c;\n        };\n        derivative = (undampedFreq) => {\n            const exponentialDecay = undampedFreq * dampingRatio;\n            const delta = exponentialDecay * duration;\n            const d = delta * velocity + velocity;\n            const e = Math.pow(dampingRatio, 2) * Math.pow(undampedFreq, 2) * duration;\n            const f = Math.exp(-delta);\n            const g = calcAngularFreq(Math.pow(undampedFreq, 2), dampingRatio);\n            const factor = -envelope(undampedFreq) + safeMin > 0 ? -1 : 1;\n            return (factor * ((d - e) * f)) / g;\n        };\n    }\n    else {\n        /**\n         * Critically-damped spring\n         */\n        envelope = (undampedFreq) => {\n            const a = Math.exp(-undampedFreq * duration);\n            const b = (undampedFreq - velocity) * duration + 1;\n            return -safeMin + a * b;\n        };\n        derivative = (undampedFreq) => {\n            const a = Math.exp(-undampedFreq * duration);\n            const b = (velocity - undampedFreq) * (duration * duration);\n            return a * b;\n        };\n    }\n    const initialGuess = 5 / duration;\n    const undampedFreq = approximateRoot(envelope, derivative, initialGuess);\n    duration = secondsToMilliseconds(duration);\n    if (isNaN(undampedFreq)) {\n        return {\n            stiffness: 100,\n            damping: 10,\n            duration,\n        };\n    }\n    else {\n        const stiffness = Math.pow(undampedFreq, 2) * mass;\n        return {\n            stiffness,\n            damping: dampingRatio * 2 * Math.sqrt(mass * stiffness),\n            duration,\n        };\n    }\n}\nconst rootIterations = 12;\nfunction approximateRoot(envelope, derivative, initialGuess) {\n    let result = initialGuess;\n    for (let i = 1; i < rootIterations; i++) {\n        result = result - envelope(result) / derivative(result);\n    }\n    return result;\n}\nfunction calcAngularFreq(undampedFreq, dampingRatio) {\n    return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio);\n}\n\nexport { calcAngularFreq, findSpring, maxDamping, maxDuration, minDamping, minDuration };\n","import { millisecondsToSeconds, secondsToMilliseconds } from '../../../utils/time-conversion.mjs';\nimport { calcGeneratorVelocity } from '../utils/velocity.mjs';\nimport { findSpring, calcAngularFreq } from './find.mjs';\n\nconst durationKeys = [\"duration\", \"bounce\"];\nconst physicsKeys = [\"stiffness\", \"damping\", \"mass\"];\nfunction isSpringType(options, keys) {\n    return keys.some((key) => options[key] !== undefined);\n}\nfunction getSpringOptions(options) {\n    let springOptions = {\n        velocity: 0.0,\n        stiffness: 100,\n        damping: 10,\n        mass: 1.0,\n        isResolvedFromDuration: false,\n        ...options,\n    };\n    // stiffness/damping/mass overrides duration/bounce\n    if (!isSpringType(options, physicsKeys) &&\n        isSpringType(options, durationKeys)) {\n        const derived = findSpring(options);\n        springOptions = {\n            ...springOptions,\n            ...derived,\n            mass: 1.0,\n        };\n        springOptions.isResolvedFromDuration = true;\n    }\n    return springOptions;\n}\nfunction spring({ keyframes, restDelta, restSpeed, ...options }) {\n    const origin = keyframes[0];\n    const target = keyframes[keyframes.length - 1];\n    /**\n     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n     * to reduce GC during animation.\n     */\n    const state = { done: false, value: origin };\n    const { stiffness, damping, mass, duration, velocity, isResolvedFromDuration, } = getSpringOptions({\n        ...options,\n        velocity: -millisecondsToSeconds(options.velocity || 0),\n    });\n    const initialVelocity = velocity || 0.0;\n    const dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));\n    const initialDelta = target - origin;\n    const undampedAngularFreq = millisecondsToSeconds(Math.sqrt(stiffness / mass));\n    /**\n     * If we're working on a granular scale, use smaller defaults for determining\n     * when the spring is finished.\n     *\n     * These defaults have been selected emprically based on what strikes a good\n     * ratio between feeling good and finishing as soon as changes are imperceptible.\n     */\n    const isGranularScale = Math.abs(initialDelta) < 5;\n    restSpeed || (restSpeed = isGranularScale ? 0.01 : 2);\n    restDelta || (restDelta = isGranularScale ? 0.005 : 0.5);\n    let resolveSpring;\n    if (dampingRatio < 1) {\n        const angularFreq = calcAngularFreq(undampedAngularFreq, dampingRatio);\n        // Underdamped spring\n        resolveSpring = (t) => {\n            const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n            return (target -\n                envelope *\n                    (((initialVelocity +\n                        dampingRatio * undampedAngularFreq * initialDelta) /\n                        angularFreq) *\n                        Math.sin(angularFreq * t) +\n                        initialDelta * Math.cos(angularFreq * t)));\n        };\n    }\n    else if (dampingRatio === 1) {\n        // Critically damped spring\n        resolveSpring = (t) => target -\n            Math.exp(-undampedAngularFreq * t) *\n                (initialDelta +\n                    (initialVelocity + undampedAngularFreq * initialDelta) * t);\n    }\n    else {\n        // Overdamped spring\n        const dampedAngularFreq = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);\n        resolveSpring = (t) => {\n            const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n            // When performing sinh or cosh values can hit Infinity so we cap them here\n            const freqForT = Math.min(dampedAngularFreq * t, 300);\n            return (target -\n                (envelope *\n                    ((initialVelocity +\n                        dampingRatio * undampedAngularFreq * initialDelta) *\n                        Math.sinh(freqForT) +\n                        dampedAngularFreq *\n                            initialDelta *\n                            Math.cosh(freqForT))) /\n                    dampedAngularFreq);\n        };\n    }\n    return {\n        calculatedDuration: isResolvedFromDuration ? duration || null : null,\n        next: (t) => {\n            const current = resolveSpring(t);\n            if (!isResolvedFromDuration) {\n                let currentVelocity = 0.0;\n                /**\n                 * We only need to calculate velocity for under-damped springs\n                 * as over- and critically-damped springs can't overshoot, so\n                 * checking only for displacement is enough.\n                 */\n                if (dampingRatio < 1) {\n                    currentVelocity =\n                        t === 0\n                            ? secondsToMilliseconds(initialVelocity)\n                            : calcGeneratorVelocity(resolveSpring, t, current);\n                }\n                const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;\n                const isBelowDisplacementThreshold = Math.abs(target - current) <= restDelta;\n                state.done =\n                    isBelowVelocityThreshold && isBelowDisplacementThreshold;\n            }\n            else {\n                state.done = t >= duration;\n            }\n            state.value = state.done ? target : current;\n            return state;\n        },\n    };\n}\n\nexport { spring };\n","import { spring } from './spring/index.mjs';\nimport { calcGeneratorVelocity } from './utils/velocity.mjs';\n\nfunction inertia({ keyframes, velocity = 0.0, power = 0.8, timeConstant = 325, bounceDamping = 10, bounceStiffness = 500, modifyTarget, min, max, restDelta = 0.5, restSpeed, }) {\n    const origin = keyframes[0];\n    const state = {\n        done: false,\n        value: origin,\n    };\n    const isOutOfBounds = (v) => (min !== undefined && v < min) || (max !== undefined && v > max);\n    const nearestBoundary = (v) => {\n        if (min === undefined)\n            return max;\n        if (max === undefined)\n            return min;\n        return Math.abs(min - v) < Math.abs(max - v) ? min : max;\n    };\n    let amplitude = power * velocity;\n    const ideal = origin + amplitude;\n    const target = modifyTarget === undefined ? ideal : modifyTarget(ideal);\n    /**\n     * If the target has changed we need to re-calculate the amplitude, otherwise\n     * the animation will start from the wrong position.\n     */\n    if (target !== ideal)\n        amplitude = target - origin;\n    const calcDelta = (t) => -amplitude * Math.exp(-t / timeConstant);\n    const calcLatest = (t) => target + calcDelta(t);\n    const applyFriction = (t) => {\n        const delta = calcDelta(t);\n        const latest = calcLatest(t);\n        state.done = Math.abs(delta) <= restDelta;\n        state.value = state.done ? target : latest;\n    };\n    /**\n     * Ideally this would resolve for t in a stateless way, we could\n     * do that by always precalculating the animation but as we know\n     * this will be done anyway we can assume that spring will\n     * be discovered during that.\n     */\n    let timeReachedBoundary;\n    let spring$1;\n    const checkCatchBoundary = (t) => {\n        if (!isOutOfBounds(state.value))\n            return;\n        timeReachedBoundary = t;\n        spring$1 = spring({\n            keyframes: [state.value, nearestBoundary(state.value)],\n            velocity: calcGeneratorVelocity(calcLatest, t, state.value), // TODO: This should be passing * 1000\n            damping: bounceDamping,\n            stiffness: bounceStiffness,\n            restDelta,\n            restSpeed,\n        });\n    };\n    checkCatchBoundary(0);\n    return {\n        calculatedDuration: null,\n        next: (t) => {\n            /**\n             * We need to resolve the friction to figure out if we need a\n             * spring but we don't want to do this twice per frame. So here\n             * we flag if we updated for this frame and later if we did\n             * we can skip doing it again.\n             */\n            let hasUpdatedFrame = false;\n            if (!spring$1 && timeReachedBoundary === undefined) {\n                hasUpdatedFrame = true;\n                applyFriction(t);\n                checkCatchBoundary(t);\n            }\n            /**\n             * If we have a spring and the provided t is beyond the moment the friction\n             * animation crossed the min/max boundary, use the spring.\n             */\n            if (timeReachedBoundary !== undefined && t >= timeReachedBoundary) {\n                return spring$1.next(t - timeReachedBoundary);\n            }\n            else {\n                !hasUpdatedFrame && applyFriction(t);\n                return state;\n            }\n        },\n    };\n}\n\nexport { inertia };\n","import { noop } from '../utils/noop.mjs';\n\n/*\n  Bezier function generator\n  This has been modified from Gaëtan Renaudeau's BezierEasing\n  https://github.com/gre/bezier-easing/blob/master/src/index.js\n  https://github.com/gre/bezier-easing/blob/master/LICENSE\n  \n  I've removed the newtonRaphsonIterate algo because in benchmarking it\n  wasn't noticiably faster than binarySubdivision, indeed removing it\n  usually improved times, depending on the curve.\n  I also removed the lookup table, as for the added bundle size and loop we're\n  only cutting ~4 or so subdivision iterations. I bumped the max iterations up\n  to 12 to compensate and this still tended to be faster for no perceivable\n  loss in accuracy.\n  Usage\n    const easeOut = cubicBezier(.17,.67,.83,.67);\n    const x = easeOut(0.5); // returns 0.627...\n*/\n// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\nconst calcBezier = (t, a1, a2) => (((1.0 - 3.0 * a2 + 3.0 * a1) * t + (3.0 * a2 - 6.0 * a1)) * t + 3.0 * a1) *\n    t;\nconst subdivisionPrecision = 0.0000001;\nconst subdivisionMaxIterations = 12;\nfunction binarySubdivide(x, lowerBound, upperBound, mX1, mX2) {\n    let currentX;\n    let currentT;\n    let i = 0;\n    do {\n        currentT = lowerBound + (upperBound - lowerBound) / 2.0;\n        currentX = calcBezier(currentT, mX1, mX2) - x;\n        if (currentX > 0.0) {\n            upperBound = currentT;\n        }\n        else {\n            lowerBound = currentT;\n        }\n    } while (Math.abs(currentX) > subdivisionPrecision &&\n        ++i < subdivisionMaxIterations);\n    return currentT;\n}\nfunction cubicBezier(mX1, mY1, mX2, mY2) {\n    // If this is a linear gradient, return linear easing\n    if (mX1 === mY1 && mX2 === mY2)\n        return noop;\n    const getTForX = (aX) => binarySubdivide(aX, 0, 1, mX1, mX2);\n    // If animation is at start/end, return t without easing\n    return (t) => t === 0 || t === 1 ? t : calcBezier(getTForX(t), mY1, mY2);\n}\n\nexport { cubicBezier };\n","import { cubicBezier } from './cubic-bezier.mjs';\n\nconst easeIn = /*@__PURE__*/ cubicBezier(0.42, 0, 1, 1);\nconst easeOut = /*@__PURE__*/ cubicBezier(0, 0, 0.58, 1);\nconst easeInOut = /*@__PURE__*/ cubicBezier(0.42, 0, 0.58, 1);\n\nexport { easeIn, easeInOut, easeOut };\n","const isEasingArray = (ease) => {\n    return Array.isArray(ease) && typeof ease[0] !== \"number\";\n};\n\nexport { isEasingArray };\n","// Accepts an easing function and returns a new one that outputs mirrored values for\n// the second half of the animation. Turns easeIn into easeInOut.\nconst mirrorEasing = (easing) => (p) => p <= 0.5 ? easing(2 * p) / 2 : (2 - easing(2 * (1 - p))) / 2;\n\nexport { mirrorEasing };\n","// Accepts an easing function and returns a new one that outputs reversed values.\n// Turns easeIn into easeOut.\nconst reverseEasing = (easing) => (p) => 1 - easing(1 - p);\n\nexport { reverseEasing };\n","import { mirrorEasing } from './modifiers/mirror.mjs';\nimport { reverseEasing } from './modifiers/reverse.mjs';\n\nconst circIn = (p) => 1 - Math.sin(Math.acos(p));\nconst circOut = reverseEasing(circIn);\nconst circInOut = mirrorEasing(circIn);\n\nexport { circIn, circInOut, circOut };\n","import { cubicBezier } from './cubic-bezier.mjs';\nimport { mirrorEasing } from './modifiers/mirror.mjs';\nimport { reverseEasing } from './modifiers/reverse.mjs';\n\nconst backOut = /*@__PURE__*/ cubicBezier(0.33, 1.53, 0.69, 0.99);\nconst backIn = /*@__PURE__*/ reverseEasing(backOut);\nconst backInOut = /*@__PURE__*/ mirrorEasing(backIn);\n\nexport { backIn, backInOut, backOut };\n","import { backIn } from './back.mjs';\n\nconst anticipate = (p) => (p *= 2) < 1 ? 0.5 * backIn(p) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));\n\nexport { anticipate };\n","import { invariant } from '../../utils/errors.mjs';\nimport { cubicBezier } from '../cubic-bezier.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { easeIn, easeInOut, easeOut } from '../ease.mjs';\nimport { circIn, circInOut, circOut } from '../circ.mjs';\nimport { backIn, backInOut, backOut } from '../back.mjs';\nimport { anticipate } from '../anticipate.mjs';\n\nconst easingLookup = {\n    linear: noop,\n    easeIn,\n    easeInOut,\n    easeOut,\n    circIn,\n    circInOut,\n    circOut,\n    backIn,\n    backInOut,\n    backOut,\n    anticipate,\n};\nconst easingDefinitionToFunction = (definition) => {\n    if (Array.isArray(definition)) {\n        // If cubic bezier definition, create bezier curve\n        invariant(definition.length === 4, `Cubic bezier arrays must contain four numerical values.`);\n        const [x1, y1, x2, y2] = definition;\n        return cubicBezier(x1, y1, x2, y2);\n    }\n    else if (typeof definition === \"string\") {\n        // Else lookup from table\n        invariant(easingLookup[definition] !== undefined, `Invalid easing type '${definition}'`);\n        return easingLookup[definition];\n    }\n    return definition;\n};\n\nexport { easingDefinitionToFunction };\n","/**\n * Pipe\n * Compose other transformers to run linearily\n * pipe(min(20), max(40))\n * @param  {...functions} transformers\n * @return {function}\n */\nconst combineFunctions = (a, b) => (v) => b(a(v));\nconst pipe = (...transformers) => transformers.reduce(combineFunctions);\n\nexport { pipe };\n","/*\n  Progress within given range\n\n  Given a lower limit and an upper limit, we return the progress\n  (expressed as a number 0-1) represented by the given value, and\n  limit that progress to within 0-1.\n\n  @param [number]: Lower limit\n  @param [number]: Upper limit\n  @param [number]: Value to find progress within given range\n  @return [number]: Progress of value within range as expressed 0-1\n*/\nconst progress = (from, to, value) => {\n    const toFromDifference = to - from;\n    return toFromDifference === 0 ? 1 : (value - from) / toFromDifference;\n};\n\nexport { progress };\n","/*\n  Value in range from progress\n\n  Given a lower limit and an upper limit, we return the value within\n  that range as expressed by progress (usually a number from 0 to 1)\n\n  So progress = 0.5 would change\n\n  from -------- to\n\n  to\n\n  from ---- to\n\n  E.g. from = 10, to = 20, progress = 0.5 => 15\n\n  @param [number]: Lower limit of range\n  @param [number]: Upper limit of range\n  @param [number]: The progress between lower and upper limits expressed 0-1\n  @return [number]: Value as calculated from progress within range (not limited within range)\n*/\nconst mixNumber = (from, to, progress) => {\n    return from + (to - from) * progress;\n};\n\nexport { mixNumber };\n","// Adapted from https://gist.github.com/mjackson/5311256\nfunction hueToRgb(p, q, t) {\n    if (t < 0)\n        t += 1;\n    if (t > 1)\n        t -= 1;\n    if (t < 1 / 6)\n        return p + (q - p) * 6 * t;\n    if (t < 1 / 2)\n        return q;\n    if (t < 2 / 3)\n        return p + (q - p) * (2 / 3 - t) * 6;\n    return p;\n}\nfunction hslaToRgba({ hue, saturation, lightness, alpha }) {\n    hue /= 360;\n    saturation /= 100;\n    lightness /= 100;\n    let red = 0;\n    let green = 0;\n    let blue = 0;\n    if (!saturation) {\n        red = green = blue = lightness;\n    }\n    else {\n        const q = lightness < 0.5\n            ? lightness * (1 + saturation)\n            : lightness + saturation - lightness * saturation;\n        const p = 2 * lightness - q;\n        red = hueToRgb(p, q, hue + 1 / 3);\n        green = hueToRgb(p, q, hue);\n        blue = hueToRgb(p, q, hue - 1 / 3);\n    }\n    return {\n        red: Math.round(red * 255),\n        green: Math.round(green * 255),\n        blue: Math.round(blue * 255),\n        alpha,\n    };\n}\n\nexport { hslaToRgba };\n","function mixImmediate(a, b) {\n    return (p) => (p > 0 ? b : a);\n}\n\nexport { mixImmediate };\n","import { mixNumber } from './number.mjs';\nimport { warning } from '../errors.mjs';\nimport { hslaToRgba } from '../hsla-to-rgba.mjs';\nimport { hex } from '../../value/types/color/hex.mjs';\nimport { rgba } from '../../value/types/color/rgba.mjs';\nimport { hsla } from '../../value/types/color/hsla.mjs';\nimport { mixImmediate } from './immediate.mjs';\n\n// Linear color space blending\n// Explained https://www.youtube.com/watch?v=LKnqECcg6Gw\n// Demonstrated http://codepen.io/osublake/pen/xGVVaN\nconst mixLinearColor = (from, to, v) => {\n    const fromExpo = from * from;\n    const expo = v * (to * to - fromExpo) + fromExpo;\n    return expo < 0 ? 0 : Math.sqrt(expo);\n};\nconst colorTypes = [hex, rgba, hsla];\nconst getColorType = (v) => colorTypes.find((type) => type.test(v));\nfunction asRGBA(color) {\n    const type = getColorType(color);\n    warning(Boolean(type), `'${color}' is not an animatable color. Use the equivalent color code instead.`);\n    if (!Boolean(type))\n        return false;\n    let model = type.parse(color);\n    if (type === hsla) {\n        // TODO Remove this cast - needed since Framer Motion's stricter typing\n        model = hslaToRgba(model);\n    }\n    return model;\n}\nconst mixColor = (from, to) => {\n    const fromRGBA = asRGBA(from);\n    const toRGBA = asRGBA(to);\n    if (!fromRGBA || !toRGBA) {\n        return mixImmediate(from, to);\n    }\n    const blended = { ...fromRGBA };\n    return (v) => {\n        blended.red = mixLinearColor(fromRGBA.red, toRGBA.red, v);\n        blended.green = mixLinearColor(fromRGBA.green, toRGBA.green, v);\n        blended.blue = mixLinearColor(fromRGBA.blue, toRGBA.blue, v);\n        blended.alpha = mixNumber(fromRGBA.alpha, toRGBA.alpha, v);\n        return rgba.transform(blended);\n    };\n};\n\nexport { mixColor, mixLinearColor };\n","const invisibleValues = new Set([\"none\", \"hidden\"]);\n/**\n * Returns a function that, when provided a progress value between 0 and 1,\n * will return the \"none\" or \"hidden\" string only when the progress is that of\n * the origin or target.\n */\nfunction mixVisibility(origin, target) {\n    if (invisibleValues.has(origin)) {\n        return (p) => (p <= 0 ? origin : target);\n    }\n    else {\n        return (p) => (p >= 1 ? target : origin);\n    }\n}\n\nexport { invisibleValues, mixVisibility };\n","import { mixNumber as mixNumber$1 } from './number.mjs';\nimport { mixColor } from './color.mjs';\nimport { pipe } from '../pipe.mjs';\nimport { warning } from '../errors.mjs';\nimport { color } from '../../value/types/color/index.mjs';\nimport { complex, analyseComplexValue } from '../../value/types/complex/index.mjs';\nimport { isCSSVariableToken } from '../../render/dom/utils/is-css-variable.mjs';\nimport { invisibleValues, mixVisibility } from './visibility.mjs';\nimport { mixImmediate } from './immediate.mjs';\n\nfunction mixNumber(a, b) {\n    return (p) => mixNumber$1(a, b, p);\n}\nfunction getMixer(a) {\n    if (typeof a === \"number\") {\n        return mixNumber;\n    }\n    else if (typeof a === \"string\") {\n        return isCSSVariableToken(a)\n            ? mixImmediate\n            : color.test(a)\n                ? mixColor\n                : mixComplex;\n    }\n    else if (Array.isArray(a)) {\n        return mixArray;\n    }\n    else if (typeof a === \"object\") {\n        return color.test(a) ? mixColor : mixObject;\n    }\n    return mixImmediate;\n}\nfunction mixArray(a, b) {\n    const output = [...a];\n    const numValues = output.length;\n    const blendValue = a.map((v, i) => getMixer(v)(v, b[i]));\n    return (p) => {\n        for (let i = 0; i < numValues; i++) {\n            output[i] = blendValue[i](p);\n        }\n        return output;\n    };\n}\nfunction mixObject(a, b) {\n    const output = { ...a, ...b };\n    const blendValue = {};\n    for (const key in output) {\n        if (a[key] !== undefined && b[key] !== undefined) {\n            blendValue[key] = getMixer(a[key])(a[key], b[key]);\n        }\n    }\n    return (v) => {\n        for (const key in blendValue) {\n            output[key] = blendValue[key](v);\n        }\n        return output;\n    };\n}\nfunction matchOrder(origin, target) {\n    var _a;\n    const orderedOrigin = [];\n    const pointers = { color: 0, var: 0, number: 0 };\n    for (let i = 0; i < target.values.length; i++) {\n        const type = target.types[i];\n        const originIndex = origin.indexes[type][pointers[type]];\n        const originValue = (_a = origin.values[originIndex]) !== null && _a !== void 0 ? _a : 0;\n        orderedOrigin[i] = originValue;\n        pointers[type]++;\n    }\n    return orderedOrigin;\n}\nconst mixComplex = (origin, target) => {\n    const template = complex.createTransformer(target);\n    const originStats = analyseComplexValue(origin);\n    const targetStats = analyseComplexValue(target);\n    const canInterpolate = originStats.indexes.var.length === targetStats.indexes.var.length &&\n        originStats.indexes.color.length === targetStats.indexes.color.length &&\n        originStats.indexes.number.length >= targetStats.indexes.number.length;\n    if (canInterpolate) {\n        if ((invisibleValues.has(origin) &&\n            !targetStats.values.length) ||\n            (invisibleValues.has(target) &&\n                !originStats.values.length)) {\n            return mixVisibility(origin, target);\n        }\n        return pipe(mixArray(matchOrder(originStats, targetStats), targetStats.values), template);\n    }\n    else {\n        warning(true, `Complex values '${origin}' and '${target}' too different to mix. Ensure all colors are of the same type, and that each contains the same quantity of number and color values. Falling back to instant transition.`);\n        return mixImmediate(origin, target);\n    }\n};\n\nexport { getMixer, mixArray, mixComplex, mixObject };\n","import { getMixer } from './complex.mjs';\nimport { mixNumber } from './number.mjs';\n\nfunction mix(from, to, p) {\n    if (typeof from === \"number\" &&\n        typeof to === \"number\" &&\n        typeof p === \"number\") {\n        return mixNumber(from, to, p);\n    }\n    const mixer = getMixer(from);\n    return mixer(from, to);\n}\n\nexport { mix };\n","import { invariant } from './errors.mjs';\nimport { clamp } from './clamp.mjs';\nimport { pipe } from './pipe.mjs';\nimport { progress } from './progress.mjs';\nimport { noop } from './noop.mjs';\nimport { mix } from './mix/index.mjs';\n\nfunction createMixers(output, ease, customMixer) {\n    const mixers = [];\n    const mixerFactory = customMixer || mix;\n    const numMixers = output.length - 1;\n    for (let i = 0; i < numMixers; i++) {\n        let mixer = mixerFactory(output[i], output[i + 1]);\n        if (ease) {\n            const easingFunction = Array.isArray(ease) ? ease[i] || noop : ease;\n            mixer = pipe(easingFunction, mixer);\n        }\n        mixers.push(mixer);\n    }\n    return mixers;\n}\n/**\n * Create a function that maps from a numerical input array to a generic output array.\n *\n * Accepts:\n *   - Numbers\n *   - Colors (hex, hsl, hsla, rgb, rgba)\n *   - Complex (combinations of one or more numbers or strings)\n *\n * ```jsx\n * const mixColor = interpolate([0, 1], ['#fff', '#000'])\n *\n * mixColor(0.5) // 'rgba(128, 128, 128, 1)'\n * ```\n *\n * TODO Revist this approach once we've moved to data models for values,\n * probably not needed to pregenerate mixer functions.\n *\n * @public\n */\nfunction interpolate(input, output, { clamp: isClamp = true, ease, mixer } = {}) {\n    const inputLength = input.length;\n    invariant(inputLength === output.length, \"Both input and output ranges must be the same length\");\n    /**\n     * If we're only provided a single input, we can just make a function\n     * that returns the output.\n     */\n    if (inputLength === 1)\n        return () => output[0];\n    if (inputLength === 2 && input[0] === input[1])\n        return () => output[1];\n    // If input runs highest -> lowest, reverse both arrays\n    if (input[0] > input[inputLength - 1]) {\n        input = [...input].reverse();\n        output = [...output].reverse();\n    }\n    const mixers = createMixers(output, ease, mixer);\n    const numMixers = mixers.length;\n    const interpolator = (v) => {\n        let i = 0;\n        if (numMixers > 1) {\n            for (; i < input.length - 2; i++) {\n                if (v < input[i + 1])\n                    break;\n            }\n        }\n        const progressInRange = progress(input[i], input[i + 1], v);\n        return mixers[i](progressInRange);\n    };\n    return isClamp\n        ? (v) => interpolator(clamp(input[0], input[inputLength - 1], v))\n        : interpolator;\n}\n\nexport { interpolate };\n","import { mixNumber } from '../mix/number.mjs';\nimport { progress } from '../progress.mjs';\n\nfunction fillOffset(offset, remaining) {\n    const min = offset[offset.length - 1];\n    for (let i = 1; i <= remaining; i++) {\n        const offsetProgress = progress(0, remaining, i);\n        offset.push(mixNumber(min, 1, offsetProgress));\n    }\n}\n\nexport { fillOffset };\n","import { fillOffset } from './fill.mjs';\n\nfunction defaultOffset(arr) {\n    const offset = [0];\n    fillOffset(offset, arr.length - 1);\n    return offset;\n}\n\nexport { defaultOffset };\n","function convertOffsetToTimes(offset, duration) {\n    return offset.map((o) => o * duration);\n}\n\nexport { convertOffsetToTimes };\n","import { easeInOut } from '../../easing/ease.mjs';\nimport { isEasingArray } from '../../easing/utils/is-easing-array.mjs';\nimport { easingDefinitionToFunction } from '../../easing/utils/map.mjs';\nimport { interpolate } from '../../utils/interpolate.mjs';\nimport { defaultOffset } from '../../utils/offsets/default.mjs';\nimport { convertOffsetToTimes } from '../../utils/offsets/time.mjs';\n\nfunction defaultEasing(values, easing) {\n    return values.map(() => easing || easeInOut).splice(0, values.length - 1);\n}\nfunction keyframes({ duration = 300, keyframes: keyframeValues, times, ease = \"easeInOut\", }) {\n    /**\n     * Easing functions can be externally defined as strings. Here we convert them\n     * into actual functions.\n     */\n    const easingFunctions = isEasingArray(ease)\n        ? ease.map(easingDefinitionToFunction)\n        : easingDefinitionToFunction(ease);\n    /**\n     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n     * to reduce GC during animation.\n     */\n    const state = {\n        done: false,\n        value: keyframeValues[0],\n    };\n    /**\n     * Create a times array based on the provided 0-1 offsets\n     */\n    const absoluteTimes = convertOffsetToTimes(\n    // Only use the provided offsets if they're the correct length\n    // TODO Maybe we should warn here if there's a length mismatch\n    times && times.length === keyframeValues.length\n        ? times\n        : defaultOffset(keyframeValues), duration);\n    const mapTimeToKeyframe = interpolate(absoluteTimes, keyframeValues, {\n        ease: Array.isArray(easingFunctions)\n            ? easingFunctions\n            : defaultEasing(keyframeValues, easingFunctions),\n    });\n    return {\n        calculatedDuration: duration,\n        next: (t) => {\n            state.value = mapTimeToKeyframe(t);\n            state.done = t >= duration;\n            return state;\n        },\n    };\n}\n\nexport { defaultEasing, keyframes };\n","/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */\nconst maxGeneratorDuration = 20000;\nfunction calcGeneratorDuration(generator) {\n    let duration = 0;\n    const timeStep = 50;\n    let state = generator.next(duration);\n    while (!state.done && duration < maxGeneratorDuration) {\n        duration += timeStep;\n        state = generator.next(duration);\n    }\n    return duration >= maxGeneratorDuration ? Infinity : duration;\n}\n\nexport { calcGeneratorDuration, maxGeneratorDuration };\n","import { time } from '../../../frameloop/sync-time.mjs';\nimport { frame, cancelFrame, frameData } from '../../../frameloop/frame.mjs';\n\nconst frameloopDriver = (update) => {\n    const passTimestamp = ({ timestamp }) => update(timestamp);\n    return {\n        start: () => frame.update(passTimestamp, true),\n        stop: () => cancelFrame(passTimestamp),\n        /**\n         * If we're processing this frame we can use the\n         * framelocked timestamp to keep things in sync.\n         */\n        now: () => (frameData.isProcessing ? frameData.timestamp : time.now()),\n    };\n};\n\nexport { frameloopDriver };\n","import { KeyframeResolver } from '../../render/utils/KeyframesResolver.mjs';\nimport { spring } from '../generators/spring/index.mjs';\nimport { inertia } from '../generators/inertia.mjs';\nimport { keyframes } from '../generators/keyframes.mjs';\nimport { BaseAnimation } from './BaseAnimation.mjs';\nimport { pipe } from '../../utils/pipe.mjs';\nimport { mix } from '../../utils/mix/index.mjs';\nimport { calcGeneratorDuration } from '../generators/utils/calc-duration.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../utils/time-conversion.mjs';\nimport { clamp } from '../../utils/clamp.mjs';\nimport { invariant } from '../../utils/errors.mjs';\nimport { frameloopDriver } from './drivers/driver-frameloop.mjs';\nimport { getFinalKeyframe } from './waapi/utils/get-final-keyframe.mjs';\n\nconst generators = {\n    decay: inertia,\n    inertia,\n    tween: keyframes,\n    keyframes: keyframes,\n    spring,\n};\nconst percentToProgress = (percent) => percent / 100;\n/**\n * Animation that runs on the main thread. Designed to be WAAPI-spec in the subset of\n * features we expose publically. Mostly the compatibility is to ensure visual identity\n * between both WAAPI and main thread animations.\n */\nclass MainThreadAnimation extends BaseAnimation {\n    constructor(options) {\n        super(options);\n        /**\n         * The time at which the animation was paused.\n         */\n        this.holdTime = null;\n        /**\n         * The time at which the animation was cancelled.\n         */\n        this.cancelTime = null;\n        /**\n         * The current time of the animation.\n         */\n        this.currentTime = 0;\n        /**\n         * Playback speed as a factor. 0 would be stopped, -1 reverse and 2 double speed.\n         */\n        this.playbackSpeed = 1;\n        /**\n         * The state of the animation to apply when the animation is resolved. This\n         * allows calls to the public API to control the animation before it is resolved,\n         * without us having to resolve it first.\n         */\n        this.pendingPlayState = \"running\";\n        /**\n         * The time at which the animation was started.\n         */\n        this.startTime = null;\n        this.state = \"idle\";\n        /**\n         * This method is bound to the instance to fix a pattern where\n         * animation.stop is returned as a reference from a useEffect.\n         */\n        this.stop = () => {\n            this.resolver.cancel();\n            this.isStopped = true;\n            if (this.state === \"idle\")\n                return;\n            this.teardown();\n            const { onStop } = this.options;\n            onStop && onStop();\n        };\n        const { name, motionValue, element, keyframes } = this.options;\n        const KeyframeResolver$1 = (element === null || element === void 0 ? void 0 : element.KeyframeResolver) || KeyframeResolver;\n        const onResolved = (resolvedKeyframes, finalKeyframe) => this.onKeyframesResolved(resolvedKeyframes, finalKeyframe);\n        this.resolver = new KeyframeResolver$1(keyframes, onResolved, name, motionValue, element);\n        this.resolver.scheduleResolve();\n    }\n    initPlayback(keyframes$1) {\n        const { type = \"keyframes\", repeat = 0, repeatDelay = 0, repeatType, velocity = 0, } = this.options;\n        const generatorFactory = generators[type] || keyframes;\n        /**\n         * If our generator doesn't support mixing numbers, we need to replace keyframes with\n         * [0, 100] and then make a function that maps that to the actual keyframes.\n         *\n         * 100 is chosen instead of 1 as it works nicer with spring animations.\n         */\n        let mapPercentToKeyframes;\n        let mirroredGenerator;\n        if (generatorFactory !== keyframes &&\n            typeof keyframes$1[0] !== \"number\") {\n            if (process.env.NODE_ENV !== \"production\") {\n                invariant(keyframes$1.length === 2, `Only two keyframes currently supported with spring and inertia animations. Trying to animate ${keyframes$1}`);\n            }\n            mapPercentToKeyframes = pipe(percentToProgress, mix(keyframes$1[0], keyframes$1[1]));\n            keyframes$1 = [0, 100];\n        }\n        const generator = generatorFactory({ ...this.options, keyframes: keyframes$1 });\n        /**\n         * If we have a mirror repeat type we need to create a second generator that outputs the\n         * mirrored (not reversed) animation and later ping pong between the two generators.\n         */\n        if (repeatType === \"mirror\") {\n            mirroredGenerator = generatorFactory({\n                ...this.options,\n                keyframes: [...keyframes$1].reverse(),\n                velocity: -velocity,\n            });\n        }\n        /**\n         * If duration is undefined and we have repeat options,\n         * we need to calculate a duration from the generator.\n         *\n         * We set it to the generator itself to cache the duration.\n         * Any timeline resolver will need to have already precalculated\n         * the duration by this step.\n         */\n        if (generator.calculatedDuration === null) {\n            generator.calculatedDuration = calcGeneratorDuration(generator);\n        }\n        const { calculatedDuration } = generator;\n        const resolvedDuration = calculatedDuration + repeatDelay;\n        const totalDuration = resolvedDuration * (repeat + 1) - repeatDelay;\n        return {\n            generator,\n            mirroredGenerator,\n            mapPercentToKeyframes,\n            calculatedDuration,\n            resolvedDuration,\n            totalDuration,\n        };\n    }\n    onPostResolved() {\n        const { autoplay = true } = this.options;\n        this.play();\n        if (this.pendingPlayState === \"paused\" || !autoplay) {\n            this.pause();\n        }\n        else {\n            this.state = this.pendingPlayState;\n        }\n    }\n    tick(timestamp, sample = false) {\n        const { resolved } = this;\n        // If the animations has failed to resolve, return the final keyframe.\n        if (!resolved) {\n            const { keyframes } = this.options;\n            return { done: true, value: keyframes[keyframes.length - 1] };\n        }\n        const { finalKeyframe, generator, mirroredGenerator, mapPercentToKeyframes, keyframes, calculatedDuration, totalDuration, resolvedDuration, } = resolved;\n        if (this.startTime === null)\n            return generator.next(0);\n        const { delay, repeat, repeatType, repeatDelay, onUpdate } = this.options;\n        /**\n         * requestAnimationFrame timestamps can come through as lower than\n         * the startTime as set by performance.now(). Here we prevent this,\n         * though in the future it could be possible to make setting startTime\n         * a pending operation that gets resolved here.\n         */\n        if (this.speed > 0) {\n            this.startTime = Math.min(this.startTime, timestamp);\n        }\n        else if (this.speed < 0) {\n            this.startTime = Math.min(timestamp - totalDuration / this.speed, this.startTime);\n        }\n        // Update currentTime\n        if (sample) {\n            this.currentTime = timestamp;\n        }\n        else if (this.holdTime !== null) {\n            this.currentTime = this.holdTime;\n        }\n        else {\n            // Rounding the time because floating point arithmetic is not always accurate, e.g. 3000.367 - 1000.367 =\n            // 2000.0000000000002. This is a problem when we are comparing the currentTime with the duration, for\n            // example.\n            this.currentTime =\n                Math.round(timestamp - this.startTime) * this.speed;\n        }\n        // Rebase on delay\n        const timeWithoutDelay = this.currentTime - delay * (this.speed >= 0 ? 1 : -1);\n        const isInDelayPhase = this.speed >= 0\n            ? timeWithoutDelay < 0\n            : timeWithoutDelay > totalDuration;\n        this.currentTime = Math.max(timeWithoutDelay, 0);\n        // If this animation has finished, set the current time  to the total duration.\n        if (this.state === \"finished\" && this.holdTime === null) {\n            this.currentTime = totalDuration;\n        }\n        let elapsed = this.currentTime;\n        let frameGenerator = generator;\n        if (repeat) {\n            /**\n             * Get the current progress (0-1) of the animation. If t is >\n             * than duration we'll get values like 2.5 (midway through the\n             * third iteration)\n             */\n            const progress = Math.min(this.currentTime, totalDuration) / resolvedDuration;\n            /**\n             * Get the current iteration (0 indexed). For instance the floor of\n             * 2.5 is 2.\n             */\n            let currentIteration = Math.floor(progress);\n            /**\n             * Get the current progress of the iteration by taking the remainder\n             * so 2.5 is 0.5 through iteration 2\n             */\n            let iterationProgress = progress % 1.0;\n            /**\n             * If iteration progress is 1 we count that as the end\n             * of the previous iteration.\n             */\n            if (!iterationProgress && progress >= 1) {\n                iterationProgress = 1;\n            }\n            iterationProgress === 1 && currentIteration--;\n            currentIteration = Math.min(currentIteration, repeat + 1);\n            /**\n             * Reverse progress if we're not running in \"normal\" direction\n             */\n            const isOddIteration = Boolean(currentIteration % 2);\n            if (isOddIteration) {\n                if (repeatType === \"reverse\") {\n                    iterationProgress = 1 - iterationProgress;\n                    if (repeatDelay) {\n                        iterationProgress -= repeatDelay / resolvedDuration;\n                    }\n                }\n                else if (repeatType === \"mirror\") {\n                    frameGenerator = mirroredGenerator;\n                }\n            }\n            elapsed = clamp(0, 1, iterationProgress) * resolvedDuration;\n        }\n        /**\n         * If we're in negative time, set state as the initial keyframe.\n         * This prevents delay: x, duration: 0 animations from finishing\n         * instantly.\n         */\n        const state = isInDelayPhase\n            ? { done: false, value: keyframes[0] }\n            : frameGenerator.next(elapsed);\n        if (mapPercentToKeyframes) {\n            state.value = mapPercentToKeyframes(state.value);\n        }\n        let { done } = state;\n        if (!isInDelayPhase && calculatedDuration !== null) {\n            done =\n                this.speed >= 0\n                    ? this.currentTime >= totalDuration\n                    : this.currentTime <= 0;\n        }\n        const isAnimationFinished = this.holdTime === null &&\n            (this.state === \"finished\" || (this.state === \"running\" && done));\n        if (isAnimationFinished && finalKeyframe !== undefined) {\n            state.value = getFinalKeyframe(keyframes, this.options, finalKeyframe);\n        }\n        if (onUpdate) {\n            onUpdate(state.value);\n        }\n        if (isAnimationFinished) {\n            this.finish();\n        }\n        return state;\n    }\n    get duration() {\n        const { resolved } = this;\n        return resolved ? millisecondsToSeconds(resolved.calculatedDuration) : 0;\n    }\n    get time() {\n        return millisecondsToSeconds(this.currentTime);\n    }\n    set time(newTime) {\n        newTime = secondsToMilliseconds(newTime);\n        this.currentTime = newTime;\n        if (this.holdTime !== null || this.speed === 0) {\n            this.holdTime = newTime;\n        }\n        else if (this.driver) {\n            this.startTime = this.driver.now() - newTime / this.speed;\n        }\n    }\n    get speed() {\n        return this.playbackSpeed;\n    }\n    set speed(newSpeed) {\n        const hasChanged = this.playbackSpeed !== newSpeed;\n        this.playbackSpeed = newSpeed;\n        if (hasChanged) {\n            this.time = millisecondsToSeconds(this.currentTime);\n        }\n    }\n    play() {\n        if (!this.resolver.isScheduled) {\n            this.resolver.resume();\n        }\n        if (!this._resolved) {\n            this.pendingPlayState = \"running\";\n            return;\n        }\n        if (this.isStopped)\n            return;\n        const { driver = frameloopDriver, onPlay, startTime } = this.options;\n        if (!this.driver) {\n            this.driver = driver((timestamp) => this.tick(timestamp));\n        }\n        onPlay && onPlay();\n        const now = this.driver.now();\n        if (this.holdTime !== null) {\n            this.startTime = now - this.holdTime;\n        }\n        else if (!this.startTime) {\n            this.startTime = startTime !== null && startTime !== void 0 ? startTime : this.calcStartTime();\n        }\n        else if (this.state === \"finished\") {\n            this.startTime = now;\n        }\n        if (this.state === \"finished\") {\n            this.updateFinishedPromise();\n        }\n        this.cancelTime = this.startTime;\n        this.holdTime = null;\n        /**\n         * Set playState to running only after we've used it in\n         * the previous logic.\n         */\n        this.state = \"running\";\n        this.driver.start();\n    }\n    pause() {\n        var _a;\n        if (!this._resolved) {\n            this.pendingPlayState = \"paused\";\n            return;\n        }\n        this.state = \"paused\";\n        this.holdTime = (_a = this.currentTime) !== null && _a !== void 0 ? _a : 0;\n    }\n    complete() {\n        if (this.state !== \"running\") {\n            this.play();\n        }\n        this.pendingPlayState = this.state = \"finished\";\n        this.holdTime = null;\n    }\n    finish() {\n        this.teardown();\n        this.state = \"finished\";\n        const { onComplete } = this.options;\n        onComplete && onComplete();\n    }\n    cancel() {\n        if (this.cancelTime !== null) {\n            this.tick(this.cancelTime);\n        }\n        this.teardown();\n        this.updateFinishedPromise();\n    }\n    teardown() {\n        this.state = \"idle\";\n        this.stopDriver();\n        this.resolveFinishedPromise();\n        this.updateFinishedPromise();\n        this.startTime = this.cancelTime = null;\n        this.resolver.cancel();\n    }\n    stopDriver() {\n        if (!this.driver)\n            return;\n        this.driver.stop();\n        this.driver = undefined;\n    }\n    sample(time) {\n        this.startTime = 0;\n        return this.tick(time, true);\n    }\n}\n// Legacy interface\nfunction animateValue(options) {\n    return new MainThreadAnimation(options);\n}\n\nexport { MainThreadAnimation, animateValue };\n","/**\n * A list of values that can be hardware-accelerated.\n */\nconst acceleratedValues = new Set([\n    \"opacity\",\n    \"clipPath\",\n    \"filter\",\n    \"transform\",\n    // TODO: Can be accelerated but currently disabled until https://issues.chromium.org/issues/41491098 is resolved\n    // or until we implement support for linear() easing.\n    // \"background-color\"\n]);\n\nexport { acceleratedValues };\n","const isBezierDefinition = (easing) => Array.isArray(easing) && typeof easing[0] === \"number\";\n\nexport { isBezierDefinition };\n","import { isBezierDefinition } from '../../../easing/utils/is-bezier-definition.mjs';\n\nfunction isWaapiSupportedEasing(easing) {\n    return Boolean(!easing ||\n        (typeof easing === \"string\" && easing in supportedWaapiEasing) ||\n        isBezierDefinition(easing) ||\n        (Array.isArray(easing) && easing.every(isWaapiSupportedEasing)));\n}\nconst cubicBezierAsString = ([a, b, c, d]) => `cubic-bezier(${a}, ${b}, ${c}, ${d})`;\nconst supportedWaapiEasing = {\n    linear: \"linear\",\n    ease: \"ease\",\n    easeIn: \"ease-in\",\n    easeOut: \"ease-out\",\n    easeInOut: \"ease-in-out\",\n    circIn: /*@__PURE__*/ cubicBezierAsString([0, 0.65, 0.55, 1]),\n    circOut: /*@__PURE__*/ cubicBezierAsString([0.55, 0, 1, 0.45]),\n    backIn: /*@__PURE__*/ cubicBezierAsString([0.31, 0.01, 0.66, -0.59]),\n    backOut: /*@__PURE__*/ cubicBezierAsString([0.33, 1.53, 0.69, 0.99]),\n};\nfunction mapEasingToNativeEasingWithDefault(easing) {\n    return (mapEasingToNativeEasing(easing) ||\n        supportedWaapiEasing.easeOut);\n}\nfunction mapEasingToNativeEasing(easing) {\n    if (!easing) {\n        return undefined;\n    }\n    else if (isBezierDefinition(easing)) {\n        return cubicBezierAsString(easing);\n    }\n    else if (Array.isArray(easing)) {\n        return easing.map(mapEasingToNativeEasingWithDefault);\n    }\n    else {\n        return supportedWaapiEasing[easing];\n    }\n}\n\nexport { cubicBezierAsString, isWaapiSupportedEasing, mapEasingToNativeEasing, supportedWaapiEasing };\n","import { mapEasingToNativeEasing } from './easing.mjs';\n\nfunction animateStyle(element, valueName, keyframes, { delay = 0, duration = 300, repeat = 0, repeatType = \"loop\", ease, times, } = {}) {\n    const keyframeOptions = { [valueName]: keyframes };\n    if (times)\n        keyframeOptions.offset = times;\n    const easing = mapEasingToNativeEasing(ease);\n    /**\n     * If this is an easing array, apply to keyframes, not animation as a whole\n     */\n    if (Array.isArray(easing))\n        keyframeOptions.easing = easing;\n    return element.animate(keyframeOptions, {\n        delay,\n        duration,\n        easing: !Array.isArray(easing) ? easing : \"linear\",\n        fill: \"both\",\n        iterations: repeat + 1,\n        direction: repeatType === \"reverse\" ? \"alternate\" : \"normal\",\n    });\n}\n\nexport { animateStyle };\n","import { DOMKeyframesResolver } from '../../render/dom/DOMKeyframesResolver.mjs';\nimport { memo } from '../../utils/memo.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../utils/time-conversion.mjs';\nimport { BaseAnimation } from './BaseAnimation.mjs';\nimport { MainThreadAnimation } from './MainThreadAnimation.mjs';\nimport { acceleratedValues } from './utils/accelerated-values.mjs';\nimport { animateStyle } from './waapi/index.mjs';\nimport { isWaapiSupportedEasing } from './waapi/easing.mjs';\nimport { getFinalKeyframe } from './waapi/utils/get-final-keyframe.mjs';\n\nconst supportsWaapi = /*@__PURE__*/ memo(() => Object.hasOwnProperty.call(Element.prototype, \"animate\"));\n/**\n * 10ms is chosen here as it strikes a balance between smooth\n * results (more than one keyframe per frame at 60fps) and\n * keyframe quantity.\n */\nconst sampleDelta = 10; //ms\n/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */\nconst maxDuration = 20000;\n/**\n * Check if an animation can run natively via WAAPI or requires pregenerated keyframes.\n * WAAPI doesn't support spring or function easings so we run these as JS animation before\n * handing off.\n */\nfunction requiresPregeneratedKeyframes(options) {\n    return options.type === \"spring\" || !isWaapiSupportedEasing(options.ease);\n}\nfunction pregenerateKeyframes(keyframes, options) {\n    /**\n     * Create a main-thread animation to pregenerate keyframes.\n     * We sample this at regular intervals to generate keyframes that we then\n     * linearly interpolate between.\n     */\n    const sampleAnimation = new MainThreadAnimation({\n        ...options,\n        keyframes,\n        repeat: 0,\n        delay: 0,\n        isGenerator: true,\n    });\n    let state = { done: false, value: keyframes[0] };\n    const pregeneratedKeyframes = [];\n    /**\n     * Bail after 20 seconds of pre-generated keyframes as it's likely\n     * we're heading for an infinite loop.\n     */\n    let t = 0;\n    while (!state.done && t < maxDuration) {\n        state = sampleAnimation.sample(t);\n        pregeneratedKeyframes.push(state.value);\n        t += sampleDelta;\n    }\n    return {\n        times: undefined,\n        keyframes: pregeneratedKeyframes,\n        duration: t - sampleDelta,\n        ease: \"linear\",\n    };\n}\nclass AcceleratedAnimation extends BaseAnimation {\n    constructor(options) {\n        super(options);\n        const { name, motionValue, element, keyframes } = this.options;\n        this.resolver = new DOMKeyframesResolver(keyframes, (resolvedKeyframes, finalKeyframe) => this.onKeyframesResolved(resolvedKeyframes, finalKeyframe), name, motionValue, element);\n        this.resolver.scheduleResolve();\n    }\n    initPlayback(keyframes, finalKeyframe) {\n        var _a;\n        let { duration = 300, times, ease, type, motionValue, name, startTime, } = this.options;\n        /**\n         * If element has since been unmounted, return false to indicate\n         * the animation failed to initialised.\n         */\n        if (!((_a = motionValue.owner) === null || _a === void 0 ? void 0 : _a.current)) {\n            return false;\n        }\n        /**\n         * If this animation needs pre-generated keyframes then generate.\n         */\n        if (requiresPregeneratedKeyframes(this.options)) {\n            const { onComplete, onUpdate, motionValue, element, ...options } = this.options;\n            const pregeneratedAnimation = pregenerateKeyframes(keyframes, options);\n            keyframes = pregeneratedAnimation.keyframes;\n            // If this is a very short animation, ensure we have\n            // at least two keyframes to animate between as older browsers\n            // can't animate between a single keyframe.\n            if (keyframes.length === 1) {\n                keyframes[1] = keyframes[0];\n            }\n            duration = pregeneratedAnimation.duration;\n            times = pregeneratedAnimation.times;\n            ease = pregeneratedAnimation.ease;\n            type = \"keyframes\";\n        }\n        const animation = animateStyle(motionValue.owner.current, name, keyframes, { ...this.options, duration, times, ease });\n        // Override the browser calculated startTime with one synchronised to other JS\n        // and WAAPI animations starting this event loop.\n        animation.startTime = startTime !== null && startTime !== void 0 ? startTime : this.calcStartTime();\n        if (this.pendingTimeline) {\n            animation.timeline = this.pendingTimeline;\n            this.pendingTimeline = undefined;\n        }\n        else {\n            /**\n             * Prefer the `onfinish` prop as it's more widely supported than\n             * the `finished` promise.\n             *\n             * Here, we synchronously set the provided MotionValue to the end\n             * keyframe. If we didn't, when the WAAPI animation is finished it would\n             * be removed from the element which would then revert to its old styles.\n             */\n            animation.onfinish = () => {\n                const { onComplete } = this.options;\n                motionValue.set(getFinalKeyframe(keyframes, this.options, finalKeyframe));\n                onComplete && onComplete();\n                this.cancel();\n                this.resolveFinishedPromise();\n            };\n        }\n        return {\n            animation,\n            duration,\n            times,\n            type,\n            ease,\n            keyframes: keyframes,\n        };\n    }\n    get duration() {\n        const { resolved } = this;\n        if (!resolved)\n            return 0;\n        const { duration } = resolved;\n        return millisecondsToSeconds(duration);\n    }\n    get time() {\n        const { resolved } = this;\n        if (!resolved)\n            return 0;\n        const { animation } = resolved;\n        return millisecondsToSeconds(animation.currentTime || 0);\n    }\n    set time(newTime) {\n        const { resolved } = this;\n        if (!resolved)\n            return;\n        const { animation } = resolved;\n        animation.currentTime = secondsToMilliseconds(newTime);\n    }\n    get speed() {\n        const { resolved } = this;\n        if (!resolved)\n            return 1;\n        const { animation } = resolved;\n        return animation.playbackRate;\n    }\n    set speed(newSpeed) {\n        const { resolved } = this;\n        if (!resolved)\n            return;\n        const { animation } = resolved;\n        animation.playbackRate = newSpeed;\n    }\n    get state() {\n        const { resolved } = this;\n        if (!resolved)\n            return \"idle\";\n        const { animation } = resolved;\n        return animation.playState;\n    }\n    get startTime() {\n        const { resolved } = this;\n        if (!resolved)\n            return null;\n        const { animation } = resolved;\n        // Coerce to number as TypeScript incorrectly types this\n        // as CSSNumberish\n        return animation.startTime;\n    }\n    /**\n     * Replace the default DocumentTimeline with another AnimationTimeline.\n     * Currently used for scroll animations.\n     */\n    attachTimeline(timeline) {\n        if (!this._resolved) {\n            this.pendingTimeline = timeline;\n        }\n        else {\n            const { resolved } = this;\n            if (!resolved)\n                return noop;\n            const { animation } = resolved;\n            animation.timeline = timeline;\n            animation.onfinish = null;\n        }\n        return noop;\n    }\n    play() {\n        if (this.isStopped)\n            return;\n        const { resolved } = this;\n        if (!resolved)\n            return;\n        const { animation } = resolved;\n        if (animation.playState === \"finished\") {\n            this.updateFinishedPromise();\n        }\n        animation.play();\n    }\n    pause() {\n        const { resolved } = this;\n        if (!resolved)\n            return;\n        const { animation } = resolved;\n        animation.pause();\n    }\n    stop() {\n        this.resolver.cancel();\n        this.isStopped = true;\n        if (this.state === \"idle\")\n            return;\n        this.resolveFinishedPromise();\n        this.updateFinishedPromise();\n        const { resolved } = this;\n        if (!resolved)\n            return;\n        const { animation, keyframes, duration, type, ease, times } = resolved;\n        if (animation.playState === \"idle\" ||\n            animation.playState === \"finished\") {\n            return;\n        }\n        /**\n         * WAAPI doesn't natively have any interruption capabilities.\n         *\n         * Rather than read commited styles back out of the DOM, we can\n         * create a renderless JS animation and sample it twice to calculate\n         * its current value, \"previous\" value, and therefore allow\n         * Motion to calculate velocity for any subsequent animation.\n         */\n        if (this.time) {\n            const { motionValue, onUpdate, onComplete, element, ...options } = this.options;\n            const sampleAnimation = new MainThreadAnimation({\n                ...options,\n                keyframes,\n                duration,\n                type,\n                ease,\n                times,\n                isGenerator: true,\n            });\n            const sampleTime = secondsToMilliseconds(this.time);\n            motionValue.setWithVelocity(sampleAnimation.sample(sampleTime - sampleDelta).value, sampleAnimation.sample(sampleTime).value, sampleDelta);\n        }\n        const { onStop } = this.options;\n        onStop && onStop();\n        this.cancel();\n    }\n    complete() {\n        const { resolved } = this;\n        if (!resolved)\n            return;\n        resolved.animation.finish();\n    }\n    cancel() {\n        const { resolved } = this;\n        if (!resolved)\n            return;\n        resolved.animation.cancel();\n    }\n    static supports(options) {\n        const { motionValue, name, repeatDelay, repeatType, damping, type } = options;\n        return (supportsWaapi() &&\n            name &&\n            acceleratedValues.has(name) &&\n            motionValue &&\n            motionValue.owner &&\n            motionValue.owner.current instanceof HTMLElement &&\n            /**\n             * If we're outputting values to onUpdate then we can't use WAAPI as there's\n             * no way to read the value from WAAPI every frame.\n             */\n            !motionValue.owner.getProps().onUpdate &&\n            !repeatDelay &&\n            repeatType !== \"mirror\" &&\n            damping !== 0 &&\n            type !== \"inertia\");\n    }\n}\n\nexport { AcceleratedAnimation };\n","import { frame, cancelFrame } from '../../../frameloop/frame.mjs';\n\nfunction observeTimeline(update, timeline) {\n    let prevProgress;\n    const onFrame = () => {\n        const { currentTime } = timeline;\n        const percentage = currentTime === null ? 0 : currentTime.value;\n        const progress = percentage / 100;\n        if (prevProgress !== progress) {\n            update(progress);\n        }\n        prevProgress = progress;\n    };\n    frame.update(onFrame, true);\n    return () => cancelFrame(onFrame);\n}\n\nexport { observeTimeline };\n","import { memo } from '../../../utils/memo.mjs';\n\nconst supportsScrollTimeline = memo(() => window.ScrollTimeline !== undefined);\n\nexport { supportsScrollTimeline };\n","import { observeTimeline } from '../render/dom/scroll/observe.mjs';\nimport { supportsScrollTimeline } from '../render/dom/scroll/supports.mjs';\n\nclass GroupPlaybackControls {\n    constructor(animations) {\n        // Bound to accomodate common `return animation.stop` pattern\n        this.stop = () => this.runAll(\"stop\");\n        this.animations = animations.filter(Boolean);\n    }\n    then(onResolve, onReject) {\n        return Promise.all(this.animations).then(onResolve).catch(onReject);\n    }\n    /**\n     * TODO: Filter out cancelled or stopped animations before returning\n     */\n    getAll(propName) {\n        return this.animations[0][propName];\n    }\n    setAll(propName, newValue) {\n        for (let i = 0; i < this.animations.length; i++) {\n            this.animations[i][propName] = newValue;\n        }\n    }\n    attachTimeline(timeline) {\n        const cancelAll = this.animations.map((animation) => {\n            if (supportsScrollTimeline() && animation.attachTimeline) {\n                animation.attachTimeline(timeline);\n            }\n            else {\n                animation.pause();\n                return observeTimeline((progress) => {\n                    animation.time = animation.duration * progress;\n                }, timeline);\n            }\n        });\n        return () => {\n            cancelAll.forEach((cancelTimeline, i) => {\n                if (cancelTimeline)\n                    cancelTimeline();\n                this.animations[i].stop();\n            });\n        };\n    }\n    get time() {\n        return this.getAll(\"time\");\n    }\n    set time(time) {\n        this.setAll(\"time\", time);\n    }\n    get speed() {\n        return this.getAll(\"speed\");\n    }\n    set speed(speed) {\n        this.setAll(\"speed\", speed);\n    }\n    get startTime() {\n        return this.getAll(\"startTime\");\n    }\n    get duration() {\n        let max = 0;\n        for (let i = 0; i < this.animations.length; i++) {\n            max = Math.max(max, this.animations[i].duration);\n        }\n        return max;\n    }\n    runAll(methodName) {\n        this.animations.forEach((controls) => controls[methodName]());\n    }\n    play() {\n        this.runAll(\"play\");\n    }\n    pause() {\n        this.runAll(\"pause\");\n    }\n    cancel() {\n        this.runAll(\"cancel\");\n    }\n    complete() {\n        this.runAll(\"complete\");\n    }\n}\n\nexport { GroupPlaybackControls };\n","import { secondsToMilliseconds } from '../../utils/time-conversion.mjs';\nimport { getDefaultTransition } from '../utils/default-transitions.mjs';\nimport { getValueTransition, isTransitionDefined } from '../utils/transitions.mjs';\nimport { MotionGlobalConfig } from '../../utils/GlobalConfig.mjs';\nimport { instantAnimationState } from '../../utils/use-instant-transition-state.mjs';\nimport { getFinalKeyframe } from '../animators/waapi/utils/get-final-keyframe.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\nimport { AcceleratedAnimation } from '../animators/AcceleratedAnimation.mjs';\nimport { MainThreadAnimation } from '../animators/MainThreadAnimation.mjs';\nimport { GroupPlaybackControls } from '../GroupPlaybackControls.mjs';\n\nconst animateMotionValue = (name, value, target, transition = {}, element, isHandoff, \n/**\n * Currently used to remove values from will-change when an animation ends.\n * Preferably this would be handled by event listeners on the MotionValue\n * but these aren't consistent enough yet when considering the different ways\n * an animation can be cancelled.\n */\nonEnd) => (onComplete) => {\n    const valueTransition = getValueTransition(transition, name) || {};\n    /**\n     * Most transition values are currently completely overwritten by value-specific\n     * transitions. In the future it'd be nicer to blend these transitions. But for now\n     * delay actually does inherit from the root transition if not value-specific.\n     */\n    const delay = valueTransition.delay || transition.delay || 0;\n    /**\n     * Elapsed isn't a public transition option but can be passed through from\n     * optimized appear effects in milliseconds.\n     */\n    let { elapsed = 0 } = transition;\n    elapsed = elapsed - secondsToMilliseconds(delay);\n    let options = {\n        keyframes: Array.isArray(target) ? target : [null, target],\n        ease: \"easeOut\",\n        velocity: value.getVelocity(),\n        ...valueTransition,\n        delay: -elapsed,\n        onUpdate: (v) => {\n            value.set(v);\n            valueTransition.onUpdate && valueTransition.onUpdate(v);\n        },\n        onComplete: () => {\n            onComplete();\n            valueTransition.onComplete && valueTransition.onComplete();\n            onEnd && onEnd();\n        },\n        onStop: onEnd,\n        name,\n        motionValue: value,\n        element: isHandoff ? undefined : element,\n    };\n    /**\n     * If there's no transition defined for this value, we can generate\n     * unqiue transition settings for this value.\n     */\n    if (!isTransitionDefined(valueTransition)) {\n        options = {\n            ...options,\n            ...getDefaultTransition(name, options),\n        };\n    }\n    /**\n     * Both WAAPI and our internal animation functions use durations\n     * as defined by milliseconds, while our external API defines them\n     * as seconds.\n     */\n    if (options.duration) {\n        options.duration = secondsToMilliseconds(options.duration);\n    }\n    if (options.repeatDelay) {\n        options.repeatDelay = secondsToMilliseconds(options.repeatDelay);\n    }\n    if (options.from !== undefined) {\n        options.keyframes[0] = options.from;\n    }\n    let shouldSkip = false;\n    if (options.type === false ||\n        (options.duration === 0 && !options.repeatDelay)) {\n        options.duration = 0;\n        if (options.delay === 0) {\n            shouldSkip = true;\n        }\n    }\n    if (instantAnimationState.current ||\n        MotionGlobalConfig.skipAnimations) {\n        shouldSkip = true;\n        options.duration = 0;\n        options.delay = 0;\n    }\n    /**\n     * If we can or must skip creating the animation, and apply only\n     * the final keyframe, do so. We also check once keyframes are resolved but\n     * this early check prevents the need to create an animation at all.\n     */\n    if (shouldSkip && !isHandoff && value.get() !== undefined) {\n        const finalKeyframe = getFinalKeyframe(options.keyframes, valueTransition);\n        if (finalKeyframe !== undefined) {\n            frame.update(() => {\n                options.onUpdate(finalKeyframe);\n                options.onComplete();\n            });\n            // We still want to return some animation controls here rather\n            // than returning undefined\n            return new GroupPlaybackControls([]);\n        }\n    }\n    /**\n     * Animate via WAAPI if possible. If this is a handoff animation, the optimised animation will be running via\n     * WAAPI. Therefore, this animation must be JS to ensure it runs \"under\" the\n     * optimised animation.\n     */\n    if (!isHandoff && AcceleratedAnimation.supports(options)) {\n        return new AcceleratedAnimation(options);\n    }\n    else {\n        return new MainThreadAnimation(options);\n    }\n};\n\nexport { animateMotionValue };\n","import { isKeyframesTarget } from '../animation/utils/is-keyframes-target.mjs';\n\nconst isCustomValue = (v) => {\n    return Boolean(v && typeof v === \"object\" && v.mix && v.toValue);\n};\nconst resolveFinalValueInKeyframes = (v) => {\n    // TODO maybe throw if v.length - 1 is placeholder token?\n    return isKeyframesTarget(v) ? v[v.length - 1] || 0 : v;\n};\n\nexport { isCustomValue, resolveFinalValueInKeyframes };\n","function addUniqueItem(arr, item) {\n    if (arr.indexOf(item) === -1)\n        arr.push(item);\n}\nfunction removeItem(arr, item) {\n    const index = arr.indexOf(item);\n    if (index > -1)\n        arr.splice(index, 1);\n}\n// Adapted from array-move\nfunction moveItem([...arr], fromIndex, toIndex) {\n    const startIndex = fromIndex < 0 ? arr.length + fromIndex : fromIndex;\n    if (startIndex >= 0 && startIndex < arr.length) {\n        const endIndex = toIndex < 0 ? arr.length + toIndex : toIndex;\n        const [item] = arr.splice(fromIndex, 1);\n        arr.splice(endIndex, 0, item);\n    }\n    return arr;\n}\n\nexport { addUniqueItem, moveItem, removeItem };\n","import { addUniqueItem, removeItem } from './array.mjs';\n\nclass SubscriptionManager {\n    constructor() {\n        this.subscriptions = [];\n    }\n    add(handler) {\n        addUniqueItem(this.subscriptions, handler);\n        return () => removeItem(this.subscriptions, handler);\n    }\n    notify(a, b, c) {\n        const numSubscriptions = this.subscriptions.length;\n        if (!numSubscriptions)\n            return;\n        if (numSubscriptions === 1) {\n            /**\n             * If there's only a single handler we can just call it without invoking a loop.\n             */\n            this.subscriptions[0](a, b, c);\n        }\n        else {\n            for (let i = 0; i < numSubscriptions; i++) {\n                /**\n                 * Check whether the handler exists before firing as it's possible\n                 * the subscriptions were modified during this loop running.\n                 */\n                const handler = this.subscriptions[i];\n                handler && handler(a, b, c);\n            }\n        }\n    }\n    getSize() {\n        return this.subscriptions.length;\n    }\n    clear() {\n        this.subscriptions.length = 0;\n    }\n}\n\nexport { SubscriptionManager };\n","import { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { velocityPerSecond } from '../utils/velocity-per-second.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\nimport { time } from '../frameloop/sync-time.mjs';\nimport { frame } from '../frameloop/frame.mjs';\n\n/**\n * Maximum time between the value of two frames, beyond which we\n * assume the velocity has since been 0.\n */\nconst MAX_VELOCITY_DELTA = 30;\nconst isFloat = (value) => {\n    return !isNaN(parseFloat(value));\n};\nconst collectMotionValues = {\n    current: undefined,\n};\n/**\n * `MotionValue` is used to track the state and velocity of motion values.\n *\n * @public\n */\nclass MotionValue {\n    /**\n     * @param init - The initiating value\n     * @param config - Optional configuration options\n     *\n     * -  `transformer`: A function to transform incoming values with.\n     *\n     * @internal\n     */\n    constructor(init, options = {}) {\n        /**\n         * This will be replaced by the build step with the latest version number.\n         * When MotionValues are provided to motion components, warn if versions are mixed.\n         */\n        this.version = \"11.5.4\";\n        /**\n         * Tracks whether this value can output a velocity. Currently this is only true\n         * if the value is numerical, but we might be able to widen the scope here and support\n         * other value types.\n         *\n         * @internal\n         */\n        this.canTrackVelocity = null;\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        this.updateAndNotify = (v, render = true) => {\n            const currentTime = time.now();\n            /**\n             * If we're updating the value during another frame or eventloop\n             * than the previous frame, then the we set the previous frame value\n             * to current.\n             */\n            if (this.updatedAt !== currentTime) {\n                this.setPrevFrameValue();\n            }\n            this.prev = this.current;\n            this.setCurrent(v);\n            // Update update subscribers\n            if (this.current !== this.prev && this.events.change) {\n                this.events.change.notify(this.current);\n            }\n            // Update render subscribers\n            if (render && this.events.renderRequest) {\n                this.events.renderRequest.notify(this.current);\n            }\n        };\n        this.hasAnimated = false;\n        this.setCurrent(init);\n        this.owner = options.owner;\n    }\n    setCurrent(current) {\n        this.current = current;\n        this.updatedAt = time.now();\n        if (this.canTrackVelocity === null && current !== undefined) {\n            this.canTrackVelocity = isFloat(this.current);\n        }\n    }\n    setPrevFrameValue(prevFrameValue = this.current) {\n        this.prevFrameValue = prevFrameValue;\n        this.prevUpdatedAt = this.updatedAt;\n    }\n    /**\n     * Adds a function that will be notified when the `MotionValue` is updated.\n     *\n     * It returns a function that, when called, will cancel the subscription.\n     *\n     * When calling `onChange` inside a React component, it should be wrapped with the\n     * `useEffect` hook. As it returns an unsubscribe function, this should be returned\n     * from the `useEffect` function to ensure you don't add duplicate subscribers..\n     *\n     * ```jsx\n     * export const MyComponent = () => {\n     *   const x = useMotionValue(0)\n     *   const y = useMotionValue(0)\n     *   const opacity = useMotionValue(1)\n     *\n     *   useEffect(() => {\n     *     function updateOpacity() {\n     *       const maxXY = Math.max(x.get(), y.get())\n     *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\n     *       opacity.set(newOpacity)\n     *     }\n     *\n     *     const unsubscribeX = x.on(\"change\", updateOpacity)\n     *     const unsubscribeY = y.on(\"change\", updateOpacity)\n     *\n     *     return () => {\n     *       unsubscribeX()\n     *       unsubscribeY()\n     *     }\n     *   }, [])\n     *\n     *   return <motion.div style={{ x }} />\n     * }\n     * ```\n     *\n     * @param subscriber - A function that receives the latest value.\n     * @returns A function that, when called, will cancel this subscription.\n     *\n     * @deprecated\n     */\n    onChange(subscription) {\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(false, `value.onChange(callback) is deprecated. Switch to value.on(\"change\", callback).`);\n        }\n        return this.on(\"change\", subscription);\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        const unsubscribe = this.events[eventName].add(callback);\n        if (eventName === \"change\") {\n            return () => {\n                unsubscribe();\n                /**\n                 * If we have no more change listeners by the start\n                 * of the next frame, stop active animations.\n                 */\n                frame.read(() => {\n                    if (!this.events.change.getSize()) {\n                        this.stop();\n                    }\n                });\n            };\n        }\n        return unsubscribe;\n    }\n    clearListeners() {\n        for (const eventManagers in this.events) {\n            this.events[eventManagers].clear();\n        }\n    }\n    /**\n     * Attaches a passive effect to the `MotionValue`.\n     *\n     * @internal\n     */\n    attach(passiveEffect, stopPassiveEffect) {\n        this.passiveEffect = passiveEffect;\n        this.stopPassiveEffect = stopPassiveEffect;\n    }\n    /**\n     * Sets the state of the `MotionValue`.\n     *\n     * @remarks\n     *\n     * ```jsx\n     * const x = useMotionValue(0)\n     * x.set(10)\n     * ```\n     *\n     * @param latest - Latest value to set.\n     * @param render - Whether to notify render subscribers. Defaults to `true`\n     *\n     * @public\n     */\n    set(v, render = true) {\n        if (!render || !this.passiveEffect) {\n            this.updateAndNotify(v, render);\n        }\n        else {\n            this.passiveEffect(v, this.updateAndNotify);\n        }\n    }\n    setWithVelocity(prev, current, delta) {\n        this.set(current);\n        this.prev = undefined;\n        this.prevFrameValue = prev;\n        this.prevUpdatedAt = this.updatedAt - delta;\n    }\n    /**\n     * Set the state of the `MotionValue`, stopping any active animations,\n     * effects, and resets velocity to `0`.\n     */\n    jump(v, endAnimation = true) {\n        this.updateAndNotify(v);\n        this.prev = v;\n        this.prevUpdatedAt = this.prevFrameValue = undefined;\n        endAnimation && this.stop();\n        if (this.stopPassiveEffect)\n            this.stopPassiveEffect();\n    }\n    /**\n     * Returns the latest state of `MotionValue`\n     *\n     * @returns - The latest state of `MotionValue`\n     *\n     * @public\n     */\n    get() {\n        if (collectMotionValues.current) {\n            collectMotionValues.current.push(this);\n        }\n        return this.current;\n    }\n    /**\n     * @public\n     */\n    getPrevious() {\n        return this.prev;\n    }\n    /**\n     * Returns the latest velocity of `MotionValue`\n     *\n     * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.\n     *\n     * @public\n     */\n    getVelocity() {\n        const currentTime = time.now();\n        if (!this.canTrackVelocity ||\n            this.prevFrameValue === undefined ||\n            currentTime - this.updatedAt > MAX_VELOCITY_DELTA) {\n            return 0;\n        }\n        const delta = Math.min(this.updatedAt - this.prevUpdatedAt, MAX_VELOCITY_DELTA);\n        // Casts because of parseFloat's poor typing\n        return velocityPerSecond(parseFloat(this.current) -\n            parseFloat(this.prevFrameValue), delta);\n    }\n    /**\n     * Registers a new animation to control this `MotionValue`. Only one\n     * animation can drive a `MotionValue` at one time.\n     *\n     * ```jsx\n     * value.start()\n     * ```\n     *\n     * @param animation - A function that starts the provided animation\n     *\n     * @internal\n     */\n    start(startAnimation) {\n        this.stop();\n        return new Promise((resolve) => {\n            this.hasAnimated = true;\n            this.animation = startAnimation(resolve);\n            if (this.events.animationStart) {\n                this.events.animationStart.notify();\n            }\n        }).then(() => {\n            if (this.events.animationComplete) {\n                this.events.animationComplete.notify();\n            }\n            this.clearAnimation();\n        });\n    }\n    /**\n     * Stop the currently active animation.\n     *\n     * @public\n     */\n    stop() {\n        if (this.animation) {\n            this.animation.stop();\n            if (this.events.animationCancel) {\n                this.events.animationCancel.notify();\n            }\n        }\n        this.clearAnimation();\n    }\n    /**\n     * Returns `true` if this value is currently animating.\n     *\n     * @public\n     */\n    isAnimating() {\n        return !!this.animation;\n    }\n    clearAnimation() {\n        delete this.animation;\n    }\n    /**\n     * Destroy and clean up subscribers to this `MotionValue`.\n     *\n     * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically\n     * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually\n     * created a `MotionValue` via the `motionValue` function.\n     *\n     * @public\n     */\n    destroy() {\n        this.clearListeners();\n        this.stop();\n        if (this.stopPassiveEffect) {\n            this.stopPassiveEffect();\n        }\n    }\n}\nfunction motionValue(init, options) {\n    return new MotionValue(init, options);\n}\n\nexport { MotionValue, collectMotionValues, motionValue };\n","import { resolveFinalValueInKeyframes } from '../../utils/resolve-value.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\n\n/**\n * Set VisualElement's MotionValue, creating a new MotionValue for it if\n * it doesn't exist.\n */\nfunction setMotionValue(visualElement, key, value) {\n    if (visualElement.hasValue(key)) {\n        visualElement.getValue(key).set(value);\n    }\n    else {\n        visualElement.addValue(key, motionValue(value));\n    }\n}\nfunction setTarget(visualElement, definition) {\n    const resolved = resolveVariant(visualElement, definition);\n    let { transitionEnd = {}, transition = {}, ...target } = resolved || {};\n    target = { ...target, ...transitionEnd };\n    for (const key in target) {\n        const value = resolveFinalValueInKeyframes(target[key]);\n        setMotionValue(visualElement, key, value);\n    }\n}\n\nexport { setTarget };\n","/**\n * Convert camelCase to dash-case properties.\n */\nconst camelToDash = (str) => str.replace(/([a-z])([A-Z])/gu, \"$1-$2\").toLowerCase();\n\nexport { camelToDash };\n","import { camelToDash } from '../../render/dom/utils/camel-to-dash.mjs';\n\nconst optimizedAppearDataId = \"framerAppearId\";\nconst optimizedAppearDataAttribute = \"data-\" + camelToDash(optimizedAppearDataId);\n\nexport { optimizedAppearDataAttribute, optimizedAppearDataId };\n","import { optimizedAppearDataAttribute } from './data-id.mjs';\n\nfunction getOptimisedAppearId(visualElement) {\n    return visualElement.props[optimizedAppearDataAttribute];\n}\n\nexport { getOptimisedAppearId };\n","import { acceleratedValues } from '../../animation/animators/utils/accelerated-values.mjs';\nimport { camelToDash } from '../../render/dom/utils/camel-to-dash.mjs';\nimport { transformProps } from '../../render/html/utils/transform.mjs';\n\nfunction getWillChangeName(name) {\n    if (transformProps.has(name)) {\n        return \"transform\";\n    }\n    else if (acceleratedValues.has(name)) {\n        return camelToDash(name);\n    }\n}\n\nexport { getWillChangeName };\n","import { MotionValue } from '../index.mjs';\nimport { getWillChangeName } from './get-will-change-name.mjs';\nimport { removeItem } from '../../utils/array.mjs';\n\nclass WillChangeMotionValue extends MotionValue {\n    constructor() {\n        super(...arguments);\n        this.output = [];\n        this.counts = new Map();\n    }\n    add(name) {\n        const styleName = getWillChangeName(name);\n        if (!styleName)\n            return;\n        /**\n         * Update counter. Each value has an indepdent counter\n         * as multiple sources could be requesting the same value\n         * gets added to will-change.\n         */\n        const prevCount = this.counts.get(styleName) || 0;\n        this.counts.set(styleName, prevCount + 1);\n        if (prevCount === 0) {\n            this.output.push(styleName);\n            this.update();\n        }\n        /**\n         * Prevents the remove function from being called multiple times.\n         */\n        let hasRemoved = false;\n        return () => {\n            if (hasRemoved)\n                return;\n            hasRemoved = true;\n            const newCount = this.counts.get(styleName) - 1;\n            this.counts.set(styleName, newCount);\n            if (newCount === 0) {\n                removeItem(this.output, styleName);\n                this.update();\n            }\n        };\n    }\n    update() {\n        this.set(this.output.length ? this.output.join(\", \") : \"auto\");\n    }\n}\n\nexport { WillChangeMotionValue };\n","const isMotionValue = (value) => Boolean(value && value.getVelocity);\n\nexport { isMotionValue };\n","import { isMotionValue } from '../utils/is-motion-value.mjs';\n\nfunction isWillChangeMotionValue(value) {\n    return Boolean(isMotionValue(value) && value.add);\n}\n\nexport { isWillChangeMotionValue };\n","import { WillChangeMotionValue } from './WillChangeMotionValue.mjs';\nimport { isWillChangeMotionValue } from './is.mjs';\n\nfunction addValueToWillChange(visualElement, key) {\n    var _a;\n    if (!visualElement.applyWillChange)\n        return;\n    let willChange = visualElement.getValue(\"willChange\");\n    /**\n     * If we haven't created a willChange MotionValue, and the we haven't been\n     * manually provided one, create one.\n     */\n    if (!willChange && !((_a = visualElement.props.style) === null || _a === void 0 ? void 0 : _a.willChange)) {\n        willChange = new WillChangeMotionValue(\"auto\");\n        visualElement.addValue(\"willChange\", willChange);\n    }\n    /**\n     * It could be that a user has set willChange to a regular MotionValue,\n     * in which case we can't add the value to it.\n     */\n    if (isWillChangeMotionValue(willChange)) {\n        return willChange.add(key);\n    }\n}\n\nexport { addValueToWillChange };\n","import { transformProps } from '../../render/html/utils/transform.mjs';\nimport { animateMotionValue } from './motion-value.mjs';\nimport { setTarget } from '../../render/utils/setters.mjs';\nimport { getValueTransition } from '../utils/transitions.mjs';\nimport { getOptimisedAppearId } from '../optimized-appear/get-appear-id.mjs';\nimport { addValueToWillChange } from '../../value/use-will-change/add-will-change.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */\nfunction shouldBlockAnimation({ protectedKeys, needsAnimating }, key) {\n    const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n    needsAnimating[key] = false;\n    return shouldBlock;\n}\nfunction animateTarget(visualElement, targetAndTransition, { delay = 0, transitionOverride, type } = {}) {\n    var _a;\n    let { transition = visualElement.getDefaultTransition(), transitionEnd, ...target } = targetAndTransition;\n    if (transitionOverride)\n        transition = transitionOverride;\n    const animations = [];\n    const animationTypeState = type &&\n        visualElement.animationState &&\n        visualElement.animationState.getState()[type];\n    for (const key in target) {\n        const value = visualElement.getValue(key, (_a = visualElement.latestValues[key]) !== null && _a !== void 0 ? _a : null);\n        const valueTarget = target[key];\n        if (valueTarget === undefined ||\n            (animationTypeState &&\n                shouldBlockAnimation(animationTypeState, key))) {\n            continue;\n        }\n        const valueTransition = {\n            delay,\n            ...getValueTransition(transition || {}, key),\n        };\n        /**\n         * If this is the first time a value is being animated, check\n         * to see if we're handling off from an existing animation.\n         */\n        let isHandoff = false;\n        if (window.MotionHandoffAnimation) {\n            const appearId = getOptimisedAppearId(visualElement);\n            if (appearId) {\n                const startTime = window.MotionHandoffAnimation(appearId, key, frame);\n                if (startTime !== null) {\n                    valueTransition.startTime = startTime;\n                    isHandoff = true;\n                }\n            }\n        }\n        value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key)\n            ? { type: false }\n            : valueTransition, visualElement, isHandoff, addValueToWillChange(visualElement, key)));\n        const animation = value.animation;\n        if (animation) {\n            animations.push(animation);\n        }\n    }\n    if (transitionEnd) {\n        Promise.all(animations).then(() => {\n            frame.update(() => {\n                transitionEnd && setTarget(visualElement, transitionEnd);\n            });\n        });\n    }\n    return animations;\n}\n\nexport { animateTarget };\n","import { resolveVariant } from '../../render/utils/resolve-dynamic-variants.mjs';\nimport { animateTarget } from './visual-element-target.mjs';\n\nfunction animateVariant(visualElement, variant, options = {}) {\n    var _a;\n    const resolved = resolveVariant(visualElement, variant, options.type === \"exit\"\n        ? (_a = visualElement.presenceContext) === null || _a === void 0 ? void 0 : _a.custom\n        : undefined);\n    let { transition = visualElement.getDefaultTransition() || {} } = resolved || {};\n    if (options.transitionOverride) {\n        transition = options.transitionOverride;\n    }\n    /**\n     * If we have a variant, create a callback that runs it as an animation.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */\n    const getAnimation = resolved\n        ? () => Promise.all(animateTarget(visualElement, resolved, options))\n        : () => Promise.resolve();\n    /**\n     * If we have children, create a callback that runs all their animations.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */\n    const getChildAnimations = visualElement.variantChildren && visualElement.variantChildren.size\n        ? (forwardDelay = 0) => {\n            const { delayChildren = 0, staggerChildren, staggerDirection, } = transition;\n            return animateChildren(visualElement, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);\n        }\n        : () => Promise.resolve();\n    /**\n     * If the transition explicitly defines a \"when\" option, we need to resolve either\n     * this animation or all children animations before playing the other.\n     */\n    const { when } = transition;\n    if (when) {\n        const [first, last] = when === \"beforeChildren\"\n            ? [getAnimation, getChildAnimations]\n            : [getChildAnimations, getAnimation];\n        return first().then(() => last());\n    }\n    else {\n        return Promise.all([getAnimation(), getChildAnimations(options.delay)]);\n    }\n}\nfunction animateChildren(visualElement, variant, delayChildren = 0, staggerChildren = 0, staggerDirection = 1, options) {\n    const animations = [];\n    const maxStaggerDuration = (visualElement.variantChildren.size - 1) * staggerChildren;\n    const generateStaggerDuration = staggerDirection === 1\n        ? (i = 0) => i * staggerChildren\n        : (i = 0) => maxStaggerDuration - i * staggerChildren;\n    Array.from(visualElement.variantChildren)\n        .sort(sortByTreeOrder)\n        .forEach((child, i) => {\n        child.notify(\"AnimationStart\", variant);\n        animations.push(animateVariant(child, variant, {\n            ...options,\n            delay: delayChildren + generateStaggerDuration(i),\n        }).then(() => child.notify(\"AnimationComplete\", variant)));\n    });\n    return Promise.all(animations);\n}\nfunction sortByTreeOrder(a, b) {\n    return a.sortNodePosition(b);\n}\n\nexport { animateVariant, sortByTreeOrder };\n","import { resolveVariant } from '../../render/utils/resolve-dynamic-variants.mjs';\nimport { animateTarget } from './visual-element-target.mjs';\nimport { animateVariant } from './visual-element-variant.mjs';\n\nfunction animateVisualElement(visualElement, definition, options = {}) {\n    visualElement.notify(\"AnimationStart\", definition);\n    let animation;\n    if (Array.isArray(definition)) {\n        const animations = definition.map((variant) => animateVariant(visualElement, variant, options));\n        animation = Promise.all(animations);\n    }\n    else if (typeof definition === \"string\") {\n        animation = animateVariant(visualElement, definition, options);\n    }\n    else {\n        const resolvedDefinition = typeof definition === \"function\"\n            ? resolveVariant(visualElement, definition, options.custom)\n            : definition;\n        animation = Promise.all(animateTarget(visualElement, resolvedDefinition, options));\n    }\n    return animation.then(() => {\n        visualElement.notify(\"AnimationComplete\", definition);\n    });\n}\n\nexport { animateVisualElement };\n","import { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { isKeyframesTarget } from '../../animation/utils/is-keyframes-target.mjs';\nimport { shallowCompare } from '../../utils/shallow-compare.mjs';\nimport { isVariantLabel } from './is-variant-label.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\nimport { variantPriorityOrder } from './variant-props.mjs';\nimport { animateVisualElement } from '../../animation/interfaces/visual-element.mjs';\n\nconst reversePriorityOrder = [...variantPriorityOrder].reverse();\nconst numAnimationTypes = variantPriorityOrder.length;\nfunction animateList(visualElement) {\n    return (animations) => Promise.all(animations.map(({ animation, options }) => animateVisualElement(visualElement, animation, options)));\n}\nfunction createAnimationState(visualElement) {\n    let animate = animateList(visualElement);\n    let state = createState();\n    let isInitialRender = true;\n    /**\n     * This function will be used to reduce the animation definitions for\n     * each active animation type into an object of resolved values for it.\n     */\n    const buildResolvedTypeValues = (type) => (acc, definition) => {\n        var _a;\n        const resolved = resolveVariant(visualElement, definition, type === \"exit\"\n            ? (_a = visualElement.presenceContext) === null || _a === void 0 ? void 0 : _a.custom\n            : undefined);\n        if (resolved) {\n            const { transition, transitionEnd, ...target } = resolved;\n            acc = { ...acc, ...target, ...transitionEnd };\n        }\n        return acc;\n    };\n    /**\n     * This just allows us to inject mocked animation functions\n     * @internal\n     */\n    function setAnimateFunction(makeAnimator) {\n        animate = makeAnimator(visualElement);\n    }\n    /**\n     * When we receive new props, we need to:\n     * 1. Create a list of protected keys for each type. This is a directory of\n     *    value keys that are currently being \"handled\" by types of a higher priority\n     *    so that whenever an animation is played of a given type, these values are\n     *    protected from being animated.\n     * 2. Determine if an animation type needs animating.\n     * 3. Determine if any values have been removed from a type and figure out\n     *    what to animate those to.\n     */\n    function animateChanges(changedActiveType) {\n        const props = visualElement.getProps();\n        const context = visualElement.getVariantContext(true) || {};\n        /**\n         * A list of animations that we'll build into as we iterate through the animation\n         * types. This will get executed at the end of the function.\n         */\n        const animations = [];\n        /**\n         * Keep track of which values have been removed. Then, as we hit lower priority\n         * animation types, we can check if they contain removed values and animate to that.\n         */\n        const removedKeys = new Set();\n        /**\n         * A dictionary of all encountered keys. This is an object to let us build into and\n         * copy it without iteration. Each time we hit an animation type we set its protected\n         * keys - the keys its not allowed to animate - to the latest version of this object.\n         */\n        let encounteredKeys = {};\n        /**\n         * If a variant has been removed at a given index, and this component is controlling\n         * variant animations, we want to ensure lower-priority variants are forced to animate.\n         */\n        let removedVariantIndex = Infinity;\n        /**\n         * Iterate through all animation types in reverse priority order. For each, we want to\n         * detect which values it's handling and whether or not they've changed (and therefore\n         * need to be animated). If any values have been removed, we want to detect those in\n         * lower priority props and flag for animation.\n         */\n        for (let i = 0; i < numAnimationTypes; i++) {\n            const type = reversePriorityOrder[i];\n            const typeState = state[type];\n            const prop = props[type] !== undefined\n                ? props[type]\n                : context[type];\n            const propIsVariant = isVariantLabel(prop);\n            /**\n             * If this type has *just* changed isActive status, set activeDelta\n             * to that status. Otherwise set to null.\n             */\n            const activeDelta = type === changedActiveType ? typeState.isActive : null;\n            if (activeDelta === false)\n                removedVariantIndex = i;\n            /**\n             * If this prop is an inherited variant, rather than been set directly on the\n             * component itself, we want to make sure we allow the parent to trigger animations.\n             *\n             * TODO: Can probably change this to a !isControllingVariants check\n             */\n            let isInherited = prop === context[type] &&\n                prop !== props[type] &&\n                propIsVariant;\n            /**\n             *\n             */\n            if (isInherited &&\n                isInitialRender &&\n                visualElement.manuallyAnimateOnMount) {\n                isInherited = false;\n            }\n            /**\n             * Set all encountered keys so far as the protected keys for this type. This will\n             * be any key that has been animated or otherwise handled by active, higher-priortiy types.\n             */\n            typeState.protectedKeys = { ...encounteredKeys };\n            // Check if we can skip analysing this prop early\n            if (\n            // If it isn't active and hasn't *just* been set as inactive\n            (!typeState.isActive && activeDelta === null) ||\n                // If we didn't and don't have any defined prop for this animation type\n                (!prop && !typeState.prevProp) ||\n                // Or if the prop doesn't define an animation\n                isAnimationControls(prop) ||\n                typeof prop === \"boolean\") {\n                continue;\n            }\n            /**\n             * As we go look through the values defined on this type, if we detect\n             * a changed value or a value that was removed in a higher priority, we set\n             * this to true and add this prop to the animation list.\n             */\n            const variantDidChange = checkVariantsDidChange(typeState.prevProp, prop);\n            let shouldAnimateType = variantDidChange ||\n                // If we're making this variant active, we want to always make it active\n                (type === changedActiveType &&\n                    typeState.isActive &&\n                    !isInherited &&\n                    propIsVariant) ||\n                // If we removed a higher-priority variant (i is in reverse order)\n                (i > removedVariantIndex && propIsVariant);\n            let handledRemovedValues = false;\n            /**\n             * As animations can be set as variant lists, variants or target objects, we\n             * coerce everything to an array if it isn't one already\n             */\n            const definitionList = Array.isArray(prop) ? prop : [prop];\n            /**\n             * Build an object of all the resolved values. We'll use this in the subsequent\n             * animateChanges calls to determine whether a value has changed.\n             */\n            let resolvedValues = definitionList.reduce(buildResolvedTypeValues(type), {});\n            if (activeDelta === false)\n                resolvedValues = {};\n            /**\n             * Now we need to loop through all the keys in the prev prop and this prop,\n             * and decide:\n             * 1. If the value has changed, and needs animating\n             * 2. If it has been removed, and needs adding to the removedKeys set\n             * 3. If it has been removed in a higher priority type and needs animating\n             * 4. If it hasn't been removed in a higher priority but hasn't changed, and\n             *    needs adding to the type's protectedKeys list.\n             */\n            const { prevResolvedValues = {} } = typeState;\n            const allKeys = {\n                ...prevResolvedValues,\n                ...resolvedValues,\n            };\n            const markToAnimate = (key) => {\n                shouldAnimateType = true;\n                if (removedKeys.has(key)) {\n                    handledRemovedValues = true;\n                    removedKeys.delete(key);\n                }\n                typeState.needsAnimating[key] = true;\n                const motionValue = visualElement.getValue(key);\n                if (motionValue)\n                    motionValue.liveStyle = false;\n            };\n            for (const key in allKeys) {\n                const next = resolvedValues[key];\n                const prev = prevResolvedValues[key];\n                // If we've already handled this we can just skip ahead\n                if (encounteredKeys.hasOwnProperty(key))\n                    continue;\n                /**\n                 * If the value has changed, we probably want to animate it.\n                 */\n                let valueHasChanged = false;\n                if (isKeyframesTarget(next) && isKeyframesTarget(prev)) {\n                    valueHasChanged = !shallowCompare(next, prev);\n                }\n                else {\n                    valueHasChanged = next !== prev;\n                }\n                if (valueHasChanged) {\n                    if (next !== undefined && next !== null) {\n                        // If next is defined and doesn't equal prev, it needs animating\n                        markToAnimate(key);\n                    }\n                    else {\n                        // If it's undefined, it's been removed.\n                        removedKeys.add(key);\n                    }\n                }\n                else if (next !== undefined && removedKeys.has(key)) {\n                    /**\n                     * If next hasn't changed and it isn't undefined, we want to check if it's\n                     * been removed by a higher priority\n                     */\n                    markToAnimate(key);\n                }\n                else {\n                    /**\n                     * If it hasn't changed, we add it to the list of protected values\n                     * to ensure it doesn't get animated.\n                     */\n                    typeState.protectedKeys[key] = true;\n                }\n            }\n            /**\n             * Update the typeState so next time animateChanges is called we can compare the\n             * latest prop and resolvedValues to these.\n             */\n            typeState.prevProp = prop;\n            typeState.prevResolvedValues = resolvedValues;\n            /**\n             *\n             */\n            if (typeState.isActive) {\n                encounteredKeys = { ...encounteredKeys, ...resolvedValues };\n            }\n            if (isInitialRender && visualElement.blockInitialAnimation) {\n                shouldAnimateType = false;\n            }\n            /**\n             * If this is an inherited prop we want to hard-block animations\n             */\n            if (shouldAnimateType && (!isInherited || handledRemovedValues)) {\n                animations.push(...definitionList.map((animation) => ({\n                    animation: animation,\n                    options: { type },\n                })));\n            }\n        }\n        /**\n         * If there are some removed value that haven't been dealt with,\n         * we need to create a new animation that falls back either to the value\n         * defined in the style prop, or the last read value.\n         */\n        if (removedKeys.size) {\n            const fallbackAnimation = {};\n            removedKeys.forEach((key) => {\n                const fallbackTarget = visualElement.getBaseTarget(key);\n                const motionValue = visualElement.getValue(key);\n                if (motionValue)\n                    motionValue.liveStyle = true;\n                // @ts-expect-error - @mattgperry to figure if we should do something here\n                fallbackAnimation[key] = fallbackTarget !== null && fallbackTarget !== void 0 ? fallbackTarget : null;\n            });\n            animations.push({ animation: fallbackAnimation });\n        }\n        let shouldAnimate = Boolean(animations.length);\n        if (isInitialRender &&\n            (props.initial === false || props.initial === props.animate) &&\n            !visualElement.manuallyAnimateOnMount) {\n            shouldAnimate = false;\n        }\n        isInitialRender = false;\n        return shouldAnimate ? animate(animations) : Promise.resolve();\n    }\n    /**\n     * Change whether a certain animation type is active.\n     */\n    function setActive(type, isActive) {\n        var _a;\n        // If the active state hasn't changed, we can safely do nothing here\n        if (state[type].isActive === isActive)\n            return Promise.resolve();\n        // Propagate active change to children\n        (_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach((child) => { var _a; return (_a = child.animationState) === null || _a === void 0 ? void 0 : _a.setActive(type, isActive); });\n        state[type].isActive = isActive;\n        const animations = animateChanges(type);\n        for (const key in state) {\n            state[key].protectedKeys = {};\n        }\n        return animations;\n    }\n    return {\n        animateChanges,\n        setActive,\n        setAnimateFunction,\n        getState: () => state,\n        reset: () => {\n            state = createState();\n            isInitialRender = true;\n        },\n    };\n}\nfunction checkVariantsDidChange(prev, next) {\n    if (typeof next === \"string\") {\n        return next !== prev;\n    }\n    else if (Array.isArray(next)) {\n        return !shallowCompare(next, prev);\n    }\n    return false;\n}\nfunction createTypeState(isActive = false) {\n    return {\n        isActive,\n        protectedKeys: {},\n        needsAnimating: {},\n        prevResolvedValues: {},\n    };\n}\nfunction createState() {\n    return {\n        animate: createTypeState(true),\n        whileInView: createTypeState(),\n        whileHover: createTypeState(),\n        whileTap: createTypeState(),\n        whileDrag: createTypeState(),\n        whileFocus: createTypeState(),\n        exit: createTypeState(),\n    };\n}\n\nexport { checkVariantsDidChange, createAnimationState };\n","class Feature {\n    constructor(node) {\n        this.isMounted = false;\n        this.node = node;\n    }\n    update() { }\n}\n\nexport { Feature };\n","import { isAnimationControls } from '../../../animation/utils/is-animation-controls.mjs';\nimport { createAnimationState } from '../../../render/utils/animation-state.mjs';\nimport { Feature } from '../Feature.mjs';\n\nclass AnimationFeature extends Feature {\n    /**\n     * We dynamically generate the AnimationState manager as it contains a reference\n     * to the underlying animation library. We only want to load that if we load this,\n     * so people can optionally code split it out using the `m` component.\n     */\n    constructor(node) {\n        super(node);\n        node.animationState || (node.animationState = createAnimationState(node));\n    }\n    updateAnimationControlsSubscription() {\n        const { animate } = this.node.getProps();\n        if (isAnimationControls(animate)) {\n            this.unmountControls = animate.subscribe(this.node);\n        }\n    }\n    /**\n     * Subscribe any provided AnimationControls to the component's VisualElement\n     */\n    mount() {\n        this.updateAnimationControlsSubscription();\n    }\n    update() {\n        const { animate } = this.node.getProps();\n        const { animate: prevAnimate } = this.node.prevProps || {};\n        if (animate !== prevAnimate) {\n            this.updateAnimationControlsSubscription();\n        }\n    }\n    unmount() {\n        var _a;\n        this.node.animationState.reset();\n        (_a = this.unmountControls) === null || _a === void 0 ? void 0 : _a.call(this);\n    }\n}\n\nexport { AnimationFeature };\n","import { Feature } from '../Feature.mjs';\n\nlet id = 0;\nclass ExitAnimationFeature extends Feature {\n    constructor() {\n        super(...arguments);\n        this.id = id++;\n    }\n    update() {\n        if (!this.node.presenceContext)\n            return;\n        const { isPresent, onExitComplete } = this.node.presenceContext;\n        const { isPresent: prevIsPresent } = this.node.prevPresenceContext || {};\n        if (!this.node.animationState || isPresent === prevIsPresent) {\n            return;\n        }\n        const exitAnimation = this.node.animationState.setActive(\"exit\", !isPresent);\n        if (onExitComplete && !isPresent) {\n            exitAnimation.then(() => onExitComplete(this.id));\n        }\n    }\n    mount() {\n        const { register } = this.node.presenceContext || {};\n        if (register) {\n            this.unmount = register(this.id);\n        }\n    }\n    unmount() { }\n}\n\nexport { ExitAnimationFeature };\n","import { AnimationFeature } from './animation/index.mjs';\nimport { ExitAnimationFeature } from './animation/exit.mjs';\n\nconst animations = {\n    animation: {\n        Feature: AnimationFeature,\n    },\n    exit: {\n        Feature: ExitAnimationFeature,\n    },\n};\n\nexport { animations };\n","const isPrimaryPointer = (event) => {\n    if (event.pointerType === \"mouse\") {\n        return typeof event.button !== \"number\" || event.button <= 0;\n    }\n    else {\n        /**\n         * isPrimary is true for all mice buttons, whereas every touch point\n         * is regarded as its own input. So subsequent concurrent touch points\n         * will be false.\n         *\n         * Specifically match against false here as incomplete versions of\n         * PointerEvents in very old browser might have it set as undefined.\n         */\n        return event.isPrimary !== false;\n    }\n};\n\nexport { isPrimaryPointer };\n","import { isPrimaryPointer } from './utils/is-primary-pointer.mjs';\n\nfunction extractEventInfo(event, pointType = \"page\") {\n    return {\n        point: {\n            x: event[`${pointType}X`],\n            y: event[`${pointType}Y`],\n        },\n    };\n}\nconst addPointerInfo = (handler) => {\n    return (event) => isPrimaryPointer(event) && handler(event, extractEventInfo(event));\n};\n\nexport { addPointerInfo, extractEventInfo };\n","function addDomEvent(target, eventName, handler, options = { passive: true }) {\n    target.addEventListener(eventName, handler, options);\n    return () => target.removeEventListener(eventName, handler);\n}\n\nexport { addDomEvent };\n","import { addDomEvent } from './add-dom-event.mjs';\nimport { addPointerInfo } from './event-info.mjs';\n\nfunction addPointerEvent(target, eventName, handler, options) {\n    return addDomEvent(target, eventName, addPointerInfo(handler), options);\n}\n\nexport { addPointerEvent };\n","const distance = (a, b) => Math.abs(a - b);\nfunction distance2D(a, b) {\n    // Multi-dimensional\n    const xDelta = distance(a.x, b.x);\n    const yDelta = distance(a.y, b.y);\n    return Math.sqrt(xDelta ** 2 + yDelta ** 2);\n}\n\nexport { distance, distance2D };\n","import { extractEventInfo } from '../../events/event-info.mjs';\nimport { secondsToMilliseconds, millisecondsToSeconds } from '../../utils/time-conversion.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { pipe } from '../../utils/pipe.mjs';\nimport { distance2D } from '../../utils/distance.mjs';\nimport { isPrimaryPointer } from '../../events/utils/is-primary-pointer.mjs';\nimport { frame, cancelFrame, frameData } from '../../frameloop/frame.mjs';\n\n/**\n * @internal\n */\nclass PanSession {\n    constructor(event, handlers, { transformPagePoint, contextWindow, dragSnapToOrigin = false } = {}) {\n        /**\n         * @internal\n         */\n        this.startEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEventInfo = null;\n        /**\n         * @internal\n         */\n        this.handlers = {};\n        /**\n         * @internal\n         */\n        this.contextWindow = window;\n        this.updatePoint = () => {\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const info = getPanInfo(this.lastMoveEventInfo, this.history);\n            const isPanStarted = this.startEvent !== null;\n            // Only start panning if the offset is larger than 3 pixels. If we make it\n            // any larger than this we'll want to reset the pointer history\n            // on the first update to avoid visual snapping to the cursoe.\n            const isDistancePastThreshold = distance2D(info.offset, { x: 0, y: 0 }) >= 3;\n            if (!isPanStarted && !isDistancePastThreshold)\n                return;\n            const { point } = info;\n            const { timestamp } = frameData;\n            this.history.push({ ...point, timestamp });\n            const { onStart, onMove } = this.handlers;\n            if (!isPanStarted) {\n                onStart && onStart(this.lastMoveEvent, info);\n                this.startEvent = this.lastMoveEvent;\n            }\n            onMove && onMove(this.lastMoveEvent, info);\n        };\n        this.handlePointerMove = (event, info) => {\n            this.lastMoveEvent = event;\n            this.lastMoveEventInfo = transformPoint(info, this.transformPagePoint);\n            // Throttle mouse move event to once per frame\n            frame.update(this.updatePoint, true);\n        };\n        this.handlePointerUp = (event, info) => {\n            this.end();\n            const { onEnd, onSessionEnd, resumeAnimation } = this.handlers;\n            if (this.dragSnapToOrigin)\n                resumeAnimation && resumeAnimation();\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const panInfo = getPanInfo(event.type === \"pointercancel\"\n                ? this.lastMoveEventInfo\n                : transformPoint(info, this.transformPagePoint), this.history);\n            if (this.startEvent && onEnd) {\n                onEnd(event, panInfo);\n            }\n            onSessionEnd && onSessionEnd(event, panInfo);\n        };\n        // If we have more than one touch, don't start detecting this gesture\n        if (!isPrimaryPointer(event))\n            return;\n        this.dragSnapToOrigin = dragSnapToOrigin;\n        this.handlers = handlers;\n        this.transformPagePoint = transformPagePoint;\n        this.contextWindow = contextWindow || window;\n        const info = extractEventInfo(event);\n        const initialInfo = transformPoint(info, this.transformPagePoint);\n        const { point } = initialInfo;\n        const { timestamp } = frameData;\n        this.history = [{ ...point, timestamp }];\n        const { onSessionStart } = handlers;\n        onSessionStart &&\n            onSessionStart(event, getPanInfo(initialInfo, this.history));\n        this.removeListeners = pipe(addPointerEvent(this.contextWindow, \"pointermove\", this.handlePointerMove), addPointerEvent(this.contextWindow, \"pointerup\", this.handlePointerUp), addPointerEvent(this.contextWindow, \"pointercancel\", this.handlePointerUp));\n    }\n    updateHandlers(handlers) {\n        this.handlers = handlers;\n    }\n    end() {\n        this.removeListeners && this.removeListeners();\n        cancelFrame(this.updatePoint);\n    }\n}\nfunction transformPoint(info, transformPagePoint) {\n    return transformPagePoint ? { point: transformPagePoint(info.point) } : info;\n}\nfunction subtractPoint(a, b) {\n    return { x: a.x - b.x, y: a.y - b.y };\n}\nfunction getPanInfo({ point }, history) {\n    return {\n        point,\n        delta: subtractPoint(point, lastDevicePoint(history)),\n        offset: subtractPoint(point, startDevicePoint(history)),\n        velocity: getVelocity(history, 0.1),\n    };\n}\nfunction startDevicePoint(history) {\n    return history[0];\n}\nfunction lastDevicePoint(history) {\n    return history[history.length - 1];\n}\nfunction getVelocity(history, timeDelta) {\n    if (history.length < 2) {\n        return { x: 0, y: 0 };\n    }\n    let i = history.length - 1;\n    let timestampedPoint = null;\n    const lastPoint = lastDevicePoint(history);\n    while (i >= 0) {\n        timestampedPoint = history[i];\n        if (lastPoint.timestamp - timestampedPoint.timestamp >\n            secondsToMilliseconds(timeDelta)) {\n            break;\n        }\n        i--;\n    }\n    if (!timestampedPoint) {\n        return { x: 0, y: 0 };\n    }\n    const time = millisecondsToSeconds(lastPoint.timestamp - timestampedPoint.timestamp);\n    if (time === 0) {\n        return { x: 0, y: 0 };\n    }\n    const currentVelocity = {\n        x: (lastPoint.x - timestampedPoint.x) / time,\n        y: (lastPoint.y - timestampedPoint.y) / time,\n    };\n    if (currentVelocity.x === Infinity) {\n        currentVelocity.x = 0;\n    }\n    if (currentVelocity.y === Infinity) {\n        currentVelocity.y = 0;\n    }\n    return currentVelocity;\n}\n\nexport { PanSession };\n","function createLock(name) {\n    let lock = null;\n    return () => {\n        const openLock = () => {\n            lock = null;\n        };\n        if (lock === null) {\n            lock = name;\n            return openLock;\n        }\n        return false;\n    };\n}\nconst globalHorizontalLock = createLock(\"dragHorizontal\");\nconst globalVerticalLock = createLock(\"dragVertical\");\nfunction getGlobalLock(drag) {\n    let lock = false;\n    if (drag === \"y\") {\n        lock = globalVerticalLock();\n    }\n    else if (drag === \"x\") {\n        lock = globalHorizontalLock();\n    }\n    else {\n        const openHorizontal = globalHorizontalLock();\n        const openVertical = globalVerticalLock();\n        if (openHorizontal && openVertical) {\n            lock = () => {\n                openHorizontal();\n                openVertical();\n            };\n        }\n        else {\n            // Release the locks because we don't use them\n            if (openHorizontal)\n                openHorizontal();\n            if (openVertical)\n                openVertical();\n        }\n    }\n    return lock;\n}\nfunction isDragActive() {\n    // Check the gesture lock - if we get it, it means no drag gesture is active\n    // and we can safely fire the tap gesture.\n    const openGestureLock = getGlobalLock(true);\n    if (!openGestureLock)\n        return true;\n    openGestureLock();\n    return false;\n}\n\nexport { createLock, getGlobalLock, isDragActive };\n","function isRefObject(ref) {\n    return (ref &&\n        typeof ref === \"object\" &&\n        Object.prototype.hasOwnProperty.call(ref, \"current\"));\n}\n\nexport { isRefObject };\n","import { mixNumber } from '../../utils/mix/number.mjs';\n\nconst SCALE_PRECISION = 0.0001;\nconst SCALE_MIN = 1 - SCALE_PRECISION;\nconst SCALE_MAX = 1 + SCALE_PRECISION;\nconst TRANSLATE_PRECISION = 0.01;\nconst TRANSLATE_MIN = 0 - TRANSLATE_PRECISION;\nconst TRANSLATE_MAX = 0 + TRANSLATE_PRECISION;\nfunction calcLength(axis) {\n    return axis.max - axis.min;\n}\nfunction isNear(value, target, maxDistance) {\n    return Math.abs(value - target) <= maxDistance;\n}\nfunction calcAxisDelta(delta, source, target, origin = 0.5) {\n    delta.origin = origin;\n    delta.originPoint = mixNumber(source.min, source.max, delta.origin);\n    delta.scale = calcLength(target) / calcLength(source);\n    delta.translate =\n        mixNumber(target.min, target.max, delta.origin) - delta.originPoint;\n    if ((delta.scale >= SCALE_MIN && delta.scale <= SCALE_MAX) ||\n        isNaN(delta.scale)) {\n        delta.scale = 1.0;\n    }\n    if ((delta.translate >= TRANSLATE_MIN &&\n        delta.translate <= TRANSLATE_MAX) ||\n        isNaN(delta.translate)) {\n        delta.translate = 0.0;\n    }\n}\nfunction calcBoxDelta(delta, source, target, origin) {\n    calcAxisDelta(delta.x, source.x, target.x, origin ? origin.originX : undefined);\n    calcAxisDelta(delta.y, source.y, target.y, origin ? origin.originY : undefined);\n}\nfunction calcRelativeAxis(target, relative, parent) {\n    target.min = parent.min + relative.min;\n    target.max = target.min + calcLength(relative);\n}\nfunction calcRelativeBox(target, relative, parent) {\n    calcRelativeAxis(target.x, relative.x, parent.x);\n    calcRelativeAxis(target.y, relative.y, parent.y);\n}\nfunction calcRelativeAxisPosition(target, layout, parent) {\n    target.min = layout.min - parent.min;\n    target.max = target.min + calcLength(layout);\n}\nfunction calcRelativePosition(target, layout, parent) {\n    calcRelativeAxisPosition(target.x, layout.x, parent.x);\n    calcRelativeAxisPosition(target.y, layout.y, parent.y);\n}\n\nexport { calcAxisDelta, calcBoxDelta, calcLength, calcRelativeAxis, calcRelativeAxisPosition, calcRelativeBox, calcRelativePosition, isNear };\n","import { progress } from '../../../utils/progress.mjs';\nimport { calcLength } from '../../../projection/geometry/delta-calc.mjs';\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { mixNumber } from '../../../utils/mix/number.mjs';\n\n/**\n * Apply constraints to a point. These constraints are both physical along an\n * axis, and an elastic factor that determines how much to constrain the point\n * by if it does lie outside the defined parameters.\n */\nfunction applyConstraints(point, { min, max }, elastic) {\n    if (min !== undefined && point < min) {\n        // If we have a min point defined, and this is outside of that, constrain\n        point = elastic\n            ? mixNumber(min, point, elastic.min)\n            : Math.max(point, min);\n    }\n    else if (max !== undefined && point > max) {\n        // If we have a max point defined, and this is outside of that, constrain\n        point = elastic\n            ? mixNumber(max, point, elastic.max)\n            : Math.min(point, max);\n    }\n    return point;\n}\n/**\n * Calculate constraints in terms of the viewport when defined relatively to the\n * measured axis. This is measured from the nearest edge, so a max constraint of 200\n * on an axis with a max value of 300 would return a constraint of 500 - axis length\n */\nfunction calcRelativeAxisConstraints(axis, min, max) {\n    return {\n        min: min !== undefined ? axis.min + min : undefined,\n        max: max !== undefined\n            ? axis.max + max - (axis.max - axis.min)\n            : undefined,\n    };\n}\n/**\n * Calculate constraints in terms of the viewport when\n * defined relatively to the measured bounding box.\n */\nfunction calcRelativeConstraints(layoutBox, { top, left, bottom, right }) {\n    return {\n        x: calcRelativeAxisConstraints(layoutBox.x, left, right),\n        y: calcRelativeAxisConstraints(layoutBox.y, top, bottom),\n    };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative axis\n */\nfunction calcViewportAxisConstraints(layoutAxis, constraintsAxis) {\n    let min = constraintsAxis.min - layoutAxis.min;\n    let max = constraintsAxis.max - layoutAxis.max;\n    // If the constraints axis is actually smaller than the layout axis then we can\n    // flip the constraints\n    if (constraintsAxis.max - constraintsAxis.min <\n        layoutAxis.max - layoutAxis.min) {\n        [min, max] = [max, min];\n    }\n    return { min, max };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative box\n */\nfunction calcViewportConstraints(layoutBox, constraintsBox) {\n    return {\n        x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),\n        y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y),\n    };\n}\n/**\n * Calculate a transform origin relative to the source axis, between 0-1, that results\n * in an asthetically pleasing scale/transform needed to project from source to target.\n */\nfunction calcOrigin(source, target) {\n    let origin = 0.5;\n    const sourceLength = calcLength(source);\n    const targetLength = calcLength(target);\n    if (targetLength > sourceLength) {\n        origin = progress(target.min, target.max - sourceLength, source.min);\n    }\n    else if (sourceLength > targetLength) {\n        origin = progress(source.min, source.max - targetLength, target.min);\n    }\n    return clamp(0, 1, origin);\n}\n/**\n * Rebase the calculated viewport constraints relative to the layout.min point.\n */\nfunction rebaseAxisConstraints(layout, constraints) {\n    const relativeConstraints = {};\n    if (constraints.min !== undefined) {\n        relativeConstraints.min = constraints.min - layout.min;\n    }\n    if (constraints.max !== undefined) {\n        relativeConstraints.max = constraints.max - layout.min;\n    }\n    return relativeConstraints;\n}\nconst defaultElastic = 0.35;\n/**\n * Accepts a dragElastic prop and returns resolved elastic values for each axis.\n */\nfunction resolveDragElastic(dragElastic = defaultElastic) {\n    if (dragElastic === false) {\n        dragElastic = 0;\n    }\n    else if (dragElastic === true) {\n        dragElastic = defaultElastic;\n    }\n    return {\n        x: resolveAxisElastic(dragElastic, \"left\", \"right\"),\n        y: resolveAxisElastic(dragElastic, \"top\", \"bottom\"),\n    };\n}\nfunction resolveAxisElastic(dragElastic, minLabel, maxLabel) {\n    return {\n        min: resolvePointElastic(dragElastic, minLabel),\n        max: resolvePointElastic(dragElastic, maxLabel),\n    };\n}\nfunction resolvePointElastic(dragElastic, label) {\n    return typeof dragElastic === \"number\"\n        ? dragElastic\n        : dragElastic[label] || 0;\n}\n\nexport { applyConstraints, calcOrigin, calcRelativeAxisConstraints, calcRelativeConstraints, calcViewportAxisConstraints, calcViewportConstraints, defaultElastic, rebaseAxisConstraints, resolveAxisElastic, resolveDragElastic, resolvePointElastic };\n","const createAxisDelta = () => ({\n    translate: 0,\n    scale: 1,\n    origin: 0,\n    originPoint: 0,\n});\nconst createDelta = () => ({\n    x: createAxisDelta(),\n    y: createAxisDelta(),\n});\nconst createAxis = () => ({ min: 0, max: 0 });\nconst createBox = () => ({\n    x: createAxis(),\n    y: createAxis(),\n});\n\nexport { createAxis, createAxisDelta, createBox, createDelta };\n","function eachAxis(callback) {\n    return [callback(\"x\"), callback(\"y\")];\n}\n\nexport { eachAxis };\n","/**\n * Bounding boxes tend to be defined as top, left, right, bottom. For various operations\n * it's easier to consider each axis individually. This function returns a bounding box\n * as a map of single-axis min/max values.\n */\nfunction convertBoundingBoxToBox({ top, left, right, bottom, }) {\n    return {\n        x: { min: left, max: right },\n        y: { min: top, max: bottom },\n    };\n}\nfunction convertBoxToBoundingBox({ x, y }) {\n    return { top: y.min, right: x.max, bottom: y.max, left: x.min };\n}\n/**\n * Applies a TransformPoint function to a bounding box. TransformPoint is usually a function\n * provided by Framer to allow measured points to be corrected for device scaling. This is used\n * when measuring DOM elements and DOM event points.\n */\nfunction transformBoxPoints(point, transformPoint) {\n    if (!transformPoint)\n        return point;\n    const topLeft = transformPoint({ x: point.left, y: point.top });\n    const bottomRight = transformPoint({ x: point.right, y: point.bottom });\n    return {\n        top: topLeft.y,\n        left: topLeft.x,\n        bottom: bottomRight.y,\n        right: bottomRight.x,\n    };\n}\n\nexport { convertBoundingBoxToBox, convertBoxToBoundingBox, transformBoxPoints };\n","function isIdentityScale(scale) {\n    return scale === undefined || scale === 1;\n}\nfunction hasScale({ scale, scaleX, scaleY }) {\n    return (!isIdentityScale(scale) ||\n        !isIdentityScale(scaleX) ||\n        !isIdentityScale(scaleY));\n}\nfunction hasTransform(values) {\n    return (hasScale(values) ||\n        has2DTranslate(values) ||\n        values.z ||\n        values.rotate ||\n        values.rotateX ||\n        values.rotateY ||\n        values.skewX ||\n        values.skewY);\n}\nfunction has2DTranslate(values) {\n    return is2DTranslate(values.x) || is2DTranslate(values.y);\n}\nfunction is2DTranslate(value) {\n    return value && value !== \"0%\";\n}\n\nexport { has2DTranslate, hasScale, hasTransform };\n","import { mixNumber } from '../../utils/mix/number.mjs';\nimport { hasTransform } from '../utils/has-transform.mjs';\n\n/**\n * Scales a point based on a factor and an originPoint\n */\nfunction scalePoint(point, scale, originPoint) {\n    const distanceFromOrigin = point - originPoint;\n    const scaled = scale * distanceFromOrigin;\n    return originPoint + scaled;\n}\n/**\n * Applies a translate/scale delta to a point\n */\nfunction applyPointDelta(point, translate, scale, originPoint, boxScale) {\n    if (boxScale !== undefined) {\n        point = scalePoint(point, boxScale, originPoint);\n    }\n    return scalePoint(point, scale, originPoint) + translate;\n}\n/**\n * Applies a translate/scale delta to an axis\n */\nfunction applyAxisDelta(axis, translate = 0, scale = 1, originPoint, boxScale) {\n    axis.min = applyPointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = applyPointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Applies a translate/scale delta to a box\n */\nfunction applyBoxDelta(box, { x, y }) {\n    applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);\n    applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);\n}\nconst TREE_SCALE_SNAP_MIN = 0.999999999999;\nconst TREE_SCALE_SNAP_MAX = 1.0000000000001;\n/**\n * Apply a tree of deltas to a box. We do this to calculate the effect of all the transforms\n * in a tree upon our box before then calculating how to project it into our desired viewport-relative box\n *\n * This is the final nested loop within updateLayoutDelta for future refactoring\n */\nfunction applyTreeDeltas(box, treeScale, treePath, isSharedTransition = false) {\n    const treeLength = treePath.length;\n    if (!treeLength)\n        return;\n    // Reset the treeScale\n    treeScale.x = treeScale.y = 1;\n    let node;\n    let delta;\n    for (let i = 0; i < treeLength; i++) {\n        node = treePath[i];\n        delta = node.projectionDelta;\n        /**\n         * TODO: Prefer to remove this, but currently we have motion components with\n         * display: contents in Framer.\n         */\n        const { visualElement } = node.options;\n        if (visualElement &&\n            visualElement.props.style &&\n            visualElement.props.style.display === \"contents\") {\n            continue;\n        }\n        if (isSharedTransition &&\n            node.options.layoutScroll &&\n            node.scroll &&\n            node !== node.root) {\n            transformBox(box, {\n                x: -node.scroll.offset.x,\n                y: -node.scroll.offset.y,\n            });\n        }\n        if (delta) {\n            // Incoporate each ancestor's scale into a culmulative treeScale for this component\n            treeScale.x *= delta.x.scale;\n            treeScale.y *= delta.y.scale;\n            // Apply each ancestor's calculated delta into this component's recorded layout box\n            applyBoxDelta(box, delta);\n        }\n        if (isSharedTransition && hasTransform(node.latestValues)) {\n            transformBox(box, node.latestValues);\n        }\n    }\n    /**\n     * Snap tree scale back to 1 if it's within a non-perceivable threshold.\n     * This will help reduce useless scales getting rendered.\n     */\n    if (treeScale.x < TREE_SCALE_SNAP_MAX &&\n        treeScale.x > TREE_SCALE_SNAP_MIN) {\n        treeScale.x = 1.0;\n    }\n    if (treeScale.y < TREE_SCALE_SNAP_MAX &&\n        treeScale.y > TREE_SCALE_SNAP_MIN) {\n        treeScale.y = 1.0;\n    }\n}\nfunction translateAxis(axis, distance) {\n    axis.min = axis.min + distance;\n    axis.max = axis.max + distance;\n}\n/**\n * Apply a transform to an axis from the latest resolved motion values.\n * This function basically acts as a bridge between a flat motion value map\n * and applyAxisDelta\n */\nfunction transformAxis(axis, axisTranslate, axisScale, boxScale, axisOrigin = 0.5) {\n    const originPoint = mixNumber(axis.min, axis.max, axisOrigin);\n    // Apply the axis delta to the final axis\n    applyAxisDelta(axis, axisTranslate, axisScale, originPoint, boxScale);\n}\n/**\n * Apply a transform to a box from the latest resolved motion values.\n */\nfunction transformBox(box, transform) {\n    transformAxis(box.x, transform.x, transform.scaleX, transform.scale, transform.originX);\n    transformAxis(box.y, transform.y, transform.scaleY, transform.scale, transform.originY);\n}\n\nexport { applyAxisDelta, applyBoxDelta, applyPointDelta, applyTreeDeltas, scalePoint, transformAxis, transformBox, translateAxis };\n","import { convertBoundingBoxToBox, transformBoxPoints } from '../geometry/conversion.mjs';\nimport { translateAxis } from '../geometry/delta-apply.mjs';\n\nfunction measureViewportBox(instance, transformPoint) {\n    return convertBoundingBoxToBox(transformBoxPoints(instance.getBoundingClientRect(), transformPoint));\n}\nfunction measurePageBox(element, rootProjectionNode, transformPagePoint) {\n    const viewportBox = measureViewportBox(element, transformPagePoint);\n    const { scroll } = rootProjectionNode;\n    if (scroll) {\n        translateAxis(viewportBox.x, scroll.offset.x);\n        translateAxis(viewportBox.y, scroll.offset.y);\n    }\n    return viewportBox;\n}\n\nexport { measurePageBox, measureViewportBox };\n","// Fixes https://github.com/framer/motion/issues/2270\nconst getContextWindow = ({ current }) => {\n    return current ? current.ownerDocument.defaultView : null;\n};\n\nexport { getContextWindow };\n","import { invariant } from '../../utils/errors.mjs';\nimport { PanSession } from '../pan/PanSession.mjs';\nimport { getGlobalLock } from './utils/lock.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, rebaseAxisConstraints, calcViewportConstraints, calcOrigin, defaultElastic } from './utils/constraints.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\nimport { calcLength } from '../../projection/geometry/delta-calc.mjs';\nimport { mixNumber } from '../../utils/mix/number.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { animateMotionValue } from '../../animation/interfaces/motion-value.mjs';\nimport { getContextWindow } from '../../utils/get-context-window.mjs';\nimport { addValueToWillChange } from '../../value/use-will-change/add-will-change.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\nconst elementDragControls = new WeakMap();\n/**\n *\n */\n// let latestPointerEvent: PointerEvent\nclass VisualElementDragControls {\n    constructor(visualElement) {\n        // This is a reference to the global drag gesture lock, ensuring only one component\n        // can \"capture\" the drag of one or both axes.\n        // TODO: Look into moving this into pansession?\n        this.openGlobalLock = null;\n        this.isDragging = false;\n        this.currentDirection = null;\n        this.originPoint = { x: 0, y: 0 };\n        /**\n         * The permitted boundaries of travel, in pixels.\n         */\n        this.constraints = false;\n        this.hasMutatedConstraints = false;\n        /**\n         * The per-axis resolved elastic values.\n         */\n        this.elastic = createBox();\n        this.visualElement = visualElement;\n    }\n    start(originEvent, { snapToCursor = false } = {}) {\n        /**\n         * Don't start dragging if this component is exiting\n         */\n        const { presenceContext } = this.visualElement;\n        if (presenceContext && presenceContext.isPresent === false)\n            return;\n        const onSessionStart = (event) => {\n            const { dragSnapToOrigin } = this.getProps();\n            // Stop or pause any animations on both axis values immediately. This allows the user to throw and catch\n            // the component.\n            dragSnapToOrigin ? this.pauseAnimation() : this.stopAnimation();\n            if (snapToCursor) {\n                this.snapToCursor(extractEventInfo(event, \"page\").point);\n            }\n        };\n        const onStart = (event, info) => {\n            var _a;\n            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n            const { drag, dragPropagation, onDragStart } = this.getProps();\n            if (drag && !dragPropagation) {\n                if (this.openGlobalLock)\n                    this.openGlobalLock();\n                this.openGlobalLock = getGlobalLock(drag);\n                // If we don 't have the lock, don't start dragging\n                if (!this.openGlobalLock)\n                    return;\n            }\n            this.isDragging = true;\n            this.currentDirection = null;\n            this.resolveConstraints();\n            if (this.visualElement.projection) {\n                this.visualElement.projection.isAnimationBlocked = true;\n                this.visualElement.projection.target = undefined;\n            }\n            /**\n             * Record gesture origin\n             */\n            eachAxis((axis) => {\n                let current = this.getAxisMotionValue(axis).get() || 0;\n                /**\n                 * If the MotionValue is a percentage value convert to px\n                 */\n                if (percent.test(current)) {\n                    const { projection } = this.visualElement;\n                    if (projection && projection.layout) {\n                        const measuredAxis = projection.layout.layoutBox[axis];\n                        if (measuredAxis) {\n                            const length = calcLength(measuredAxis);\n                            current = length * (parseFloat(current) / 100);\n                        }\n                    }\n                }\n                this.originPoint[axis] = current;\n            });\n            // Fire onDragStart event\n            if (onDragStart) {\n                frame.postRender(() => onDragStart(event, info));\n            }\n            (_a = this.removeWillChange) === null || _a === void 0 ? void 0 : _a.call(this);\n            this.removeWillChange = addValueToWillChange(this.visualElement, \"transform\");\n            const { animationState } = this.visualElement;\n            animationState && animationState.setActive(\"whileDrag\", true);\n        };\n        const onMove = (event, info) => {\n            // latestPointerEvent = event\n            const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag, } = this.getProps();\n            // If we didn't successfully receive the gesture lock, early return.\n            if (!dragPropagation && !this.openGlobalLock)\n                return;\n            const { offset } = info;\n            // Attempt to detect drag direction if directionLock is true\n            if (dragDirectionLock && this.currentDirection === null) {\n                this.currentDirection = getCurrentDirection(offset);\n                // If we've successfully set a direction, notify listener\n                if (this.currentDirection !== null) {\n                    onDirectionLock && onDirectionLock(this.currentDirection);\n                }\n                return;\n            }\n            // Update each point with the latest position\n            this.updateAxis(\"x\", info.point, offset);\n            this.updateAxis(\"y\", info.point, offset);\n            /**\n             * Ideally we would leave the renderer to fire naturally at the end of\n             * this frame but if the element is about to change layout as the result\n             * of a re-render we want to ensure the browser can read the latest\n             * bounding box to ensure the pointer and element don't fall out of sync.\n             */\n            this.visualElement.render();\n            /**\n             * This must fire after the render call as it might trigger a state\n             * change which itself might trigger a layout update.\n             */\n            onDrag && onDrag(event, info);\n        };\n        const onSessionEnd = (event, info) => this.stop(event, info);\n        const resumeAnimation = () => eachAxis((axis) => {\n            var _a;\n            return this.getAnimationState(axis) === \"paused\" &&\n                ((_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.play());\n        });\n        const { dragSnapToOrigin } = this.getProps();\n        this.panSession = new PanSession(originEvent, {\n            onSessionStart,\n            onStart,\n            onMove,\n            onSessionEnd,\n            resumeAnimation,\n        }, {\n            transformPagePoint: this.visualElement.getTransformPagePoint(),\n            dragSnapToOrigin,\n            contextWindow: getContextWindow(this.visualElement),\n        });\n    }\n    stop(event, info) {\n        var _a;\n        (_a = this.removeWillChange) === null || _a === void 0 ? void 0 : _a.call(this);\n        const isDragging = this.isDragging;\n        this.cancel();\n        if (!isDragging)\n            return;\n        const { velocity } = info;\n        this.startAnimation(velocity);\n        const { onDragEnd } = this.getProps();\n        if (onDragEnd) {\n            frame.postRender(() => onDragEnd(event, info));\n        }\n    }\n    cancel() {\n        this.isDragging = false;\n        const { projection, animationState } = this.visualElement;\n        if (projection) {\n            projection.isAnimationBlocked = false;\n        }\n        this.panSession && this.panSession.end();\n        this.panSession = undefined;\n        const { dragPropagation } = this.getProps();\n        if (!dragPropagation && this.openGlobalLock) {\n            this.openGlobalLock();\n            this.openGlobalLock = null;\n        }\n        animationState && animationState.setActive(\"whileDrag\", false);\n    }\n    updateAxis(axis, _point, offset) {\n        const { drag } = this.getProps();\n        // If we're not dragging this axis, do an early return.\n        if (!offset || !shouldDrag(axis, drag, this.currentDirection))\n            return;\n        const axisValue = this.getAxisMotionValue(axis);\n        let next = this.originPoint[axis] + offset[axis];\n        // Apply constraints\n        if (this.constraints && this.constraints[axis]) {\n            next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n        }\n        axisValue.set(next);\n    }\n    resolveConstraints() {\n        var _a;\n        const { dragConstraints, dragElastic } = this.getProps();\n        const layout = this.visualElement.projection &&\n            !this.visualElement.projection.layout\n            ? this.visualElement.projection.measure(false)\n            : (_a = this.visualElement.projection) === null || _a === void 0 ? void 0 : _a.layout;\n        const prevConstraints = this.constraints;\n        if (dragConstraints && isRefObject(dragConstraints)) {\n            if (!this.constraints) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        }\n        else {\n            if (dragConstraints && layout) {\n                this.constraints = calcRelativeConstraints(layout.layoutBox, dragConstraints);\n            }\n            else {\n                this.constraints = false;\n            }\n        }\n        this.elastic = resolveDragElastic(dragElastic);\n        /**\n         * If we're outputting to external MotionValues, we want to rebase the measured constraints\n         * from viewport-relative to component-relative.\n         */\n        if (prevConstraints !== this.constraints &&\n            layout &&\n            this.constraints &&\n            !this.hasMutatedConstraints) {\n            eachAxis((axis) => {\n                if (this.constraints !== false &&\n                    this.getAxisMotionValue(axis)) {\n                    this.constraints[axis] = rebaseAxisConstraints(layout.layoutBox[axis], this.constraints[axis]);\n                }\n            });\n        }\n    }\n    resolveRefConstraints() {\n        const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();\n        if (!constraints || !isRefObject(constraints))\n            return false;\n        const constraintsElement = constraints.current;\n        invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n        const { projection } = this.visualElement;\n        // TODO\n        if (!projection || !projection.layout)\n            return false;\n        const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n        let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);\n        /**\n         * If there's an onMeasureDragConstraints listener we call it and\n         * if different constraints are returned, set constraints to that\n         */\n        if (onMeasureDragConstraints) {\n            const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n            this.hasMutatedConstraints = !!userConstraints;\n            if (userConstraints) {\n                measuredConstraints = convertBoundingBoxToBox(userConstraints);\n            }\n        }\n        return measuredConstraints;\n    }\n    startAnimation(velocity) {\n        const { drag, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd, } = this.getProps();\n        const constraints = this.constraints || {};\n        const momentumAnimations = eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, this.currentDirection)) {\n                return;\n            }\n            let transition = (constraints && constraints[axis]) || {};\n            if (dragSnapToOrigin)\n                transition = { min: 0, max: 0 };\n            /**\n             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n             * of spring animations so we should look into adding a disable spring option to `inertia`.\n             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n             * using the value of `dragElastic`.\n             */\n            const bounceStiffness = dragElastic ? 200 : 1000000;\n            const bounceDamping = dragElastic ? 40 : 10000000;\n            const inertia = {\n                type: \"inertia\",\n                velocity: dragMomentum ? velocity[axis] : 0,\n                bounceStiffness,\n                bounceDamping,\n                timeConstant: 750,\n                restDelta: 1,\n                restSpeed: 10,\n                ...dragTransition,\n                ...transition,\n            };\n            // If we're not animating on an externally-provided `MotionValue` we can use the\n            // component's animation controls which will handle interactions with whileHover (etc),\n            // otherwise we just have to animate the `MotionValue` itself.\n            return this.startAxisValueAnimation(axis, inertia);\n        });\n        // Run all animations and then resolve the new drag constraints.\n        return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n    }\n    startAxisValueAnimation(axis, transition) {\n        const axisValue = this.getAxisMotionValue(axis);\n        return axisValue.start(animateMotionValue(axis, axisValue, 0, transition, this.visualElement, false, addValueToWillChange(this.visualElement, axis)));\n    }\n    stopAnimation() {\n        eachAxis((axis) => this.getAxisMotionValue(axis).stop());\n    }\n    pauseAnimation() {\n        eachAxis((axis) => { var _a; return (_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.pause(); });\n    }\n    getAnimationState(axis) {\n        var _a;\n        return (_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.state;\n    }\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */\n    getAxisMotionValue(axis) {\n        const dragKey = `_drag${axis.toUpperCase()}`;\n        const props = this.visualElement.getProps();\n        const externalMotionValue = props[dragKey];\n        return externalMotionValue\n            ? externalMotionValue\n            : this.visualElement.getValue(axis, (props.initial\n                ? props.initial[axis]\n                : undefined) || 0);\n    }\n    snapToCursor(point) {\n        eachAxis((axis) => {\n            const { drag } = this.getProps();\n            // If we're not dragging this axis, do an early return.\n            if (!shouldDrag(axis, drag, this.currentDirection))\n                return;\n            const { projection } = this.visualElement;\n            const axisValue = this.getAxisMotionValue(axis);\n            if (projection && projection.layout) {\n                const { min, max } = projection.layout.layoutBox[axis];\n                axisValue.set(point[axis] - mixNumber(min, max, 0.5));\n            }\n        });\n    }\n    /**\n     * When the viewport resizes we want to check if the measured constraints\n     * have changed and, if so, reposition the element within those new constraints\n     * relative to where it was before the resize.\n     */\n    scalePositionWithinConstraints() {\n        if (!this.visualElement.current)\n            return;\n        const { drag, dragConstraints } = this.getProps();\n        const { projection } = this.visualElement;\n        if (!isRefObject(dragConstraints) || !projection || !this.constraints)\n            return;\n        /**\n         * Stop current animations as there can be visual glitching if we try to do\n         * this mid-animation\n         */\n        this.stopAnimation();\n        /**\n         * Record the relative position of the dragged element relative to the\n         * constraints box and save as a progress value.\n         */\n        const boxProgress = { x: 0, y: 0 };\n        eachAxis((axis) => {\n            const axisValue = this.getAxisMotionValue(axis);\n            if (axisValue && this.constraints !== false) {\n                const latest = axisValue.get();\n                boxProgress[axis] = calcOrigin({ min: latest, max: latest }, this.constraints[axis]);\n            }\n        });\n        /**\n         * Update the layout of this element and resolve the latest drag constraints\n         */\n        const { transformTemplate } = this.visualElement.getProps();\n        this.visualElement.current.style.transform = transformTemplate\n            ? transformTemplate({}, \"\")\n            : \"none\";\n        projection.root && projection.root.updateScroll();\n        projection.updateLayout();\n        this.resolveConstraints();\n        /**\n         * For each axis, calculate the current progress of the layout axis\n         * within the new constraints.\n         */\n        eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, null))\n                return;\n            /**\n             * Calculate a new transform based on the previous box progress\n             */\n            const axisValue = this.getAxisMotionValue(axis);\n            const { min, max } = this.constraints[axis];\n            axisValue.set(mixNumber(min, max, boxProgress[axis]));\n        });\n    }\n    addListeners() {\n        if (!this.visualElement.current)\n            return;\n        elementDragControls.set(this.visualElement, this);\n        const element = this.visualElement.current;\n        /**\n         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n         */\n        const stopPointerListener = addPointerEvent(element, \"pointerdown\", (event) => {\n            const { drag, dragListener = true } = this.getProps();\n            drag && dragListener && this.start(event);\n        });\n        const measureDragConstraints = () => {\n            const { dragConstraints } = this.getProps();\n            if (isRefObject(dragConstraints) && dragConstraints.current) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        };\n        const { projection } = this.visualElement;\n        const stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n        if (projection && !projection.layout) {\n            projection.root && projection.root.updateScroll();\n            projection.updateLayout();\n        }\n        frame.read(measureDragConstraints);\n        /**\n         * Attach a window resize listener to scale the draggable target within its defined\n         * constraints as the window resizes.\n         */\n        const stopResizeListener = addDomEvent(window, \"resize\", () => this.scalePositionWithinConstraints());\n        /**\n         * If the element's layout changes, calculate the delta and apply that to\n         * the drag gesture's origin point.\n         */\n        const stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", (({ delta, hasLayoutChanged }) => {\n            if (this.isDragging && hasLayoutChanged) {\n                eachAxis((axis) => {\n                    const motionValue = this.getAxisMotionValue(axis);\n                    if (!motionValue)\n                        return;\n                    this.originPoint[axis] += delta[axis].translate;\n                    motionValue.set(motionValue.get() + delta[axis].translate);\n                });\n                this.visualElement.render();\n            }\n        }));\n        return () => {\n            stopResizeListener();\n            stopPointerListener();\n            stopMeasureLayoutListener();\n            stopLayoutUpdateListener && stopLayoutUpdateListener();\n        };\n    }\n    getProps() {\n        const props = this.visualElement.getProps();\n        const { drag = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = defaultElastic, dragMomentum = true, } = props;\n        return {\n            ...props,\n            drag,\n            dragDirectionLock,\n            dragPropagation,\n            dragConstraints,\n            dragElastic,\n            dragMomentum,\n        };\n    }\n}\nfunction shouldDrag(direction, drag, currentDirection) {\n    return ((drag === true || drag === direction) &&\n        (currentDirection === null || currentDirection === direction));\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\nfunction getCurrentDirection(offset, lockThreshold = 10) {\n    let direction = null;\n    if (Math.abs(offset.y) > lockThreshold) {\n        direction = \"y\";\n    }\n    else if (Math.abs(offset.x) > lockThreshold) {\n        direction = \"x\";\n    }\n    return direction;\n}\n\nexport { VisualElementDragControls, elementDragControls };\n","import { Feature } from '../../motion/features/Feature.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { VisualElementDragControls } from './VisualElementDragControls.mjs';\n\nclass DragGesture extends Feature {\n    constructor(node) {\n        super(node);\n        this.removeGroupControls = noop;\n        this.removeListeners = noop;\n        this.controls = new VisualElementDragControls(node);\n    }\n    mount() {\n        // If we've been provided a DragControls for manual control over the drag gesture,\n        // subscribe this component to it on mount.\n        const { dragControls } = this.node.getProps();\n        if (dragControls) {\n            this.removeGroupControls = dragControls.subscribe(this.controls);\n        }\n        this.removeListeners = this.controls.addListeners() || noop;\n    }\n    unmount() {\n        this.removeGroupControls();\n        this.removeListeners();\n    }\n}\n\nexport { DragGesture };\n","import { PanSession } from './PanSession.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { Feature } from '../../motion/features/Feature.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { getContextWindow } from '../../utils/get-context-window.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\nconst asyncHandler = (handler) => (event, info) => {\n    if (handler) {\n        frame.postRender(() => handler(event, info));\n    }\n};\nclass PanGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.removePointerDownListener = noop;\n    }\n    onPointerDown(pointerDownEvent) {\n        this.session = new PanSession(pointerDownEvent, this.createPanHandlers(), {\n            transformPagePoint: this.node.getTransformPagePoint(),\n            contextWindow: getContextWindow(this.node),\n        });\n    }\n    createPanHandlers() {\n        const { onPanSessionStart, onPanStart, onPan, onPanEnd } = this.node.getProps();\n        return {\n            onSessionStart: asyncHandler(onPanSessionStart),\n            onStart: asyncHandler(onPanStart),\n            onMove: onPan,\n            onEnd: (event, info) => {\n                delete this.session;\n                if (onPanEnd) {\n                    frame.postRender(() => onPanEnd(event, info));\n                }\n            },\n        };\n    }\n    mount() {\n        this.removePointerDownListener = addPointerEvent(this.node.current, \"pointerdown\", (event) => this.onPointerDown(event));\n    }\n    update() {\n        this.session && this.session.updateHandlers(this.createPanHandlers());\n    }\n    unmount() {\n        this.removePointerDownListener();\n        this.session && this.session.end();\n    }\n}\n\nexport { PanGesture };\n","import { useContext, useId, useEffect, useCallback } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\n\n/**\n * When a component is the child of `AnimatePresence`, it can use `usePresence`\n * to access information about whether it's still present in the React tree.\n *\n * ```jsx\n * import { usePresence } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const [isPresent, safeToRemove] = usePresence()\n *\n *   useEffect(() => {\n *     !isPresent && setTimeout(safeToRemove, 1000)\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * If `isPresent` is `false`, it means that a component has been removed the tree, but\n * `AnimatePresence` won't really remove it until `safeToRemove` has been called.\n *\n * @public\n */\nfunction usePresence() {\n    const context = useContext(PresenceContext);\n    if (context === null)\n        return [true, null];\n    const { isPresent, onExitComplete, register } = context;\n    // It's safe to call the following hooks conditionally (after an early return) because the context will always\n    // either be null or non-null for the lifespan of the component.\n    const id = useId();\n    useEffect(() => register(id), []);\n    const safeToRemove = useCallback(() => onExitComplete && onExitComplete(id), [id, onExitComplete]);\n    return !isPresent && onExitComplete ? [false, safeToRemove] : [true];\n}\n/**\n * Similar to `usePresence`, except `useIsPresent` simply returns whether or not the component is present.\n * There is no `safeToRemove` function.\n *\n * ```jsx\n * import { useIsPresent } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const isPresent = useIsPresent()\n *\n *   useEffect(() => {\n *     !isPresent && console.log(\"I've been removed!\")\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * @public\n */\nfunction useIsPresent() {\n    return isPresent(useContext(PresenceContext));\n}\nfunction isPresent(context) {\n    return context === null ? true : context.isPresent;\n}\n\nexport { isPresent, useIsPresent, usePresence };\n","\"use client\";\nimport { createContext } from 'react';\n\n/**\n * Internal, exported only for usage in Framer\n */\nconst SwitchLayoutGroupContext = createContext({});\n\nexport { SwitchLayoutGroupContext };\n","/**\n * This should only ever be modified on the client otherwise it'll\n * persist through server requests. If we need instanced states we\n * could lazy-init via root.\n */\nconst globalProjectionState = {\n    /**\n     * Global flag as to whether the tree has animated since the last time\n     * we resized the window\n     */\n    hasAnimatedSinceResize: true,\n    /**\n     * We set this to true once, on the first update. Any nodes added to the tree beyond that\n     * update will be given a `data-projection-id` attribute.\n     */\n    hasEverUpdated: false,\n};\n\nexport { globalProjectionState };\n","import { px } from '../../value/types/numbers/units.mjs';\n\nfunction pixelsToPercent(pixels, axis) {\n    if (axis.max === axis.min)\n        return 0;\n    return (pixels / (axis.max - axis.min)) * 100;\n}\n/**\n * We always correct borderRadius as a percentage rather than pixels to reduce paints.\n * For example, if you are projecting a box that is 100px wide with a 10px borderRadius\n * into a box that is 200px wide with a 20px borderRadius, that is actually a 10%\n * borderRadius in both states. If we animate between the two in pixels that will trigger\n * a paint each time. If we animate between the two in percentage we'll avoid a paint.\n */\nconst correctBorderRadius = {\n    correct: (latest, node) => {\n        if (!node.target)\n            return latest;\n        /**\n         * If latest is a string, if it's a percentage we can return immediately as it's\n         * going to be stretched appropriately. Otherwise, if it's a pixel, convert it to a number.\n         */\n        if (typeof latest === \"string\") {\n            if (px.test(latest)) {\n                latest = parseFloat(latest);\n            }\n            else {\n                return latest;\n            }\n        }\n        /**\n         * If latest is a number, it's a pixel value. We use the current viewportBox to calculate that\n         * pixel value as a percentage of each axis\n         */\n        const x = pixelsToPercent(latest, node.target.x);\n        const y = pixelsToPercent(latest, node.target.y);\n        return `${x}% ${y}%`;\n    },\n};\n\nexport { correctBorderRadius, pixelsToPercent };\n","import { mixNumber } from '../../utils/mix/number.mjs';\nimport { complex } from '../../value/types/complex/index.mjs';\n\nconst correctBoxShadow = {\n    correct: (latest, { treeScale, projectionDelta }) => {\n        const original = latest;\n        const shadow = complex.parse(latest);\n        // TODO: Doesn't support multiple shadows\n        if (shadow.length > 5)\n            return original;\n        const template = complex.createTransformer(latest);\n        const offset = typeof shadow[0] !== \"number\" ? 1 : 0;\n        // Calculate the overall context scale\n        const xScale = projectionDelta.x.scale * treeScale.x;\n        const yScale = projectionDelta.y.scale * treeScale.y;\n        shadow[0 + offset] /= xScale;\n        shadow[1 + offset] /= yScale;\n        /**\n         * Ideally we'd correct x and y scales individually, but because blur and\n         * spread apply to both we have to take a scale average and apply that instead.\n         * We could potentially improve the outcome of this by incorporating the ratio between\n         * the two scales.\n         */\n        const averageScale = mixNumber(xScale, yScale, 0.5);\n        // Blur\n        if (typeof shadow[2 + offset] === \"number\")\n            shadow[2 + offset] /= averageScale;\n        // Spread\n        if (typeof shadow[3 + offset] === \"number\")\n            shadow[3 + offset] /= averageScale;\n        return template(shadow);\n    },\n};\n\nexport { correctBoxShadow };\n","const scaleCorrectors = {};\nfunction addScaleCorrector(correctors) {\n    Object.assign(scaleCorrectors, correctors);\n}\n\nexport { addScaleCorrector, scaleCorrectors };\n","import { createRenderBatcher } from './batcher.mjs';\n\nconst { schedule: microtask, cancel: cancelMicrotask } = createRenderBatcher(queueMicrotask, false);\n\nexport { cancelMicrotask, microtask };\n","\"use client\";\nimport { jsx } from 'react/jsx-runtime';\nimport { useContext, Component } from 'react';\nimport { usePresence } from '../../../components/AnimatePresence/use-presence.mjs';\nimport { LayoutGroupContext } from '../../../context/LayoutGroupContext.mjs';\nimport { SwitchLayoutGroupContext } from '../../../context/SwitchLayoutGroupContext.mjs';\nimport { globalProjectionState } from '../../../projection/node/state.mjs';\nimport { correctBorderRadius } from '../../../projection/styles/scale-border-radius.mjs';\nimport { correctBoxShadow } from '../../../projection/styles/scale-box-shadow.mjs';\nimport { addScaleCorrector } from '../../../projection/styles/scale-correction.mjs';\nimport { microtask } from '../../../frameloop/microtask.mjs';\nimport { frame } from '../../../frameloop/frame.mjs';\n\nclass MeasureLayoutWithContext extends Component {\n    /**\n     * This only mounts projection nodes for components that\n     * need measuring, we might want to do it for all components\n     * in order to incorporate transforms\n     */\n    componentDidMount() {\n        const { visualElement, layoutGroup, switchLayoutGroup, layoutId } = this.props;\n        const { projection } = visualElement;\n        addScaleCorrector(defaultScaleCorrectors);\n        if (projection) {\n            if (layoutGroup.group)\n                layoutGroup.group.add(projection);\n            if (switchLayoutGroup && switchLayoutGroup.register && layoutId) {\n                switchLayoutGroup.register(projection);\n            }\n            projection.root.didUpdate();\n            projection.addEventListener(\"animationComplete\", () => {\n                this.safeToRemove();\n            });\n            projection.setOptions({\n                ...projection.options,\n                onExitComplete: () => this.safeToRemove(),\n            });\n        }\n        globalProjectionState.hasEverUpdated = true;\n    }\n    getSnapshotBeforeUpdate(prevProps) {\n        const { layoutDependency, visualElement, drag, isPresent } = this.props;\n        const projection = visualElement.projection;\n        if (!projection)\n            return null;\n        /**\n         * TODO: We use this data in relegate to determine whether to\n         * promote a previous element. There's no guarantee its presence data\n         * will have updated by this point - if a bug like this arises it will\n         * have to be that we markForRelegation and then find a new lead some other way,\n         * perhaps in didUpdate\n         */\n        projection.isPresent = isPresent;\n        if (drag ||\n            prevProps.layoutDependency !== layoutDependency ||\n            layoutDependency === undefined) {\n            projection.willUpdate();\n        }\n        else {\n            this.safeToRemove();\n        }\n        if (prevProps.isPresent !== isPresent) {\n            if (isPresent) {\n                projection.promote();\n            }\n            else if (!projection.relegate()) {\n                /**\n                 * If there's another stack member taking over from this one,\n                 * it's in charge of the exit animation and therefore should\n                 * be in charge of the safe to remove. Otherwise we call it here.\n                 */\n                frame.postRender(() => {\n                    const stack = projection.getStack();\n                    if (!stack || !stack.members.length) {\n                        this.safeToRemove();\n                    }\n                });\n            }\n        }\n        return null;\n    }\n    componentDidUpdate() {\n        const { projection } = this.props.visualElement;\n        if (projection) {\n            projection.root.didUpdate();\n            microtask.postRender(() => {\n                if (!projection.currentAnimation && projection.isLead()) {\n                    this.safeToRemove();\n                }\n            });\n        }\n    }\n    componentWillUnmount() {\n        const { visualElement, layoutGroup, switchLayoutGroup: promoteContext, } = this.props;\n        const { projection } = visualElement;\n        if (projection) {\n            projection.scheduleCheckAfterUnmount();\n            if (layoutGroup && layoutGroup.group)\n                layoutGroup.group.remove(projection);\n            if (promoteContext && promoteContext.deregister)\n                promoteContext.deregister(projection);\n        }\n    }\n    safeToRemove() {\n        const { safeToRemove } = this.props;\n        safeToRemove && safeToRemove();\n    }\n    render() {\n        return null;\n    }\n}\nfunction MeasureLayout(props) {\n    const [isPresent, safeToRemove] = usePresence();\n    const layoutGroup = useContext(LayoutGroupContext);\n    return (jsx(MeasureLayoutWithContext, { ...props, layoutGroup: layoutGroup, switchLayoutGroup: useContext(SwitchLayoutGroupContext), isPresent: isPresent, safeToRemove: safeToRemove }));\n}\nconst defaultScaleCorrectors = {\n    borderRadius: {\n        ...correctBorderRadius,\n        applyTo: [\n            \"borderTopLeftRadius\",\n            \"borderTopRightRadius\",\n            \"borderBottomLeftRadius\",\n            \"borderBottomRightRadius\",\n        ],\n    },\n    borderTopLeftRadius: correctBorderRadius,\n    borderTopRightRadius: correctBorderRadius,\n    borderBottomLeftRadius: correctBorderRadius,\n    borderBottomRightRadius: correctBorderRadius,\n    boxShadow: correctBoxShadow,\n};\n\nexport { MeasureLayout };\n","import { circOut } from '../../easing/circ.mjs';\nimport { progress } from '../../utils/progress.mjs';\nimport { mixNumber } from '../../utils/mix/number.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { percent, px } from '../../value/types/numbers/units.mjs';\n\nconst borders = [\"TopLeft\", \"TopRight\", \"BottomLeft\", \"BottomRight\"];\nconst numBorders = borders.length;\nconst asNumber = (value) => typeof value === \"string\" ? parseFloat(value) : value;\nconst isPx = (value) => typeof value === \"number\" || px.test(value);\nfunction mixValues(target, follow, lead, progress, shouldCrossfadeOpacity, isOnlyMember) {\n    if (shouldCrossfadeOpacity) {\n        target.opacity = mixNumber(0, \n        // TODO Reinstate this if only child\n        lead.opacity !== undefined ? lead.opacity : 1, easeCrossfadeIn(progress));\n        target.opacityExit = mixNumber(follow.opacity !== undefined ? follow.opacity : 1, 0, easeCrossfadeOut(progress));\n    }\n    else if (isOnlyMember) {\n        target.opacity = mixNumber(follow.opacity !== undefined ? follow.opacity : 1, lead.opacity !== undefined ? lead.opacity : 1, progress);\n    }\n    /**\n     * Mix border radius\n     */\n    for (let i = 0; i < numBorders; i++) {\n        const borderLabel = `border${borders[i]}Radius`;\n        let followRadius = getRadius(follow, borderLabel);\n        let leadRadius = getRadius(lead, borderLabel);\n        if (followRadius === undefined && leadRadius === undefined)\n            continue;\n        followRadius || (followRadius = 0);\n        leadRadius || (leadRadius = 0);\n        const canMix = followRadius === 0 ||\n            leadRadius === 0 ||\n            isPx(followRadius) === isPx(leadRadius);\n        if (canMix) {\n            target[borderLabel] = Math.max(mixNumber(asNumber(followRadius), asNumber(leadRadius), progress), 0);\n            if (percent.test(leadRadius) || percent.test(followRadius)) {\n                target[borderLabel] += \"%\";\n            }\n        }\n        else {\n            target[borderLabel] = leadRadius;\n        }\n    }\n    /**\n     * Mix rotation\n     */\n    if (follow.rotate || lead.rotate) {\n        target.rotate = mixNumber(follow.rotate || 0, lead.rotate || 0, progress);\n    }\n}\nfunction getRadius(values, radiusName) {\n    return values[radiusName] !== undefined\n        ? values[radiusName]\n        : values.borderRadius;\n}\n// /**\n//  * We only want to mix the background color if there's a follow element\n//  * that we're not crossfading opacity between. For instance with switch\n//  * AnimateSharedLayout animations, this helps the illusion of a continuous\n//  * element being animated but also cuts down on the number of paints triggered\n//  * for elements where opacity is doing that work for us.\n//  */\n// if (\n//     !hasFollowElement &&\n//     latestLeadValues.backgroundColor &&\n//     latestFollowValues.backgroundColor\n// ) {\n//     /**\n//      * This isn't ideal performance-wise as mixColor is creating a new function every frame.\n//      * We could probably create a mixer that runs at the start of the animation but\n//      * the idea behind the crossfader is that it runs dynamically between two potentially\n//      * changing targets (ie opacity or borderRadius may be animating independently via variants)\n//      */\n//     leadState.backgroundColor = followState.backgroundColor = mixColor(\n//         latestFollowValues.backgroundColor as string,\n//         latestLeadValues.backgroundColor as string\n//     )(p)\n// }\nconst easeCrossfadeIn = /*@__PURE__*/ compress(0, 0.5, circOut);\nconst easeCrossfadeOut = /*@__PURE__*/ compress(0.5, 0.95, noop);\nfunction compress(min, max, easing) {\n    return (p) => {\n        // Could replace ifs with clamp\n        if (p < min)\n            return 0;\n        if (p > max)\n            return 1;\n        return easing(progress(min, max, p));\n    };\n}\n\nexport { mixValues };\n","/**\n * Reset an axis to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyAxisInto(axis, originAxis) {\n    axis.min = originAxis.min;\n    axis.max = originAxis.max;\n}\n/**\n * Reset a box to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyBoxInto(box, originBox) {\n    copyAxisInto(box.x, originBox.x);\n    copyAxisInto(box.y, originBox.y);\n}\n/**\n * Reset a delta to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyAxisDeltaInto(delta, originDelta) {\n    delta.translate = originDelta.translate;\n    delta.scale = originDelta.scale;\n    delta.originPoint = originDelta.originPoint;\n    delta.origin = originDelta.origin;\n}\n\nexport { copyAxisDeltaInto, copyAxisInto, copyBoxInto };\n","import { mixNumber } from '../../utils/mix/number.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { scalePoint } from './delta-apply.mjs';\n\n/**\n * Remove a delta from a point. This is essentially the steps of applyPointDelta in reverse\n */\nfunction removePointDelta(point, translate, scale, originPoint, boxScale) {\n    point -= translate;\n    point = scalePoint(point, 1 / scale, originPoint);\n    if (boxScale !== undefined) {\n        point = scalePoint(point, 1 / boxScale, originPoint);\n    }\n    return point;\n}\n/**\n * Remove a delta from an axis. This is essentially the steps of applyAxisDelta in reverse\n */\nfunction removeAxisDelta(axis, translate = 0, scale = 1, origin = 0.5, boxScale, originAxis = axis, sourceAxis = axis) {\n    if (percent.test(translate)) {\n        translate = parseFloat(translate);\n        const relativeProgress = mixNumber(sourceAxis.min, sourceAxis.max, translate / 100);\n        translate = relativeProgress - sourceAxis.min;\n    }\n    if (typeof translate !== \"number\")\n        return;\n    let originPoint = mixNumber(originAxis.min, originAxis.max, origin);\n    if (axis === originAxis)\n        originPoint -= translate;\n    axis.min = removePointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = removePointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Remove a transforms from an axis. This is essentially the steps of applyAxisTransforms in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeAxisTransforms(axis, transforms, [key, scaleKey, originKey], origin, sourceAxis) {\n    removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale, origin, sourceAxis);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */\nconst xKeys = [\"x\", \"scaleX\", \"originX\"];\nconst yKeys = [\"y\", \"scaleY\", \"originY\"];\n/**\n * Remove a transforms from an box. This is essentially the steps of applyAxisBox in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeBoxTransforms(box, transforms, originBox, sourceBox) {\n    removeAxisTransforms(box.x, transforms, xKeys, originBox ? originBox.x : undefined, sourceBox ? sourceBox.x : undefined);\n    removeAxisTransforms(box.y, transforms, yKeys, originBox ? originBox.y : undefined, sourceBox ? sourceBox.y : undefined);\n}\n\nexport { removeAxisDelta, removeAxisTransforms, removeBoxTransforms, removePointDelta };\n","import { calcLength } from './delta-calc.mjs';\n\nfunction isAxisDeltaZero(delta) {\n    return delta.translate === 0 && delta.scale === 1;\n}\nfunction isDeltaZero(delta) {\n    return isAxisDeltaZero(delta.x) && isAxisDeltaZero(delta.y);\n}\nfunction axisEquals(a, b) {\n    return a.min === b.min && a.max === b.max;\n}\nfunction boxEquals(a, b) {\n    return axisEquals(a.x, b.x) && axisEquals(a.y, b.y);\n}\nfunction axisEqualsRounded(a, b) {\n    return (Math.round(a.min) === Math.round(b.min) &&\n        Math.round(a.max) === Math.round(b.max));\n}\nfunction boxEqualsRounded(a, b) {\n    return axisEqualsRounded(a.x, b.x) && axisEqualsRounded(a.y, b.y);\n}\nfunction aspectRatio(box) {\n    return calcLength(box.x) / calcLength(box.y);\n}\nfunction axisDeltaEquals(a, b) {\n    return (a.translate === b.translate &&\n        a.scale === b.scale &&\n        a.originPoint === b.originPoint);\n}\n\nexport { aspectRatio, axisDeltaEquals, axisEquals, axisEqualsRounded, boxEquals, boxEqualsRounded, isDeltaZero };\n","import { addUniqueItem, removeItem } from '../../utils/array.mjs';\n\nclass NodeStack {\n    constructor() {\n        this.members = [];\n    }\n    add(node) {\n        addUniqueItem(this.members, node);\n        node.scheduleRender();\n    }\n    remove(node) {\n        removeItem(this.members, node);\n        if (node === this.prevLead) {\n            this.prevLead = undefined;\n        }\n        if (node === this.lead) {\n            const prevLead = this.members[this.members.length - 1];\n            if (prevLead) {\n                this.promote(prevLead);\n            }\n        }\n    }\n    relegate(node) {\n        const indexOfNode = this.members.findIndex((member) => node === member);\n        if (indexOfNode === 0)\n            return false;\n        /**\n         * Find the next projection node that is present\n         */\n        let prevLead;\n        for (let i = indexOfNode; i >= 0; i--) {\n            const member = this.members[i];\n            if (member.isPresent !== false) {\n                prevLead = member;\n                break;\n            }\n        }\n        if (prevLead) {\n            this.promote(prevLead);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    promote(node, preserveFollowOpacity) {\n        const prevLead = this.lead;\n        if (node === prevLead)\n            return;\n        this.prevLead = prevLead;\n        this.lead = node;\n        node.show();\n        if (prevLead) {\n            prevLead.instance && prevLead.scheduleRender();\n            node.scheduleRender();\n            node.resumeFrom = prevLead;\n            if (preserveFollowOpacity) {\n                node.resumeFrom.preserveOpacity = true;\n            }\n            if (prevLead.snapshot) {\n                node.snapshot = prevLead.snapshot;\n                node.snapshot.latestValues =\n                    prevLead.animationValues || prevLead.latestValues;\n            }\n            if (node.root && node.root.isUpdating) {\n                node.isLayoutDirty = true;\n            }\n            const { crossfade } = node.options;\n            if (crossfade === false) {\n                prevLead.hide();\n            }\n            /**\n             * TODO:\n             *   - Test border radius when previous node was deleted\n             *   - boxShadow mixing\n             *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)\n             *   - Shared between element A in transformed container and element B (transform stays the same or changes)\n             *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)\n             * ---\n             *   - Crossfade opacity of root nodes\n             *   - layoutId changes after animation\n             *   - layoutId changes mid animation\n             */\n        }\n    }\n    exitAnimationComplete() {\n        this.members.forEach((node) => {\n            const { options, resumingFrom } = node;\n            options.onExitComplete && options.onExitComplete();\n            if (resumingFrom) {\n                resumingFrom.options.onExitComplete &&\n                    resumingFrom.options.onExitComplete();\n            }\n        });\n    }\n    scheduleRender() {\n        this.members.forEach((node) => {\n            node.instance && node.scheduleRender(false);\n        });\n    }\n    /**\n     * Clear any leads that have been removed this render to prevent them from being\n     * used in future animations and to prevent memory leaks\n     */\n    removeLeadSnapshot() {\n        if (this.lead && this.lead.snapshot) {\n            this.lead.snapshot = undefined;\n        }\n    }\n}\n\nexport { NodeStack };\n","function buildProjectionTransform(delta, treeScale, latestTransform) {\n    let transform = \"\";\n    /**\n     * The translations we use to calculate are always relative to the viewport coordinate space.\n     * But when we apply scales, we also scale the coordinate space of an element and its children.\n     * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\n     * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\n     */\n    const xTranslate = delta.x.translate / treeScale.x;\n    const yTranslate = delta.y.translate / treeScale.y;\n    const zTranslate = (latestTransform === null || latestTransform === void 0 ? void 0 : latestTransform.z) || 0;\n    if (xTranslate || yTranslate || zTranslate) {\n        transform = `translate3d(${xTranslate}px, ${yTranslate}px, ${zTranslate}px) `;\n    }\n    /**\n     * Apply scale correction for the tree transform.\n     * This will apply scale to the screen-orientated axes.\n     */\n    if (treeScale.x !== 1 || treeScale.y !== 1) {\n        transform += `scale(${1 / treeScale.x}, ${1 / treeScale.y}) `;\n    }\n    if (latestTransform) {\n        const { transformPerspective, rotate, rotateX, rotateY, skewX, skewY } = latestTransform;\n        if (transformPerspective)\n            transform = `perspective(${transformPerspective}px) ${transform}`;\n        if (rotate)\n            transform += `rotate(${rotate}deg) `;\n        if (rotateX)\n            transform += `rotateX(${rotateX}deg) `;\n        if (rotateY)\n            transform += `rotateY(${rotateY}deg) `;\n        if (skewX)\n            transform += `skewX(${skewX}deg) `;\n        if (skewY)\n            transform += `skewY(${skewY}deg) `;\n    }\n    /**\n     * Apply scale to match the size of the element to the size we want it.\n     * This will apply scale to the element-orientated axes.\n     */\n    const elementScaleX = delta.x.scale * treeScale.x;\n    const elementScaleY = delta.y.scale * treeScale.y;\n    if (elementScaleX !== 1 || elementScaleY !== 1) {\n        transform += `scale(${elementScaleX}, ${elementScaleY})`;\n    }\n    return transform || \"none\";\n}\n\nexport { buildProjectionTransform };\n","const compareByDepth = (a, b) => a.depth - b.depth;\n\nexport { compareByDepth };\n","import { addUniqueItem, removeItem } from '../../utils/array.mjs';\nimport { compareByDepth } from './compare-by-depth.mjs';\n\nclass FlatTree {\n    constructor() {\n        this.children = [];\n        this.isDirty = false;\n    }\n    add(child) {\n        addUniqueItem(this.children, child);\n        this.isDirty = true;\n    }\n    remove(child) {\n        removeItem(this.children, child);\n        this.isDirty = true;\n    }\n    forEach(callback) {\n        this.isDirty && this.children.sort(compareByDepth);\n        this.isDirty = false;\n        this.children.forEach(callback);\n    }\n}\n\nexport { FlatTree };\n","import { isCustomValue } from '../../utils/resolve-value.mjs';\nimport { isMotionValue } from './is-motion-value.mjs';\n\n/**\n * If the provided value is a MotionValue, this returns the actual value, otherwise just the value itself\n *\n * TODO: Remove and move to library\n */\nfunction resolveMotionValue(value) {\n    const unwrappedValue = isMotionValue(value) ? value.get() : value;\n    return isCustomValue(unwrappedValue)\n        ? unwrappedValue.toValue()\n        : unwrappedValue;\n}\n\nexport { resolveMotionValue };\n","import { time } from '../frameloop/sync-time.mjs';\nimport { frame, cancelFrame } from '../frameloop/frame.mjs';\n\n/**\n * Timeout defined in ms\n */\nfunction delay(callback, timeout) {\n    const start = time.now();\n    const checkElapsed = ({ timestamp }) => {\n        const elapsed = timestamp - start;\n        if (elapsed >= timeout) {\n            cancelFrame(checkElapsed);\n            callback(elapsed - timeout);\n        }\n    };\n    frame.read(checkElapsed, true);\n    return () => cancelFrame(checkElapsed);\n}\n\nexport { delay };\n","function isSVGElement(element) {\n    return element instanceof SVGElement && element.tagName !== \"svg\";\n}\n\nexport { isSVGElement };\n","import { animateMotionValue } from './motion-value.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction animateSingleValue(value, keyframes, options) {\n    const motionValue$1 = isMotionValue(value) ? value : motionValue(value);\n    motionValue$1.start(animateMotionValue(\"\", motionValue$1, keyframes, options));\n    return motionValue$1.animation;\n}\n\nexport { animateSingleValue };\n","import { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto, copyAxisDeltaInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength, isNear } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEqualsRounded, isDeltaZero, axisDeltaEquals, aspectRatio, boxEquals } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { globalProjectionState } from './state.mjs';\nimport { delay } from '../../utils/delay.mjs';\nimport { mixNumber } from '../../utils/mix/number.mjs';\nimport { isSVGElement } from '../../render/dom/utils/is-svg-element.mjs';\nimport { animateSingleValue } from '../../animation/interfaces/single-value.mjs';\nimport { clamp } from '../../utils/clamp.mjs';\nimport { cancelFrame, frameData, steps, frame } from '../../frameloop/frame.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { time } from '../../frameloop/sync-time.mjs';\nimport { microtask } from '../../frameloop/microtask.mjs';\nimport { getOptimisedAppearId } from '../../animation/optimized-appear/get-appear-id.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\n\nconst metrics = {\n    type: \"projectionFrame\",\n    totalNodes: 0,\n    resolvedTargetDeltas: 0,\n    recalculatedProjection: 0,\n};\nconst isDebug = typeof window !== \"undefined\" && window.MotionDebug !== undefined;\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\nconst hiddenVisibility = { visibility: \"hidden\" };\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nconst animationTarget = 1000;\nlet id = 0;\nfunction resetDistortingTransform(key, visualElement, values, sharedAnimationValues) {\n    const { latestValues } = visualElement;\n    // Record the distorting transform and then temporarily set it to 0\n    if (latestValues[key]) {\n        values[key] = latestValues[key];\n        visualElement.setStaticValue(key, 0);\n        if (sharedAnimationValues) {\n            sharedAnimationValues[key] = 0;\n        }\n    }\n}\nfunction cancelTreeOptimisedTransformAnimations(projectionNode) {\n    projectionNode.hasCheckedOptimisedAppear = true;\n    if (projectionNode.root === projectionNode)\n        return;\n    const { visualElement } = projectionNode.options;\n    if (!visualElement)\n        return;\n    const appearId = getOptimisedAppearId(visualElement);\n    if (window.MotionHasOptimisedAnimation(appearId, \"transform\")) {\n        const { layout, layoutId } = projectionNode.options;\n        window.MotionCancelOptimisedAnimation(appearId, \"transform\", frame, !(layout || layoutId));\n    }\n    const { parent } = projectionNode;\n    if (parent && !parent.hasCheckedOptimisedAppear) {\n        cancelTreeOptimisedTransformAnimations(parent);\n    }\n}\nfunction createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform, }) {\n    return class ProjectionNode {\n        constructor(latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()) {\n            /**\n             * A unique ID generated for every projection node.\n             */\n            this.id = id++;\n            /**\n             * An id that represents a unique session instigated by startUpdate.\n             */\n            this.animationId = 0;\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */\n            this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */\n            this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */\n            this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */\n            this.isLayoutDirty = false;\n            /**\n             * Flag to true if we think the projection calculations for this node needs\n             * recalculating as a result of an updated transform or layout animation.\n             */\n            this.isProjectionDirty = false;\n            /**\n             * Flag to true if the layout *or* transform has changed. This then gets propagated\n             * throughout the projection tree, forcing any element below to recalculate on the next frame.\n             */\n            this.isSharedProjectionDirty = false;\n            /**\n             * Flag transform dirty. This gets propagated throughout the whole tree but is only\n             * respected by shared nodes.\n             */\n            this.isTransformDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */\n            this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */\n            this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */\n            this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */\n            this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */\n            this.shouldResetTransform = false;\n            /**\n             * Store whether this node has been checked for optimised appear animations. As\n             * effects fire bottom-up, and we want to look up the tree for appear animations,\n             * this makes sure we only check each path once, stopping at nodes that\n             * have already been checked.\n             */\n            this.hasCheckedOptimisedAppear = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to layoutly\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */\n            this.treeScale = { x: 1, y: 1 };\n            /**\n             *\n             */\n            this.eventHandlers = new Map();\n            this.hasTreeAnimated = false;\n            // Note: Currently only running on root node\n            this.updateScheduled = false;\n            this.scheduleUpdate = () => this.update();\n            this.projectionUpdateScheduled = false;\n            this.checkUpdateFailed = () => {\n                if (this.isUpdating) {\n                    this.isUpdating = false;\n                    this.clearAllSnapshots();\n                }\n            };\n            /**\n             * This is a multi-step process as shared nodes might be of different depths. Nodes\n             * are sorted by depth order, so we need to resolve the entire tree before moving to\n             * the next step.\n             */\n            this.updateProjection = () => {\n                this.projectionUpdateScheduled = false;\n                /**\n                 * Reset debug counts. Manually resetting rather than creating a new\n                 * object each frame.\n                 */\n                if (isDebug) {\n                    metrics.totalNodes =\n                        metrics.resolvedTargetDeltas =\n                            metrics.recalculatedProjection =\n                                0;\n                }\n                this.nodes.forEach(propagateDirtyNodes);\n                this.nodes.forEach(resolveTargetDelta);\n                this.nodes.forEach(calcProjection);\n                this.nodes.forEach(cleanDirtyNodes);\n                if (isDebug) {\n                    window.MotionDebug.record(metrics);\n                }\n            };\n            /**\n             * Frame calculations\n             */\n            this.resolvedRelativeTargetAt = 0.0;\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */\n            // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? [...parent.path, parent] : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            for (let i = 0; i < this.path.length; i++) {\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this)\n                this.nodes = new FlatTree();\n        }\n        addEventListener(name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        }\n        notifyListeners(name, ...args) {\n            const subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager && subscriptionManager.notify(...args);\n        }\n        hasListeners(name) {\n            return this.eventHandlers.has(name);\n        }\n        /**\n         * Lifecycles\n         */\n        mount(instance, isLayoutDirty = this.root.hasTreeAnimated) {\n            if (this.instance)\n                return;\n            this.isSVG = isSVGElement(instance);\n            this.instance = instance;\n            const { layoutId, layout, visualElement } = this.options;\n            if (visualElement && !visualElement.current) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            this.parent && this.parent.children.add(this);\n            if (isLayoutDirty && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                let cancelDelay;\n                const resizeUnblockUpdate = () => (this.root.updateBlockedByResize = false);\n                attachResizeListener(instance, () => {\n                    this.root.updateBlockedByResize = true;\n                    cancelDelay && cancelDelay();\n                    cancelDelay = delay(resizeUnblockUpdate, 250);\n                    if (globalProjectionState.hasAnimatedSinceResize) {\n                        globalProjectionState.hasAnimatedSinceResize = false;\n                        this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false &&\n                visualElement &&\n                (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", ({ delta, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout, }) => {\n                    if (this.isTreeAnimationBlocked()) {\n                        this.target = undefined;\n                        this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    const layoutTransition = this.options.transition ||\n                        visualElement.getDefaultTransition() ||\n                        defaultLayoutTransition;\n                    const { onLayoutAnimationStart, onLayoutAnimationComplete, } = visualElement.getProps();\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */\n                    const targetChanged = !this.targetLayout ||\n                        !boxEqualsRounded(this.targetLayout, newLayout) ||\n                        hasRelativeTargetChanged;\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */\n                    const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n                    if (this.options.layoutRoot ||\n                        (this.resumeFrom && this.resumeFrom.instance) ||\n                        hasOnlyRelativeTargetChanged ||\n                        (hasLayoutChanged &&\n                            (targetChanged || !this.currentAnimation))) {\n                        if (this.resumeFrom) {\n                            this.resumingFrom = this.resumeFrom;\n                            this.resumingFrom.resumingFrom = undefined;\n                        }\n                        this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                        const animationOptions = {\n                            ...getValueTransition(layoutTransition, \"layout\"),\n                            onPlay: onLayoutAnimationStart,\n                            onComplete: onLayoutAnimationComplete,\n                        };\n                        if (visualElement.shouldReduceMotion ||\n                            this.options.layoutRoot) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        this.startAnimation(animationOptions);\n                    }\n                    else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */\n                        if (!hasLayoutChanged) {\n                            finishAnimation(this);\n                        }\n                        if (this.isLead() && this.options.onExitComplete) {\n                            this.options.onExitComplete();\n                        }\n                    }\n                    this.targetLayout = newLayout;\n                });\n            }\n        }\n        unmount() {\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            const stack = this.getStack();\n            stack && stack.remove(this);\n            this.parent && this.parent.children.delete(this);\n            this.instance = undefined;\n            cancelFrame(this.updateProjection);\n        }\n        // only on the root\n        blockUpdate() {\n            this.updateManuallyBlocked = true;\n        }\n        unblockUpdate() {\n            this.updateManuallyBlocked = false;\n        }\n        isUpdateBlocked() {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        }\n        isTreeAnimationBlocked() {\n            return (this.isAnimationBlocked ||\n                (this.parent && this.parent.isTreeAnimationBlocked()) ||\n                false);\n        }\n        // Note: currently only running on root node\n        startUpdate() {\n            if (this.isUpdateBlocked())\n                return;\n            this.isUpdating = true;\n            this.nodes && this.nodes.forEach(resetSkewAndRotation);\n            this.animationId++;\n        }\n        getTransformTemplate() {\n            const { visualElement } = this.options;\n            return visualElement && visualElement.getProps().transformTemplate;\n        }\n        willUpdate(shouldNotifyListeners = true) {\n            this.root.hasTreeAnimated = true;\n            if (this.root.isUpdateBlocked()) {\n                this.options.onExitComplete && this.options.onExitComplete();\n                return;\n            }\n            /**\n             * If we're running optimised appear animations then these must be\n             * cancelled before measuring the DOM. This is so we can measure\n             * the true layout of the element rather than the WAAPI animation\n             * which will be unaffected by the resetSkewAndRotate step.\n             *\n             * Note: This is a DOM write. Worst case scenario is this is sandwiched\n             * between other snapshot reads which will cause unnecessary style recalculations.\n             * This has to happen here though, as we don't yet know which nodes will need\n             * snapshots in startUpdate(), but we only want to cancel optimised animations\n             * if a layout animation measurement is actually going to be affected by them.\n             */\n            if (window.MotionCancelOptimisedAnimation &&\n                !this.hasCheckedOptimisedAppear) {\n                cancelTreeOptimisedTransformAnimations(this);\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty)\n                return;\n            this.isLayoutDirty = true;\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                node.shouldResetTransform = true;\n                node.updateScroll(\"snapshot\");\n                if (node.options.layoutRoot) {\n                    node.willUpdate(false);\n                }\n            }\n            const { layoutId, layout } = this.options;\n            if (layoutId === undefined && !layout)\n                return;\n            const transformTemplate = this.getTransformTemplate();\n            this.prevTransformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        }\n        update() {\n            this.updateScheduled = false;\n            const updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            if (!this.isUpdating) {\n                this.nodes.forEach(clearIsLayoutDirty);\n            }\n            this.isUpdating = false;\n            /**\n             * Write\n             */\n            this.nodes.forEach(resetTransformStyle);\n            /**\n             * Read ==================\n             */\n            // Update layout measurements of updated children\n            this.nodes.forEach(updateLayout);\n            /**\n             * Write\n             */\n            // Notify listeners that the layout is updated\n            this.nodes.forEach(notifyLayoutUpdate);\n            this.clearAllSnapshots();\n            /**\n             * Manually flush any pending updates. Ideally\n             * we could leave this to the following requestAnimationFrame but this seems\n             * to leave a flash of incorrectly styled content.\n             */\n            const now = time.now();\n            frameData.delta = clamp(0, 1000 / 60, now - frameData.timestamp);\n            frameData.timestamp = now;\n            frameData.isProcessing = true;\n            steps.update.process(frameData);\n            steps.preRender.process(frameData);\n            steps.render.process(frameData);\n            frameData.isProcessing = false;\n        }\n        didUpdate() {\n            if (!this.updateScheduled) {\n                this.updateScheduled = true;\n                microtask.read(this.scheduleUpdate);\n            }\n        }\n        clearAllSnapshots() {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        }\n        scheduleUpdateProjection() {\n            if (!this.projectionUpdateScheduled) {\n                this.projectionUpdateScheduled = true;\n                frame.preRender(this.updateProjection, false, true);\n            }\n        }\n        scheduleCheckAfterUnmount() {\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */\n            frame.postRender(() => {\n                if (this.isLayoutDirty) {\n                    this.root.didUpdate();\n                }\n                else {\n                    this.root.checkUpdateFailed();\n                }\n            });\n        }\n        /**\n         * Update measurements\n         */\n        updateSnapshot() {\n            if (this.snapshot || !this.instance)\n                return;\n            this.snapshot = this.measure();\n        }\n        updateLayout() {\n            if (!this.instance)\n                return;\n            // TODO: Incorporate into a forwarded scroll offset\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&\n                !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */\n            if (this.resumeFrom && !this.resumeFrom.instance) {\n                for (let i = 0; i < this.path.length; i++) {\n                    const node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            const prevLayout = this.layout;\n            this.layout = this.measure(false);\n            this.layoutCorrected = createBox();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.layoutBox);\n            const { visualElement } = this.options;\n            visualElement &&\n                visualElement.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);\n        }\n        updateScroll(phase = \"measure\") {\n            let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n            if (this.scroll &&\n                this.scroll.animationId === this.root.animationId &&\n                this.scroll.phase === phase) {\n                needsMeasurement = false;\n            }\n            if (needsMeasurement) {\n                const isRoot = checkIsScrollRoot(this.instance);\n                this.scroll = {\n                    animationId: this.root.animationId,\n                    phase,\n                    isRoot,\n                    offset: measureScroll(this.instance),\n                    wasRoot: this.scroll ? this.scroll.isRoot : isRoot,\n                };\n            }\n        }\n        resetTransform() {\n            if (!resetTransform)\n                return;\n            const isResetRequested = this.isLayoutDirty ||\n                this.shouldResetTransform ||\n                this.options.alwaysMeasureLayout;\n            const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n            const transformTemplate = this.getTransformTemplate();\n            const transformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested &&\n                (hasProjection ||\n                    hasTransform(this.latestValues) ||\n                    transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        }\n        measure(removeTransform = true) {\n            const pageBox = this.measurePageBox();\n            let layoutBox = this.removeElementScroll(pageBox);\n            /**\n             * Measurements taken during the pre-render stage\n             * still have transforms applied so we remove them\n             * via calculation.\n             */\n            if (removeTransform) {\n                layoutBox = this.removeTransform(layoutBox);\n            }\n            roundBox(layoutBox);\n            return {\n                animationId: this.root.animationId,\n                measuredBox: pageBox,\n                layoutBox,\n                latestValues: {},\n                source: this.id,\n            };\n        }\n        measurePageBox() {\n            var _a;\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return createBox();\n            const box = visualElement.measureViewportBox();\n            const wasInScrollRoot = ((_a = this.scroll) === null || _a === void 0 ? void 0 : _a.wasRoot) || this.path.some(checkNodeWasScrollRoot);\n            if (!wasInScrollRoot) {\n                // Remove viewport scroll to give page-relative coordinates\n                const { scroll } = this.root;\n                if (scroll) {\n                    translateAxis(box.x, scroll.offset.x);\n                    translateAxis(box.y, scroll.offset.y);\n                }\n            }\n            return box;\n        }\n        removeElementScroll(box) {\n            var _a;\n            const boxWithoutScroll = createBox();\n            copyBoxInto(boxWithoutScroll, box);\n            if ((_a = this.scroll) === null || _a === void 0 ? void 0 : _a.wasRoot) {\n                return boxWithoutScroll;\n            }\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                const { scroll, options } = node;\n                if (node !== this.root && scroll && options.layoutScroll) {\n                    /**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */\n                    if (scroll.wasRoot) {\n                        copyBoxInto(boxWithoutScroll, box);\n                    }\n                    translateAxis(boxWithoutScroll.x, scroll.offset.x);\n                    translateAxis(boxWithoutScroll.y, scroll.offset.y);\n                }\n            }\n            return boxWithoutScroll;\n        }\n        applyTransform(box, transformOnly = false) {\n            const withTransforms = createBox();\n            copyBoxInto(withTransforms, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!transformOnly &&\n                    node.options.layoutScroll &&\n                    node.scroll &&\n                    node !== node.root) {\n                    transformBox(withTransforms, {\n                        x: -node.scroll.offset.x,\n                        y: -node.scroll.offset.y,\n                    });\n                }\n                if (!hasTransform(node.latestValues))\n                    continue;\n                transformBox(withTransforms, node.latestValues);\n            }\n            if (hasTransform(this.latestValues)) {\n                transformBox(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        }\n        removeTransform(box) {\n            const boxWithoutTransform = createBox();\n            copyBoxInto(boxWithoutTransform, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!node.instance)\n                    continue;\n                if (!hasTransform(node.latestValues))\n                    continue;\n                hasScale(node.latestValues) && node.updateSnapshot();\n                const sourceBox = createBox();\n                const nodeBox = node.measurePageBox();\n                copyBoxInto(sourceBox, nodeBox);\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);\n            }\n            if (hasTransform(this.latestValues)) {\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        }\n        setTargetDelta(delta) {\n            this.targetDelta = delta;\n            this.root.scheduleUpdateProjection();\n            this.isProjectionDirty = true;\n        }\n        setOptions(options) {\n            this.options = {\n                ...this.options,\n                ...options,\n                crossfade: options.crossfade !== undefined ? options.crossfade : true,\n            };\n        }\n        clearMeasurements() {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        }\n        forceRelativeParentToResolveTarget() {\n            if (!this.relativeParent)\n                return;\n            /**\n             * If the parent target isn't up-to-date, force it to update.\n             * This is an unfortunate de-optimisation as it means any updating relative\n             * projection will cause all the relative parents to recalculate back\n             * up the tree.\n             */\n            if (this.relativeParent.resolvedRelativeTargetAt !==\n                frameData.timestamp) {\n                this.relativeParent.resolveTargetDelta(true);\n            }\n        }\n        resolveTargetDelta(forceRecalculation = false) {\n            var _a;\n            /**\n             * Once the dirty status of nodes has been spread through the tree, we also\n             * need to check if we have a shared node of a different depth that has itself\n             * been dirtied.\n             */\n            const lead = this.getLead();\n            this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n            this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n            this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            /**\n             * We don't use transform for this step of processing so we don't\n             * need to check whether any nodes have changed transform.\n             */\n            const canSkip = !(forceRecalculation ||\n                (isShared && this.isSharedProjectionDirty) ||\n                this.isProjectionDirty ||\n                ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty) ||\n                this.attemptToResolveRelativeTarget ||\n                this.root.updateBlockedByResize);\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */\n            if (!this.layout || !(layout || layoutId))\n                return;\n            this.resolvedRelativeTargetAt = frameData.timestamp;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */\n            if (!this.targetDelta && !this.relativeTarget) {\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    relativeParent.layout &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */\n            if (!this.relativeTarget && !this.targetDelta)\n                return;\n            /**\n             * Lazy-init target data structure\n             */\n            if (!this.target) {\n                this.target = createBox();\n                this.targetWithTransforms = createBox();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */\n            if (this.relativeTarget &&\n                this.relativeTargetOrigin &&\n                this.relativeParent &&\n                this.relativeParent.target) {\n                this.forceRelativeParentToResolveTarget();\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n                /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */\n            }\n            else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.layoutBox);\n                }\n                else {\n                    copyBoxInto(this.target, this.layout.layoutBox);\n                }\n                applyBoxDelta(this.target, this.targetDelta);\n            }\n            else {\n                /**\n                 * If no target, use own layout as target\n                 */\n                copyBoxInto(this.target, this.layout.layoutBox);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */\n            if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    Boolean(relativeParent.resumingFrom) ===\n                        Boolean(this.resumingFrom) &&\n                    !relativeParent.options.layoutScroll &&\n                    relativeParent.target &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * Increase debug counter for resolved target deltas\n             */\n            if (isDebug) {\n                metrics.resolvedTargetDeltas++;\n            }\n        }\n        getClosestProjectingParent() {\n            if (!this.parent ||\n                hasScale(this.parent.latestValues) ||\n                has2DTranslate(this.parent.latestValues)) {\n                return undefined;\n            }\n            if (this.parent.isProjecting()) {\n                return this.parent;\n            }\n            else {\n                return this.parent.getClosestProjectingParent();\n            }\n        }\n        isProjecting() {\n            return Boolean((this.relativeTarget ||\n                this.targetDelta ||\n                this.options.layoutRoot) &&\n                this.layout);\n        }\n        calcProjection() {\n            var _a;\n            const lead = this.getLead();\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            let canSkip = true;\n            /**\n             * If this is a normal layout animation and neither this node nor its nearest projecting\n             * is dirty then we can't skip.\n             */\n            if (this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If this is a shared layout animation and this node's shared projection is dirty then\n             * we can't skip.\n             */\n            if (isShared &&\n                (this.isSharedProjectionDirty || this.isTransformDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If we have resolved the target this frame we must recalculate the\n             * projection to ensure it visually represents the internal calculations.\n             */\n            if (this.resolvedRelativeTargetAt === frameData.timestamp) {\n                canSkip = false;\n            }\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */\n            this.isTreeAnimating = Boolean((this.parent && this.parent.isTreeAnimating) ||\n                this.currentAnimation ||\n                this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */\n            copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n            /**\n             * Record previous tree scales before updating.\n             */\n            const prevTreeScaleX = this.treeScale.x;\n            const prevTreeScaleY = this.treeScale.y;\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */\n            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\n            /**\n             * If this layer needs to perform scale correction but doesn't have a target,\n             * use the layout as the target.\n             */\n            if (lead.layout &&\n                !lead.target &&\n                (this.treeScale.x !== 1 || this.treeScale.y !== 1)) {\n                lead.target = lead.layout.layoutBox;\n                lead.targetWithTransforms = createBox();\n            }\n            const { target } = lead;\n            if (!target) {\n                /**\n                 * If we don't have a target to project into, but we were previously\n                 * projecting, we want to remove the stored transform and schedule\n                 * a render to ensure the elements reflect the removed transform.\n                 */\n                if (this.prevProjectionDelta) {\n                    this.createProjectionDeltas();\n                    this.scheduleRender();\n                }\n                return;\n            }\n            if (!this.projectionDelta || !this.prevProjectionDelta) {\n                this.createProjectionDeltas();\n            }\n            else {\n                copyAxisDeltaInto(this.prevProjectionDelta.x, this.projectionDelta.x);\n                copyAxisDeltaInto(this.prevProjectionDelta.y, this.projectionDelta.y);\n            }\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */\n            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            if (this.treeScale.x !== prevTreeScaleX ||\n                this.treeScale.y !== prevTreeScaleY ||\n                !axisDeltaEquals(this.projectionDelta.x, this.prevProjectionDelta.x) ||\n                !axisDeltaEquals(this.projectionDelta.y, this.prevProjectionDelta.y)) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n            /**\n             * Increase debug counter for recalculated projections\n             */\n            if (isDebug) {\n                metrics.recalculatedProjection++;\n            }\n        }\n        hide() {\n            this.isVisible = false;\n            // TODO: Schedule render\n        }\n        show() {\n            this.isVisible = true;\n            // TODO: Schedule render\n        }\n        scheduleRender(notifyAll = true) {\n            var _a;\n            (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.scheduleRender();\n            if (notifyAll) {\n                const stack = this.getStack();\n                stack && stack.scheduleRender();\n            }\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        }\n        createProjectionDeltas() {\n            this.prevProjectionDelta = createDelta();\n            this.projectionDelta = createDelta();\n            this.projectionDeltaWithTransform = createDelta();\n        }\n        setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {\n            const snapshot = this.snapshot;\n            const snapshotLatestValues = snapshot\n                ? snapshot.latestValues\n                : {};\n            const mixedValues = { ...this.latestValues };\n            const targetDelta = createDelta();\n            if (!this.relativeParent ||\n                !this.relativeParent.options.layoutRoot) {\n                this.relativeTarget = this.relativeTargetOrigin = undefined;\n            }\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            const relativeLayout = createBox();\n            const snapshotSource = snapshot ? snapshot.source : undefined;\n            const layoutSource = this.layout ? this.layout.source : undefined;\n            const isSharedLayoutAnimation = snapshotSource !== layoutSource;\n            const stack = this.getStack();\n            const isOnlyMember = !stack || stack.members.length <= 1;\n            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&\n                !isOnlyMember &&\n                this.options.crossfade === true &&\n                !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            let prevRelativeTarget;\n            this.mixTargetDelta = (latest) => {\n                const progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                this.setTargetDelta(targetDelta);\n                if (this.relativeTarget &&\n                    this.relativeTargetOrigin &&\n                    this.layout &&\n                    this.relativeParent &&\n                    this.relativeParent.layout) {\n                    calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n                    /**\n                     * If this is an unchanged relative target we can consider the\n                     * projection not dirty.\n                     */\n                    if (prevRelativeTarget &&\n                        boxEquals(this.relativeTarget, prevRelativeTarget)) {\n                        this.isProjectionDirty = false;\n                    }\n                    if (!prevRelativeTarget)\n                        prevRelativeTarget = createBox();\n                    copyBoxInto(prevRelativeTarget, this.relativeTarget);\n                }\n                if (isSharedLayoutAnimation) {\n                    this.animationValues = mixedValues;\n                    mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                this.root.scheduleUpdateProjection();\n                this.scheduleRender();\n                this.animationProgress = progress;\n            };\n            this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\n        }\n        startAnimation(options) {\n            this.notifyListeners(\"animationStart\");\n            this.currentAnimation && this.currentAnimation.stop();\n            if (this.resumingFrom && this.resumingFrom.currentAnimation) {\n                this.resumingFrom.currentAnimation.stop();\n            }\n            if (this.pendingAnimation) {\n                cancelFrame(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */\n            this.pendingAnimation = frame.update(() => {\n                globalProjectionState.hasAnimatedSinceResize = true;\n                this.currentAnimation = animateSingleValue(0, animationTarget, {\n                    ...options,\n                    onUpdate: (latest) => {\n                        this.mixTargetDelta(latest);\n                        options.onUpdate && options.onUpdate(latest);\n                    },\n                    onComplete: () => {\n                        options.onComplete && options.onComplete();\n                        this.completeAnimation();\n                    },\n                });\n                if (this.resumingFrom) {\n                    this.resumingFrom.currentAnimation = this.currentAnimation;\n                }\n                this.pendingAnimation = undefined;\n            });\n        }\n        completeAnimation() {\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            const stack = this.getStack();\n            stack && stack.exitAnimationComplete();\n            this.resumingFrom =\n                this.currentAnimation =\n                    this.animationValues =\n                        undefined;\n            this.notifyListeners(\"animationComplete\");\n        }\n        finishAnimation() {\n            if (this.currentAnimation) {\n                this.mixTargetDelta && this.mixTargetDelta(animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        }\n        applyTransformsToTarget() {\n            const lead = this.getLead();\n            let { targetWithTransforms, target, layout, latestValues } = lead;\n            if (!targetWithTransforms || !target || !layout)\n                return;\n            /**\n             * If we're only animating position, and this element isn't the lead element,\n             * then instead of projecting into the lead box we instead want to calculate\n             * a new target that aligns the two boxes but maintains the layout shape.\n             */\n            if (this !== lead &&\n                this.layout &&\n                layout &&\n                shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n                target = this.target || createBox();\n                const xLength = calcLength(this.layout.layoutBox.x);\n                target.x.min = lead.target.x.min;\n                target.x.max = target.x.min + xLength;\n                const yLength = calcLength(this.layout.layoutBox.y);\n                target.y.min = lead.target.y.min;\n                target.y.max = target.y.min + yLength;\n            }\n            copyBoxInto(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */\n            transformBox(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its layout layout\n             * into the desired bounding box.\n             */\n            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        }\n        registerSharedNode(layoutId, node) {\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new NodeStack());\n            }\n            const stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            const config = node.options.initialPromotionConfig;\n            node.promote({\n                transition: config ? config.transition : undefined,\n                preserveFollowOpacity: config && config.shouldPreserveFollowOpacity\n                    ? config.shouldPreserveFollowOpacity(node)\n                    : undefined,\n            });\n        }\n        isLead() {\n            const stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        }\n        getLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n        }\n        getPrevLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n        }\n        getStack() {\n            const { layoutId } = this.options;\n            if (layoutId)\n                return this.root.sharedNodes.get(layoutId);\n        }\n        promote({ needsReset, transition, preserveFollowOpacity, } = {}) {\n            const stack = this.getStack();\n            if (stack)\n                stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition)\n                this.setOptions({ transition });\n        }\n        relegate() {\n            const stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            }\n            else {\n                return false;\n            }\n        }\n        resetSkewAndRotation() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return;\n            // If there's no detected skew or rotation values, we can early return without a forced render.\n            let hasDistortingTransform = false;\n            /**\n             * An unrolled check for rotation values. Most elements don't have any rotation and\n             * skipping the nested loop and new object creation is 50% faster.\n             */\n            const { latestValues } = visualElement;\n            if (latestValues.z ||\n                latestValues.rotate ||\n                latestValues.rotateX ||\n                latestValues.rotateY ||\n                latestValues.rotateZ ||\n                latestValues.skewX ||\n                latestValues.skewY) {\n                hasDistortingTransform = true;\n            }\n            // If there's no distorting values, we don't need to do any more.\n            if (!hasDistortingTransform)\n                return;\n            const resetValues = {};\n            if (latestValues.z) {\n                resetDistortingTransform(\"z\", visualElement, resetValues, this.animationValues);\n            }\n            // Check the skew and rotate value of all axes and reset to 0\n            for (let i = 0; i < transformAxes.length; i++) {\n                resetDistortingTransform(`rotate${transformAxes[i]}`, visualElement, resetValues, this.animationValues);\n                resetDistortingTransform(`skew${transformAxes[i]}`, visualElement, resetValues, this.animationValues);\n            }\n            // Force a render of this element to apply the transform with all skews and rotations\n            // set to 0.\n            visualElement.render();\n            // Put back all the values we reset\n            for (const key in resetValues) {\n                visualElement.setStaticValue(key, resetValues[key]);\n                if (this.animationValues) {\n                    this.animationValues[key] = resetValues[key];\n                }\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        }\n        getProjectionStyles(styleProp) {\n            var _a, _b;\n            if (!this.instance || this.isSVG)\n                return undefined;\n            if (!this.isVisible) {\n                return hiddenVisibility;\n            }\n            const styles = {\n                visibility: \"\",\n            };\n            const transformTemplate = this.getTransformTemplate();\n            if (this.needsReset) {\n                this.needsReset = false;\n                styles.opacity = \"\";\n                styles.pointerEvents =\n                    resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\";\n                styles.transform = transformTemplate\n                    ? transformTemplate(this.latestValues, \"\")\n                    : \"none\";\n                return styles;\n            }\n            const lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                const emptyStyles = {};\n                if (this.options.layoutId) {\n                    emptyStyles.opacity =\n                        this.latestValues.opacity !== undefined\n                            ? this.latestValues.opacity\n                            : 1;\n                    emptyStyles.pointerEvents =\n                        resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !hasTransform(this.latestValues)) {\n                    emptyStyles.transform = transformTemplate\n                        ? transformTemplate({}, \"\")\n                        : \"none\";\n                    this.hasProjected = false;\n                }\n                return emptyStyles;\n            }\n            const valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\n            }\n            const { x, y } = this.projectionDelta;\n            styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */\n                styles.opacity =\n                    lead === this\n                        ? (_b = (_a = valuesToRender.opacity) !== null && _a !== void 0 ? _a : this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1\n                        : this.preserveOpacity\n                            ? this.latestValues.opacity\n                            : valuesToRender.opacityExit;\n            }\n            else {\n                /**\n                 * Or we're not animating at all, set the lead component to its layout\n                 * opacity and other components to hidden.\n                 */\n                styles.opacity =\n                    lead === this\n                        ? valuesToRender.opacity !== undefined\n                            ? valuesToRender.opacity\n                            : \"\"\n                        : valuesToRender.opacityExit !== undefined\n                            ? valuesToRender.opacityExit\n                            : 0;\n            }\n            /**\n             * Apply scale correction\n             */\n            for (const key in scaleCorrectors) {\n                if (valuesToRender[key] === undefined)\n                    continue;\n                const { correct, applyTo } = scaleCorrectors[key];\n                /**\n                 * Only apply scale correction to the value if we have an\n                 * active projection transform. Otherwise these values become\n                 * vulnerable to distortion if the element changes size without\n                 * a corresponding layout animation.\n                 */\n                const corrected = styles.transform === \"none\"\n                    ? valuesToRender[key]\n                    : correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    const num = applyTo.length;\n                    for (let i = 0; i < num; i++) {\n                        styles[applyTo[i]] = corrected;\n                    }\n                }\n                else {\n                    styles[key] = corrected;\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */\n            if (this.options.layoutId) {\n                styles.pointerEvents =\n                    lead === this\n                        ? resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\"\n                        : \"none\";\n            }\n            return styles;\n        }\n        clearSnapshot() {\n            this.resumeFrom = this.snapshot = undefined;\n        }\n        // Only run on root\n        resetTree() {\n            this.root.nodes.forEach((node) => { var _a; return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop(); });\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        }\n    };\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    var _a;\n    const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n    if (node.isLead() &&\n        node.layout &&\n        snapshot &&\n        node.hasListeners(\"didUpdate\")) {\n        const { layoutBox: layout, measuredBox: measuredLayout } = node.layout;\n        const { animationType } = node.options;\n        const isShared = snapshot.source !== node.layout.source;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (animationType === \"size\") {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(axisSnapshot);\n                axisSnapshot.min = layout[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(layout[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n                /**\n                 * Ensure relative target gets resized and rerendererd\n                 */\n                if (node.relativeTarget && !node.currentAnimation) {\n                    node.isProjectionDirty = true;\n                    node.relativeTarget[axis].max =\n                        node.relativeTarget[axis].min + length;\n                }\n            });\n        }\n        const layoutDelta = createDelta();\n        calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n        const visualDelta = createDelta();\n        if (isShared) {\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n        }\n        else {\n            calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n        }\n        const hasLayoutChanged = !isDeltaZero(layoutDelta);\n        let hasRelativeTargetChanged = false;\n        if (!node.resumeFrom) {\n            const relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */\n            if (relativeParent && !relativeParent.resumeFrom) {\n                const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;\n                if (parentSnapshot && parentLayout) {\n                    const relativeSnapshot = createBox();\n                    calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n                    const relativeLayout = createBox();\n                    calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n                    if (!boxEqualsRounded(relativeSnapshot, relativeLayout)) {\n                        hasRelativeTargetChanged = true;\n                    }\n                    if (relativeParent.options.layoutRoot) {\n                        node.relativeTarget = relativeLayout;\n                        node.relativeTargetOrigin = relativeSnapshot;\n                        node.relativeParent = relativeParent;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout,\n            snapshot,\n            delta: visualDelta,\n            layoutDelta,\n            hasLayoutChanged,\n            hasRelativeTargetChanged,\n        });\n    }\n    else if (node.isLead()) {\n        const { onExitComplete } = node.options;\n        onExitComplete && onExitComplete();\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */\n    node.options.transition = undefined;\n}\nfunction propagateDirtyNodes(node) {\n    /**\n     * Increase debug counter for nodes encountered this frame\n     */\n    if (isDebug) {\n        metrics.totalNodes++;\n    }\n    if (!node.parent)\n        return;\n    /**\n     * If this node isn't projecting, propagate isProjectionDirty. It will have\n     * no performance impact but it will allow the next child that *is* projecting\n     * but *isn't* dirty to just check its parent to see if *any* ancestor needs\n     * correcting.\n     */\n    if (!node.isProjecting()) {\n        node.isProjectionDirty = node.parent.isProjectionDirty;\n    }\n    /**\n     * Propagate isSharedProjectionDirty and isTransformDirty\n     * throughout the whole tree. A future revision can take another look at\n     * this but for safety we still recalcualte shared nodes.\n     */\n    node.isSharedProjectionDirty || (node.isSharedProjectionDirty = Boolean(node.isProjectionDirty ||\n        node.parent.isProjectionDirty ||\n        node.parent.isSharedProjectionDirty));\n    node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty);\n}\nfunction cleanDirtyNodes(node) {\n    node.isProjectionDirty =\n        node.isSharedProjectionDirty =\n            node.isTransformDirty =\n                false;\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction clearIsLayoutDirty(node) {\n    node.isLayoutDirty = false;\n}\nfunction resetTransformStyle(node) {\n    const { visualElement } = node.options;\n    if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notify(\"BeforeLayoutMeasure\");\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n    node.isProjectionDirty = true;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetSkewAndRotation(node) {\n    node.resetSkewAndRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = mixNumber(delta.translate, 0, p);\n    output.scale = mixNumber(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = mixNumber(from.min, to.min, p);\n    output.max = mixNumber(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return (node.animationValues && node.animationValues.opacityExit !== undefined);\n}\nconst defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nconst userAgentContains = (string) => typeof navigator !== \"undefined\" &&\n    navigator.userAgent &&\n    navigator.userAgent.toLowerCase().includes(string);\n/**\n * Measured bounding boxes must be rounded in Safari and\n * left untouched in Chrome, otherwise non-integer layouts within scaled-up elements\n * can appear to jump.\n */\nconst roundPoint = userAgentContains(\"applewebkit/\") && !userAgentContains(\"chrome/\")\n    ? Math.round\n    : noop;\nfunction roundAxis(axis) {\n    // Round to the nearest .5 pixels to support subpixel layouts\n    axis.min = roundPoint(axis.min);\n    axis.max = roundPoint(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n    return (animationType === \"position\" ||\n        (animationType === \"preserve-aspect\" &&\n            !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2)));\n}\nfunction checkNodeWasScrollRoot(node) {\n    var _a;\n    return node !== node.root && ((_a = node.scroll) === null || _a === void 0 ? void 0 : _a.wasRoot);\n}\n\nexport { cleanDirtyNodes, createProjectionNode, mixAxis, mixAxisDelta, mixBox, propagateDirtyNodes };\n","import { createProjectionNode } from './create-projection-node.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\n\nconst DocumentProjectionNode = createProjectionNode({\n    attachResizeListener: (ref, notify) => addDomEvent(ref, \"resize\", notify),\n    measureScroll: () => ({\n        x: document.documentElement.scrollLeft || document.body.scrollLeft,\n        y: document.documentElement.scrollTop || document.body.scrollTop,\n    }),\n    checkIsScrollRoot: () => true,\n});\n\nexport { DocumentProjectionNode };\n","import { createProjectionNode } from './create-projection-node.mjs';\nimport { DocumentProjectionNode } from './DocumentProjectionNode.mjs';\n\nconst rootProjectionNode = {\n    current: undefined,\n};\nconst HTMLProjectionNode = createProjectionNode({\n    measureScroll: (instance) => ({\n        x: instance.scrollLeft,\n        y: instance.scrollTop,\n    }),\n    defaultParent: () => {\n        if (!rootProjectionNode.current) {\n            const documentNode = new DocumentProjectionNode({});\n            documentNode.mount(window);\n            documentNode.setOptions({ layoutScroll: true });\n            rootProjectionNode.current = documentNode;\n        }\n        return rootProjectionNode.current;\n    },\n    resetTransform: (instance, value) => {\n        instance.style.transform = value !== undefined ? value : \"none\";\n    },\n    checkIsScrollRoot: (instance) => Boolean(window.getComputedStyle(instance).position === \"fixed\"),\n});\n\nexport { HTMLProjectionNode, rootProjectionNode };\n","import { DragGesture } from '../../gestures/drag/index.mjs';\nimport { PanGesture } from '../../gestures/pan/index.mjs';\nimport { MeasureLayout } from './layout/MeasureLayout.mjs';\nimport { HTMLProjectionNode } from '../../projection/node/HTMLProjectionNode.mjs';\n\nconst drag = {\n    pan: {\n        Feature: PanGesture,\n    },\n    drag: {\n        Feature: DragGesture,\n        ProjectionNode: HTMLProjectionNode,\n        MeasureLayout,\n    },\n};\n\nexport { drag };\n","import { addPointerEvent } from '../events/add-pointer-event.mjs';\nimport { pipe } from '../utils/pipe.mjs';\nimport { isDragActive } from './drag/utils/lock.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\nimport { frame } from '../frameloop/frame.mjs';\n\nfunction addHoverEvent(node, isActive) {\n    const eventName = isActive ? \"pointerenter\" : \"pointerleave\";\n    const callbackName = isActive ? \"onHoverStart\" : \"onHoverEnd\";\n    const handleEvent = (event, info) => {\n        if (event.pointerType === \"touch\" || isDragActive())\n            return;\n        const props = node.getProps();\n        if (node.animationState && props.whileHover) {\n            node.animationState.setActive(\"whileHover\", isActive);\n        }\n        const callback = props[callbackName];\n        if (callback) {\n            frame.postRender(() => callback(event, info));\n        }\n    };\n    return addPointerEvent(node.current, eventName, handleEvent, {\n        passive: !node.getProps()[callbackName],\n    });\n}\nclass HoverGesture extends Feature {\n    mount() {\n        this.unmount = pipe(addHoverEvent(this.node, true), addHoverEvent(this.node, false));\n    }\n    unmount() { }\n}\n\nexport { HoverGesture };\n","import { addDomEvent } from '../events/add-dom-event.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\nimport { pipe } from '../utils/pipe.mjs';\n\nclass FocusGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.isActive = false;\n    }\n    onFocus() {\n        let isFocusVisible = false;\n        /**\n         * If this element doesn't match focus-visible then don't\n         * apply whileHover. But, if matches throws that focus-visible\n         * is not a valid selector then in that browser outline styles will be applied\n         * to the element by default and we want to match that behaviour with whileFocus.\n         */\n        try {\n            isFocusVisible = this.node.current.matches(\":focus-visible\");\n        }\n        catch (e) {\n            isFocusVisible = true;\n        }\n        if (!isFocusVisible || !this.node.animationState)\n            return;\n        this.node.animationState.setActive(\"whileFocus\", true);\n        this.isActive = true;\n    }\n    onBlur() {\n        if (!this.isActive || !this.node.animationState)\n            return;\n        this.node.animationState.setActive(\"whileFocus\", false);\n        this.isActive = false;\n    }\n    mount() {\n        this.unmount = pipe(addDomEvent(this.node.current, \"focus\", () => this.onFocus()), addDomEvent(this.node.current, \"blur\", () => this.onBlur()));\n    }\n    unmount() { }\n}\n\nexport { FocusGesture };\n","/**\n * Recursively traverse up the tree to check whether the provided child node\n * is the parent or a descendant of it.\n *\n * @param parent - Element to find\n * @param child - Element to test against parent\n */\nconst isNodeOrChild = (parent, child) => {\n    if (!child) {\n        return false;\n    }\n    else if (parent === child) {\n        return true;\n    }\n    else {\n        return isNodeOrChild(parent, child.parentElement);\n    }\n};\n\nexport { isNodeOrChild };\n","import { extractEventInfo } from '../events/event-info.mjs';\nimport { addDomEvent } from '../events/add-dom-event.mjs';\nimport { addPointerEvent } from '../events/add-pointer-event.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\nimport { pipe } from '../utils/pipe.mjs';\nimport { isDragActive } from './drag/utils/lock.mjs';\nimport { isNodeOrChild } from './utils/is-node-or-child.mjs';\nimport { noop } from '../utils/noop.mjs';\nimport { frame } from '../frameloop/frame.mjs';\n\nfunction fireSyntheticPointerEvent(name, handler) {\n    if (!handler)\n        return;\n    const syntheticPointerEvent = new PointerEvent(\"pointer\" + name);\n    handler(syntheticPointerEvent, extractEventInfo(syntheticPointerEvent));\n}\nclass PressGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.removeStartListeners = noop;\n        this.removeEndListeners = noop;\n        this.removeAccessibleListeners = noop;\n        this.startPointerPress = (startEvent, startInfo) => {\n            if (this.isPressing)\n                return;\n            this.removeEndListeners();\n            const props = this.node.getProps();\n            const endPointerPress = (endEvent, endInfo) => {\n                if (!this.checkPressEnd())\n                    return;\n                const { onTap, onTapCancel, globalTapTarget } = this.node.getProps();\n                /**\n                 * We only count this as a tap gesture if the event.target is the same\n                 * as, or a child of, this component's element\n                 */\n                const handler = !globalTapTarget &&\n                    !isNodeOrChild(this.node.current, endEvent.target)\n                    ? onTapCancel\n                    : onTap;\n                if (handler) {\n                    frame.update(() => handler(endEvent, endInfo));\n                }\n            };\n            const removePointerUpListener = addPointerEvent(window, \"pointerup\", endPointerPress, {\n                passive: !(props.onTap || props[\"onPointerUp\"]),\n            });\n            const removePointerCancelListener = addPointerEvent(window, \"pointercancel\", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo), {\n                passive: !(props.onTapCancel ||\n                    props[\"onPointerCancel\"]),\n            });\n            this.removeEndListeners = pipe(removePointerUpListener, removePointerCancelListener);\n            this.startPress(startEvent, startInfo);\n        };\n        this.startAccessiblePress = () => {\n            const handleKeydown = (keydownEvent) => {\n                if (keydownEvent.key !== \"Enter\" || this.isPressing)\n                    return;\n                const handleKeyup = (keyupEvent) => {\n                    if (keyupEvent.key !== \"Enter\" || !this.checkPressEnd())\n                        return;\n                    fireSyntheticPointerEvent(\"up\", (event, info) => {\n                        const { onTap } = this.node.getProps();\n                        if (onTap) {\n                            frame.postRender(() => onTap(event, info));\n                        }\n                    });\n                };\n                this.removeEndListeners();\n                this.removeEndListeners = addDomEvent(this.node.current, \"keyup\", handleKeyup);\n                fireSyntheticPointerEvent(\"down\", (event, info) => {\n                    this.startPress(event, info);\n                });\n            };\n            const removeKeydownListener = addDomEvent(this.node.current, \"keydown\", handleKeydown);\n            const handleBlur = () => {\n                if (!this.isPressing)\n                    return;\n                fireSyntheticPointerEvent(\"cancel\", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo));\n            };\n            const removeBlurListener = addDomEvent(this.node.current, \"blur\", handleBlur);\n            this.removeAccessibleListeners = pipe(removeKeydownListener, removeBlurListener);\n        };\n    }\n    startPress(event, info) {\n        this.isPressing = true;\n        const { onTapStart, whileTap } = this.node.getProps();\n        /**\n         * Ensure we trigger animations before firing event callback\n         */\n        if (whileTap && this.node.animationState) {\n            this.node.animationState.setActive(\"whileTap\", true);\n        }\n        if (onTapStart) {\n            frame.postRender(() => onTapStart(event, info));\n        }\n    }\n    checkPressEnd() {\n        this.removeEndListeners();\n        this.isPressing = false;\n        const props = this.node.getProps();\n        if (props.whileTap && this.node.animationState) {\n            this.node.animationState.setActive(\"whileTap\", false);\n        }\n        return !isDragActive();\n    }\n    cancelPress(event, info) {\n        if (!this.checkPressEnd())\n            return;\n        const { onTapCancel } = this.node.getProps();\n        if (onTapCancel) {\n            frame.postRender(() => onTapCancel(event, info));\n        }\n    }\n    mount() {\n        const props = this.node.getProps();\n        const removePointerListener = addPointerEvent(props.globalTapTarget ? window : this.node.current, \"pointerdown\", this.startPointerPress, {\n            passive: !(props.onTapStart ||\n                props[\"onPointerStart\"]),\n        });\n        const removeFocusListener = addDomEvent(this.node.current, \"focus\", this.startAccessiblePress);\n        this.removeStartListeners = pipe(removePointerListener, removeFocusListener);\n    }\n    unmount() {\n        this.removeStartListeners();\n        this.removeEndListeners();\n        this.removeAccessibleListeners();\n    }\n}\n\nexport { PressGesture };\n","/**\n * Map an IntersectionHandler callback to an element. We only ever make one handler for one\n * element, so even though these handlers might all be triggered by different\n * observers, we can keep them in the same map.\n */\nconst observerCallbacks = new WeakMap();\n/**\n * Multiple observers can be created for multiple element/document roots. Each with\n * different settings. So here we store dictionaries of observers to each root,\n * using serialised settings (threshold/margin) as lookup keys.\n */\nconst observers = new WeakMap();\nconst fireObserverCallback = (entry) => {\n    const callback = observerCallbacks.get(entry.target);\n    callback && callback(entry);\n};\nconst fireAllObserverCallbacks = (entries) => {\n    entries.forEach(fireObserverCallback);\n};\nfunction initIntersectionObserver({ root, ...options }) {\n    const lookupRoot = root || document;\n    /**\n     * If we don't have an observer lookup map for this root, create one.\n     */\n    if (!observers.has(lookupRoot)) {\n        observers.set(lookupRoot, {});\n    }\n    const rootObservers = observers.get(lookupRoot);\n    const key = JSON.stringify(options);\n    /**\n     * If we don't have an observer for this combination of root and settings,\n     * create one.\n     */\n    if (!rootObservers[key]) {\n        rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, { root, ...options });\n    }\n    return rootObservers[key];\n}\nfunction observeIntersection(element, options, callback) {\n    const rootInteresectionObserver = initIntersectionObserver(options);\n    observerCallbacks.set(element, callback);\n    rootInteresectionObserver.observe(element);\n    return () => {\n        observerCallbacks.delete(element);\n        rootInteresectionObserver.unobserve(element);\n    };\n}\n\nexport { observeIntersection };\n","import { Feature } from '../Feature.mjs';\nimport { observeIntersection } from './observers.mjs';\n\nconst thresholdNames = {\n    some: 0,\n    all: 1,\n};\nclass InViewFeature extends Feature {\n    constructor() {\n        super(...arguments);\n        this.hasEnteredView = false;\n        this.isInView = false;\n    }\n    startObserver() {\n        this.unmount();\n        const { viewport = {} } = this.node.getProps();\n        const { root, margin: rootMargin, amount = \"some\", once } = viewport;\n        const options = {\n            root: root ? root.current : undefined,\n            rootMargin,\n            threshold: typeof amount === \"number\" ? amount : thresholdNames[amount],\n        };\n        const onIntersectionUpdate = (entry) => {\n            const { isIntersecting } = entry;\n            /**\n             * If there's been no change in the viewport state, early return.\n             */\n            if (this.isInView === isIntersecting)\n                return;\n            this.isInView = isIntersecting;\n            /**\n             * Handle hasEnteredView. If this is only meant to run once, and\n             * element isn't visible, early return. Otherwise set hasEnteredView to true.\n             */\n            if (once && !isIntersecting && this.hasEnteredView) {\n                return;\n            }\n            else if (isIntersecting) {\n                this.hasEnteredView = true;\n            }\n            if (this.node.animationState) {\n                this.node.animationState.setActive(\"whileInView\", isIntersecting);\n            }\n            /**\n             * Use the latest committed props rather than the ones in scope\n             * when this observer is created\n             */\n            const { onViewportEnter, onViewportLeave } = this.node.getProps();\n            const callback = isIntersecting ? onViewportEnter : onViewportLeave;\n            callback && callback(entry);\n        };\n        return observeIntersection(this.node.current, options, onIntersectionUpdate);\n    }\n    mount() {\n        this.startObserver();\n    }\n    update() {\n        if (typeof IntersectionObserver === \"undefined\")\n            return;\n        const { props, prevProps } = this.node;\n        const hasOptionsChanged = [\"amount\", \"margin\", \"root\"].some(hasViewportOptionChanged(props, prevProps));\n        if (hasOptionsChanged) {\n            this.startObserver();\n        }\n    }\n    unmount() { }\n}\nfunction hasViewportOptionChanged({ viewport = {} }, { viewport: prevViewport = {} } = {}) {\n    return (name) => viewport[name] !== prevViewport[name];\n}\n\nexport { InViewFeature };\n","import { HoverGesture } from '../../gestures/hover.mjs';\nimport { FocusGesture } from '../../gestures/focus.mjs';\nimport { PressGesture } from '../../gestures/press.mjs';\nimport { InViewFeature } from './viewport/index.mjs';\n\nconst gestureAnimations = {\n    inView: {\n        Feature: InViewFeature,\n    },\n    tap: {\n        Feature: PressGesture,\n    },\n    focus: {\n        Feature: FocusGesture,\n    },\n    hover: {\n        Feature: HoverGesture,\n    },\n};\n\nexport { gestureAnimations };\n","import { HTMLProjectionNode } from '../../projection/node/HTMLProjectionNode.mjs';\nimport { MeasureLayout } from './layout/MeasureLayout.mjs';\n\nconst layout = {\n    layout: {\n        ProjectionNode: HTMLProjectionNode,\n        MeasureLayout,\n    },\n};\n\nexport { layout };\n","\"use client\";\nimport { createContext } from 'react';\n\nconst MotionContext = createContext({});\n\nexport { MotionContext };\n","\"use client\";\nimport { createContext } from 'react';\n\nconst LazyContext = createContext({ strict: false });\n\nexport { LazyContext };\n","import { useContext, useRef, useInsertionEffect, useEffect } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { MotionContext } from '../../context/MotionContext/index.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\nimport { LazyContext } from '../../context/LazyContext.mjs';\nimport { MotionConfigContext } from '../../context/MotionConfigContext.mjs';\nimport { optimizedAppearDataAttribute } from '../../animation/optimized-appear/data-id.mjs';\nimport { microtask } from '../../frameloop/microtask.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { SwitchLayoutGroupContext } from '../../context/SwitchLayoutGroupContext.mjs';\n\nlet scheduleHandoffComplete = false;\nfunction useVisualElement(Component, visualState, props, createVisualElement, ProjectionNodeConstructor) {\n    var _a;\n    const { visualElement: parent } = useContext(MotionContext);\n    const lazyContext = useContext(LazyContext);\n    const presenceContext = useContext(PresenceContext);\n    const reducedMotionConfig = useContext(MotionConfigContext).reducedMotion;\n    const visualElementRef = useRef();\n    /**\n     * If we haven't preloaded a renderer, check to see if we have one lazy-loaded\n     */\n    createVisualElement = createVisualElement || lazyContext.renderer;\n    if (!visualElementRef.current && createVisualElement) {\n        visualElementRef.current = createVisualElement(Component, {\n            visualState,\n            parent,\n            props,\n            presenceContext,\n            blockInitialAnimation: presenceContext\n                ? presenceContext.initial === false\n                : false,\n            reducedMotionConfig,\n        });\n    }\n    const visualElement = visualElementRef.current;\n    /**\n     * Load Motion gesture and animation features. These are rendered as renderless\n     * components so each feature can optionally make use of React lifecycle methods.\n     */\n    const initialLayoutGroupConfig = useContext(SwitchLayoutGroupContext);\n    if (visualElement &&\n        !visualElement.projection &&\n        ProjectionNodeConstructor &&\n        (visualElement.type === \"html\" || visualElement.type === \"svg\")) {\n        createProjectionNode(visualElementRef.current, props, ProjectionNodeConstructor, initialLayoutGroupConfig);\n    }\n    useInsertionEffect(() => {\n        visualElement && visualElement.update(props, presenceContext);\n    });\n    /**\n     * Cache this value as we want to know whether HandoffAppearAnimations\n     * was present on initial render - it will be deleted after this.\n     */\n    const optimisedAppearId = props[optimizedAppearDataAttribute];\n    const wantsHandoff = useRef(Boolean(optimisedAppearId) &&\n        !window.MotionHandoffIsComplete &&\n        ((_a = window.MotionHasOptimisedAnimation) === null || _a === void 0 ? void 0 : _a.call(window, optimisedAppearId)));\n    useIsomorphicLayoutEffect(() => {\n        if (!visualElement)\n            return;\n        visualElement.updateFeatures();\n        microtask.render(visualElement.render);\n        /**\n         * Ideally this function would always run in a useEffect.\n         *\n         * However, if we have optimised appear animations to handoff from,\n         * it needs to happen synchronously to ensure there's no flash of\n         * incorrect styles in the event of a hydration error.\n         *\n         * So if we detect a situtation where optimised appear animations\n         * are running, we use useLayoutEffect to trigger animations.\n         */\n        if (wantsHandoff.current && visualElement.animationState) {\n            visualElement.animationState.animateChanges();\n        }\n    });\n    useEffect(() => {\n        if (!visualElement)\n            return;\n        if (!wantsHandoff.current && visualElement.animationState) {\n            visualElement.animationState.animateChanges();\n        }\n        wantsHandoff.current = false;\n        // This ensures all future calls to animateChanges() will run in useEffect\n        if (!scheduleHandoffComplete) {\n            scheduleHandoffComplete = true;\n            queueMicrotask(completeHandoff);\n        }\n    });\n    return visualElement;\n}\nfunction completeHandoff() {\n    window.MotionHandoffIsComplete = true;\n}\nfunction createProjectionNode(visualElement, props, ProjectionNodeConstructor, initialPromotionConfig) {\n    const { layoutId, layout, drag, dragConstraints, layoutScroll, layoutRoot, } = props;\n    visualElement.projection = new ProjectionNodeConstructor(visualElement.latestValues, props[\"data-framer-portal-id\"]\n        ? undefined\n        : getClosestProjectingNode(visualElement.parent));\n    visualElement.projection.setOptions({\n        layoutId,\n        layout,\n        alwaysMeasureLayout: Boolean(drag) || (dragConstraints && isRefObject(dragConstraints)),\n        visualElement,\n        /**\n         * TODO: Update options in an effect. This could be tricky as it'll be too late\n         * to update by the time layout animations run.\n         * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n         * ensuring it gets called if there's no potential layout animations.\n         *\n         */\n        animationType: typeof layout === \"string\" ? layout : \"both\",\n        initialPromotionConfig,\n        layoutScroll,\n        layoutRoot,\n    });\n}\nfunction getClosestProjectingNode(visualElement) {\n    if (!visualElement)\n        return undefined;\n    return visualElement.options.allowProjection !== false\n        ? visualElement.projection\n        : getClosestProjectingNode(visualElement.parent);\n}\n\nexport { useVisualElement };\n","import { useCallback } from 'react';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\n\n/**\n * Creates a ref function that, when called, hydrates the provided\n * external ref and VisualElement.\n */\nfunction useMotionRef(visualState, visualElement, externalRef) {\n    return useCallback((instance) => {\n        instance && visualState.mount && visualState.mount(instance);\n        if (visualElement) {\n            if (instance) {\n                visualElement.mount(instance);\n            }\n            else {\n                visualElement.unmount();\n            }\n        }\n        if (externalRef) {\n            if (typeof externalRef === \"function\") {\n                externalRef(instance);\n            }\n            else if (isRefObject(externalRef)) {\n                externalRef.current = instance;\n            }\n        }\n    }, \n    /**\n     * Only pass a new ref callback to React if we've received a visual element\n     * factory. Otherwise we'll be mounting/remounting every time externalRef\n     * or other dependencies change.\n     */\n    [visualElement]);\n}\n\nexport { useMotionRef };\n","import { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { isVariantLabel } from './is-variant-label.mjs';\nimport { variantProps } from './variant-props.mjs';\n\nfunction isControllingVariants(props) {\n    return (isAnimationControls(props.animate) ||\n        variantProps.some((name) => isVariantLabel(props[name])));\n}\nfunction isVariantNode(props) {\n    return Boolean(isControllingVariants(props) || props.variants);\n}\n\nexport { isControllingVariants, isVariantNode };\n","import { isVariantLabel } from '../../render/utils/is-variant-label.mjs';\nimport { isControllingVariants } from '../../render/utils/is-controlling-variants.mjs';\n\nfunction getCurrentTreeVariants(props, context) {\n    if (isControllingVariants(props)) {\n        const { initial, animate } = props;\n        return {\n            initial: initial === false || isVariantLabel(initial)\n                ? initial\n                : undefined,\n            animate: isVariantLabel(animate) ? animate : undefined,\n        };\n    }\n    return props.inherit !== false ? context : {};\n}\n\nexport { getCurrentTreeVariants };\n","import { useContext, useMemo } from 'react';\nimport { MotionContext } from './index.mjs';\nimport { getCurrentTreeVariants } from './utils.mjs';\n\nfunction useCreateMotionContext(props) {\n    const { initial, animate } = getCurrentTreeVariants(props, useContext(MotionContext));\n    return useMemo(() => ({ initial, animate }), [variantLabelsAsDependency(initial), variantLabelsAsDependency(animate)]);\n}\nfunction variantLabelsAsDependency(prop) {\n    return Array.isArray(prop) ? prop.join(\" \") : prop;\n}\n\nexport { useCreateMotionContext };\n","const featureProps = {\n    animation: [\n        \"animate\",\n        \"variants\",\n        \"whileHover\",\n        \"whileTap\",\n        \"exit\",\n        \"whileInView\",\n        \"whileFocus\",\n        \"whileDrag\",\n    ],\n    exit: [\"exit\"],\n    drag: [\"drag\", \"dragControls\"],\n    focus: [\"whileFocus\"],\n    hover: [\"whileHover\", \"onHoverStart\", \"onHoverEnd\"],\n    tap: [\"whileTap\", \"onTap\", \"onTapStart\", \"onTapCancel\"],\n    pan: [\"onPan\", \"onPanStart\", \"onPanSessionStart\", \"onPanEnd\"],\n    inView: [\"whileInView\", \"onViewportEnter\", \"onViewportLeave\"],\n    layout: [\"layout\", \"layoutId\"],\n};\nconst featureDefinitions = {};\nfor (const key in featureProps) {\n    featureDefinitions[key] = {\n        isEnabled: (props) => featureProps[key].some((name) => !!props[name]),\n    };\n}\n\nexport { featureDefinitions };\n","import { featureDefinitions } from './definitions.mjs';\n\nfunction loadFeatures(features) {\n    for (const key in features) {\n        featureDefinitions[key] = {\n            ...featureDefinitions[key],\n            ...features[key],\n        };\n    }\n}\n\nexport { loadFeatures };\n","const motionComponentSymbol = Symbol.for(\"motionComponentSymbol\");\n\nexport { motionComponentSymbol };\n","\"use client\";\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { forwardRef, useContext } from 'react';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { MotionContext } from '../context/MotionContext/index.mjs';\nimport { useVisualElement } from './utils/use-visual-element.mjs';\nimport { useMotionRef } from './utils/use-motion-ref.mjs';\nimport { useCreateMotionContext } from '../context/MotionContext/create.mjs';\nimport { loadFeatures } from './features/load-features.mjs';\nimport { isBrowser } from '../utils/is-browser.mjs';\nimport { LayoutGroupContext } from '../context/LayoutGroupContext.mjs';\nimport { LazyContext } from '../context/LazyContext.mjs';\nimport { motionComponentSymbol } from './utils/symbol.mjs';\nimport { warning, invariant } from '../utils/errors.mjs';\nimport { featureDefinitions } from './features/definitions.mjs';\n\n/**\n * Create a `motion` component.\n *\n * This function accepts a Component argument, which can be either a string (ie \"div\"\n * for `motion.div`), or an actual React component.\n *\n * Alongside this is a config option which provides a way of rendering the provided\n * component \"offline\", or outside the React render cycle.\n */\nfunction createRendererMotionComponent({ preloadedFeatures, createVisualElement, useRender, useVisualState, Component, }) {\n    preloadedFeatures && loadFeatures(preloadedFeatures);\n    function MotionComponent(props, externalRef) {\n        /**\n         * If we need to measure the element we load this functionality in a\n         * separate class component in order to gain access to getSnapshotBeforeUpdate.\n         */\n        let MeasureLayout;\n        const configAndProps = {\n            ...useContext(MotionConfigContext),\n            ...props,\n            layoutId: useLayoutId(props),\n        };\n        const { isStatic } = configAndProps;\n        const context = useCreateMotionContext(props);\n        const visualState = useVisualState(props, isStatic);\n        if (!isStatic && isBrowser) {\n            useStrictMode(configAndProps, preloadedFeatures);\n            const layoutProjection = getProjectionFunctionality(configAndProps);\n            MeasureLayout = layoutProjection.MeasureLayout;\n            /**\n             * Create a VisualElement for this component. A VisualElement provides a common\n             * interface to renderer-specific APIs (ie DOM/Three.js etc) as well as\n             * providing a way of rendering to these APIs outside of the React render loop\n             * for more performant animations and interactions\n             */\n            context.visualElement = useVisualElement(Component, visualState, configAndProps, createVisualElement, layoutProjection.ProjectionNode);\n        }\n        /**\n         * The mount order and hierarchy is specific to ensure our element ref\n         * is hydrated by the time features fire their effects.\n         */\n        return (jsxs(MotionContext.Provider, { value: context, children: [MeasureLayout && context.visualElement ? (jsx(MeasureLayout, { visualElement: context.visualElement, ...configAndProps })) : null, useRender(Component, props, useMotionRef(visualState, context.visualElement, externalRef), visualState, isStatic, context.visualElement)] }));\n    }\n    const ForwardRefMotionComponent = forwardRef(MotionComponent);\n    ForwardRefMotionComponent[motionComponentSymbol] = Component;\n    return ForwardRefMotionComponent;\n}\nfunction useLayoutId({ layoutId }) {\n    const layoutGroupId = useContext(LayoutGroupContext).id;\n    return layoutGroupId && layoutId !== undefined\n        ? layoutGroupId + \"-\" + layoutId\n        : layoutId;\n}\nfunction useStrictMode(configAndProps, preloadedFeatures) {\n    const isStrict = useContext(LazyContext).strict;\n    /**\n     * If we're in development mode, check to make sure we're not rendering a motion component\n     * as a child of LazyMotion, as this will break the file-size benefits of using it.\n     */\n    if (process.env.NODE_ENV !== \"production\" &&\n        preloadedFeatures &&\n        isStrict) {\n        const strictMessage = \"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.\";\n        configAndProps.ignoreStrict\n            ? warning(false, strictMessage)\n            : invariant(false, strictMessage);\n    }\n}\nfunction getProjectionFunctionality(props) {\n    const { drag, layout } = featureDefinitions;\n    if (!drag && !layout)\n        return {};\n    const combined = { ...drag, ...layout };\n    return {\n        MeasureLayout: (drag === null || drag === void 0 ? void 0 : drag.isEnabled(props)) || (layout === null || layout === void 0 ? void 0 : layout.isEnabled(props))\n            ? combined.MeasureLayout\n            : undefined,\n        ProjectionNode: combined.ProjectionNode,\n    };\n}\n\nexport { createRendererMotionComponent };\n","/**\n * We keep these listed separately as we use the lowercase tag names as part\n * of the runtime bundle to detect SVG components\n */\nconst lowercaseSVGElements = [\n    \"animate\",\n    \"circle\",\n    \"defs\",\n    \"desc\",\n    \"ellipse\",\n    \"g\",\n    \"image\",\n    \"line\",\n    \"filter\",\n    \"marker\",\n    \"mask\",\n    \"metadata\",\n    \"path\",\n    \"pattern\",\n    \"polygon\",\n    \"polyline\",\n    \"rect\",\n    \"stop\",\n    \"switch\",\n    \"symbol\",\n    \"svg\",\n    \"text\",\n    \"tspan\",\n    \"use\",\n    \"view\",\n];\n\nexport { lowercaseSVGElements };\n","import { lowercaseSVGElements } from '../../svg/lowercase-elements.mjs';\n\nfunction isSVGComponent(Component) {\n    if (\n    /**\n     * If it's not a string, it's a custom React component. Currently we only support\n     * HTML custom React components.\n     */\n    typeof Component !== \"string\" ||\n        /**\n         * If it contains a dash, the element is a custom HTML webcomponent.\n         */\n        Component.includes(\"-\")) {\n        return false;\n    }\n    else if (\n    /**\n     * If it's in our list of lowercase SVG tags, it's an SVG component\n     */\n    lowercaseSVGElements.indexOf(Component) > -1 ||\n        /**\n         * If it contains a capital letter, it's an SVG component\n         */\n        /[A-Z]/u.test(Component)) {\n        return true;\n    }\n    return false;\n}\n\nexport { isSVGComponent };\n","function renderHTML(element, { style, vars }, styleProp, projection) {\n    Object.assign(element.style, style, projection && projection.getProjectionStyles(styleProp));\n    // Loop over any CSS variables and assign those.\n    for (const key in vars) {\n        element.style.setProperty(key, vars[key]);\n    }\n}\n\nexport { renderHTML };\n","/**\n * A set of attribute names that are always read/written as camel case.\n */\nconst camelCaseAttributes = new Set([\n    \"baseFrequency\",\n    \"diffuseConstant\",\n    \"kernelMatrix\",\n    \"kernelUnitLength\",\n    \"keySplines\",\n    \"keyTimes\",\n    \"limitingConeAngle\",\n    \"markerHeight\",\n    \"markerWidth\",\n    \"numOctaves\",\n    \"targetX\",\n    \"targetY\",\n    \"surfaceScale\",\n    \"specularConstant\",\n    \"specularExponent\",\n    \"stdDeviation\",\n    \"tableValues\",\n    \"viewBox\",\n    \"gradientTransform\",\n    \"pathLength\",\n    \"startOffset\",\n    \"textLength\",\n    \"lengthAdjust\",\n]);\n\nexport { camelCaseAttributes };\n","import { camelToDash } from '../../dom/utils/camel-to-dash.mjs';\nimport { renderHTML } from '../../html/utils/render.mjs';\nimport { camelCaseAttributes } from './camel-case-attrs.mjs';\n\nfunction renderSVG(element, renderState, _styleProp, projection) {\n    renderHTML(element, renderState, undefined, projection);\n    for (const key in renderState.attrs) {\n        element.setAttribute(!camelCaseAttributes.has(key) ? camelToDash(key) : key, renderState.attrs[key]);\n    }\n}\n\nexport { renderSVG };\n","import { scaleCorrectors } from '../../projection/styles/scale-correction.mjs';\nimport { transformProps } from '../../render/html/utils/transform.mjs';\n\nfunction isForcedMotionValue(key, { layout, layoutId }) {\n    return (transformProps.has(key) ||\n        key.startsWith(\"origin\") ||\n        ((layout || layoutId !== undefined) &&\n            (!!scaleCorrectors[key] || key === \"opacity\")));\n}\n\nexport { isForcedMotionValue };\n","import { isForcedMotionValue } from '../../../motion/utils/is-forced-motion-value.mjs';\nimport { isMotionValue } from '../../../value/utils/is-motion-value.mjs';\n\nfunction scrapeMotionValuesFromProps(props, prevProps, visualElement) {\n    var _a;\n    const { style } = props;\n    const newValues = {};\n    for (const key in style) {\n        if (isMotionValue(style[key]) ||\n            (prevProps.style &&\n                isMotionValue(prevProps.style[key])) ||\n            isForcedMotionValue(key, props) ||\n            ((_a = visualElement === null || visualElement === void 0 ? void 0 : visualElement.getValue(key)) === null || _a === void 0 ? void 0 : _a.liveStyle) !== undefined) {\n            newValues[key] = style[key];\n        }\n    }\n    /**\n     * If the willChange style has been manually set as a string, set\n     * applyWillChange to false to prevent it from automatically being applied.\n     */\n    if (visualElement && style && typeof style.willChange === \"string\") {\n        visualElement.applyWillChange = false;\n    }\n    return newValues;\n}\n\nexport { scrapeMotionValuesFromProps };\n","import { isMotionValue } from '../../../value/utils/is-motion-value.mjs';\nimport { scrapeMotionValuesFromProps as scrapeMotionValuesFromProps$1 } from '../../html/utils/scrape-motion-values.mjs';\nimport { transformPropOrder } from '../../html/utils/transform.mjs';\n\nfunction scrapeMotionValuesFromProps(props, prevProps, visualElement) {\n    const newValues = scrapeMotionValuesFromProps$1(props, prevProps, visualElement);\n    for (const key in props) {\n        if (isMotionValue(props[key]) ||\n            isMotionValue(prevProps[key])) {\n            const targetKey = transformPropOrder.indexOf(key) !== -1\n                ? \"attr\" + key.charAt(0).toUpperCase() + key.substring(1)\n                : key;\n            newValues[targetKey] = props[key];\n        }\n    }\n    return newValues;\n}\n\nexport { scrapeMotionValuesFromProps };\n","import { useContext } from 'react';\nimport { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { resolveVariantFromProps } from '../../render/utils/resolve-variants.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { MotionContext } from '../../context/MotionContext/index.mjs';\nimport { isControllingVariants, isVariantNode } from '../../render/utils/is-controlling-variants.mjs';\nimport { getWillChangeName } from '../../value/use-will-change/get-will-change-name.mjs';\nimport { addUniqueItem } from '../../utils/array.mjs';\n\nfunction makeState({ applyWillChange = false, scrapeMotionValuesFromProps, createRenderState, onMount, }, props, context, presenceContext, isStatic) {\n    const state = {\n        latestValues: makeLatestValues(props, context, presenceContext, isStatic ? false : applyWillChange, scrapeMotionValuesFromProps),\n        renderState: createRenderState(),\n    };\n    if (onMount) {\n        state.mount = (instance) => onMount(props, instance, state);\n    }\n    return state;\n}\nconst makeUseVisualState = (config) => (props, isStatic) => {\n    const context = useContext(MotionContext);\n    const presenceContext = useContext(PresenceContext);\n    const make = () => makeState(config, props, context, presenceContext, isStatic);\n    return isStatic ? make() : useConstant(make);\n};\nfunction addWillChange(willChange, name) {\n    const memberName = getWillChangeName(name);\n    if (memberName) {\n        addUniqueItem(willChange, memberName);\n    }\n}\nfunction forEachDefinition(props, definition, callback) {\n    const list = Array.isArray(definition) ? definition : [definition];\n    for (let i = 0; i < list.length; i++) {\n        const resolved = resolveVariantFromProps(props, list[i]);\n        if (resolved) {\n            const { transitionEnd, transition, ...target } = resolved;\n            callback(target, transitionEnd);\n        }\n    }\n}\nfunction makeLatestValues(props, context, presenceContext, shouldApplyWillChange, scrapeMotionValues) {\n    var _a;\n    const values = {};\n    const willChange = [];\n    const applyWillChange = shouldApplyWillChange && ((_a = props.style) === null || _a === void 0 ? void 0 : _a.willChange) === undefined;\n    const motionValues = scrapeMotionValues(props, {});\n    for (const key in motionValues) {\n        values[key] = resolveMotionValue(motionValues[key]);\n    }\n    let { initial, animate } = props;\n    const isControllingVariants$1 = isControllingVariants(props);\n    const isVariantNode$1 = isVariantNode(props);\n    if (context &&\n        isVariantNode$1 &&\n        !isControllingVariants$1 &&\n        props.inherit !== false) {\n        if (initial === undefined)\n            initial = context.initial;\n        if (animate === undefined)\n            animate = context.animate;\n    }\n    let isInitialAnimationBlocked = presenceContext\n        ? presenceContext.initial === false\n        : false;\n    isInitialAnimationBlocked = isInitialAnimationBlocked || initial === false;\n    const variantToSet = isInitialAnimationBlocked ? animate : initial;\n    if (variantToSet &&\n        typeof variantToSet !== \"boolean\" &&\n        !isAnimationControls(variantToSet)) {\n        forEachDefinition(props, variantToSet, (target, transitionEnd) => {\n            for (const key in target) {\n                let valueTarget = target[key];\n                if (Array.isArray(valueTarget)) {\n                    /**\n                     * Take final keyframe if the initial animation is blocked because\n                     * we want to initialise at the end of that blocked animation.\n                     */\n                    const index = isInitialAnimationBlocked\n                        ? valueTarget.length - 1\n                        : 0;\n                    valueTarget = valueTarget[index];\n                }\n                if (valueTarget !== null) {\n                    values[key] = valueTarget;\n                }\n            }\n            for (const key in transitionEnd) {\n                values[key] = transitionEnd[key];\n            }\n        });\n    }\n    // Add animating values to will-change\n    if (applyWillChange) {\n        if (animate && initial !== false && !isAnimationControls(animate)) {\n            forEachDefinition(props, animate, (target) => {\n                for (const key in target) {\n                    addWillChange(willChange, key);\n                }\n            });\n        }\n        if (willChange.length) {\n            values.willChange = willChange.join(\",\");\n        }\n    }\n    return values;\n}\n\nexport { makeUseVisualState };\n","const createHtmlRenderState = () => ({\n    style: {},\n    transform: {},\n    transformOrigin: {},\n    vars: {},\n});\n\nexport { createHtmlRenderState };\n","import { createHtmlRenderState } from '../../html/utils/create-render-state.mjs';\n\nconst createSvgRenderState = () => ({\n    ...createHtmlRenderState(),\n    attrs: {},\n});\n\nexport { createSvgRenderState };\n","/**\n * Provided a value and a ValueType, returns the value as that value type.\n */\nconst getValueAsType = (value, type) => {\n    return type && typeof value === \"number\"\n        ? type.transform(value)\n        : value;\n};\n\nexport { getValueAsType };\n","import { transformPropOrder } from './transform.mjs';\nimport { getValueAsType } from '../../dom/value-types/get-as-type.mjs';\nimport { numberValueTypes } from '../../dom/value-types/number.mjs';\n\nconst translateAlias = {\n    x: \"translateX\",\n    y: \"translateY\",\n    z: \"translateZ\",\n    transformPerspective: \"perspective\",\n};\nconst numTransforms = transformPropOrder.length;\n/**\n * Build a CSS transform style from individual x/y/scale etc properties.\n *\n * This outputs with a default order of transforms/scales/rotations, this can be customised by\n * providing a transformTemplate function.\n */\nfunction buildTransform(latestValues, transform, transformTemplate) {\n    // The transform string we're going to build into.\n    let transformString = \"\";\n    let transformIsDefault = true;\n    /**\n     * Loop over all possible transforms in order, adding the ones that\n     * are present to the transform string.\n     */\n    for (let i = 0; i < numTransforms; i++) {\n        const key = transformPropOrder[i];\n        const value = latestValues[key];\n        if (value === undefined)\n            continue;\n        let valueIsDefault = true;\n        if (typeof value === \"number\") {\n            valueIsDefault = value === (key.startsWith(\"scale\") ? 1 : 0);\n        }\n        else {\n            valueIsDefault = parseFloat(value) === 0;\n        }\n        if (!valueIsDefault || transformTemplate) {\n            const valueAsType = getValueAsType(value, numberValueTypes[key]);\n            if (!valueIsDefault) {\n                transformIsDefault = false;\n                const transformName = translateAlias[key] || key;\n                transformString += `${transformName}(${valueAsType}) `;\n            }\n            if (transformTemplate) {\n                transform[key] = valueAsType;\n            }\n        }\n    }\n    transformString = transformString.trim();\n    // If we have a custom `transform` template, pass our transform values and\n    // generated transformString to that before returning\n    if (transformTemplate) {\n        transformString = transformTemplate(transform, transformIsDefault ? \"\" : transformString);\n    }\n    else if (transformIsDefault) {\n        transformString = \"none\";\n    }\n    return transformString;\n}\n\nexport { buildTransform };\n","import { buildTransform } from './build-transform.mjs';\nimport { isCSSVariableName } from '../../dom/utils/is-css-variable.mjs';\nimport { transformProps } from './transform.mjs';\nimport { getValueAsType } from '../../dom/value-types/get-as-type.mjs';\nimport { numberValueTypes } from '../../dom/value-types/number.mjs';\n\nfunction buildHTMLStyles(state, latestValues, transformTemplate) {\n    const { style, vars, transformOrigin } = state;\n    // Track whether we encounter any transform or transformOrigin values.\n    let hasTransform = false;\n    let hasTransformOrigin = false;\n    /**\n     * Loop over all our latest animated values and decide whether to handle them\n     * as a style or CSS variable.\n     *\n     * Transforms and transform origins are kept separately for further processing.\n     */\n    for (const key in latestValues) {\n        const value = latestValues[key];\n        if (transformProps.has(key)) {\n            // If this is a transform, flag to enable further transform processing\n            hasTransform = true;\n            continue;\n        }\n        else if (isCSSVariableName(key)) {\n            vars[key] = value;\n            continue;\n        }\n        else {\n            // Convert the value to its default value type, ie 0 -> \"0px\"\n            const valueAsType = getValueAsType(value, numberValueTypes[key]);\n            if (key.startsWith(\"origin\")) {\n                // If this is a transform origin, flag and enable further transform-origin processing\n                hasTransformOrigin = true;\n                transformOrigin[key] =\n                    valueAsType;\n            }\n            else {\n                style[key] = valueAsType;\n            }\n        }\n    }\n    if (!latestValues.transform) {\n        if (hasTransform || transformTemplate) {\n            style.transform = buildTransform(latestValues, state.transform, transformTemplate);\n        }\n        else if (style.transform) {\n            /**\n             * If we have previously created a transform but currently don't have any,\n             * reset transform style to none.\n             */\n            style.transform = \"none\";\n        }\n    }\n    /**\n     * Build a transformOrigin style. Uses the same defaults as the browser for\n     * undefined origins.\n     */\n    if (hasTransformOrigin) {\n        const { originX = \"50%\", originY = \"50%\", originZ = 0, } = transformOrigin;\n        style.transformOrigin = `${originX} ${originY} ${originZ}`;\n    }\n}\n\nexport { buildHTMLStyles };\n","import { px } from '../../../value/types/numbers/units.mjs';\n\nfunction calcOrigin(origin, offset, size) {\n    return typeof origin === \"string\"\n        ? origin\n        : px.transform(offset + size * origin);\n}\n/**\n * The SVG transform origin defaults are different to CSS and is less intuitive,\n * so we use the measured dimensions of the SVG to reconcile these.\n */\nfunction calcSVGTransformOrigin(dimensions, originX, originY) {\n    const pxOriginX = calcOrigin(originX, dimensions.x, dimensions.width);\n    const pxOriginY = calcOrigin(originY, dimensions.y, dimensions.height);\n    return `${pxOriginX} ${pxOriginY}`;\n}\n\nexport { calcSVGTransformOrigin };\n","import { px } from '../../../value/types/numbers/units.mjs';\n\nconst dashKeys = {\n    offset: \"stroke-dashoffset\",\n    array: \"stroke-dasharray\",\n};\nconst camelKeys = {\n    offset: \"strokeDashoffset\",\n    array: \"strokeDasharray\",\n};\n/**\n * Build SVG path properties. Uses the path's measured length to convert\n * our custom pathLength, pathSpacing and pathOffset into stroke-dashoffset\n * and stroke-dasharray attributes.\n *\n * This function is mutative to reduce per-frame GC.\n */\nfunction buildSVGPath(attrs, length, spacing = 1, offset = 0, useDashCase = true) {\n    // Normalise path length by setting SVG attribute pathLength to 1\n    attrs.pathLength = 1;\n    // We use dash case when setting attributes directly to the DOM node and camel case\n    // when defining props on a React component.\n    const keys = useDashCase ? dashKeys : camelKeys;\n    // Build the dash offset\n    attrs[keys.offset] = px.transform(-offset);\n    // Build the dash array\n    const pathLength = px.transform(length);\n    const pathSpacing = px.transform(spacing);\n    attrs[keys.array] = `${pathLength} ${pathSpacing}`;\n}\n\nexport { buildSVGPath };\n","import { buildHTMLStyles } from '../../html/utils/build-styles.mjs';\nimport { calcSVGTransformOrigin } from './transform-origin.mjs';\nimport { buildSVGPath } from './path.mjs';\n\n/**\n * Build SVG visual attrbutes, like cx and style.transform\n */\nfunction buildSVGAttrs(state, { attrX, attrY, attrScale, originX, originY, pathLength, pathSpacing = 1, pathOffset = 0, \n// This is object creation, which we try to avoid per-frame.\n...latest }, isSVGTag, transformTemplate) {\n    buildHTMLStyles(state, latest, transformTemplate);\n    /**\n     * For svg tags we just want to make sure viewBox is animatable and treat all the styles\n     * as normal HTML tags.\n     */\n    if (isSVGTag) {\n        if (state.style.viewBox) {\n            state.attrs.viewBox = state.style.viewBox;\n        }\n        return;\n    }\n    state.attrs = state.style;\n    state.style = {};\n    const { attrs, style, dimensions } = state;\n    /**\n     * However, we apply transforms as CSS transforms. So if we detect a transform we take it from attrs\n     * and copy it into style.\n     */\n    if (attrs.transform) {\n        if (dimensions)\n            style.transform = attrs.transform;\n        delete attrs.transform;\n    }\n    // Parse transformOrigin\n    if (dimensions &&\n        (originX !== undefined || originY !== undefined || style.transform)) {\n        style.transformOrigin = calcSVGTransformOrigin(dimensions, originX !== undefined ? originX : 0.5, originY !== undefined ? originY : 0.5);\n    }\n    // Render attrX/attrY/attrScale as attributes\n    if (attrX !== undefined)\n        attrs.x = attrX;\n    if (attrY !== undefined)\n        attrs.y = attrY;\n    if (attrScale !== undefined)\n        attrs.scale = attrScale;\n    // Build SVG path if one has been defined\n    if (pathLength !== undefined) {\n        buildSVGPath(attrs, pathLength, pathSpacing, pathOffset, false);\n    }\n}\n\nexport { buildSVGAttrs };\n","const isSVGTag = (tag) => typeof tag === \"string\" && tag.toLowerCase() === \"svg\";\n\nexport { isSVGTag };\n","import { renderSVG } from './utils/render.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { makeUseVisualState } from '../../motion/utils/use-visual-state.mjs';\nimport { createSvgRenderState } from './utils/create-render-state.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\nconst svgMotionConfig = {\n    useVisualState: makeUseVisualState({\n        scrapeMotionValuesFromProps: scrapeMotionValuesFromProps,\n        createRenderState: createSvgRenderState,\n        onMount: (props, instance, { renderState, latestValues }) => {\n            frame.read(() => {\n                try {\n                    renderState.dimensions =\n                        typeof instance.getBBox ===\n                            \"function\"\n                            ? instance.getBBox()\n                            : instance.getBoundingClientRect();\n                }\n                catch (e) {\n                    // Most likely trying to measure an unrendered element under Firefox\n                    renderState.dimensions = {\n                        x: 0,\n                        y: 0,\n                        width: 0,\n                        height: 0,\n                    };\n                }\n            });\n            frame.render(() => {\n                buildSVGAttrs(renderState, latestValues, isSVGTag(instance.tagName), props.transformTemplate);\n                renderSVG(instance, renderState);\n            });\n        },\n    }),\n};\n\nexport { svgMotionConfig };\n","import { makeUseVisualState } from '../../motion/utils/use-visual-state.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { createHtmlRenderState } from './utils/create-render-state.mjs';\n\nconst htmlMotionConfig = {\n    useVisualState: makeUseVisualState({\n        applyWillChange: true,\n        scrapeMotionValuesFromProps,\n        createRenderState: createHtmlRenderState,\n    }),\n};\n\nexport { htmlMotionConfig };\n","import { useMemo } from 'react';\nimport { isForcedMotionValue } from '../../motion/utils/is-forced-motion-value.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\nimport { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { createHtmlRenderState } from './utils/create-render-state.mjs';\n\nfunction copyRawValuesOnly(target, source, props) {\n    for (const key in source) {\n        if (!isMotionValue(source[key]) && !isForcedMotionValue(key, props)) {\n            target[key] = source[key];\n        }\n    }\n}\nfunction useInitialMotionValues({ transformTemplate }, visualState) {\n    return useMemo(() => {\n        const state = createHtmlRenderState();\n        buildHTMLStyles(state, visualState, transformTemplate);\n        return Object.assign({}, state.vars, state.style);\n    }, [visualState]);\n}\nfunction useStyle(props, visualState) {\n    const styleProp = props.style || {};\n    const style = {};\n    /**\n     * Copy non-Motion Values straight into style\n     */\n    copyRawValuesOnly(style, styleProp, props);\n    Object.assign(style, useInitialMotionValues(props, visualState));\n    return style;\n}\nfunction useHTMLProps(props, visualState) {\n    // The `any` isn't ideal but it is the type of createElement props argument\n    const htmlProps = {};\n    const style = useStyle(props, visualState);\n    if (props.drag && props.dragListener !== false) {\n        // Disable the ghost element when a user drags\n        htmlProps.draggable = false;\n        // Disable text selection\n        style.userSelect =\n            style.WebkitUserSelect =\n                style.WebkitTouchCallout =\n                    \"none\";\n        // Disable scrolling on the draggable direction\n        style.touchAction =\n            props.drag === true\n                ? \"none\"\n                : `pan-${props.drag === \"x\" ? \"y\" : \"x\"}`;\n    }\n    if (props.tabIndex === undefined &&\n        (props.onTap || props.onTapStart || props.whileTap)) {\n        htmlProps.tabIndex = 0;\n    }\n    htmlProps.style = style;\n    return htmlProps;\n}\n\nexport { copyRawValuesOnly, useHTMLProps };\n","/**\n * A list of all valid MotionProps.\n *\n * @privateRemarks\n * This doesn't throw if a `MotionProp` name is missing - it should.\n */\nconst validMotionProps = new Set([\n    \"animate\",\n    \"exit\",\n    \"variants\",\n    \"initial\",\n    \"style\",\n    \"values\",\n    \"variants\",\n    \"transition\",\n    \"transformTemplate\",\n    \"custom\",\n    \"inherit\",\n    \"onBeforeLayoutMeasure\",\n    \"onAnimationStart\",\n    \"onAnimationComplete\",\n    \"onUpdate\",\n    \"onDragStart\",\n    \"onDrag\",\n    \"onDragEnd\",\n    \"onMeasureDragConstraints\",\n    \"onDirectionLock\",\n    \"onDragTransitionEnd\",\n    \"_dragX\",\n    \"_dragY\",\n    \"onHoverStart\",\n    \"onHoverEnd\",\n    \"onViewportEnter\",\n    \"onViewportLeave\",\n    \"globalTapTarget\",\n    \"ignoreStrict\",\n    \"viewport\",\n]);\n/**\n * Check whether a prop name is a valid `MotionProp` key.\n *\n * @param key - Name of the property to check\n * @returns `true` is key is a valid `MotionProp`.\n *\n * @public\n */\nfunction isValidMotionProp(key) {\n    return (key.startsWith(\"while\") ||\n        (key.startsWith(\"drag\") && key !== \"draggable\") ||\n        key.startsWith(\"layout\") ||\n        key.startsWith(\"onTap\") ||\n        key.startsWith(\"onPan\") ||\n        key.startsWith(\"onLayout\") ||\n        validMotionProps.has(key));\n}\n\nexport { isValidMotionProp };\n","import { isValidMotionProp } from '../../../motion/utils/valid-prop.mjs';\n\nlet shouldForward = (key) => !isValidMotionProp(key);\nfunction loadExternalIsValidProp(isValidProp) {\n    if (!isValidProp)\n        return;\n    // Explicitly filter our events\n    shouldForward = (key) => key.startsWith(\"on\") ? !isValidMotionProp(key) : isValidProp(key);\n}\n/**\n * Emotion and Styled Components both allow users to pass through arbitrary props to their components\n * to dynamically generate CSS. They both use the `@emotion/is-prop-valid` package to determine which\n * of these should be passed to the underlying DOM node.\n *\n * However, when styling a Motion component `styled(motion.div)`, both packages pass through *all* props\n * as it's seen as an arbitrary component rather than a DOM node. Motion only allows arbitrary props\n * passed through the `custom` prop so it doesn't *need* the payload or computational overhead of\n * `@emotion/is-prop-valid`, however to fix this problem we need to use it.\n *\n * By making it an optionalDependency we can offer this functionality only in the situations where it's\n * actually required.\n */\ntry {\n    /**\n     * We attempt to import this package but require won't be defined in esm environments, in that case\n     * isPropValid will have to be provided via `MotionContext`. In a 6.0.0 this should probably be removed\n     * in favour of explicit injection.\n     */\n    loadExternalIsValidProp(require(\"@emotion/is-prop-valid\").default);\n}\ncatch (_a) {\n    // We don't need to actually do anything here - the fallback is the existing `isPropValid`.\n}\nfunction filterProps(props, isDom, forwardMotionProps) {\n    const filteredProps = {};\n    for (const key in props) {\n        /**\n         * values is considered a valid prop by Emotion, so if it's present\n         * this will be rendered out to the DOM unless explicitly filtered.\n         *\n         * We check the type as it could be used with the `feColorMatrix`\n         * element, which we support.\n         */\n        if (key === \"values\" && typeof props.values === \"object\")\n            continue;\n        if (shouldForward(key) ||\n            (forwardMotionProps === true && isValidMotionProp(key)) ||\n            (!isDom && !isValidMotionProp(key)) ||\n            // If trying to use native HTML drag events, forward drag listeners\n            (props[\"draggable\"] &&\n                key.startsWith(\"onDrag\"))) {\n            filteredProps[key] =\n                props[key];\n        }\n    }\n    return filteredProps;\n}\n\nexport { filterProps, loadExternalIsValidProp };\n","import { useMemo } from 'react';\nimport { copyRawValuesOnly } from '../html/use-props.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { createSvgRenderState } from './utils/create-render-state.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\n\nfunction useSVGProps(props, visualState, _isStatic, Component) {\n    const visualProps = useMemo(() => {\n        const state = createSvgRenderState();\n        buildSVGAttrs(state, visualState, isSVGTag(Component), props.transformTemplate);\n        return {\n            ...state.attrs,\n            style: { ...state.style },\n        };\n    }, [visualState]);\n    if (props.style) {\n        const rawStyles = {};\n        copyRawValuesOnly(rawStyles, props.style, props);\n        visualProps.style = { ...rawStyles, ...visualProps.style };\n    }\n    return visualProps;\n}\n\nexport { useSVGProps };\n","import { Fragment, useMemo, createElement } from 'react';\nimport { useHTMLProps } from '../html/use-props.mjs';\nimport { filterProps } from './utils/filter-props.mjs';\nimport { isSVGComponent } from './utils/is-svg-component.mjs';\nimport { useSVGProps } from '../svg/use-props.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction createUseRender(forwardMotionProps = false) {\n    const useRender = (Component, props, ref, { latestValues }, isStatic) => {\n        const useVisualProps = isSVGComponent(Component)\n            ? useSVGProps\n            : useHTMLProps;\n        const visualProps = useVisualProps(props, latestValues, isStatic, Component);\n        const filteredProps = filterProps(props, typeof Component === \"string\", forwardMotionProps);\n        const elementProps = Component !== Fragment\n            ? { ...filteredProps, ...visualProps, ref }\n            : {};\n        /**\n         * If component has been handed a motion value as its child,\n         * memoise its initial value and render that. Subsequent updates\n         * will be handled by the onChange handler\n         */\n        const { children } = props;\n        const renderedChildren = useMemo(() => (isMotionValue(children) ? children.get() : children), [children]);\n        return createElement(Component, {\n            ...elementProps,\n            children: renderedChildren,\n        });\n    };\n    return useRender;\n}\n\nexport { createUseRender };\n","import { createRendererMotionComponent } from '../../motion/index.mjs';\nimport { isSVGComponent } from '../dom/utils/is-svg-component.mjs';\nimport { svgMotionConfig } from '../svg/config-motion.mjs';\nimport { htmlMotionConfig } from '../html/config-motion.mjs';\nimport { createUseRender } from '../dom/use-render.mjs';\n\nfunction createMotionComponentFactory(preloadedFeatures, createVisualElement) {\n    return function createMotionComponent(Component, { forwardMotionProps } = { forwardMotionProps: false }) {\n        const baseConfig = isSVGComponent(Component)\n            ? svgMotionConfig\n            : htmlMotionConfig;\n        const config = {\n            ...baseConfig,\n            preloadedFeatures,\n            useRender: createUseRender(forwardMotionProps),\n            createVisualElement,\n            Component,\n        };\n        return createRendererMotionComponent(config);\n    };\n}\n\nexport { createMotionComponentFactory };\n","// Does this device prefer reduced motion? Returns `null` server-side.\nconst prefersReducedMotion = { current: null };\nconst hasReducedMotionListener = { current: false };\n\nexport { hasReducedMotionListener, prefersReducedMotion };\n","import { isBrowser } from '../is-browser.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from './state.mjs';\n\nfunction initPrefersReducedMotion() {\n    hasReducedMotionListener.current = true;\n    if (!isBrowser)\n        return;\n    if (window.matchMedia) {\n        const motionMediaQuery = window.matchMedia(\"(prefers-reduced-motion)\");\n        const setReducedMotionPreferences = () => (prefersReducedMotion.current = motionMediaQuery.matches);\n        motionMediaQuery.addListener(setReducedMotionPreferences);\n        setReducedMotionPreferences();\n    }\n    else {\n        prefersReducedMotion.current = false;\n    }\n}\n\nexport { initPrefersReducedMotion };\n","import { warnOnce } from '../../utils/warn-once.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction updateMotionValuesFromProps(element, next, prev) {\n    for (const key in next) {\n        const nextValue = next[key];\n        const prevValue = prev[key];\n        if (isMotionValue(nextValue)) {\n            /**\n             * If this is a motion value found in props or style, we want to add it\n             * to our visual element's motion value map.\n             */\n            element.addValue(key, nextValue);\n            /**\n             * Check the version of the incoming motion value with this version\n             * and warn against mismatches.\n             */\n            if (process.env.NODE_ENV === \"development\") {\n                warnOnce(nextValue.version === \"11.5.4\", `Attempting to mix Framer Motion versions ${nextValue.version} with 11.5.4 may not work as expected.`);\n            }\n        }\n        else if (isMotionValue(prevValue)) {\n            /**\n             * If we're swapping from a motion value to a static value,\n             * create a new motion value from that\n             */\n            element.addValue(key, motionValue(nextValue, { owner: element }));\n        }\n        else if (prevValue !== nextValue) {\n            /**\n             * If this is a flat value that has changed, update the motion value\n             * or create one if it doesn't exist. We only want to do this if we're\n             * not handling the value with our animation state.\n             */\n            if (element.hasValue(key)) {\n                const existingValue = element.getValue(key);\n                if (existingValue.liveStyle === true) {\n                    existingValue.jump(nextValue);\n                }\n                else if (!existingValue.hasAnimated) {\n                    existingValue.set(nextValue);\n                }\n            }\n            else {\n                const latestValue = element.getStaticValue(key);\n                element.addValue(key, motionValue(latestValue !== undefined ? latestValue : nextValue, { owner: element }));\n            }\n        }\n    }\n    // Handle removed values\n    for (const key in prev) {\n        if (next[key] === undefined)\n            element.removeValue(key);\n    }\n    return next;\n}\n\nexport { updateMotionValuesFromProps };\n","const visualElementStore = new WeakMap();\n\nexport { visualElementStore };\n","import { color } from '../../../value/types/color/index.mjs';\nimport { complex } from '../../../value/types/complex/index.mjs';\nimport { dimensionValueTypes } from './dimensions.mjs';\nimport { testValueType } from './test.mjs';\n\n/**\n * A list of all ValueTypes\n */\nconst valueTypes = [...dimensionValueTypes, color, complex];\n/**\n * Tests a value against the list of ValueTypes\n */\nconst findValueType = (v) => valueTypes.find(testValueType(v));\n\nexport { findValueType };\n","import { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { transformProps } from './html/utils/transform.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { isVariantLabel } from './utils/is-variant-label.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { variantProps } from './utils/variant-props.mjs';\nimport { visualElementStore } from './store.mjs';\nimport { KeyframeResolver } from './utils/KeyframesResolver.mjs';\nimport { isNumericalString } from '../utils/is-numerical-string.mjs';\nimport { isZeroValueString } from '../utils/is-zero-value-string.mjs';\nimport { findValueType } from './dom/value-types/find.mjs';\nimport { complex } from '../value/types/complex/index.mjs';\nimport { getAnimatableNone } from './dom/value-types/animatable-none.mjs';\nimport { createBox } from '../projection/geometry/models.mjs';\nimport { frame, cancelFrame } from '../frameloop/frame.mjs';\n\nconst propEventHandlers = [\n    \"AnimationStart\",\n    \"AnimationComplete\",\n    \"Update\",\n    \"BeforeLayoutMeasure\",\n    \"LayoutMeasure\",\n    \"LayoutAnimationStart\",\n    \"LayoutAnimationComplete\",\n];\nconst numVariantProps = variantProps.length;\n/**\n * A VisualElement is an imperative abstraction around UI elements such as\n * HTMLElement, SVGElement, Three.Object3D etc.\n */\nclass VisualElement {\n    /**\n     * This method takes React props and returns found MotionValues. For example, HTML\n     * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\n     *\n     * This isn't an abstract method as it needs calling in the constructor, but it is\n     * intended to be one.\n     */\n    scrapeMotionValuesFromProps(_props, _prevProps, _visualElement) {\n        return {};\n    }\n    constructor({ parent, props, presenceContext, reducedMotionConfig, blockInitialAnimation, visualState, }, options = {}) {\n        /**\n         * If true, will-change will be applied to the element. Only HTMLVisualElements\n         * currently support this.\n         */\n        this.applyWillChange = false;\n        /**\n         * A reference to the current underlying Instance, e.g. a HTMLElement\n         * or Three.Mesh etc.\n         */\n        this.current = null;\n        /**\n         * A set containing references to this VisualElement's children.\n         */\n        this.children = new Set();\n        /**\n         * Determine what role this visual element should take in the variant tree.\n         */\n        this.isVariantNode = false;\n        this.isControllingVariants = false;\n        /**\n         * Decides whether this VisualElement should animate in reduced motion\n         * mode.\n         *\n         * TODO: This is currently set on every individual VisualElement but feels\n         * like it could be set globally.\n         */\n        this.shouldReduceMotion = null;\n        /**\n         * A map of all motion values attached to this visual element. Motion\n         * values are source of truth for any given animated value. A motion\n         * value might be provided externally by the component via props.\n         */\n        this.values = new Map();\n        this.KeyframeResolver = KeyframeResolver;\n        /**\n         * Cleanup functions for active features (hover/tap/exit etc)\n         */\n        this.features = {};\n        /**\n         * A map of every subscription that binds the provided or generated\n         * motion values onChange listeners to this visual element.\n         */\n        this.valueSubscriptions = new Map();\n        /**\n         * A reference to the previously-provided motion values as returned\n         * from scrapeMotionValuesFromProps. We use the keys in here to determine\n         * if any motion values need to be removed after props are updated.\n         */\n        this.prevMotionValues = {};\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        /**\n         * An object containing an unsubscribe function for each prop event subscription.\n         * For example, every \"Update\" event can have multiple subscribers via\n         * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\n         */\n        this.propEventSubscriptions = {};\n        this.notifyUpdate = () => this.notify(\"Update\", this.latestValues);\n        this.render = () => {\n            this.isRenderScheduled = false;\n            if (!this.current)\n                return;\n            this.triggerBuild();\n            this.renderInstance(this.current, this.renderState, this.props.style, this.projection);\n        };\n        this.isRenderScheduled = false;\n        this.scheduleRender = () => {\n            if (!this.isRenderScheduled) {\n                this.isRenderScheduled = true;\n                frame.render(this.render, false, true);\n            }\n        };\n        const { latestValues, renderState } = visualState;\n        this.latestValues = latestValues;\n        this.baseTarget = { ...latestValues };\n        this.initialValues = props.initial ? { ...latestValues } : {};\n        this.renderState = renderState;\n        this.parent = parent;\n        this.props = props;\n        this.presenceContext = presenceContext;\n        this.depth = parent ? parent.depth + 1 : 0;\n        this.reducedMotionConfig = reducedMotionConfig;\n        this.options = options;\n        this.blockInitialAnimation = Boolean(blockInitialAnimation);\n        this.isControllingVariants = isControllingVariants(props);\n        this.isVariantNode = isVariantNode(props);\n        if (this.isVariantNode) {\n            this.variantChildren = new Set();\n        }\n        this.manuallyAnimateOnMount = Boolean(parent && parent.current);\n        /**\n         * Any motion values that are provided to the element when created\n         * aren't yet bound to the element, as this would technically be impure.\n         * However, we iterate through the motion values and set them to the\n         * initial values for this component.\n         *\n         * TODO: This is impure and we should look at changing this to run on mount.\n         * Doing so will break some tests but this isn't necessarily a breaking change,\n         * more a reflection of the test.\n         */\n        const { willChange, ...initialMotionValues } = this.scrapeMotionValuesFromProps(props, {}, this);\n        for (const key in initialMotionValues) {\n            const value = initialMotionValues[key];\n            if (latestValues[key] !== undefined && isMotionValue(value)) {\n                value.set(latestValues[key], false);\n            }\n        }\n    }\n    mount(instance) {\n        this.current = instance;\n        visualElementStore.set(instance, this);\n        if (this.projection && !this.projection.instance) {\n            this.projection.mount(instance);\n        }\n        if (this.parent && this.isVariantNode && !this.isControllingVariants) {\n            this.removeFromVariantTree = this.parent.addVariantChild(this);\n        }\n        this.values.forEach((value, key) => this.bindToMotionValue(key, value));\n        if (!hasReducedMotionListener.current) {\n            initPrefersReducedMotion();\n        }\n        this.shouldReduceMotion =\n            this.reducedMotionConfig === \"never\"\n                ? false\n                : this.reducedMotionConfig === \"always\"\n                    ? true\n                    : prefersReducedMotion.current;\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(this.shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n        }\n        if (this.parent)\n            this.parent.children.add(this);\n        this.update(this.props, this.presenceContext);\n    }\n    unmount() {\n        visualElementStore.delete(this.current);\n        this.projection && this.projection.unmount();\n        cancelFrame(this.notifyUpdate);\n        cancelFrame(this.render);\n        this.valueSubscriptions.forEach((remove) => remove());\n        this.valueSubscriptions.clear();\n        this.removeFromVariantTree && this.removeFromVariantTree();\n        this.parent && this.parent.children.delete(this);\n        for (const key in this.events) {\n            this.events[key].clear();\n        }\n        for (const key in this.features) {\n            const feature = this.features[key];\n            if (feature) {\n                feature.unmount();\n                feature.isMounted = false;\n            }\n        }\n        this.current = null;\n    }\n    bindToMotionValue(key, value) {\n        if (this.valueSubscriptions.has(key)) {\n            this.valueSubscriptions.get(key)();\n        }\n        const valueIsTransform = transformProps.has(key);\n        const removeOnChange = value.on(\"change\", (latestValue) => {\n            this.latestValues[key] = latestValue;\n            this.props.onUpdate && frame.preRender(this.notifyUpdate);\n            if (valueIsTransform && this.projection) {\n                this.projection.isTransformDirty = true;\n            }\n        });\n        const removeOnRenderRequest = value.on(\"renderRequest\", this.scheduleRender);\n        let removeSyncCheck;\n        if (window.MotionCheckAppearSync) {\n            removeSyncCheck = window.MotionCheckAppearSync(this, key, value);\n        }\n        this.valueSubscriptions.set(key, () => {\n            removeOnChange();\n            removeOnRenderRequest();\n            if (removeSyncCheck)\n                removeSyncCheck();\n            if (value.owner)\n                value.stop();\n        });\n    }\n    sortNodePosition(other) {\n        /**\n         * If these nodes aren't even of the same type we can't compare their depth.\n         */\n        if (!this.current ||\n            !this.sortInstanceNodePosition ||\n            this.type !== other.type) {\n            return 0;\n        }\n        return this.sortInstanceNodePosition(this.current, other.current);\n    }\n    updateFeatures() {\n        let key = \"animation\";\n        for (key in featureDefinitions) {\n            const featureDefinition = featureDefinitions[key];\n            if (!featureDefinition)\n                continue;\n            const { isEnabled, Feature: FeatureConstructor } = featureDefinition;\n            /**\n             * If this feature is enabled but not active, make a new instance.\n             */\n            if (!this.features[key] &&\n                FeatureConstructor &&\n                isEnabled(this.props)) {\n                this.features[key] = new FeatureConstructor(this);\n            }\n            /**\n             * If we have a feature, mount or update it.\n             */\n            if (this.features[key]) {\n                const feature = this.features[key];\n                if (feature.isMounted) {\n                    feature.update();\n                }\n                else {\n                    feature.mount();\n                    feature.isMounted = true;\n                }\n            }\n        }\n    }\n    triggerBuild() {\n        this.build(this.renderState, this.latestValues, this.props);\n    }\n    /**\n     * Measure the current viewport box with or without transforms.\n     * Only measures axis-aligned boxes, rotate and skew must be manually\n     * removed with a re-render to work.\n     */\n    measureViewportBox() {\n        return this.current\n            ? this.measureInstanceViewportBox(this.current, this.props)\n            : createBox();\n    }\n    getStaticValue(key) {\n        return this.latestValues[key];\n    }\n    setStaticValue(key, value) {\n        this.latestValues[key] = value;\n    }\n    /**\n     * Update the provided props. Ensure any newly-added motion values are\n     * added to our map, old ones removed, and listeners updated.\n     */\n    update(props, presenceContext) {\n        if (props.transformTemplate || this.props.transformTemplate) {\n            this.scheduleRender();\n        }\n        this.prevProps = this.props;\n        this.props = props;\n        this.prevPresenceContext = this.presenceContext;\n        this.presenceContext = presenceContext;\n        /**\n         * Update prop event handlers ie onAnimationStart, onAnimationComplete\n         */\n        for (let i = 0; i < propEventHandlers.length; i++) {\n            const key = propEventHandlers[i];\n            if (this.propEventSubscriptions[key]) {\n                this.propEventSubscriptions[key]();\n                delete this.propEventSubscriptions[key];\n            }\n            const listenerName = (\"on\" + key);\n            const listener = props[listenerName];\n            if (listener) {\n                this.propEventSubscriptions[key] = this.on(key, listener);\n            }\n        }\n        this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps, this), this.prevMotionValues);\n        if (this.handleChildMotionValue) {\n            this.handleChildMotionValue();\n        }\n    }\n    getProps() {\n        return this.props;\n    }\n    /**\n     * Returns the variant definition with a given name.\n     */\n    getVariant(name) {\n        return this.props.variants ? this.props.variants[name] : undefined;\n    }\n    /**\n     * Returns the defined default transition on this component.\n     */\n    getDefaultTransition() {\n        return this.props.transition;\n    }\n    getTransformPagePoint() {\n        return this.props.transformPagePoint;\n    }\n    getClosestVariantNode() {\n        return this.isVariantNode\n            ? this\n            : this.parent\n                ? this.parent.getClosestVariantNode()\n                : undefined;\n    }\n    getVariantContext(startAtParent = false) {\n        if (startAtParent) {\n            return this.parent ? this.parent.getVariantContext() : undefined;\n        }\n        if (!this.isControllingVariants) {\n            const context = this.parent\n                ? this.parent.getVariantContext() || {}\n                : {};\n            if (this.props.initial !== undefined) {\n                context.initial = this.props.initial;\n            }\n            return context;\n        }\n        const context = {};\n        for (let i = 0; i < numVariantProps; i++) {\n            const name = variantProps[i];\n            const prop = this.props[name];\n            if (isVariantLabel(prop) || prop === false) {\n                context[name] = prop;\n            }\n        }\n        return context;\n    }\n    /**\n     * Add a child visual element to our set of children.\n     */\n    addVariantChild(child) {\n        const closestVariantNode = this.getClosestVariantNode();\n        if (closestVariantNode) {\n            closestVariantNode.variantChildren &&\n                closestVariantNode.variantChildren.add(child);\n            return () => closestVariantNode.variantChildren.delete(child);\n        }\n    }\n    /**\n     * Add a motion value and bind it to this visual element.\n     */\n    addValue(key, value) {\n        // Remove existing value if it exists\n        const existingValue = this.values.get(key);\n        if (value !== existingValue) {\n            if (existingValue)\n                this.removeValue(key);\n            this.bindToMotionValue(key, value);\n            this.values.set(key, value);\n            this.latestValues[key] = value.get();\n        }\n    }\n    /**\n     * Remove a motion value and unbind any active subscriptions.\n     */\n    removeValue(key) {\n        this.values.delete(key);\n        const unsubscribe = this.valueSubscriptions.get(key);\n        if (unsubscribe) {\n            unsubscribe();\n            this.valueSubscriptions.delete(key);\n        }\n        delete this.latestValues[key];\n        this.removeValueFromRenderState(key, this.renderState);\n    }\n    /**\n     * Check whether we have a motion value for this key\n     */\n    hasValue(key) {\n        return this.values.has(key);\n    }\n    getValue(key, defaultValue) {\n        if (this.props.values && this.props.values[key]) {\n            return this.props.values[key];\n        }\n        let value = this.values.get(key);\n        if (value === undefined && defaultValue !== undefined) {\n            value = motionValue(defaultValue === null ? undefined : defaultValue, { owner: this });\n            this.addValue(key, value);\n        }\n        return value;\n    }\n    /**\n     * If we're trying to animate to a previously unencountered value,\n     * we need to check for it in our state and as a last resort read it\n     * directly from the instance (which might have performance implications).\n     */\n    readValue(key, target) {\n        var _a;\n        let value = this.latestValues[key] !== undefined || !this.current\n            ? this.latestValues[key]\n            : (_a = this.getBaseTargetFromProps(this.props, key)) !== null && _a !== void 0 ? _a : this.readValueFromInstance(this.current, key, this.options);\n        if (value !== undefined && value !== null) {\n            if (typeof value === \"string\" &&\n                (isNumericalString(value) || isZeroValueString(value))) {\n                // If this is a number read as a string, ie \"0\" or \"200\", convert it to a number\n                value = parseFloat(value);\n            }\n            else if (!findValueType(value) && complex.test(target)) {\n                value = getAnimatableNone(key, target);\n            }\n            this.setBaseTarget(key, isMotionValue(value) ? value.get() : value);\n        }\n        return isMotionValue(value) ? value.get() : value;\n    }\n    /**\n     * Set the base target to later animate back to. This is currently\n     * only hydrated on creation and when we first read a value.\n     */\n    setBaseTarget(key, value) {\n        this.baseTarget[key] = value;\n    }\n    /**\n     * Find the base target for a value thats been removed from all animation\n     * props.\n     */\n    getBaseTarget(key) {\n        var _a;\n        const { initial } = this.props;\n        let valueFromInitial;\n        if (typeof initial === \"string\" || typeof initial === \"object\") {\n            const variant = resolveVariantFromProps(this.props, initial, (_a = this.presenceContext) === null || _a === void 0 ? void 0 : _a.custom);\n            if (variant) {\n                valueFromInitial = variant[key];\n            }\n        }\n        /**\n         * If this value still exists in the current initial variant, read that.\n         */\n        if (initial && valueFromInitial !== undefined) {\n            return valueFromInitial;\n        }\n        /**\n         * Alternatively, if this VisualElement config has defined a getBaseTarget\n         * so we can read the value from an alternative source, try that.\n         */\n        const target = this.getBaseTargetFromProps(this.props, key);\n        if (target !== undefined && !isMotionValue(target))\n            return target;\n        /**\n         * If the value was initially defined on initial, but it doesn't any more,\n         * return undefined. Otherwise return the value as initially read from the DOM.\n         */\n        return this.initialValues[key] !== undefined &&\n            valueFromInitial === undefined\n            ? undefined\n            : this.baseTarget[key];\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        return this.events[eventName].add(callback);\n    }\n    notify(eventName, ...args) {\n        if (this.events[eventName]) {\n            this.events[eventName].notify(...args);\n        }\n    }\n}\n\nexport { VisualElement };\n","import { VisualElement } from '../VisualElement.mjs';\nimport { DOMKeyframesResolver } from './DOMKeyframesResolver.mjs';\n\nclass DOMVisualElement extends VisualElement {\n    constructor() {\n        super(...arguments);\n        this.KeyframeResolver = DOMKeyframesResolver;\n    }\n    sortInstanceNodePosition(a, b) {\n        /**\n         * compareDocumentPosition returns a bitmask, by using the bitwise &\n         * we're returning true if 2 in that bitmask is set to true. 2 is set\n         * to true if b preceeds a.\n         */\n        return a.compareDocumentPosition(b) & 2 ? 1 : -1;\n    }\n    getBaseTargetFromProps(props, key) {\n        return props.style\n            ? props.style[key]\n            : undefined;\n    }\n    removeValueFromRenderState(key, { vars, style }) {\n        delete vars[key];\n        delete style[key];\n    }\n}\n\nexport { DOMVisualElement };\n","import { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { isCSSVariableName } from '../dom/utils/is-css-variable.mjs';\nimport { transformProps } from './utils/transform.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { renderHTML } from './utils/render.mjs';\nimport { getDefaultValueType } from '../dom/value-types/defaults.mjs';\nimport { measureViewportBox } from '../../projection/utils/measure.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction getComputedStyle(element) {\n    return window.getComputedStyle(element);\n}\nclass HTMLVisualElement extends DOMVisualElement {\n    constructor() {\n        super(...arguments);\n        this.type = \"html\";\n        this.applyWillChange = true;\n        this.renderInstance = renderHTML;\n    }\n    readValueFromInstance(instance, key) {\n        if (transformProps.has(key)) {\n            const defaultType = getDefaultValueType(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        }\n        else {\n            const computedStyle = getComputedStyle(instance);\n            const value = (isCSSVariableName(key)\n                ? computedStyle.getPropertyValue(key)\n                : computedStyle[key]) || 0;\n            return typeof value === \"string\" ? value.trim() : value;\n        }\n    }\n    measureInstanceViewportBox(instance, { transformPagePoint }) {\n        return measureViewportBox(instance, transformPagePoint);\n    }\n    build(renderState, latestValues, props) {\n        buildHTMLStyles(renderState, latestValues, props.transformTemplate);\n    }\n    scrapeMotionValuesFromProps(props, prevProps, visualElement) {\n        return scrapeMotionValuesFromProps(props, prevProps, visualElement);\n    }\n    handleChildMotionValue() {\n        if (this.childSubscription) {\n            this.childSubscription();\n            delete this.childSubscription;\n        }\n        const { children } = this.props;\n        if (isMotionValue(children)) {\n            this.childSubscription = children.on(\"change\", (latest) => {\n                if (this.current)\n                    this.current.textContent = `${latest}`;\n            });\n        }\n    }\n}\n\nexport { HTMLVisualElement, getComputedStyle };\n","import { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { camelToDash } from '../dom/utils/camel-to-dash.mjs';\nimport { camelCaseAttributes } from './utils/camel-case-attrs.mjs';\nimport { transformProps } from '../html/utils/transform.mjs';\nimport { renderSVG } from './utils/render.mjs';\nimport { getDefaultValueType } from '../dom/value-types/defaults.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\n\nclass SVGVisualElement extends DOMVisualElement {\n    constructor() {\n        super(...arguments);\n        this.type = \"svg\";\n        this.isSVGTag = false;\n        this.measureInstanceViewportBox = createBox;\n    }\n    getBaseTargetFromProps(props, key) {\n        return props[key];\n    }\n    readValueFromInstance(instance, key) {\n        if (transformProps.has(key)) {\n            const defaultType = getDefaultValueType(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        }\n        key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;\n        return instance.getAttribute(key);\n    }\n    scrapeMotionValuesFromProps(props, prevProps, visualElement) {\n        return scrapeMotionValuesFromProps(props, prevProps, visualElement);\n    }\n    build(renderState, latestValues, props) {\n        buildSVGAttrs(renderState, latestValues, this.isSVGTag, props.transformTemplate);\n    }\n    renderInstance(instance, renderState, styleProp, projection) {\n        renderSVG(instance, renderState, styleProp, projection);\n    }\n    mount(instance) {\n        this.isSVGTag = isSVGTag(instance.tagName);\n        super.mount(instance);\n    }\n}\n\nexport { SVGVisualElement };\n","import { Fragment } from 'react';\nimport { HTMLVisualElement } from '../html/HTMLVisualElement.mjs';\nimport { SVGVisualElement } from '../svg/SVGVisualElement.mjs';\nimport { isSVGComponent } from './utils/is-svg-component.mjs';\n\nconst createDomVisualElement = (Component, options) => {\n    return isSVGComponent(Component)\n        ? new SVGVisualElement(options)\n        : new HTMLVisualElement(options, {\n            allowProjection: Component !== Fragment,\n        });\n};\n\nexport { createDomVisualElement };\n","import { animations } from '../../../motion/features/animations.mjs';\nimport { drag } from '../../../motion/features/drag.mjs';\nimport { gestureAnimations } from '../../../motion/features/gestures.mjs';\nimport { layout } from '../../../motion/features/layout.mjs';\nimport { createMotionComponentFactory } from '../create-factory.mjs';\nimport { createDomVisualElement } from '../../dom/create-visual-element.mjs';\n\nconst createMotionComponent = /*@__PURE__*/ createMotionComponentFactory({\n    ...animations,\n    ...gestureAnimations,\n    ...drag,\n    ...layout,\n}, createDomVisualElement);\n\nexport { createMotionComponent };\n","import { createDOMMotionComponentProxy } from '../create-proxy.mjs';\nimport { createMotionComponent } from './create.mjs';\n\nconst motion = /*@__PURE__*/ createDOMMotionComponentProxy(createMotionComponent);\n\nexport { motion };\n","import { noop } from './noop.mjs';\n\nlet warning = noop;\nlet invariant = noop;\nif (process.env.NODE_ENV !== \"production\") {\n    warning = (check, message) => {\n        if (!check && typeof console !== \"undefined\") {\n            console.warn(message);\n        }\n    };\n    invariant = (check, message) => {\n        if (!check) {\n            throw new Error(message);\n        }\n    };\n}\n\nexport { invariant, warning };\n","const isBrowser = typeof window !== \"undefined\";\n\nexport { isBrowser };\n","const noop = (any) => any;\n\nexport { noop };\n","import { useRef } from 'react';\n\n/**\n * Creates a constant value over the lifecycle of a component.\n *\n * Even if `useMemo` is provided an empty array as its final argument, it doesn't offer\n * a guarantee that it won't re-run for performance reasons later on. By using `useConstant`\n * you can ensure that initialisers don't execute twice or more.\n */\nfunction useConstant(init) {\n    const ref = useRef(null);\n    if (ref.current === null) {\n        ref.current = init();\n    }\n    return ref.current;\n}\n\nexport { useConstant };\n","import { useLayoutEffect, useEffect } from 'react';\nimport { isBrowser } from './is-browser.mjs';\n\nconst useIsomorphicLayoutEffect = isBrowser ? useLayoutEffect : useEffect;\n\nexport { useIsomorphicLayoutEffect };\n"],"names":["LayoutGroupContext","createContext","MotionConfigContext","transformPagePoint","p","isStatic","reducedMotion","PresenceContext","now","isAnimationControls","v","start","isKeyframesTarget","Array","isArray","shallowCompare","next","prev","prevLength","length","i","isVariantLabel","getValueState","visualElement","state","values","forEach","value","key","get","getVelocity","resolveVariantFromProps","props","definition","custom","current","velocity","undefined","variants","resolveVariant","getProps","variantPriorityOrder","variantProps","transformPropOrder","transformProps","Set","secondsToMilliseconds","seconds","millisecondsToSeconds","milliseconds","underDampedSpring","type","stiffness","damping","restSpeed","criticallyDampedSpring","target","Math","sqrt","keyframesTransition","duration","ease","getDefaultTransition","valueKey","keyframes","has","startsWith","getValueTransition","transition","MotionGlobalConfig","skipAnimations","useManualTiming","instantAnimationState","isNotNull","getFinalKeyframe","repeat","repeatType","finalKeyframe","resolvedKeyframes","filter","index","isValidProp","preloadedFeatures","createVisualElement","stepsOrder","createRenderBatcher","scheduleNextBatch","allowKeepAlive","runNextFrame","useDefaultElapsed","delta","timestamp","isProcessing","flagRunNextFrame","steps","reduce","acc","createRenderStep","thisFrame","nextFrame","flushNextFrame","toKeepAlive","WeakSet","latestFrameData","triggerCallback","callback","step","schedule","keepAlive","immediate","queue","addToCurrentFrame","add","cancel","delete","process","frameData","clear","read","resolveKeyframes","update","preRender","render","postRender","processBatch","performance","max","min","wake","frame_frame","cancelFrame","requestAnimationFrame","noop","Z","isZeroValueString","test","isNumericalString","checkStringStartsWith","token","isCSSVariableName","startsAsVariableToken","isCSSVariableToken","singleCssVariableRegex","split","trim","splitCSSVariableRegex","clamp","number","parse","parseFloat","transform","alpha","scale","default","sanitize","round","floatRegex","colorRegex","singleColorRegex","isString","createUnitType","endsWith","unit","degrees","percent","px","vh","vw","progressPercentage","positionalKeys","isNumOrPxType","getPosFromMatrix","matrix","pos","getTranslateFromMatrix","pos2","pos3","_bbox","matrix3d","match","transformKeys","nonTranslationalTransformKeys","positionalValues","width","x","paddingLeft","paddingRight","height","y","paddingTop","paddingBottom","top","left","bottom","right","translateX","translateY","testValueType","dimensionValueTypes","findDimensionValueType","find","toResolve","isScheduled","anyNeedsMeasurement","measureAllKeyframes","resolversToMeasure","from","resolver","needsMeasurement","elementsToMeasure","map","element","transformsToRestore","Map","removedTransforms","removeNonTranslationalTransform","getValue","push","set","measureInitialState","restore","_a","measureEndState","suspendedScrollY","window","scrollTo","complete","readAllKeyframes","readKeyframes","KeyframeResolver","constructor","unresolvedKeyframes","onComplete","name","motionValue","isAsync","isComplete","scheduleResolve","currentValue","valueAsRead","readValue","setFinalKeyframe","renderEndStyles","resume","isColorString","testProp","Boolean","Object","prototype","hasOwnProperty","call","splitColor","aName","bName","cName","a","b","c","clampRgbUnit","rgbUnit","rgba","red","green","blue","alpha$1","hex","r","g","substring","parseInt","hsla","hue","saturation","lightness","color","NUMBER_TOKEN","COLOR_TOKEN","complexRegex","analyseComplexValue","originalValue","toString","indexes","var","types","tokenised","replace","parsedValue","parseComplexValue","createTransformer","source","numSections","output","convertNumbersToZero","complex","_b","isNaN","getAnimatableNone","parsed","transformer","maxDefaults","applyDefaultFilter","slice","defaultValue","functionRegex","functions","join","type_int_int","numberValueTypes","borderWidth","borderTopWidth","borderRightWidth","borderBottomWidth","borderLeftWidth","borderRadius","radius","borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius","maxWidth","maxHeight","size","padding","margin","marginTop","marginRight","marginBottom","marginLeft","rotate","rotateX","rotateY","rotateZ","scaleX","scaleY","scaleZ","skew","skewX","skewY","distance","translateZ","z","perspective","transformPerspective","opacity","originX","originY","originZ","zIndex","backgroundPositionX","backgroundPositionY","fillOpacity","strokeOpacity","numOctaves","defaultValueTypes","backgroundColor","outlineColor","fill","stroke","borderColor","borderTopColor","borderRightColor","borderBottomColor","borderLeftColor","WebkitFilter","getDefaultValueType","animatable_none_getAnimatableNone","defaultValueType","invalidTemplates","DOMKeyframesResolver","keyframe","resolved","getVariableValue","depth","errors","k","fallback","parseCSSVariable","exec","token1","token2","getComputedStyle","getPropertyValue","trimmed","resolveNoneKeyframes","origin","originType","targetType","noneKeyframeIndexes","makeNoneKeyframesAnimatable","animatableTemplate","noneIndex","pageYOffset","measuredOrigin","measureViewportBox","measureKeyframe","jump","finalKeyframeIndex","unsetTransformName","unsetTransformValue","memo","result","clearTime","time","newTime","queueMicrotask","isAnimatable","BaseAnimation","autoplay","delay","repeatDelay","options","isStopped","hasAttemptedResolve","createdAt","updateFinishedPromise","calcStartTime","resolvedAt","_resolved","onKeyframesResolved","onUpdate","isGenerator","canAnimate","originKeyframe","targetKeyframe","isOriginAnimatable","isTargetAnimatable","K","hasKeyframesChanged","resolveFinishedPromise","resolvedAnimation","initPlayback","onPostResolved","then","resolve","reject","currentFinishedPromise","Promise","calcGeneratorVelocity","resolveValue","t","frameDuration","prevT","calcAngularFreq","undampedFreq","dampingRatio","durationKeys","physicsKeys","isSpringType","keys","some","spring","restDelta","resolveSpring","done","mass","isResolvedFromDuration","getSpringOptions","springOptions","derived","findSpring","bounce","envelope","derivative","exponentialDecay","safeMin","exp","e","pow","d","approximateRoot","initialGuess","initialVelocity","initialDelta","undampedAngularFreq","isGranularScale","abs","angularFreq","sin","cos","dampedAngularFreq","freqForT","sinh","cosh","calculatedDuration","currentVelocity","isBelowVelocityThreshold","isBelowDisplacementThreshold","inertia","power","timeConstant","bounceDamping","bounceStiffness","modifyTarget","timeReachedBoundary","spring$1","isOutOfBounds","nearestBoundary","amplitude","ideal","calcDelta","calcLatest","applyFriction","latest","checkCatchBoundary","hasUpdatedFrame","calcBezier","a1","a2","cubicBezier","mX1","mY1","mX2","mY2","getTForX","binarySubdivide","lowerBound","upperBound","currentX","currentT","aX","easeIn","easeOut","easeInOut","isEasingArray","mirrorEasing","easing","reverseEasing","circIn","acos","circOut","circInOut","backOut","backIn","backInOut","easingLookup","linear","anticipate","easingDefinitionToFunction","x1","y1","x2","y2","combineFunctions","pipe","transformers","progress","to","toFromDifference","mixNumber","hueToRgb","q","mixImmediate","mixLinearColor","fromExpo","expo","colorTypes","getColorType","asRGBA","model","hslaToRgba","mixColor","fromRGBA","toRGBA","blended","invisibleValues","complex_mixNumber","getMixer","mixComplex","mixArray","mixObject","numValues","blendValue","template","originStats","targetStats","matchOrder","orderedOrigin","pointers","originIndex","originValue","mix","mixer","keyframeValues","times","easingFunctions","mapTimeToKeyframe","interpolate","input","isClamp","inputLength","reverse","mixers","createMixers","customMixer","mixerFactory","numMixers","interpolator","progressInRange","offset","defaultOffset","arr","fillOffset","remaining","offsetProgress","o","splice","frameloopDriver","passTimestamp","stop","generators","decay","tween","percentToProgress","MainThreadAnimation","holdTime","cancelTime","currentTime","playbackSpeed","pendingPlayState","startTime","teardown","onStop","KeyframeResolver$1","keyframes$1","mapPercentToKeyframes","mirroredGenerator","generatorFactory","generator","calcGeneratorDuration","Infinity","resolvedDuration","totalDuration","play","pause","tick","sample","speed","timeWithoutDelay","isInDelayPhase","elapsed","frameGenerator","currentIteration","floor","iterationProgress","isAnimationFinished","finish","driver","newSpeed","hasChanged","onPlay","stopDriver","acceleratedValues","isBezierDefinition","cubicBezierAsString","supportedWaapiEasing","mapEasingToNativeEasingWithDefault","mapEasingToNativeEasing","supportsWaapi","Element","AcceleratedAnimation","owner","isWaapiSupportedEasing","every","pregeneratedAnimation","pregenerateKeyframes","sampleAnimation","pregeneratedKeyframes","animation","animateStyle","valueName","keyframeOptions","animate","iterations","direction","pendingTimeline","timeline","onfinish","playbackRate","playState","attachTimeline","sampleTime","setWithVelocity","supports","HTMLElement","supportsScrollTimeline","ScrollTimeline","GroupPlaybackControls","animations","runAll","onResolve","onReject","all","catch","getAll","propName","setAll","newValue","cancelAll","observeTimeline","prevProgress","onFrame","percentage","cancelTimeline","methodName","controls","animateMotionValue","isHandoff","onEnd","valueTransition","isTransitionDefined","when","_delay","delayChildren","staggerChildren","staggerDirection","shouldSkip","isCustomValue","toValue","resolveFinalValueInKeyframes","addUniqueItem","item","indexOf","removeItem","SubscriptionManager","subscriptions","handler","notify","numSubscriptions","getSize","isFloat","collectMotionValues","MotionValue","init","version","canTrackVelocity","events","updateAndNotify","updatedAt","setPrevFrameValue","setCurrent","change","renderRequest","hasAnimated","prevFrameValue","prevUpdatedAt","onChange","subscription","on","eventName","unsubscribe","clearListeners","eventManagers","attach","passiveEffect","stopPassiveEffect","endAnimation","getPrevious","startAnimation","animationStart","animationComplete","clearAnimation","animationCancel","isAnimating","destroy","camelToDash","str","toLowerCase","optimizedAppearDataAttribute","getWillChangeName","WillChangeMotionValue","arguments","counts","styleName","prevCount","hasRemoved","newCount","isMotionValue","addValueToWillChange","applyWillChange","willChange","style","addValue","animateTarget","targetAndTransition","transitionOverride","transitionEnd","animationTypeState","animationState","getState","latestValues","valueTarget","shouldBlockAnimation","protectedKeys","needsAnimating","shouldBlock","MotionHandoffAnimation","appearId","shouldReduceMotion","setTarget","hasValue","animateVariant","variant","presenceContext","getAnimation","getChildAnimations","variantChildren","forwardDelay","animateChildren","maxStaggerDuration","generateStaggerDuration","sort","sortByTreeOrder","child","first","last","sortNodePosition","reversePriorityOrder","numAnimationTypes","createTypeState","isActive","prevResolvedValues","createState","whileInView","whileHover","whileTap","whileDrag","whileFocus","exit","Feature","node","isMounted","AnimationFeature","createAnimationState","animateVisualElement","resolvedDefinition","isInitialRender","buildResolvedTypeValues","animateChanges","changedActiveType","context","getVariantContext","removedKeys","encounteredKeys","removedVariantIndex","typeState","prop","propIsVariant","activeDelta","isInherited","manuallyAnimateOnMount","prevProp","shouldAnimateType","variantDidChange","handledRemovedValues","definitionList","resolvedValues","allKeys","markToAnimate","liveStyle","blockInitialAnimation","fallbackAnimation","fallbackTarget","getBaseTarget","shouldAnimate","initial","setActive","setAnimateFunction","makeAnimator","reset","updateAnimationControlsSubscription","unmountControls","subscribe","mount","prevAnimate","prevProps","unmount","id","ExitAnimationFeature","isPresent","onExitComplete","prevIsPresent","prevPresenceContext","exitAnimation","register","isPrimaryPointer","event","pointerType","button","isPrimary","extractEventInfo","pointType","point","addPointerInfo","addDomEvent","passive","addEventListener","removeEventListener","addPointerEvent","PanSession","handlers","contextWindow","dragSnapToOrigin","startEvent","lastMoveEvent","lastMoveEventInfo","updatePoint","info","getPanInfo","history","isPanStarted","isDistancePastThreshold","distance2D","xDelta","yDelta","onStart","onMove","handlePointerMove","transformPoint","handlePointerUp","end","onSessionEnd","resumeAnimation","panInfo","initialInfo","onSessionStart","removeListeners","updateHandlers","subtractPoint","lastDevicePoint","timeDelta","timestampedPoint","lastPoint","createLock","lock","globalHorizontalLock","globalVerticalLock","getGlobalLock","drag","openHorizontal","openVertical","isDragActive","openGestureLock","isRefObject","ref","calcLength","axis","calcAxisDelta","originPoint","translate","calcBoxDelta","calcRelativeAxis","relative","parent","calcRelativeAxisPosition","layout","calcRelativePosition","calcRelativeAxisConstraints","calcViewportAxisConstraints","layoutAxis","constraintsAxis","resolveAxisElastic","dragElastic","minLabel","maxLabel","resolvePointElastic","label","createAxisDelta","createDelta","createAxis","createBox","eachAxis","convertBoundingBoxToBox","isIdentityScale","hasScale","hasTransform","has2DTranslate","is2DTranslate","applyPointDelta","boxScale","applyAxisDelta","applyBoxDelta","box","translateAxis","transformAxis","axisTranslate","axisScale","axisOrigin","transformBox","instance","transformBoxPoints","topLeft","bottomRight","getBoundingClientRect","getContextWindow","ownerDocument","defaultView","elementDragControls","WeakMap","VisualElementDragControls","openGlobalLock","isDragging","currentDirection","constraints","hasMutatedConstraints","elastic","originEvent","snapToCursor","panSession","pauseAnimation","stopAnimation","dragPropagation","onDragStart","resolveConstraints","projection","isAnimationBlocked","getAxisMotionValue","measuredAxis","layoutBox","removeWillChange","dragDirectionLock","onDirectionLock","onDrag","getCurrentDirection","lockThreshold","updateAxis","getAnimationState","getTransformPagePoint","onDragEnd","_point","shouldDrag","axisValue","applyConstraints","dragConstraints","measure","prevConstraints","resolveRefConstraints","calcRelativeConstraints","resolveDragElastic","rebaseAxisConstraints","relativeConstraints","onMeasureDragConstraints","constraintsElement","constraintsBox","measurePageBox","rootProjectionNode","viewportBox","scroll","root","measuredConstraints","userConstraints","convertBoxToBoundingBox","dragMomentum","dragTransition","onDragTransitionEnd","startAxisValueAnimation","dragKey","toUpperCase","externalMotionValue","scalePositionWithinConstraints","boxProgress","calcOrigin","sourceLength","targetLength","transformTemplate","updateScroll","updateLayout","addListeners","stopPointerListener","dragListener","measureDragConstraints","stopMeasureLayoutListener","stopResizeListener","stopLayoutUpdateListener","hasLayoutChanged","DragGesture","removeGroupControls","dragControls","asyncHandler","PanGesture","removePointerDownListener","onPointerDown","pointerDownEvent","session","createPanHandlers","onPanSessionStart","onPanStart","onPan","onPanEnd","SwitchLayoutGroupContext","globalProjectionState","hasAnimatedSinceResize","hasEverUpdated","pixelsToPercent","pixels","correctBorderRadius","correct","scaleCorrectors","microtask","cancelMicrotask","MeasureLayoutWithContext","Component","componentDidMount","layoutGroup","switchLayoutGroup","layoutId","assign","defaultScaleCorrectors","group","didUpdate","safeToRemove","setOptions","getSnapshotBeforeUpdate","layoutDependency","willUpdate","promote","relegate","frame","stack","getStack","members","componentDidUpdate","currentAnimation","isLead","componentWillUnmount","promoteContext","scheduleCheckAfterUnmount","remove","deregister","MeasureLayout","usePresence","react","useContext","context_PresenceContext","O","useId","useEffect","useCallback","jsx","applyTo","boxShadow","treeScale","projectionDelta","shadow","xScale","yScale","averageScale","borders","numBorders","asNumber","isPx","getRadius","radiusName","easeCrossfadeIn","compress","easeCrossfadeOut","copyAxisInto","originAxis","copyBoxInto","originBox","copyAxisDeltaInto","originDelta","removePointDelta","removeAxisTransforms","transforms","scaleKey","originKey","sourceAxis","removeAxisDelta","relativeProgress","xKeys","yKeys","removeBoxTransforms","sourceBox","isAxisDeltaZero","isDeltaZero","axisEquals","axisEqualsRounded","boxEqualsRounded","aspectRatio","axisDeltaEquals","NodeStack","scheduleRender","prevLead","lead","indexOfNode","findIndex","member","preserveFollowOpacity","show","resumeFrom","preserveOpacity","snapshot","animationValues","isUpdating","isLayoutDirty","crossfade","hide","exitAnimationComplete","resumingFrom","removeLeadSnapshot","compareByDepth","FlatTree","children","isDirty","resolveMotionValue","unwrappedValue","metrics","totalNodes","resolvedTargetDeltas","recalculatedProjection","isDebug","MotionDebug","transformAxes","hiddenVisibility","visibility","create_projection_node_id","resetDistortingTransform","sharedAnimationValues","setStaticValue","createProjectionNode","attachResizeListener","defaultParent","measureScroll","checkIsScrollRoot","resetTransform","animationId","isTreeAnimating","isProjectionDirty","isSharedProjectionDirty","isTransformDirty","updateManuallyBlocked","updateBlockedByResize","isSVG","needsReset","shouldResetTransform","hasCheckedOptimisedAppear","eventHandlers","hasTreeAnimated","updateScheduled","scheduleUpdate","projectionUpdateScheduled","checkUpdateFailed","clearAllSnapshots","updateProjection","nodes","propagateDirtyNodes","resolveTargetDelta","calcProjection","cleanDirtyNodes","record","resolvedRelativeTargetAt","hasProjected","isVisible","animationProgress","sharedNodes","path","notifyListeners","args","subscriptionManager","hasListeners","SVGElement","tagName","cancelDelay","resizeUnblockUpdate","timeout","checkElapsed","finishAnimation","registerSharedNode","hasRelativeTargetChanged","newLayout","isTreeAnimationBlocked","relativeTarget","layoutTransition","defaultLayoutTransition","onLayoutAnimationStart","onLayoutAnimationComplete","targetChanged","targetLayout","hasOnlyRelativeTargetChanged","layoutRoot","setAnimationOrigin","animationOptions","blockUpdate","unblockUpdate","isUpdateBlocked","startUpdate","resetSkewAndRotation","getTransformTemplate","shouldNotifyListeners","MotionCancelOptimisedAnimation","cancelTreeOptimisedTransformAnimations","projectionNode","MotionHasOptimisedAnimation","prevTransformTemplateValue","updateSnapshot","clearMeasurements","clearIsLayoutDirty","resetTransformStyle","notifyLayoutUpdate","clearSnapshot","removeLeadSnapshots","scheduleUpdateProjection","alwaysMeasureLayout","prevLayout","layoutCorrected","phase","layoutScroll","isRoot","wasRoot","isResetRequested","hasProjection","transformTemplateValue","transformTemplateHasChanged","removeTransform","pageBox","removeElementScroll","roundAxis","measuredBox","checkNodeWasScrollRoot","boxWithoutScroll","applyTransform","transformOnly","withTransforms","boxWithoutTransform","setTargetDelta","targetDelta","forceRelativeParentToResolveTarget","relativeParent","forceRecalculation","getLead","isShared","attemptToResolveRelativeTarget","getClosestProjectingParent","relativeTargetOrigin","targetWithTransforms","isProjecting","canSkip","pendingAnimation","prevTreeScaleX","prevTreeScaleY","applyTreeDeltas","treePath","isSharedTransition","treeLength","display","prevProjectionDelta","createProjectionDeltas","notifyAll","projectionDeltaWithTransform","prevRelativeTarget","snapshotLatestValues","mixedValues","relativeLayout","isSharedLayoutAnimation","snapshotSource","isOnlyMember","shouldCrossfadeOpacity","hasOpacityCrossfade","mixTargetDelta","mixAxisDelta","mixAxis","mixValues","follow","opacityExit","borderLabel","followRadius","leadRadius","animateSingleValue","motionValue$1","completeAnimation","applyTransformsToTarget","shouldAnimatePositionOnly","animationType","xLength","yLength","config","initialPromotionConfig","shouldPreserveFollowOpacity","getPrevLead","hasDistortingTransform","resetValues","getProjectionStyles","styleProp","styles","pointerEvents","emptyStyles","valuesToRender","buildProjectionTransform","latestTransform","xTranslate","yTranslate","zTranslate","elementScaleX","elementScaleY","transformOrigin","corrected","num","resetTree","measuredLayout","axisSnapshot","layoutDelta","visualDelta","parentSnapshot","parentLayout","relativeSnapshot","onBeforeLayoutMeasure","userAgentContains","navigator","userAgent","includes","string","roundPoint","DocumentProjectionNode","document","documentElement","scrollLeft","body","scrollTop","HTMLProjectionNode","documentNode","position","addHoverEvent","callbackName","HoverGesture","FocusGesture","onFocus","isFocusVisible","matches","onBlur","isNodeOrChild","parentElement","fireSyntheticPointerEvent","syntheticPointerEvent","PointerEvent","PressGesture","removeStartListeners","removeEndListeners","removeAccessibleListeners","startPointerPress","startInfo","isPressing","removePointerUpListener","endEvent","endInfo","checkPressEnd","onTap","onTapCancel","globalTapTarget","removePointerCancelListener","cancelEvent","cancelInfo","cancelPress","startPress","startAccessiblePress","removeKeydownListener","keydownEvent","keyupEvent","removeBlurListener","onTapStart","removePointerListener","removeFocusListener","observerCallbacks","observers","fireObserverCallback","entry","fireAllObserverCallbacks","entries","thresholdNames","InViewFeature","hasEnteredView","isInView","startObserver","viewport","rootMargin","amount","once","threshold","observeIntersection","rootInteresectionObserver","initIntersectionObserver","lookupRoot","rootObservers","JSON","stringify","IntersectionObserver","observe","unobserve","isIntersecting","onViewportEnter","onViewportLeave","hasViewportOptionChanged","prevViewport","MotionContext","LazyContext","strict","scheduleHandoffComplete","completeHandoff","MotionHandoffIsComplete","isControllingVariants","isVariantNode","variantLabelsAsDependency","featureProps","focus","hover","tap","pan","inView","featureDefinitions","isEnabled","motionComponentSymbol","Symbol","for","lowercaseSVGElements","isSVGComponent","renderHTML","vars","setProperty","camelCaseAttributes","renderSVG","renderState","_styleProp","attrs","setAttribute","isForcedMotionValue","scrapeMotionValuesFromProps","newValues","scrape_motion_values_scrapeMotionValuesFromProps","charAt","makeUseVisualState","make","makeState","createRenderState","onMount","makeLatestValues","shouldApplyWillChange","scrapeMotionValues","motionValues","isControllingVariants$1","isVariantNode$1","inherit","isInitialAnimationBlocked","variantToSet","forEachDefinition","addWillChange","memberName","use_constant","h","list","createHtmlRenderState","createSvgRenderState","getValueAsType","translateAlias","numTransforms","buildHTMLStyles","hasTransformOrigin","valueAsType","buildTransform","transformString","transformIsDefault","valueIsDefault","transformName","transform_origin_calcOrigin","dashKeys","array","camelKeys","buildSVGAttrs","attrX","attrY","attrScale","pathLength","pathSpacing","pathOffset","isSVGTag","viewBox","dimensions","calcSVGTransformOrigin","pxOriginX","pxOriginY","buildSVGPath","spacing","useDashCase","tag","svgMotionConfig","useVisualState","getBBox","htmlMotionConfig","copyRawValuesOnly","validMotionProps","isValidMotionProp","shouldForward","require","prefersReducedMotion","hasReducedMotionListener","visualElementStore","valueTypes","findValueType","propEventHandlers","numVariantProps","VisualElement","_props","_prevProps","_visualElement","reducedMotionConfig","visualState","features","valueSubscriptions","prevMotionValues","propEventSubscriptions","notifyUpdate","isRenderScheduled","triggerBuild","renderInstance","baseTarget","initialValues","initialMotionValues","removeFromVariantTree","addVariantChild","bindToMotionValue","initPrefersReducedMotion","is_browser","j","matchMedia","motionMediaQuery","setReducedMotionPreferences","addListener","feature","removeSyncCheck","valueIsTransform","removeOnChange","latestValue","removeOnRenderRequest","MotionCheckAppearSync","other","sortInstanceNodePosition","updateFeatures","featureDefinition","FeatureConstructor","build","measureInstanceViewportBox","getStaticValue","listener","updateMotionValuesFromProps","nextValue","prevValue","existingValue","removeValue","handleChildMotionValue","getVariant","getClosestVariantNode","startAtParent","closestVariantNode","removeValueFromRenderState","getBaseTargetFromProps","readValueFromInstance","setBaseTarget","valueFromInitial","DOMVisualElement","compareDocumentPosition","HTMLVisualElement","defaultType","computedStyle","childSubscription","textContent","SVGVisualElement","getAttribute","motion","createDOMMotionComponentProxy","componentFactory","Proxy","componentCache","_target","ProjectionNode","allowProjection","Fragment","forwardMotionProps","createRendererMotionComponent","param","useRender","loadFeatures","ForwardRefMotionComponent","forwardRef","externalRef","configAndProps","useLayoutId","layoutGroupId","useCreateMotionContext","getCurrentTreeVariants","useMemo","isBrowser","layoutProjection","getProjectionFunctionality","combined","useVisualElement","ProjectionNodeConstructor","lazyContext","_","visualElementRef","useRef","renderer","initialLayoutGroupConfig","use_visual_element_createProjectionNode","getClosestProjectingNode","useInsertionEffect","optimisedAppearId","wantsHandoff","use_isomorphic_effect","L","jsxs","Provider","createUseRender","visualProps","useVisualProps","_isStatic","rawStyles","htmlProps","useStyle","useInitialMotionValues","draggable","userSelect","WebkitUserSelect","WebkitTouchCallout","touchAction","tabIndex","filteredProps","filterProps","isDom","elementProps","renderedChildren","createElement","warning","_noop_mjs__WEBPACK_IMPORTED_MODULE_0__","invariant","any","useConstant","react__WEBPACK_IMPORTED_MODULE_0__","useIsomorphicLayoutEffect","_is_browser_mjs__WEBPACK_IMPORTED_MODULE_1__","useLayoutEffect"],"sourceRoot":""}