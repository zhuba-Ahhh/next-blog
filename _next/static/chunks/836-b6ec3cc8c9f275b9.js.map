{"version":3,"file":"static/chunks/836-b6ec3cc8c9f275b9.js","mappings":"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","sources":["webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/context/LayoutGroupContext.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/context/MotionConfigContext.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/context/PresenceContext.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/components/create-proxy.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/utils/is-animation-controls.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/utils/is-keyframes-target.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/shallow-compare.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/utils/is-variant-label.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/utils/resolve-variants.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/utils/resolve-dynamic-variants.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/utils/variant-props.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/html/utils/transform.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/time-conversion.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/utils/default-transitions.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/utils/get-value-transition.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/GlobalConfig.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/use-instant-transition-state.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/animators/waapi/utils/get-final-keyframe.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/frameloop/render-step.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/frameloop/batcher.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/frameloop/frame.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/easing/cubic-bezier.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/easing/modifiers/mirror.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/easing/modifiers/reverse.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/easing/back.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/easing/anticipate.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/easing/circ.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/is-zero-value-string.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/utils/is-none.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/is-numerical-string.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/dom/utils/is-css-variable.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/clamp.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/value/types/numbers/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/value/types/numbers/units.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/dom/utils/unit-conversion.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/dom/value-types/test.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/dom/value-types/type-auto.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/dom/value-types/dimensions.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/utils/KeyframesResolver.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/value/types/utils/sanitize.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/value/types/utils/float-regex.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/value/types/utils/is-nullish.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/value/types/utils/single-color-regex.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/value/types/color/utils.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/value/types/color/rgba.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/value/types/color/hex.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/value/types/color/hsla.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/value/types/color/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/value/types/utils/color-regex.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/value/types/complex/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/value/types/complex/filter.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/dom/value-types/number-browser.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/dom/value-types/transform.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/dom/value-types/type-int.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/dom/value-types/number.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/dom/value-types/defaults.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/dom/value-types/animatable-none.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/html/utils/make-none-animatable.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/dom/DOMKeyframesResolver.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/generators/utils/is-generator.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/frameloop/sync-time.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/utils/is-animatable.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/animators/utils/can-animate.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/animators/BaseAnimation.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/progress.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/animators/waapi/utils/linear.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/velocity-per-second.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/generators/utils/velocity.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/generators/spring/defaults.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/generators/spring/find.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/generators/utils/calc-duration.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/generators/spring/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/generators/inertia.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/easing/ease.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/easing/utils/is-easing-array.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/easing/utils/is-bezier-definition.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/easing/utils/map.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/pipe.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/mix/number.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/hsla-to-rgba.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/mix/immediate.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/mix/color.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/mix/visibility.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/mix/complex.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/mix/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/interpolate.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/offsets/fill.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/offsets/default.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/offsets/time.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/generators/keyframes.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/animators/drivers/driver-frameloop.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/animators/MainThreadAnimation.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/animators/utils/accelerated-values.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/memo.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/animators/waapi/utils/supports-flags.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/animators/waapi/utils/memo-supports.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/animators/waapi/utils/supports-linear-easing.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/animators/waapi/easing.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/animators/waapi/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/animators/waapi/utils/attach-timeline.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/animators/waapi/utils/supports-waapi.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/animators/AcceleratedAnimation.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/dom/scroll/supports.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/GroupPlaybackControls.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/utils/is-transition-defined.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/interfaces/motion-value.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/resolve-value.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/array.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/subscription-manager.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/value/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/utils/setters.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/dom/utils/camel-to-dash.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/optimized-appear/data-id.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/optimized-appear/get-appear-id.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/value/utils/is-motion-value.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/value/use-will-change/is.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/value/use-will-change/add-will-change.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/interfaces/visual-element-target.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/interfaces/visual-element-variant.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/interfaces/visual-element.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/utils/get-variant-context.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/utils/animation-state.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/motion/features/Feature.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/motion/features/animation/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/motion/features/animation/exit.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/motion/features/animations.mjs","webpack://_N_E/./node_modules/.pnpm/motion-dom@11.14.1/node_modules/motion-dom/dist/es/gestures/drag/state/is-active.mjs","webpack://_N_E/./node_modules/.pnpm/motion-dom@11.14.1/node_modules/motion-dom/dist/es/utils/resolve-elements.mjs","webpack://_N_E/./node_modules/.pnpm/motion-dom@11.14.1/node_modules/motion-dom/dist/es/gestures/utils/setup.mjs","webpack://_N_E/./node_modules/.pnpm/motion-dom@11.14.1/node_modules/motion-dom/dist/es/gestures/hover.mjs","webpack://_N_E/./node_modules/.pnpm/motion-dom@11.14.1/node_modules/motion-dom/dist/es/gestures/utils/is-primary-pointer.mjs","webpack://_N_E/./node_modules/.pnpm/motion-dom@11.14.1/node_modules/motion-dom/dist/es/gestures/press/utils/state.mjs","webpack://_N_E/./node_modules/.pnpm/motion-dom@11.14.1/node_modules/motion-dom/dist/es/gestures/press/utils/keyboard.mjs","webpack://_N_E/./node_modules/.pnpm/motion-dom@11.14.1/node_modules/motion-dom/dist/es/gestures/press/utils/is-keyboard-accessible.mjs","webpack://_N_E/./node_modules/.pnpm/motion-dom@11.14.1/node_modules/motion-dom/dist/es/gestures/utils/is-node-or-child.mjs","webpack://_N_E/./node_modules/.pnpm/motion-dom@11.14.1/node_modules/motion-dom/dist/es/gestures/press/index.mjs","webpack://_N_E/./node_modules/.pnpm/motion-dom@11.14.1/node_modules/motion-dom/dist/es/gestures/drag/state/set-active.mjs","webpack://_N_E/./node_modules/.pnpm/motion-dom@11.14.1/node_modules/motion-dom/dist/es/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/events/event-info.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/events/add-dom-event.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/events/add-pointer-event.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/distance.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/gestures/pan/PanSession.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/is-ref-object.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/projection/geometry/delta-calc.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/projection/geometry/models.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/projection/utils/each-axis.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/projection/geometry/conversion.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/projection/utils/has-transform.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/projection/utils/measure.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/get-context-window.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/gestures/drag/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/gestures/pan/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/context/SwitchLayoutGroupContext.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/projection/node/state.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/projection/styles/scale-border-radius.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/projection/styles/scale-correction.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/frameloop/microtask.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/projection/animation/mix-values.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/projection/geometry/copy.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/projection/geometry/delta-remove.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/projection/geometry/utils.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/projection/shared/stack.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/projection/styles/transform.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/utils/compare-by-depth.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/utils/flat-tree.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/value/utils/resolve-motion-value.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/delay.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/dom/utils/is-svg-element.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/animation/animate/single-value.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/projection/node/DocumentProjectionNode.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/projection/node/HTMLProjectionNode.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/motion/features/drag.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/gestures/hover.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/gestures/focus.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/gestures/press.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/motion/features/viewport/observers.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/motion/features/viewport/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/motion/features/gestures.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/motion/features/layout.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/context/MotionContext/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/context/LazyContext.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/motion/utils/use-visual-element.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/utils/is-controlling-variants.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/context/MotionContext/utils.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/context/MotionContext/create.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/motion/features/definitions.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/motion/features/load-features.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/motion/utils/symbol.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/motion/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/svg/lowercase-elements.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/dom/utils/is-svg-component.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/html/utils/render.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/svg/utils/camel-case-attrs.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/svg/utils/render.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/motion/utils/is-forced-motion-value.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/html/utils/scrape-motion-values.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/svg/utils/scrape-motion-values.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/html/utils/create-render-state.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/svg/utils/create-render-state.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/dom/value-types/get-as-type.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/html/utils/build-styles.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/svg/utils/transform-origin.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/svg/utils/path.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/svg/utils/is-svg-tag.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/svg/config-motion.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/html/config-motion.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/html/use-props.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/motion/utils/valid-prop.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/dom/utils/filter-props.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/svg/use-props.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/dom/use-render.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/components/create-factory.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/reduced-motion/state.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/reduced-motion/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/utils/motion-values.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/store.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/dom/value-types/find.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/VisualElement.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/dom/DOMVisualElement.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/html/HTMLVisualElement.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/svg/SVGVisualElement.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/dom/create-visual-element.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/components/motion/create.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/render/components/motion/proxy.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/is-browser.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/use-constant.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.14.1_react-dom@18.3.1_react@18.3.1/node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs","webpack://_N_E/./node_modules/.pnpm/motion-utils@11.14.1/node_modules/motion-utils/dist/es/errors.mjs","webpack://_N_E/./node_modules/.pnpm/motion-utils@11.14.1/node_modules/motion-utils/dist/es/noop.mjs"],"sourcesContent":["\"use client\";\nimport { createContext } from 'react';\n\nconst LayoutGroupContext = createContext({});\n\nexport { LayoutGroupContext };\n","\"use client\";\nimport { createContext } from 'react';\n\n/**\n * @public\n */\nconst MotionConfigContext = createContext({\n    transformPagePoint: (p) => p,\n    isStatic: false,\n    reducedMotion: \"never\",\n});\n\nexport { MotionConfigContext };\n","\"use client\";\nimport { createContext } from 'react';\n\n/**\n * @public\n */\nconst PresenceContext = createContext(null);\n\nexport { PresenceContext };\n","import { warnOnce } from '../../utils/warn-once.mjs';\n\nfunction createDOMMotionComponentProxy(componentFactory) {\n    if (typeof Proxy === \"undefined\") {\n        return componentFactory;\n    }\n    /**\n     * A cache of generated `motion` components, e.g `motion.div`, `motion.input` etc.\n     * Rather than generating them anew every render.\n     */\n    const componentCache = new Map();\n    const deprecatedFactoryFunction = (...args) => {\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(false, \"motion() is deprecated. Use motion.create() instead.\");\n        }\n        return componentFactory(...args);\n    };\n    return new Proxy(deprecatedFactoryFunction, {\n        /**\n         * Called when `motion` is referenced with a prop: `motion.div`, `motion.input` etc.\n         * The prop name is passed through as `key` and we can use that to generate a `motion`\n         * DOM component with that name.\n         */\n        get: (_target, key) => {\n            if (key === \"create\")\n                return componentFactory;\n            /**\n             * If this element doesn't exist in the component cache, create it and cache.\n             */\n            if (!componentCache.has(key)) {\n                componentCache.set(key, componentFactory(key));\n            }\n            return componentCache.get(key);\n        },\n    });\n}\n\nexport { createDOMMotionComponentProxy };\n","function isAnimationControls(v) {\n    return (v !== null &&\n        typeof v === \"object\" &&\n        typeof v.start === \"function\");\n}\n\nexport { isAnimationControls };\n","const isKeyframesTarget = (v) => {\n    return Array.isArray(v);\n};\n\nexport { isKeyframesTarget };\n","function shallowCompare(next, prev) {\n    if (!Array.isArray(prev))\n        return false;\n    const prevLength = prev.length;\n    if (prevLength !== next.length)\n        return false;\n    for (let i = 0; i < prevLength; i++) {\n        if (prev[i] !== next[i])\n            return false;\n    }\n    return true;\n}\n\nexport { shallowCompare };\n","/**\n * Decides if the supplied variable is variant label\n */\nfunction isVariantLabel(v) {\n    return typeof v === \"string\" || Array.isArray(v);\n}\n\nexport { isVariantLabel };\n","function getValueState(visualElement) {\n    const state = [{}, {}];\n    visualElement === null || visualElement === void 0 ? void 0 : visualElement.values.forEach((value, key) => {\n        state[0][key] = value.get();\n        state[1][key] = value.getVelocity();\n    });\n    return state;\n}\nfunction resolveVariantFromProps(props, definition, custom, visualElement) {\n    /**\n     * If the variant definition is a function, resolve.\n     */\n    if (typeof definition === \"function\") {\n        const [current, velocity] = getValueState(visualElement);\n        definition = definition(custom !== undefined ? custom : props.custom, current, velocity);\n    }\n    /**\n     * If the variant definition is a variant label, or\n     * the function returned a variant label, resolve.\n     */\n    if (typeof definition === \"string\") {\n        definition = props.variants && props.variants[definition];\n    }\n    /**\n     * At this point we've resolved both functions and variant labels,\n     * but the resolved variant label might itself have been a function.\n     * If so, resolve. This can only have returned a valid target object.\n     */\n    if (typeof definition === \"function\") {\n        const [current, velocity] = getValueState(visualElement);\n        definition = definition(custom !== undefined ? custom : props.custom, current, velocity);\n    }\n    return definition;\n}\n\nexport { resolveVariantFromProps };\n","import { resolveVariantFromProps } from './resolve-variants.mjs';\n\nfunction resolveVariant(visualElement, definition, custom) {\n    const props = visualElement.getProps();\n    return resolveVariantFromProps(props, definition, custom !== undefined ? custom : props.custom, visualElement);\n}\n\nexport { resolveVariant };\n","const variantPriorityOrder = [\n    \"animate\",\n    \"whileInView\",\n    \"whileFocus\",\n    \"whileHover\",\n    \"whileTap\",\n    \"whileDrag\",\n    \"exit\",\n];\nconst variantProps = [\"initial\", ...variantPriorityOrder];\n\nexport { variantPriorityOrder, variantProps };\n","/**\n * Generate a list of every possible transform key.\n */\nconst transformPropOrder = [\n    \"transformPerspective\",\n    \"x\",\n    \"y\",\n    \"z\",\n    \"translateX\",\n    \"translateY\",\n    \"translateZ\",\n    \"scale\",\n    \"scaleX\",\n    \"scaleY\",\n    \"rotate\",\n    \"rotateX\",\n    \"rotateY\",\n    \"rotateZ\",\n    \"skew\",\n    \"skewX\",\n    \"skewY\",\n];\n/**\n * A quick lookup for transform props.\n */\nconst transformProps = new Set(transformPropOrder);\n\nexport { transformPropOrder, transformProps };\n","/**\n * Converts seconds to milliseconds\n *\n * @param seconds - Time in seconds.\n * @return milliseconds - Converted time in milliseconds.\n */\nconst secondsToMilliseconds = (seconds) => seconds * 1000;\nconst millisecondsToSeconds = (milliseconds) => milliseconds / 1000;\n\nexport { millisecondsToSeconds, secondsToMilliseconds };\n","import { transformProps } from '../../render/html/utils/transform.mjs';\n\nconst underDampedSpring = {\n    type: \"spring\",\n    stiffness: 500,\n    damping: 25,\n    restSpeed: 10,\n};\nconst criticallyDampedSpring = (target) => ({\n    type: \"spring\",\n    stiffness: 550,\n    damping: target === 0 ? 2 * Math.sqrt(550) : 30,\n    restSpeed: 10,\n});\nconst keyframesTransition = {\n    type: \"keyframes\",\n    duration: 0.8,\n};\n/**\n * Default easing curve is a slightly shallower version of\n * the default browser easing curve.\n */\nconst ease = {\n    type: \"keyframes\",\n    ease: [0.25, 0.1, 0.35, 1],\n    duration: 0.3,\n};\nconst getDefaultTransition = (valueKey, { keyframes }) => {\n    if (keyframes.length > 2) {\n        return keyframesTransition;\n    }\n    else if (transformProps.has(valueKey)) {\n        return valueKey.startsWith(\"scale\")\n            ? criticallyDampedSpring(keyframes[1])\n            : underDampedSpring;\n    }\n    return ease;\n};\n\nexport { getDefaultTransition };\n","function getValueTransition(transition, key) {\n    return transition\n        ? transition[key] ||\n            transition[\"default\"] ||\n            transition\n        : undefined;\n}\n\nexport { getValueTransition };\n","const MotionGlobalConfig = {\n    skipAnimations: false,\n    useManualTiming: false,\n};\n\nexport { MotionGlobalConfig };\n","const instantAnimationState = {\n    current: false,\n};\n\nexport { instantAnimationState };\n","const isNotNull = (value) => value !== null;\nfunction getFinalKeyframe(keyframes, { repeat, repeatType = \"loop\" }, finalKeyframe) {\n    const resolvedKeyframes = keyframes.filter(isNotNull);\n    const index = repeat && repeatType !== \"loop\" && repeat % 2 === 1\n        ? 0\n        : resolvedKeyframes.length - 1;\n    return !index || finalKeyframe === undefined\n        ? resolvedKeyframes[index]\n        : finalKeyframe;\n}\n\nexport { getFinalKeyframe };\n","function createRenderStep(runNextFrame) {\n    /**\n     * We create and reuse two queues, one to queue jobs for the current frame\n     * and one for the next. We reuse to avoid triggering GC after x frames.\n     */\n    let thisFrame = new Set();\n    let nextFrame = new Set();\n    /**\n     * Track whether we're currently processing jobs in this step. This way\n     * we can decide whether to schedule new jobs for this frame or next.\n     */\n    let isProcessing = false;\n    let flushNextFrame = false;\n    /**\n     * A set of processes which were marked keepAlive when scheduled.\n     */\n    const toKeepAlive = new WeakSet();\n    let latestFrameData = {\n        delta: 0.0,\n        timestamp: 0.0,\n        isProcessing: false,\n    };\n    function triggerCallback(callback) {\n        if (toKeepAlive.has(callback)) {\n            step.schedule(callback);\n            runNextFrame();\n        }\n        callback(latestFrameData);\n    }\n    const step = {\n        /**\n         * Schedule a process to run on the next frame.\n         */\n        schedule: (callback, keepAlive = false, immediate = false) => {\n            const addToCurrentFrame = immediate && isProcessing;\n            const queue = addToCurrentFrame ? thisFrame : nextFrame;\n            if (keepAlive)\n                toKeepAlive.add(callback);\n            if (!queue.has(callback))\n                queue.add(callback);\n            return callback;\n        },\n        /**\n         * Cancel the provided callback from running on the next frame.\n         */\n        cancel: (callback) => {\n            nextFrame.delete(callback);\n            toKeepAlive.delete(callback);\n        },\n        /**\n         * Execute all schedule callbacks.\n         */\n        process: (frameData) => {\n            latestFrameData = frameData;\n            /**\n             * If we're already processing we've probably been triggered by a flushSync\n             * inside an existing process. Instead of executing, mark flushNextFrame\n             * as true and ensure we flush the following frame at the end of this one.\n             */\n            if (isProcessing) {\n                flushNextFrame = true;\n                return;\n            }\n            isProcessing = true;\n            [thisFrame, nextFrame] = [nextFrame, thisFrame];\n            // Clear the next frame queue\n            nextFrame.clear();\n            // Execute this frame\n            thisFrame.forEach(triggerCallback);\n            isProcessing = false;\n            if (flushNextFrame) {\n                flushNextFrame = false;\n                step.process(frameData);\n            }\n        },\n    };\n    return step;\n}\n\nexport { createRenderStep };\n","import { MotionGlobalConfig } from '../utils/GlobalConfig.mjs';\nimport { createRenderStep } from './render-step.mjs';\n\nconst stepsOrder = [\n    \"read\", // Read\n    \"resolveKeyframes\", // Write/Read/Write/Read\n    \"update\", // Compute\n    \"preRender\", // Compute\n    \"render\", // Write\n    \"postRender\", // Compute\n];\nconst maxElapsed = 40;\nfunction createRenderBatcher(scheduleNextBatch, allowKeepAlive) {\n    let runNextFrame = false;\n    let useDefaultElapsed = true;\n    const state = {\n        delta: 0.0,\n        timestamp: 0.0,\n        isProcessing: false,\n    };\n    const flagRunNextFrame = () => (runNextFrame = true);\n    const steps = stepsOrder.reduce((acc, key) => {\n        acc[key] = createRenderStep(flagRunNextFrame);\n        return acc;\n    }, {});\n    const { read, resolveKeyframes, update, preRender, render, postRender } = steps;\n    const processBatch = () => {\n        const timestamp = MotionGlobalConfig.useManualTiming\n            ? state.timestamp\n            : performance.now();\n        runNextFrame = false;\n        state.delta = useDefaultElapsed\n            ? 1000 / 60\n            : Math.max(Math.min(timestamp - state.timestamp, maxElapsed), 1);\n        state.timestamp = timestamp;\n        state.isProcessing = true;\n        // Unrolled render loop for better per-frame performance\n        read.process(state);\n        resolveKeyframes.process(state);\n        update.process(state);\n        preRender.process(state);\n        render.process(state);\n        postRender.process(state);\n        state.isProcessing = false;\n        if (runNextFrame && allowKeepAlive) {\n            useDefaultElapsed = false;\n            scheduleNextBatch(processBatch);\n        }\n    };\n    const wake = () => {\n        runNextFrame = true;\n        useDefaultElapsed = true;\n        if (!state.isProcessing) {\n            scheduleNextBatch(processBatch);\n        }\n    };\n    const schedule = stepsOrder.reduce((acc, key) => {\n        const step = steps[key];\n        acc[key] = (process, keepAlive = false, immediate = false) => {\n            if (!runNextFrame)\n                wake();\n            return step.schedule(process, keepAlive, immediate);\n        };\n        return acc;\n    }, {});\n    const cancel = (process) => {\n        for (let i = 0; i < stepsOrder.length; i++) {\n            steps[stepsOrder[i]].cancel(process);\n        }\n    };\n    return { schedule, cancel, state, steps };\n}\n\nexport { createRenderBatcher, stepsOrder };\n","import { noop } from 'motion-utils';\nimport { createRenderBatcher } from './batcher.mjs';\n\nconst { schedule: frame, cancel: cancelFrame, state: frameData, steps: frameSteps, } = createRenderBatcher(typeof requestAnimationFrame !== \"undefined\" ? requestAnimationFrame : noop, true);\n\nexport { cancelFrame, frame, frameData, frameSteps };\n","import { noop } from 'motion-utils';\n\n/*\n  Bezier function generator\n  This has been modified from Gaëtan Renaudeau's BezierEasing\n  https://github.com/gre/bezier-easing/blob/master/src/index.js\n  https://github.com/gre/bezier-easing/blob/master/LICENSE\n  \n  I've removed the newtonRaphsonIterate algo because in benchmarking it\n  wasn't noticiably faster than binarySubdivision, indeed removing it\n  usually improved times, depending on the curve.\n  I also removed the lookup table, as for the added bundle size and loop we're\n  only cutting ~4 or so subdivision iterations. I bumped the max iterations up\n  to 12 to compensate and this still tended to be faster for no perceivable\n  loss in accuracy.\n  Usage\n    const easeOut = cubicBezier(.17,.67,.83,.67);\n    const x = easeOut(0.5); // returns 0.627...\n*/\n// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\nconst calcBezier = (t, a1, a2) => (((1.0 - 3.0 * a2 + 3.0 * a1) * t + (3.0 * a2 - 6.0 * a1)) * t + 3.0 * a1) *\n    t;\nconst subdivisionPrecision = 0.0000001;\nconst subdivisionMaxIterations = 12;\nfunction binarySubdivide(x, lowerBound, upperBound, mX1, mX2) {\n    let currentX;\n    let currentT;\n    let i = 0;\n    do {\n        currentT = lowerBound + (upperBound - lowerBound) / 2.0;\n        currentX = calcBezier(currentT, mX1, mX2) - x;\n        if (currentX > 0.0) {\n            upperBound = currentT;\n        }\n        else {\n            lowerBound = currentT;\n        }\n    } while (Math.abs(currentX) > subdivisionPrecision &&\n        ++i < subdivisionMaxIterations);\n    return currentT;\n}\nfunction cubicBezier(mX1, mY1, mX2, mY2) {\n    // If this is a linear gradient, return linear easing\n    if (mX1 === mY1 && mX2 === mY2)\n        return noop;\n    const getTForX = (aX) => binarySubdivide(aX, 0, 1, mX1, mX2);\n    // If animation is at start/end, return t without easing\n    return (t) => t === 0 || t === 1 ? t : calcBezier(getTForX(t), mY1, mY2);\n}\n\nexport { cubicBezier };\n","// Accepts an easing function and returns a new one that outputs mirrored values for\n// the second half of the animation. Turns easeIn into easeInOut.\nconst mirrorEasing = (easing) => (p) => p <= 0.5 ? easing(2 * p) / 2 : (2 - easing(2 * (1 - p))) / 2;\n\nexport { mirrorEasing };\n","// Accepts an easing function and returns a new one that outputs reversed values.\n// Turns easeIn into easeOut.\nconst reverseEasing = (easing) => (p) => 1 - easing(1 - p);\n\nexport { reverseEasing };\n","import { cubicBezier } from './cubic-bezier.mjs';\nimport { mirrorEasing } from './modifiers/mirror.mjs';\nimport { reverseEasing } from './modifiers/reverse.mjs';\n\nconst backOut = /*@__PURE__*/ cubicBezier(0.33, 1.53, 0.69, 0.99);\nconst backIn = /*@__PURE__*/ reverseEasing(backOut);\nconst backInOut = /*@__PURE__*/ mirrorEasing(backIn);\n\nexport { backIn, backInOut, backOut };\n","import { backIn } from './back.mjs';\n\nconst anticipate = (p) => (p *= 2) < 1 ? 0.5 * backIn(p) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));\n\nexport { anticipate };\n","import { mirrorEasing } from './modifiers/mirror.mjs';\nimport { reverseEasing } from './modifiers/reverse.mjs';\n\nconst circIn = (p) => 1 - Math.sin(Math.acos(p));\nconst circOut = reverseEasing(circIn);\nconst circInOut = mirrorEasing(circIn);\n\nexport { circIn, circInOut, circOut };\n","/**\n * Check if the value is a zero value string like \"0px\" or \"0%\"\n */\nconst isZeroValueString = (v) => /^0[^.\\s]+$/u.test(v);\n\nexport { isZeroValueString };\n","import { isZeroValueString } from '../../utils/is-zero-value-string.mjs';\n\nfunction isNone(value) {\n    if (typeof value === \"number\") {\n        return value === 0;\n    }\n    else if (value !== null) {\n        return value === \"none\" || value === \"0\" || isZeroValueString(value);\n    }\n    else {\n        return true;\n    }\n}\n\nexport { isNone };\n","/**\n * Check if value is a numerical string, ie a string that is purely a number eg \"100\" or \"-100.1\"\n */\nconst isNumericalString = (v) => /^-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)$/u.test(v);\n\nexport { isNumericalString };\n","const checkStringStartsWith = (token) => (key) => typeof key === \"string\" && key.startsWith(token);\nconst isCSSVariableName = \n/*@__PURE__*/ checkStringStartsWith(\"--\");\nconst startsAsVariableToken = \n/*@__PURE__*/ checkStringStartsWith(\"var(--\");\nconst isCSSVariableToken = (value) => {\n    const startsWithToken = startsAsVariableToken(value);\n    if (!startsWithToken)\n        return false;\n    // Ensure any comments are stripped from the value as this can harm performance of the regex.\n    return singleCssVariableRegex.test(value.split(\"/*\")[0].trim());\n};\nconst singleCssVariableRegex = /var\\(--(?:[\\w-]+\\s*|[\\w-]+\\s*,(?:\\s*[^)(\\s]|\\s*\\((?:[^)(]|\\([^)(]*\\))*\\))+\\s*)\\)$/iu;\n\nexport { isCSSVariableName, isCSSVariableToken };\n","import { invariant } from 'motion-utils';\nimport { isNumericalString } from '../../../utils/is-numerical-string.mjs';\nimport { isCSSVariableToken } from './is-css-variable.mjs';\n\n/**\n * Parse Framer's special CSS variable format into a CSS token and a fallback.\n *\n * ```\n * `var(--foo, #fff)` => [`--foo`, '#fff']\n * ```\n *\n * @param current\n */\nconst splitCSSVariableRegex = \n// eslint-disable-next-line redos-detector/no-unsafe-regex -- false positive, as it can match a lot of words\n/^var\\(--(?:([\\w-]+)|([\\w-]+), ?([a-zA-Z\\d ()%#.,-]+))\\)/u;\nfunction parseCSSVariable(current) {\n    const match = splitCSSVariableRegex.exec(current);\n    if (!match)\n        return [,];\n    const [, token1, token2, fallback] = match;\n    return [`--${token1 !== null && token1 !== void 0 ? token1 : token2}`, fallback];\n}\nconst maxDepth = 4;\nfunction getVariableValue(current, element, depth = 1) {\n    invariant(depth <= maxDepth, `Max CSS variable fallback depth detected in property \"${current}\". This may indicate a circular fallback dependency.`);\n    const [token, fallback] = parseCSSVariable(current);\n    // No CSS variable detected\n    if (!token)\n        return;\n    // Attempt to read this CSS variable off the element\n    const resolved = window.getComputedStyle(element).getPropertyValue(token);\n    if (resolved) {\n        const trimmed = resolved.trim();\n        return isNumericalString(trimmed) ? parseFloat(trimmed) : trimmed;\n    }\n    return isCSSVariableToken(fallback)\n        ? getVariableValue(fallback, element, depth + 1)\n        : fallback;\n}\n\nexport { getVariableValue, parseCSSVariable };\n","const clamp = (min, max, v) => {\n    if (v > max)\n        return max;\n    if (v < min)\n        return min;\n    return v;\n};\n\nexport { clamp };\n","import { clamp } from '../../../utils/clamp.mjs';\n\nconst number = {\n    test: (v) => typeof v === \"number\",\n    parse: parseFloat,\n    transform: (v) => v,\n};\nconst alpha = {\n    ...number,\n    transform: (v) => clamp(0, 1, v),\n};\nconst scale = {\n    ...number,\n    default: 1,\n};\n\nexport { alpha, number, scale };\n","const createUnitType = (unit) => ({\n    test: (v) => typeof v === \"string\" && v.endsWith(unit) && v.split(\" \").length === 1,\n    parse: parseFloat,\n    transform: (v) => `${v}${unit}`,\n});\nconst degrees = /*@__PURE__*/ createUnitType(\"deg\");\nconst percent = /*@__PURE__*/ createUnitType(\"%\");\nconst px = /*@__PURE__*/ createUnitType(\"px\");\nconst vh = /*@__PURE__*/ createUnitType(\"vh\");\nconst vw = /*@__PURE__*/ createUnitType(\"vw\");\nconst progressPercentage = {\n    ...percent,\n    parse: (v) => percent.parse(v) / 100,\n    transform: (v) => percent.transform(v * 100),\n};\n\nexport { degrees, percent, progressPercentage, px, vh, vw };\n","import { transformPropOrder } from '../../html/utils/transform.mjs';\nimport { number } from '../../../value/types/numbers/index.mjs';\nimport { px } from '../../../value/types/numbers/units.mjs';\n\nconst positionalKeys = new Set([\n    \"width\",\n    \"height\",\n    \"top\",\n    \"left\",\n    \"right\",\n    \"bottom\",\n    \"x\",\n    \"y\",\n    \"translateX\",\n    \"translateY\",\n]);\nconst isNumOrPxType = (v) => v === number || v === px;\nconst getPosFromMatrix = (matrix, pos) => parseFloat(matrix.split(\", \")[pos]);\nconst getTranslateFromMatrix = (pos2, pos3) => (_bbox, { transform }) => {\n    if (transform === \"none\" || !transform)\n        return 0;\n    const matrix3d = transform.match(/^matrix3d\\((.+)\\)$/u);\n    if (matrix3d) {\n        return getPosFromMatrix(matrix3d[1], pos3);\n    }\n    else {\n        const matrix = transform.match(/^matrix\\((.+)\\)$/u);\n        if (matrix) {\n            return getPosFromMatrix(matrix[1], pos2);\n        }\n        else {\n            return 0;\n        }\n    }\n};\nconst transformKeys = new Set([\"x\", \"y\", \"z\"]);\nconst nonTranslationalTransformKeys = transformPropOrder.filter((key) => !transformKeys.has(key));\nfunction removeNonTranslationalTransform(visualElement) {\n    const removedTransforms = [];\n    nonTranslationalTransformKeys.forEach((key) => {\n        const value = visualElement.getValue(key);\n        if (value !== undefined) {\n            removedTransforms.push([key, value.get()]);\n            value.set(key.startsWith(\"scale\") ? 1 : 0);\n        }\n    });\n    return removedTransforms;\n}\nconst positionalValues = {\n    // Dimensions\n    width: ({ x }, { paddingLeft = \"0\", paddingRight = \"0\" }) => x.max - x.min - parseFloat(paddingLeft) - parseFloat(paddingRight),\n    height: ({ y }, { paddingTop = \"0\", paddingBottom = \"0\" }) => y.max - y.min - parseFloat(paddingTop) - parseFloat(paddingBottom),\n    top: (_bbox, { top }) => parseFloat(top),\n    left: (_bbox, { left }) => parseFloat(left),\n    bottom: ({ y }, { top }) => parseFloat(top) + (y.max - y.min),\n    right: ({ x }, { left }) => parseFloat(left) + (x.max - x.min),\n    // Transform\n    x: getTranslateFromMatrix(4, 13),\n    y: getTranslateFromMatrix(5, 14),\n};\n// Alias translate longform names\npositionalValues.translateX = positionalValues.x;\npositionalValues.translateY = positionalValues.y;\n\nexport { isNumOrPxType, positionalKeys, positionalValues, removeNonTranslationalTransform };\n","/**\n * Tests a provided value against a ValueType\n */\nconst testValueType = (v) => (type) => type.test(v);\n\nexport { testValueType };\n","/**\n * ValueType for \"auto\"\n */\nconst auto = {\n    test: (v) => v === \"auto\",\n    parse: (v) => v,\n};\n\nexport { auto };\n","import { number } from '../../../value/types/numbers/index.mjs';\nimport { px, percent, degrees, vw, vh } from '../../../value/types/numbers/units.mjs';\nimport { testValueType } from './test.mjs';\nimport { auto } from './type-auto.mjs';\n\n/**\n * A list of value types commonly used for dimensions\n */\nconst dimensionValueTypes = [number, px, percent, degrees, vw, vh, auto];\n/**\n * Tests a dimensional value against the list of dimension ValueTypes\n */\nconst findDimensionValueType = (v) => dimensionValueTypes.find(testValueType(v));\n\nexport { dimensionValueTypes, findDimensionValueType };\n","import { removeNonTranslationalTransform } from '../dom/utils/unit-conversion.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\nconst toResolve = new Set();\nlet isScheduled = false;\nlet anyNeedsMeasurement = false;\nfunction measureAllKeyframes() {\n    if (anyNeedsMeasurement) {\n        const resolversToMeasure = Array.from(toResolve).filter((resolver) => resolver.needsMeasurement);\n        const elementsToMeasure = new Set(resolversToMeasure.map((resolver) => resolver.element));\n        const transformsToRestore = new Map();\n        /**\n         * Write pass\n         * If we're measuring elements we want to remove bounding box-changing transforms.\n         */\n        elementsToMeasure.forEach((element) => {\n            const removedTransforms = removeNonTranslationalTransform(element);\n            if (!removedTransforms.length)\n                return;\n            transformsToRestore.set(element, removedTransforms);\n            element.render();\n        });\n        // Read\n        resolversToMeasure.forEach((resolver) => resolver.measureInitialState());\n        // Write\n        elementsToMeasure.forEach((element) => {\n            element.render();\n            const restore = transformsToRestore.get(element);\n            if (restore) {\n                restore.forEach(([key, value]) => {\n                    var _a;\n                    (_a = element.getValue(key)) === null || _a === void 0 ? void 0 : _a.set(value);\n                });\n            }\n        });\n        // Read\n        resolversToMeasure.forEach((resolver) => resolver.measureEndState());\n        // Write\n        resolversToMeasure.forEach((resolver) => {\n            if (resolver.suspendedScrollY !== undefined) {\n                window.scrollTo(0, resolver.suspendedScrollY);\n            }\n        });\n    }\n    anyNeedsMeasurement = false;\n    isScheduled = false;\n    toResolve.forEach((resolver) => resolver.complete());\n    toResolve.clear();\n}\nfunction readAllKeyframes() {\n    toResolve.forEach((resolver) => {\n        resolver.readKeyframes();\n        if (resolver.needsMeasurement) {\n            anyNeedsMeasurement = true;\n        }\n    });\n}\nfunction flushKeyframeResolvers() {\n    readAllKeyframes();\n    measureAllKeyframes();\n}\nclass KeyframeResolver {\n    constructor(unresolvedKeyframes, onComplete, name, motionValue, element, isAsync = false) {\n        /**\n         * Track whether this resolver has completed. Once complete, it never\n         * needs to attempt keyframe resolution again.\n         */\n        this.isComplete = false;\n        /**\n         * Track whether this resolver is async. If it is, it'll be added to the\n         * resolver queue and flushed in the next frame. Resolvers that aren't going\n         * to trigger read/write thrashing don't need to be async.\n         */\n        this.isAsync = false;\n        /**\n         * Track whether this resolver needs to perform a measurement\n         * to resolve its keyframes.\n         */\n        this.needsMeasurement = false;\n        /**\n         * Track whether this resolver is currently scheduled to resolve\n         * to allow it to be cancelled and resumed externally.\n         */\n        this.isScheduled = false;\n        this.unresolvedKeyframes = [...unresolvedKeyframes];\n        this.onComplete = onComplete;\n        this.name = name;\n        this.motionValue = motionValue;\n        this.element = element;\n        this.isAsync = isAsync;\n    }\n    scheduleResolve() {\n        this.isScheduled = true;\n        if (this.isAsync) {\n            toResolve.add(this);\n            if (!isScheduled) {\n                isScheduled = true;\n                frame.read(readAllKeyframes);\n                frame.resolveKeyframes(measureAllKeyframes);\n            }\n        }\n        else {\n            this.readKeyframes();\n            this.complete();\n        }\n    }\n    readKeyframes() {\n        const { unresolvedKeyframes, name, element, motionValue } = this;\n        /**\n         * If a keyframe is null, we hydrate it either by reading it from\n         * the instance, or propagating from previous keyframes.\n         */\n        for (let i = 0; i < unresolvedKeyframes.length; i++) {\n            if (unresolvedKeyframes[i] === null) {\n                /**\n                 * If the first keyframe is null, we need to find its value by sampling the element\n                 */\n                if (i === 0) {\n                    const currentValue = motionValue === null || motionValue === void 0 ? void 0 : motionValue.get();\n                    const finalKeyframe = unresolvedKeyframes[unresolvedKeyframes.length - 1];\n                    if (currentValue !== undefined) {\n                        unresolvedKeyframes[0] = currentValue;\n                    }\n                    else if (element && name) {\n                        const valueAsRead = element.readValue(name, finalKeyframe);\n                        if (valueAsRead !== undefined && valueAsRead !== null) {\n                            unresolvedKeyframes[0] = valueAsRead;\n                        }\n                    }\n                    if (unresolvedKeyframes[0] === undefined) {\n                        unresolvedKeyframes[0] = finalKeyframe;\n                    }\n                    if (motionValue && currentValue === undefined) {\n                        motionValue.set(unresolvedKeyframes[0]);\n                    }\n                }\n                else {\n                    unresolvedKeyframes[i] = unresolvedKeyframes[i - 1];\n                }\n            }\n        }\n    }\n    setFinalKeyframe() { }\n    measureInitialState() { }\n    renderEndStyles() { }\n    measureEndState() { }\n    complete() {\n        this.isComplete = true;\n        this.onComplete(this.unresolvedKeyframes, this.finalKeyframe);\n        toResolve.delete(this);\n    }\n    cancel() {\n        if (!this.isComplete) {\n            this.isScheduled = false;\n            toResolve.delete(this);\n        }\n    }\n    resume() {\n        if (!this.isComplete)\n            this.scheduleResolve();\n    }\n}\n\nexport { KeyframeResolver, flushKeyframeResolvers };\n","// If this number is a decimal, make it just five decimal places\n// to avoid exponents\nconst sanitize = (v) => Math.round(v * 100000) / 100000;\n\nexport { sanitize };\n","const floatRegex = /-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/gu;\n\nexport { floatRegex };\n","function isNullish(v) {\n    return v == null;\n}\n\nexport { isNullish };\n","const singleColorRegex = /^(?:#[\\da-f]{3,8}|(?:rgb|hsl)a?\\((?:-?[\\d.]+%?[,\\s]+){2}-?[\\d.]+%?\\s*(?:[,/]\\s*)?(?:\\b\\d+(?:\\.\\d+)?|\\.\\d+)?%?\\))$/iu;\n\nexport { singleColorRegex };\n","import { floatRegex } from '../utils/float-regex.mjs';\nimport { isNullish } from '../utils/is-nullish.mjs';\nimport { singleColorRegex } from '../utils/single-color-regex.mjs';\n\n/**\n * Returns true if the provided string is a color, ie rgba(0,0,0,0) or #000,\n * but false if a number or multiple colors\n */\nconst isColorString = (type, testProp) => (v) => {\n    return Boolean((typeof v === \"string\" &&\n        singleColorRegex.test(v) &&\n        v.startsWith(type)) ||\n        (testProp &&\n            !isNullish(v) &&\n            Object.prototype.hasOwnProperty.call(v, testProp)));\n};\nconst splitColor = (aName, bName, cName) => (v) => {\n    if (typeof v !== \"string\")\n        return v;\n    const [a, b, c, alpha] = v.match(floatRegex);\n    return {\n        [aName]: parseFloat(a),\n        [bName]: parseFloat(b),\n        [cName]: parseFloat(c),\n        alpha: alpha !== undefined ? parseFloat(alpha) : 1,\n    };\n};\n\nexport { isColorString, splitColor };\n","import { clamp } from '../../../utils/clamp.mjs';\nimport { alpha, number } from '../numbers/index.mjs';\nimport { sanitize } from '../utils/sanitize.mjs';\nimport { isColorString, splitColor } from './utils.mjs';\n\nconst clampRgbUnit = (v) => clamp(0, 255, v);\nconst rgbUnit = {\n    ...number,\n    transform: (v) => Math.round(clampRgbUnit(v)),\n};\nconst rgba = {\n    test: /*@__PURE__*/ isColorString(\"rgb\", \"red\"),\n    parse: /*@__PURE__*/ splitColor(\"red\", \"green\", \"blue\"),\n    transform: ({ red, green, blue, alpha: alpha$1 = 1 }) => \"rgba(\" +\n        rgbUnit.transform(red) +\n        \", \" +\n        rgbUnit.transform(green) +\n        \", \" +\n        rgbUnit.transform(blue) +\n        \", \" +\n        sanitize(alpha.transform(alpha$1)) +\n        \")\",\n};\n\nexport { rgbUnit, rgba };\n","import { rgba } from './rgba.mjs';\nimport { isColorString } from './utils.mjs';\n\nfunction parseHex(v) {\n    let r = \"\";\n    let g = \"\";\n    let b = \"\";\n    let a = \"\";\n    // If we have 6 characters, ie #FF0000\n    if (v.length > 5) {\n        r = v.substring(1, 3);\n        g = v.substring(3, 5);\n        b = v.substring(5, 7);\n        a = v.substring(7, 9);\n        // Or we have 3 characters, ie #F00\n    }\n    else {\n        r = v.substring(1, 2);\n        g = v.substring(2, 3);\n        b = v.substring(3, 4);\n        a = v.substring(4, 5);\n        r += r;\n        g += g;\n        b += b;\n        a += a;\n    }\n    return {\n        red: parseInt(r, 16),\n        green: parseInt(g, 16),\n        blue: parseInt(b, 16),\n        alpha: a ? parseInt(a, 16) / 255 : 1,\n    };\n}\nconst hex = {\n    test: /*@__PURE__*/ isColorString(\"#\"),\n    parse: parseHex,\n    transform: rgba.transform,\n};\n\nexport { hex };\n","import { alpha } from '../numbers/index.mjs';\nimport { percent } from '../numbers/units.mjs';\nimport { sanitize } from '../utils/sanitize.mjs';\nimport { isColorString, splitColor } from './utils.mjs';\n\nconst hsla = {\n    test: /*@__PURE__*/ isColorString(\"hsl\", \"hue\"),\n    parse: /*@__PURE__*/ splitColor(\"hue\", \"saturation\", \"lightness\"),\n    transform: ({ hue, saturation, lightness, alpha: alpha$1 = 1 }) => {\n        return (\"hsla(\" +\n            Math.round(hue) +\n            \", \" +\n            percent.transform(sanitize(saturation)) +\n            \", \" +\n            percent.transform(sanitize(lightness)) +\n            \", \" +\n            sanitize(alpha.transform(alpha$1)) +\n            \")\");\n    },\n};\n\nexport { hsla };\n","import { hex } from './hex.mjs';\nimport { hsla } from './hsla.mjs';\nimport { rgba } from './rgba.mjs';\n\nconst color = {\n    test: (v) => rgba.test(v) || hex.test(v) || hsla.test(v),\n    parse: (v) => {\n        if (rgba.test(v)) {\n            return rgba.parse(v);\n        }\n        else if (hsla.test(v)) {\n            return hsla.parse(v);\n        }\n        else {\n            return hex.parse(v);\n        }\n    },\n    transform: (v) => {\n        return typeof v === \"string\"\n            ? v\n            : v.hasOwnProperty(\"red\")\n                ? rgba.transform(v)\n                : hsla.transform(v);\n    },\n};\n\nexport { color };\n","const colorRegex = /(?:#[\\da-f]{3,8}|(?:rgb|hsl)a?\\((?:-?[\\d.]+%?[,\\s]+){2}-?[\\d.]+%?\\s*(?:[,/]\\s*)?(?:\\b\\d+(?:\\.\\d+)?|\\.\\d+)?%?\\))/giu;\n\nexport { colorRegex };\n","import { color } from '../color/index.mjs';\nimport { colorRegex } from '../utils/color-regex.mjs';\nimport { floatRegex } from '../utils/float-regex.mjs';\nimport { sanitize } from '../utils/sanitize.mjs';\n\nfunction test(v) {\n    var _a, _b;\n    return (isNaN(v) &&\n        typeof v === \"string\" &&\n        (((_a = v.match(floatRegex)) === null || _a === void 0 ? void 0 : _a.length) || 0) +\n            (((_b = v.match(colorRegex)) === null || _b === void 0 ? void 0 : _b.length) || 0) >\n            0);\n}\nconst NUMBER_TOKEN = \"number\";\nconst COLOR_TOKEN = \"color\";\nconst VAR_TOKEN = \"var\";\nconst VAR_FUNCTION_TOKEN = \"var(\";\nconst SPLIT_TOKEN = \"${}\";\n// this regex consists of the `singleCssVariableRegex|rgbHSLValueRegex|digitRegex`\nconst complexRegex = /var\\s*\\(\\s*--(?:[\\w-]+\\s*|[\\w-]+\\s*,(?:\\s*[^)(\\s]|\\s*\\((?:[^)(]|\\([^)(]*\\))*\\))+\\s*)\\)|#[\\da-f]{3,8}|(?:rgb|hsl)a?\\((?:-?[\\d.]+%?[,\\s]+){2}-?[\\d.]+%?\\s*(?:[,/]\\s*)?(?:\\b\\d+(?:\\.\\d+)?|\\.\\d+)?%?\\)|-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/giu;\nfunction analyseComplexValue(value) {\n    const originalValue = value.toString();\n    const values = [];\n    const indexes = {\n        color: [],\n        number: [],\n        var: [],\n    };\n    const types = [];\n    let i = 0;\n    const tokenised = originalValue.replace(complexRegex, (parsedValue) => {\n        if (color.test(parsedValue)) {\n            indexes.color.push(i);\n            types.push(COLOR_TOKEN);\n            values.push(color.parse(parsedValue));\n        }\n        else if (parsedValue.startsWith(VAR_FUNCTION_TOKEN)) {\n            indexes.var.push(i);\n            types.push(VAR_TOKEN);\n            values.push(parsedValue);\n        }\n        else {\n            indexes.number.push(i);\n            types.push(NUMBER_TOKEN);\n            values.push(parseFloat(parsedValue));\n        }\n        ++i;\n        return SPLIT_TOKEN;\n    });\n    const split = tokenised.split(SPLIT_TOKEN);\n    return { values, split, indexes, types };\n}\nfunction parseComplexValue(v) {\n    return analyseComplexValue(v).values;\n}\nfunction createTransformer(source) {\n    const { split, types } = analyseComplexValue(source);\n    const numSections = split.length;\n    return (v) => {\n        let output = \"\";\n        for (let i = 0; i < numSections; i++) {\n            output += split[i];\n            if (v[i] !== undefined) {\n                const type = types[i];\n                if (type === NUMBER_TOKEN) {\n                    output += sanitize(v[i]);\n                }\n                else if (type === COLOR_TOKEN) {\n                    output += color.transform(v[i]);\n                }\n                else {\n                    output += v[i];\n                }\n            }\n        }\n        return output;\n    };\n}\nconst convertNumbersToZero = (v) => typeof v === \"number\" ? 0 : v;\nfunction getAnimatableNone(v) {\n    const parsed = parseComplexValue(v);\n    const transformer = createTransformer(v);\n    return transformer(parsed.map(convertNumbersToZero));\n}\nconst complex = {\n    test,\n    parse: parseComplexValue,\n    createTransformer,\n    getAnimatableNone,\n};\n\nexport { analyseComplexValue, complex };\n","import { complex } from './index.mjs';\nimport { floatRegex } from '../utils/float-regex.mjs';\n\n/**\n * Properties that should default to 1 or 100%\n */\nconst maxDefaults = new Set([\"brightness\", \"contrast\", \"saturate\", \"opacity\"]);\nfunction applyDefaultFilter(v) {\n    const [name, value] = v.slice(0, -1).split(\"(\");\n    if (name === \"drop-shadow\")\n        return v;\n    const [number] = value.match(floatRegex) || [];\n    if (!number)\n        return v;\n    const unit = value.replace(number, \"\");\n    let defaultValue = maxDefaults.has(name) ? 1 : 0;\n    if (number !== value)\n        defaultValue *= 100;\n    return name + \"(\" + defaultValue + unit + \")\";\n}\nconst functionRegex = /\\b([a-z-]*)\\(.*?\\)/gu;\nconst filter = {\n    ...complex,\n    getAnimatableNone: (v) => {\n        const functions = v.match(functionRegex);\n        return functions ? functions.map(applyDefaultFilter).join(\" \") : v;\n    },\n};\n\nexport { filter };\n","import { px } from '../../../value/types/numbers/units.mjs';\n\nconst browserNumberValueTypes = {\n    // Border props\n    borderWidth: px,\n    borderTopWidth: px,\n    borderRightWidth: px,\n    borderBottomWidth: px,\n    borderLeftWidth: px,\n    borderRadius: px,\n    radius: px,\n    borderTopLeftRadius: px,\n    borderTopRightRadius: px,\n    borderBottomRightRadius: px,\n    borderBottomLeftRadius: px,\n    // Positioning props\n    width: px,\n    maxWidth: px,\n    height: px,\n    maxHeight: px,\n    top: px,\n    right: px,\n    bottom: px,\n    left: px,\n    // Spacing props\n    padding: px,\n    paddingTop: px,\n    paddingRight: px,\n    paddingBottom: px,\n    paddingLeft: px,\n    margin: px,\n    marginTop: px,\n    marginRight: px,\n    marginBottom: px,\n    marginLeft: px,\n    // Misc\n    backgroundPositionX: px,\n    backgroundPositionY: px,\n};\n\nexport { browserNumberValueTypes };\n","import { scale, alpha } from '../../../value/types/numbers/index.mjs';\nimport { degrees, px, progressPercentage } from '../../../value/types/numbers/units.mjs';\n\nconst transformValueTypes = {\n    rotate: degrees,\n    rotateX: degrees,\n    rotateY: degrees,\n    rotateZ: degrees,\n    scale,\n    scaleX: scale,\n    scaleY: scale,\n    scaleZ: scale,\n    skew: degrees,\n    skewX: degrees,\n    skewY: degrees,\n    distance: px,\n    translateX: px,\n    translateY: px,\n    translateZ: px,\n    x: px,\n    y: px,\n    z: px,\n    perspective: px,\n    transformPerspective: px,\n    opacity: alpha,\n    originX: progressPercentage,\n    originY: progressPercentage,\n    originZ: px,\n};\n\nexport { transformValueTypes };\n","import { number } from '../../../value/types/numbers/index.mjs';\n\nconst int = {\n    ...number,\n    transform: Math.round,\n};\n\nexport { int };\n","import { alpha } from '../../../value/types/numbers/index.mjs';\nimport { px } from '../../../value/types/numbers/units.mjs';\nimport { browserNumberValueTypes } from './number-browser.mjs';\nimport { transformValueTypes } from './transform.mjs';\nimport { int } from './type-int.mjs';\n\nconst numberValueTypes = {\n    ...browserNumberValueTypes,\n    ...transformValueTypes,\n    zIndex: int,\n    size: px,\n    // SVG\n    fillOpacity: alpha,\n    strokeOpacity: alpha,\n    numOctaves: int,\n};\n\nexport { numberValueTypes };\n","import { color } from '../../../value/types/color/index.mjs';\nimport { filter } from '../../../value/types/complex/filter.mjs';\nimport { numberValueTypes } from './number.mjs';\n\n/**\n * A map of default value types for common values\n */\nconst defaultValueTypes = {\n    ...numberValueTypes,\n    // Color props\n    color,\n    backgroundColor: color,\n    outlineColor: color,\n    fill: color,\n    stroke: color,\n    // Border props\n    borderColor: color,\n    borderTopColor: color,\n    borderRightColor: color,\n    borderBottomColor: color,\n    borderLeftColor: color,\n    filter,\n    WebkitFilter: filter,\n};\n/**\n * Gets the default ValueType for the provided value key\n */\nconst getDefaultValueType = (key) => defaultValueTypes[key];\n\nexport { defaultValueTypes, getDefaultValueType };\n","import { complex } from '../../../value/types/complex/index.mjs';\nimport { filter } from '../../../value/types/complex/filter.mjs';\nimport { getDefaultValueType } from './defaults.mjs';\n\nfunction getAnimatableNone(key, value) {\n    let defaultValueType = getDefaultValueType(key);\n    if (defaultValueType !== filter)\n        defaultValueType = complex;\n    // If value is not recognised as animatable, ie \"none\", create an animatable version origin based on the target\n    return defaultValueType.getAnimatableNone\n        ? defaultValueType.getAnimatableNone(value)\n        : undefined;\n}\n\nexport { getAnimatableNone };\n","import { analyseComplexValue } from '../../../value/types/complex/index.mjs';\nimport { getAnimatableNone } from '../../dom/value-types/animatable-none.mjs';\n\n/**\n * If we encounter keyframes like \"none\" or \"0\" and we also have keyframes like\n * \"#fff\" or \"200px 200px\" we want to find a keyframe to serve as a template for\n * the \"none\" keyframes. In this case \"#fff\" or \"200px 200px\" - then these get turned into\n * zero equivalents, i.e. \"#fff0\" or \"0px 0px\".\n */\nconst invalidTemplates = new Set([\"auto\", \"none\", \"0\"]);\nfunction makeNoneKeyframesAnimatable(unresolvedKeyframes, noneKeyframeIndexes, name) {\n    let i = 0;\n    let animatableTemplate = undefined;\n    while (i < unresolvedKeyframes.length && !animatableTemplate) {\n        const keyframe = unresolvedKeyframes[i];\n        if (typeof keyframe === \"string\" &&\n            !invalidTemplates.has(keyframe) &&\n            analyseComplexValue(keyframe).values.length) {\n            animatableTemplate = unresolvedKeyframes[i];\n        }\n        i++;\n    }\n    if (animatableTemplate && name) {\n        for (const noneIndex of noneKeyframeIndexes) {\n            unresolvedKeyframes[noneIndex] = getAnimatableNone(name, animatableTemplate);\n        }\n    }\n}\n\nexport { makeNoneKeyframesAnimatable };\n","import { isNone } from '../../animation/utils/is-none.mjs';\nimport { getVariableValue } from './utils/css-variables-conversion.mjs';\nimport { isCSSVariableToken } from './utils/is-css-variable.mjs';\nimport { positionalKeys, isNumOrPxType, positionalValues } from './utils/unit-conversion.mjs';\nimport { findDimensionValueType } from './value-types/dimensions.mjs';\nimport { KeyframeResolver } from '../utils/KeyframesResolver.mjs';\nimport { makeNoneKeyframesAnimatable } from '../html/utils/make-none-animatable.mjs';\n\nclass DOMKeyframesResolver extends KeyframeResolver {\n    constructor(unresolvedKeyframes, onComplete, name, motionValue, element) {\n        super(unresolvedKeyframes, onComplete, name, motionValue, element, true);\n    }\n    readKeyframes() {\n        const { unresolvedKeyframes, element, name } = this;\n        if (!element || !element.current)\n            return;\n        super.readKeyframes();\n        /**\n         * If any keyframe is a CSS variable, we need to find its value by sampling the element\n         */\n        for (let i = 0; i < unresolvedKeyframes.length; i++) {\n            let keyframe = unresolvedKeyframes[i];\n            if (typeof keyframe === \"string\") {\n                keyframe = keyframe.trim();\n                if (isCSSVariableToken(keyframe)) {\n                    const resolved = getVariableValue(keyframe, element.current);\n                    if (resolved !== undefined) {\n                        unresolvedKeyframes[i] = resolved;\n                    }\n                    if (i === unresolvedKeyframes.length - 1) {\n                        this.finalKeyframe = keyframe;\n                    }\n                }\n            }\n        }\n        /**\n         * Resolve \"none\" values. We do this potentially twice - once before and once after measuring keyframes.\n         * This could be seen as inefficient but it's a trade-off to avoid measurements in more situations, which\n         * have a far bigger performance impact.\n         */\n        this.resolveNoneKeyframes();\n        /**\n         * Check to see if unit type has changed. If so schedule jobs that will\n         * temporarily set styles to the destination keyframes.\n         * Skip if we have more than two keyframes or this isn't a positional value.\n         * TODO: We can throw if there are multiple keyframes and the value type changes.\n         */\n        if (!positionalKeys.has(name) || unresolvedKeyframes.length !== 2) {\n            return;\n        }\n        const [origin, target] = unresolvedKeyframes;\n        const originType = findDimensionValueType(origin);\n        const targetType = findDimensionValueType(target);\n        /**\n         * Either we don't recognise these value types or we can animate between them.\n         */\n        if (originType === targetType)\n            return;\n        /**\n         * If both values are numbers or pixels, we can animate between them by\n         * converting them to numbers.\n         */\n        if (isNumOrPxType(originType) && isNumOrPxType(targetType)) {\n            for (let i = 0; i < unresolvedKeyframes.length; i++) {\n                const value = unresolvedKeyframes[i];\n                if (typeof value === \"string\") {\n                    unresolvedKeyframes[i] = parseFloat(value);\n                }\n            }\n        }\n        else {\n            /**\n             * Else, the only way to resolve this is by measuring the element.\n             */\n            this.needsMeasurement = true;\n        }\n    }\n    resolveNoneKeyframes() {\n        const { unresolvedKeyframes, name } = this;\n        const noneKeyframeIndexes = [];\n        for (let i = 0; i < unresolvedKeyframes.length; i++) {\n            if (isNone(unresolvedKeyframes[i])) {\n                noneKeyframeIndexes.push(i);\n            }\n        }\n        if (noneKeyframeIndexes.length) {\n            makeNoneKeyframesAnimatable(unresolvedKeyframes, noneKeyframeIndexes, name);\n        }\n    }\n    measureInitialState() {\n        const { element, unresolvedKeyframes, name } = this;\n        if (!element || !element.current)\n            return;\n        if (name === \"height\") {\n            this.suspendedScrollY = window.pageYOffset;\n        }\n        this.measuredOrigin = positionalValues[name](element.measureViewportBox(), window.getComputedStyle(element.current));\n        unresolvedKeyframes[0] = this.measuredOrigin;\n        // Set final key frame to measure after next render\n        const measureKeyframe = unresolvedKeyframes[unresolvedKeyframes.length - 1];\n        if (measureKeyframe !== undefined) {\n            element.getValue(name, measureKeyframe).jump(measureKeyframe, false);\n        }\n    }\n    measureEndState() {\n        var _a;\n        const { element, name, unresolvedKeyframes } = this;\n        if (!element || !element.current)\n            return;\n        const value = element.getValue(name);\n        value && value.jump(this.measuredOrigin, false);\n        const finalKeyframeIndex = unresolvedKeyframes.length - 1;\n        const finalKeyframe = unresolvedKeyframes[finalKeyframeIndex];\n        unresolvedKeyframes[finalKeyframeIndex] = positionalValues[name](element.measureViewportBox(), window.getComputedStyle(element.current));\n        if (finalKeyframe !== null && this.finalKeyframe === undefined) {\n            this.finalKeyframe = finalKeyframe;\n        }\n        // If we removed transform values, reapply them before the next render\n        if ((_a = this.removedTransforms) === null || _a === void 0 ? void 0 : _a.length) {\n            this.removedTransforms.forEach(([unsetTransformName, unsetTransformValue]) => {\n                element\n                    .getValue(unsetTransformName)\n                    .set(unsetTransformValue);\n            });\n        }\n        this.resolveNoneKeyframes();\n    }\n}\n\nexport { DOMKeyframesResolver };\n","function isGenerator(type) {\n    return typeof type === \"function\";\n}\n\nexport { isGenerator };\n","import { MotionGlobalConfig } from '../utils/GlobalConfig.mjs';\nimport { frameData } from './frame.mjs';\n\nlet now;\nfunction clearTime() {\n    now = undefined;\n}\n/**\n * An eventloop-synchronous alternative to performance.now().\n *\n * Ensures that time measurements remain consistent within a synchronous context.\n * Usually calling performance.now() twice within the same synchronous context\n * will return different values which isn't useful for animations when we're usually\n * trying to sync animations to the same frame.\n */\nconst time = {\n    now: () => {\n        if (now === undefined) {\n            time.set(frameData.isProcessing || MotionGlobalConfig.useManualTiming\n                ? frameData.timestamp\n                : performance.now());\n        }\n        return now;\n    },\n    set: (newTime) => {\n        now = newTime;\n        queueMicrotask(clearTime);\n    },\n};\n\nexport { time };\n","import { complex } from '../../value/types/complex/index.mjs';\n\n/**\n * Check if a value is animatable. Examples:\n *\n * ✅: 100, \"100px\", \"#fff\"\n * ❌: \"block\", \"url(2.jpg)\"\n * @param value\n *\n * @internal\n */\nconst isAnimatable = (value, name) => {\n    // If the list of keys tat might be non-animatable grows, replace with Set\n    if (name === \"zIndex\")\n        return false;\n    // If it's a number or a keyframes array, we can animate it. We might at some point\n    // need to do a deep isAnimatable check of keyframes, or let Popmotion handle this,\n    // but for now lets leave it like this for performance reasons\n    if (typeof value === \"number\" || Array.isArray(value))\n        return true;\n    if (typeof value === \"string\" && // It's animatable if we have a string\n        (complex.test(value) || value === \"0\") && // And it contains numbers and/or colors\n        !value.startsWith(\"url(\") // Unless it starts with \"url(\"\n    ) {\n        return true;\n    }\n    return false;\n};\n\nexport { isAnimatable };\n","import { warning } from 'motion-utils';\nimport { isGenerator } from '../../generators/utils/is-generator.mjs';\nimport { isAnimatable } from '../../utils/is-animatable.mjs';\n\nfunction hasKeyframesChanged(keyframes) {\n    const current = keyframes[0];\n    if (keyframes.length === 1)\n        return true;\n    for (let i = 0; i < keyframes.length; i++) {\n        if (keyframes[i] !== current)\n            return true;\n    }\n}\nfunction canAnimate(keyframes, name, type, velocity) {\n    /**\n     * Check if we're able to animate between the start and end keyframes,\n     * and throw a warning if we're attempting to animate between one that's\n     * animatable and another that isn't.\n     */\n    const originKeyframe = keyframes[0];\n    if (originKeyframe === null)\n        return false;\n    /**\n     * These aren't traditionally animatable but we do support them.\n     * In future we could look into making this more generic or replacing\n     * this function with mix() === mixImmediate\n     */\n    if (name === \"display\" || name === \"visibility\")\n        return true;\n    const targetKeyframe = keyframes[keyframes.length - 1];\n    const isOriginAnimatable = isAnimatable(originKeyframe, name);\n    const isTargetAnimatable = isAnimatable(targetKeyframe, name);\n    warning(isOriginAnimatable === isTargetAnimatable, `You are trying to animate ${name} from \"${originKeyframe}\" to \"${targetKeyframe}\". ${originKeyframe} is not an animatable value - to enable this animation set ${originKeyframe} to a value animatable to ${targetKeyframe} via the \\`style\\` property.`);\n    // Always skip if any of these are true\n    if (!isOriginAnimatable || !isTargetAnimatable) {\n        return false;\n    }\n    return (hasKeyframesChanged(keyframes) ||\n        ((type === \"spring\" || isGenerator(type)) && velocity));\n}\n\nexport { canAnimate };\n","import { time } from '../../frameloop/sync-time.mjs';\nimport { flushKeyframeResolvers } from '../../render/utils/KeyframesResolver.mjs';\nimport { instantAnimationState } from '../../utils/use-instant-transition-state.mjs';\nimport { canAnimate } from './utils/can-animate.mjs';\nimport { getFinalKeyframe } from './waapi/utils/get-final-keyframe.mjs';\n\n/**\n * Maximum time allowed between an animation being created and it being\n * resolved for us to use the latter as the start time.\n *\n * This is to ensure that while we prefer to \"start\" an animation as soon\n * as it's triggered, we also want to avoid a visual jump if there's a big delay\n * between these two moments.\n */\nconst MAX_RESOLVE_DELAY = 40;\nclass BaseAnimation {\n    constructor({ autoplay = true, delay = 0, type = \"keyframes\", repeat = 0, repeatDelay = 0, repeatType = \"loop\", ...options }) {\n        // Track whether the animation has been stopped. Stopped animations won't restart.\n        this.isStopped = false;\n        this.hasAttemptedResolve = false;\n        this.createdAt = time.now();\n        this.options = {\n            autoplay,\n            delay,\n            type,\n            repeat,\n            repeatDelay,\n            repeatType,\n            ...options,\n        };\n        this.updateFinishedPromise();\n    }\n    /**\n     * This method uses the createdAt and resolvedAt to calculate the\n     * animation startTime. *Ideally*, we would use the createdAt time as t=0\n     * as the following frame would then be the first frame of the animation in\n     * progress, which would feel snappier.\n     *\n     * However, if there's a delay (main thread work) between the creation of\n     * the animation and the first commited frame, we prefer to use resolvedAt\n     * to avoid a sudden jump into the animation.\n     */\n    calcStartTime() {\n        if (!this.resolvedAt)\n            return this.createdAt;\n        return this.resolvedAt - this.createdAt > MAX_RESOLVE_DELAY\n            ? this.resolvedAt\n            : this.createdAt;\n    }\n    /**\n     * A getter for resolved data. If keyframes are not yet resolved, accessing\n     * this.resolved will synchronously flush all pending keyframe resolvers.\n     * This is a deoptimisation, but at its worst still batches read/writes.\n     */\n    get resolved() {\n        if (!this._resolved && !this.hasAttemptedResolve) {\n            flushKeyframeResolvers();\n        }\n        return this._resolved;\n    }\n    /**\n     * A method to be called when the keyframes resolver completes. This method\n     * will check if its possible to run the animation and, if not, skip it.\n     * Otherwise, it will call initPlayback on the implementing class.\n     */\n    onKeyframesResolved(keyframes, finalKeyframe) {\n        this.resolvedAt = time.now();\n        this.hasAttemptedResolve = true;\n        const { name, type, velocity, delay, onComplete, onUpdate, isGenerator, } = this.options;\n        /**\n         * If we can't animate this value with the resolved keyframes\n         * then we should complete it immediately.\n         */\n        if (!isGenerator && !canAnimate(keyframes, name, type, velocity)) {\n            // Finish immediately\n            if (instantAnimationState.current || !delay) {\n                onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(getFinalKeyframe(keyframes, this.options, finalKeyframe));\n                onComplete === null || onComplete === void 0 ? void 0 : onComplete();\n                this.resolveFinishedPromise();\n                return;\n            }\n            // Finish after a delay\n            else {\n                this.options.duration = 0;\n            }\n        }\n        const resolvedAnimation = this.initPlayback(keyframes, finalKeyframe);\n        if (resolvedAnimation === false)\n            return;\n        this._resolved = {\n            keyframes,\n            finalKeyframe,\n            ...resolvedAnimation,\n        };\n        this.onPostResolved();\n    }\n    onPostResolved() { }\n    /**\n     * Allows the returned animation to be awaited or promise-chained. Currently\n     * resolves when the animation finishes at all but in a future update could/should\n     * reject if its cancels.\n     */\n    then(resolve, reject) {\n        return this.currentFinishedPromise.then(resolve, reject);\n    }\n    flatten() {\n        this.options.type = \"keyframes\";\n        this.options.ease = \"linear\";\n    }\n    updateFinishedPromise() {\n        this.currentFinishedPromise = new Promise((resolve) => {\n            this.resolveFinishedPromise = resolve;\n        });\n    }\n}\n\nexport { BaseAnimation };\n","/*\n  Progress within given range\n\n  Given a lower limit and an upper limit, we return the progress\n  (expressed as a number 0-1) represented by the given value, and\n  limit that progress to within 0-1.\n\n  @param [number]: Lower limit\n  @param [number]: Upper limit\n  @param [number]: Value to find progress within given range\n  @return [number]: Progress of value within range as expressed 0-1\n*/\nconst progress = (from, to, value) => {\n    const toFromDifference = to - from;\n    return toFromDifference === 0 ? 1 : (value - from) / toFromDifference;\n};\n\nexport { progress };\n","import { progress } from '../../../../utils/progress.mjs';\n\nconst generateLinearEasing = (easing, duration, // as milliseconds\nresolution = 10 // as milliseconds\n) => {\n    let points = \"\";\n    const numPoints = Math.max(Math.round(duration / resolution), 2);\n    for (let i = 0; i < numPoints; i++) {\n        points += easing(progress(0, numPoints - 1, i)) + \", \";\n    }\n    return `linear(${points.substring(0, points.length - 2)})`;\n};\n\nexport { generateLinearEasing };\n","/*\n  Convert velocity into velocity per second\n\n  @param [number]: Unit per frame\n  @param [number]: Frame duration in ms\n*/\nfunction velocityPerSecond(velocity, frameDuration) {\n    return frameDuration ? velocity * (1000 / frameDuration) : 0;\n}\n\nexport { velocityPerSecond };\n","import { velocityPerSecond } from '../../../utils/velocity-per-second.mjs';\n\nconst velocitySampleDuration = 5; // ms\nfunction calcGeneratorVelocity(resolveValue, t, current) {\n    const prevT = Math.max(t - velocitySampleDuration, 0);\n    return velocityPerSecond(current - resolveValue(prevT), t - prevT);\n}\n\nexport { calcGeneratorVelocity };\n","const springDefaults = {\n    // Default spring physics\n    stiffness: 100,\n    damping: 10,\n    mass: 1.0,\n    velocity: 0.0,\n    // Default duration/bounce-based options\n    duration: 800, // in ms\n    bounce: 0.3,\n    visualDuration: 0.3, // in seconds\n    // Rest thresholds\n    restSpeed: {\n        granular: 0.01,\n        default: 2,\n    },\n    restDelta: {\n        granular: 0.005,\n        default: 0.5,\n    },\n    // Limits\n    minDuration: 0.01, // in seconds\n    maxDuration: 10.0, // in seconds\n    minDamping: 0.05,\n    maxDamping: 1,\n};\n\nexport { springDefaults };\n","import { warning } from 'motion-utils';\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { secondsToMilliseconds, millisecondsToSeconds } from '../../../utils/time-conversion.mjs';\nimport { springDefaults } from './defaults.mjs';\n\nconst safeMin = 0.001;\nfunction findSpring({ duration = springDefaults.duration, bounce = springDefaults.bounce, velocity = springDefaults.velocity, mass = springDefaults.mass, }) {\n    let envelope;\n    let derivative;\n    warning(duration <= secondsToMilliseconds(springDefaults.maxDuration), \"Spring duration must be 10 seconds or less\");\n    let dampingRatio = 1 - bounce;\n    /**\n     * Restrict dampingRatio and duration to within acceptable ranges.\n     */\n    dampingRatio = clamp(springDefaults.minDamping, springDefaults.maxDamping, dampingRatio);\n    duration = clamp(springDefaults.minDuration, springDefaults.maxDuration, millisecondsToSeconds(duration));\n    if (dampingRatio < 1) {\n        /**\n         * Underdamped spring\n         */\n        envelope = (undampedFreq) => {\n            const exponentialDecay = undampedFreq * dampingRatio;\n            const delta = exponentialDecay * duration;\n            const a = exponentialDecay - velocity;\n            const b = calcAngularFreq(undampedFreq, dampingRatio);\n            const c = Math.exp(-delta);\n            return safeMin - (a / b) * c;\n        };\n        derivative = (undampedFreq) => {\n            const exponentialDecay = undampedFreq * dampingRatio;\n            const delta = exponentialDecay * duration;\n            const d = delta * velocity + velocity;\n            const e = Math.pow(dampingRatio, 2) * Math.pow(undampedFreq, 2) * duration;\n            const f = Math.exp(-delta);\n            const g = calcAngularFreq(Math.pow(undampedFreq, 2), dampingRatio);\n            const factor = -envelope(undampedFreq) + safeMin > 0 ? -1 : 1;\n            return (factor * ((d - e) * f)) / g;\n        };\n    }\n    else {\n        /**\n         * Critically-damped spring\n         */\n        envelope = (undampedFreq) => {\n            const a = Math.exp(-undampedFreq * duration);\n            const b = (undampedFreq - velocity) * duration + 1;\n            return -safeMin + a * b;\n        };\n        derivative = (undampedFreq) => {\n            const a = Math.exp(-undampedFreq * duration);\n            const b = (velocity - undampedFreq) * (duration * duration);\n            return a * b;\n        };\n    }\n    const initialGuess = 5 / duration;\n    const undampedFreq = approximateRoot(envelope, derivative, initialGuess);\n    duration = secondsToMilliseconds(duration);\n    if (isNaN(undampedFreq)) {\n        return {\n            stiffness: springDefaults.stiffness,\n            damping: springDefaults.damping,\n            duration,\n        };\n    }\n    else {\n        const stiffness = Math.pow(undampedFreq, 2) * mass;\n        return {\n            stiffness,\n            damping: dampingRatio * 2 * Math.sqrt(mass * stiffness),\n            duration,\n        };\n    }\n}\nconst rootIterations = 12;\nfunction approximateRoot(envelope, derivative, initialGuess) {\n    let result = initialGuess;\n    for (let i = 1; i < rootIterations; i++) {\n        result = result - envelope(result) / derivative(result);\n    }\n    return result;\n}\nfunction calcAngularFreq(undampedFreq, dampingRatio) {\n    return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio);\n}\n\nexport { calcAngularFreq, findSpring };\n","/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */\nconst maxGeneratorDuration = 20000;\nfunction calcGeneratorDuration(generator) {\n    let duration = 0;\n    const timeStep = 50;\n    let state = generator.next(duration);\n    while (!state.done && duration < maxGeneratorDuration) {\n        duration += timeStep;\n        state = generator.next(duration);\n    }\n    return duration >= maxGeneratorDuration ? Infinity : duration;\n}\n\nexport { calcGeneratorDuration, maxGeneratorDuration };\n","import { generateLinearEasing } from '../../animators/waapi/utils/linear.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../../utils/time-conversion.mjs';\nimport { calcGeneratorVelocity } from '../utils/velocity.mjs';\nimport { findSpring, calcAngularFreq } from './find.mjs';\nimport { calcGeneratorDuration, maxGeneratorDuration } from '../utils/calc-duration.mjs';\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { springDefaults } from './defaults.mjs';\n\nconst durationKeys = [\"duration\", \"bounce\"];\nconst physicsKeys = [\"stiffness\", \"damping\", \"mass\"];\nfunction isSpringType(options, keys) {\n    return keys.some((key) => options[key] !== undefined);\n}\nfunction getSpringOptions(options) {\n    let springOptions = {\n        velocity: springDefaults.velocity,\n        stiffness: springDefaults.stiffness,\n        damping: springDefaults.damping,\n        mass: springDefaults.mass,\n        isResolvedFromDuration: false,\n        ...options,\n    };\n    // stiffness/damping/mass overrides duration/bounce\n    if (!isSpringType(options, physicsKeys) &&\n        isSpringType(options, durationKeys)) {\n        if (options.visualDuration) {\n            const visualDuration = options.visualDuration;\n            const root = (2 * Math.PI) / (visualDuration * 1.2);\n            const stiffness = root * root;\n            const damping = 2 * clamp(0.05, 1, 1 - options.bounce) * Math.sqrt(stiffness);\n            springOptions = {\n                ...springOptions,\n                mass: springDefaults.mass,\n                stiffness,\n                damping,\n            };\n        }\n        else {\n            const derived = findSpring(options);\n            springOptions = {\n                ...springOptions,\n                ...derived,\n                mass: springDefaults.mass,\n            };\n            springOptions.isResolvedFromDuration = true;\n        }\n    }\n    return springOptions;\n}\nfunction spring(optionsOrVisualDuration = springDefaults.visualDuration, bounce = springDefaults.bounce) {\n    const options = typeof optionsOrVisualDuration !== \"object\"\n        ? {\n            visualDuration: optionsOrVisualDuration,\n            keyframes: [0, 1],\n            bounce,\n        }\n        : optionsOrVisualDuration;\n    let { restSpeed, restDelta } = options;\n    const origin = options.keyframes[0];\n    const target = options.keyframes[options.keyframes.length - 1];\n    /**\n     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n     * to reduce GC during animation.\n     */\n    const state = { done: false, value: origin };\n    const { stiffness, damping, mass, duration, velocity, isResolvedFromDuration, } = getSpringOptions({\n        ...options,\n        velocity: -millisecondsToSeconds(options.velocity || 0),\n    });\n    const initialVelocity = velocity || 0.0;\n    const dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));\n    const initialDelta = target - origin;\n    const undampedAngularFreq = millisecondsToSeconds(Math.sqrt(stiffness / mass));\n    /**\n     * If we're working on a granular scale, use smaller defaults for determining\n     * when the spring is finished.\n     *\n     * These defaults have been selected emprically based on what strikes a good\n     * ratio between feeling good and finishing as soon as changes are imperceptible.\n     */\n    const isGranularScale = Math.abs(initialDelta) < 5;\n    restSpeed || (restSpeed = isGranularScale\n        ? springDefaults.restSpeed.granular\n        : springDefaults.restSpeed.default);\n    restDelta || (restDelta = isGranularScale\n        ? springDefaults.restDelta.granular\n        : springDefaults.restDelta.default);\n    let resolveSpring;\n    if (dampingRatio < 1) {\n        const angularFreq = calcAngularFreq(undampedAngularFreq, dampingRatio);\n        // Underdamped spring\n        resolveSpring = (t) => {\n            const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n            return (target -\n                envelope *\n                    (((initialVelocity +\n                        dampingRatio * undampedAngularFreq * initialDelta) /\n                        angularFreq) *\n                        Math.sin(angularFreq * t) +\n                        initialDelta * Math.cos(angularFreq * t)));\n        };\n    }\n    else if (dampingRatio === 1) {\n        // Critically damped spring\n        resolveSpring = (t) => target -\n            Math.exp(-undampedAngularFreq * t) *\n                (initialDelta +\n                    (initialVelocity + undampedAngularFreq * initialDelta) * t);\n    }\n    else {\n        // Overdamped spring\n        const dampedAngularFreq = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);\n        resolveSpring = (t) => {\n            const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n            // When performing sinh or cosh values can hit Infinity so we cap them here\n            const freqForT = Math.min(dampedAngularFreq * t, 300);\n            return (target -\n                (envelope *\n                    ((initialVelocity +\n                        dampingRatio * undampedAngularFreq * initialDelta) *\n                        Math.sinh(freqForT) +\n                        dampedAngularFreq *\n                            initialDelta *\n                            Math.cosh(freqForT))) /\n                    dampedAngularFreq);\n        };\n    }\n    const generator = {\n        calculatedDuration: isResolvedFromDuration ? duration || null : null,\n        next: (t) => {\n            const current = resolveSpring(t);\n            if (!isResolvedFromDuration) {\n                let currentVelocity = 0.0;\n                /**\n                 * We only need to calculate velocity for under-damped springs\n                 * as over- and critically-damped springs can't overshoot, so\n                 * checking only for displacement is enough.\n                 */\n                if (dampingRatio < 1) {\n                    currentVelocity =\n                        t === 0\n                            ? secondsToMilliseconds(initialVelocity)\n                            : calcGeneratorVelocity(resolveSpring, t, current);\n                }\n                const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;\n                const isBelowDisplacementThreshold = Math.abs(target - current) <= restDelta;\n                state.done =\n                    isBelowVelocityThreshold && isBelowDisplacementThreshold;\n            }\n            else {\n                state.done = t >= duration;\n            }\n            state.value = state.done ? target : current;\n            return state;\n        },\n        toString: () => {\n            const calculatedDuration = Math.min(calcGeneratorDuration(generator), maxGeneratorDuration);\n            const easing = generateLinearEasing((progress) => generator.next(calculatedDuration * progress).value, calculatedDuration, 30);\n            return calculatedDuration + \"ms \" + easing;\n        },\n    };\n    return generator;\n}\n\nexport { spring };\n","import { spring } from './spring/index.mjs';\nimport { calcGeneratorVelocity } from './utils/velocity.mjs';\n\nfunction inertia({ keyframes, velocity = 0.0, power = 0.8, timeConstant = 325, bounceDamping = 10, bounceStiffness = 500, modifyTarget, min, max, restDelta = 0.5, restSpeed, }) {\n    const origin = keyframes[0];\n    const state = {\n        done: false,\n        value: origin,\n    };\n    const isOutOfBounds = (v) => (min !== undefined && v < min) || (max !== undefined && v > max);\n    const nearestBoundary = (v) => {\n        if (min === undefined)\n            return max;\n        if (max === undefined)\n            return min;\n        return Math.abs(min - v) < Math.abs(max - v) ? min : max;\n    };\n    let amplitude = power * velocity;\n    const ideal = origin + amplitude;\n    const target = modifyTarget === undefined ? ideal : modifyTarget(ideal);\n    /**\n     * If the target has changed we need to re-calculate the amplitude, otherwise\n     * the animation will start from the wrong position.\n     */\n    if (target !== ideal)\n        amplitude = target - origin;\n    const calcDelta = (t) => -amplitude * Math.exp(-t / timeConstant);\n    const calcLatest = (t) => target + calcDelta(t);\n    const applyFriction = (t) => {\n        const delta = calcDelta(t);\n        const latest = calcLatest(t);\n        state.done = Math.abs(delta) <= restDelta;\n        state.value = state.done ? target : latest;\n    };\n    /**\n     * Ideally this would resolve for t in a stateless way, we could\n     * do that by always precalculating the animation but as we know\n     * this will be done anyway we can assume that spring will\n     * be discovered during that.\n     */\n    let timeReachedBoundary;\n    let spring$1;\n    const checkCatchBoundary = (t) => {\n        if (!isOutOfBounds(state.value))\n            return;\n        timeReachedBoundary = t;\n        spring$1 = spring({\n            keyframes: [state.value, nearestBoundary(state.value)],\n            velocity: calcGeneratorVelocity(calcLatest, t, state.value), // TODO: This should be passing * 1000\n            damping: bounceDamping,\n            stiffness: bounceStiffness,\n            restDelta,\n            restSpeed,\n        });\n    };\n    checkCatchBoundary(0);\n    return {\n        calculatedDuration: null,\n        next: (t) => {\n            /**\n             * We need to resolve the friction to figure out if we need a\n             * spring but we don't want to do this twice per frame. So here\n             * we flag if we updated for this frame and later if we did\n             * we can skip doing it again.\n             */\n            let hasUpdatedFrame = false;\n            if (!spring$1 && timeReachedBoundary === undefined) {\n                hasUpdatedFrame = true;\n                applyFriction(t);\n                checkCatchBoundary(t);\n            }\n            /**\n             * If we have a spring and the provided t is beyond the moment the friction\n             * animation crossed the min/max boundary, use the spring.\n             */\n            if (timeReachedBoundary !== undefined && t >= timeReachedBoundary) {\n                return spring$1.next(t - timeReachedBoundary);\n            }\n            else {\n                !hasUpdatedFrame && applyFriction(t);\n                return state;\n            }\n        },\n    };\n}\n\nexport { inertia };\n","import { cubicBezier } from './cubic-bezier.mjs';\n\nconst easeIn = /*@__PURE__*/ cubicBezier(0.42, 0, 1, 1);\nconst easeOut = /*@__PURE__*/ cubicBezier(0, 0, 0.58, 1);\nconst easeInOut = /*@__PURE__*/ cubicBezier(0.42, 0, 0.58, 1);\n\nexport { easeIn, easeInOut, easeOut };\n","const isEasingArray = (ease) => {\n    return Array.isArray(ease) && typeof ease[0] !== \"number\";\n};\n\nexport { isEasingArray };\n","const isBezierDefinition = (easing) => Array.isArray(easing) && typeof easing[0] === \"number\";\n\nexport { isBezierDefinition };\n","import { invariant, noop } from 'motion-utils';\nimport { cubicBezier } from '../cubic-bezier.mjs';\nimport { easeIn, easeInOut, easeOut } from '../ease.mjs';\nimport { circIn, circInOut, circOut } from '../circ.mjs';\nimport { backIn, backInOut, backOut } from '../back.mjs';\nimport { anticipate } from '../anticipate.mjs';\nimport { isBezierDefinition } from './is-bezier-definition.mjs';\n\nconst easingLookup = {\n    linear: noop,\n    easeIn,\n    easeInOut,\n    easeOut,\n    circIn,\n    circInOut,\n    circOut,\n    backIn,\n    backInOut,\n    backOut,\n    anticipate,\n};\nconst easingDefinitionToFunction = (definition) => {\n    if (isBezierDefinition(definition)) {\n        // If cubic bezier definition, create bezier curve\n        invariant(definition.length === 4, `Cubic bezier arrays must contain four numerical values.`);\n        const [x1, y1, x2, y2] = definition;\n        return cubicBezier(x1, y1, x2, y2);\n    }\n    else if (typeof definition === \"string\") {\n        // Else lookup from table\n        invariant(easingLookup[definition] !== undefined, `Invalid easing type '${definition}'`);\n        return easingLookup[definition];\n    }\n    return definition;\n};\n\nexport { easingDefinitionToFunction };\n","/**\n * Pipe\n * Compose other transformers to run linearily\n * pipe(min(20), max(40))\n * @param  {...functions} transformers\n * @return {function}\n */\nconst combineFunctions = (a, b) => (v) => b(a(v));\nconst pipe = (...transformers) => transformers.reduce(combineFunctions);\n\nexport { pipe };\n","/*\n  Value in range from progress\n\n  Given a lower limit and an upper limit, we return the value within\n  that range as expressed by progress (usually a number from 0 to 1)\n\n  So progress = 0.5 would change\n\n  from -------- to\n\n  to\n\n  from ---- to\n\n  E.g. from = 10, to = 20, progress = 0.5 => 15\n\n  @param [number]: Lower limit of range\n  @param [number]: Upper limit of range\n  @param [number]: The progress between lower and upper limits expressed 0-1\n  @return [number]: Value as calculated from progress within range (not limited within range)\n*/\nconst mixNumber = (from, to, progress) => {\n    return from + (to - from) * progress;\n};\n\nexport { mixNumber };\n","// Adapted from https://gist.github.com/mjackson/5311256\nfunction hueToRgb(p, q, t) {\n    if (t < 0)\n        t += 1;\n    if (t > 1)\n        t -= 1;\n    if (t < 1 / 6)\n        return p + (q - p) * 6 * t;\n    if (t < 1 / 2)\n        return q;\n    if (t < 2 / 3)\n        return p + (q - p) * (2 / 3 - t) * 6;\n    return p;\n}\nfunction hslaToRgba({ hue, saturation, lightness, alpha }) {\n    hue /= 360;\n    saturation /= 100;\n    lightness /= 100;\n    let red = 0;\n    let green = 0;\n    let blue = 0;\n    if (!saturation) {\n        red = green = blue = lightness;\n    }\n    else {\n        const q = lightness < 0.5\n            ? lightness * (1 + saturation)\n            : lightness + saturation - lightness * saturation;\n        const p = 2 * lightness - q;\n        red = hueToRgb(p, q, hue + 1 / 3);\n        green = hueToRgb(p, q, hue);\n        blue = hueToRgb(p, q, hue - 1 / 3);\n    }\n    return {\n        red: Math.round(red * 255),\n        green: Math.round(green * 255),\n        blue: Math.round(blue * 255),\n        alpha,\n    };\n}\n\nexport { hslaToRgba };\n","function mixImmediate(a, b) {\n    return (p) => (p > 0 ? b : a);\n}\n\nexport { mixImmediate };\n","import { mixNumber } from './number.mjs';\nimport { warning } from 'motion-utils';\nimport { hslaToRgba } from '../hsla-to-rgba.mjs';\nimport { hex } from '../../value/types/color/hex.mjs';\nimport { rgba } from '../../value/types/color/rgba.mjs';\nimport { hsla } from '../../value/types/color/hsla.mjs';\nimport { mixImmediate } from './immediate.mjs';\n\n// Linear color space blending\n// Explained https://www.youtube.com/watch?v=LKnqECcg6Gw\n// Demonstrated http://codepen.io/osublake/pen/xGVVaN\nconst mixLinearColor = (from, to, v) => {\n    const fromExpo = from * from;\n    const expo = v * (to * to - fromExpo) + fromExpo;\n    return expo < 0 ? 0 : Math.sqrt(expo);\n};\nconst colorTypes = [hex, rgba, hsla];\nconst getColorType = (v) => colorTypes.find((type) => type.test(v));\nfunction asRGBA(color) {\n    const type = getColorType(color);\n    warning(Boolean(type), `'${color}' is not an animatable color. Use the equivalent color code instead.`);\n    if (!Boolean(type))\n        return false;\n    let model = type.parse(color);\n    if (type === hsla) {\n        // TODO Remove this cast - needed since Motion's stricter typing\n        model = hslaToRgba(model);\n    }\n    return model;\n}\nconst mixColor = (from, to) => {\n    const fromRGBA = asRGBA(from);\n    const toRGBA = asRGBA(to);\n    if (!fromRGBA || !toRGBA) {\n        return mixImmediate(from, to);\n    }\n    const blended = { ...fromRGBA };\n    return (v) => {\n        blended.red = mixLinearColor(fromRGBA.red, toRGBA.red, v);\n        blended.green = mixLinearColor(fromRGBA.green, toRGBA.green, v);\n        blended.blue = mixLinearColor(fromRGBA.blue, toRGBA.blue, v);\n        blended.alpha = mixNumber(fromRGBA.alpha, toRGBA.alpha, v);\n        return rgba.transform(blended);\n    };\n};\n\nexport { mixColor, mixLinearColor };\n","const invisibleValues = new Set([\"none\", \"hidden\"]);\n/**\n * Returns a function that, when provided a progress value between 0 and 1,\n * will return the \"none\" or \"hidden\" string only when the progress is that of\n * the origin or target.\n */\nfunction mixVisibility(origin, target) {\n    if (invisibleValues.has(origin)) {\n        return (p) => (p <= 0 ? origin : target);\n    }\n    else {\n        return (p) => (p >= 1 ? target : origin);\n    }\n}\n\nexport { invisibleValues, mixVisibility };\n","import { mixNumber as mixNumber$1 } from './number.mjs';\nimport { mixColor } from './color.mjs';\nimport { pipe } from '../pipe.mjs';\nimport { warning } from 'motion-utils';\nimport { color } from '../../value/types/color/index.mjs';\nimport { complex, analyseComplexValue } from '../../value/types/complex/index.mjs';\nimport { isCSSVariableToken } from '../../render/dom/utils/is-css-variable.mjs';\nimport { invisibleValues, mixVisibility } from './visibility.mjs';\nimport { mixImmediate } from './immediate.mjs';\n\nfunction mixNumber(a, b) {\n    return (p) => mixNumber$1(a, b, p);\n}\nfunction getMixer(a) {\n    if (typeof a === \"number\") {\n        return mixNumber;\n    }\n    else if (typeof a === \"string\") {\n        return isCSSVariableToken(a)\n            ? mixImmediate\n            : color.test(a)\n                ? mixColor\n                : mixComplex;\n    }\n    else if (Array.isArray(a)) {\n        return mixArray;\n    }\n    else if (typeof a === \"object\") {\n        return color.test(a) ? mixColor : mixObject;\n    }\n    return mixImmediate;\n}\nfunction mixArray(a, b) {\n    const output = [...a];\n    const numValues = output.length;\n    const blendValue = a.map((v, i) => getMixer(v)(v, b[i]));\n    return (p) => {\n        for (let i = 0; i < numValues; i++) {\n            output[i] = blendValue[i](p);\n        }\n        return output;\n    };\n}\nfunction mixObject(a, b) {\n    const output = { ...a, ...b };\n    const blendValue = {};\n    for (const key in output) {\n        if (a[key] !== undefined && b[key] !== undefined) {\n            blendValue[key] = getMixer(a[key])(a[key], b[key]);\n        }\n    }\n    return (v) => {\n        for (const key in blendValue) {\n            output[key] = blendValue[key](v);\n        }\n        return output;\n    };\n}\nfunction matchOrder(origin, target) {\n    var _a;\n    const orderedOrigin = [];\n    const pointers = { color: 0, var: 0, number: 0 };\n    for (let i = 0; i < target.values.length; i++) {\n        const type = target.types[i];\n        const originIndex = origin.indexes[type][pointers[type]];\n        const originValue = (_a = origin.values[originIndex]) !== null && _a !== void 0 ? _a : 0;\n        orderedOrigin[i] = originValue;\n        pointers[type]++;\n    }\n    return orderedOrigin;\n}\nconst mixComplex = (origin, target) => {\n    const template = complex.createTransformer(target);\n    const originStats = analyseComplexValue(origin);\n    const targetStats = analyseComplexValue(target);\n    const canInterpolate = originStats.indexes.var.length === targetStats.indexes.var.length &&\n        originStats.indexes.color.length === targetStats.indexes.color.length &&\n        originStats.indexes.number.length >= targetStats.indexes.number.length;\n    if (canInterpolate) {\n        if ((invisibleValues.has(origin) &&\n            !targetStats.values.length) ||\n            (invisibleValues.has(target) &&\n                !originStats.values.length)) {\n            return mixVisibility(origin, target);\n        }\n        return pipe(mixArray(matchOrder(originStats, targetStats), targetStats.values), template);\n    }\n    else {\n        warning(true, `Complex values '${origin}' and '${target}' too different to mix. Ensure all colors are of the same type, and that each contains the same quantity of number and color values. Falling back to instant transition.`);\n        return mixImmediate(origin, target);\n    }\n};\n\nexport { getMixer, mixArray, mixComplex, mixObject };\n","import { getMixer } from './complex.mjs';\nimport { mixNumber } from './number.mjs';\n\nfunction mix(from, to, p) {\n    if (typeof from === \"number\" &&\n        typeof to === \"number\" &&\n        typeof p === \"number\") {\n        return mixNumber(from, to, p);\n    }\n    const mixer = getMixer(from);\n    return mixer(from, to);\n}\n\nexport { mix };\n","import { clamp } from './clamp.mjs';\nimport { pipe } from './pipe.mjs';\nimport { progress } from './progress.mjs';\nimport { invariant, noop } from 'motion-utils';\nimport { mix } from './mix/index.mjs';\n\nfunction createMixers(output, ease, customMixer) {\n    const mixers = [];\n    const mixerFactory = customMixer || mix;\n    const numMixers = output.length - 1;\n    for (let i = 0; i < numMixers; i++) {\n        let mixer = mixerFactory(output[i], output[i + 1]);\n        if (ease) {\n            const easingFunction = Array.isArray(ease) ? ease[i] || noop : ease;\n            mixer = pipe(easingFunction, mixer);\n        }\n        mixers.push(mixer);\n    }\n    return mixers;\n}\n/**\n * Create a function that maps from a numerical input array to a generic output array.\n *\n * Accepts:\n *   - Numbers\n *   - Colors (hex, hsl, hsla, rgb, rgba)\n *   - Complex (combinations of one or more numbers or strings)\n *\n * ```jsx\n * const mixColor = interpolate([0, 1], ['#fff', '#000'])\n *\n * mixColor(0.5) // 'rgba(128, 128, 128, 1)'\n * ```\n *\n * TODO Revist this approach once we've moved to data models for values,\n * probably not needed to pregenerate mixer functions.\n *\n * @public\n */\nfunction interpolate(input, output, { clamp: isClamp = true, ease, mixer } = {}) {\n    const inputLength = input.length;\n    invariant(inputLength === output.length, \"Both input and output ranges must be the same length\");\n    /**\n     * If we're only provided a single input, we can just make a function\n     * that returns the output.\n     */\n    if (inputLength === 1)\n        return () => output[0];\n    if (inputLength === 2 && input[0] === input[1])\n        return () => output[1];\n    // If input runs highest -> lowest, reverse both arrays\n    if (input[0] > input[inputLength - 1]) {\n        input = [...input].reverse();\n        output = [...output].reverse();\n    }\n    const mixers = createMixers(output, ease, mixer);\n    const numMixers = mixers.length;\n    const interpolator = (v) => {\n        let i = 0;\n        if (numMixers > 1) {\n            for (; i < input.length - 2; i++) {\n                if (v < input[i + 1])\n                    break;\n            }\n        }\n        const progressInRange = progress(input[i], input[i + 1], v);\n        return mixers[i](progressInRange);\n    };\n    return isClamp\n        ? (v) => interpolator(clamp(input[0], input[inputLength - 1], v))\n        : interpolator;\n}\n\nexport { interpolate };\n","import { mixNumber } from '../mix/number.mjs';\nimport { progress } from '../progress.mjs';\n\nfunction fillOffset(offset, remaining) {\n    const min = offset[offset.length - 1];\n    for (let i = 1; i <= remaining; i++) {\n        const offsetProgress = progress(0, remaining, i);\n        offset.push(mixNumber(min, 1, offsetProgress));\n    }\n}\n\nexport { fillOffset };\n","import { fillOffset } from './fill.mjs';\n\nfunction defaultOffset(arr) {\n    const offset = [0];\n    fillOffset(offset, arr.length - 1);\n    return offset;\n}\n\nexport { defaultOffset };\n","function convertOffsetToTimes(offset, duration) {\n    return offset.map((o) => o * duration);\n}\n\nexport { convertOffsetToTimes };\n","import { easeInOut } from '../../easing/ease.mjs';\nimport { isEasingArray } from '../../easing/utils/is-easing-array.mjs';\nimport { easingDefinitionToFunction } from '../../easing/utils/map.mjs';\nimport { interpolate } from '../../utils/interpolate.mjs';\nimport { defaultOffset } from '../../utils/offsets/default.mjs';\nimport { convertOffsetToTimes } from '../../utils/offsets/time.mjs';\n\nfunction defaultEasing(values, easing) {\n    return values.map(() => easing || easeInOut).splice(0, values.length - 1);\n}\nfunction keyframes({ duration = 300, keyframes: keyframeValues, times, ease = \"easeInOut\", }) {\n    /**\n     * Easing functions can be externally defined as strings. Here we convert them\n     * into actual functions.\n     */\n    const easingFunctions = isEasingArray(ease)\n        ? ease.map(easingDefinitionToFunction)\n        : easingDefinitionToFunction(ease);\n    /**\n     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n     * to reduce GC during animation.\n     */\n    const state = {\n        done: false,\n        value: keyframeValues[0],\n    };\n    /**\n     * Create a times array based on the provided 0-1 offsets\n     */\n    const absoluteTimes = convertOffsetToTimes(\n    // Only use the provided offsets if they're the correct length\n    // TODO Maybe we should warn here if there's a length mismatch\n    times && times.length === keyframeValues.length\n        ? times\n        : defaultOffset(keyframeValues), duration);\n    const mapTimeToKeyframe = interpolate(absoluteTimes, keyframeValues, {\n        ease: Array.isArray(easingFunctions)\n            ? easingFunctions\n            : defaultEasing(keyframeValues, easingFunctions),\n    });\n    return {\n        calculatedDuration: duration,\n        next: (t) => {\n            state.value = mapTimeToKeyframe(t);\n            state.done = t >= duration;\n            return state;\n        },\n    };\n}\n\nexport { defaultEasing, keyframes };\n","import { time } from '../../../frameloop/sync-time.mjs';\nimport { frame, cancelFrame, frameData } from '../../../frameloop/frame.mjs';\n\nconst frameloopDriver = (update) => {\n    const passTimestamp = ({ timestamp }) => update(timestamp);\n    return {\n        start: () => frame.update(passTimestamp, true),\n        stop: () => cancelFrame(passTimestamp),\n        /**\n         * If we're processing this frame we can use the\n         * framelocked timestamp to keep things in sync.\n         */\n        now: () => (frameData.isProcessing ? frameData.timestamp : time.now()),\n    };\n};\n\nexport { frameloopDriver };\n","import { KeyframeResolver } from '../../render/utils/KeyframesResolver.mjs';\nimport { spring } from '../generators/spring/index.mjs';\nimport { inertia } from '../generators/inertia.mjs';\nimport { keyframes } from '../generators/keyframes.mjs';\nimport { BaseAnimation } from './BaseAnimation.mjs';\nimport { pipe } from '../../utils/pipe.mjs';\nimport { mix } from '../../utils/mix/index.mjs';\nimport { calcGeneratorDuration } from '../generators/utils/calc-duration.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../utils/time-conversion.mjs';\nimport { clamp } from '../../utils/clamp.mjs';\nimport { invariant } from 'motion-utils';\nimport { frameloopDriver } from './drivers/driver-frameloop.mjs';\nimport { getFinalKeyframe } from './waapi/utils/get-final-keyframe.mjs';\nimport { isGenerator } from '../generators/utils/is-generator.mjs';\n\nconst generators = {\n    decay: inertia,\n    inertia,\n    tween: keyframes,\n    keyframes: keyframes,\n    spring,\n};\nconst percentToProgress = (percent) => percent / 100;\n/**\n * Animation that runs on the main thread. Designed to be WAAPI-spec in the subset of\n * features we expose publically. Mostly the compatibility is to ensure visual identity\n * between both WAAPI and main thread animations.\n */\nclass MainThreadAnimation extends BaseAnimation {\n    constructor(options) {\n        super(options);\n        /**\n         * The time at which the animation was paused.\n         */\n        this.holdTime = null;\n        /**\n         * The time at which the animation was cancelled.\n         */\n        this.cancelTime = null;\n        /**\n         * The current time of the animation.\n         */\n        this.currentTime = 0;\n        /**\n         * Playback speed as a factor. 0 would be stopped, -1 reverse and 2 double speed.\n         */\n        this.playbackSpeed = 1;\n        /**\n         * The state of the animation to apply when the animation is resolved. This\n         * allows calls to the public API to control the animation before it is resolved,\n         * without us having to resolve it first.\n         */\n        this.pendingPlayState = \"running\";\n        /**\n         * The time at which the animation was started.\n         */\n        this.startTime = null;\n        this.state = \"idle\";\n        /**\n         * This method is bound to the instance to fix a pattern where\n         * animation.stop is returned as a reference from a useEffect.\n         */\n        this.stop = () => {\n            this.resolver.cancel();\n            this.isStopped = true;\n            if (this.state === \"idle\")\n                return;\n            this.teardown();\n            const { onStop } = this.options;\n            onStop && onStop();\n        };\n        const { name, motionValue, element, keyframes } = this.options;\n        const KeyframeResolver$1 = (element === null || element === void 0 ? void 0 : element.KeyframeResolver) || KeyframeResolver;\n        const onResolved = (resolvedKeyframes, finalKeyframe) => this.onKeyframesResolved(resolvedKeyframes, finalKeyframe);\n        this.resolver = new KeyframeResolver$1(keyframes, onResolved, name, motionValue, element);\n        this.resolver.scheduleResolve();\n    }\n    flatten() {\n        super.flatten();\n        // If we've already resolved the animation, re-initialise it\n        if (this._resolved) {\n            Object.assign(this._resolved, this.initPlayback(this._resolved.keyframes));\n        }\n    }\n    initPlayback(keyframes$1) {\n        const { type = \"keyframes\", repeat = 0, repeatDelay = 0, repeatType, velocity = 0, } = this.options;\n        const generatorFactory = isGenerator(type)\n            ? type\n            : generators[type] || keyframes;\n        /**\n         * If our generator doesn't support mixing numbers, we need to replace keyframes with\n         * [0, 100] and then make a function that maps that to the actual keyframes.\n         *\n         * 100 is chosen instead of 1 as it works nicer with spring animations.\n         */\n        let mapPercentToKeyframes;\n        let mirroredGenerator;\n        if (generatorFactory !== keyframes &&\n            typeof keyframes$1[0] !== \"number\") {\n            if (process.env.NODE_ENV !== \"production\") {\n                invariant(keyframes$1.length === 2, `Only two keyframes currently supported with spring and inertia animations. Trying to animate ${keyframes$1}`);\n            }\n            mapPercentToKeyframes = pipe(percentToProgress, mix(keyframes$1[0], keyframes$1[1]));\n            keyframes$1 = [0, 100];\n        }\n        const generator = generatorFactory({ ...this.options, keyframes: keyframes$1 });\n        /**\n         * If we have a mirror repeat type we need to create a second generator that outputs the\n         * mirrored (not reversed) animation and later ping pong between the two generators.\n         */\n        if (repeatType === \"mirror\") {\n            mirroredGenerator = generatorFactory({\n                ...this.options,\n                keyframes: [...keyframes$1].reverse(),\n                velocity: -velocity,\n            });\n        }\n        /**\n         * If duration is undefined and we have repeat options,\n         * we need to calculate a duration from the generator.\n         *\n         * We set it to the generator itself to cache the duration.\n         * Any timeline resolver will need to have already precalculated\n         * the duration by this step.\n         */\n        if (generator.calculatedDuration === null) {\n            generator.calculatedDuration = calcGeneratorDuration(generator);\n        }\n        const { calculatedDuration } = generator;\n        const resolvedDuration = calculatedDuration + repeatDelay;\n        const totalDuration = resolvedDuration * (repeat + 1) - repeatDelay;\n        return {\n            generator,\n            mirroredGenerator,\n            mapPercentToKeyframes,\n            calculatedDuration,\n            resolvedDuration,\n            totalDuration,\n        };\n    }\n    onPostResolved() {\n        const { autoplay = true } = this.options;\n        this.play();\n        if (this.pendingPlayState === \"paused\" || !autoplay) {\n            this.pause();\n        }\n        else {\n            this.state = this.pendingPlayState;\n        }\n    }\n    tick(timestamp, sample = false) {\n        const { resolved } = this;\n        // If the animations has failed to resolve, return the final keyframe.\n        if (!resolved) {\n            const { keyframes } = this.options;\n            return { done: true, value: keyframes[keyframes.length - 1] };\n        }\n        const { finalKeyframe, generator, mirroredGenerator, mapPercentToKeyframes, keyframes, calculatedDuration, totalDuration, resolvedDuration, } = resolved;\n        if (this.startTime === null)\n            return generator.next(0);\n        const { delay, repeat, repeatType, repeatDelay, onUpdate } = this.options;\n        /**\n         * requestAnimationFrame timestamps can come through as lower than\n         * the startTime as set by performance.now(). Here we prevent this,\n         * though in the future it could be possible to make setting startTime\n         * a pending operation that gets resolved here.\n         */\n        if (this.speed > 0) {\n            this.startTime = Math.min(this.startTime, timestamp);\n        }\n        else if (this.speed < 0) {\n            this.startTime = Math.min(timestamp - totalDuration / this.speed, this.startTime);\n        }\n        // Update currentTime\n        if (sample) {\n            this.currentTime = timestamp;\n        }\n        else if (this.holdTime !== null) {\n            this.currentTime = this.holdTime;\n        }\n        else {\n            // Rounding the time because floating point arithmetic is not always accurate, e.g. 3000.367 - 1000.367 =\n            // 2000.0000000000002. This is a problem when we are comparing the currentTime with the duration, for\n            // example.\n            this.currentTime =\n                Math.round(timestamp - this.startTime) * this.speed;\n        }\n        // Rebase on delay\n        const timeWithoutDelay = this.currentTime - delay * (this.speed >= 0 ? 1 : -1);\n        const isInDelayPhase = this.speed >= 0\n            ? timeWithoutDelay < 0\n            : timeWithoutDelay > totalDuration;\n        this.currentTime = Math.max(timeWithoutDelay, 0);\n        // If this animation has finished, set the current time  to the total duration.\n        if (this.state === \"finished\" && this.holdTime === null) {\n            this.currentTime = totalDuration;\n        }\n        let elapsed = this.currentTime;\n        let frameGenerator = generator;\n        if (repeat) {\n            /**\n             * Get the current progress (0-1) of the animation. If t is >\n             * than duration we'll get values like 2.5 (midway through the\n             * third iteration)\n             */\n            const progress = Math.min(this.currentTime, totalDuration) / resolvedDuration;\n            /**\n             * Get the current iteration (0 indexed). For instance the floor of\n             * 2.5 is 2.\n             */\n            let currentIteration = Math.floor(progress);\n            /**\n             * Get the current progress of the iteration by taking the remainder\n             * so 2.5 is 0.5 through iteration 2\n             */\n            let iterationProgress = progress % 1.0;\n            /**\n             * If iteration progress is 1 we count that as the end\n             * of the previous iteration.\n             */\n            if (!iterationProgress && progress >= 1) {\n                iterationProgress = 1;\n            }\n            iterationProgress === 1 && currentIteration--;\n            currentIteration = Math.min(currentIteration, repeat + 1);\n            /**\n             * Reverse progress if we're not running in \"normal\" direction\n             */\n            const isOddIteration = Boolean(currentIteration % 2);\n            if (isOddIteration) {\n                if (repeatType === \"reverse\") {\n                    iterationProgress = 1 - iterationProgress;\n                    if (repeatDelay) {\n                        iterationProgress -= repeatDelay / resolvedDuration;\n                    }\n                }\n                else if (repeatType === \"mirror\") {\n                    frameGenerator = mirroredGenerator;\n                }\n            }\n            elapsed = clamp(0, 1, iterationProgress) * resolvedDuration;\n        }\n        /**\n         * If we're in negative time, set state as the initial keyframe.\n         * This prevents delay: x, duration: 0 animations from finishing\n         * instantly.\n         */\n        const state = isInDelayPhase\n            ? { done: false, value: keyframes[0] }\n            : frameGenerator.next(elapsed);\n        if (mapPercentToKeyframes) {\n            state.value = mapPercentToKeyframes(state.value);\n        }\n        let { done } = state;\n        if (!isInDelayPhase && calculatedDuration !== null) {\n            done =\n                this.speed >= 0\n                    ? this.currentTime >= totalDuration\n                    : this.currentTime <= 0;\n        }\n        const isAnimationFinished = this.holdTime === null &&\n            (this.state === \"finished\" || (this.state === \"running\" && done));\n        if (isAnimationFinished && finalKeyframe !== undefined) {\n            state.value = getFinalKeyframe(keyframes, this.options, finalKeyframe);\n        }\n        if (onUpdate) {\n            onUpdate(state.value);\n        }\n        if (isAnimationFinished) {\n            this.finish();\n        }\n        return state;\n    }\n    get duration() {\n        const { resolved } = this;\n        return resolved ? millisecondsToSeconds(resolved.calculatedDuration) : 0;\n    }\n    get time() {\n        return millisecondsToSeconds(this.currentTime);\n    }\n    set time(newTime) {\n        newTime = secondsToMilliseconds(newTime);\n        this.currentTime = newTime;\n        if (this.holdTime !== null || this.speed === 0) {\n            this.holdTime = newTime;\n        }\n        else if (this.driver) {\n            this.startTime = this.driver.now() - newTime / this.speed;\n        }\n    }\n    get speed() {\n        return this.playbackSpeed;\n    }\n    set speed(newSpeed) {\n        const hasChanged = this.playbackSpeed !== newSpeed;\n        this.playbackSpeed = newSpeed;\n        if (hasChanged) {\n            this.time = millisecondsToSeconds(this.currentTime);\n        }\n    }\n    play() {\n        if (!this.resolver.isScheduled) {\n            this.resolver.resume();\n        }\n        if (!this._resolved) {\n            this.pendingPlayState = \"running\";\n            return;\n        }\n        if (this.isStopped)\n            return;\n        const { driver = frameloopDriver, onPlay, startTime } = this.options;\n        if (!this.driver) {\n            this.driver = driver((timestamp) => this.tick(timestamp));\n        }\n        onPlay && onPlay();\n        const now = this.driver.now();\n        if (this.holdTime !== null) {\n            this.startTime = now - this.holdTime;\n        }\n        else if (!this.startTime) {\n            this.startTime = startTime !== null && startTime !== void 0 ? startTime : this.calcStartTime();\n        }\n        else if (this.state === \"finished\") {\n            this.startTime = now;\n        }\n        if (this.state === \"finished\") {\n            this.updateFinishedPromise();\n        }\n        this.cancelTime = this.startTime;\n        this.holdTime = null;\n        /**\n         * Set playState to running only after we've used it in\n         * the previous logic.\n         */\n        this.state = \"running\";\n        this.driver.start();\n    }\n    pause() {\n        var _a;\n        if (!this._resolved) {\n            this.pendingPlayState = \"paused\";\n            return;\n        }\n        this.state = \"paused\";\n        this.holdTime = (_a = this.currentTime) !== null && _a !== void 0 ? _a : 0;\n    }\n    complete() {\n        if (this.state !== \"running\") {\n            this.play();\n        }\n        this.pendingPlayState = this.state = \"finished\";\n        this.holdTime = null;\n    }\n    finish() {\n        this.teardown();\n        this.state = \"finished\";\n        const { onComplete } = this.options;\n        onComplete && onComplete();\n    }\n    cancel() {\n        if (this.cancelTime !== null) {\n            this.tick(this.cancelTime);\n        }\n        this.teardown();\n        this.updateFinishedPromise();\n    }\n    teardown() {\n        this.state = \"idle\";\n        this.stopDriver();\n        this.resolveFinishedPromise();\n        this.updateFinishedPromise();\n        this.startTime = this.cancelTime = null;\n        this.resolver.cancel();\n    }\n    stopDriver() {\n        if (!this.driver)\n            return;\n        this.driver.stop();\n        this.driver = undefined;\n    }\n    sample(time) {\n        this.startTime = 0;\n        return this.tick(time, true);\n    }\n}\n// Legacy interface\nfunction animateValue(options) {\n    return new MainThreadAnimation(options);\n}\n\nexport { MainThreadAnimation, animateValue };\n","/**\n * A list of values that can be hardware-accelerated.\n */\nconst acceleratedValues = new Set([\n    \"opacity\",\n    \"clipPath\",\n    \"filter\",\n    \"transform\",\n    // TODO: Can be accelerated but currently disabled until https://issues.chromium.org/issues/41491098 is resolved\n    // or until we implement support for linear() easing.\n    // \"background-color\"\n]);\n\nexport { acceleratedValues };\n","function memo(callback) {\n    let result;\n    return () => {\n        if (result === undefined)\n            result = callback();\n        return result;\n    };\n}\n\nexport { memo };\n","/**\n * Add the ability for test suites to manually set support flags\n * to better test more environments.\n */\nconst supportsFlags = {\n    linearEasing: undefined,\n};\n\nexport { supportsFlags };\n","import { memo } from '../../../../utils/memo.mjs';\nimport { supportsFlags } from './supports-flags.mjs';\n\nfunction memoSupports(callback, supportsFlag) {\n    const memoized = memo(callback);\n    return () => { var _a; return (_a = supportsFlags[supportsFlag]) !== null && _a !== void 0 ? _a : memoized(); };\n}\n\nexport { memoSupports };\n","import { memoSupports } from './memo-supports.mjs';\n\nconst supportsLinearEasing = /*@__PURE__*/ memoSupports(() => {\n    try {\n        document\n            .createElement(\"div\")\n            .animate({ opacity: 0 }, { easing: \"linear(0, 1)\" });\n    }\n    catch (e) {\n        return false;\n    }\n    return true;\n}, \"linearEasing\");\n\nexport { supportsLinearEasing };\n","import { isBezierDefinition } from '../../../easing/utils/is-bezier-definition.mjs';\nimport { generateLinearEasing } from './utils/linear.mjs';\nimport { supportsLinearEasing } from './utils/supports-linear-easing.mjs';\n\nfunction isWaapiSupportedEasing(easing) {\n    return Boolean((typeof easing === \"function\" && supportsLinearEasing()) ||\n        !easing ||\n        (typeof easing === \"string\" &&\n            (easing in supportedWaapiEasing || supportsLinearEasing())) ||\n        isBezierDefinition(easing) ||\n        (Array.isArray(easing) && easing.every(isWaapiSupportedEasing)));\n}\nconst cubicBezierAsString = ([a, b, c, d]) => `cubic-bezier(${a}, ${b}, ${c}, ${d})`;\nconst supportedWaapiEasing = {\n    linear: \"linear\",\n    ease: \"ease\",\n    easeIn: \"ease-in\",\n    easeOut: \"ease-out\",\n    easeInOut: \"ease-in-out\",\n    circIn: /*@__PURE__*/ cubicBezierAsString([0, 0.65, 0.55, 1]),\n    circOut: /*@__PURE__*/ cubicBezierAsString([0.55, 0, 1, 0.45]),\n    backIn: /*@__PURE__*/ cubicBezierAsString([0.31, 0.01, 0.66, -0.59]),\n    backOut: /*@__PURE__*/ cubicBezierAsString([0.33, 1.53, 0.69, 0.99]),\n};\nfunction mapEasingToNativeEasing(easing, duration) {\n    if (!easing) {\n        return undefined;\n    }\n    else if (typeof easing === \"function\" && supportsLinearEasing()) {\n        return generateLinearEasing(easing, duration);\n    }\n    else if (isBezierDefinition(easing)) {\n        return cubicBezierAsString(easing);\n    }\n    else if (Array.isArray(easing)) {\n        return easing.map((segmentEasing) => mapEasingToNativeEasing(segmentEasing, duration) ||\n            supportedWaapiEasing.easeOut);\n    }\n    else {\n        return supportedWaapiEasing[easing];\n    }\n}\n\nexport { cubicBezierAsString, isWaapiSupportedEasing, mapEasingToNativeEasing, supportedWaapiEasing };\n","import { mapEasingToNativeEasing } from './easing.mjs';\n\nfunction startWaapiAnimation(element, valueName, keyframes, { delay = 0, duration = 300, repeat = 0, repeatType = \"loop\", ease = \"easeInOut\", times, } = {}) {\n    const keyframeOptions = { [valueName]: keyframes };\n    if (times)\n        keyframeOptions.offset = times;\n    const easing = mapEasingToNativeEasing(ease, duration);\n    /**\n     * If this is an easing array, apply to keyframes, not animation as a whole\n     */\n    if (Array.isArray(easing))\n        keyframeOptions.easing = easing;\n    return element.animate(keyframeOptions, {\n        delay,\n        duration,\n        easing: !Array.isArray(easing) ? easing : \"linear\",\n        fill: \"both\",\n        iterations: repeat + 1,\n        direction: repeatType === \"reverse\" ? \"alternate\" : \"normal\",\n    });\n}\n\nexport { startWaapiAnimation };\n","function attachTimeline(animation, timeline) {\n    animation.timeline = timeline;\n    animation.onfinish = null;\n}\n\nexport { attachTimeline };\n","import { memo } from '../../../../utils/memo.mjs';\n\nconst supportsWaapi = /*@__PURE__*/ memo(() => Object.hasOwnProperty.call(Element.prototype, \"animate\"));\n\nexport { supportsWaapi };\n","import { anticipate } from '../../easing/anticipate.mjs';\nimport { backInOut } from '../../easing/back.mjs';\nimport { circInOut } from '../../easing/circ.mjs';\nimport { DOMKeyframesResolver } from '../../render/dom/DOMKeyframesResolver.mjs';\nimport { noop } from 'motion-utils';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../utils/time-conversion.mjs';\nimport { isGenerator } from '../generators/utils/is-generator.mjs';\nimport { BaseAnimation } from './BaseAnimation.mjs';\nimport { MainThreadAnimation } from './MainThreadAnimation.mjs';\nimport { acceleratedValues } from './utils/accelerated-values.mjs';\nimport { startWaapiAnimation } from './waapi/index.mjs';\nimport { isWaapiSupportedEasing } from './waapi/easing.mjs';\nimport { attachTimeline } from './waapi/utils/attach-timeline.mjs';\nimport { getFinalKeyframe } from './waapi/utils/get-final-keyframe.mjs';\nimport { supportsLinearEasing } from './waapi/utils/supports-linear-easing.mjs';\nimport { supportsWaapi } from './waapi/utils/supports-waapi.mjs';\n\n/**\n * 10ms is chosen here as it strikes a balance between smooth\n * results (more than one keyframe per frame at 60fps) and\n * keyframe quantity.\n */\nconst sampleDelta = 10; //ms\n/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */\nconst maxDuration = 20000;\n/**\n * Check if an animation can run natively via WAAPI or requires pregenerated keyframes.\n * WAAPI doesn't support spring or function easings so we run these as JS animation before\n * handing off.\n */\nfunction requiresPregeneratedKeyframes(options) {\n    return (isGenerator(options.type) ||\n        options.type === \"spring\" ||\n        !isWaapiSupportedEasing(options.ease));\n}\nfunction pregenerateKeyframes(keyframes, options) {\n    /**\n     * Create a main-thread animation to pregenerate keyframes.\n     * We sample this at regular intervals to generate keyframes that we then\n     * linearly interpolate between.\n     */\n    const sampleAnimation = new MainThreadAnimation({\n        ...options,\n        keyframes,\n        repeat: 0,\n        delay: 0,\n        isGenerator: true,\n    });\n    let state = { done: false, value: keyframes[0] };\n    const pregeneratedKeyframes = [];\n    /**\n     * Bail after 20 seconds of pre-generated keyframes as it's likely\n     * we're heading for an infinite loop.\n     */\n    let t = 0;\n    while (!state.done && t < maxDuration) {\n        state = sampleAnimation.sample(t);\n        pregeneratedKeyframes.push(state.value);\n        t += sampleDelta;\n    }\n    return {\n        times: undefined,\n        keyframes: pregeneratedKeyframes,\n        duration: t - sampleDelta,\n        ease: \"linear\",\n    };\n}\nconst unsupportedEasingFunctions = {\n    anticipate,\n    backInOut,\n    circInOut,\n};\nfunction isUnsupportedEase(key) {\n    return key in unsupportedEasingFunctions;\n}\nclass AcceleratedAnimation extends BaseAnimation {\n    constructor(options) {\n        super(options);\n        const { name, motionValue, element, keyframes } = this.options;\n        this.resolver = new DOMKeyframesResolver(keyframes, (resolvedKeyframes, finalKeyframe) => this.onKeyframesResolved(resolvedKeyframes, finalKeyframe), name, motionValue, element);\n        this.resolver.scheduleResolve();\n    }\n    initPlayback(keyframes, finalKeyframe) {\n        var _a;\n        let { duration = 300, times, ease, type, motionValue, name, startTime, } = this.options;\n        /**\n         * If element has since been unmounted, return false to indicate\n         * the animation failed to initialised.\n         */\n        if (!((_a = motionValue.owner) === null || _a === void 0 ? void 0 : _a.current)) {\n            return false;\n        }\n        /**\n         * If the user has provided an easing function name that isn't supported\n         * by WAAPI (like \"anticipate\"), we need to provide the corressponding\n         * function. This will later get converted to a linear() easing function.\n         */\n        if (typeof ease === \"string\" &&\n            supportsLinearEasing() &&\n            isUnsupportedEase(ease)) {\n            ease = unsupportedEasingFunctions[ease];\n        }\n        /**\n         * If this animation needs pre-generated keyframes then generate.\n         */\n        if (requiresPregeneratedKeyframes(this.options)) {\n            const { onComplete, onUpdate, motionValue, element, ...options } = this.options;\n            const pregeneratedAnimation = pregenerateKeyframes(keyframes, options);\n            keyframes = pregeneratedAnimation.keyframes;\n            // If this is a very short animation, ensure we have\n            // at least two keyframes to animate between as older browsers\n            // can't animate between a single keyframe.\n            if (keyframes.length === 1) {\n                keyframes[1] = keyframes[0];\n            }\n            duration = pregeneratedAnimation.duration;\n            times = pregeneratedAnimation.times;\n            ease = pregeneratedAnimation.ease;\n            type = \"keyframes\";\n        }\n        const animation = startWaapiAnimation(motionValue.owner.current, name, keyframes, { ...this.options, duration, times, ease });\n        // Override the browser calculated startTime with one synchronised to other JS\n        // and WAAPI animations starting this event loop.\n        animation.startTime = startTime !== null && startTime !== void 0 ? startTime : this.calcStartTime();\n        if (this.pendingTimeline) {\n            attachTimeline(animation, this.pendingTimeline);\n            this.pendingTimeline = undefined;\n        }\n        else {\n            /**\n             * Prefer the `onfinish` prop as it's more widely supported than\n             * the `finished` promise.\n             *\n             * Here, we synchronously set the provided MotionValue to the end\n             * keyframe. If we didn't, when the WAAPI animation is finished it would\n             * be removed from the element which would then revert to its old styles.\n             */\n            animation.onfinish = () => {\n                const { onComplete } = this.options;\n                motionValue.set(getFinalKeyframe(keyframes, this.options, finalKeyframe));\n                onComplete && onComplete();\n                this.cancel();\n                this.resolveFinishedPromise();\n            };\n        }\n        return {\n            animation,\n            duration,\n            times,\n            type,\n            ease,\n            keyframes: keyframes,\n        };\n    }\n    get duration() {\n        const { resolved } = this;\n        if (!resolved)\n            return 0;\n        const { duration } = resolved;\n        return millisecondsToSeconds(duration);\n    }\n    get time() {\n        const { resolved } = this;\n        if (!resolved)\n            return 0;\n        const { animation } = resolved;\n        return millisecondsToSeconds(animation.currentTime || 0);\n    }\n    set time(newTime) {\n        const { resolved } = this;\n        if (!resolved)\n            return;\n        const { animation } = resolved;\n        animation.currentTime = secondsToMilliseconds(newTime);\n    }\n    get speed() {\n        const { resolved } = this;\n        if (!resolved)\n            return 1;\n        const { animation } = resolved;\n        return animation.playbackRate;\n    }\n    set speed(newSpeed) {\n        const { resolved } = this;\n        if (!resolved)\n            return;\n        const { animation } = resolved;\n        animation.playbackRate = newSpeed;\n    }\n    get state() {\n        const { resolved } = this;\n        if (!resolved)\n            return \"idle\";\n        const { animation } = resolved;\n        return animation.playState;\n    }\n    get startTime() {\n        const { resolved } = this;\n        if (!resolved)\n            return null;\n        const { animation } = resolved;\n        // Coerce to number as TypeScript incorrectly types this\n        // as CSSNumberish\n        return animation.startTime;\n    }\n    /**\n     * Replace the default DocumentTimeline with another AnimationTimeline.\n     * Currently used for scroll animations.\n     */\n    attachTimeline(timeline) {\n        if (!this._resolved) {\n            this.pendingTimeline = timeline;\n        }\n        else {\n            const { resolved } = this;\n            if (!resolved)\n                return noop;\n            const { animation } = resolved;\n            attachTimeline(animation, timeline);\n        }\n        return noop;\n    }\n    play() {\n        if (this.isStopped)\n            return;\n        const { resolved } = this;\n        if (!resolved)\n            return;\n        const { animation } = resolved;\n        if (animation.playState === \"finished\") {\n            this.updateFinishedPromise();\n        }\n        animation.play();\n    }\n    pause() {\n        const { resolved } = this;\n        if (!resolved)\n            return;\n        const { animation } = resolved;\n        animation.pause();\n    }\n    stop() {\n        this.resolver.cancel();\n        this.isStopped = true;\n        if (this.state === \"idle\")\n            return;\n        this.resolveFinishedPromise();\n        this.updateFinishedPromise();\n        const { resolved } = this;\n        if (!resolved)\n            return;\n        const { animation, keyframes, duration, type, ease, times } = resolved;\n        if (animation.playState === \"idle\" ||\n            animation.playState === \"finished\") {\n            return;\n        }\n        /**\n         * WAAPI doesn't natively have any interruption capabilities.\n         *\n         * Rather than read commited styles back out of the DOM, we can\n         * create a renderless JS animation and sample it twice to calculate\n         * its current value, \"previous\" value, and therefore allow\n         * Motion to calculate velocity for any subsequent animation.\n         */\n        if (this.time) {\n            const { motionValue, onUpdate, onComplete, element, ...options } = this.options;\n            const sampleAnimation = new MainThreadAnimation({\n                ...options,\n                keyframes,\n                duration,\n                type,\n                ease,\n                times,\n                isGenerator: true,\n            });\n            const sampleTime = secondsToMilliseconds(this.time);\n            motionValue.setWithVelocity(sampleAnimation.sample(sampleTime - sampleDelta).value, sampleAnimation.sample(sampleTime).value, sampleDelta);\n        }\n        const { onStop } = this.options;\n        onStop && onStop();\n        this.cancel();\n    }\n    complete() {\n        const { resolved } = this;\n        if (!resolved)\n            return;\n        resolved.animation.finish();\n    }\n    cancel() {\n        const { resolved } = this;\n        if (!resolved)\n            return;\n        resolved.animation.cancel();\n    }\n    static supports(options) {\n        const { motionValue, name, repeatDelay, repeatType, damping, type } = options;\n        return (supportsWaapi() &&\n            name &&\n            acceleratedValues.has(name) &&\n            motionValue &&\n            motionValue.owner &&\n            motionValue.owner.current instanceof HTMLElement &&\n            /**\n             * If we're outputting values to onUpdate then we can't use WAAPI as there's\n             * no way to read the value from WAAPI every frame.\n             */\n            !motionValue.owner.getProps().onUpdate &&\n            !repeatDelay &&\n            repeatType !== \"mirror\" &&\n            damping !== 0 &&\n            type !== \"inertia\");\n    }\n}\n\nexport { AcceleratedAnimation };\n","import { memo } from '../../../utils/memo.mjs';\n\nconst supportsScrollTimeline = memo(() => window.ScrollTimeline !== undefined);\n\nexport { supportsScrollTimeline };\n","import { supportsScrollTimeline } from '../render/dom/scroll/supports.mjs';\n\nclass GroupPlaybackControls {\n    constructor(animations) {\n        // Bound to accomodate common `return animation.stop` pattern\n        this.stop = () => this.runAll(\"stop\");\n        this.animations = animations.filter(Boolean);\n    }\n    then(onResolve, onReject) {\n        return Promise.all(this.animations).then(onResolve).catch(onReject);\n    }\n    /**\n     * TODO: Filter out cancelled or stopped animations before returning\n     */\n    getAll(propName) {\n        return this.animations[0][propName];\n    }\n    setAll(propName, newValue) {\n        for (let i = 0; i < this.animations.length; i++) {\n            this.animations[i][propName] = newValue;\n        }\n    }\n    attachTimeline(timeline, fallback) {\n        const subscriptions = this.animations.map((animation) => {\n            if (supportsScrollTimeline() && animation.attachTimeline) {\n                return animation.attachTimeline(timeline);\n            }\n            else {\n                return fallback(animation);\n            }\n        });\n        return () => {\n            subscriptions.forEach((cancel, i) => {\n                cancel && cancel();\n                this.animations[i].stop();\n            });\n        };\n    }\n    get time() {\n        return this.getAll(\"time\");\n    }\n    set time(time) {\n        this.setAll(\"time\", time);\n    }\n    get speed() {\n        return this.getAll(\"speed\");\n    }\n    set speed(speed) {\n        this.setAll(\"speed\", speed);\n    }\n    get startTime() {\n        return this.getAll(\"startTime\");\n    }\n    get duration() {\n        let max = 0;\n        for (let i = 0; i < this.animations.length; i++) {\n            max = Math.max(max, this.animations[i].duration);\n        }\n        return max;\n    }\n    runAll(methodName) {\n        this.animations.forEach((controls) => controls[methodName]());\n    }\n    flatten() {\n        this.runAll(\"flatten\");\n    }\n    play() {\n        this.runAll(\"play\");\n    }\n    pause() {\n        this.runAll(\"pause\");\n    }\n    cancel() {\n        this.runAll(\"cancel\");\n    }\n    complete() {\n        this.runAll(\"complete\");\n    }\n}\n\nexport { GroupPlaybackControls };\n","/**\n * Decide whether a transition is defined on a given Transition.\n * This filters out orchestration options and returns true\n * if any options are left.\n */\nfunction isTransitionDefined({ when, delay: _delay, delayChildren, staggerChildren, staggerDirection, repeat, repeatType, repeatDelay, from, elapsed, ...transition }) {\n    return !!Object.keys(transition).length;\n}\n\nexport { isTransitionDefined };\n","import { secondsToMilliseconds } from '../../utils/time-conversion.mjs';\nimport { getDefaultTransition } from '../utils/default-transitions.mjs';\nimport { getValueTransition } from '../utils/get-value-transition.mjs';\nimport { MotionGlobalConfig } from '../../utils/GlobalConfig.mjs';\nimport { instantAnimationState } from '../../utils/use-instant-transition-state.mjs';\nimport { getFinalKeyframe } from '../animators/waapi/utils/get-final-keyframe.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\nimport { AcceleratedAnimation } from '../animators/AcceleratedAnimation.mjs';\nimport { MainThreadAnimation } from '../animators/MainThreadAnimation.mjs';\nimport { GroupPlaybackControls } from '../GroupPlaybackControls.mjs';\nimport { isTransitionDefined } from '../utils/is-transition-defined.mjs';\n\nconst animateMotionValue = (name, value, target, transition = {}, element, isHandoff) => (onComplete) => {\n    const valueTransition = getValueTransition(transition, name) || {};\n    /**\n     * Most transition values are currently completely overwritten by value-specific\n     * transitions. In the future it'd be nicer to blend these transitions. But for now\n     * delay actually does inherit from the root transition if not value-specific.\n     */\n    const delay = valueTransition.delay || transition.delay || 0;\n    /**\n     * Elapsed isn't a public transition option but can be passed through from\n     * optimized appear effects in milliseconds.\n     */\n    let { elapsed = 0 } = transition;\n    elapsed = elapsed - secondsToMilliseconds(delay);\n    let options = {\n        keyframes: Array.isArray(target) ? target : [null, target],\n        ease: \"easeOut\",\n        velocity: value.getVelocity(),\n        ...valueTransition,\n        delay: -elapsed,\n        onUpdate: (v) => {\n            value.set(v);\n            valueTransition.onUpdate && valueTransition.onUpdate(v);\n        },\n        onComplete: () => {\n            onComplete();\n            valueTransition.onComplete && valueTransition.onComplete();\n        },\n        name,\n        motionValue: value,\n        element: isHandoff ? undefined : element,\n    };\n    /**\n     * If there's no transition defined for this value, we can generate\n     * unqiue transition settings for this value.\n     */\n    if (!isTransitionDefined(valueTransition)) {\n        options = {\n            ...options,\n            ...getDefaultTransition(name, options),\n        };\n    }\n    /**\n     * Both WAAPI and our internal animation functions use durations\n     * as defined by milliseconds, while our external API defines them\n     * as seconds.\n     */\n    if (options.duration) {\n        options.duration = secondsToMilliseconds(options.duration);\n    }\n    if (options.repeatDelay) {\n        options.repeatDelay = secondsToMilliseconds(options.repeatDelay);\n    }\n    if (options.from !== undefined) {\n        options.keyframes[0] = options.from;\n    }\n    let shouldSkip = false;\n    if (options.type === false ||\n        (options.duration === 0 && !options.repeatDelay)) {\n        options.duration = 0;\n        if (options.delay === 0) {\n            shouldSkip = true;\n        }\n    }\n    if (instantAnimationState.current ||\n        MotionGlobalConfig.skipAnimations) {\n        shouldSkip = true;\n        options.duration = 0;\n        options.delay = 0;\n    }\n    /**\n     * If we can or must skip creating the animation, and apply only\n     * the final keyframe, do so. We also check once keyframes are resolved but\n     * this early check prevents the need to create an animation at all.\n     */\n    if (shouldSkip && !isHandoff && value.get() !== undefined) {\n        const finalKeyframe = getFinalKeyframe(options.keyframes, valueTransition);\n        if (finalKeyframe !== undefined) {\n            frame.update(() => {\n                options.onUpdate(finalKeyframe);\n                options.onComplete();\n            });\n            // We still want to return some animation controls here rather\n            // than returning undefined\n            return new GroupPlaybackControls([]);\n        }\n    }\n    /**\n     * Animate via WAAPI if possible. If this is a handoff animation, the optimised animation will be running via\n     * WAAPI. Therefore, this animation must be JS to ensure it runs \"under\" the\n     * optimised animation.\n     */\n    if (!isHandoff && AcceleratedAnimation.supports(options)) {\n        return new AcceleratedAnimation(options);\n    }\n    else {\n        return new MainThreadAnimation(options);\n    }\n};\n\nexport { animateMotionValue };\n","import { isKeyframesTarget } from '../animation/utils/is-keyframes-target.mjs';\n\nconst isCustomValue = (v) => {\n    return Boolean(v && typeof v === \"object\" && v.mix && v.toValue);\n};\nconst resolveFinalValueInKeyframes = (v) => {\n    // TODO maybe throw if v.length - 1 is placeholder token?\n    return isKeyframesTarget(v) ? v[v.length - 1] || 0 : v;\n};\n\nexport { isCustomValue, resolveFinalValueInKeyframes };\n","function addUniqueItem(arr, item) {\n    if (arr.indexOf(item) === -1)\n        arr.push(item);\n}\nfunction removeItem(arr, item) {\n    const index = arr.indexOf(item);\n    if (index > -1)\n        arr.splice(index, 1);\n}\n// Adapted from array-move\nfunction moveItem([...arr], fromIndex, toIndex) {\n    const startIndex = fromIndex < 0 ? arr.length + fromIndex : fromIndex;\n    if (startIndex >= 0 && startIndex < arr.length) {\n        const endIndex = toIndex < 0 ? arr.length + toIndex : toIndex;\n        const [item] = arr.splice(fromIndex, 1);\n        arr.splice(endIndex, 0, item);\n    }\n    return arr;\n}\n\nexport { addUniqueItem, moveItem, removeItem };\n","import { addUniqueItem, removeItem } from './array.mjs';\n\nclass SubscriptionManager {\n    constructor() {\n        this.subscriptions = [];\n    }\n    add(handler) {\n        addUniqueItem(this.subscriptions, handler);\n        return () => removeItem(this.subscriptions, handler);\n    }\n    notify(a, b, c) {\n        const numSubscriptions = this.subscriptions.length;\n        if (!numSubscriptions)\n            return;\n        if (numSubscriptions === 1) {\n            /**\n             * If there's only a single handler we can just call it without invoking a loop.\n             */\n            this.subscriptions[0](a, b, c);\n        }\n        else {\n            for (let i = 0; i < numSubscriptions; i++) {\n                /**\n                 * Check whether the handler exists before firing as it's possible\n                 * the subscriptions were modified during this loop running.\n                 */\n                const handler = this.subscriptions[i];\n                handler && handler(a, b, c);\n            }\n        }\n    }\n    getSize() {\n        return this.subscriptions.length;\n    }\n    clear() {\n        this.subscriptions.length = 0;\n    }\n}\n\nexport { SubscriptionManager };\n","import { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { velocityPerSecond } from '../utils/velocity-per-second.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\nimport { time } from '../frameloop/sync-time.mjs';\nimport { frame } from '../frameloop/frame.mjs';\n\n/**\n * Maximum time between the value of two frames, beyond which we\n * assume the velocity has since been 0.\n */\nconst MAX_VELOCITY_DELTA = 30;\nconst isFloat = (value) => {\n    return !isNaN(parseFloat(value));\n};\nconst collectMotionValues = {\n    current: undefined,\n};\n/**\n * `MotionValue` is used to track the state and velocity of motion values.\n *\n * @public\n */\nclass MotionValue {\n    /**\n     * @param init - The initiating value\n     * @param config - Optional configuration options\n     *\n     * -  `transformer`: A function to transform incoming values with.\n     *\n     * @internal\n     */\n    constructor(init, options = {}) {\n        /**\n         * This will be replaced by the build step with the latest version number.\n         * When MotionValues are provided to motion components, warn if versions are mixed.\n         */\n        this.version = \"11.14.1\";\n        /**\n         * Tracks whether this value can output a velocity. Currently this is only true\n         * if the value is numerical, but we might be able to widen the scope here and support\n         * other value types.\n         *\n         * @internal\n         */\n        this.canTrackVelocity = null;\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        this.updateAndNotify = (v, render = true) => {\n            const currentTime = time.now();\n            /**\n             * If we're updating the value during another frame or eventloop\n             * than the previous frame, then the we set the previous frame value\n             * to current.\n             */\n            if (this.updatedAt !== currentTime) {\n                this.setPrevFrameValue();\n            }\n            this.prev = this.current;\n            this.setCurrent(v);\n            // Update update subscribers\n            if (this.current !== this.prev && this.events.change) {\n                this.events.change.notify(this.current);\n            }\n            // Update render subscribers\n            if (render && this.events.renderRequest) {\n                this.events.renderRequest.notify(this.current);\n            }\n        };\n        this.hasAnimated = false;\n        this.setCurrent(init);\n        this.owner = options.owner;\n    }\n    setCurrent(current) {\n        this.current = current;\n        this.updatedAt = time.now();\n        if (this.canTrackVelocity === null && current !== undefined) {\n            this.canTrackVelocity = isFloat(this.current);\n        }\n    }\n    setPrevFrameValue(prevFrameValue = this.current) {\n        this.prevFrameValue = prevFrameValue;\n        this.prevUpdatedAt = this.updatedAt;\n    }\n    /**\n     * Adds a function that will be notified when the `MotionValue` is updated.\n     *\n     * It returns a function that, when called, will cancel the subscription.\n     *\n     * When calling `onChange` inside a React component, it should be wrapped with the\n     * `useEffect` hook. As it returns an unsubscribe function, this should be returned\n     * from the `useEffect` function to ensure you don't add duplicate subscribers..\n     *\n     * ```jsx\n     * export const MyComponent = () => {\n     *   const x = useMotionValue(0)\n     *   const y = useMotionValue(0)\n     *   const opacity = useMotionValue(1)\n     *\n     *   useEffect(() => {\n     *     function updateOpacity() {\n     *       const maxXY = Math.max(x.get(), y.get())\n     *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\n     *       opacity.set(newOpacity)\n     *     }\n     *\n     *     const unsubscribeX = x.on(\"change\", updateOpacity)\n     *     const unsubscribeY = y.on(\"change\", updateOpacity)\n     *\n     *     return () => {\n     *       unsubscribeX()\n     *       unsubscribeY()\n     *     }\n     *   }, [])\n     *\n     *   return <motion.div style={{ x }} />\n     * }\n     * ```\n     *\n     * @param subscriber - A function that receives the latest value.\n     * @returns A function that, when called, will cancel this subscription.\n     *\n     * @deprecated\n     */\n    onChange(subscription) {\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(false, `value.onChange(callback) is deprecated. Switch to value.on(\"change\", callback).`);\n        }\n        return this.on(\"change\", subscription);\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        const unsubscribe = this.events[eventName].add(callback);\n        if (eventName === \"change\") {\n            return () => {\n                unsubscribe();\n                /**\n                 * If we have no more change listeners by the start\n                 * of the next frame, stop active animations.\n                 */\n                frame.read(() => {\n                    if (!this.events.change.getSize()) {\n                        this.stop();\n                    }\n                });\n            };\n        }\n        return unsubscribe;\n    }\n    clearListeners() {\n        for (const eventManagers in this.events) {\n            this.events[eventManagers].clear();\n        }\n    }\n    /**\n     * Attaches a passive effect to the `MotionValue`.\n     *\n     * @internal\n     */\n    attach(passiveEffect, stopPassiveEffect) {\n        this.passiveEffect = passiveEffect;\n        this.stopPassiveEffect = stopPassiveEffect;\n    }\n    /**\n     * Sets the state of the `MotionValue`.\n     *\n     * @remarks\n     *\n     * ```jsx\n     * const x = useMotionValue(0)\n     * x.set(10)\n     * ```\n     *\n     * @param latest - Latest value to set.\n     * @param render - Whether to notify render subscribers. Defaults to `true`\n     *\n     * @public\n     */\n    set(v, render = true) {\n        if (!render || !this.passiveEffect) {\n            this.updateAndNotify(v, render);\n        }\n        else {\n            this.passiveEffect(v, this.updateAndNotify);\n        }\n    }\n    setWithVelocity(prev, current, delta) {\n        this.set(current);\n        this.prev = undefined;\n        this.prevFrameValue = prev;\n        this.prevUpdatedAt = this.updatedAt - delta;\n    }\n    /**\n     * Set the state of the `MotionValue`, stopping any active animations,\n     * effects, and resets velocity to `0`.\n     */\n    jump(v, endAnimation = true) {\n        this.updateAndNotify(v);\n        this.prev = v;\n        this.prevUpdatedAt = this.prevFrameValue = undefined;\n        endAnimation && this.stop();\n        if (this.stopPassiveEffect)\n            this.stopPassiveEffect();\n    }\n    /**\n     * Returns the latest state of `MotionValue`\n     *\n     * @returns - The latest state of `MotionValue`\n     *\n     * @public\n     */\n    get() {\n        if (collectMotionValues.current) {\n            collectMotionValues.current.push(this);\n        }\n        return this.current;\n    }\n    /**\n     * @public\n     */\n    getPrevious() {\n        return this.prev;\n    }\n    /**\n     * Returns the latest velocity of `MotionValue`\n     *\n     * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.\n     *\n     * @public\n     */\n    getVelocity() {\n        const currentTime = time.now();\n        if (!this.canTrackVelocity ||\n            this.prevFrameValue === undefined ||\n            currentTime - this.updatedAt > MAX_VELOCITY_DELTA) {\n            return 0;\n        }\n        const delta = Math.min(this.updatedAt - this.prevUpdatedAt, MAX_VELOCITY_DELTA);\n        // Casts because of parseFloat's poor typing\n        return velocityPerSecond(parseFloat(this.current) -\n            parseFloat(this.prevFrameValue), delta);\n    }\n    /**\n     * Registers a new animation to control this `MotionValue`. Only one\n     * animation can drive a `MotionValue` at one time.\n     *\n     * ```jsx\n     * value.start()\n     * ```\n     *\n     * @param animation - A function that starts the provided animation\n     *\n     * @internal\n     */\n    start(startAnimation) {\n        this.stop();\n        return new Promise((resolve) => {\n            this.hasAnimated = true;\n            this.animation = startAnimation(resolve);\n            if (this.events.animationStart) {\n                this.events.animationStart.notify();\n            }\n        }).then(() => {\n            if (this.events.animationComplete) {\n                this.events.animationComplete.notify();\n            }\n            this.clearAnimation();\n        });\n    }\n    /**\n     * Stop the currently active animation.\n     *\n     * @public\n     */\n    stop() {\n        if (this.animation) {\n            this.animation.stop();\n            if (this.events.animationCancel) {\n                this.events.animationCancel.notify();\n            }\n        }\n        this.clearAnimation();\n    }\n    /**\n     * Returns `true` if this value is currently animating.\n     *\n     * @public\n     */\n    isAnimating() {\n        return !!this.animation;\n    }\n    clearAnimation() {\n        delete this.animation;\n    }\n    /**\n     * Destroy and clean up subscribers to this `MotionValue`.\n     *\n     * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically\n     * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually\n     * created a `MotionValue` via the `motionValue` function.\n     *\n     * @public\n     */\n    destroy() {\n        this.clearListeners();\n        this.stop();\n        if (this.stopPassiveEffect) {\n            this.stopPassiveEffect();\n        }\n    }\n}\nfunction motionValue(init, options) {\n    return new MotionValue(init, options);\n}\n\nexport { MotionValue, collectMotionValues, motionValue };\n","import { resolveFinalValueInKeyframes } from '../../utils/resolve-value.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\n\n/**\n * Set VisualElement's MotionValue, creating a new MotionValue for it if\n * it doesn't exist.\n */\nfunction setMotionValue(visualElement, key, value) {\n    if (visualElement.hasValue(key)) {\n        visualElement.getValue(key).set(value);\n    }\n    else {\n        visualElement.addValue(key, motionValue(value));\n    }\n}\nfunction setTarget(visualElement, definition) {\n    const resolved = resolveVariant(visualElement, definition);\n    let { transitionEnd = {}, transition = {}, ...target } = resolved || {};\n    target = { ...target, ...transitionEnd };\n    for (const key in target) {\n        const value = resolveFinalValueInKeyframes(target[key]);\n        setMotionValue(visualElement, key, value);\n    }\n}\n\nexport { setTarget };\n","/**\n * Convert camelCase to dash-case properties.\n */\nconst camelToDash = (str) => str.replace(/([a-z])([A-Z])/gu, \"$1-$2\").toLowerCase();\n\nexport { camelToDash };\n","import { camelToDash } from '../../render/dom/utils/camel-to-dash.mjs';\n\nconst optimizedAppearDataId = \"framerAppearId\";\nconst optimizedAppearDataAttribute = \"data-\" + camelToDash(optimizedAppearDataId);\n\nexport { optimizedAppearDataAttribute, optimizedAppearDataId };\n","import { optimizedAppearDataAttribute } from './data-id.mjs';\n\nfunction getOptimisedAppearId(visualElement) {\n    return visualElement.props[optimizedAppearDataAttribute];\n}\n\nexport { getOptimisedAppearId };\n","const isMotionValue = (value) => Boolean(value && value.getVelocity);\n\nexport { isMotionValue };\n","import { isMotionValue } from '../utils/is-motion-value.mjs';\n\nfunction isWillChangeMotionValue(value) {\n    return Boolean(isMotionValue(value) && value.add);\n}\n\nexport { isWillChangeMotionValue };\n","import { isWillChangeMotionValue } from './is.mjs';\n\nfunction addValueToWillChange(visualElement, key) {\n    const willChange = visualElement.getValue(\"willChange\");\n    /**\n     * It could be that a user has set willChange to a regular MotionValue,\n     * in which case we can't add the value to it.\n     */\n    if (isWillChangeMotionValue(willChange)) {\n        return willChange.add(key);\n    }\n}\n\nexport { addValueToWillChange };\n","import { transformProps } from '../../render/html/utils/transform.mjs';\nimport { animateMotionValue } from './motion-value.mjs';\nimport { setTarget } from '../../render/utils/setters.mjs';\nimport { getValueTransition } from '../utils/get-value-transition.mjs';\nimport { getOptimisedAppearId } from '../optimized-appear/get-appear-id.mjs';\nimport { addValueToWillChange } from '../../value/use-will-change/add-will-change.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */\nfunction shouldBlockAnimation({ protectedKeys, needsAnimating }, key) {\n    const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n    needsAnimating[key] = false;\n    return shouldBlock;\n}\nfunction animateTarget(visualElement, targetAndTransition, { delay = 0, transitionOverride, type } = {}) {\n    var _a;\n    let { transition = visualElement.getDefaultTransition(), transitionEnd, ...target } = targetAndTransition;\n    if (transitionOverride)\n        transition = transitionOverride;\n    const animations = [];\n    const animationTypeState = type &&\n        visualElement.animationState &&\n        visualElement.animationState.getState()[type];\n    for (const key in target) {\n        const value = visualElement.getValue(key, (_a = visualElement.latestValues[key]) !== null && _a !== void 0 ? _a : null);\n        const valueTarget = target[key];\n        if (valueTarget === undefined ||\n            (animationTypeState &&\n                shouldBlockAnimation(animationTypeState, key))) {\n            continue;\n        }\n        const valueTransition = {\n            delay,\n            ...getValueTransition(transition || {}, key),\n        };\n        /**\n         * If this is the first time a value is being animated, check\n         * to see if we're handling off from an existing animation.\n         */\n        let isHandoff = false;\n        if (window.MotionHandoffAnimation) {\n            const appearId = getOptimisedAppearId(visualElement);\n            if (appearId) {\n                const startTime = window.MotionHandoffAnimation(appearId, key, frame);\n                if (startTime !== null) {\n                    valueTransition.startTime = startTime;\n                    isHandoff = true;\n                }\n            }\n        }\n        addValueToWillChange(visualElement, key);\n        value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key)\n            ? { type: false }\n            : valueTransition, visualElement, isHandoff));\n        const animation = value.animation;\n        if (animation) {\n            animations.push(animation);\n        }\n    }\n    if (transitionEnd) {\n        Promise.all(animations).then(() => {\n            frame.update(() => {\n                transitionEnd && setTarget(visualElement, transitionEnd);\n            });\n        });\n    }\n    return animations;\n}\n\nexport { animateTarget };\n","import { resolveVariant } from '../../render/utils/resolve-dynamic-variants.mjs';\nimport { animateTarget } from './visual-element-target.mjs';\n\nfunction animateVariant(visualElement, variant, options = {}) {\n    var _a;\n    const resolved = resolveVariant(visualElement, variant, options.type === \"exit\"\n        ? (_a = visualElement.presenceContext) === null || _a === void 0 ? void 0 : _a.custom\n        : undefined);\n    let { transition = visualElement.getDefaultTransition() || {} } = resolved || {};\n    if (options.transitionOverride) {\n        transition = options.transitionOverride;\n    }\n    /**\n     * If we have a variant, create a callback that runs it as an animation.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */\n    const getAnimation = resolved\n        ? () => Promise.all(animateTarget(visualElement, resolved, options))\n        : () => Promise.resolve();\n    /**\n     * If we have children, create a callback that runs all their animations.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */\n    const getChildAnimations = visualElement.variantChildren && visualElement.variantChildren.size\n        ? (forwardDelay = 0) => {\n            const { delayChildren = 0, staggerChildren, staggerDirection, } = transition;\n            return animateChildren(visualElement, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);\n        }\n        : () => Promise.resolve();\n    /**\n     * If the transition explicitly defines a \"when\" option, we need to resolve either\n     * this animation or all children animations before playing the other.\n     */\n    const { when } = transition;\n    if (when) {\n        const [first, last] = when === \"beforeChildren\"\n            ? [getAnimation, getChildAnimations]\n            : [getChildAnimations, getAnimation];\n        return first().then(() => last());\n    }\n    else {\n        return Promise.all([getAnimation(), getChildAnimations(options.delay)]);\n    }\n}\nfunction animateChildren(visualElement, variant, delayChildren = 0, staggerChildren = 0, staggerDirection = 1, options) {\n    const animations = [];\n    const maxStaggerDuration = (visualElement.variantChildren.size - 1) * staggerChildren;\n    const generateStaggerDuration = staggerDirection === 1\n        ? (i = 0) => i * staggerChildren\n        : (i = 0) => maxStaggerDuration - i * staggerChildren;\n    Array.from(visualElement.variantChildren)\n        .sort(sortByTreeOrder)\n        .forEach((child, i) => {\n        child.notify(\"AnimationStart\", variant);\n        animations.push(animateVariant(child, variant, {\n            ...options,\n            delay: delayChildren + generateStaggerDuration(i),\n        }).then(() => child.notify(\"AnimationComplete\", variant)));\n    });\n    return Promise.all(animations);\n}\nfunction sortByTreeOrder(a, b) {\n    return a.sortNodePosition(b);\n}\n\nexport { animateVariant, sortByTreeOrder };\n","import { resolveVariant } from '../../render/utils/resolve-dynamic-variants.mjs';\nimport { animateTarget } from './visual-element-target.mjs';\nimport { animateVariant } from './visual-element-variant.mjs';\n\nfunction animateVisualElement(visualElement, definition, options = {}) {\n    visualElement.notify(\"AnimationStart\", definition);\n    let animation;\n    if (Array.isArray(definition)) {\n        const animations = definition.map((variant) => animateVariant(visualElement, variant, options));\n        animation = Promise.all(animations);\n    }\n    else if (typeof definition === \"string\") {\n        animation = animateVariant(visualElement, definition, options);\n    }\n    else {\n        const resolvedDefinition = typeof definition === \"function\"\n            ? resolveVariant(visualElement, definition, options.custom)\n            : definition;\n        animation = Promise.all(animateTarget(visualElement, resolvedDefinition, options));\n    }\n    return animation.then(() => {\n        visualElement.notify(\"AnimationComplete\", definition);\n    });\n}\n\nexport { animateVisualElement };\n","import { isVariantLabel } from './is-variant-label.mjs';\nimport { variantProps } from './variant-props.mjs';\n\nconst numVariantProps = variantProps.length;\nfunction getVariantContext(visualElement) {\n    if (!visualElement)\n        return undefined;\n    if (!visualElement.isControllingVariants) {\n        const context = visualElement.parent\n            ? getVariantContext(visualElement.parent) || {}\n            : {};\n        if (visualElement.props.initial !== undefined) {\n            context.initial = visualElement.props.initial;\n        }\n        return context;\n    }\n    const context = {};\n    for (let i = 0; i < numVariantProps; i++) {\n        const name = variantProps[i];\n        const prop = visualElement.props[name];\n        if (isVariantLabel(prop) || prop === false) {\n            context[name] = prop;\n        }\n    }\n    return context;\n}\n\nexport { getVariantContext };\n","import { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { isKeyframesTarget } from '../../animation/utils/is-keyframes-target.mjs';\nimport { shallowCompare } from '../../utils/shallow-compare.mjs';\nimport { isVariantLabel } from './is-variant-label.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\nimport { variantPriorityOrder } from './variant-props.mjs';\nimport { animateVisualElement } from '../../animation/interfaces/visual-element.mjs';\nimport { getVariantContext } from './get-variant-context.mjs';\n\nconst reversePriorityOrder = [...variantPriorityOrder].reverse();\nconst numAnimationTypes = variantPriorityOrder.length;\nfunction animateList(visualElement) {\n    return (animations) => Promise.all(animations.map(({ animation, options }) => animateVisualElement(visualElement, animation, options)));\n}\nfunction createAnimationState(visualElement) {\n    let animate = animateList(visualElement);\n    let state = createState();\n    let isInitialRender = true;\n    /**\n     * This function will be used to reduce the animation definitions for\n     * each active animation type into an object of resolved values for it.\n     */\n    const buildResolvedTypeValues = (type) => (acc, definition) => {\n        var _a;\n        const resolved = resolveVariant(visualElement, definition, type === \"exit\"\n            ? (_a = visualElement.presenceContext) === null || _a === void 0 ? void 0 : _a.custom\n            : undefined);\n        if (resolved) {\n            const { transition, transitionEnd, ...target } = resolved;\n            acc = { ...acc, ...target, ...transitionEnd };\n        }\n        return acc;\n    };\n    /**\n     * This just allows us to inject mocked animation functions\n     * @internal\n     */\n    function setAnimateFunction(makeAnimator) {\n        animate = makeAnimator(visualElement);\n    }\n    /**\n     * When we receive new props, we need to:\n     * 1. Create a list of protected keys for each type. This is a directory of\n     *    value keys that are currently being \"handled\" by types of a higher priority\n     *    so that whenever an animation is played of a given type, these values are\n     *    protected from being animated.\n     * 2. Determine if an animation type needs animating.\n     * 3. Determine if any values have been removed from a type and figure out\n     *    what to animate those to.\n     */\n    function animateChanges(changedActiveType) {\n        const { props } = visualElement;\n        const context = getVariantContext(visualElement.parent) || {};\n        /**\n         * A list of animations that we'll build into as we iterate through the animation\n         * types. This will get executed at the end of the function.\n         */\n        const animations = [];\n        /**\n         * Keep track of which values have been removed. Then, as we hit lower priority\n         * animation types, we can check if they contain removed values and animate to that.\n         */\n        const removedKeys = new Set();\n        /**\n         * A dictionary of all encountered keys. This is an object to let us build into and\n         * copy it without iteration. Each time we hit an animation type we set its protected\n         * keys - the keys its not allowed to animate - to the latest version of this object.\n         */\n        let encounteredKeys = {};\n        /**\n         * If a variant has been removed at a given index, and this component is controlling\n         * variant animations, we want to ensure lower-priority variants are forced to animate.\n         */\n        let removedVariantIndex = Infinity;\n        /**\n         * Iterate through all animation types in reverse priority order. For each, we want to\n         * detect which values it's handling and whether or not they've changed (and therefore\n         * need to be animated). If any values have been removed, we want to detect those in\n         * lower priority props and flag for animation.\n         */\n        for (let i = 0; i < numAnimationTypes; i++) {\n            const type = reversePriorityOrder[i];\n            const typeState = state[type];\n            const prop = props[type] !== undefined\n                ? props[type]\n                : context[type];\n            const propIsVariant = isVariantLabel(prop);\n            /**\n             * If this type has *just* changed isActive status, set activeDelta\n             * to that status. Otherwise set to null.\n             */\n            const activeDelta = type === changedActiveType ? typeState.isActive : null;\n            if (activeDelta === false)\n                removedVariantIndex = i;\n            /**\n             * If this prop is an inherited variant, rather than been set directly on the\n             * component itself, we want to make sure we allow the parent to trigger animations.\n             *\n             * TODO: Can probably change this to a !isControllingVariants check\n             */\n            let isInherited = prop === context[type] &&\n                prop !== props[type] &&\n                propIsVariant;\n            /**\n             *\n             */\n            if (isInherited &&\n                isInitialRender &&\n                visualElement.manuallyAnimateOnMount) {\n                isInherited = false;\n            }\n            /**\n             * Set all encountered keys so far as the protected keys for this type. This will\n             * be any key that has been animated or otherwise handled by active, higher-priortiy types.\n             */\n            typeState.protectedKeys = { ...encounteredKeys };\n            // Check if we can skip analysing this prop early\n            if (\n            // If it isn't active and hasn't *just* been set as inactive\n            (!typeState.isActive && activeDelta === null) ||\n                // If we didn't and don't have any defined prop for this animation type\n                (!prop && !typeState.prevProp) ||\n                // Or if the prop doesn't define an animation\n                isAnimationControls(prop) ||\n                typeof prop === \"boolean\") {\n                continue;\n            }\n            /**\n             * As we go look through the values defined on this type, if we detect\n             * a changed value or a value that was removed in a higher priority, we set\n             * this to true and add this prop to the animation list.\n             */\n            const variantDidChange = checkVariantsDidChange(typeState.prevProp, prop);\n            let shouldAnimateType = variantDidChange ||\n                // If we're making this variant active, we want to always make it active\n                (type === changedActiveType &&\n                    typeState.isActive &&\n                    !isInherited &&\n                    propIsVariant) ||\n                // If we removed a higher-priority variant (i is in reverse order)\n                (i > removedVariantIndex && propIsVariant);\n            let handledRemovedValues = false;\n            /**\n             * As animations can be set as variant lists, variants or target objects, we\n             * coerce everything to an array if it isn't one already\n             */\n            const definitionList = Array.isArray(prop) ? prop : [prop];\n            /**\n             * Build an object of all the resolved values. We'll use this in the subsequent\n             * animateChanges calls to determine whether a value has changed.\n             */\n            let resolvedValues = definitionList.reduce(buildResolvedTypeValues(type), {});\n            if (activeDelta === false)\n                resolvedValues = {};\n            /**\n             * Now we need to loop through all the keys in the prev prop and this prop,\n             * and decide:\n             * 1. If the value has changed, and needs animating\n             * 2. If it has been removed, and needs adding to the removedKeys set\n             * 3. If it has been removed in a higher priority type and needs animating\n             * 4. If it hasn't been removed in a higher priority but hasn't changed, and\n             *    needs adding to the type's protectedKeys list.\n             */\n            const { prevResolvedValues = {} } = typeState;\n            const allKeys = {\n                ...prevResolvedValues,\n                ...resolvedValues,\n            };\n            const markToAnimate = (key) => {\n                shouldAnimateType = true;\n                if (removedKeys.has(key)) {\n                    handledRemovedValues = true;\n                    removedKeys.delete(key);\n                }\n                typeState.needsAnimating[key] = true;\n                const motionValue = visualElement.getValue(key);\n                if (motionValue)\n                    motionValue.liveStyle = false;\n            };\n            for (const key in allKeys) {\n                const next = resolvedValues[key];\n                const prev = prevResolvedValues[key];\n                // If we've already handled this we can just skip ahead\n                if (encounteredKeys.hasOwnProperty(key))\n                    continue;\n                /**\n                 * If the value has changed, we probably want to animate it.\n                 */\n                let valueHasChanged = false;\n                if (isKeyframesTarget(next) && isKeyframesTarget(prev)) {\n                    valueHasChanged = !shallowCompare(next, prev);\n                }\n                else {\n                    valueHasChanged = next !== prev;\n                }\n                if (valueHasChanged) {\n                    if (next !== undefined && next !== null) {\n                        // If next is defined and doesn't equal prev, it needs animating\n                        markToAnimate(key);\n                    }\n                    else {\n                        // If it's undefined, it's been removed.\n                        removedKeys.add(key);\n                    }\n                }\n                else if (next !== undefined && removedKeys.has(key)) {\n                    /**\n                     * If next hasn't changed and it isn't undefined, we want to check if it's\n                     * been removed by a higher priority\n                     */\n                    markToAnimate(key);\n                }\n                else {\n                    /**\n                     * If it hasn't changed, we add it to the list of protected values\n                     * to ensure it doesn't get animated.\n                     */\n                    typeState.protectedKeys[key] = true;\n                }\n            }\n            /**\n             * Update the typeState so next time animateChanges is called we can compare the\n             * latest prop and resolvedValues to these.\n             */\n            typeState.prevProp = prop;\n            typeState.prevResolvedValues = resolvedValues;\n            /**\n             *\n             */\n            if (typeState.isActive) {\n                encounteredKeys = { ...encounteredKeys, ...resolvedValues };\n            }\n            if (isInitialRender && visualElement.blockInitialAnimation) {\n                shouldAnimateType = false;\n            }\n            /**\n             * If this is an inherited prop we want to skip this animation\n             * unless the inherited variants haven't changed on this render.\n             */\n            const willAnimateViaParent = isInherited && variantDidChange;\n            const needsAnimating = !willAnimateViaParent || handledRemovedValues;\n            if (shouldAnimateType && needsAnimating) {\n                animations.push(...definitionList.map((animation) => ({\n                    animation: animation,\n                    options: { type },\n                })));\n            }\n        }\n        /**\n         * If there are some removed value that haven't been dealt with,\n         * we need to create a new animation that falls back either to the value\n         * defined in the style prop, or the last read value.\n         */\n        if (removedKeys.size) {\n            const fallbackAnimation = {};\n            removedKeys.forEach((key) => {\n                const fallbackTarget = visualElement.getBaseTarget(key);\n                const motionValue = visualElement.getValue(key);\n                if (motionValue)\n                    motionValue.liveStyle = true;\n                // @ts-expect-error - @mattgperry to figure if we should do something here\n                fallbackAnimation[key] = fallbackTarget !== null && fallbackTarget !== void 0 ? fallbackTarget : null;\n            });\n            animations.push({ animation: fallbackAnimation });\n        }\n        let shouldAnimate = Boolean(animations.length);\n        if (isInitialRender &&\n            (props.initial === false || props.initial === props.animate) &&\n            !visualElement.manuallyAnimateOnMount) {\n            shouldAnimate = false;\n        }\n        isInitialRender = false;\n        return shouldAnimate ? animate(animations) : Promise.resolve();\n    }\n    /**\n     * Change whether a certain animation type is active.\n     */\n    function setActive(type, isActive) {\n        var _a;\n        // If the active state hasn't changed, we can safely do nothing here\n        if (state[type].isActive === isActive)\n            return Promise.resolve();\n        // Propagate active change to children\n        (_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach((child) => { var _a; return (_a = child.animationState) === null || _a === void 0 ? void 0 : _a.setActive(type, isActive); });\n        state[type].isActive = isActive;\n        const animations = animateChanges(type);\n        for (const key in state) {\n            state[key].protectedKeys = {};\n        }\n        return animations;\n    }\n    return {\n        animateChanges,\n        setActive,\n        setAnimateFunction,\n        getState: () => state,\n        reset: () => {\n            state = createState();\n            isInitialRender = true;\n        },\n    };\n}\nfunction checkVariantsDidChange(prev, next) {\n    if (typeof next === \"string\") {\n        return next !== prev;\n    }\n    else if (Array.isArray(next)) {\n        return !shallowCompare(next, prev);\n    }\n    return false;\n}\nfunction createTypeState(isActive = false) {\n    return {\n        isActive,\n        protectedKeys: {},\n        needsAnimating: {},\n        prevResolvedValues: {},\n    };\n}\nfunction createState() {\n    return {\n        animate: createTypeState(true),\n        whileInView: createTypeState(),\n        whileHover: createTypeState(),\n        whileTap: createTypeState(),\n        whileDrag: createTypeState(),\n        whileFocus: createTypeState(),\n        exit: createTypeState(),\n    };\n}\n\nexport { checkVariantsDidChange, createAnimationState };\n","class Feature {\n    constructor(node) {\n        this.isMounted = false;\n        this.node = node;\n    }\n    update() { }\n}\n\nexport { Feature };\n","import { isAnimationControls } from '../../../animation/utils/is-animation-controls.mjs';\nimport { createAnimationState } from '../../../render/utils/animation-state.mjs';\nimport { Feature } from '../Feature.mjs';\n\nclass AnimationFeature extends Feature {\n    /**\n     * We dynamically generate the AnimationState manager as it contains a reference\n     * to the underlying animation library. We only want to load that if we load this,\n     * so people can optionally code split it out using the `m` component.\n     */\n    constructor(node) {\n        super(node);\n        node.animationState || (node.animationState = createAnimationState(node));\n    }\n    updateAnimationControlsSubscription() {\n        const { animate } = this.node.getProps();\n        if (isAnimationControls(animate)) {\n            this.unmountControls = animate.subscribe(this.node);\n        }\n    }\n    /**\n     * Subscribe any provided AnimationControls to the component's VisualElement\n     */\n    mount() {\n        this.updateAnimationControlsSubscription();\n    }\n    update() {\n        const { animate } = this.node.getProps();\n        const { animate: prevAnimate } = this.node.prevProps || {};\n        if (animate !== prevAnimate) {\n            this.updateAnimationControlsSubscription();\n        }\n    }\n    unmount() {\n        var _a;\n        this.node.animationState.reset();\n        (_a = this.unmountControls) === null || _a === void 0 ? void 0 : _a.call(this);\n    }\n}\n\nexport { AnimationFeature };\n","import { Feature } from '../Feature.mjs';\n\nlet id = 0;\nclass ExitAnimationFeature extends Feature {\n    constructor() {\n        super(...arguments);\n        this.id = id++;\n    }\n    update() {\n        if (!this.node.presenceContext)\n            return;\n        const { isPresent, onExitComplete } = this.node.presenceContext;\n        const { isPresent: prevIsPresent } = this.node.prevPresenceContext || {};\n        if (!this.node.animationState || isPresent === prevIsPresent) {\n            return;\n        }\n        const exitAnimation = this.node.animationState.setActive(\"exit\", !isPresent);\n        if (onExitComplete && !isPresent) {\n            exitAnimation.then(() => onExitComplete(this.id));\n        }\n    }\n    mount() {\n        const { register } = this.node.presenceContext || {};\n        if (register) {\n            this.unmount = register(this.id);\n        }\n    }\n    unmount() { }\n}\n\nexport { ExitAnimationFeature };\n","import { AnimationFeature } from './animation/index.mjs';\nimport { ExitAnimationFeature } from './animation/exit.mjs';\n\nconst animations = {\n    animation: {\n        Feature: AnimationFeature,\n    },\n    exit: {\n        Feature: ExitAnimationFeature,\n    },\n};\n\nexport { animations };\n","const isDragging = {\n    x: false,\n    y: false,\n};\nfunction isDragActive() {\n    return isDragging.x || isDragging.y;\n}\n\nexport { isDragActive, isDragging };\n","function resolveElements(elementOrSelector, scope, selectorCache) {\n    var _a;\n    if (elementOrSelector instanceof Element) {\n        return [elementOrSelector];\n    }\n    else if (typeof elementOrSelector === \"string\") {\n        let root = document;\n        if (scope) {\n            // TODO: Refactor to utils package\n            // invariant(\n            //     Boolean(scope.current),\n            //     \"Scope provided, but no element detected.\"\n            // )\n            root = scope.current;\n        }\n        const elements = (_a = selectorCache === null || selectorCache === void 0 ? void 0 : selectorCache[elementOrSelector]) !== null && _a !== void 0 ? _a : root.querySelectorAll(elementOrSelector);\n        return elements ? Array.from(elements) : [];\n    }\n    return Array.from(elementOrSelector);\n}\n\nexport { resolveElements };\n","import { resolveElements } from '../../utils/resolve-elements.mjs';\n\nfunction setupGesture(elementOrSelector, options) {\n    const elements = resolveElements(elementOrSelector);\n    const gestureAbortController = new AbortController();\n    const eventOptions = {\n        passive: true,\n        ...options,\n        signal: gestureAbortController.signal,\n    };\n    const cancel = () => gestureAbortController.abort();\n    return [elements, eventOptions, cancel];\n}\n\nexport { setupGesture };\n","import { isDragActive } from './drag/state/is-active.mjs';\nimport { setupGesture } from './utils/setup.mjs';\n\n/**\n * Filter out events that are not pointer events, or are triggering\n * while a Motion gesture is active.\n */\nfunction filterEvents(callback) {\n    return (event) => {\n        if (event.pointerType === \"touch\" || isDragActive())\n            return;\n        callback(event);\n    };\n}\n/**\n * Create a hover gesture. hover() is different to .addEventListener(\"pointerenter\")\n * in that it has an easier syntax, filters out polyfilled touch events, interoperates\n * with drag gestures, and automatically removes the \"pointerennd\" event listener when the hover ends.\n *\n * @public\n */\nfunction hover(elementOrSelector, onHoverStart, options = {}) {\n    const [elements, eventOptions, cancel] = setupGesture(elementOrSelector, options);\n    const onPointerEnter = filterEvents((enterEvent) => {\n        const { target } = enterEvent;\n        const onHoverEnd = onHoverStart(enterEvent);\n        if (!onHoverEnd || !target)\n            return;\n        const onPointerLeave = filterEvents((leaveEvent) => {\n            onHoverEnd(leaveEvent);\n            target.removeEventListener(\"pointerleave\", onPointerLeave);\n        });\n        target.addEventListener(\"pointerleave\", onPointerLeave, eventOptions);\n    });\n    elements.forEach((element) => {\n        element.addEventListener(\"pointerenter\", onPointerEnter, eventOptions);\n    });\n    return cancel;\n}\n\nexport { hover };\n","const isPrimaryPointer = (event) => {\n    if (event.pointerType === \"mouse\") {\n        return typeof event.button !== \"number\" || event.button <= 0;\n    }\n    else {\n        /**\n         * isPrimary is true for all mice buttons, whereas every touch point\n         * is regarded as its own input. So subsequent concurrent touch points\n         * will be false.\n         *\n         * Specifically match against false here as incomplete versions of\n         * PointerEvents in very old browser might have it set as undefined.\n         */\n        return event.isPrimary !== false;\n    }\n};\n\nexport { isPrimaryPointer };\n","const isPressing = new WeakSet();\n\nexport { isPressing };\n","import { isPressing } from './state.mjs';\n\n/**\n * Filter out events that are not \"Enter\" keys.\n */\nfunction filterEvents(callback) {\n    return (event) => {\n        if (event.key !== \"Enter\")\n            return;\n        callback(event);\n    };\n}\nfunction firePointerEvent(target, type) {\n    target.dispatchEvent(new PointerEvent(\"pointer\" + type, { isPrimary: true, bubbles: true }));\n}\nconst enableKeyboardPress = (focusEvent, eventOptions) => {\n    const element = focusEvent.currentTarget;\n    if (!element)\n        return;\n    const handleKeydown = filterEvents(() => {\n        if (isPressing.has(element))\n            return;\n        firePointerEvent(element, \"down\");\n        const handleKeyup = filterEvents(() => {\n            firePointerEvent(element, \"up\");\n        });\n        const handleBlur = () => firePointerEvent(element, \"cancel\");\n        element.addEventListener(\"keyup\", handleKeyup, eventOptions);\n        element.addEventListener(\"blur\", handleBlur, eventOptions);\n    });\n    element.addEventListener(\"keydown\", handleKeydown, eventOptions);\n    /**\n     * Add an event listener that fires on blur to remove the keydown events.\n     */\n    element.addEventListener(\"blur\", () => element.removeEventListener(\"keydown\", handleKeydown), eventOptions);\n};\n\nexport { enableKeyboardPress };\n","const focusableElements = new Set([\n    \"BUTTON\",\n    \"INPUT\",\n    \"SELECT\",\n    \"TEXTAREA\",\n    \"A\",\n]);\nfunction isElementKeyboardAccessible(element) {\n    return focusableElements.has(element.tagName) || element.tabIndex !== -1;\n}\n\nexport { isElementKeyboardAccessible };\n","/**\n * Recursively traverse up the tree to check whether the provided child node\n * is the parent or a descendant of it.\n *\n * @param parent - Element to find\n * @param child - Element to test against parent\n */\nconst isNodeOrChild = (parent, child) => {\n    if (!child) {\n        return false;\n    }\n    else if (parent === child) {\n        return true;\n    }\n    else {\n        return isNodeOrChild(parent, child.parentElement);\n    }\n};\n\nexport { isNodeOrChild };\n","import { isDragActive } from '../drag/state/is-active.mjs';\nimport { isPrimaryPointer } from '../utils/is-primary-pointer.mjs';\nimport { setupGesture } from '../utils/setup.mjs';\nimport { enableKeyboardPress } from './utils/keyboard.mjs';\nimport { isElementKeyboardAccessible } from './utils/is-keyboard-accessible.mjs';\nimport { isNodeOrChild } from '../utils/is-node-or-child.mjs';\nimport { isPressing } from './utils/state.mjs';\n\n/**\n * Filter out events that are not primary pointer events, or are triggering\n * while a Motion gesture is active.\n */\nfunction isValidPressEvent(event) {\n    return isPrimaryPointer(event) && !isDragActive();\n}\n/**\n * Create a press gesture.\n *\n * Press is different to `\"pointerdown\"`, `\"pointerup\"` in that it\n * automatically filters out secondary pointer events like right\n * click and multitouch.\n *\n * It also adds accessibility support for keyboards, where\n * an element with a press gesture will receive focus and\n *  trigger on Enter `\"keydown\"` and `\"keyup\"` events.\n *\n * This is different to a browser's `\"click\"` event, which does\n * respond to keyboards but only for the `\"click\"` itself, rather\n * than the press start and end/cancel. The element also needs\n * to be focusable for this to work, whereas a press gesture will\n * make an element focusable by default.\n *\n * @public\n */\nfunction press(elementOrSelector, onPressStart, options = {}) {\n    const [elements, eventOptions, cancelEvents] = setupGesture(elementOrSelector, options);\n    const startPress = (startEvent) => {\n        const element = startEvent.currentTarget;\n        if (!isValidPressEvent(startEvent) || isPressing.has(element))\n            return;\n        isPressing.add(element);\n        const onPressEnd = onPressStart(startEvent);\n        const onPointerEnd = (endEvent, success) => {\n            window.removeEventListener(\"pointerup\", onPointerUp);\n            window.removeEventListener(\"pointercancel\", onPointerCancel);\n            if (!isValidPressEvent(endEvent) || !isPressing.has(element)) {\n                return;\n            }\n            isPressing.delete(element);\n            if (onPressEnd) {\n                onPressEnd(endEvent, { success });\n            }\n        };\n        const onPointerUp = (upEvent) => {\n            onPointerEnd(upEvent, options.useGlobalTarget ||\n                isNodeOrChild(element, upEvent.target));\n        };\n        const onPointerCancel = (cancelEvent) => {\n            onPointerEnd(cancelEvent, false);\n        };\n        window.addEventListener(\"pointerup\", onPointerUp, eventOptions);\n        window.addEventListener(\"pointercancel\", onPointerCancel, eventOptions);\n    };\n    elements.forEach((element) => {\n        if (!isElementKeyboardAccessible(element)) {\n            element.tabIndex = 0;\n        }\n        const target = options.useGlobalTarget ? window : element;\n        target.addEventListener(\"pointerdown\", startPress, eventOptions);\n        element.addEventListener(\"focus\", (event) => enableKeyboardPress(event, eventOptions), eventOptions);\n    });\n    return cancelEvents;\n}\n\nexport { press };\n","import { isDragging } from './is-active.mjs';\n\nfunction setDragLock(axis) {\n    if (axis === \"x\" || axis === \"y\") {\n        if (isDragging[axis]) {\n            return null;\n        }\n        else {\n            isDragging[axis] = true;\n            return () => {\n                isDragging[axis] = false;\n            };\n        }\n    }\n    else {\n        if (isDragging.x || isDragging.y) {\n            return null;\n        }\n        else {\n            isDragging.x = isDragging.y = true;\n            return () => {\n                isDragging.x = isDragging.y = false;\n            };\n        }\n    }\n}\n\nexport { setDragLock };\n","export { hover } from './gestures/hover.mjs';\nexport { press } from './gestures/press/index.mjs';\nexport { resolveElements } from './utils/resolve-elements.mjs';\nexport { isDragActive, isDragging } from './gestures/drag/state/is-active.mjs';\nexport { setDragLock } from './gestures/drag/state/set-active.mjs';\nexport { isPrimaryPointer } from './gestures/utils/is-primary-pointer.mjs';\nexport { isNodeOrChild } from './gestures/utils/is-node-or-child.mjs';\n","import { isPrimaryPointer } from 'motion-dom';\n\nfunction extractEventInfo(event) {\n    return {\n        point: {\n            x: event.pageX,\n            y: event.pageY,\n        },\n    };\n}\nconst addPointerInfo = (handler) => {\n    return (event) => isPrimaryPointer(event) && handler(event, extractEventInfo(event));\n};\n\nexport { addPointerInfo, extractEventInfo };\n","function addDomEvent(target, eventName, handler, options = { passive: true }) {\n    target.addEventListener(eventName, handler, options);\n    return () => target.removeEventListener(eventName, handler);\n}\n\nexport { addDomEvent };\n","import { addDomEvent } from './add-dom-event.mjs';\nimport { addPointerInfo } from './event-info.mjs';\n\nfunction addPointerEvent(target, eventName, handler, options) {\n    return addDomEvent(target, eventName, addPointerInfo(handler), options);\n}\n\nexport { addPointerEvent };\n","const distance = (a, b) => Math.abs(a - b);\nfunction distance2D(a, b) {\n    // Multi-dimensional\n    const xDelta = distance(a.x, b.x);\n    const yDelta = distance(a.y, b.y);\n    return Math.sqrt(xDelta ** 2 + yDelta ** 2);\n}\n\nexport { distance, distance2D };\n","import { extractEventInfo } from '../../events/event-info.mjs';\nimport { secondsToMilliseconds, millisecondsToSeconds } from '../../utils/time-conversion.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { pipe } from '../../utils/pipe.mjs';\nimport { distance2D } from '../../utils/distance.mjs';\nimport { isPrimaryPointer } from 'motion-dom';\nimport { frame, cancelFrame, frameData } from '../../frameloop/frame.mjs';\n\n/**\n * @internal\n */\nclass PanSession {\n    constructor(event, handlers, { transformPagePoint, contextWindow, dragSnapToOrigin = false, } = {}) {\n        /**\n         * @internal\n         */\n        this.startEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEventInfo = null;\n        /**\n         * @internal\n         */\n        this.handlers = {};\n        /**\n         * @internal\n         */\n        this.contextWindow = window;\n        this.updatePoint = () => {\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const info = getPanInfo(this.lastMoveEventInfo, this.history);\n            const isPanStarted = this.startEvent !== null;\n            // Only start panning if the offset is larger than 3 pixels. If we make it\n            // any larger than this we'll want to reset the pointer history\n            // on the first update to avoid visual snapping to the cursoe.\n            const isDistancePastThreshold = distance2D(info.offset, { x: 0, y: 0 }) >= 3;\n            if (!isPanStarted && !isDistancePastThreshold)\n                return;\n            const { point } = info;\n            const { timestamp } = frameData;\n            this.history.push({ ...point, timestamp });\n            const { onStart, onMove } = this.handlers;\n            if (!isPanStarted) {\n                onStart && onStart(this.lastMoveEvent, info);\n                this.startEvent = this.lastMoveEvent;\n            }\n            onMove && onMove(this.lastMoveEvent, info);\n        };\n        this.handlePointerMove = (event, info) => {\n            this.lastMoveEvent = event;\n            this.lastMoveEventInfo = transformPoint(info, this.transformPagePoint);\n            // Throttle mouse move event to once per frame\n            frame.update(this.updatePoint, true);\n        };\n        this.handlePointerUp = (event, info) => {\n            this.end();\n            const { onEnd, onSessionEnd, resumeAnimation } = this.handlers;\n            if (this.dragSnapToOrigin)\n                resumeAnimation && resumeAnimation();\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const panInfo = getPanInfo(event.type === \"pointercancel\"\n                ? this.lastMoveEventInfo\n                : transformPoint(info, this.transformPagePoint), this.history);\n            if (this.startEvent && onEnd) {\n                onEnd(event, panInfo);\n            }\n            onSessionEnd && onSessionEnd(event, panInfo);\n        };\n        // If we have more than one touch, don't start detecting this gesture\n        if (!isPrimaryPointer(event))\n            return;\n        this.dragSnapToOrigin = dragSnapToOrigin;\n        this.handlers = handlers;\n        this.transformPagePoint = transformPagePoint;\n        this.contextWindow = contextWindow || window;\n        const info = extractEventInfo(event);\n        const initialInfo = transformPoint(info, this.transformPagePoint);\n        const { point } = initialInfo;\n        const { timestamp } = frameData;\n        this.history = [{ ...point, timestamp }];\n        const { onSessionStart } = handlers;\n        onSessionStart &&\n            onSessionStart(event, getPanInfo(initialInfo, this.history));\n        this.removeListeners = pipe(addPointerEvent(this.contextWindow, \"pointermove\", this.handlePointerMove), addPointerEvent(this.contextWindow, \"pointerup\", this.handlePointerUp), addPointerEvent(this.contextWindow, \"pointercancel\", this.handlePointerUp));\n    }\n    updateHandlers(handlers) {\n        this.handlers = handlers;\n    }\n    end() {\n        this.removeListeners && this.removeListeners();\n        cancelFrame(this.updatePoint);\n    }\n}\nfunction transformPoint(info, transformPagePoint) {\n    return transformPagePoint ? { point: transformPagePoint(info.point) } : info;\n}\nfunction subtractPoint(a, b) {\n    return { x: a.x - b.x, y: a.y - b.y };\n}\nfunction getPanInfo({ point }, history) {\n    return {\n        point,\n        delta: subtractPoint(point, lastDevicePoint(history)),\n        offset: subtractPoint(point, startDevicePoint(history)),\n        velocity: getVelocity(history, 0.1),\n    };\n}\nfunction startDevicePoint(history) {\n    return history[0];\n}\nfunction lastDevicePoint(history) {\n    return history[history.length - 1];\n}\nfunction getVelocity(history, timeDelta) {\n    if (history.length < 2) {\n        return { x: 0, y: 0 };\n    }\n    let i = history.length - 1;\n    let timestampedPoint = null;\n    const lastPoint = lastDevicePoint(history);\n    while (i >= 0) {\n        timestampedPoint = history[i];\n        if (lastPoint.timestamp - timestampedPoint.timestamp >\n            secondsToMilliseconds(timeDelta)) {\n            break;\n        }\n        i--;\n    }\n    if (!timestampedPoint) {\n        return { x: 0, y: 0 };\n    }\n    const time = millisecondsToSeconds(lastPoint.timestamp - timestampedPoint.timestamp);\n    if (time === 0) {\n        return { x: 0, y: 0 };\n    }\n    const currentVelocity = {\n        x: (lastPoint.x - timestampedPoint.x) / time,\n        y: (lastPoint.y - timestampedPoint.y) / time,\n    };\n    if (currentVelocity.x === Infinity) {\n        currentVelocity.x = 0;\n    }\n    if (currentVelocity.y === Infinity) {\n        currentVelocity.y = 0;\n    }\n    return currentVelocity;\n}\n\nexport { PanSession };\n","function isRefObject(ref) {\n    return (ref &&\n        typeof ref === \"object\" &&\n        Object.prototype.hasOwnProperty.call(ref, \"current\"));\n}\n\nexport { isRefObject };\n","import { mixNumber } from '../../utils/mix/number.mjs';\n\nconst SCALE_PRECISION = 0.0001;\nconst SCALE_MIN = 1 - SCALE_PRECISION;\nconst SCALE_MAX = 1 + SCALE_PRECISION;\nconst TRANSLATE_PRECISION = 0.01;\nconst TRANSLATE_MIN = 0 - TRANSLATE_PRECISION;\nconst TRANSLATE_MAX = 0 + TRANSLATE_PRECISION;\nfunction calcLength(axis) {\n    return axis.max - axis.min;\n}\nfunction isNear(value, target, maxDistance) {\n    return Math.abs(value - target) <= maxDistance;\n}\nfunction calcAxisDelta(delta, source, target, origin = 0.5) {\n    delta.origin = origin;\n    delta.originPoint = mixNumber(source.min, source.max, delta.origin);\n    delta.scale = calcLength(target) / calcLength(source);\n    delta.translate =\n        mixNumber(target.min, target.max, delta.origin) - delta.originPoint;\n    if ((delta.scale >= SCALE_MIN && delta.scale <= SCALE_MAX) ||\n        isNaN(delta.scale)) {\n        delta.scale = 1.0;\n    }\n    if ((delta.translate >= TRANSLATE_MIN &&\n        delta.translate <= TRANSLATE_MAX) ||\n        isNaN(delta.translate)) {\n        delta.translate = 0.0;\n    }\n}\nfunction calcBoxDelta(delta, source, target, origin) {\n    calcAxisDelta(delta.x, source.x, target.x, origin ? origin.originX : undefined);\n    calcAxisDelta(delta.y, source.y, target.y, origin ? origin.originY : undefined);\n}\nfunction calcRelativeAxis(target, relative, parent) {\n    target.min = parent.min + relative.min;\n    target.max = target.min + calcLength(relative);\n}\nfunction calcRelativeBox(target, relative, parent) {\n    calcRelativeAxis(target.x, relative.x, parent.x);\n    calcRelativeAxis(target.y, relative.y, parent.y);\n}\nfunction calcRelativeAxisPosition(target, layout, parent) {\n    target.min = layout.min - parent.min;\n    target.max = target.min + calcLength(layout);\n}\nfunction calcRelativePosition(target, layout, parent) {\n    calcRelativeAxisPosition(target.x, layout.x, parent.x);\n    calcRelativeAxisPosition(target.y, layout.y, parent.y);\n}\n\nexport { calcAxisDelta, calcBoxDelta, calcLength, calcRelativeAxis, calcRelativeAxisPosition, calcRelativeBox, calcRelativePosition, isNear };\n","import { progress } from '../../../utils/progress.mjs';\nimport { calcLength } from '../../../projection/geometry/delta-calc.mjs';\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { mixNumber } from '../../../utils/mix/number.mjs';\n\n/**\n * Apply constraints to a point. These constraints are both physical along an\n * axis, and an elastic factor that determines how much to constrain the point\n * by if it does lie outside the defined parameters.\n */\nfunction applyConstraints(point, { min, max }, elastic) {\n    if (min !== undefined && point < min) {\n        // If we have a min point defined, and this is outside of that, constrain\n        point = elastic\n            ? mixNumber(min, point, elastic.min)\n            : Math.max(point, min);\n    }\n    else if (max !== undefined && point > max) {\n        // If we have a max point defined, and this is outside of that, constrain\n        point = elastic\n            ? mixNumber(max, point, elastic.max)\n            : Math.min(point, max);\n    }\n    return point;\n}\n/**\n * Calculate constraints in terms of the viewport when defined relatively to the\n * measured axis. This is measured from the nearest edge, so a max constraint of 200\n * on an axis with a max value of 300 would return a constraint of 500 - axis length\n */\nfunction calcRelativeAxisConstraints(axis, min, max) {\n    return {\n        min: min !== undefined ? axis.min + min : undefined,\n        max: max !== undefined\n            ? axis.max + max - (axis.max - axis.min)\n            : undefined,\n    };\n}\n/**\n * Calculate constraints in terms of the viewport when\n * defined relatively to the measured bounding box.\n */\nfunction calcRelativeConstraints(layoutBox, { top, left, bottom, right }) {\n    return {\n        x: calcRelativeAxisConstraints(layoutBox.x, left, right),\n        y: calcRelativeAxisConstraints(layoutBox.y, top, bottom),\n    };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative axis\n */\nfunction calcViewportAxisConstraints(layoutAxis, constraintsAxis) {\n    let min = constraintsAxis.min - layoutAxis.min;\n    let max = constraintsAxis.max - layoutAxis.max;\n    // If the constraints axis is actually smaller than the layout axis then we can\n    // flip the constraints\n    if (constraintsAxis.max - constraintsAxis.min <\n        layoutAxis.max - layoutAxis.min) {\n        [min, max] = [max, min];\n    }\n    return { min, max };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative box\n */\nfunction calcViewportConstraints(layoutBox, constraintsBox) {\n    return {\n        x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),\n        y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y),\n    };\n}\n/**\n * Calculate a transform origin relative to the source axis, between 0-1, that results\n * in an asthetically pleasing scale/transform needed to project from source to target.\n */\nfunction calcOrigin(source, target) {\n    let origin = 0.5;\n    const sourceLength = calcLength(source);\n    const targetLength = calcLength(target);\n    if (targetLength > sourceLength) {\n        origin = progress(target.min, target.max - sourceLength, source.min);\n    }\n    else if (sourceLength > targetLength) {\n        origin = progress(source.min, source.max - targetLength, target.min);\n    }\n    return clamp(0, 1, origin);\n}\n/**\n * Rebase the calculated viewport constraints relative to the layout.min point.\n */\nfunction rebaseAxisConstraints(layout, constraints) {\n    const relativeConstraints = {};\n    if (constraints.min !== undefined) {\n        relativeConstraints.min = constraints.min - layout.min;\n    }\n    if (constraints.max !== undefined) {\n        relativeConstraints.max = constraints.max - layout.min;\n    }\n    return relativeConstraints;\n}\nconst defaultElastic = 0.35;\n/**\n * Accepts a dragElastic prop and returns resolved elastic values for each axis.\n */\nfunction resolveDragElastic(dragElastic = defaultElastic) {\n    if (dragElastic === false) {\n        dragElastic = 0;\n    }\n    else if (dragElastic === true) {\n        dragElastic = defaultElastic;\n    }\n    return {\n        x: resolveAxisElastic(dragElastic, \"left\", \"right\"),\n        y: resolveAxisElastic(dragElastic, \"top\", \"bottom\"),\n    };\n}\nfunction resolveAxisElastic(dragElastic, minLabel, maxLabel) {\n    return {\n        min: resolvePointElastic(dragElastic, minLabel),\n        max: resolvePointElastic(dragElastic, maxLabel),\n    };\n}\nfunction resolvePointElastic(dragElastic, label) {\n    return typeof dragElastic === \"number\"\n        ? dragElastic\n        : dragElastic[label] || 0;\n}\n\nexport { applyConstraints, calcOrigin, calcRelativeAxisConstraints, calcRelativeConstraints, calcViewportAxisConstraints, calcViewportConstraints, defaultElastic, rebaseAxisConstraints, resolveAxisElastic, resolveDragElastic, resolvePointElastic };\n","const createAxisDelta = () => ({\n    translate: 0,\n    scale: 1,\n    origin: 0,\n    originPoint: 0,\n});\nconst createDelta = () => ({\n    x: createAxisDelta(),\n    y: createAxisDelta(),\n});\nconst createAxis = () => ({ min: 0, max: 0 });\nconst createBox = () => ({\n    x: createAxis(),\n    y: createAxis(),\n});\n\nexport { createAxis, createAxisDelta, createBox, createDelta };\n","function eachAxis(callback) {\n    return [callback(\"x\"), callback(\"y\")];\n}\n\nexport { eachAxis };\n","/**\n * Bounding boxes tend to be defined as top, left, right, bottom. For various operations\n * it's easier to consider each axis individually. This function returns a bounding box\n * as a map of single-axis min/max values.\n */\nfunction convertBoundingBoxToBox({ top, left, right, bottom, }) {\n    return {\n        x: { min: left, max: right },\n        y: { min: top, max: bottom },\n    };\n}\nfunction convertBoxToBoundingBox({ x, y }) {\n    return { top: y.min, right: x.max, bottom: y.max, left: x.min };\n}\n/**\n * Applies a TransformPoint function to a bounding box. TransformPoint is usually a function\n * provided by Framer to allow measured points to be corrected for device scaling. This is used\n * when measuring DOM elements and DOM event points.\n */\nfunction transformBoxPoints(point, transformPoint) {\n    if (!transformPoint)\n        return point;\n    const topLeft = transformPoint({ x: point.left, y: point.top });\n    const bottomRight = transformPoint({ x: point.right, y: point.bottom });\n    return {\n        top: topLeft.y,\n        left: topLeft.x,\n        bottom: bottomRight.y,\n        right: bottomRight.x,\n    };\n}\n\nexport { convertBoundingBoxToBox, convertBoxToBoundingBox, transformBoxPoints };\n","function isIdentityScale(scale) {\n    return scale === undefined || scale === 1;\n}\nfunction hasScale({ scale, scaleX, scaleY }) {\n    return (!isIdentityScale(scale) ||\n        !isIdentityScale(scaleX) ||\n        !isIdentityScale(scaleY));\n}\nfunction hasTransform(values) {\n    return (hasScale(values) ||\n        has2DTranslate(values) ||\n        values.z ||\n        values.rotate ||\n        values.rotateX ||\n        values.rotateY ||\n        values.skewX ||\n        values.skewY);\n}\nfunction has2DTranslate(values) {\n    return is2DTranslate(values.x) || is2DTranslate(values.y);\n}\nfunction is2DTranslate(value) {\n    return value && value !== \"0%\";\n}\n\nexport { has2DTranslate, hasScale, hasTransform };\n","import { mixNumber } from '../../utils/mix/number.mjs';\nimport { hasTransform } from '../utils/has-transform.mjs';\n\n/**\n * Scales a point based on a factor and an originPoint\n */\nfunction scalePoint(point, scale, originPoint) {\n    const distanceFromOrigin = point - originPoint;\n    const scaled = scale * distanceFromOrigin;\n    return originPoint + scaled;\n}\n/**\n * Applies a translate/scale delta to a point\n */\nfunction applyPointDelta(point, translate, scale, originPoint, boxScale) {\n    if (boxScale !== undefined) {\n        point = scalePoint(point, boxScale, originPoint);\n    }\n    return scalePoint(point, scale, originPoint) + translate;\n}\n/**\n * Applies a translate/scale delta to an axis\n */\nfunction applyAxisDelta(axis, translate = 0, scale = 1, originPoint, boxScale) {\n    axis.min = applyPointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = applyPointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Applies a translate/scale delta to a box\n */\nfunction applyBoxDelta(box, { x, y }) {\n    applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);\n    applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);\n}\nconst TREE_SCALE_SNAP_MIN = 0.999999999999;\nconst TREE_SCALE_SNAP_MAX = 1.0000000000001;\n/**\n * Apply a tree of deltas to a box. We do this to calculate the effect of all the transforms\n * in a tree upon our box before then calculating how to project it into our desired viewport-relative box\n *\n * This is the final nested loop within updateLayoutDelta for future refactoring\n */\nfunction applyTreeDeltas(box, treeScale, treePath, isSharedTransition = false) {\n    const treeLength = treePath.length;\n    if (!treeLength)\n        return;\n    // Reset the treeScale\n    treeScale.x = treeScale.y = 1;\n    let node;\n    let delta;\n    for (let i = 0; i < treeLength; i++) {\n        node = treePath[i];\n        delta = node.projectionDelta;\n        /**\n         * TODO: Prefer to remove this, but currently we have motion components with\n         * display: contents in Framer.\n         */\n        const { visualElement } = node.options;\n        if (visualElement &&\n            visualElement.props.style &&\n            visualElement.props.style.display === \"contents\") {\n            continue;\n        }\n        if (isSharedTransition &&\n            node.options.layoutScroll &&\n            node.scroll &&\n            node !== node.root) {\n            transformBox(box, {\n                x: -node.scroll.offset.x,\n                y: -node.scroll.offset.y,\n            });\n        }\n        if (delta) {\n            // Incoporate each ancestor's scale into a culmulative treeScale for this component\n            treeScale.x *= delta.x.scale;\n            treeScale.y *= delta.y.scale;\n            // Apply each ancestor's calculated delta into this component's recorded layout box\n            applyBoxDelta(box, delta);\n        }\n        if (isSharedTransition && hasTransform(node.latestValues)) {\n            transformBox(box, node.latestValues);\n        }\n    }\n    /**\n     * Snap tree scale back to 1 if it's within a non-perceivable threshold.\n     * This will help reduce useless scales getting rendered.\n     */\n    if (treeScale.x < TREE_SCALE_SNAP_MAX &&\n        treeScale.x > TREE_SCALE_SNAP_MIN) {\n        treeScale.x = 1.0;\n    }\n    if (treeScale.y < TREE_SCALE_SNAP_MAX &&\n        treeScale.y > TREE_SCALE_SNAP_MIN) {\n        treeScale.y = 1.0;\n    }\n}\nfunction translateAxis(axis, distance) {\n    axis.min = axis.min + distance;\n    axis.max = axis.max + distance;\n}\n/**\n * Apply a transform to an axis from the latest resolved motion values.\n * This function basically acts as a bridge between a flat motion value map\n * and applyAxisDelta\n */\nfunction transformAxis(axis, axisTranslate, axisScale, boxScale, axisOrigin = 0.5) {\n    const originPoint = mixNumber(axis.min, axis.max, axisOrigin);\n    // Apply the axis delta to the final axis\n    applyAxisDelta(axis, axisTranslate, axisScale, originPoint, boxScale);\n}\n/**\n * Apply a transform to a box from the latest resolved motion values.\n */\nfunction transformBox(box, transform) {\n    transformAxis(box.x, transform.x, transform.scaleX, transform.scale, transform.originX);\n    transformAxis(box.y, transform.y, transform.scaleY, transform.scale, transform.originY);\n}\n\nexport { applyAxisDelta, applyBoxDelta, applyPointDelta, applyTreeDeltas, scalePoint, transformAxis, transformBox, translateAxis };\n","import { convertBoundingBoxToBox, transformBoxPoints } from '../geometry/conversion.mjs';\nimport { translateAxis } from '../geometry/delta-apply.mjs';\n\nfunction measureViewportBox(instance, transformPoint) {\n    return convertBoundingBoxToBox(transformBoxPoints(instance.getBoundingClientRect(), transformPoint));\n}\nfunction measurePageBox(element, rootProjectionNode, transformPagePoint) {\n    const viewportBox = measureViewportBox(element, transformPagePoint);\n    const { scroll } = rootProjectionNode;\n    if (scroll) {\n        translateAxis(viewportBox.x, scroll.offset.x);\n        translateAxis(viewportBox.y, scroll.offset.y);\n    }\n    return viewportBox;\n}\n\nexport { measurePageBox, measureViewportBox };\n","// Fixes https://github.com/motiondivision/motion/issues/2270\nconst getContextWindow = ({ current }) => {\n    return current ? current.ownerDocument.defaultView : null;\n};\n\nexport { getContextWindow };\n","import { invariant } from 'motion-utils';\nimport { setDragLock } from 'motion-dom';\nimport { PanSession } from '../pan/PanSession.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, rebaseAxisConstraints, calcViewportConstraints, calcOrigin, defaultElastic } from './utils/constraints.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\nimport { calcLength } from '../../projection/geometry/delta-calc.mjs';\nimport { mixNumber } from '../../utils/mix/number.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { animateMotionValue } from '../../animation/interfaces/motion-value.mjs';\nimport { getContextWindow } from '../../utils/get-context-window.mjs';\nimport { addValueToWillChange } from '../../value/use-will-change/add-will-change.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\nconst elementDragControls = new WeakMap();\n/**\n *\n */\n// let latestPointerEvent: PointerEvent\nclass VisualElementDragControls {\n    constructor(visualElement) {\n        this.openDragLock = null;\n        this.isDragging = false;\n        this.currentDirection = null;\n        this.originPoint = { x: 0, y: 0 };\n        /**\n         * The permitted boundaries of travel, in pixels.\n         */\n        this.constraints = false;\n        this.hasMutatedConstraints = false;\n        /**\n         * The per-axis resolved elastic values.\n         */\n        this.elastic = createBox();\n        this.visualElement = visualElement;\n    }\n    start(originEvent, { snapToCursor = false } = {}) {\n        /**\n         * Don't start dragging if this component is exiting\n         */\n        const { presenceContext } = this.visualElement;\n        if (presenceContext && presenceContext.isPresent === false)\n            return;\n        const onSessionStart = (event) => {\n            const { dragSnapToOrigin } = this.getProps();\n            // Stop or pause any animations on both axis values immediately. This allows the user to throw and catch\n            // the component.\n            dragSnapToOrigin ? this.pauseAnimation() : this.stopAnimation();\n            if (snapToCursor) {\n                this.snapToCursor(extractEventInfo(event).point);\n            }\n        };\n        const onStart = (event, info) => {\n            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n            const { drag, dragPropagation, onDragStart } = this.getProps();\n            if (drag && !dragPropagation) {\n                if (this.openDragLock)\n                    this.openDragLock();\n                this.openDragLock = setDragLock(drag);\n                // If we don 't have the lock, don't start dragging\n                if (!this.openDragLock)\n                    return;\n            }\n            this.isDragging = true;\n            this.currentDirection = null;\n            this.resolveConstraints();\n            if (this.visualElement.projection) {\n                this.visualElement.projection.isAnimationBlocked = true;\n                this.visualElement.projection.target = undefined;\n            }\n            /**\n             * Record gesture origin\n             */\n            eachAxis((axis) => {\n                let current = this.getAxisMotionValue(axis).get() || 0;\n                /**\n                 * If the MotionValue is a percentage value convert to px\n                 */\n                if (percent.test(current)) {\n                    const { projection } = this.visualElement;\n                    if (projection && projection.layout) {\n                        const measuredAxis = projection.layout.layoutBox[axis];\n                        if (measuredAxis) {\n                            const length = calcLength(measuredAxis);\n                            current = length * (parseFloat(current) / 100);\n                        }\n                    }\n                }\n                this.originPoint[axis] = current;\n            });\n            // Fire onDragStart event\n            if (onDragStart) {\n                frame.postRender(() => onDragStart(event, info));\n            }\n            addValueToWillChange(this.visualElement, \"transform\");\n            const { animationState } = this.visualElement;\n            animationState && animationState.setActive(\"whileDrag\", true);\n        };\n        const onMove = (event, info) => {\n            // latestPointerEvent = event\n            const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag, } = this.getProps();\n            // If we didn't successfully receive the gesture lock, early return.\n            if (!dragPropagation && !this.openDragLock)\n                return;\n            const { offset } = info;\n            // Attempt to detect drag direction if directionLock is true\n            if (dragDirectionLock && this.currentDirection === null) {\n                this.currentDirection = getCurrentDirection(offset);\n                // If we've successfully set a direction, notify listener\n                if (this.currentDirection !== null) {\n                    onDirectionLock && onDirectionLock(this.currentDirection);\n                }\n                return;\n            }\n            // Update each point with the latest position\n            this.updateAxis(\"x\", info.point, offset);\n            this.updateAxis(\"y\", info.point, offset);\n            /**\n             * Ideally we would leave the renderer to fire naturally at the end of\n             * this frame but if the element is about to change layout as the result\n             * of a re-render we want to ensure the browser can read the latest\n             * bounding box to ensure the pointer and element don't fall out of sync.\n             */\n            this.visualElement.render();\n            /**\n             * This must fire after the render call as it might trigger a state\n             * change which itself might trigger a layout update.\n             */\n            onDrag && onDrag(event, info);\n        };\n        const onSessionEnd = (event, info) => this.stop(event, info);\n        const resumeAnimation = () => eachAxis((axis) => {\n            var _a;\n            return this.getAnimationState(axis) === \"paused\" &&\n                ((_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.play());\n        });\n        const { dragSnapToOrigin } = this.getProps();\n        this.panSession = new PanSession(originEvent, {\n            onSessionStart,\n            onStart,\n            onMove,\n            onSessionEnd,\n            resumeAnimation,\n        }, {\n            transformPagePoint: this.visualElement.getTransformPagePoint(),\n            dragSnapToOrigin,\n            contextWindow: getContextWindow(this.visualElement),\n        });\n    }\n    stop(event, info) {\n        const isDragging = this.isDragging;\n        this.cancel();\n        if (!isDragging)\n            return;\n        const { velocity } = info;\n        this.startAnimation(velocity);\n        const { onDragEnd } = this.getProps();\n        if (onDragEnd) {\n            frame.postRender(() => onDragEnd(event, info));\n        }\n    }\n    cancel() {\n        this.isDragging = false;\n        const { projection, animationState } = this.visualElement;\n        if (projection) {\n            projection.isAnimationBlocked = false;\n        }\n        this.panSession && this.panSession.end();\n        this.panSession = undefined;\n        const { dragPropagation } = this.getProps();\n        if (!dragPropagation && this.openDragLock) {\n            this.openDragLock();\n            this.openDragLock = null;\n        }\n        animationState && animationState.setActive(\"whileDrag\", false);\n    }\n    updateAxis(axis, _point, offset) {\n        const { drag } = this.getProps();\n        // If we're not dragging this axis, do an early return.\n        if (!offset || !shouldDrag(axis, drag, this.currentDirection))\n            return;\n        const axisValue = this.getAxisMotionValue(axis);\n        let next = this.originPoint[axis] + offset[axis];\n        // Apply constraints\n        if (this.constraints && this.constraints[axis]) {\n            next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n        }\n        axisValue.set(next);\n    }\n    resolveConstraints() {\n        var _a;\n        const { dragConstraints, dragElastic } = this.getProps();\n        const layout = this.visualElement.projection &&\n            !this.visualElement.projection.layout\n            ? this.visualElement.projection.measure(false)\n            : (_a = this.visualElement.projection) === null || _a === void 0 ? void 0 : _a.layout;\n        const prevConstraints = this.constraints;\n        if (dragConstraints && isRefObject(dragConstraints)) {\n            if (!this.constraints) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        }\n        else {\n            if (dragConstraints && layout) {\n                this.constraints = calcRelativeConstraints(layout.layoutBox, dragConstraints);\n            }\n            else {\n                this.constraints = false;\n            }\n        }\n        this.elastic = resolveDragElastic(dragElastic);\n        /**\n         * If we're outputting to external MotionValues, we want to rebase the measured constraints\n         * from viewport-relative to component-relative.\n         */\n        if (prevConstraints !== this.constraints &&\n            layout &&\n            this.constraints &&\n            !this.hasMutatedConstraints) {\n            eachAxis((axis) => {\n                if (this.constraints !== false &&\n                    this.getAxisMotionValue(axis)) {\n                    this.constraints[axis] = rebaseAxisConstraints(layout.layoutBox[axis], this.constraints[axis]);\n                }\n            });\n        }\n    }\n    resolveRefConstraints() {\n        const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();\n        if (!constraints || !isRefObject(constraints))\n            return false;\n        const constraintsElement = constraints.current;\n        invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n        const { projection } = this.visualElement;\n        // TODO\n        if (!projection || !projection.layout)\n            return false;\n        const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n        let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);\n        /**\n         * If there's an onMeasureDragConstraints listener we call it and\n         * if different constraints are returned, set constraints to that\n         */\n        if (onMeasureDragConstraints) {\n            const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n            this.hasMutatedConstraints = !!userConstraints;\n            if (userConstraints) {\n                measuredConstraints = convertBoundingBoxToBox(userConstraints);\n            }\n        }\n        return measuredConstraints;\n    }\n    startAnimation(velocity) {\n        const { drag, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd, } = this.getProps();\n        const constraints = this.constraints || {};\n        const momentumAnimations = eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, this.currentDirection)) {\n                return;\n            }\n            let transition = (constraints && constraints[axis]) || {};\n            if (dragSnapToOrigin)\n                transition = { min: 0, max: 0 };\n            /**\n             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n             * of spring animations so we should look into adding a disable spring option to `inertia`.\n             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n             * using the value of `dragElastic`.\n             */\n            const bounceStiffness = dragElastic ? 200 : 1000000;\n            const bounceDamping = dragElastic ? 40 : 10000000;\n            const inertia = {\n                type: \"inertia\",\n                velocity: dragMomentum ? velocity[axis] : 0,\n                bounceStiffness,\n                bounceDamping,\n                timeConstant: 750,\n                restDelta: 1,\n                restSpeed: 10,\n                ...dragTransition,\n                ...transition,\n            };\n            // If we're not animating on an externally-provided `MotionValue` we can use the\n            // component's animation controls which will handle interactions with whileHover (etc),\n            // otherwise we just have to animate the `MotionValue` itself.\n            return this.startAxisValueAnimation(axis, inertia);\n        });\n        // Run all animations and then resolve the new drag constraints.\n        return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n    }\n    startAxisValueAnimation(axis, transition) {\n        const axisValue = this.getAxisMotionValue(axis);\n        addValueToWillChange(this.visualElement, axis);\n        return axisValue.start(animateMotionValue(axis, axisValue, 0, transition, this.visualElement, false));\n    }\n    stopAnimation() {\n        eachAxis((axis) => this.getAxisMotionValue(axis).stop());\n    }\n    pauseAnimation() {\n        eachAxis((axis) => { var _a; return (_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.pause(); });\n    }\n    getAnimationState(axis) {\n        var _a;\n        return (_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.state;\n    }\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */\n    getAxisMotionValue(axis) {\n        const dragKey = `_drag${axis.toUpperCase()}`;\n        const props = this.visualElement.getProps();\n        const externalMotionValue = props[dragKey];\n        return externalMotionValue\n            ? externalMotionValue\n            : this.visualElement.getValue(axis, (props.initial\n                ? props.initial[axis]\n                : undefined) || 0);\n    }\n    snapToCursor(point) {\n        eachAxis((axis) => {\n            const { drag } = this.getProps();\n            // If we're not dragging this axis, do an early return.\n            if (!shouldDrag(axis, drag, this.currentDirection))\n                return;\n            const { projection } = this.visualElement;\n            const axisValue = this.getAxisMotionValue(axis);\n            if (projection && projection.layout) {\n                const { min, max } = projection.layout.layoutBox[axis];\n                axisValue.set(point[axis] - mixNumber(min, max, 0.5));\n            }\n        });\n    }\n    /**\n     * When the viewport resizes we want to check if the measured constraints\n     * have changed and, if so, reposition the element within those new constraints\n     * relative to where it was before the resize.\n     */\n    scalePositionWithinConstraints() {\n        if (!this.visualElement.current)\n            return;\n        const { drag, dragConstraints } = this.getProps();\n        const { projection } = this.visualElement;\n        if (!isRefObject(dragConstraints) || !projection || !this.constraints)\n            return;\n        /**\n         * Stop current animations as there can be visual glitching if we try to do\n         * this mid-animation\n         */\n        this.stopAnimation();\n        /**\n         * Record the relative position of the dragged element relative to the\n         * constraints box and save as a progress value.\n         */\n        const boxProgress = { x: 0, y: 0 };\n        eachAxis((axis) => {\n            const axisValue = this.getAxisMotionValue(axis);\n            if (axisValue && this.constraints !== false) {\n                const latest = axisValue.get();\n                boxProgress[axis] = calcOrigin({ min: latest, max: latest }, this.constraints[axis]);\n            }\n        });\n        /**\n         * Update the layout of this element and resolve the latest drag constraints\n         */\n        const { transformTemplate } = this.visualElement.getProps();\n        this.visualElement.current.style.transform = transformTemplate\n            ? transformTemplate({}, \"\")\n            : \"none\";\n        projection.root && projection.root.updateScroll();\n        projection.updateLayout();\n        this.resolveConstraints();\n        /**\n         * For each axis, calculate the current progress of the layout axis\n         * within the new constraints.\n         */\n        eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, null))\n                return;\n            /**\n             * Calculate a new transform based on the previous box progress\n             */\n            const axisValue = this.getAxisMotionValue(axis);\n            const { min, max } = this.constraints[axis];\n            axisValue.set(mixNumber(min, max, boxProgress[axis]));\n        });\n    }\n    addListeners() {\n        if (!this.visualElement.current)\n            return;\n        elementDragControls.set(this.visualElement, this);\n        const element = this.visualElement.current;\n        /**\n         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n         */\n        const stopPointerListener = addPointerEvent(element, \"pointerdown\", (event) => {\n            const { drag, dragListener = true } = this.getProps();\n            drag && dragListener && this.start(event);\n        });\n        const measureDragConstraints = () => {\n            const { dragConstraints } = this.getProps();\n            if (isRefObject(dragConstraints) && dragConstraints.current) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        };\n        const { projection } = this.visualElement;\n        const stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n        if (projection && !projection.layout) {\n            projection.root && projection.root.updateScroll();\n            projection.updateLayout();\n        }\n        frame.read(measureDragConstraints);\n        /**\n         * Attach a window resize listener to scale the draggable target within its defined\n         * constraints as the window resizes.\n         */\n        const stopResizeListener = addDomEvent(window, \"resize\", () => this.scalePositionWithinConstraints());\n        /**\n         * If the element's layout changes, calculate the delta and apply that to\n         * the drag gesture's origin point.\n         */\n        const stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", (({ delta, hasLayoutChanged }) => {\n            if (this.isDragging && hasLayoutChanged) {\n                eachAxis((axis) => {\n                    const motionValue = this.getAxisMotionValue(axis);\n                    if (!motionValue)\n                        return;\n                    this.originPoint[axis] += delta[axis].translate;\n                    motionValue.set(motionValue.get() + delta[axis].translate);\n                });\n                this.visualElement.render();\n            }\n        }));\n        return () => {\n            stopResizeListener();\n            stopPointerListener();\n            stopMeasureLayoutListener();\n            stopLayoutUpdateListener && stopLayoutUpdateListener();\n        };\n    }\n    getProps() {\n        const props = this.visualElement.getProps();\n        const { drag = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = defaultElastic, dragMomentum = true, } = props;\n        return {\n            ...props,\n            drag,\n            dragDirectionLock,\n            dragPropagation,\n            dragConstraints,\n            dragElastic,\n            dragMomentum,\n        };\n    }\n}\nfunction shouldDrag(direction, drag, currentDirection) {\n    return ((drag === true || drag === direction) &&\n        (currentDirection === null || currentDirection === direction));\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\nfunction getCurrentDirection(offset, lockThreshold = 10) {\n    let direction = null;\n    if (Math.abs(offset.y) > lockThreshold) {\n        direction = \"y\";\n    }\n    else if (Math.abs(offset.x) > lockThreshold) {\n        direction = \"x\";\n    }\n    return direction;\n}\n\nexport { VisualElementDragControls, elementDragControls };\n","import { Feature } from '../../motion/features/Feature.mjs';\nimport { noop } from 'motion-utils';\nimport { VisualElementDragControls } from './VisualElementDragControls.mjs';\n\nclass DragGesture extends Feature {\n    constructor(node) {\n        super(node);\n        this.removeGroupControls = noop;\n        this.removeListeners = noop;\n        this.controls = new VisualElementDragControls(node);\n    }\n    mount() {\n        // If we've been provided a DragControls for manual control over the drag gesture,\n        // subscribe this component to it on mount.\n        const { dragControls } = this.node.getProps();\n        if (dragControls) {\n            this.removeGroupControls = dragControls.subscribe(this.controls);\n        }\n        this.removeListeners = this.controls.addListeners() || noop;\n    }\n    unmount() {\n        this.removeGroupControls();\n        this.removeListeners();\n    }\n}\n\nexport { DragGesture };\n","import { PanSession } from './PanSession.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { Feature } from '../../motion/features/Feature.mjs';\nimport { noop } from 'motion-utils';\nimport { getContextWindow } from '../../utils/get-context-window.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\nconst asyncHandler = (handler) => (event, info) => {\n    if (handler) {\n        frame.postRender(() => handler(event, info));\n    }\n};\nclass PanGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.removePointerDownListener = noop;\n    }\n    onPointerDown(pointerDownEvent) {\n        this.session = new PanSession(pointerDownEvent, this.createPanHandlers(), {\n            transformPagePoint: this.node.getTransformPagePoint(),\n            contextWindow: getContextWindow(this.node),\n        });\n    }\n    createPanHandlers() {\n        const { onPanSessionStart, onPanStart, onPan, onPanEnd } = this.node.getProps();\n        return {\n            onSessionStart: asyncHandler(onPanSessionStart),\n            onStart: asyncHandler(onPanStart),\n            onMove: onPan,\n            onEnd: (event, info) => {\n                delete this.session;\n                if (onPanEnd) {\n                    frame.postRender(() => onPanEnd(event, info));\n                }\n            },\n        };\n    }\n    mount() {\n        this.removePointerDownListener = addPointerEvent(this.node.current, \"pointerdown\", (event) => this.onPointerDown(event));\n    }\n    update() {\n        this.session && this.session.updateHandlers(this.createPanHandlers());\n    }\n    unmount() {\n        this.removePointerDownListener();\n        this.session && this.session.end();\n    }\n}\n\nexport { PanGesture };\n","import { useContext, useId, useEffect, useCallback } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\n\n/**\n * When a component is the child of `AnimatePresence`, it can use `usePresence`\n * to access information about whether it's still present in the React tree.\n *\n * ```jsx\n * import { usePresence } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const [isPresent, safeToRemove] = usePresence()\n *\n *   useEffect(() => {\n *     !isPresent && setTimeout(safeToRemove, 1000)\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * If `isPresent` is `false`, it means that a component has been removed the tree, but\n * `AnimatePresence` won't really remove it until `safeToRemove` has been called.\n *\n * @public\n */\nfunction usePresence() {\n    const context = useContext(PresenceContext);\n    if (context === null)\n        return [true, null];\n    const { isPresent, onExitComplete, register } = context;\n    // It's safe to call the following hooks conditionally (after an early return) because the context will always\n    // either be null or non-null for the lifespan of the component.\n    const id = useId();\n    useEffect(() => register(id), []);\n    const safeToRemove = useCallback(() => onExitComplete && onExitComplete(id), [id, onExitComplete]);\n    return !isPresent && onExitComplete ? [false, safeToRemove] : [true];\n}\n/**\n * Similar to `usePresence`, except `useIsPresent` simply returns whether or not the component is present.\n * There is no `safeToRemove` function.\n *\n * ```jsx\n * import { useIsPresent } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const isPresent = useIsPresent()\n *\n *   useEffect(() => {\n *     !isPresent && console.log(\"I've been removed!\")\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * @public\n */\nfunction useIsPresent() {\n    return isPresent(useContext(PresenceContext));\n}\nfunction isPresent(context) {\n    return context === null ? true : context.isPresent;\n}\n\nexport { isPresent, useIsPresent, usePresence };\n","\"use client\";\nimport { createContext } from 'react';\n\n/**\n * Internal, exported only for usage in Framer\n */\nconst SwitchLayoutGroupContext = createContext({});\n\nexport { SwitchLayoutGroupContext };\n","/**\n * This should only ever be modified on the client otherwise it'll\n * persist through server requests. If we need instanced states we\n * could lazy-init via root.\n */\nconst globalProjectionState = {\n    /**\n     * Global flag as to whether the tree has animated since the last time\n     * we resized the window\n     */\n    hasAnimatedSinceResize: true,\n    /**\n     * We set this to true once, on the first update. Any nodes added to the tree beyond that\n     * update will be given a `data-projection-id` attribute.\n     */\n    hasEverUpdated: false,\n};\n\nexport { globalProjectionState };\n","import { px } from '../../value/types/numbers/units.mjs';\n\nfunction pixelsToPercent(pixels, axis) {\n    if (axis.max === axis.min)\n        return 0;\n    return (pixels / (axis.max - axis.min)) * 100;\n}\n/**\n * We always correct borderRadius as a percentage rather than pixels to reduce paints.\n * For example, if you are projecting a box that is 100px wide with a 10px borderRadius\n * into a box that is 200px wide with a 20px borderRadius, that is actually a 10%\n * borderRadius in both states. If we animate between the two in pixels that will trigger\n * a paint each time. If we animate between the two in percentage we'll avoid a paint.\n */\nconst correctBorderRadius = {\n    correct: (latest, node) => {\n        if (!node.target)\n            return latest;\n        /**\n         * If latest is a string, if it's a percentage we can return immediately as it's\n         * going to be stretched appropriately. Otherwise, if it's a pixel, convert it to a number.\n         */\n        if (typeof latest === \"string\") {\n            if (px.test(latest)) {\n                latest = parseFloat(latest);\n            }\n            else {\n                return latest;\n            }\n        }\n        /**\n         * If latest is a number, it's a pixel value. We use the current viewportBox to calculate that\n         * pixel value as a percentage of each axis\n         */\n        const x = pixelsToPercent(latest, node.target.x);\n        const y = pixelsToPercent(latest, node.target.y);\n        return `${x}% ${y}%`;\n    },\n};\n\nexport { correctBorderRadius, pixelsToPercent };\n","import { mixNumber } from '../../utils/mix/number.mjs';\nimport { complex } from '../../value/types/complex/index.mjs';\n\nconst correctBoxShadow = {\n    correct: (latest, { treeScale, projectionDelta }) => {\n        const original = latest;\n        const shadow = complex.parse(latest);\n        // TODO: Doesn't support multiple shadows\n        if (shadow.length > 5)\n            return original;\n        const template = complex.createTransformer(latest);\n        const offset = typeof shadow[0] !== \"number\" ? 1 : 0;\n        // Calculate the overall context scale\n        const xScale = projectionDelta.x.scale * treeScale.x;\n        const yScale = projectionDelta.y.scale * treeScale.y;\n        shadow[0 + offset] /= xScale;\n        shadow[1 + offset] /= yScale;\n        /**\n         * Ideally we'd correct x and y scales individually, but because blur and\n         * spread apply to both we have to take a scale average and apply that instead.\n         * We could potentially improve the outcome of this by incorporating the ratio between\n         * the two scales.\n         */\n        const averageScale = mixNumber(xScale, yScale, 0.5);\n        // Blur\n        if (typeof shadow[2 + offset] === \"number\")\n            shadow[2 + offset] /= averageScale;\n        // Spread\n        if (typeof shadow[3 + offset] === \"number\")\n            shadow[3 + offset] /= averageScale;\n        return template(shadow);\n    },\n};\n\nexport { correctBoxShadow };\n","const scaleCorrectors = {};\nfunction addScaleCorrector(correctors) {\n    Object.assign(scaleCorrectors, correctors);\n}\n\nexport { addScaleCorrector, scaleCorrectors };\n","import { createRenderBatcher } from './batcher.mjs';\n\nconst { schedule: microtask, cancel: cancelMicrotask } = createRenderBatcher(queueMicrotask, false);\n\nexport { cancelMicrotask, microtask };\n","\"use client\";\nimport { jsx } from 'react/jsx-runtime';\nimport { useContext, Component } from 'react';\nimport { usePresence } from '../../../components/AnimatePresence/use-presence.mjs';\nimport { LayoutGroupContext } from '../../../context/LayoutGroupContext.mjs';\nimport { SwitchLayoutGroupContext } from '../../../context/SwitchLayoutGroupContext.mjs';\nimport { globalProjectionState } from '../../../projection/node/state.mjs';\nimport { correctBorderRadius } from '../../../projection/styles/scale-border-radius.mjs';\nimport { correctBoxShadow } from '../../../projection/styles/scale-box-shadow.mjs';\nimport { addScaleCorrector } from '../../../projection/styles/scale-correction.mjs';\nimport { microtask } from '../../../frameloop/microtask.mjs';\nimport { frame } from '../../../frameloop/frame.mjs';\n\nclass MeasureLayoutWithContext extends Component {\n    /**\n     * This only mounts projection nodes for components that\n     * need measuring, we might want to do it for all components\n     * in order to incorporate transforms\n     */\n    componentDidMount() {\n        const { visualElement, layoutGroup, switchLayoutGroup, layoutId } = this.props;\n        const { projection } = visualElement;\n        addScaleCorrector(defaultScaleCorrectors);\n        if (projection) {\n            if (layoutGroup.group)\n                layoutGroup.group.add(projection);\n            if (switchLayoutGroup && switchLayoutGroup.register && layoutId) {\n                switchLayoutGroup.register(projection);\n            }\n            projection.root.didUpdate();\n            projection.addEventListener(\"animationComplete\", () => {\n                this.safeToRemove();\n            });\n            projection.setOptions({\n                ...projection.options,\n                onExitComplete: () => this.safeToRemove(),\n            });\n        }\n        globalProjectionState.hasEverUpdated = true;\n    }\n    getSnapshotBeforeUpdate(prevProps) {\n        const { layoutDependency, visualElement, drag, isPresent } = this.props;\n        const projection = visualElement.projection;\n        if (!projection)\n            return null;\n        /**\n         * TODO: We use this data in relegate to determine whether to\n         * promote a previous element. There's no guarantee its presence data\n         * will have updated by this point - if a bug like this arises it will\n         * have to be that we markForRelegation and then find a new lead some other way,\n         * perhaps in didUpdate\n         */\n        projection.isPresent = isPresent;\n        if (drag ||\n            prevProps.layoutDependency !== layoutDependency ||\n            layoutDependency === undefined) {\n            projection.willUpdate();\n        }\n        else {\n            this.safeToRemove();\n        }\n        if (prevProps.isPresent !== isPresent) {\n            if (isPresent) {\n                projection.promote();\n            }\n            else if (!projection.relegate()) {\n                /**\n                 * If there's another stack member taking over from this one,\n                 * it's in charge of the exit animation and therefore should\n                 * be in charge of the safe to remove. Otherwise we call it here.\n                 */\n                frame.postRender(() => {\n                    const stack = projection.getStack();\n                    if (!stack || !stack.members.length) {\n                        this.safeToRemove();\n                    }\n                });\n            }\n        }\n        return null;\n    }\n    componentDidUpdate() {\n        const { projection } = this.props.visualElement;\n        if (projection) {\n            projection.root.didUpdate();\n            microtask.postRender(() => {\n                if (!projection.currentAnimation && projection.isLead()) {\n                    this.safeToRemove();\n                }\n            });\n        }\n    }\n    componentWillUnmount() {\n        const { visualElement, layoutGroup, switchLayoutGroup: promoteContext, } = this.props;\n        const { projection } = visualElement;\n        if (projection) {\n            projection.scheduleCheckAfterUnmount();\n            if (layoutGroup && layoutGroup.group)\n                layoutGroup.group.remove(projection);\n            if (promoteContext && promoteContext.deregister)\n                promoteContext.deregister(projection);\n        }\n    }\n    safeToRemove() {\n        const { safeToRemove } = this.props;\n        safeToRemove && safeToRemove();\n    }\n    render() {\n        return null;\n    }\n}\nfunction MeasureLayout(props) {\n    const [isPresent, safeToRemove] = usePresence();\n    const layoutGroup = useContext(LayoutGroupContext);\n    return (jsx(MeasureLayoutWithContext, { ...props, layoutGroup: layoutGroup, switchLayoutGroup: useContext(SwitchLayoutGroupContext), isPresent: isPresent, safeToRemove: safeToRemove }));\n}\nconst defaultScaleCorrectors = {\n    borderRadius: {\n        ...correctBorderRadius,\n        applyTo: [\n            \"borderTopLeftRadius\",\n            \"borderTopRightRadius\",\n            \"borderBottomLeftRadius\",\n            \"borderBottomRightRadius\",\n        ],\n    },\n    borderTopLeftRadius: correctBorderRadius,\n    borderTopRightRadius: correctBorderRadius,\n    borderBottomLeftRadius: correctBorderRadius,\n    borderBottomRightRadius: correctBorderRadius,\n    boxShadow: correctBoxShadow,\n};\n\nexport { MeasureLayout };\n","import { circOut } from '../../easing/circ.mjs';\nimport { progress } from '../../utils/progress.mjs';\nimport { mixNumber } from '../../utils/mix/number.mjs';\nimport { noop } from 'motion-utils';\nimport { percent, px } from '../../value/types/numbers/units.mjs';\n\nconst borders = [\"TopLeft\", \"TopRight\", \"BottomLeft\", \"BottomRight\"];\nconst numBorders = borders.length;\nconst asNumber = (value) => typeof value === \"string\" ? parseFloat(value) : value;\nconst isPx = (value) => typeof value === \"number\" || px.test(value);\nfunction mixValues(target, follow, lead, progress, shouldCrossfadeOpacity, isOnlyMember) {\n    if (shouldCrossfadeOpacity) {\n        target.opacity = mixNumber(0, \n        // TODO Reinstate this if only child\n        lead.opacity !== undefined ? lead.opacity : 1, easeCrossfadeIn(progress));\n        target.opacityExit = mixNumber(follow.opacity !== undefined ? follow.opacity : 1, 0, easeCrossfadeOut(progress));\n    }\n    else if (isOnlyMember) {\n        target.opacity = mixNumber(follow.opacity !== undefined ? follow.opacity : 1, lead.opacity !== undefined ? lead.opacity : 1, progress);\n    }\n    /**\n     * Mix border radius\n     */\n    for (let i = 0; i < numBorders; i++) {\n        const borderLabel = `border${borders[i]}Radius`;\n        let followRadius = getRadius(follow, borderLabel);\n        let leadRadius = getRadius(lead, borderLabel);\n        if (followRadius === undefined && leadRadius === undefined)\n            continue;\n        followRadius || (followRadius = 0);\n        leadRadius || (leadRadius = 0);\n        const canMix = followRadius === 0 ||\n            leadRadius === 0 ||\n            isPx(followRadius) === isPx(leadRadius);\n        if (canMix) {\n            target[borderLabel] = Math.max(mixNumber(asNumber(followRadius), asNumber(leadRadius), progress), 0);\n            if (percent.test(leadRadius) || percent.test(followRadius)) {\n                target[borderLabel] += \"%\";\n            }\n        }\n        else {\n            target[borderLabel] = leadRadius;\n        }\n    }\n    /**\n     * Mix rotation\n     */\n    if (follow.rotate || lead.rotate) {\n        target.rotate = mixNumber(follow.rotate || 0, lead.rotate || 0, progress);\n    }\n}\nfunction getRadius(values, radiusName) {\n    return values[radiusName] !== undefined\n        ? values[radiusName]\n        : values.borderRadius;\n}\n// /**\n//  * We only want to mix the background color if there's a follow element\n//  * that we're not crossfading opacity between. For instance with switch\n//  * AnimateSharedLayout animations, this helps the illusion of a continuous\n//  * element being animated but also cuts down on the number of paints triggered\n//  * for elements where opacity is doing that work for us.\n//  */\n// if (\n//     !hasFollowElement &&\n//     latestLeadValues.backgroundColor &&\n//     latestFollowValues.backgroundColor\n// ) {\n//     /**\n//      * This isn't ideal performance-wise as mixColor is creating a new function every frame.\n//      * We could probably create a mixer that runs at the start of the animation but\n//      * the idea behind the crossfader is that it runs dynamically between two potentially\n//      * changing targets (ie opacity or borderRadius may be animating independently via variants)\n//      */\n//     leadState.backgroundColor = followState.backgroundColor = mixColor(\n//         latestFollowValues.backgroundColor as string,\n//         latestLeadValues.backgroundColor as string\n//     )(p)\n// }\nconst easeCrossfadeIn = /*@__PURE__*/ compress(0, 0.5, circOut);\nconst easeCrossfadeOut = /*@__PURE__*/ compress(0.5, 0.95, noop);\nfunction compress(min, max, easing) {\n    return (p) => {\n        // Could replace ifs with clamp\n        if (p < min)\n            return 0;\n        if (p > max)\n            return 1;\n        return easing(progress(min, max, p));\n    };\n}\n\nexport { mixValues };\n","/**\n * Reset an axis to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyAxisInto(axis, originAxis) {\n    axis.min = originAxis.min;\n    axis.max = originAxis.max;\n}\n/**\n * Reset a box to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyBoxInto(box, originBox) {\n    copyAxisInto(box.x, originBox.x);\n    copyAxisInto(box.y, originBox.y);\n}\n/**\n * Reset a delta to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyAxisDeltaInto(delta, originDelta) {\n    delta.translate = originDelta.translate;\n    delta.scale = originDelta.scale;\n    delta.originPoint = originDelta.originPoint;\n    delta.origin = originDelta.origin;\n}\n\nexport { copyAxisDeltaInto, copyAxisInto, copyBoxInto };\n","import { mixNumber } from '../../utils/mix/number.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { scalePoint } from './delta-apply.mjs';\n\n/**\n * Remove a delta from a point. This is essentially the steps of applyPointDelta in reverse\n */\nfunction removePointDelta(point, translate, scale, originPoint, boxScale) {\n    point -= translate;\n    point = scalePoint(point, 1 / scale, originPoint);\n    if (boxScale !== undefined) {\n        point = scalePoint(point, 1 / boxScale, originPoint);\n    }\n    return point;\n}\n/**\n * Remove a delta from an axis. This is essentially the steps of applyAxisDelta in reverse\n */\nfunction removeAxisDelta(axis, translate = 0, scale = 1, origin = 0.5, boxScale, originAxis = axis, sourceAxis = axis) {\n    if (percent.test(translate)) {\n        translate = parseFloat(translate);\n        const relativeProgress = mixNumber(sourceAxis.min, sourceAxis.max, translate / 100);\n        translate = relativeProgress - sourceAxis.min;\n    }\n    if (typeof translate !== \"number\")\n        return;\n    let originPoint = mixNumber(originAxis.min, originAxis.max, origin);\n    if (axis === originAxis)\n        originPoint -= translate;\n    axis.min = removePointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = removePointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Remove a transforms from an axis. This is essentially the steps of applyAxisTransforms in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeAxisTransforms(axis, transforms, [key, scaleKey, originKey], origin, sourceAxis) {\n    removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale, origin, sourceAxis);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */\nconst xKeys = [\"x\", \"scaleX\", \"originX\"];\nconst yKeys = [\"y\", \"scaleY\", \"originY\"];\n/**\n * Remove a transforms from an box. This is essentially the steps of applyAxisBox in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeBoxTransforms(box, transforms, originBox, sourceBox) {\n    removeAxisTransforms(box.x, transforms, xKeys, originBox ? originBox.x : undefined, sourceBox ? sourceBox.x : undefined);\n    removeAxisTransforms(box.y, transforms, yKeys, originBox ? originBox.y : undefined, sourceBox ? sourceBox.y : undefined);\n}\n\nexport { removeAxisDelta, removeAxisTransforms, removeBoxTransforms, removePointDelta };\n","import { calcLength } from './delta-calc.mjs';\n\nfunction isAxisDeltaZero(delta) {\n    return delta.translate === 0 && delta.scale === 1;\n}\nfunction isDeltaZero(delta) {\n    return isAxisDeltaZero(delta.x) && isAxisDeltaZero(delta.y);\n}\nfunction axisEquals(a, b) {\n    return a.min === b.min && a.max === b.max;\n}\nfunction boxEquals(a, b) {\n    return axisEquals(a.x, b.x) && axisEquals(a.y, b.y);\n}\nfunction axisEqualsRounded(a, b) {\n    return (Math.round(a.min) === Math.round(b.min) &&\n        Math.round(a.max) === Math.round(b.max));\n}\nfunction boxEqualsRounded(a, b) {\n    return axisEqualsRounded(a.x, b.x) && axisEqualsRounded(a.y, b.y);\n}\nfunction aspectRatio(box) {\n    return calcLength(box.x) / calcLength(box.y);\n}\nfunction axisDeltaEquals(a, b) {\n    return (a.translate === b.translate &&\n        a.scale === b.scale &&\n        a.originPoint === b.originPoint);\n}\n\nexport { aspectRatio, axisDeltaEquals, axisEquals, axisEqualsRounded, boxEquals, boxEqualsRounded, isDeltaZero };\n","import { addUniqueItem, removeItem } from '../../utils/array.mjs';\n\nclass NodeStack {\n    constructor() {\n        this.members = [];\n    }\n    add(node) {\n        addUniqueItem(this.members, node);\n        node.scheduleRender();\n    }\n    remove(node) {\n        removeItem(this.members, node);\n        if (node === this.prevLead) {\n            this.prevLead = undefined;\n        }\n        if (node === this.lead) {\n            const prevLead = this.members[this.members.length - 1];\n            if (prevLead) {\n                this.promote(prevLead);\n            }\n        }\n    }\n    relegate(node) {\n        const indexOfNode = this.members.findIndex((member) => node === member);\n        if (indexOfNode === 0)\n            return false;\n        /**\n         * Find the next projection node that is present\n         */\n        let prevLead;\n        for (let i = indexOfNode; i >= 0; i--) {\n            const member = this.members[i];\n            if (member.isPresent !== false) {\n                prevLead = member;\n                break;\n            }\n        }\n        if (prevLead) {\n            this.promote(prevLead);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    promote(node, preserveFollowOpacity) {\n        const prevLead = this.lead;\n        if (node === prevLead)\n            return;\n        this.prevLead = prevLead;\n        this.lead = node;\n        node.show();\n        if (prevLead) {\n            prevLead.instance && prevLead.scheduleRender();\n            node.scheduleRender();\n            node.resumeFrom = prevLead;\n            if (preserveFollowOpacity) {\n                node.resumeFrom.preserveOpacity = true;\n            }\n            if (prevLead.snapshot) {\n                node.snapshot = prevLead.snapshot;\n                node.snapshot.latestValues =\n                    prevLead.animationValues || prevLead.latestValues;\n            }\n            if (node.root && node.root.isUpdating) {\n                node.isLayoutDirty = true;\n            }\n            const { crossfade } = node.options;\n            if (crossfade === false) {\n                prevLead.hide();\n            }\n            /**\n             * TODO:\n             *   - Test border radius when previous node was deleted\n             *   - boxShadow mixing\n             *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)\n             *   - Shared between element A in transformed container and element B (transform stays the same or changes)\n             *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)\n             * ---\n             *   - Crossfade opacity of root nodes\n             *   - layoutId changes after animation\n             *   - layoutId changes mid animation\n             */\n        }\n    }\n    exitAnimationComplete() {\n        this.members.forEach((node) => {\n            const { options, resumingFrom } = node;\n            options.onExitComplete && options.onExitComplete();\n            if (resumingFrom) {\n                resumingFrom.options.onExitComplete &&\n                    resumingFrom.options.onExitComplete();\n            }\n        });\n    }\n    scheduleRender() {\n        this.members.forEach((node) => {\n            node.instance && node.scheduleRender(false);\n        });\n    }\n    /**\n     * Clear any leads that have been removed this render to prevent them from being\n     * used in future animations and to prevent memory leaks\n     */\n    removeLeadSnapshot() {\n        if (this.lead && this.lead.snapshot) {\n            this.lead.snapshot = undefined;\n        }\n    }\n}\n\nexport { NodeStack };\n","function buildProjectionTransform(delta, treeScale, latestTransform) {\n    let transform = \"\";\n    /**\n     * The translations we use to calculate are always relative to the viewport coordinate space.\n     * But when we apply scales, we also scale the coordinate space of an element and its children.\n     * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\n     * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\n     */\n    const xTranslate = delta.x.translate / treeScale.x;\n    const yTranslate = delta.y.translate / treeScale.y;\n    const zTranslate = (latestTransform === null || latestTransform === void 0 ? void 0 : latestTransform.z) || 0;\n    if (xTranslate || yTranslate || zTranslate) {\n        transform = `translate3d(${xTranslate}px, ${yTranslate}px, ${zTranslate}px) `;\n    }\n    /**\n     * Apply scale correction for the tree transform.\n     * This will apply scale to the screen-orientated axes.\n     */\n    if (treeScale.x !== 1 || treeScale.y !== 1) {\n        transform += `scale(${1 / treeScale.x}, ${1 / treeScale.y}) `;\n    }\n    if (latestTransform) {\n        const { transformPerspective, rotate, rotateX, rotateY, skewX, skewY } = latestTransform;\n        if (transformPerspective)\n            transform = `perspective(${transformPerspective}px) ${transform}`;\n        if (rotate)\n            transform += `rotate(${rotate}deg) `;\n        if (rotateX)\n            transform += `rotateX(${rotateX}deg) `;\n        if (rotateY)\n            transform += `rotateY(${rotateY}deg) `;\n        if (skewX)\n            transform += `skewX(${skewX}deg) `;\n        if (skewY)\n            transform += `skewY(${skewY}deg) `;\n    }\n    /**\n     * Apply scale to match the size of the element to the size we want it.\n     * This will apply scale to the element-orientated axes.\n     */\n    const elementScaleX = delta.x.scale * treeScale.x;\n    const elementScaleY = delta.y.scale * treeScale.y;\n    if (elementScaleX !== 1 || elementScaleY !== 1) {\n        transform += `scale(${elementScaleX}, ${elementScaleY})`;\n    }\n    return transform || \"none\";\n}\n\nexport { buildProjectionTransform };\n","const compareByDepth = (a, b) => a.depth - b.depth;\n\nexport { compareByDepth };\n","import { addUniqueItem, removeItem } from '../../utils/array.mjs';\nimport { compareByDepth } from './compare-by-depth.mjs';\n\nclass FlatTree {\n    constructor() {\n        this.children = [];\n        this.isDirty = false;\n    }\n    add(child) {\n        addUniqueItem(this.children, child);\n        this.isDirty = true;\n    }\n    remove(child) {\n        removeItem(this.children, child);\n        this.isDirty = true;\n    }\n    forEach(callback) {\n        this.isDirty && this.children.sort(compareByDepth);\n        this.isDirty = false;\n        this.children.forEach(callback);\n    }\n}\n\nexport { FlatTree };\n","import { isCustomValue } from '../../utils/resolve-value.mjs';\nimport { isMotionValue } from './is-motion-value.mjs';\n\n/**\n * If the provided value is a MotionValue, this returns the actual value, otherwise just the value itself\n *\n * TODO: Remove and move to library\n */\nfunction resolveMotionValue(value) {\n    const unwrappedValue = isMotionValue(value) ? value.get() : value;\n    return isCustomValue(unwrappedValue)\n        ? unwrappedValue.toValue()\n        : unwrappedValue;\n}\n\nexport { resolveMotionValue };\n","import { time } from '../frameloop/sync-time.mjs';\nimport { secondsToMilliseconds } from './time-conversion.mjs';\nimport { frame, cancelFrame } from '../frameloop/frame.mjs';\n\n/**\n * Timeout defined in ms\n */\nfunction delay(callback, timeout) {\n    const start = time.now();\n    const checkElapsed = ({ timestamp }) => {\n        const elapsed = timestamp - start;\n        if (elapsed >= timeout) {\n            cancelFrame(checkElapsed);\n            callback(elapsed - timeout);\n        }\n    };\n    frame.read(checkElapsed, true);\n    return () => cancelFrame(checkElapsed);\n}\nfunction delayInSeconds(callback, timeout) {\n    return delay(callback, secondsToMilliseconds(timeout));\n}\n\nexport { delay, delayInSeconds };\n","function isSVGElement(element) {\n    return element instanceof SVGElement && element.tagName !== \"svg\";\n}\n\nexport { isSVGElement };\n","import { animateMotionValue } from '../interfaces/motion-value.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction animateSingleValue(value, keyframes, options) {\n    const motionValue$1 = isMotionValue(value) ? value : motionValue(value);\n    motionValue$1.start(animateMotionValue(\"\", motionValue$1, keyframes, options));\n    return motionValue$1.animation;\n}\n\nexport { animateSingleValue };\n","import { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto, copyAxisDeltaInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength, isNear } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { getValueTransition } from '../../animation/utils/get-value-transition.mjs';\nimport { boxEqualsRounded, isDeltaZero, axisDeltaEquals, aspectRatio, boxEquals } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { globalProjectionState } from './state.mjs';\nimport { delay } from '../../utils/delay.mjs';\nimport { mixNumber } from '../../utils/mix/number.mjs';\nimport { isSVGElement } from '../../render/dom/utils/is-svg-element.mjs';\nimport { animateSingleValue } from '../../animation/animate/single-value.mjs';\nimport { clamp } from '../../utils/clamp.mjs';\nimport { cancelFrame, frameData, frameSteps, frame } from '../../frameloop/frame.mjs';\nimport { noop } from 'motion-utils';\nimport { time } from '../../frameloop/sync-time.mjs';\nimport { microtask } from '../../frameloop/microtask.mjs';\nimport { getOptimisedAppearId } from '../../animation/optimized-appear/get-appear-id.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\n\nconst metrics = {\n    type: \"projectionFrame\",\n    totalNodes: 0,\n    resolvedTargetDeltas: 0,\n    recalculatedProjection: 0,\n};\nconst isDebug = typeof window !== \"undefined\" && window.MotionDebug !== undefined;\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\nconst hiddenVisibility = { visibility: \"hidden\" };\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nconst animationTarget = 1000;\nlet id = 0;\nfunction resetDistortingTransform(key, visualElement, values, sharedAnimationValues) {\n    const { latestValues } = visualElement;\n    // Record the distorting transform and then temporarily set it to 0\n    if (latestValues[key]) {\n        values[key] = latestValues[key];\n        visualElement.setStaticValue(key, 0);\n        if (sharedAnimationValues) {\n            sharedAnimationValues[key] = 0;\n        }\n    }\n}\nfunction cancelTreeOptimisedTransformAnimations(projectionNode) {\n    projectionNode.hasCheckedOptimisedAppear = true;\n    if (projectionNode.root === projectionNode)\n        return;\n    const { visualElement } = projectionNode.options;\n    if (!visualElement)\n        return;\n    const appearId = getOptimisedAppearId(visualElement);\n    if (window.MotionHasOptimisedAnimation(appearId, \"transform\")) {\n        const { layout, layoutId } = projectionNode.options;\n        window.MotionCancelOptimisedAnimation(appearId, \"transform\", frame, !(layout || layoutId));\n    }\n    const { parent } = projectionNode;\n    if (parent && !parent.hasCheckedOptimisedAppear) {\n        cancelTreeOptimisedTransformAnimations(parent);\n    }\n}\nfunction createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform, }) {\n    return class ProjectionNode {\n        constructor(latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()) {\n            /**\n             * A unique ID generated for every projection node.\n             */\n            this.id = id++;\n            /**\n             * An id that represents a unique session instigated by startUpdate.\n             */\n            this.animationId = 0;\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */\n            this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */\n            this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */\n            this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */\n            this.isLayoutDirty = false;\n            /**\n             * Flag to true if we think the projection calculations for this node needs\n             * recalculating as a result of an updated transform or layout animation.\n             */\n            this.isProjectionDirty = false;\n            /**\n             * Flag to true if the layout *or* transform has changed. This then gets propagated\n             * throughout the projection tree, forcing any element below to recalculate on the next frame.\n             */\n            this.isSharedProjectionDirty = false;\n            /**\n             * Flag transform dirty. This gets propagated throughout the whole tree but is only\n             * respected by shared nodes.\n             */\n            this.isTransformDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */\n            this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */\n            this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */\n            this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */\n            this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */\n            this.shouldResetTransform = false;\n            /**\n             * Store whether this node has been checked for optimised appear animations. As\n             * effects fire bottom-up, and we want to look up the tree for appear animations,\n             * this makes sure we only check each path once, stopping at nodes that\n             * have already been checked.\n             */\n            this.hasCheckedOptimisedAppear = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to layoutly\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */\n            this.treeScale = { x: 1, y: 1 };\n            /**\n             *\n             */\n            this.eventHandlers = new Map();\n            this.hasTreeAnimated = false;\n            // Note: Currently only running on root node\n            this.updateScheduled = false;\n            this.scheduleUpdate = () => this.update();\n            this.projectionUpdateScheduled = false;\n            this.checkUpdateFailed = () => {\n                if (this.isUpdating) {\n                    this.isUpdating = false;\n                    this.clearAllSnapshots();\n                }\n            };\n            /**\n             * This is a multi-step process as shared nodes might be of different depths. Nodes\n             * are sorted by depth order, so we need to resolve the entire tree before moving to\n             * the next step.\n             */\n            this.updateProjection = () => {\n                this.projectionUpdateScheduled = false;\n                /**\n                 * Reset debug counts. Manually resetting rather than creating a new\n                 * object each frame.\n                 */\n                if (isDebug) {\n                    metrics.totalNodes =\n                        metrics.resolvedTargetDeltas =\n                            metrics.recalculatedProjection =\n                                0;\n                }\n                this.nodes.forEach(propagateDirtyNodes);\n                this.nodes.forEach(resolveTargetDelta);\n                this.nodes.forEach(calcProjection);\n                this.nodes.forEach(cleanDirtyNodes);\n                if (isDebug) {\n                    window.MotionDebug.record(metrics);\n                }\n            };\n            /**\n             * Frame calculations\n             */\n            this.resolvedRelativeTargetAt = 0.0;\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */\n            // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? [...parent.path, parent] : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            for (let i = 0; i < this.path.length; i++) {\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this)\n                this.nodes = new FlatTree();\n        }\n        addEventListener(name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        }\n        notifyListeners(name, ...args) {\n            const subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager && subscriptionManager.notify(...args);\n        }\n        hasListeners(name) {\n            return this.eventHandlers.has(name);\n        }\n        /**\n         * Lifecycles\n         */\n        mount(instance, isLayoutDirty = this.root.hasTreeAnimated) {\n            if (this.instance)\n                return;\n            this.isSVG = isSVGElement(instance);\n            this.instance = instance;\n            const { layoutId, layout, visualElement } = this.options;\n            if (visualElement && !visualElement.current) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            this.parent && this.parent.children.add(this);\n            if (isLayoutDirty && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                let cancelDelay;\n                const resizeUnblockUpdate = () => (this.root.updateBlockedByResize = false);\n                attachResizeListener(instance, () => {\n                    this.root.updateBlockedByResize = true;\n                    cancelDelay && cancelDelay();\n                    cancelDelay = delay(resizeUnblockUpdate, 250);\n                    if (globalProjectionState.hasAnimatedSinceResize) {\n                        globalProjectionState.hasAnimatedSinceResize = false;\n                        this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false &&\n                visualElement &&\n                (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", ({ delta, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout, }) => {\n                    if (this.isTreeAnimationBlocked()) {\n                        this.target = undefined;\n                        this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    const layoutTransition = this.options.transition ||\n                        visualElement.getDefaultTransition() ||\n                        defaultLayoutTransition;\n                    const { onLayoutAnimationStart, onLayoutAnimationComplete, } = visualElement.getProps();\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */\n                    const targetChanged = !this.targetLayout ||\n                        !boxEqualsRounded(this.targetLayout, newLayout) ||\n                        hasRelativeTargetChanged;\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */\n                    const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n                    if (this.options.layoutRoot ||\n                        (this.resumeFrom && this.resumeFrom.instance) ||\n                        hasOnlyRelativeTargetChanged ||\n                        (hasLayoutChanged &&\n                            (targetChanged || !this.currentAnimation))) {\n                        if (this.resumeFrom) {\n                            this.resumingFrom = this.resumeFrom;\n                            this.resumingFrom.resumingFrom = undefined;\n                        }\n                        this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                        const animationOptions = {\n                            ...getValueTransition(layoutTransition, \"layout\"),\n                            onPlay: onLayoutAnimationStart,\n                            onComplete: onLayoutAnimationComplete,\n                        };\n                        if (visualElement.shouldReduceMotion ||\n                            this.options.layoutRoot) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        this.startAnimation(animationOptions);\n                    }\n                    else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */\n                        if (!hasLayoutChanged) {\n                            finishAnimation(this);\n                        }\n                        if (this.isLead() && this.options.onExitComplete) {\n                            this.options.onExitComplete();\n                        }\n                    }\n                    this.targetLayout = newLayout;\n                });\n            }\n        }\n        unmount() {\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            const stack = this.getStack();\n            stack && stack.remove(this);\n            this.parent && this.parent.children.delete(this);\n            this.instance = undefined;\n            cancelFrame(this.updateProjection);\n        }\n        // only on the root\n        blockUpdate() {\n            this.updateManuallyBlocked = true;\n        }\n        unblockUpdate() {\n            this.updateManuallyBlocked = false;\n        }\n        isUpdateBlocked() {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        }\n        isTreeAnimationBlocked() {\n            return (this.isAnimationBlocked ||\n                (this.parent && this.parent.isTreeAnimationBlocked()) ||\n                false);\n        }\n        // Note: currently only running on root node\n        startUpdate() {\n            if (this.isUpdateBlocked())\n                return;\n            this.isUpdating = true;\n            this.nodes && this.nodes.forEach(resetSkewAndRotation);\n            this.animationId++;\n        }\n        getTransformTemplate() {\n            const { visualElement } = this.options;\n            return visualElement && visualElement.getProps().transformTemplate;\n        }\n        willUpdate(shouldNotifyListeners = true) {\n            this.root.hasTreeAnimated = true;\n            if (this.root.isUpdateBlocked()) {\n                this.options.onExitComplete && this.options.onExitComplete();\n                return;\n            }\n            /**\n             * If we're running optimised appear animations then these must be\n             * cancelled before measuring the DOM. This is so we can measure\n             * the true layout of the element rather than the WAAPI animation\n             * which will be unaffected by the resetSkewAndRotate step.\n             *\n             * Note: This is a DOM write. Worst case scenario is this is sandwiched\n             * between other snapshot reads which will cause unnecessary style recalculations.\n             * This has to happen here though, as we don't yet know which nodes will need\n             * snapshots in startUpdate(), but we only want to cancel optimised animations\n             * if a layout animation measurement is actually going to be affected by them.\n             */\n            if (window.MotionCancelOptimisedAnimation &&\n                !this.hasCheckedOptimisedAppear) {\n                cancelTreeOptimisedTransformAnimations(this);\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty)\n                return;\n            this.isLayoutDirty = true;\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                node.shouldResetTransform = true;\n                node.updateScroll(\"snapshot\");\n                if (node.options.layoutRoot) {\n                    node.willUpdate(false);\n                }\n            }\n            const { layoutId, layout } = this.options;\n            if (layoutId === undefined && !layout)\n                return;\n            const transformTemplate = this.getTransformTemplate();\n            this.prevTransformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        }\n        update() {\n            this.updateScheduled = false;\n            const updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            if (!this.isUpdating) {\n                this.nodes.forEach(clearIsLayoutDirty);\n            }\n            this.isUpdating = false;\n            /**\n             * Write\n             */\n            this.nodes.forEach(resetTransformStyle);\n            /**\n             * Read ==================\n             */\n            // Update layout measurements of updated children\n            this.nodes.forEach(updateLayout);\n            /**\n             * Write\n             */\n            // Notify listeners that the layout is updated\n            this.nodes.forEach(notifyLayoutUpdate);\n            this.clearAllSnapshots();\n            /**\n             * Manually flush any pending updates. Ideally\n             * we could leave this to the following requestAnimationFrame but this seems\n             * to leave a flash of incorrectly styled content.\n             */\n            const now = time.now();\n            frameData.delta = clamp(0, 1000 / 60, now - frameData.timestamp);\n            frameData.timestamp = now;\n            frameData.isProcessing = true;\n            frameSteps.update.process(frameData);\n            frameSteps.preRender.process(frameData);\n            frameSteps.render.process(frameData);\n            frameData.isProcessing = false;\n        }\n        didUpdate() {\n            if (!this.updateScheduled) {\n                this.updateScheduled = true;\n                microtask.read(this.scheduleUpdate);\n            }\n        }\n        clearAllSnapshots() {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        }\n        scheduleUpdateProjection() {\n            if (!this.projectionUpdateScheduled) {\n                this.projectionUpdateScheduled = true;\n                frame.preRender(this.updateProjection, false, true);\n            }\n        }\n        scheduleCheckAfterUnmount() {\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */\n            frame.postRender(() => {\n                if (this.isLayoutDirty) {\n                    this.root.didUpdate();\n                }\n                else {\n                    this.root.checkUpdateFailed();\n                }\n            });\n        }\n        /**\n         * Update measurements\n         */\n        updateSnapshot() {\n            if (this.snapshot || !this.instance)\n                return;\n            this.snapshot = this.measure();\n        }\n        updateLayout() {\n            if (!this.instance)\n                return;\n            // TODO: Incorporate into a forwarded scroll offset\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&\n                !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */\n            if (this.resumeFrom && !this.resumeFrom.instance) {\n                for (let i = 0; i < this.path.length; i++) {\n                    const node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            const prevLayout = this.layout;\n            this.layout = this.measure(false);\n            this.layoutCorrected = createBox();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.layoutBox);\n            const { visualElement } = this.options;\n            visualElement &&\n                visualElement.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);\n        }\n        updateScroll(phase = \"measure\") {\n            let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n            if (this.scroll &&\n                this.scroll.animationId === this.root.animationId &&\n                this.scroll.phase === phase) {\n                needsMeasurement = false;\n            }\n            if (needsMeasurement) {\n                const isRoot = checkIsScrollRoot(this.instance);\n                this.scroll = {\n                    animationId: this.root.animationId,\n                    phase,\n                    isRoot,\n                    offset: measureScroll(this.instance),\n                    wasRoot: this.scroll ? this.scroll.isRoot : isRoot,\n                };\n            }\n        }\n        resetTransform() {\n            if (!resetTransform)\n                return;\n            const isResetRequested = this.isLayoutDirty ||\n                this.shouldResetTransform ||\n                this.options.alwaysMeasureLayout;\n            const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n            const transformTemplate = this.getTransformTemplate();\n            const transformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested &&\n                (hasProjection ||\n                    hasTransform(this.latestValues) ||\n                    transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        }\n        measure(removeTransform = true) {\n            const pageBox = this.measurePageBox();\n            let layoutBox = this.removeElementScroll(pageBox);\n            /**\n             * Measurements taken during the pre-render stage\n             * still have transforms applied so we remove them\n             * via calculation.\n             */\n            if (removeTransform) {\n                layoutBox = this.removeTransform(layoutBox);\n            }\n            roundBox(layoutBox);\n            return {\n                animationId: this.root.animationId,\n                measuredBox: pageBox,\n                layoutBox,\n                latestValues: {},\n                source: this.id,\n            };\n        }\n        measurePageBox() {\n            var _a;\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return createBox();\n            const box = visualElement.measureViewportBox();\n            const wasInScrollRoot = ((_a = this.scroll) === null || _a === void 0 ? void 0 : _a.wasRoot) || this.path.some(checkNodeWasScrollRoot);\n            if (!wasInScrollRoot) {\n                // Remove viewport scroll to give page-relative coordinates\n                const { scroll } = this.root;\n                if (scroll) {\n                    translateAxis(box.x, scroll.offset.x);\n                    translateAxis(box.y, scroll.offset.y);\n                }\n            }\n            return box;\n        }\n        removeElementScroll(box) {\n            var _a;\n            const boxWithoutScroll = createBox();\n            copyBoxInto(boxWithoutScroll, box);\n            if ((_a = this.scroll) === null || _a === void 0 ? void 0 : _a.wasRoot) {\n                return boxWithoutScroll;\n            }\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                const { scroll, options } = node;\n                if (node !== this.root && scroll && options.layoutScroll) {\n                    /**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */\n                    if (scroll.wasRoot) {\n                        copyBoxInto(boxWithoutScroll, box);\n                    }\n                    translateAxis(boxWithoutScroll.x, scroll.offset.x);\n                    translateAxis(boxWithoutScroll.y, scroll.offset.y);\n                }\n            }\n            return boxWithoutScroll;\n        }\n        applyTransform(box, transformOnly = false) {\n            const withTransforms = createBox();\n            copyBoxInto(withTransforms, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!transformOnly &&\n                    node.options.layoutScroll &&\n                    node.scroll &&\n                    node !== node.root) {\n                    transformBox(withTransforms, {\n                        x: -node.scroll.offset.x,\n                        y: -node.scroll.offset.y,\n                    });\n                }\n                if (!hasTransform(node.latestValues))\n                    continue;\n                transformBox(withTransforms, node.latestValues);\n            }\n            if (hasTransform(this.latestValues)) {\n                transformBox(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        }\n        removeTransform(box) {\n            const boxWithoutTransform = createBox();\n            copyBoxInto(boxWithoutTransform, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!node.instance)\n                    continue;\n                if (!hasTransform(node.latestValues))\n                    continue;\n                hasScale(node.latestValues) && node.updateSnapshot();\n                const sourceBox = createBox();\n                const nodeBox = node.measurePageBox();\n                copyBoxInto(sourceBox, nodeBox);\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);\n            }\n            if (hasTransform(this.latestValues)) {\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        }\n        setTargetDelta(delta) {\n            this.targetDelta = delta;\n            this.root.scheduleUpdateProjection();\n            this.isProjectionDirty = true;\n        }\n        setOptions(options) {\n            this.options = {\n                ...this.options,\n                ...options,\n                crossfade: options.crossfade !== undefined ? options.crossfade : true,\n            };\n        }\n        clearMeasurements() {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        }\n        forceRelativeParentToResolveTarget() {\n            if (!this.relativeParent)\n                return;\n            /**\n             * If the parent target isn't up-to-date, force it to update.\n             * This is an unfortunate de-optimisation as it means any updating relative\n             * projection will cause all the relative parents to recalculate back\n             * up the tree.\n             */\n            if (this.relativeParent.resolvedRelativeTargetAt !==\n                frameData.timestamp) {\n                this.relativeParent.resolveTargetDelta(true);\n            }\n        }\n        resolveTargetDelta(forceRecalculation = false) {\n            var _a;\n            /**\n             * Once the dirty status of nodes has been spread through the tree, we also\n             * need to check if we have a shared node of a different depth that has itself\n             * been dirtied.\n             */\n            const lead = this.getLead();\n            this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n            this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n            this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            /**\n             * We don't use transform for this step of processing so we don't\n             * need to check whether any nodes have changed transform.\n             */\n            const canSkip = !(forceRecalculation ||\n                (isShared && this.isSharedProjectionDirty) ||\n                this.isProjectionDirty ||\n                ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty) ||\n                this.attemptToResolveRelativeTarget ||\n                this.root.updateBlockedByResize);\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */\n            if (!this.layout || !(layout || layoutId))\n                return;\n            this.resolvedRelativeTargetAt = frameData.timestamp;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */\n            if (!this.targetDelta && !this.relativeTarget) {\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    relativeParent.layout &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */\n            if (!this.relativeTarget && !this.targetDelta)\n                return;\n            /**\n             * Lazy-init target data structure\n             */\n            if (!this.target) {\n                this.target = createBox();\n                this.targetWithTransforms = createBox();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */\n            if (this.relativeTarget &&\n                this.relativeTargetOrigin &&\n                this.relativeParent &&\n                this.relativeParent.target) {\n                this.forceRelativeParentToResolveTarget();\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n                /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */\n            }\n            else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.layoutBox);\n                }\n                else {\n                    copyBoxInto(this.target, this.layout.layoutBox);\n                }\n                applyBoxDelta(this.target, this.targetDelta);\n            }\n            else {\n                /**\n                 * If no target, use own layout as target\n                 */\n                copyBoxInto(this.target, this.layout.layoutBox);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */\n            if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    Boolean(relativeParent.resumingFrom) ===\n                        Boolean(this.resumingFrom) &&\n                    !relativeParent.options.layoutScroll &&\n                    relativeParent.target &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * Increase debug counter for resolved target deltas\n             */\n            if (isDebug) {\n                metrics.resolvedTargetDeltas++;\n            }\n        }\n        getClosestProjectingParent() {\n            if (!this.parent ||\n                hasScale(this.parent.latestValues) ||\n                has2DTranslate(this.parent.latestValues)) {\n                return undefined;\n            }\n            if (this.parent.isProjecting()) {\n                return this.parent;\n            }\n            else {\n                return this.parent.getClosestProjectingParent();\n            }\n        }\n        isProjecting() {\n            return Boolean((this.relativeTarget ||\n                this.targetDelta ||\n                this.options.layoutRoot) &&\n                this.layout);\n        }\n        calcProjection() {\n            var _a;\n            const lead = this.getLead();\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            let canSkip = true;\n            /**\n             * If this is a normal layout animation and neither this node nor its nearest projecting\n             * is dirty then we can't skip.\n             */\n            if (this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If this is a shared layout animation and this node's shared projection is dirty then\n             * we can't skip.\n             */\n            if (isShared &&\n                (this.isSharedProjectionDirty || this.isTransformDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If we have resolved the target this frame we must recalculate the\n             * projection to ensure it visually represents the internal calculations.\n             */\n            if (this.resolvedRelativeTargetAt === frameData.timestamp) {\n                canSkip = false;\n            }\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */\n            this.isTreeAnimating = Boolean((this.parent && this.parent.isTreeAnimating) ||\n                this.currentAnimation ||\n                this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */\n            copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n            /**\n             * Record previous tree scales before updating.\n             */\n            const prevTreeScaleX = this.treeScale.x;\n            const prevTreeScaleY = this.treeScale.y;\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */\n            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\n            /**\n             * If this layer needs to perform scale correction but doesn't have a target,\n             * use the layout as the target.\n             */\n            if (lead.layout &&\n                !lead.target &&\n                (this.treeScale.x !== 1 || this.treeScale.y !== 1)) {\n                lead.target = lead.layout.layoutBox;\n                lead.targetWithTransforms = createBox();\n            }\n            const { target } = lead;\n            if (!target) {\n                /**\n                 * If we don't have a target to project into, but we were previously\n                 * projecting, we want to remove the stored transform and schedule\n                 * a render to ensure the elements reflect the removed transform.\n                 */\n                if (this.prevProjectionDelta) {\n                    this.createProjectionDeltas();\n                    this.scheduleRender();\n                }\n                return;\n            }\n            if (!this.projectionDelta || !this.prevProjectionDelta) {\n                this.createProjectionDeltas();\n            }\n            else {\n                copyAxisDeltaInto(this.prevProjectionDelta.x, this.projectionDelta.x);\n                copyAxisDeltaInto(this.prevProjectionDelta.y, this.projectionDelta.y);\n            }\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */\n            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            if (this.treeScale.x !== prevTreeScaleX ||\n                this.treeScale.y !== prevTreeScaleY ||\n                !axisDeltaEquals(this.projectionDelta.x, this.prevProjectionDelta.x) ||\n                !axisDeltaEquals(this.projectionDelta.y, this.prevProjectionDelta.y)) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n            /**\n             * Increase debug counter for recalculated projections\n             */\n            if (isDebug) {\n                metrics.recalculatedProjection++;\n            }\n        }\n        hide() {\n            this.isVisible = false;\n            // TODO: Schedule render\n        }\n        show() {\n            this.isVisible = true;\n            // TODO: Schedule render\n        }\n        scheduleRender(notifyAll = true) {\n            var _a;\n            (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.scheduleRender();\n            if (notifyAll) {\n                const stack = this.getStack();\n                stack && stack.scheduleRender();\n            }\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        }\n        createProjectionDeltas() {\n            this.prevProjectionDelta = createDelta();\n            this.projectionDelta = createDelta();\n            this.projectionDeltaWithTransform = createDelta();\n        }\n        setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {\n            const snapshot = this.snapshot;\n            const snapshotLatestValues = snapshot\n                ? snapshot.latestValues\n                : {};\n            const mixedValues = { ...this.latestValues };\n            const targetDelta = createDelta();\n            if (!this.relativeParent ||\n                !this.relativeParent.options.layoutRoot) {\n                this.relativeTarget = this.relativeTargetOrigin = undefined;\n            }\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            const relativeLayout = createBox();\n            const snapshotSource = snapshot ? snapshot.source : undefined;\n            const layoutSource = this.layout ? this.layout.source : undefined;\n            const isSharedLayoutAnimation = snapshotSource !== layoutSource;\n            const stack = this.getStack();\n            const isOnlyMember = !stack || stack.members.length <= 1;\n            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&\n                !isOnlyMember &&\n                this.options.crossfade === true &&\n                !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            let prevRelativeTarget;\n            this.mixTargetDelta = (latest) => {\n                const progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                this.setTargetDelta(targetDelta);\n                if (this.relativeTarget &&\n                    this.relativeTargetOrigin &&\n                    this.layout &&\n                    this.relativeParent &&\n                    this.relativeParent.layout) {\n                    calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n                    /**\n                     * If this is an unchanged relative target we can consider the\n                     * projection not dirty.\n                     */\n                    if (prevRelativeTarget &&\n                        boxEquals(this.relativeTarget, prevRelativeTarget)) {\n                        this.isProjectionDirty = false;\n                    }\n                    if (!prevRelativeTarget)\n                        prevRelativeTarget = createBox();\n                    copyBoxInto(prevRelativeTarget, this.relativeTarget);\n                }\n                if (isSharedLayoutAnimation) {\n                    this.animationValues = mixedValues;\n                    mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                this.root.scheduleUpdateProjection();\n                this.scheduleRender();\n                this.animationProgress = progress;\n            };\n            this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\n        }\n        startAnimation(options) {\n            this.notifyListeners(\"animationStart\");\n            this.currentAnimation && this.currentAnimation.stop();\n            if (this.resumingFrom && this.resumingFrom.currentAnimation) {\n                this.resumingFrom.currentAnimation.stop();\n            }\n            if (this.pendingAnimation) {\n                cancelFrame(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */\n            this.pendingAnimation = frame.update(() => {\n                globalProjectionState.hasAnimatedSinceResize = true;\n                this.currentAnimation = animateSingleValue(0, animationTarget, {\n                    ...options,\n                    onUpdate: (latest) => {\n                        this.mixTargetDelta(latest);\n                        options.onUpdate && options.onUpdate(latest);\n                    },\n                    onComplete: () => {\n                        options.onComplete && options.onComplete();\n                        this.completeAnimation();\n                    },\n                });\n                if (this.resumingFrom) {\n                    this.resumingFrom.currentAnimation = this.currentAnimation;\n                }\n                this.pendingAnimation = undefined;\n            });\n        }\n        completeAnimation() {\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            const stack = this.getStack();\n            stack && stack.exitAnimationComplete();\n            this.resumingFrom =\n                this.currentAnimation =\n                    this.animationValues =\n                        undefined;\n            this.notifyListeners(\"animationComplete\");\n        }\n        finishAnimation() {\n            if (this.currentAnimation) {\n                this.mixTargetDelta && this.mixTargetDelta(animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        }\n        applyTransformsToTarget() {\n            const lead = this.getLead();\n            let { targetWithTransforms, target, layout, latestValues } = lead;\n            if (!targetWithTransforms || !target || !layout)\n                return;\n            /**\n             * If we're only animating position, and this element isn't the lead element,\n             * then instead of projecting into the lead box we instead want to calculate\n             * a new target that aligns the two boxes but maintains the layout shape.\n             */\n            if (this !== lead &&\n                this.layout &&\n                layout &&\n                shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n                target = this.target || createBox();\n                const xLength = calcLength(this.layout.layoutBox.x);\n                target.x.min = lead.target.x.min;\n                target.x.max = target.x.min + xLength;\n                const yLength = calcLength(this.layout.layoutBox.y);\n                target.y.min = lead.target.y.min;\n                target.y.max = target.y.min + yLength;\n            }\n            copyBoxInto(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */\n            transformBox(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its layout layout\n             * into the desired bounding box.\n             */\n            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        }\n        registerSharedNode(layoutId, node) {\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new NodeStack());\n            }\n            const stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            const config = node.options.initialPromotionConfig;\n            node.promote({\n                transition: config ? config.transition : undefined,\n                preserveFollowOpacity: config && config.shouldPreserveFollowOpacity\n                    ? config.shouldPreserveFollowOpacity(node)\n                    : undefined,\n            });\n        }\n        isLead() {\n            const stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        }\n        getLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n        }\n        getPrevLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n        }\n        getStack() {\n            const { layoutId } = this.options;\n            if (layoutId)\n                return this.root.sharedNodes.get(layoutId);\n        }\n        promote({ needsReset, transition, preserveFollowOpacity, } = {}) {\n            const stack = this.getStack();\n            if (stack)\n                stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition)\n                this.setOptions({ transition });\n        }\n        relegate() {\n            const stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            }\n            else {\n                return false;\n            }\n        }\n        resetSkewAndRotation() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return;\n            // If there's no detected skew or rotation values, we can early return without a forced render.\n            let hasDistortingTransform = false;\n            /**\n             * An unrolled check for rotation values. Most elements don't have any rotation and\n             * skipping the nested loop and new object creation is 50% faster.\n             */\n            const { latestValues } = visualElement;\n            if (latestValues.z ||\n                latestValues.rotate ||\n                latestValues.rotateX ||\n                latestValues.rotateY ||\n                latestValues.rotateZ ||\n                latestValues.skewX ||\n                latestValues.skewY) {\n                hasDistortingTransform = true;\n            }\n            // If there's no distorting values, we don't need to do any more.\n            if (!hasDistortingTransform)\n                return;\n            const resetValues = {};\n            if (latestValues.z) {\n                resetDistortingTransform(\"z\", visualElement, resetValues, this.animationValues);\n            }\n            // Check the skew and rotate value of all axes and reset to 0\n            for (let i = 0; i < transformAxes.length; i++) {\n                resetDistortingTransform(`rotate${transformAxes[i]}`, visualElement, resetValues, this.animationValues);\n                resetDistortingTransform(`skew${transformAxes[i]}`, visualElement, resetValues, this.animationValues);\n            }\n            // Force a render of this element to apply the transform with all skews and rotations\n            // set to 0.\n            visualElement.render();\n            // Put back all the values we reset\n            for (const key in resetValues) {\n                visualElement.setStaticValue(key, resetValues[key]);\n                if (this.animationValues) {\n                    this.animationValues[key] = resetValues[key];\n                }\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        }\n        getProjectionStyles(styleProp) {\n            var _a, _b;\n            if (!this.instance || this.isSVG)\n                return undefined;\n            if (!this.isVisible) {\n                return hiddenVisibility;\n            }\n            const styles = {\n                visibility: \"\",\n            };\n            const transformTemplate = this.getTransformTemplate();\n            if (this.needsReset) {\n                this.needsReset = false;\n                styles.opacity = \"\";\n                styles.pointerEvents =\n                    resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\";\n                styles.transform = transformTemplate\n                    ? transformTemplate(this.latestValues, \"\")\n                    : \"none\";\n                return styles;\n            }\n            const lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                const emptyStyles = {};\n                if (this.options.layoutId) {\n                    emptyStyles.opacity =\n                        this.latestValues.opacity !== undefined\n                            ? this.latestValues.opacity\n                            : 1;\n                    emptyStyles.pointerEvents =\n                        resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !hasTransform(this.latestValues)) {\n                    emptyStyles.transform = transformTemplate\n                        ? transformTemplate({}, \"\")\n                        : \"none\";\n                    this.hasProjected = false;\n                }\n                return emptyStyles;\n            }\n            const valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\n            }\n            const { x, y } = this.projectionDelta;\n            styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */\n                styles.opacity =\n                    lead === this\n                        ? (_b = (_a = valuesToRender.opacity) !== null && _a !== void 0 ? _a : this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1\n                        : this.preserveOpacity\n                            ? this.latestValues.opacity\n                            : valuesToRender.opacityExit;\n            }\n            else {\n                /**\n                 * Or we're not animating at all, set the lead component to its layout\n                 * opacity and other components to hidden.\n                 */\n                styles.opacity =\n                    lead === this\n                        ? valuesToRender.opacity !== undefined\n                            ? valuesToRender.opacity\n                            : \"\"\n                        : valuesToRender.opacityExit !== undefined\n                            ? valuesToRender.opacityExit\n                            : 0;\n            }\n            /**\n             * Apply scale correction\n             */\n            for (const key in scaleCorrectors) {\n                if (valuesToRender[key] === undefined)\n                    continue;\n                const { correct, applyTo } = scaleCorrectors[key];\n                /**\n                 * Only apply scale correction to the value if we have an\n                 * active projection transform. Otherwise these values become\n                 * vulnerable to distortion if the element changes size without\n                 * a corresponding layout animation.\n                 */\n                const corrected = styles.transform === \"none\"\n                    ? valuesToRender[key]\n                    : correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    const num = applyTo.length;\n                    for (let i = 0; i < num; i++) {\n                        styles[applyTo[i]] = corrected;\n                    }\n                }\n                else {\n                    styles[key] = corrected;\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */\n            if (this.options.layoutId) {\n                styles.pointerEvents =\n                    lead === this\n                        ? resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\"\n                        : \"none\";\n            }\n            return styles;\n        }\n        clearSnapshot() {\n            this.resumeFrom = this.snapshot = undefined;\n        }\n        // Only run on root\n        resetTree() {\n            this.root.nodes.forEach((node) => { var _a; return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop(); });\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        }\n    };\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    var _a;\n    const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n    if (node.isLead() &&\n        node.layout &&\n        snapshot &&\n        node.hasListeners(\"didUpdate\")) {\n        const { layoutBox: layout, measuredBox: measuredLayout } = node.layout;\n        const { animationType } = node.options;\n        const isShared = snapshot.source !== node.layout.source;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (animationType === \"size\") {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(axisSnapshot);\n                axisSnapshot.min = layout[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(layout[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n                /**\n                 * Ensure relative target gets resized and rerendererd\n                 */\n                if (node.relativeTarget && !node.currentAnimation) {\n                    node.isProjectionDirty = true;\n                    node.relativeTarget[axis].max =\n                        node.relativeTarget[axis].min + length;\n                }\n            });\n        }\n        const layoutDelta = createDelta();\n        calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n        const visualDelta = createDelta();\n        if (isShared) {\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n        }\n        else {\n            calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n        }\n        const hasLayoutChanged = !isDeltaZero(layoutDelta);\n        let hasRelativeTargetChanged = false;\n        if (!node.resumeFrom) {\n            const relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */\n            if (relativeParent && !relativeParent.resumeFrom) {\n                const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;\n                if (parentSnapshot && parentLayout) {\n                    const relativeSnapshot = createBox();\n                    calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n                    const relativeLayout = createBox();\n                    calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n                    if (!boxEqualsRounded(relativeSnapshot, relativeLayout)) {\n                        hasRelativeTargetChanged = true;\n                    }\n                    if (relativeParent.options.layoutRoot) {\n                        node.relativeTarget = relativeLayout;\n                        node.relativeTargetOrigin = relativeSnapshot;\n                        node.relativeParent = relativeParent;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout,\n            snapshot,\n            delta: visualDelta,\n            layoutDelta,\n            hasLayoutChanged,\n            hasRelativeTargetChanged,\n        });\n    }\n    else if (node.isLead()) {\n        const { onExitComplete } = node.options;\n        onExitComplete && onExitComplete();\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */\n    node.options.transition = undefined;\n}\nfunction propagateDirtyNodes(node) {\n    /**\n     * Increase debug counter for nodes encountered this frame\n     */\n    if (isDebug) {\n        metrics.totalNodes++;\n    }\n    if (!node.parent)\n        return;\n    /**\n     * If this node isn't projecting, propagate isProjectionDirty. It will have\n     * no performance impact but it will allow the next child that *is* projecting\n     * but *isn't* dirty to just check its parent to see if *any* ancestor needs\n     * correcting.\n     */\n    if (!node.isProjecting()) {\n        node.isProjectionDirty = node.parent.isProjectionDirty;\n    }\n    /**\n     * Propagate isSharedProjectionDirty and isTransformDirty\n     * throughout the whole tree. A future revision can take another look at\n     * this but for safety we still recalcualte shared nodes.\n     */\n    node.isSharedProjectionDirty || (node.isSharedProjectionDirty = Boolean(node.isProjectionDirty ||\n        node.parent.isProjectionDirty ||\n        node.parent.isSharedProjectionDirty));\n    node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty);\n}\nfunction cleanDirtyNodes(node) {\n    node.isProjectionDirty =\n        node.isSharedProjectionDirty =\n            node.isTransformDirty =\n                false;\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction clearIsLayoutDirty(node) {\n    node.isLayoutDirty = false;\n}\nfunction resetTransformStyle(node) {\n    const { visualElement } = node.options;\n    if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notify(\"BeforeLayoutMeasure\");\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n    node.isProjectionDirty = true;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetSkewAndRotation(node) {\n    node.resetSkewAndRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = mixNumber(delta.translate, 0, p);\n    output.scale = mixNumber(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = mixNumber(from.min, to.min, p);\n    output.max = mixNumber(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return (node.animationValues && node.animationValues.opacityExit !== undefined);\n}\nconst defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nconst userAgentContains = (string) => typeof navigator !== \"undefined\" &&\n    navigator.userAgent &&\n    navigator.userAgent.toLowerCase().includes(string);\n/**\n * Measured bounding boxes must be rounded in Safari and\n * left untouched in Chrome, otherwise non-integer layouts within scaled-up elements\n * can appear to jump.\n */\nconst roundPoint = userAgentContains(\"applewebkit/\") && !userAgentContains(\"chrome/\")\n    ? Math.round\n    : noop;\nfunction roundAxis(axis) {\n    // Round to the nearest .5 pixels to support subpixel layouts\n    axis.min = roundPoint(axis.min);\n    axis.max = roundPoint(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n    return (animationType === \"position\" ||\n        (animationType === \"preserve-aspect\" &&\n            !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2)));\n}\nfunction checkNodeWasScrollRoot(node) {\n    var _a;\n    return node !== node.root && ((_a = node.scroll) === null || _a === void 0 ? void 0 : _a.wasRoot);\n}\n\nexport { cleanDirtyNodes, createProjectionNode, mixAxis, mixAxisDelta, mixBox, propagateDirtyNodes };\n","import { createProjectionNode } from './create-projection-node.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\n\nconst DocumentProjectionNode = createProjectionNode({\n    attachResizeListener: (ref, notify) => addDomEvent(ref, \"resize\", notify),\n    measureScroll: () => ({\n        x: document.documentElement.scrollLeft || document.body.scrollLeft,\n        y: document.documentElement.scrollTop || document.body.scrollTop,\n    }),\n    checkIsScrollRoot: () => true,\n});\n\nexport { DocumentProjectionNode };\n","import { createProjectionNode } from './create-projection-node.mjs';\nimport { DocumentProjectionNode } from './DocumentProjectionNode.mjs';\n\nconst rootProjectionNode = {\n    current: undefined,\n};\nconst HTMLProjectionNode = createProjectionNode({\n    measureScroll: (instance) => ({\n        x: instance.scrollLeft,\n        y: instance.scrollTop,\n    }),\n    defaultParent: () => {\n        if (!rootProjectionNode.current) {\n            const documentNode = new DocumentProjectionNode({});\n            documentNode.mount(window);\n            documentNode.setOptions({ layoutScroll: true });\n            rootProjectionNode.current = documentNode;\n        }\n        return rootProjectionNode.current;\n    },\n    resetTransform: (instance, value) => {\n        instance.style.transform = value !== undefined ? value : \"none\";\n    },\n    checkIsScrollRoot: (instance) => Boolean(window.getComputedStyle(instance).position === \"fixed\"),\n});\n\nexport { HTMLProjectionNode, rootProjectionNode };\n","import { DragGesture } from '../../gestures/drag/index.mjs';\nimport { PanGesture } from '../../gestures/pan/index.mjs';\nimport { MeasureLayout } from './layout/MeasureLayout.mjs';\nimport { HTMLProjectionNode } from '../../projection/node/HTMLProjectionNode.mjs';\n\nconst drag = {\n    pan: {\n        Feature: PanGesture,\n    },\n    drag: {\n        Feature: DragGesture,\n        ProjectionNode: HTMLProjectionNode,\n        MeasureLayout,\n    },\n};\n\nexport { drag };\n","import { Feature } from '../motion/features/Feature.mjs';\nimport { hover } from 'motion-dom';\nimport { extractEventInfo } from '../events/event-info.mjs';\nimport { frame } from '../frameloop/frame.mjs';\n\nfunction handleHoverEvent(node, event, lifecycle) {\n    const { props } = node;\n    if (node.animationState && props.whileHover) {\n        node.animationState.setActive(\"whileHover\", lifecycle === \"Start\");\n    }\n    const eventName = (\"onHover\" + lifecycle);\n    const callback = props[eventName];\n    if (callback) {\n        frame.postRender(() => callback(event, extractEventInfo(event)));\n    }\n}\nclass HoverGesture extends Feature {\n    mount() {\n        const { current } = this.node;\n        if (!current)\n            return;\n        this.unmount = hover(current, (startEvent) => {\n            handleHoverEvent(this.node, startEvent, \"Start\");\n            return (endEvent) => handleHoverEvent(this.node, endEvent, \"End\");\n        });\n    }\n    unmount() { }\n}\n\nexport { HoverGesture };\n","import { addDomEvent } from '../events/add-dom-event.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\nimport { pipe } from '../utils/pipe.mjs';\n\nclass FocusGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.isActive = false;\n    }\n    onFocus() {\n        let isFocusVisible = false;\n        /**\n         * If this element doesn't match focus-visible then don't\n         * apply whileHover. But, if matches throws that focus-visible\n         * is not a valid selector then in that browser outline styles will be applied\n         * to the element by default and we want to match that behaviour with whileFocus.\n         */\n        try {\n            isFocusVisible = this.node.current.matches(\":focus-visible\");\n        }\n        catch (e) {\n            isFocusVisible = true;\n        }\n        if (!isFocusVisible || !this.node.animationState)\n            return;\n        this.node.animationState.setActive(\"whileFocus\", true);\n        this.isActive = true;\n    }\n    onBlur() {\n        if (!this.isActive || !this.node.animationState)\n            return;\n        this.node.animationState.setActive(\"whileFocus\", false);\n        this.isActive = false;\n    }\n    mount() {\n        this.unmount = pipe(addDomEvent(this.node.current, \"focus\", () => this.onFocus()), addDomEvent(this.node.current, \"blur\", () => this.onBlur()));\n    }\n    unmount() { }\n}\n\nexport { FocusGesture };\n","import { Feature } from '../motion/features/Feature.mjs';\nimport { press } from 'motion-dom';\nimport { extractEventInfo } from '../events/event-info.mjs';\nimport { frame } from '../frameloop/frame.mjs';\n\nfunction handlePressEvent(node, event, lifecycle) {\n    const { props } = node;\n    if (node.animationState && props.whileTap) {\n        node.animationState.setActive(\"whileTap\", lifecycle === \"Start\");\n    }\n    const eventName = (\"onTap\" + (lifecycle === \"End\" ? \"\" : lifecycle));\n    const callback = props[eventName];\n    if (callback) {\n        frame.postRender(() => callback(event, extractEventInfo(event)));\n    }\n}\nclass PressGesture extends Feature {\n    mount() {\n        const { current } = this.node;\n        if (!current)\n            return;\n        this.unmount = press(current, (startEvent) => {\n            handlePressEvent(this.node, startEvent, \"Start\");\n            return (endEvent, { success }) => handlePressEvent(this.node, endEvent, success ? \"End\" : \"Cancel\");\n        }, { useGlobalTarget: this.node.props.globalTapTarget });\n    }\n    unmount() { }\n}\n\nexport { PressGesture };\n","/**\n * Map an IntersectionHandler callback to an element. We only ever make one handler for one\n * element, so even though these handlers might all be triggered by different\n * observers, we can keep them in the same map.\n */\nconst observerCallbacks = new WeakMap();\n/**\n * Multiple observers can be created for multiple element/document roots. Each with\n * different settings. So here we store dictionaries of observers to each root,\n * using serialised settings (threshold/margin) as lookup keys.\n */\nconst observers = new WeakMap();\nconst fireObserverCallback = (entry) => {\n    const callback = observerCallbacks.get(entry.target);\n    callback && callback(entry);\n};\nconst fireAllObserverCallbacks = (entries) => {\n    entries.forEach(fireObserverCallback);\n};\nfunction initIntersectionObserver({ root, ...options }) {\n    const lookupRoot = root || document;\n    /**\n     * If we don't have an observer lookup map for this root, create one.\n     */\n    if (!observers.has(lookupRoot)) {\n        observers.set(lookupRoot, {});\n    }\n    const rootObservers = observers.get(lookupRoot);\n    const key = JSON.stringify(options);\n    /**\n     * If we don't have an observer for this combination of root and settings,\n     * create one.\n     */\n    if (!rootObservers[key]) {\n        rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, { root, ...options });\n    }\n    return rootObservers[key];\n}\nfunction observeIntersection(element, options, callback) {\n    const rootInteresectionObserver = initIntersectionObserver(options);\n    observerCallbacks.set(element, callback);\n    rootInteresectionObserver.observe(element);\n    return () => {\n        observerCallbacks.delete(element);\n        rootInteresectionObserver.unobserve(element);\n    };\n}\n\nexport { observeIntersection };\n","import { Feature } from '../Feature.mjs';\nimport { observeIntersection } from './observers.mjs';\n\nconst thresholdNames = {\n    some: 0,\n    all: 1,\n};\nclass InViewFeature extends Feature {\n    constructor() {\n        super(...arguments);\n        this.hasEnteredView = false;\n        this.isInView = false;\n    }\n    startObserver() {\n        this.unmount();\n        const { viewport = {} } = this.node.getProps();\n        const { root, margin: rootMargin, amount = \"some\", once } = viewport;\n        const options = {\n            root: root ? root.current : undefined,\n            rootMargin,\n            threshold: typeof amount === \"number\" ? amount : thresholdNames[amount],\n        };\n        const onIntersectionUpdate = (entry) => {\n            const { isIntersecting } = entry;\n            /**\n             * If there's been no change in the viewport state, early return.\n             */\n            if (this.isInView === isIntersecting)\n                return;\n            this.isInView = isIntersecting;\n            /**\n             * Handle hasEnteredView. If this is only meant to run once, and\n             * element isn't visible, early return. Otherwise set hasEnteredView to true.\n             */\n            if (once && !isIntersecting && this.hasEnteredView) {\n                return;\n            }\n            else if (isIntersecting) {\n                this.hasEnteredView = true;\n            }\n            if (this.node.animationState) {\n                this.node.animationState.setActive(\"whileInView\", isIntersecting);\n            }\n            /**\n             * Use the latest committed props rather than the ones in scope\n             * when this observer is created\n             */\n            const { onViewportEnter, onViewportLeave } = this.node.getProps();\n            const callback = isIntersecting ? onViewportEnter : onViewportLeave;\n            callback && callback(entry);\n        };\n        return observeIntersection(this.node.current, options, onIntersectionUpdate);\n    }\n    mount() {\n        this.startObserver();\n    }\n    update() {\n        if (typeof IntersectionObserver === \"undefined\")\n            return;\n        const { props, prevProps } = this.node;\n        const hasOptionsChanged = [\"amount\", \"margin\", \"root\"].some(hasViewportOptionChanged(props, prevProps));\n        if (hasOptionsChanged) {\n            this.startObserver();\n        }\n    }\n    unmount() { }\n}\nfunction hasViewportOptionChanged({ viewport = {} }, { viewport: prevViewport = {} } = {}) {\n    return (name) => viewport[name] !== prevViewport[name];\n}\n\nexport { InViewFeature };\n","import { HoverGesture } from '../../gestures/hover.mjs';\nimport { FocusGesture } from '../../gestures/focus.mjs';\nimport { PressGesture } from '../../gestures/press.mjs';\nimport { InViewFeature } from './viewport/index.mjs';\n\nconst gestureAnimations = {\n    inView: {\n        Feature: InViewFeature,\n    },\n    tap: {\n        Feature: PressGesture,\n    },\n    focus: {\n        Feature: FocusGesture,\n    },\n    hover: {\n        Feature: HoverGesture,\n    },\n};\n\nexport { gestureAnimations };\n","import { HTMLProjectionNode } from '../../projection/node/HTMLProjectionNode.mjs';\nimport { MeasureLayout } from './layout/MeasureLayout.mjs';\n\nconst layout = {\n    layout: {\n        ProjectionNode: HTMLProjectionNode,\n        MeasureLayout,\n    },\n};\n\nexport { layout };\n","\"use client\";\nimport { createContext } from 'react';\n\nconst MotionContext = createContext({});\n\nexport { MotionContext };\n","\"use client\";\nimport { createContext } from 'react';\n\nconst LazyContext = createContext({ strict: false });\n\nexport { LazyContext };\n","import { useContext, useRef, useInsertionEffect, useEffect } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { MotionContext } from '../../context/MotionContext/index.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\nimport { LazyContext } from '../../context/LazyContext.mjs';\nimport { MotionConfigContext } from '../../context/MotionConfigContext.mjs';\nimport { optimizedAppearDataAttribute } from '../../animation/optimized-appear/data-id.mjs';\nimport { microtask } from '../../frameloop/microtask.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { SwitchLayoutGroupContext } from '../../context/SwitchLayoutGroupContext.mjs';\n\nfunction useVisualElement(Component, visualState, props, createVisualElement, ProjectionNodeConstructor) {\n    var _a, _b;\n    const { visualElement: parent } = useContext(MotionContext);\n    const lazyContext = useContext(LazyContext);\n    const presenceContext = useContext(PresenceContext);\n    const reducedMotionConfig = useContext(MotionConfigContext).reducedMotion;\n    const visualElementRef = useRef(null);\n    /**\n     * If we haven't preloaded a renderer, check to see if we have one lazy-loaded\n     */\n    createVisualElement = createVisualElement || lazyContext.renderer;\n    if (!visualElementRef.current && createVisualElement) {\n        visualElementRef.current = createVisualElement(Component, {\n            visualState,\n            parent,\n            props,\n            presenceContext,\n            blockInitialAnimation: presenceContext\n                ? presenceContext.initial === false\n                : false,\n            reducedMotionConfig,\n        });\n    }\n    const visualElement = visualElementRef.current;\n    /**\n     * Load Motion gesture and animation features. These are rendered as renderless\n     * components so each feature can optionally make use of React lifecycle methods.\n     */\n    const initialLayoutGroupConfig = useContext(SwitchLayoutGroupContext);\n    if (visualElement &&\n        !visualElement.projection &&\n        ProjectionNodeConstructor &&\n        (visualElement.type === \"html\" || visualElement.type === \"svg\")) {\n        createProjectionNode(visualElementRef.current, props, ProjectionNodeConstructor, initialLayoutGroupConfig);\n    }\n    const isMounted = useRef(false);\n    useInsertionEffect(() => {\n        /**\n         * Check the component has already mounted before calling\n         * `update` unnecessarily. This ensures we skip the initial update.\n         */\n        if (visualElement && isMounted.current) {\n            visualElement.update(props, presenceContext);\n        }\n    });\n    /**\n     * Cache this value as we want to know whether HandoffAppearAnimations\n     * was present on initial render - it will be deleted after this.\n     */\n    const optimisedAppearId = props[optimizedAppearDataAttribute];\n    const wantsHandoff = useRef(Boolean(optimisedAppearId) &&\n        !((_a = window.MotionHandoffIsComplete) === null || _a === void 0 ? void 0 : _a.call(window, optimisedAppearId)) &&\n        ((_b = window.MotionHasOptimisedAnimation) === null || _b === void 0 ? void 0 : _b.call(window, optimisedAppearId)));\n    useIsomorphicLayoutEffect(() => {\n        if (!visualElement)\n            return;\n        isMounted.current = true;\n        window.MotionIsMounted = true;\n        visualElement.updateFeatures();\n        microtask.render(visualElement.render);\n        /**\n         * Ideally this function would always run in a useEffect.\n         *\n         * However, if we have optimised appear animations to handoff from,\n         * it needs to happen synchronously to ensure there's no flash of\n         * incorrect styles in the event of a hydration error.\n         *\n         * So if we detect a situtation where optimised appear animations\n         * are running, we use useLayoutEffect to trigger animations.\n         */\n        if (wantsHandoff.current && visualElement.animationState) {\n            visualElement.animationState.animateChanges();\n        }\n    });\n    useEffect(() => {\n        if (!visualElement)\n            return;\n        if (!wantsHandoff.current && visualElement.animationState) {\n            visualElement.animationState.animateChanges();\n        }\n        if (wantsHandoff.current) {\n            // This ensures all future calls to animateChanges() in this component will run in useEffect\n            queueMicrotask(() => {\n                var _a;\n                (_a = window.MotionHandoffMarkAsComplete) === null || _a === void 0 ? void 0 : _a.call(window, optimisedAppearId);\n            });\n            wantsHandoff.current = false;\n        }\n    });\n    return visualElement;\n}\nfunction createProjectionNode(visualElement, props, ProjectionNodeConstructor, initialPromotionConfig) {\n    const { layoutId, layout, drag, dragConstraints, layoutScroll, layoutRoot, } = props;\n    visualElement.projection = new ProjectionNodeConstructor(visualElement.latestValues, props[\"data-framer-portal-id\"]\n        ? undefined\n        : getClosestProjectingNode(visualElement.parent));\n    visualElement.projection.setOptions({\n        layoutId,\n        layout,\n        alwaysMeasureLayout: Boolean(drag) || (dragConstraints && isRefObject(dragConstraints)),\n        visualElement,\n        /**\n         * TODO: Update options in an effect. This could be tricky as it'll be too late\n         * to update by the time layout animations run.\n         * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n         * ensuring it gets called if there's no potential layout animations.\n         *\n         */\n        animationType: typeof layout === \"string\" ? layout : \"both\",\n        initialPromotionConfig,\n        layoutScroll,\n        layoutRoot,\n    });\n}\nfunction getClosestProjectingNode(visualElement) {\n    if (!visualElement)\n        return undefined;\n    return visualElement.options.allowProjection !== false\n        ? visualElement.projection\n        : getClosestProjectingNode(visualElement.parent);\n}\n\nexport { useVisualElement };\n","import { useCallback } from 'react';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\n\n/**\n * Creates a ref function that, when called, hydrates the provided\n * external ref and VisualElement.\n */\nfunction useMotionRef(visualState, visualElement, externalRef) {\n    return useCallback((instance) => {\n        instance && visualState.mount && visualState.mount(instance);\n        if (visualElement) {\n            if (instance) {\n                visualElement.mount(instance);\n            }\n            else {\n                visualElement.unmount();\n            }\n        }\n        if (externalRef) {\n            if (typeof externalRef === \"function\") {\n                externalRef(instance);\n            }\n            else if (isRefObject(externalRef)) {\n                externalRef.current = instance;\n            }\n        }\n    }, \n    /**\n     * Only pass a new ref callback to React if we've received a visual element\n     * factory. Otherwise we'll be mounting/remounting every time externalRef\n     * or other dependencies change.\n     */\n    [visualElement]);\n}\n\nexport { useMotionRef };\n","import { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { isVariantLabel } from './is-variant-label.mjs';\nimport { variantProps } from './variant-props.mjs';\n\nfunction isControllingVariants(props) {\n    return (isAnimationControls(props.animate) ||\n        variantProps.some((name) => isVariantLabel(props[name])));\n}\nfunction isVariantNode(props) {\n    return Boolean(isControllingVariants(props) || props.variants);\n}\n\nexport { isControllingVariants, isVariantNode };\n","import { isVariantLabel } from '../../render/utils/is-variant-label.mjs';\nimport { isControllingVariants } from '../../render/utils/is-controlling-variants.mjs';\n\nfunction getCurrentTreeVariants(props, context) {\n    if (isControllingVariants(props)) {\n        const { initial, animate } = props;\n        return {\n            initial: initial === false || isVariantLabel(initial)\n                ? initial\n                : undefined,\n            animate: isVariantLabel(animate) ? animate : undefined,\n        };\n    }\n    return props.inherit !== false ? context : {};\n}\n\nexport { getCurrentTreeVariants };\n","import { useContext, useMemo } from 'react';\nimport { MotionContext } from './index.mjs';\nimport { getCurrentTreeVariants } from './utils.mjs';\n\nfunction useCreateMotionContext(props) {\n    const { initial, animate } = getCurrentTreeVariants(props, useContext(MotionContext));\n    return useMemo(() => ({ initial, animate }), [variantLabelsAsDependency(initial), variantLabelsAsDependency(animate)]);\n}\nfunction variantLabelsAsDependency(prop) {\n    return Array.isArray(prop) ? prop.join(\" \") : prop;\n}\n\nexport { useCreateMotionContext };\n","const featureProps = {\n    animation: [\n        \"animate\",\n        \"variants\",\n        \"whileHover\",\n        \"whileTap\",\n        \"exit\",\n        \"whileInView\",\n        \"whileFocus\",\n        \"whileDrag\",\n    ],\n    exit: [\"exit\"],\n    drag: [\"drag\", \"dragControls\"],\n    focus: [\"whileFocus\"],\n    hover: [\"whileHover\", \"onHoverStart\", \"onHoverEnd\"],\n    tap: [\"whileTap\", \"onTap\", \"onTapStart\", \"onTapCancel\"],\n    pan: [\"onPan\", \"onPanStart\", \"onPanSessionStart\", \"onPanEnd\"],\n    inView: [\"whileInView\", \"onViewportEnter\", \"onViewportLeave\"],\n    layout: [\"layout\", \"layoutId\"],\n};\nconst featureDefinitions = {};\nfor (const key in featureProps) {\n    featureDefinitions[key] = {\n        isEnabled: (props) => featureProps[key].some((name) => !!props[name]),\n    };\n}\n\nexport { featureDefinitions };\n","import { featureDefinitions } from './definitions.mjs';\n\nfunction loadFeatures(features) {\n    for (const key in features) {\n        featureDefinitions[key] = {\n            ...featureDefinitions[key],\n            ...features[key],\n        };\n    }\n}\n\nexport { loadFeatures };\n","const motionComponentSymbol = Symbol.for(\"motionComponentSymbol\");\n\nexport { motionComponentSymbol };\n","\"use client\";\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { forwardRef, useContext } from 'react';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { MotionContext } from '../context/MotionContext/index.mjs';\nimport { useVisualElement } from './utils/use-visual-element.mjs';\nimport { useMotionRef } from './utils/use-motion-ref.mjs';\nimport { useCreateMotionContext } from '../context/MotionContext/create.mjs';\nimport { loadFeatures } from './features/load-features.mjs';\nimport { isBrowser } from '../utils/is-browser.mjs';\nimport { LayoutGroupContext } from '../context/LayoutGroupContext.mjs';\nimport { LazyContext } from '../context/LazyContext.mjs';\nimport { motionComponentSymbol } from './utils/symbol.mjs';\nimport { warning, invariant } from 'motion-utils';\nimport { featureDefinitions } from './features/definitions.mjs';\n\n/**\n * Create a `motion` component.\n *\n * This function accepts a Component argument, which can be either a string (ie \"div\"\n * for `motion.div`), or an actual React component.\n *\n * Alongside this is a config option which provides a way of rendering the provided\n * component \"offline\", or outside the React render cycle.\n */\nfunction createRendererMotionComponent({ preloadedFeatures, createVisualElement, useRender, useVisualState, Component, }) {\n    preloadedFeatures && loadFeatures(preloadedFeatures);\n    function MotionComponent(props, externalRef) {\n        /**\n         * If we need to measure the element we load this functionality in a\n         * separate class component in order to gain access to getSnapshotBeforeUpdate.\n         */\n        let MeasureLayout;\n        const configAndProps = {\n            ...useContext(MotionConfigContext),\n            ...props,\n            layoutId: useLayoutId(props),\n        };\n        const { isStatic } = configAndProps;\n        const context = useCreateMotionContext(props);\n        const visualState = useVisualState(props, isStatic);\n        if (!isStatic && isBrowser) {\n            useStrictMode(configAndProps, preloadedFeatures);\n            const layoutProjection = getProjectionFunctionality(configAndProps);\n            MeasureLayout = layoutProjection.MeasureLayout;\n            /**\n             * Create a VisualElement for this component. A VisualElement provides a common\n             * interface to renderer-specific APIs (ie DOM/Three.js etc) as well as\n             * providing a way of rendering to these APIs outside of the React render loop\n             * for more performant animations and interactions\n             */\n            context.visualElement = useVisualElement(Component, visualState, configAndProps, createVisualElement, layoutProjection.ProjectionNode);\n        }\n        /**\n         * The mount order and hierarchy is specific to ensure our element ref\n         * is hydrated by the time features fire their effects.\n         */\n        return (jsxs(MotionContext.Provider, { value: context, children: [MeasureLayout && context.visualElement ? (jsx(MeasureLayout, { visualElement: context.visualElement, ...configAndProps })) : null, useRender(Component, props, useMotionRef(visualState, context.visualElement, externalRef), visualState, isStatic, context.visualElement)] }));\n    }\n    const ForwardRefMotionComponent = forwardRef(MotionComponent);\n    ForwardRefMotionComponent[motionComponentSymbol] = Component;\n    return ForwardRefMotionComponent;\n}\nfunction useLayoutId({ layoutId }) {\n    const layoutGroupId = useContext(LayoutGroupContext).id;\n    return layoutGroupId && layoutId !== undefined\n        ? layoutGroupId + \"-\" + layoutId\n        : layoutId;\n}\nfunction useStrictMode(configAndProps, preloadedFeatures) {\n    const isStrict = useContext(LazyContext).strict;\n    /**\n     * If we're in development mode, check to make sure we're not rendering a motion component\n     * as a child of LazyMotion, as this will break the file-size benefits of using it.\n     */\n    if (process.env.NODE_ENV !== \"production\" &&\n        preloadedFeatures &&\n        isStrict) {\n        const strictMessage = \"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.\";\n        configAndProps.ignoreStrict\n            ? warning(false, strictMessage)\n            : invariant(false, strictMessage);\n    }\n}\nfunction getProjectionFunctionality(props) {\n    const { drag, layout } = featureDefinitions;\n    if (!drag && !layout)\n        return {};\n    const combined = { ...drag, ...layout };\n    return {\n        MeasureLayout: (drag === null || drag === void 0 ? void 0 : drag.isEnabled(props)) || (layout === null || layout === void 0 ? void 0 : layout.isEnabled(props))\n            ? combined.MeasureLayout\n            : undefined,\n        ProjectionNode: combined.ProjectionNode,\n    };\n}\n\nexport { createRendererMotionComponent };\n","/**\n * We keep these listed separately as we use the lowercase tag names as part\n * of the runtime bundle to detect SVG components\n */\nconst lowercaseSVGElements = [\n    \"animate\",\n    \"circle\",\n    \"defs\",\n    \"desc\",\n    \"ellipse\",\n    \"g\",\n    \"image\",\n    \"line\",\n    \"filter\",\n    \"marker\",\n    \"mask\",\n    \"metadata\",\n    \"path\",\n    \"pattern\",\n    \"polygon\",\n    \"polyline\",\n    \"rect\",\n    \"stop\",\n    \"switch\",\n    \"symbol\",\n    \"svg\",\n    \"text\",\n    \"tspan\",\n    \"use\",\n    \"view\",\n];\n\nexport { lowercaseSVGElements };\n","import { lowercaseSVGElements } from '../../svg/lowercase-elements.mjs';\n\nfunction isSVGComponent(Component) {\n    if (\n    /**\n     * If it's not a string, it's a custom React component. Currently we only support\n     * HTML custom React components.\n     */\n    typeof Component !== \"string\" ||\n        /**\n         * If it contains a dash, the element is a custom HTML webcomponent.\n         */\n        Component.includes(\"-\")) {\n        return false;\n    }\n    else if (\n    /**\n     * If it's in our list of lowercase SVG tags, it's an SVG component\n     */\n    lowercaseSVGElements.indexOf(Component) > -1 ||\n        /**\n         * If it contains a capital letter, it's an SVG component\n         */\n        /[A-Z]/u.test(Component)) {\n        return true;\n    }\n    return false;\n}\n\nexport { isSVGComponent };\n","function renderHTML(element, { style, vars }, styleProp, projection) {\n    Object.assign(element.style, style, projection && projection.getProjectionStyles(styleProp));\n    // Loop over any CSS variables and assign those.\n    for (const key in vars) {\n        element.style.setProperty(key, vars[key]);\n    }\n}\n\nexport { renderHTML };\n","/**\n * A set of attribute names that are always read/written as camel case.\n */\nconst camelCaseAttributes = new Set([\n    \"baseFrequency\",\n    \"diffuseConstant\",\n    \"kernelMatrix\",\n    \"kernelUnitLength\",\n    \"keySplines\",\n    \"keyTimes\",\n    \"limitingConeAngle\",\n    \"markerHeight\",\n    \"markerWidth\",\n    \"numOctaves\",\n    \"targetX\",\n    \"targetY\",\n    \"surfaceScale\",\n    \"specularConstant\",\n    \"specularExponent\",\n    \"stdDeviation\",\n    \"tableValues\",\n    \"viewBox\",\n    \"gradientTransform\",\n    \"pathLength\",\n    \"startOffset\",\n    \"textLength\",\n    \"lengthAdjust\",\n]);\n\nexport { camelCaseAttributes };\n","import { camelToDash } from '../../dom/utils/camel-to-dash.mjs';\nimport { renderHTML } from '../../html/utils/render.mjs';\nimport { camelCaseAttributes } from './camel-case-attrs.mjs';\n\nfunction renderSVG(element, renderState, _styleProp, projection) {\n    renderHTML(element, renderState, undefined, projection);\n    for (const key in renderState.attrs) {\n        element.setAttribute(!camelCaseAttributes.has(key) ? camelToDash(key) : key, renderState.attrs[key]);\n    }\n}\n\nexport { renderSVG };\n","import { scaleCorrectors } from '../../projection/styles/scale-correction.mjs';\nimport { transformProps } from '../../render/html/utils/transform.mjs';\n\nfunction isForcedMotionValue(key, { layout, layoutId }) {\n    return (transformProps.has(key) ||\n        key.startsWith(\"origin\") ||\n        ((layout || layoutId !== undefined) &&\n            (!!scaleCorrectors[key] || key === \"opacity\")));\n}\n\nexport { isForcedMotionValue };\n","import { isForcedMotionValue } from '../../../motion/utils/is-forced-motion-value.mjs';\nimport { isMotionValue } from '../../../value/utils/is-motion-value.mjs';\n\nfunction scrapeMotionValuesFromProps(props, prevProps, visualElement) {\n    var _a;\n    const { style } = props;\n    const newValues = {};\n    for (const key in style) {\n        if (isMotionValue(style[key]) ||\n            (prevProps.style &&\n                isMotionValue(prevProps.style[key])) ||\n            isForcedMotionValue(key, props) ||\n            ((_a = visualElement === null || visualElement === void 0 ? void 0 : visualElement.getValue(key)) === null || _a === void 0 ? void 0 : _a.liveStyle) !== undefined) {\n            newValues[key] = style[key];\n        }\n    }\n    return newValues;\n}\n\nexport { scrapeMotionValuesFromProps };\n","import { isMotionValue } from '../../../value/utils/is-motion-value.mjs';\nimport { scrapeMotionValuesFromProps as scrapeMotionValuesFromProps$1 } from '../../html/utils/scrape-motion-values.mjs';\nimport { transformPropOrder } from '../../html/utils/transform.mjs';\n\nfunction scrapeMotionValuesFromProps(props, prevProps, visualElement) {\n    const newValues = scrapeMotionValuesFromProps$1(props, prevProps, visualElement);\n    for (const key in props) {\n        if (isMotionValue(props[key]) ||\n            isMotionValue(prevProps[key])) {\n            const targetKey = transformPropOrder.indexOf(key) !== -1\n                ? \"attr\" + key.charAt(0).toUpperCase() + key.substring(1)\n                : key;\n            newValues[targetKey] = props[key];\n        }\n    }\n    return newValues;\n}\n\nexport { scrapeMotionValuesFromProps };\n","import { useContext } from 'react';\nimport { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { resolveVariantFromProps } from '../../render/utils/resolve-variants.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { MotionContext } from '../../context/MotionContext/index.mjs';\nimport { isControllingVariants, isVariantNode } from '../../render/utils/is-controlling-variants.mjs';\n\nfunction makeState({ scrapeMotionValuesFromProps, createRenderState, onMount, }, props, context, presenceContext) {\n    const state = {\n        latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps),\n        renderState: createRenderState(),\n    };\n    if (onMount) {\n        state.mount = (instance) => onMount(props, instance, state);\n    }\n    return state;\n}\nconst makeUseVisualState = (config) => (props, isStatic) => {\n    const context = useContext(MotionContext);\n    const presenceContext = useContext(PresenceContext);\n    const make = () => makeState(config, props, context, presenceContext);\n    return isStatic ? make() : useConstant(make);\n};\nfunction makeLatestValues(props, context, presenceContext, scrapeMotionValues) {\n    const values = {};\n    const motionValues = scrapeMotionValues(props, {});\n    for (const key in motionValues) {\n        values[key] = resolveMotionValue(motionValues[key]);\n    }\n    let { initial, animate } = props;\n    const isControllingVariants$1 = isControllingVariants(props);\n    const isVariantNode$1 = isVariantNode(props);\n    if (context &&\n        isVariantNode$1 &&\n        !isControllingVariants$1 &&\n        props.inherit !== false) {\n        if (initial === undefined)\n            initial = context.initial;\n        if (animate === undefined)\n            animate = context.animate;\n    }\n    let isInitialAnimationBlocked = presenceContext\n        ? presenceContext.initial === false\n        : false;\n    isInitialAnimationBlocked = isInitialAnimationBlocked || initial === false;\n    const variantToSet = isInitialAnimationBlocked ? animate : initial;\n    if (variantToSet &&\n        typeof variantToSet !== \"boolean\" &&\n        !isAnimationControls(variantToSet)) {\n        const list = Array.isArray(variantToSet) ? variantToSet : [variantToSet];\n        for (let i = 0; i < list.length; i++) {\n            const resolved = resolveVariantFromProps(props, list[i]);\n            if (resolved) {\n                const { transitionEnd, transition, ...target } = resolved;\n                for (const key in target) {\n                    let valueTarget = target[key];\n                    if (Array.isArray(valueTarget)) {\n                        /**\n                         * Take final keyframe if the initial animation is blocked because\n                         * we want to initialise at the end of that blocked animation.\n                         */\n                        const index = isInitialAnimationBlocked\n                            ? valueTarget.length - 1\n                            : 0;\n                        valueTarget = valueTarget[index];\n                    }\n                    if (valueTarget !== null) {\n                        values[key] = valueTarget;\n                    }\n                }\n                for (const key in transitionEnd) {\n                    values[key] = transitionEnd[key];\n                }\n            }\n        }\n    }\n    return values;\n}\n\nexport { makeUseVisualState };\n","const createHtmlRenderState = () => ({\n    style: {},\n    transform: {},\n    transformOrigin: {},\n    vars: {},\n});\n\nexport { createHtmlRenderState };\n","import { createHtmlRenderState } from '../../html/utils/create-render-state.mjs';\n\nconst createSvgRenderState = () => ({\n    ...createHtmlRenderState(),\n    attrs: {},\n});\n\nexport { createSvgRenderState };\n","/**\n * Provided a value and a ValueType, returns the value as that value type.\n */\nconst getValueAsType = (value, type) => {\n    return type && typeof value === \"number\"\n        ? type.transform(value)\n        : value;\n};\n\nexport { getValueAsType };\n","import { transformPropOrder } from './transform.mjs';\nimport { getValueAsType } from '../../dom/value-types/get-as-type.mjs';\nimport { numberValueTypes } from '../../dom/value-types/number.mjs';\n\nconst translateAlias = {\n    x: \"translateX\",\n    y: \"translateY\",\n    z: \"translateZ\",\n    transformPerspective: \"perspective\",\n};\nconst numTransforms = transformPropOrder.length;\n/**\n * Build a CSS transform style from individual x/y/scale etc properties.\n *\n * This outputs with a default order of transforms/scales/rotations, this can be customised by\n * providing a transformTemplate function.\n */\nfunction buildTransform(latestValues, transform, transformTemplate) {\n    // The transform string we're going to build into.\n    let transformString = \"\";\n    let transformIsDefault = true;\n    /**\n     * Loop over all possible transforms in order, adding the ones that\n     * are present to the transform string.\n     */\n    for (let i = 0; i < numTransforms; i++) {\n        const key = transformPropOrder[i];\n        const value = latestValues[key];\n        if (value === undefined)\n            continue;\n        let valueIsDefault = true;\n        if (typeof value === \"number\") {\n            valueIsDefault = value === (key.startsWith(\"scale\") ? 1 : 0);\n        }\n        else {\n            valueIsDefault = parseFloat(value) === 0;\n        }\n        if (!valueIsDefault || transformTemplate) {\n            const valueAsType = getValueAsType(value, numberValueTypes[key]);\n            if (!valueIsDefault) {\n                transformIsDefault = false;\n                const transformName = translateAlias[key] || key;\n                transformString += `${transformName}(${valueAsType}) `;\n            }\n            if (transformTemplate) {\n                transform[key] = valueAsType;\n            }\n        }\n    }\n    transformString = transformString.trim();\n    // If we have a custom `transform` template, pass our transform values and\n    // generated transformString to that before returning\n    if (transformTemplate) {\n        transformString = transformTemplate(transform, transformIsDefault ? \"\" : transformString);\n    }\n    else if (transformIsDefault) {\n        transformString = \"none\";\n    }\n    return transformString;\n}\n\nexport { buildTransform };\n","import { buildTransform } from './build-transform.mjs';\nimport { isCSSVariableName } from '../../dom/utils/is-css-variable.mjs';\nimport { transformProps } from './transform.mjs';\nimport { getValueAsType } from '../../dom/value-types/get-as-type.mjs';\nimport { numberValueTypes } from '../../dom/value-types/number.mjs';\n\nfunction buildHTMLStyles(state, latestValues, transformTemplate) {\n    const { style, vars, transformOrigin } = state;\n    // Track whether we encounter any transform or transformOrigin values.\n    let hasTransform = false;\n    let hasTransformOrigin = false;\n    /**\n     * Loop over all our latest animated values and decide whether to handle them\n     * as a style or CSS variable.\n     *\n     * Transforms and transform origins are kept separately for further processing.\n     */\n    for (const key in latestValues) {\n        const value = latestValues[key];\n        if (transformProps.has(key)) {\n            // If this is a transform, flag to enable further transform processing\n            hasTransform = true;\n            continue;\n        }\n        else if (isCSSVariableName(key)) {\n            vars[key] = value;\n            continue;\n        }\n        else {\n            // Convert the value to its default value type, ie 0 -> \"0px\"\n            const valueAsType = getValueAsType(value, numberValueTypes[key]);\n            if (key.startsWith(\"origin\")) {\n                // If this is a transform origin, flag and enable further transform-origin processing\n                hasTransformOrigin = true;\n                transformOrigin[key] =\n                    valueAsType;\n            }\n            else {\n                style[key] = valueAsType;\n            }\n        }\n    }\n    if (!latestValues.transform) {\n        if (hasTransform || transformTemplate) {\n            style.transform = buildTransform(latestValues, state.transform, transformTemplate);\n        }\n        else if (style.transform) {\n            /**\n             * If we have previously created a transform but currently don't have any,\n             * reset transform style to none.\n             */\n            style.transform = \"none\";\n        }\n    }\n    /**\n     * Build a transformOrigin style. Uses the same defaults as the browser for\n     * undefined origins.\n     */\n    if (hasTransformOrigin) {\n        const { originX = \"50%\", originY = \"50%\", originZ = 0, } = transformOrigin;\n        style.transformOrigin = `${originX} ${originY} ${originZ}`;\n    }\n}\n\nexport { buildHTMLStyles };\n","import { px } from '../../../value/types/numbers/units.mjs';\n\nfunction calcOrigin(origin, offset, size) {\n    return typeof origin === \"string\"\n        ? origin\n        : px.transform(offset + size * origin);\n}\n/**\n * The SVG transform origin defaults are different to CSS and is less intuitive,\n * so we use the measured dimensions of the SVG to reconcile these.\n */\nfunction calcSVGTransformOrigin(dimensions, originX, originY) {\n    const pxOriginX = calcOrigin(originX, dimensions.x, dimensions.width);\n    const pxOriginY = calcOrigin(originY, dimensions.y, dimensions.height);\n    return `${pxOriginX} ${pxOriginY}`;\n}\n\nexport { calcSVGTransformOrigin };\n","import { px } from '../../../value/types/numbers/units.mjs';\n\nconst dashKeys = {\n    offset: \"stroke-dashoffset\",\n    array: \"stroke-dasharray\",\n};\nconst camelKeys = {\n    offset: \"strokeDashoffset\",\n    array: \"strokeDasharray\",\n};\n/**\n * Build SVG path properties. Uses the path's measured length to convert\n * our custom pathLength, pathSpacing and pathOffset into stroke-dashoffset\n * and stroke-dasharray attributes.\n *\n * This function is mutative to reduce per-frame GC.\n */\nfunction buildSVGPath(attrs, length, spacing = 1, offset = 0, useDashCase = true) {\n    // Normalise path length by setting SVG attribute pathLength to 1\n    attrs.pathLength = 1;\n    // We use dash case when setting attributes directly to the DOM node and camel case\n    // when defining props on a React component.\n    const keys = useDashCase ? dashKeys : camelKeys;\n    // Build the dash offset\n    attrs[keys.offset] = px.transform(-offset);\n    // Build the dash array\n    const pathLength = px.transform(length);\n    const pathSpacing = px.transform(spacing);\n    attrs[keys.array] = `${pathLength} ${pathSpacing}`;\n}\n\nexport { buildSVGPath };\n","import { buildHTMLStyles } from '../../html/utils/build-styles.mjs';\nimport { calcSVGTransformOrigin } from './transform-origin.mjs';\nimport { buildSVGPath } from './path.mjs';\n\n/**\n * Build SVG visual attrbutes, like cx and style.transform\n */\nfunction buildSVGAttrs(state, { attrX, attrY, attrScale, originX, originY, pathLength, pathSpacing = 1, pathOffset = 0, \n// This is object creation, which we try to avoid per-frame.\n...latest }, isSVGTag, transformTemplate) {\n    buildHTMLStyles(state, latest, transformTemplate);\n    /**\n     * For svg tags we just want to make sure viewBox is animatable and treat all the styles\n     * as normal HTML tags.\n     */\n    if (isSVGTag) {\n        if (state.style.viewBox) {\n            state.attrs.viewBox = state.style.viewBox;\n        }\n        return;\n    }\n    state.attrs = state.style;\n    state.style = {};\n    const { attrs, style, dimensions } = state;\n    /**\n     * However, we apply transforms as CSS transforms. So if we detect a transform we take it from attrs\n     * and copy it into style.\n     */\n    if (attrs.transform) {\n        if (dimensions)\n            style.transform = attrs.transform;\n        delete attrs.transform;\n    }\n    // Parse transformOrigin\n    if (dimensions &&\n        (originX !== undefined || originY !== undefined || style.transform)) {\n        style.transformOrigin = calcSVGTransformOrigin(dimensions, originX !== undefined ? originX : 0.5, originY !== undefined ? originY : 0.5);\n    }\n    // Render attrX/attrY/attrScale as attributes\n    if (attrX !== undefined)\n        attrs.x = attrX;\n    if (attrY !== undefined)\n        attrs.y = attrY;\n    if (attrScale !== undefined)\n        attrs.scale = attrScale;\n    // Build SVG path if one has been defined\n    if (pathLength !== undefined) {\n        buildSVGPath(attrs, pathLength, pathSpacing, pathOffset, false);\n    }\n}\n\nexport { buildSVGAttrs };\n","const isSVGTag = (tag) => typeof tag === \"string\" && tag.toLowerCase() === \"svg\";\n\nexport { isSVGTag };\n","import { renderSVG } from './utils/render.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { makeUseVisualState } from '../../motion/utils/use-visual-state.mjs';\nimport { createSvgRenderState } from './utils/create-render-state.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\nconst svgMotionConfig = {\n    useVisualState: makeUseVisualState({\n        scrapeMotionValuesFromProps: scrapeMotionValuesFromProps,\n        createRenderState: createSvgRenderState,\n        onMount: (props, instance, { renderState, latestValues }) => {\n            frame.read(() => {\n                try {\n                    renderState.dimensions =\n                        typeof instance.getBBox ===\n                            \"function\"\n                            ? instance.getBBox()\n                            : instance.getBoundingClientRect();\n                }\n                catch (e) {\n                    // Most likely trying to measure an unrendered element under Firefox\n                    renderState.dimensions = {\n                        x: 0,\n                        y: 0,\n                        width: 0,\n                        height: 0,\n                    };\n                }\n            });\n            frame.render(() => {\n                buildSVGAttrs(renderState, latestValues, isSVGTag(instance.tagName), props.transformTemplate);\n                renderSVG(instance, renderState);\n            });\n        },\n    }),\n};\n\nexport { svgMotionConfig };\n","import { makeUseVisualState } from '../../motion/utils/use-visual-state.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { createHtmlRenderState } from './utils/create-render-state.mjs';\n\nconst htmlMotionConfig = {\n    useVisualState: makeUseVisualState({\n        scrapeMotionValuesFromProps,\n        createRenderState: createHtmlRenderState,\n    }),\n};\n\nexport { htmlMotionConfig };\n","import { useMemo } from 'react';\nimport { isForcedMotionValue } from '../../motion/utils/is-forced-motion-value.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\nimport { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { createHtmlRenderState } from './utils/create-render-state.mjs';\n\nfunction copyRawValuesOnly(target, source, props) {\n    for (const key in source) {\n        if (!isMotionValue(source[key]) && !isForcedMotionValue(key, props)) {\n            target[key] = source[key];\n        }\n    }\n}\nfunction useInitialMotionValues({ transformTemplate }, visualState) {\n    return useMemo(() => {\n        const state = createHtmlRenderState();\n        buildHTMLStyles(state, visualState, transformTemplate);\n        return Object.assign({}, state.vars, state.style);\n    }, [visualState]);\n}\nfunction useStyle(props, visualState) {\n    const styleProp = props.style || {};\n    const style = {};\n    /**\n     * Copy non-Motion Values straight into style\n     */\n    copyRawValuesOnly(style, styleProp, props);\n    Object.assign(style, useInitialMotionValues(props, visualState));\n    return style;\n}\nfunction useHTMLProps(props, visualState) {\n    // The `any` isn't ideal but it is the type of createElement props argument\n    const htmlProps = {};\n    const style = useStyle(props, visualState);\n    if (props.drag && props.dragListener !== false) {\n        // Disable the ghost element when a user drags\n        htmlProps.draggable = false;\n        // Disable text selection\n        style.userSelect =\n            style.WebkitUserSelect =\n                style.WebkitTouchCallout =\n                    \"none\";\n        // Disable scrolling on the draggable direction\n        style.touchAction =\n            props.drag === true\n                ? \"none\"\n                : `pan-${props.drag === \"x\" ? \"y\" : \"x\"}`;\n    }\n    if (props.tabIndex === undefined &&\n        (props.onTap || props.onTapStart || props.whileTap)) {\n        htmlProps.tabIndex = 0;\n    }\n    htmlProps.style = style;\n    return htmlProps;\n}\n\nexport { copyRawValuesOnly, useHTMLProps };\n","/**\n * A list of all valid MotionProps.\n *\n * @privateRemarks\n * This doesn't throw if a `MotionProp` name is missing - it should.\n */\nconst validMotionProps = new Set([\n    \"animate\",\n    \"exit\",\n    \"variants\",\n    \"initial\",\n    \"style\",\n    \"values\",\n    \"variants\",\n    \"transition\",\n    \"transformTemplate\",\n    \"custom\",\n    \"inherit\",\n    \"onBeforeLayoutMeasure\",\n    \"onAnimationStart\",\n    \"onAnimationComplete\",\n    \"onUpdate\",\n    \"onDragStart\",\n    \"onDrag\",\n    \"onDragEnd\",\n    \"onMeasureDragConstraints\",\n    \"onDirectionLock\",\n    \"onDragTransitionEnd\",\n    \"_dragX\",\n    \"_dragY\",\n    \"onHoverStart\",\n    \"onHoverEnd\",\n    \"onViewportEnter\",\n    \"onViewportLeave\",\n    \"globalTapTarget\",\n    \"ignoreStrict\",\n    \"viewport\",\n]);\n/**\n * Check whether a prop name is a valid `MotionProp` key.\n *\n * @param key - Name of the property to check\n * @returns `true` is key is a valid `MotionProp`.\n *\n * @public\n */\nfunction isValidMotionProp(key) {\n    return (key.startsWith(\"while\") ||\n        (key.startsWith(\"drag\") && key !== \"draggable\") ||\n        key.startsWith(\"layout\") ||\n        key.startsWith(\"onTap\") ||\n        key.startsWith(\"onPan\") ||\n        key.startsWith(\"onLayout\") ||\n        validMotionProps.has(key));\n}\n\nexport { isValidMotionProp };\n","import { isValidMotionProp } from '../../../motion/utils/valid-prop.mjs';\n\nlet shouldForward = (key) => !isValidMotionProp(key);\nfunction loadExternalIsValidProp(isValidProp) {\n    if (!isValidProp)\n        return;\n    // Explicitly filter our events\n    shouldForward = (key) => key.startsWith(\"on\") ? !isValidMotionProp(key) : isValidProp(key);\n}\n/**\n * Emotion and Styled Components both allow users to pass through arbitrary props to their components\n * to dynamically generate CSS. They both use the `@emotion/is-prop-valid` package to determine which\n * of these should be passed to the underlying DOM node.\n *\n * However, when styling a Motion component `styled(motion.div)`, both packages pass through *all* props\n * as it's seen as an arbitrary component rather than a DOM node. Motion only allows arbitrary props\n * passed through the `custom` prop so it doesn't *need* the payload or computational overhead of\n * `@emotion/is-prop-valid`, however to fix this problem we need to use it.\n *\n * By making it an optionalDependency we can offer this functionality only in the situations where it's\n * actually required.\n */\ntry {\n    /**\n     * We attempt to import this package but require won't be defined in esm environments, in that case\n     * isPropValid will have to be provided via `MotionContext`. In a 6.0.0 this should probably be removed\n     * in favour of explicit injection.\n     */\n    loadExternalIsValidProp(require(\"@emotion/is-prop-valid\").default);\n}\ncatch (_a) {\n    // We don't need to actually do anything here - the fallback is the existing `isPropValid`.\n}\nfunction filterProps(props, isDom, forwardMotionProps) {\n    const filteredProps = {};\n    for (const key in props) {\n        /**\n         * values is considered a valid prop by Emotion, so if it's present\n         * this will be rendered out to the DOM unless explicitly filtered.\n         *\n         * We check the type as it could be used with the `feColorMatrix`\n         * element, which we support.\n         */\n        if (key === \"values\" && typeof props.values === \"object\")\n            continue;\n        if (shouldForward(key) ||\n            (forwardMotionProps === true && isValidMotionProp(key)) ||\n            (!isDom && !isValidMotionProp(key)) ||\n            // If trying to use native HTML drag events, forward drag listeners\n            (props[\"draggable\"] &&\n                key.startsWith(\"onDrag\"))) {\n            filteredProps[key] =\n                props[key];\n        }\n    }\n    return filteredProps;\n}\n\nexport { filterProps, loadExternalIsValidProp };\n","import { useMemo } from 'react';\nimport { copyRawValuesOnly } from '../html/use-props.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { createSvgRenderState } from './utils/create-render-state.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\n\nfunction useSVGProps(props, visualState, _isStatic, Component) {\n    const visualProps = useMemo(() => {\n        const state = createSvgRenderState();\n        buildSVGAttrs(state, visualState, isSVGTag(Component), props.transformTemplate);\n        return {\n            ...state.attrs,\n            style: { ...state.style },\n        };\n    }, [visualState]);\n    if (props.style) {\n        const rawStyles = {};\n        copyRawValuesOnly(rawStyles, props.style, props);\n        visualProps.style = { ...rawStyles, ...visualProps.style };\n    }\n    return visualProps;\n}\n\nexport { useSVGProps };\n","import { Fragment, useMemo, createElement } from 'react';\nimport { useHTMLProps } from '../html/use-props.mjs';\nimport { filterProps } from './utils/filter-props.mjs';\nimport { isSVGComponent } from './utils/is-svg-component.mjs';\nimport { useSVGProps } from '../svg/use-props.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction createUseRender(forwardMotionProps = false) {\n    const useRender = (Component, props, ref, { latestValues }, isStatic) => {\n        const useVisualProps = isSVGComponent(Component)\n            ? useSVGProps\n            : useHTMLProps;\n        const visualProps = useVisualProps(props, latestValues, isStatic, Component);\n        const filteredProps = filterProps(props, typeof Component === \"string\", forwardMotionProps);\n        const elementProps = Component !== Fragment\n            ? { ...filteredProps, ...visualProps, ref }\n            : {};\n        /**\n         * If component has been handed a motion value as its child,\n         * memoise its initial value and render that. Subsequent updates\n         * will be handled by the onChange handler\n         */\n        const { children } = props;\n        const renderedChildren = useMemo(() => (isMotionValue(children) ? children.get() : children), [children]);\n        return createElement(Component, {\n            ...elementProps,\n            children: renderedChildren,\n        });\n    };\n    return useRender;\n}\n\nexport { createUseRender };\n","import { createRendererMotionComponent } from '../../motion/index.mjs';\nimport { isSVGComponent } from '../dom/utils/is-svg-component.mjs';\nimport { svgMotionConfig } from '../svg/config-motion.mjs';\nimport { htmlMotionConfig } from '../html/config-motion.mjs';\nimport { createUseRender } from '../dom/use-render.mjs';\n\nfunction createMotionComponentFactory(preloadedFeatures, createVisualElement) {\n    return function createMotionComponent(Component, { forwardMotionProps } = { forwardMotionProps: false }) {\n        const baseConfig = isSVGComponent(Component)\n            ? svgMotionConfig\n            : htmlMotionConfig;\n        const config = {\n            ...baseConfig,\n            preloadedFeatures,\n            useRender: createUseRender(forwardMotionProps),\n            createVisualElement,\n            Component,\n        };\n        return createRendererMotionComponent(config);\n    };\n}\n\nexport { createMotionComponentFactory };\n","// Does this device prefer reduced motion? Returns `null` server-side.\nconst prefersReducedMotion = { current: null };\nconst hasReducedMotionListener = { current: false };\n\nexport { hasReducedMotionListener, prefersReducedMotion };\n","import { isBrowser } from '../is-browser.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from './state.mjs';\n\nfunction initPrefersReducedMotion() {\n    hasReducedMotionListener.current = true;\n    if (!isBrowser)\n        return;\n    if (window.matchMedia) {\n        const motionMediaQuery = window.matchMedia(\"(prefers-reduced-motion)\");\n        const setReducedMotionPreferences = () => (prefersReducedMotion.current = motionMediaQuery.matches);\n        motionMediaQuery.addListener(setReducedMotionPreferences);\n        setReducedMotionPreferences();\n    }\n    else {\n        prefersReducedMotion.current = false;\n    }\n}\n\nexport { initPrefersReducedMotion };\n","import { warnOnce } from '../../utils/warn-once.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction updateMotionValuesFromProps(element, next, prev) {\n    for (const key in next) {\n        const nextValue = next[key];\n        const prevValue = prev[key];\n        if (isMotionValue(nextValue)) {\n            /**\n             * If this is a motion value found in props or style, we want to add it\n             * to our visual element's motion value map.\n             */\n            element.addValue(key, nextValue);\n            /**\n             * Check the version of the incoming motion value with this version\n             * and warn against mismatches.\n             */\n            if (process.env.NODE_ENV === \"development\") {\n                warnOnce(nextValue.version === \"11.14.1\", `Attempting to mix Motion versions ${nextValue.version} with 11.14.1 may not work as expected.`);\n            }\n        }\n        else if (isMotionValue(prevValue)) {\n            /**\n             * If we're swapping from a motion value to a static value,\n             * create a new motion value from that\n             */\n            element.addValue(key, motionValue(nextValue, { owner: element }));\n        }\n        else if (prevValue !== nextValue) {\n            /**\n             * If this is a flat value that has changed, update the motion value\n             * or create one if it doesn't exist. We only want to do this if we're\n             * not handling the value with our animation state.\n             */\n            if (element.hasValue(key)) {\n                const existingValue = element.getValue(key);\n                if (existingValue.liveStyle === true) {\n                    existingValue.jump(nextValue);\n                }\n                else if (!existingValue.hasAnimated) {\n                    existingValue.set(nextValue);\n                }\n            }\n            else {\n                const latestValue = element.getStaticValue(key);\n                element.addValue(key, motionValue(latestValue !== undefined ? latestValue : nextValue, { owner: element }));\n            }\n        }\n    }\n    // Handle removed values\n    for (const key in prev) {\n        if (next[key] === undefined)\n            element.removeValue(key);\n    }\n    return next;\n}\n\nexport { updateMotionValuesFromProps };\n","const visualElementStore = new WeakMap();\n\nexport { visualElementStore };\n","import { color } from '../../../value/types/color/index.mjs';\nimport { complex } from '../../../value/types/complex/index.mjs';\nimport { dimensionValueTypes } from './dimensions.mjs';\nimport { testValueType } from './test.mjs';\n\n/**\n * A list of all ValueTypes\n */\nconst valueTypes = [...dimensionValueTypes, color, complex];\n/**\n * Tests a value against the list of ValueTypes\n */\nconst findValueType = (v) => valueTypes.find(testValueType(v));\n\nexport { findValueType };\n","import { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { transformProps } from './html/utils/transform.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { visualElementStore } from './store.mjs';\nimport { KeyframeResolver } from './utils/KeyframesResolver.mjs';\nimport { isNumericalString } from '../utils/is-numerical-string.mjs';\nimport { isZeroValueString } from '../utils/is-zero-value-string.mjs';\nimport { findValueType } from './dom/value-types/find.mjs';\nimport { complex } from '../value/types/complex/index.mjs';\nimport { getAnimatableNone } from './dom/value-types/animatable-none.mjs';\nimport { createBox } from '../projection/geometry/models.mjs';\nimport { time } from '../frameloop/sync-time.mjs';\nimport { frame, cancelFrame } from '../frameloop/frame.mjs';\n\nconst propEventHandlers = [\n    \"AnimationStart\",\n    \"AnimationComplete\",\n    \"Update\",\n    \"BeforeLayoutMeasure\",\n    \"LayoutMeasure\",\n    \"LayoutAnimationStart\",\n    \"LayoutAnimationComplete\",\n];\n/**\n * A VisualElement is an imperative abstraction around UI elements such as\n * HTMLElement, SVGElement, Three.Object3D etc.\n */\nclass VisualElement {\n    /**\n     * This method takes React props and returns found MotionValues. For example, HTML\n     * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\n     *\n     * This isn't an abstract method as it needs calling in the constructor, but it is\n     * intended to be one.\n     */\n    scrapeMotionValuesFromProps(_props, _prevProps, _visualElement) {\n        return {};\n    }\n    constructor({ parent, props, presenceContext, reducedMotionConfig, blockInitialAnimation, visualState, }, options = {}) {\n        /**\n         * A reference to the current underlying Instance, e.g. a HTMLElement\n         * or Three.Mesh etc.\n         */\n        this.current = null;\n        /**\n         * A set containing references to this VisualElement's children.\n         */\n        this.children = new Set();\n        /**\n         * Determine what role this visual element should take in the variant tree.\n         */\n        this.isVariantNode = false;\n        this.isControllingVariants = false;\n        /**\n         * Decides whether this VisualElement should animate in reduced motion\n         * mode.\n         *\n         * TODO: This is currently set on every individual VisualElement but feels\n         * like it could be set globally.\n         */\n        this.shouldReduceMotion = null;\n        /**\n         * A map of all motion values attached to this visual element. Motion\n         * values are source of truth for any given animated value. A motion\n         * value might be provided externally by the component via props.\n         */\n        this.values = new Map();\n        this.KeyframeResolver = KeyframeResolver;\n        /**\n         * Cleanup functions for active features (hover/tap/exit etc)\n         */\n        this.features = {};\n        /**\n         * A map of every subscription that binds the provided or generated\n         * motion values onChange listeners to this visual element.\n         */\n        this.valueSubscriptions = new Map();\n        /**\n         * A reference to the previously-provided motion values as returned\n         * from scrapeMotionValuesFromProps. We use the keys in here to determine\n         * if any motion values need to be removed after props are updated.\n         */\n        this.prevMotionValues = {};\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        /**\n         * An object containing an unsubscribe function for each prop event subscription.\n         * For example, every \"Update\" event can have multiple subscribers via\n         * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\n         */\n        this.propEventSubscriptions = {};\n        this.notifyUpdate = () => this.notify(\"Update\", this.latestValues);\n        this.render = () => {\n            if (!this.current)\n                return;\n            this.triggerBuild();\n            this.renderInstance(this.current, this.renderState, this.props.style, this.projection);\n        };\n        this.renderScheduledAt = 0.0;\n        this.scheduleRender = () => {\n            const now = time.now();\n            if (this.renderScheduledAt < now) {\n                this.renderScheduledAt = now;\n                frame.render(this.render, false, true);\n            }\n        };\n        const { latestValues, renderState } = visualState;\n        this.latestValues = latestValues;\n        this.baseTarget = { ...latestValues };\n        this.initialValues = props.initial ? { ...latestValues } : {};\n        this.renderState = renderState;\n        this.parent = parent;\n        this.props = props;\n        this.presenceContext = presenceContext;\n        this.depth = parent ? parent.depth + 1 : 0;\n        this.reducedMotionConfig = reducedMotionConfig;\n        this.options = options;\n        this.blockInitialAnimation = Boolean(blockInitialAnimation);\n        this.isControllingVariants = isControllingVariants(props);\n        this.isVariantNode = isVariantNode(props);\n        if (this.isVariantNode) {\n            this.variantChildren = new Set();\n        }\n        this.manuallyAnimateOnMount = Boolean(parent && parent.current);\n        /**\n         * Any motion values that are provided to the element when created\n         * aren't yet bound to the element, as this would technically be impure.\n         * However, we iterate through the motion values and set them to the\n         * initial values for this component.\n         *\n         * TODO: This is impure and we should look at changing this to run on mount.\n         * Doing so will break some tests but this isn't necessarily a breaking change,\n         * more a reflection of the test.\n         */\n        const { willChange, ...initialMotionValues } = this.scrapeMotionValuesFromProps(props, {}, this);\n        for (const key in initialMotionValues) {\n            const value = initialMotionValues[key];\n            if (latestValues[key] !== undefined && isMotionValue(value)) {\n                value.set(latestValues[key], false);\n            }\n        }\n    }\n    mount(instance) {\n        this.current = instance;\n        visualElementStore.set(instance, this);\n        if (this.projection && !this.projection.instance) {\n            this.projection.mount(instance);\n        }\n        if (this.parent && this.isVariantNode && !this.isControllingVariants) {\n            this.removeFromVariantTree = this.parent.addVariantChild(this);\n        }\n        this.values.forEach((value, key) => this.bindToMotionValue(key, value));\n        if (!hasReducedMotionListener.current) {\n            initPrefersReducedMotion();\n        }\n        this.shouldReduceMotion =\n            this.reducedMotionConfig === \"never\"\n                ? false\n                : this.reducedMotionConfig === \"always\"\n                    ? true\n                    : prefersReducedMotion.current;\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(this.shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n        }\n        if (this.parent)\n            this.parent.children.add(this);\n        this.update(this.props, this.presenceContext);\n    }\n    unmount() {\n        visualElementStore.delete(this.current);\n        this.projection && this.projection.unmount();\n        cancelFrame(this.notifyUpdate);\n        cancelFrame(this.render);\n        this.valueSubscriptions.forEach((remove) => remove());\n        this.valueSubscriptions.clear();\n        this.removeFromVariantTree && this.removeFromVariantTree();\n        this.parent && this.parent.children.delete(this);\n        for (const key in this.events) {\n            this.events[key].clear();\n        }\n        for (const key in this.features) {\n            const feature = this.features[key];\n            if (feature) {\n                feature.unmount();\n                feature.isMounted = false;\n            }\n        }\n        this.current = null;\n    }\n    bindToMotionValue(key, value) {\n        if (this.valueSubscriptions.has(key)) {\n            this.valueSubscriptions.get(key)();\n        }\n        const valueIsTransform = transformProps.has(key);\n        const removeOnChange = value.on(\"change\", (latestValue) => {\n            this.latestValues[key] = latestValue;\n            this.props.onUpdate && frame.preRender(this.notifyUpdate);\n            if (valueIsTransform && this.projection) {\n                this.projection.isTransformDirty = true;\n            }\n        });\n        const removeOnRenderRequest = value.on(\"renderRequest\", this.scheduleRender);\n        let removeSyncCheck;\n        if (window.MotionCheckAppearSync) {\n            removeSyncCheck = window.MotionCheckAppearSync(this, key, value);\n        }\n        this.valueSubscriptions.set(key, () => {\n            removeOnChange();\n            removeOnRenderRequest();\n            if (removeSyncCheck)\n                removeSyncCheck();\n            if (value.owner)\n                value.stop();\n        });\n    }\n    sortNodePosition(other) {\n        /**\n         * If these nodes aren't even of the same type we can't compare their depth.\n         */\n        if (!this.current ||\n            !this.sortInstanceNodePosition ||\n            this.type !== other.type) {\n            return 0;\n        }\n        return this.sortInstanceNodePosition(this.current, other.current);\n    }\n    updateFeatures() {\n        let key = \"animation\";\n        for (key in featureDefinitions) {\n            const featureDefinition = featureDefinitions[key];\n            if (!featureDefinition)\n                continue;\n            const { isEnabled, Feature: FeatureConstructor } = featureDefinition;\n            /**\n             * If this feature is enabled but not active, make a new instance.\n             */\n            if (!this.features[key] &&\n                FeatureConstructor &&\n                isEnabled(this.props)) {\n                this.features[key] = new FeatureConstructor(this);\n            }\n            /**\n             * If we have a feature, mount or update it.\n             */\n            if (this.features[key]) {\n                const feature = this.features[key];\n                if (feature.isMounted) {\n                    feature.update();\n                }\n                else {\n                    feature.mount();\n                    feature.isMounted = true;\n                }\n            }\n        }\n    }\n    triggerBuild() {\n        this.build(this.renderState, this.latestValues, this.props);\n    }\n    /**\n     * Measure the current viewport box with or without transforms.\n     * Only measures axis-aligned boxes, rotate and skew must be manually\n     * removed with a re-render to work.\n     */\n    measureViewportBox() {\n        return this.current\n            ? this.measureInstanceViewportBox(this.current, this.props)\n            : createBox();\n    }\n    getStaticValue(key) {\n        return this.latestValues[key];\n    }\n    setStaticValue(key, value) {\n        this.latestValues[key] = value;\n    }\n    /**\n     * Update the provided props. Ensure any newly-added motion values are\n     * added to our map, old ones removed, and listeners updated.\n     */\n    update(props, presenceContext) {\n        if (props.transformTemplate || this.props.transformTemplate) {\n            this.scheduleRender();\n        }\n        this.prevProps = this.props;\n        this.props = props;\n        this.prevPresenceContext = this.presenceContext;\n        this.presenceContext = presenceContext;\n        /**\n         * Update prop event handlers ie onAnimationStart, onAnimationComplete\n         */\n        for (let i = 0; i < propEventHandlers.length; i++) {\n            const key = propEventHandlers[i];\n            if (this.propEventSubscriptions[key]) {\n                this.propEventSubscriptions[key]();\n                delete this.propEventSubscriptions[key];\n            }\n            const listenerName = (\"on\" + key);\n            const listener = props[listenerName];\n            if (listener) {\n                this.propEventSubscriptions[key] = this.on(key, listener);\n            }\n        }\n        this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps, this), this.prevMotionValues);\n        if (this.handleChildMotionValue) {\n            this.handleChildMotionValue();\n        }\n    }\n    getProps() {\n        return this.props;\n    }\n    /**\n     * Returns the variant definition with a given name.\n     */\n    getVariant(name) {\n        return this.props.variants ? this.props.variants[name] : undefined;\n    }\n    /**\n     * Returns the defined default transition on this component.\n     */\n    getDefaultTransition() {\n        return this.props.transition;\n    }\n    getTransformPagePoint() {\n        return this.props.transformPagePoint;\n    }\n    getClosestVariantNode() {\n        return this.isVariantNode\n            ? this\n            : this.parent\n                ? this.parent.getClosestVariantNode()\n                : undefined;\n    }\n    /**\n     * Add a child visual element to our set of children.\n     */\n    addVariantChild(child) {\n        const closestVariantNode = this.getClosestVariantNode();\n        if (closestVariantNode) {\n            closestVariantNode.variantChildren &&\n                closestVariantNode.variantChildren.add(child);\n            return () => closestVariantNode.variantChildren.delete(child);\n        }\n    }\n    /**\n     * Add a motion value and bind it to this visual element.\n     */\n    addValue(key, value) {\n        // Remove existing value if it exists\n        const existingValue = this.values.get(key);\n        if (value !== existingValue) {\n            if (existingValue)\n                this.removeValue(key);\n            this.bindToMotionValue(key, value);\n            this.values.set(key, value);\n            this.latestValues[key] = value.get();\n        }\n    }\n    /**\n     * Remove a motion value and unbind any active subscriptions.\n     */\n    removeValue(key) {\n        this.values.delete(key);\n        const unsubscribe = this.valueSubscriptions.get(key);\n        if (unsubscribe) {\n            unsubscribe();\n            this.valueSubscriptions.delete(key);\n        }\n        delete this.latestValues[key];\n        this.removeValueFromRenderState(key, this.renderState);\n    }\n    /**\n     * Check whether we have a motion value for this key\n     */\n    hasValue(key) {\n        return this.values.has(key);\n    }\n    getValue(key, defaultValue) {\n        if (this.props.values && this.props.values[key]) {\n            return this.props.values[key];\n        }\n        let value = this.values.get(key);\n        if (value === undefined && defaultValue !== undefined) {\n            value = motionValue(defaultValue === null ? undefined : defaultValue, { owner: this });\n            this.addValue(key, value);\n        }\n        return value;\n    }\n    /**\n     * If we're trying to animate to a previously unencountered value,\n     * we need to check for it in our state and as a last resort read it\n     * directly from the instance (which might have performance implications).\n     */\n    readValue(key, target) {\n        var _a;\n        let value = this.latestValues[key] !== undefined || !this.current\n            ? this.latestValues[key]\n            : (_a = this.getBaseTargetFromProps(this.props, key)) !== null && _a !== void 0 ? _a : this.readValueFromInstance(this.current, key, this.options);\n        if (value !== undefined && value !== null) {\n            if (typeof value === \"string\" &&\n                (isNumericalString(value) || isZeroValueString(value))) {\n                // If this is a number read as a string, ie \"0\" or \"200\", convert it to a number\n                value = parseFloat(value);\n            }\n            else if (!findValueType(value) && complex.test(target)) {\n                value = getAnimatableNone(key, target);\n            }\n            this.setBaseTarget(key, isMotionValue(value) ? value.get() : value);\n        }\n        return isMotionValue(value) ? value.get() : value;\n    }\n    /**\n     * Set the base target to later animate back to. This is currently\n     * only hydrated on creation and when we first read a value.\n     */\n    setBaseTarget(key, value) {\n        this.baseTarget[key] = value;\n    }\n    /**\n     * Find the base target for a value thats been removed from all animation\n     * props.\n     */\n    getBaseTarget(key) {\n        var _a;\n        const { initial } = this.props;\n        let valueFromInitial;\n        if (typeof initial === \"string\" || typeof initial === \"object\") {\n            const variant = resolveVariantFromProps(this.props, initial, (_a = this.presenceContext) === null || _a === void 0 ? void 0 : _a.custom);\n            if (variant) {\n                valueFromInitial = variant[key];\n            }\n        }\n        /**\n         * If this value still exists in the current initial variant, read that.\n         */\n        if (initial && valueFromInitial !== undefined) {\n            return valueFromInitial;\n        }\n        /**\n         * Alternatively, if this VisualElement config has defined a getBaseTarget\n         * so we can read the value from an alternative source, try that.\n         */\n        const target = this.getBaseTargetFromProps(this.props, key);\n        if (target !== undefined && !isMotionValue(target))\n            return target;\n        /**\n         * If the value was initially defined on initial, but it doesn't any more,\n         * return undefined. Otherwise return the value as initially read from the DOM.\n         */\n        return this.initialValues[key] !== undefined &&\n            valueFromInitial === undefined\n            ? undefined\n            : this.baseTarget[key];\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        return this.events[eventName].add(callback);\n    }\n    notify(eventName, ...args) {\n        if (this.events[eventName]) {\n            this.events[eventName].notify(...args);\n        }\n    }\n}\n\nexport { VisualElement };\n","import { VisualElement } from '../VisualElement.mjs';\nimport { DOMKeyframesResolver } from './DOMKeyframesResolver.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nclass DOMVisualElement extends VisualElement {\n    constructor() {\n        super(...arguments);\n        this.KeyframeResolver = DOMKeyframesResolver;\n    }\n    sortInstanceNodePosition(a, b) {\n        /**\n         * compareDocumentPosition returns a bitmask, by using the bitwise &\n         * we're returning true if 2 in that bitmask is set to true. 2 is set\n         * to true if b preceeds a.\n         */\n        return a.compareDocumentPosition(b) & 2 ? 1 : -1;\n    }\n    getBaseTargetFromProps(props, key) {\n        return props.style\n            ? props.style[key]\n            : undefined;\n    }\n    removeValueFromRenderState(key, { vars, style }) {\n        delete vars[key];\n        delete style[key];\n    }\n    handleChildMotionValue() {\n        if (this.childSubscription) {\n            this.childSubscription();\n            delete this.childSubscription;\n        }\n        const { children } = this.props;\n        if (isMotionValue(children)) {\n            this.childSubscription = children.on(\"change\", (latest) => {\n                if (this.current) {\n                    this.current.textContent = `${latest}`;\n                }\n            });\n        }\n    }\n}\n\nexport { DOMVisualElement };\n","import { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { isCSSVariableName } from '../dom/utils/is-css-variable.mjs';\nimport { transformProps } from './utils/transform.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { renderHTML } from './utils/render.mjs';\nimport { getDefaultValueType } from '../dom/value-types/defaults.mjs';\nimport { measureViewportBox } from '../../projection/utils/measure.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\n\nfunction getComputedStyle(element) {\n    return window.getComputedStyle(element);\n}\nclass HTMLVisualElement extends DOMVisualElement {\n    constructor() {\n        super(...arguments);\n        this.type = \"html\";\n        this.renderInstance = renderHTML;\n    }\n    readValueFromInstance(instance, key) {\n        if (transformProps.has(key)) {\n            const defaultType = getDefaultValueType(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        }\n        else {\n            const computedStyle = getComputedStyle(instance);\n            const value = (isCSSVariableName(key)\n                ? computedStyle.getPropertyValue(key)\n                : computedStyle[key]) || 0;\n            return typeof value === \"string\" ? value.trim() : value;\n        }\n    }\n    measureInstanceViewportBox(instance, { transformPagePoint }) {\n        return measureViewportBox(instance, transformPagePoint);\n    }\n    build(renderState, latestValues, props) {\n        buildHTMLStyles(renderState, latestValues, props.transformTemplate);\n    }\n    scrapeMotionValuesFromProps(props, prevProps, visualElement) {\n        return scrapeMotionValuesFromProps(props, prevProps, visualElement);\n    }\n}\n\nexport { HTMLVisualElement, getComputedStyle };\n","import { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { camelToDash } from '../dom/utils/camel-to-dash.mjs';\nimport { camelCaseAttributes } from './utils/camel-case-attrs.mjs';\nimport { transformProps } from '../html/utils/transform.mjs';\nimport { renderSVG } from './utils/render.mjs';\nimport { getDefaultValueType } from '../dom/value-types/defaults.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\n\nclass SVGVisualElement extends DOMVisualElement {\n    constructor() {\n        super(...arguments);\n        this.type = \"svg\";\n        this.isSVGTag = false;\n        this.measureInstanceViewportBox = createBox;\n    }\n    getBaseTargetFromProps(props, key) {\n        return props[key];\n    }\n    readValueFromInstance(instance, key) {\n        if (transformProps.has(key)) {\n            const defaultType = getDefaultValueType(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        }\n        key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;\n        return instance.getAttribute(key);\n    }\n    scrapeMotionValuesFromProps(props, prevProps, visualElement) {\n        return scrapeMotionValuesFromProps(props, prevProps, visualElement);\n    }\n    build(renderState, latestValues, props) {\n        buildSVGAttrs(renderState, latestValues, this.isSVGTag, props.transformTemplate);\n    }\n    renderInstance(instance, renderState, styleProp, projection) {\n        renderSVG(instance, renderState, styleProp, projection);\n    }\n    mount(instance) {\n        this.isSVGTag = isSVGTag(instance.tagName);\n        super.mount(instance);\n    }\n}\n\nexport { SVGVisualElement };\n","import { Fragment } from 'react';\nimport { HTMLVisualElement } from '../html/HTMLVisualElement.mjs';\nimport { SVGVisualElement } from '../svg/SVGVisualElement.mjs';\nimport { isSVGComponent } from './utils/is-svg-component.mjs';\n\nconst createDomVisualElement = (Component, options) => {\n    return isSVGComponent(Component)\n        ? new SVGVisualElement(options)\n        : new HTMLVisualElement(options, {\n            allowProjection: Component !== Fragment,\n        });\n};\n\nexport { createDomVisualElement };\n","import { animations } from '../../../motion/features/animations.mjs';\nimport { drag } from '../../../motion/features/drag.mjs';\nimport { gestureAnimations } from '../../../motion/features/gestures.mjs';\nimport { layout } from '../../../motion/features/layout.mjs';\nimport { createMotionComponentFactory } from '../create-factory.mjs';\nimport { createDomVisualElement } from '../../dom/create-visual-element.mjs';\n\nconst createMotionComponent = /*@__PURE__*/ createMotionComponentFactory({\n    ...animations,\n    ...gestureAnimations,\n    ...drag,\n    ...layout,\n}, createDomVisualElement);\n\nexport { createMotionComponent };\n","import { createDOMMotionComponentProxy } from '../create-proxy.mjs';\nimport { createMotionComponent } from './create.mjs';\n\nconst motion = /*@__PURE__*/ createDOMMotionComponentProxy(createMotionComponent);\n\nexport { motion };\n","const isBrowser = typeof window !== \"undefined\";\n\nexport { isBrowser };\n","import { useRef } from 'react';\n\n/**\n * Creates a constant value over the lifecycle of a component.\n *\n * Even if `useMemo` is provided an empty array as its final argument, it doesn't offer\n * a guarantee that it won't re-run for performance reasons later on. By using `useConstant`\n * you can ensure that initialisers don't execute twice or more.\n */\nfunction useConstant(init) {\n    const ref = useRef(null);\n    if (ref.current === null) {\n        ref.current = init();\n    }\n    return ref.current;\n}\n\nexport { useConstant };\n","import { useLayoutEffect, useEffect } from 'react';\nimport { isBrowser } from './is-browser.mjs';\n\nconst useIsomorphicLayoutEffect = isBrowser ? useLayoutEffect : useEffect;\n\nexport { useIsomorphicLayoutEffect };\n","import { noop } from './noop.mjs';\n\nlet warning = noop;\nlet invariant = noop;\nif (process.env.NODE_ENV !== \"production\") {\n    warning = (check, message) => {\n        if (!check && typeof console !== \"undefined\") {\n            console.warn(message);\n        }\n    };\n    invariant = (check, message) => {\n        if (!check) {\n            throw new Error(message);\n        }\n    };\n}\n\nexport { invariant, warning };\n","const noop = (any) => any;\n\nexport { noop };\n"],"names":["LayoutGroupContext","createContext","MotionConfigContext","transformPagePoint","p","isStatic","reducedMotion","PresenceContext","now","isAnimationControls","v","start","isKeyframesTarget","Array","isArray","shallowCompare","next","prev","prevLength","length","i","isVariantLabel","getValueState","visualElement","state","values","forEach","value","key","get","getVelocity","resolveVariantFromProps","props","definition","custom","current","velocity","undefined","variants","resolveVariant","getProps","variantPriorityOrder","variantProps","transformPropOrder","transformProps","Set","time_conversion_secondsToMilliseconds","seconds","millisecondsToSeconds","milliseconds","underDampedSpring","type","stiffness","damping","restSpeed","criticallyDampedSpring","target","Math","sqrt","keyframesTransition","duration","ease","getDefaultTransition","valueKey","keyframes","has","startsWith","getValueTransition","transition","MotionGlobalConfig","skipAnimations","useManualTiming","instantAnimationState","isNotNull","getFinalKeyframe","repeat","repeatType","finalKeyframe","resolvedKeyframes","filter","index","isValidProp","preloadedFeatures","createVisualElement","stepsOrder","createRenderBatcher","scheduleNextBatch","allowKeepAlive","runNextFrame","useDefaultElapsed","delta","timestamp","isProcessing","flagRunNextFrame","steps","reduce","acc","createRenderStep","thisFrame","nextFrame","flushNextFrame","toKeepAlive","WeakSet","latestFrameData","triggerCallback","callback","step","schedule","keepAlive","immediate","queue","addToCurrentFrame","add","cancel","delete","process","frameData","clear","read","resolveKeyframes","update","preRender","render","postRender","processBatch","performance","max","min","wake","frame_frame","cancelFrame","frameSteps","requestAnimationFrame","noop","Z","calcBezier","t","a1","a2","cubicBezier","mX1","mY1","mX2","mY2","getTForX","binarySubdivide","x","lowerBound","upperBound","currentX","currentT","abs","aX","mirrorEasing","easing","reverseEasing","backOut","backIn","backInOut","anticipate","pow","circIn","sin","acos","circOut","circInOut","isZeroValueString","test","isNumericalString","checkStringStartsWith","token","isCSSVariableName","startsAsVariableToken","isCSSVariableToken","singleCssVariableRegex","split","trim","splitCSSVariableRegex","clamp","number","parse","parseFloat","transform","alpha","scale","default","createUnitType","endsWith","unit","degrees","percent","px","vh","vw","progressPercentage","positionalKeys","isNumOrPxType","getPosFromMatrix","matrix","pos","getTranslateFromMatrix","pos2","pos3","_bbox","matrix3d","match","transformKeys","nonTranslationalTransformKeys","positionalValues","width","paddingLeft","paddingRight","height","y","paddingTop","paddingBottom","top","left","bottom","right","translateX","translateY","testValueType","dimensionValueTypes","findDimensionValueType","find","toResolve","isScheduled","anyNeedsMeasurement","measureAllKeyframes","resolversToMeasure","from","resolver","needsMeasurement","elementsToMeasure","map","element","transformsToRestore","Map","removedTransforms","removeNonTranslationalTransform","getValue","push","set","measureInitialState","restore","_a","measureEndState","suspendedScrollY","window","scrollTo","complete","readAllKeyframes","readKeyframes","KeyframeResolver","constructor","unresolvedKeyframes","onComplete","name","motionValue","isAsync","isComplete","scheduleResolve","currentValue","valueAsRead","readValue","setFinalKeyframe","renderEndStyles","resume","sanitize","round","floatRegex","singleColorRegex","isColorString","testProp","Boolean","Object","prototype","hasOwnProperty","call","splitColor","aName","bName","cName","a","b","c","clampRgbUnit","rgbUnit","rgba","red","green","blue","alpha$1","hex","r","g","substring","parseInt","hsla","hue","saturation","lightness","color","colorRegex","NUMBER_TOKEN","COLOR_TOKEN","complexRegex","analyseComplexValue","originalValue","toString","indexes","var","types","tokenised","replace","parsedValue","parseComplexValue","createTransformer","source","numSections","output","convertNumbersToZero","complex","_b","isNaN","getAnimatableNone","parsed","transformer","maxDefaults","applyDefaultFilter","slice","defaultValue","functionRegex","functions","join","type_int_int","numberValueTypes","borderWidth","borderTopWidth","borderRightWidth","borderBottomWidth","borderLeftWidth","borderRadius","radius","borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius","maxWidth","maxHeight","padding","margin","marginTop","marginRight","marginBottom","marginLeft","backgroundPositionX","backgroundPositionY","rotate","rotateX","rotateY","rotateZ","scaleX","scaleY","scaleZ","skew","skewX","skewY","distance","translateZ","z","perspective","transformPerspective","opacity","originX","originY","originZ","zIndex","size","fillOpacity","strokeOpacity","numOctaves","defaultValueTypes","backgroundColor","outlineColor","fill","stroke","borderColor","borderTopColor","borderRightColor","borderBottomColor","borderLeftColor","WebkitFilter","getDefaultValueType","animatable_none_getAnimatableNone","defaultValueType","invalidTemplates","DOMKeyframesResolver","keyframe","resolved","getVariableValue","depth","errors","k","fallback","parseCSSVariable","exec","token1","token2","getComputedStyle","getPropertyValue","trimmed","resolveNoneKeyframes","origin","originType","targetType","noneKeyframeIndexes","makeNoneKeyframesAnimatable","animatableTemplate","noneIndex","pageYOffset","measuredOrigin","measureViewportBox","measureKeyframe","jump","finalKeyframeIndex","unsetTransformName","unsetTransformValue","isGenerator","clearTime","time","newTime","queueMicrotask","isAnimatable","BaseAnimation","autoplay","delay","repeatDelay","options","isStopped","hasAttemptedResolve","createdAt","updateFinishedPromise","calcStartTime","resolvedAt","_resolved","onKeyframesResolved","onUpdate","canAnimate","originKeyframe","targetKeyframe","isOriginAnimatable","isTargetAnimatable","K","hasKeyframesChanged","resolveFinishedPromise","resolvedAnimation","initPlayback","onPostResolved","then","resolve","reject","currentFinishedPromise","flatten","Promise","progress","to","toFromDifference","generateLinearEasing","resolution","points","numPoints","calcGeneratorVelocity","resolveValue","frameDuration","prevT","springDefaults","mass","bounce","visualDuration","granular","restDelta","minDuration","maxDuration","minDamping","maxDamping","calcAngularFreq","undampedFreq","dampingRatio","calcGeneratorDuration","generator","done","Infinity","durationKeys","physicsKeys","isSpringType","keys","some","spring","optionsOrVisualDuration","resolveSpring","isResolvedFromDuration","getSpringOptions","springOptions","root","PI","derived","findSpring","envelope","derivative","exponentialDecay","safeMin","exp","e","d","approximateRoot","initialGuess","result","initialVelocity","initialDelta","undampedAngularFreq","isGranularScale","angularFreq","cos","dampedAngularFreq","freqForT","sinh","cosh","calculatedDuration","currentVelocity","isBelowVelocityThreshold","isBelowDisplacementThreshold","inertia","power","timeConstant","bounceDamping","bounceStiffness","modifyTarget","timeReachedBoundary","spring$1","isOutOfBounds","nearestBoundary","amplitude","ideal","calcDelta","calcLatest","applyFriction","latest","checkCatchBoundary","hasUpdatedFrame","easeIn","easeOut","easeInOut","isEasingArray","isBezierDefinition","easingLookup","linear","easingDefinitionToFunction","x1","y1","x2","y2","combineFunctions","pipe","transformers","mixNumber","hueToRgb","q","mixImmediate","mixLinearColor","fromExpo","expo","colorTypes","getColorType","asRGBA","model","hslaToRgba","mixColor","fromRGBA","toRGBA","blended","invisibleValues","complex_mixNumber","getMixer","mixComplex","mixArray","mixObject","numValues","blendValue","template","originStats","targetStats","matchOrder","orderedOrigin","pointers","originIndex","originValue","mix","mixer","keyframeValues","times","easingFunctions","mapTimeToKeyframe","interpolate","input","isClamp","inputLength","reverse","mixers","createMixers","customMixer","mixerFactory","numMixers","interpolator","progressInRange","offset","defaultOffset","arr","fillOffset","remaining","offsetProgress","o","splice","frameloopDriver","passTimestamp","stop","generators","decay","tween","percentToProgress","MainThreadAnimation","holdTime","cancelTime","currentTime","playbackSpeed","pendingPlayState","startTime","teardown","onStop","KeyframeResolver$1","assign","keyframes$1","mapPercentToKeyframes","mirroredGenerator","generatorFactory","resolvedDuration","totalDuration","play","pause","tick","sample","speed","timeWithoutDelay","isInDelayPhase","elapsed","frameGenerator","currentIteration","floor","iterationProgress","isAnimationFinished","finish","driver","newSpeed","hasChanged","onPlay","stopDriver","acceleratedValues","memo","supportsFlags","linearEasing","supportsLinearEasing","memoSupports","supportsFlag","memoized","document","createElement","animate","cubicBezierAsString","supportedWaapiEasing","attachTimeline","animation","timeline","onfinish","supportsWaapi","Element","unsupportedEasingFunctions","AcceleratedAnimation","owner","isWaapiSupportedEasing","every","pregeneratedAnimation","pregenerateKeyframes","sampleAnimation","pregeneratedKeyframes","startWaapiAnimation","valueName","keyframeOptions","mapEasingToNativeEasing","segmentEasing","iterations","direction","pendingTimeline","playbackRate","playState","sampleTime","setWithVelocity","supports","HTMLElement","supportsScrollTimeline","ScrollTimeline","GroupPlaybackControls","animations","runAll","onResolve","onReject","all","catch","getAll","propName","setAll","newValue","subscriptions","methodName","controls","animateMotionValue","isHandoff","valueTransition","isTransitionDefined","when","_delay","delayChildren","staggerChildren","staggerDirection","shouldSkip","isCustomValue","toValue","resolveFinalValueInKeyframes","addUniqueItem","item","indexOf","removeItem","SubscriptionManager","handler","notify","numSubscriptions","getSize","isFloat","collectMotionValues","MotionValue","init","version","canTrackVelocity","events","updateAndNotify","updatedAt","setPrevFrameValue","setCurrent","change","renderRequest","hasAnimated","prevFrameValue","prevUpdatedAt","onChange","subscription","on","eventName","unsubscribe","clearListeners","eventManagers","attach","passiveEffect","stopPassiveEffect","endAnimation","getPrevious","startAnimation","animationStart","animationComplete","clearAnimation","animationCancel","isAnimating","destroy","camelToDash","str","toLowerCase","optimizedAppearDataAttribute","isMotionValue","addValueToWillChange","willChange","animateTarget","targetAndTransition","transitionOverride","transitionEnd","animationTypeState","animationState","getState","latestValues","valueTarget","shouldBlockAnimation","protectedKeys","needsAnimating","shouldBlock","MotionHandoffAnimation","appearId","shouldReduceMotion","setTarget","hasValue","addValue","animateVariant","variant","presenceContext","getAnimation","getChildAnimations","variantChildren","forwardDelay","animateChildren","maxStaggerDuration","generateStaggerDuration","sort","sortByTreeOrder","child","first","last","sortNodePosition","numVariantProps","reversePriorityOrder","numAnimationTypes","createTypeState","isActive","prevResolvedValues","createState","whileInView","whileHover","whileTap","whileDrag","whileFocus","exit","Feature","node","isMounted","AnimationFeature","createAnimationState","animateVisualElement","resolvedDefinition","isInitialRender","buildResolvedTypeValues","animateChanges","changedActiveType","context","getVariantContext","isControllingVariants","parent","initial","prop","removedKeys","encounteredKeys","removedVariantIndex","typeState","propIsVariant","activeDelta","isInherited","manuallyAnimateOnMount","prevProp","variantDidChange","shouldAnimateType","handledRemovedValues","definitionList","resolvedValues","allKeys","markToAnimate","liveStyle","blockInitialAnimation","fallbackAnimation","fallbackTarget","getBaseTarget","shouldAnimate","setActive","setAnimateFunction","makeAnimator","reset","updateAnimationControlsSubscription","unmountControls","subscribe","mount","prevAnimate","prevProps","unmount","id","ExitAnimationFeature","arguments","isPresent","onExitComplete","prevIsPresent","prevPresenceContext","exitAnimation","register","isDragging","setupGesture","elementOrSelector","elements","resolveElements","scope","selectorCache","querySelectorAll","gestureAbortController","AbortController","passive","signal","abort","filterEvents","event","pointerType","isPrimaryPointer","button","isPrimary","isPressing","keyboard_filterEvents","firePointerEvent","dispatchEvent","PointerEvent","bubbles","enableKeyboardPress","focusEvent","eventOptions","currentTarget","handleKeydown","handleKeyup","addEventListener","removeEventListener","focusableElements","isNodeOrChild","parentElement","isValidPressEvent","extractEventInfo","point","pageX","pageY","addPointerInfo","addDomEvent","addPointerEvent","PanSession","handlers","contextWindow","dragSnapToOrigin","startEvent","lastMoveEvent","lastMoveEventInfo","updatePoint","info","getPanInfo","history","isPanStarted","isDistancePastThreshold","distance2D","xDelta","yDelta","onStart","onMove","handlePointerMove","transformPoint","handlePointerUp","end","onEnd","onSessionEnd","resumeAnimation","panInfo","initialInfo","onSessionStart","removeListeners","updateHandlers","subtractPoint","lastDevicePoint","timeDelta","timestampedPoint","lastPoint","isRefObject","ref","calcLength","axis","calcAxisDelta","originPoint","translate","calcBoxDelta","calcRelativeAxis","relative","calcRelativeAxisPosition","layout","calcRelativePosition","calcRelativeAxisConstraints","calcViewportAxisConstraints","layoutAxis","constraintsAxis","resolveAxisElastic","dragElastic","minLabel","maxLabel","resolvePointElastic","label","createAxisDelta","createDelta","createAxis","createBox","eachAxis","convertBoundingBoxToBox","isIdentityScale","hasScale","hasTransform","has2DTranslate","is2DTranslate","applyPointDelta","boxScale","applyAxisDelta","applyBoxDelta","box","translateAxis","transformAxis","axisTranslate","axisScale","axisOrigin","transformBox","instance","transformBoxPoints","topLeft","bottomRight","getBoundingClientRect","getContextWindow","ownerDocument","defaultView","elementDragControls","WeakMap","VisualElementDragControls","openDragLock","currentDirection","constraints","hasMutatedConstraints","elastic","originEvent","snapToCursor","panSession","pauseAnimation","stopAnimation","drag","dragPropagation","onDragStart","resolveConstraints","projection","isAnimationBlocked","getAxisMotionValue","measuredAxis","layoutBox","dragDirectionLock","onDirectionLock","onDrag","getCurrentDirection","lockThreshold","updateAxis","getAnimationState","getTransformPagePoint","onDragEnd","_point","shouldDrag","axisValue","applyConstraints","dragConstraints","measure","prevConstraints","resolveRefConstraints","calcRelativeConstraints","resolveDragElastic","rebaseAxisConstraints","relativeConstraints","onMeasureDragConstraints","constraintsElement","constraintsBox","measurePageBox","rootProjectionNode","viewportBox","scroll","measuredConstraints","userConstraints","convertBoxToBoundingBox","dragMomentum","dragTransition","onDragTransitionEnd","startAxisValueAnimation","dragKey","toUpperCase","externalMotionValue","scalePositionWithinConstraints","boxProgress","calcOrigin","sourceLength","targetLength","transformTemplate","style","updateScroll","updateLayout","addListeners","stopPointerListener","dragListener","measureDragConstraints","stopMeasureLayoutListener","stopResizeListener","stopLayoutUpdateListener","hasLayoutChanged","DragGesture","removeGroupControls","dragControls","asyncHandler","PanGesture","removePointerDownListener","onPointerDown","pointerDownEvent","session","createPanHandlers","onPanSessionStart","onPanStart","onPan","onPanEnd","SwitchLayoutGroupContext","globalProjectionState","hasAnimatedSinceResize","hasEverUpdated","pixelsToPercent","pixels","correctBorderRadius","correct","scaleCorrectors","microtask","cancelMicrotask","MeasureLayoutWithContext","Component","componentDidMount","layoutGroup","switchLayoutGroup","layoutId","defaultScaleCorrectors","group","didUpdate","safeToRemove","setOptions","getSnapshotBeforeUpdate","layoutDependency","willUpdate","promote","relegate","frame","stack","getStack","members","componentDidUpdate","currentAnimation","isLead","componentWillUnmount","promoteContext","scheduleCheckAfterUnmount","remove","deregister","MeasureLayout","usePresence","react","useContext","context_PresenceContext","O","useId","useEffect","useCallback","jsx","applyTo","boxShadow","treeScale","projectionDelta","shadow","xScale","yScale","averageScale","borders","numBorders","asNumber","isPx","getRadius","radiusName","easeCrossfadeIn","compress","easeCrossfadeOut","copyAxisInto","originAxis","copyBoxInto","originBox","copyAxisDeltaInto","originDelta","removePointDelta","removeAxisTransforms","transforms","scaleKey","originKey","sourceAxis","removeAxisDelta","relativeProgress","xKeys","yKeys","removeBoxTransforms","sourceBox","isAxisDeltaZero","isDeltaZero","axisEquals","axisEqualsRounded","boxEqualsRounded","aspectRatio","axisDeltaEquals","NodeStack","scheduleRender","prevLead","lead","indexOfNode","findIndex","member","preserveFollowOpacity","show","resumeFrom","preserveOpacity","snapshot","animationValues","isUpdating","isLayoutDirty","crossfade","hide","exitAnimationComplete","resumingFrom","removeLeadSnapshot","compareByDepth","FlatTree","children","isDirty","resolveMotionValue","unwrappedValue","metrics","totalNodes","resolvedTargetDeltas","recalculatedProjection","isDebug","MotionDebug","transformAxes","hiddenVisibility","visibility","create_projection_node_id","resetDistortingTransform","sharedAnimationValues","setStaticValue","createProjectionNode","attachResizeListener","defaultParent","measureScroll","checkIsScrollRoot","resetTransform","animationId","isTreeAnimating","isProjectionDirty","isSharedProjectionDirty","isTransformDirty","updateManuallyBlocked","updateBlockedByResize","isSVG","needsReset","shouldResetTransform","hasCheckedOptimisedAppear","eventHandlers","hasTreeAnimated","updateScheduled","scheduleUpdate","projectionUpdateScheduled","checkUpdateFailed","clearAllSnapshots","updateProjection","nodes","propagateDirtyNodes","resolveTargetDelta","calcProjection","cleanDirtyNodes","record","resolvedRelativeTargetAt","hasProjected","isVisible","animationProgress","sharedNodes","path","notifyListeners","args","subscriptionManager","hasListeners","SVGElement","tagName","cancelDelay","resizeUnblockUpdate","timeout","checkElapsed","finishAnimation","registerSharedNode","hasRelativeTargetChanged","newLayout","isTreeAnimationBlocked","relativeTarget","layoutTransition","defaultLayoutTransition","onLayoutAnimationStart","onLayoutAnimationComplete","targetChanged","targetLayout","hasOnlyRelativeTargetChanged","layoutRoot","setAnimationOrigin","animationOptions","blockUpdate","unblockUpdate","isUpdateBlocked","startUpdate","resetSkewAndRotation","getTransformTemplate","shouldNotifyListeners","MotionCancelOptimisedAnimation","cancelTreeOptimisedTransformAnimations","projectionNode","MotionHasOptimisedAnimation","prevTransformTemplateValue","updateSnapshot","clearMeasurements","clearIsLayoutDirty","resetTransformStyle","notifyLayoutUpdate","clearSnapshot","removeLeadSnapshots","scheduleUpdateProjection","alwaysMeasureLayout","prevLayout","layoutCorrected","phase","layoutScroll","isRoot","wasRoot","isResetRequested","hasProjection","transformTemplateValue","transformTemplateHasChanged","removeTransform","pageBox","removeElementScroll","roundAxis","measuredBox","checkNodeWasScrollRoot","boxWithoutScroll","applyTransform","transformOnly","withTransforms","boxWithoutTransform","setTargetDelta","targetDelta","forceRelativeParentToResolveTarget","relativeParent","forceRecalculation","getLead","isShared","attemptToResolveRelativeTarget","getClosestProjectingParent","relativeTargetOrigin","targetWithTransforms","isProjecting","canSkip","pendingAnimation","prevTreeScaleX","prevTreeScaleY","applyTreeDeltas","treePath","isSharedTransition","treeLength","display","prevProjectionDelta","createProjectionDeltas","notifyAll","projectionDeltaWithTransform","prevRelativeTarget","snapshotLatestValues","mixedValues","relativeLayout","isSharedLayoutAnimation","snapshotSource","isOnlyMember","shouldCrossfadeOpacity","hasOpacityCrossfade","mixTargetDelta","mixAxisDelta","mixAxis","mixValues","follow","opacityExit","borderLabel","followRadius","leadRadius","animateSingleValue","motionValue$1","completeAnimation","applyTransformsToTarget","shouldAnimatePositionOnly","animationType","xLength","yLength","config","initialPromotionConfig","shouldPreserveFollowOpacity","getPrevLead","hasDistortingTransform","resetValues","getProjectionStyles","styleProp","styles","pointerEvents","emptyStyles","valuesToRender","buildProjectionTransform","latestTransform","xTranslate","yTranslate","zTranslate","elementScaleX","elementScaleY","transformOrigin","corrected","num","resetTree","measuredLayout","axisSnapshot","layoutDelta","visualDelta","parentSnapshot","parentLayout","relativeSnapshot","onBeforeLayoutMeasure","userAgentContains","navigator","userAgent","includes","string","roundPoint","DocumentProjectionNode","documentElement","scrollLeft","body","scrollTop","HTMLProjectionNode","documentNode","position","handleHoverEvent","lifecycle","HoverGesture","hover","onHoverStart","onPointerEnter","enterEvent","onHoverEnd","onPointerLeave","leaveEvent","endEvent","FocusGesture","onFocus","isFocusVisible","matches","onBlur","handlePressEvent","PressGesture","press","onPressStart","cancelEvents","startPress","onPressEnd","onPointerEnd","success","onPointerUp","onPointerCancel","upEvent","useGlobalTarget","cancelEvent","tabIndex","globalTapTarget","observerCallbacks","observers","fireObserverCallback","entry","fireAllObserverCallbacks","entries","thresholdNames","InViewFeature","hasEnteredView","isInView","startObserver","viewport","rootMargin","amount","once","threshold","observeIntersection","rootInteresectionObserver","initIntersectionObserver","lookupRoot","rootObservers","JSON","stringify","IntersectionObserver","observe","unobserve","isIntersecting","onViewportEnter","onViewportLeave","hasViewportOptionChanged","prevViewport","MotionContext","LazyContext","strict","isVariantNode","variantLabelsAsDependency","featureProps","focus","tap","pan","inView","featureDefinitions","isEnabled","motionComponentSymbol","Symbol","for","lowercaseSVGElements","isSVGComponent","renderHTML","vars","setProperty","camelCaseAttributes","renderSVG","renderState","_styleProp","attrs","setAttribute","isForcedMotionValue","scrapeMotionValuesFromProps","newValues","scrape_motion_values_scrapeMotionValuesFromProps","charAt","makeUseVisualState","make","makeState","createRenderState","onMount","makeLatestValues","scrapeMotionValues","motionValues","isControllingVariants$1","isVariantNode$1","inherit","isInitialAnimationBlocked","variantToSet","list","use_constant","h","createHtmlRenderState","createSvgRenderState","getValueAsType","translateAlias","numTransforms","buildHTMLStyles","hasTransformOrigin","valueAsType","buildTransform","transformString","transformIsDefault","valueIsDefault","transformName","transform_origin_calcOrigin","dashKeys","array","camelKeys","buildSVGAttrs","attrX","attrY","attrScale","pathLength","pathSpacing","pathOffset","isSVGTag","viewBox","dimensions","calcSVGTransformOrigin","pxOriginX","pxOriginY","buildSVGPath","spacing","useDashCase","tag","svgMotionConfig","useVisualState","getBBox","htmlMotionConfig","copyRawValuesOnly","validMotionProps","isValidMotionProp","shouldForward","require","prefersReducedMotion","hasReducedMotionListener","visualElementStore","valueTypes","findValueType","propEventHandlers","VisualElement","_props","_prevProps","_visualElement","reducedMotionConfig","visualState","features","valueSubscriptions","prevMotionValues","propEventSubscriptions","notifyUpdate","triggerBuild","renderInstance","renderScheduledAt","baseTarget","initialValues","initialMotionValues","removeFromVariantTree","addVariantChild","bindToMotionValue","initPrefersReducedMotion","is_browser","j","matchMedia","motionMediaQuery","setReducedMotionPreferences","addListener","feature","removeSyncCheck","valueIsTransform","removeOnChange","latestValue","removeOnRenderRequest","MotionCheckAppearSync","other","sortInstanceNodePosition","updateFeatures","featureDefinition","FeatureConstructor","build","measureInstanceViewportBox","getStaticValue","listener","updateMotionValuesFromProps","nextValue","prevValue","existingValue","removeValue","handleChildMotionValue","getVariant","getClosestVariantNode","closestVariantNode","removeValueFromRenderState","getBaseTargetFromProps","readValueFromInstance","setBaseTarget","valueFromInitial","DOMVisualElement","compareDocumentPosition","childSubscription","textContent","HTMLVisualElement","defaultType","computedStyle","SVGVisualElement","getAttribute","motion","createDOMMotionComponentProxy","componentFactory","Proxy","componentCache","_target","ProjectionNode","allowProjection","Fragment","forwardMotionProps","createRendererMotionComponent","param","useRender","loadFeatures","ForwardRefMotionComponent","forwardRef","externalRef","configAndProps","useLayoutId","layoutGroupId","useCreateMotionContext","getCurrentTreeVariants","useMemo","isBrowser","layoutProjection","getProjectionFunctionality","combined","useVisualElement","ProjectionNodeConstructor","lazyContext","_","visualElementRef","useRef","renderer","initialLayoutGroupConfig","use_visual_element_createProjectionNode","getClosestProjectingNode","useInsertionEffect","optimisedAppearId","wantsHandoff","MotionHandoffIsComplete","use_isomorphic_effect","L","MotionIsMounted","MotionHandoffMarkAsComplete","jsxs","Provider","createUseRender","visualProps","useVisualProps","_isStatic","rawStyles","htmlProps","useStyle","useInitialMotionValues","draggable","userSelect","WebkitUserSelect","WebkitTouchCallout","touchAction","onTap","onTapStart","filteredProps","filterProps","isDom","elementProps","renderedChildren","useConstant","react__WEBPACK_IMPORTED_MODULE_0__","useIsomorphicLayoutEffect","_is_browser_mjs__WEBPACK_IMPORTED_MODULE_1__","useLayoutEffect","warning","_noop_mjs__WEBPACK_IMPORTED_MODULE_0__","invariant","any"],"sourceRoot":""}