3:I[37694,[],""]
5:I[46384,[],""]
6:I[55598,["598","static/chunks/598-c8f93531a0a4a07e.js","185","static/chunks/app/layout-65620bacf6045784.js"],"ViewTransitions"]
7:I[86606,["598","static/chunks/598-c8f93531a0a4a07e.js","185","static/chunks/app/layout-65620bacf6045784.js"],"ThemeProvider"]
8:I[42334,["598","static/chunks/598-c8f93531a0a4a07e.js","185","static/chunks/app/layout-65620bacf6045784.js"],"default"]
9:I[80715,["598","static/chunks/598-c8f93531a0a4a07e.js","185","static/chunks/app/layout-65620bacf6045784.js"],"default"]
a:I[55598,["598","static/chunks/598-c8f93531a0a4a07e.js","185","static/chunks/app/layout-65620bacf6045784.js"],"Link"]
4:["id","10","d"]
0:["LVQIQOXDH_jv1t4rPo26L",[[["",{"children":["blog",{"children":[["id","10","d"],{"children":["__PAGE__?{\"id\":\"10\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["id","10","d"],{"children":["__PAGE__",{},[["$L1","$L2",null],null],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/4b751e17faaae912.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/b9e5f75db2a40d89.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","2",{"rel":"stylesheet","href":"/_next/static/css/93c09f23e5e79b42.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","3",{"rel":"stylesheet","href":"/_next/static/css/d95f70565c8fec8b.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","4",{"rel":"stylesheet","href":"/_next/static/css/15a4a72a41cadd99.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","5",{"rel":"stylesheet","href":"/_next/static/css/5e92f1bdc02d74d7.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","6",{"rel":"stylesheet","href":"/_next/static/css/e0ff8dd1ca0cbd73.css","precedence":"next","crossOrigin":"$undefined"}]],["$","$L6",null,{"children":["$","html",null,{"lang":"zh","suppressHydrationWarning":true,"className":"h-full","children":[["$","head",null,{"children":["$","link",null,{"rel":"icon","href":"/next.svg","type":"image/svg+xml"}]}],["$","body",null,{"className":"flex flex-col bg-background antialiased h-full","children":["$","$L7",null,{"attribute":"class","children":[["$","$L8",null,{}],["$","$L9",null,{"children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}]}],["$","footer",null,{"className":"border-t py-6 md:py-0 bg-gray-100","children":["$","div",null,{"className":"container flex flex-col items-center justify-between gap-4 md:h-24 md:flex-row","children":[["$","div",null,{"className":"flex flex-col items-center gap-4 px-8 md:flex-row md:gap-2 md:px-0","children":["$","p",null,{"className":"text-center text-sm leading-loose text-muted-foreground md:text-left","children":["© ",2024," 我的博客. 保留所有权利。","新建站","，感谢您的访问！"]}]}],["$","nav",null,{"className":"flex items-center space-x-4","children":[["$","$La","/privacy",{"href":"/privacy","className":"text-sm text-muted-foreground hover:text-blue-500 transition duration-200","children":["$","div",null,{"className":"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 cursor-pointer transition-transform duration-200 ease-in-out hover:scale-105 active:scale-95 border-transparent bg-primary text-primary-foreground hover:bg-primary/80 active:bg-primary/70","children":"隐私政策"}]}],["$","$La","/terms",{"href":"/terms","className":"text-sm text-muted-foreground hover:text-blue-500 transition duration-200","children":["$","div",null,{"className":"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 cursor-pointer transition-transform duration-200 ease-in-out hover:scale-105 active:scale-95 border-transparent bg-primary text-primary-foreground hover:bg-primary/80 active:bg-primary/70","children":"使用条款"}]}],["$","$La","/contact",{"href":"/contact","className":"text-sm text-muted-foreground hover:text-blue-500 transition duration-200","children":["$","div",null,{"className":"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 cursor-pointer transition-transform duration-200 ease-in-out hover:scale-105 active:scale-95 border-transparent bg-primary text-primary-foreground hover:bg-primary/80 active:bg-primary/70","children":"联系我们"}]}]]}]]}]}]]}]}]]}]}]],null],null],["$Lb",null]]]]
c:I[53022,["885","static/chunks/8f130de0-df1597a528c09c54.js","969","static/chunks/fae302de-b9b940b092bd9864.js","838","static/chunks/80ded2dd-dd9f9e5ff48384de.js","598","static/chunks/598-c8f93531a0a4a07e.js","706","static/chunks/706-2f116404b6d7b363.js","772","static/chunks/772-086313e0d9c32dbc.js","29","static/chunks/29-65112df9da6a52c9.js","548","static/chunks/app/blog/%5Bid%5D/page-9aa369b9c1ad565e.js"],"default"]
d:"$Sreact.suspense"
e:I[24665,["885","static/chunks/8f130de0-df1597a528c09c54.js","969","static/chunks/fae302de-b9b940b092bd9864.js","838","static/chunks/80ded2dd-dd9f9e5ff48384de.js","598","static/chunks/598-c8f93531a0a4a07e.js","706","static/chunks/706-2f116404b6d7b363.js","772","static/chunks/772-086313e0d9c32dbc.js","29","static/chunks/29-65112df9da6a52c9.js","548","static/chunks/app/blog/%5Bid%5D/page-9aa369b9c1ad565e.js"],"BailoutToCSR"]
f:I[92206,["885","static/chunks/8f130de0-df1597a528c09c54.js","969","static/chunks/fae302de-b9b940b092bd9864.js","838","static/chunks/80ded2dd-dd9f9e5ff48384de.js","598","static/chunks/598-c8f93531a0a4a07e.js","706","static/chunks/706-2f116404b6d7b363.js","772","static/chunks/772-086313e0d9c32dbc.js","29","static/chunks/29-65112df9da6a52c9.js","548","static/chunks/app/blog/%5Bid%5D/page-9aa369b9c1ad565e.js"],"default"]
10:T1323,
# 微前端架构实践与性能优化

微前端架构是一种将前端应用分解成更小、更易管理的独立部分的现代web开发方法。它允许多个独立开发、部署的前端应用共存于一个页面,为大型复杂的前端项目提供了灵活的解决方案。本文将深入探讨微前端的实现方法、通信机制、样式隔离、性能优化策略以及实践经验。

## 微前端实现方法

### 1. 使用Single-SPA框架

Single-SPA是一个流行的微前端框架,它允许您在一个页面中加载和卸载多个JavaScript应用程序。

```javascript
import { registerApplication, start } from 'single-spa';

registerApplication({
  name: 'app1',
  app: () => import('./app1/main.js'),
  activeWhen: '/app1'
});

registerApplication({
  name: 'app2',
  app: () => import('./app2/main.js'),
  activeWhen: '/app2'
});

start();
```

Single-SPA的优点包括:
- 技术栈无关性
- 独立部署
- 懒加载

### 2. 使用Qiankun框架

Qiankun是基于Single-SPA的增强版微前端框架,提供了更多开箱即用的功能。

```javascript
import { registerMicroApps, start } from 'qiankun';

registerMicroApps([
  {
    name: 'app1',
    entry: '//localhost:8080',
    container: '#container',
    activeRule: '/app1',
  },
  {
    name: 'app2',
    entry: '//localhost:8081',
    container: '#container',
    activeRule: '/app2',
  },
]);

start();
```

Qiankun的特点:
- 简单易用的API
- 完善的沙箱机制
- 资源预加载

### 3. Web Components方式

使用原生Web Components也是实现微前端的一种方式:

```javascript
class MicroApp extends HTMLElement {
  connectedCallback() {
    this.innerHTML = '<h1>Micro App</h1>';
    // 加载微应用逻辑
  }
}

customElements.define('micro-app', MicroApp);
```

## 微前端通信机制

### 1. 基于CustomEvent的发布订阅模式

```javascript
// 发布事件
window.dispatchEvent(new CustomEvent('myEvent', { detail: data }));

// 订阅事件
window.addEventListener('myEvent', (event) => {
  console.log(event.detail);
});
```

### 2. 使用Props进行父子应用通信

在主应用中:
```javascript
<micro-app :prop1="value1" :prop2="value2"></micro-app>
```

在微应用中:
```javascript
export function bootstrap({ prop1, prop2 }) {
  // 使用prop1和prop2
}
```

### 3. 全局状态管理

使用Redux或MobX等状态管理库来实现跨应用的状态共享。

## 样式隔离

### 1. BEM命名约定

使用Block__Element--Modifier命名规范:

```css
.app1__button--primary {
  /* 样式 */
}
```

### 2. CSS Modules

在webpack配置中启用CSS Modules:

```javascript
{
  test: /.css$/,
  use: [
    'style-loader',
    {
      loader: 'css-loader',
      options: {
        modules: true,
      },
    },
  ],
}
```

### 3. Shadow DOM

使用Shadow DOM实现完全的样式隔离:

```javascript
class MicroApp extends HTMLElement {
  constructor() {
    super();
    this.attachShadow({ mode: 'open' });
  }
  
  connectedCallback() {
    this.shadowRoot.innerHTML = `
      <style>
        /* 局部样式 */
      </style>
      <div>Micro App Content</div>
    `;
  }
}
```

## 性能优化策略

### 1. 应用预加载

使用Qiankun的预加载功能:

```javascript
import { prefetchApps } from 'qiankun';

prefetchApps([
  { name: 'app1', entry: '//localhost:8080' },
  { name: 'app2', entry: '//localhost:8081' },
]);
```

### 2. 公共依赖提取

使用webpack的externals配置:

```javascript
module.exports = {
  externals: {
    'react': 'React',
    'react-dom': 'ReactDOM',
  },
};
```

### 3. 按需加载子应用

使用动态import实现按需加载:

```javascript
const loadApp = () => import('./app');
```

## 实践经验与注意事项

1. 统一技术栈,降低维护成本
   - 尽可能使用相同的框架和库版本
   - 制定统一的代码规范和最佳实践

2. 制定明确的应用边界
   - 明确划分各个微应用的职责
   - 避免微应用之间的过度耦合

3. 建立完善的监控体系
   - 使用性能监控工具(如New Relic, Sentry)
   - 实现自定义的错误捕获和上报机制

4. 版本管理和发布策略
   - 实施语义化版本控制
   - 采用蓝绿部署或金丝雀发布等策略

5. 安全性考虑
   - 实现跨域资源共享(CORS)策略
   - 使用内容安全策略(CSP)防止XSS攻击

6. 测试策略
   - 单元测试: 针对各个微应用的独立功能
   - 集成测试: 测试微应用之间的交互
   - 端到端测试: 模拟用户操作,测试整个系统

微前端架构为大型前端项目提供了灵活的解决方案,但也带来了额外的复杂性。通过合理的架构设计、优化策略和最佳实践,我们可以充分发挥微前端的优势,构建高效、可维护的大型前端应用。在实施微前端架构时,需要权衡其带来的好处和潜在的挑战,根据项目的具体需求做出明智的选择。
11:T1fd5,
# Next.js 13新特性解析

Next.js 13是一个重大更新，引入了许多激动人心的新特性，如App Router、服务器组件、流式渲染等。本文将详细介绍这些新特性的使用方法和优势，以及如何从Next.js 12迁移到13版本。

## App Router

App Router是Next.js 13最显著的新特性之一，它彻底改变了路由管理的方式。

### 基于文件系统的路由

App Router延续了Next.js基于文件系统的路由概念，但引入了新的`app`目录结构：

```plaintext
app/
  layout.js
  page.js
  about/
    page.js
  blog/
    [slug]/
      page.js
```

在这个结构中，`page.js`文件定义了路由的主要内容，而`layout.js`则定义了共享布局。

### 嵌套布局

App Router支持嵌套布局，这使得创建复杂的页面结构变得更加简单：

```jsx
// app/layout.js
export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}

// app/blog/layout.js
export default function BlogLayout({ children }) {
  return (
    <div>
      <nav>Blog Navigation</nav>
      {children}
    </div>
  )
}
```

### 服务器组件

默认情况下，App Router中的所有组件都是服务器组件。这意味着它们在服务器上渲染，可以直接访问后端资源，并且不会增加客户端的JavaScript包大小。

```jsx
// app/page.js
async function getData() {
  const res = await fetch('https://api.example.com/data')
  return res.json()
}

export default async function Page() {
  const data = await getData()
  return <main>{data.map(item => <div key={item.id}>{item.title}</div>)}</main>
}
```

### 客户端组件

当需要客户端交互时，可以使用客户端组件

```jsx
'use client'

import { useState } from 'react'

export default function Counter() {
  const [count, setCount] = useState(0)
  return (
    <button onClick={() => setCount(count + 1)}>
      Count: {count}
    </button>
  )
}
```

## 服务器组件

服务器组件是Next.js 13的另一个重要特性，它允许我们在服务器上渲染React组件，从而提高性能和SEO。

### 优势

1. 减少客户端JavaScript包大小
2. 直接访问后端资源
3. 自动代码分割
4. 改善首次加载性能

### 使用场景

服务器组件特别适合于：

- 需要访问后端资源的组件
- 不需要客户端交互的静态内容
- SEO关键的页面内容

```jsx
// app/products/page.js
async function getProducts() {
  const res = await fetch('https://api.example.com/products')
  return res.json()
}

export default async function ProductsPage() {
  const products = await getProducts()
  return (
    <div>
      <h1>Products</h1>
      <ul>
        {products.map(product => (
          <li key={product.id}>{product.name}</li>
        ))}
      </ul>
    </div>
  )
}
```

## 流式渲染

流式渲染允许将页面内容分块传输到客户端，这可以显著改善大型应用的用户体验。

### 实现方式

Next.js 13通过`loading.js`文件和React的`Suspense`组件支持流式渲染：

```jsx
// app/dashboard/loading.js
export default function Loading() {
  return <div>Loading...</div>
}

// app/dashboard/page.js
import { Suspense } from 'react'
import UserProfile from './UserProfile'
import UserPosts from './UserPosts'

export default function Dashboard() {
  return (
    <div>
      <h1>Dashboard</h1>
      <Suspense fallback={<div>Loading profile...</div>}>
        <UserProfile />
      </Suspense>
      <Suspense fallback={<div>Loading posts...</div>}>
        <UserPosts />
      </Suspense>
    </div>
  )
}
```

## 新的图片组件

Next.js 13引入了新的`Image`组件，它提供了更好的性能和用户体验：

```jsx
import Image from 'next/image'

export default function Avatar() {
  return (
    <Image
      src="/avatar.png"
      alt="User Avatar"
      width={64}
      height={64}
      priority
    />
  )
}
```

新的`Image`组件支持：

- 自动图片优化
- 延迟加载
- 响应式图片
- 防止布局偏移

## 字体优化

Next.js 13引入了新的字体系统，它可以自动优化和加载自定义字体：

```jsx
import { Inter } from 'next/font/google'

const inter = Inter({ subsets: ['latin'] })

export default function RootLayout({ children }) {
  return (
    <html lang="en" className={inter.className}>
      <body>{children}</body>
    </html>
  )
}
```

这个系统可以：

- 自动内联字体CSS
- 消除布局偏移
- 预加载关键字体文件

## 从Next.js 12迁移到13

迁移到Next.js 13需要注意以下几点：

1. 创建新的`app`目录，逐步迁移路由
2. 更新`next/image`导入为`next/legacy/image`
3. 将客户端组件标记为`'use client'`
4. 更新API路由到新的`app/api`目录
5. 使用新的数据获取方法替代`getServerSideProps`和`getStaticProps`

## 结论

Next.js 13带来了许多令人兴奋的新特性，这些特性不仅提高了开发效率，还大大改善了应用性能和用户体验。App Router、服务器组件和流式渲染等新特性为我们提供了更灵活、更强大的工具，使得构建现代Web应用变得更加容易。

随着Next.js的不断发展，我们可以期待看到更多令人兴奋的新特性和改进。如果您还没有尝试过Next.js 13，现在是时候了！

## Turbopack - 新的打包工具

Next.js 13引入了Turbopack,这是一个用Rust编写的增量打包工具,旨在替代Webpack。

### Turbopack的主要优势:

1. 更快的启动时间 - 比Webpack快700倍
2. 更快的更新 - 比Webpack快20倍
3. 内存效率更高 - 使用的内存比Webpack少少5倍

### 如何启用Turbopack:

在开发模式下,只需添加 --turbo 标志:

```bash
next dev --turbo
```

注意:Turbopack目前仍处于beta阶段,可能存在一些兼容性问题。

## 改进的国际化支持

Next.js 13改进了国际化(i18n)支持,使得创建多语言应用变得更加简单。

### 新的i18n路由

在 `app` 目录中,你可以使用以下结构来支持多语言:

```
app/
  [lang]/
    page.js
    layout.js
    about/
      page.js
```

### 使用示例:

```jsx
// app/[lang]/layout.js
export async function generateStaticParams() {
  return [{ lang: 'en' }, { lang: 'de' }, { lang: 'fr' }]
}

export default function Layout({ children, params }) {
  return (
    <html lang={params.lang}>
      <body>{children}</body>
    </html>
  )
}
```

## 新的Middleware API

Next.js 13引入了新的Middleware API,使得在请求处理过程中进行拦截和修改变得更加容易。

### Middleware的使用场景:

- 认证和授权
- A/B测试
- 地理位置基础的内容定制
- 边缘计算

### 示例:

```typescript
// middleware.ts
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

export function middleware(request: NextRequest) {
  const country = request.geo?.country || 'US'
  return NextResponse.rewrite(new URL(`/${country}${request.nextUrl.pathname}`, request.url))
}

export const config = {
  matcher: '/:path*',
}
```

## 改进的TypeScript支持

Next.js 13进一步增强了对TypeScript的支持,提供了更好的类型推断和更严格的类型检查。

### 主要改进:

1. 自动生成类型定义文件
2. 改进的路由类型
3. 更好的API路由类型支持

### 示例:

```typescript
// app/api/user/[id]/route.ts
import { NextResponse } from 'next/server'

export async function GET(
  request: Request,
  { params }: { params: { id: string } }
) {
  const id = params.id
  // 获取用户数据
  return NextResponse.json({ id, name: 'John Doe' })
}
```

## 结论

Next.js 13不仅带来了App Router、服务器组件和流式渲染等重大新特性,还在性能优化、开发体验和国际化支持等方面做出了显著改进。Turbopack的引入预示着未来更快的构建速度,而改进的Middleware API和TypeScript支持则为开发者提供了更强大、更灵活的工具。

随着Next.js生态系统的不断发展,我们可以期待看到更多创新和改进。无论你是正在构建新项目还是考虑升级现有应用,Next.js 13都值得你认真考虑和尝试。
12:T182f,
# React性能优化实战指南

在构建大型React应用时,性能优化至关重要。本文将深入介绍一些实用的React性能优化技巧,帮助您的应用运行得更快、更流畅。

## 1. 使用React.memo

React.memo是一个高阶组件,可以帮助我们避免不必要的重渲染。它通过对比props来决定是否需要重新渲染组件。

```jsx
const MyComponent = React.memo(function MyComponent(props) {
  /* 渲染使用到的props */
});
```

使用React.memo的注意事项:
- 只在props经常变化的组件上使用
- 对于依赖复杂对象的组件,考虑自定义比较函数

### 深入理解React.memo

React.memo通过浅比较props来决定是否重新渲染。对于复杂的props,可以提供自定义的比较函数:

```jsx
function areEqual(prevProps, nextProps) {
  // 自定义比较逻辑
  return prevProps.complexProp.id === nextProps.complexProp.id;
}

const MemoizedComponent = React.memo(MyComponent, areEqual);
```

注意:过度使用React.memo可能导致代码复杂性增加,应权衡利弊。

## 2. 使用useMemo和useCallback

useMemo和useCallback是React提供的两个强大的Hook,用于优化性能。

### useMemo

useMemo用于缓存计算结果:

```jsx
const memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);
```

使用场景:
- 昂贵的计算
- 避免重复创建对象

#### useMemo的高级用法

useMemo还可以用于优化子组件的渲染:

```jsx
function ParentComponent({ data }) {
  const memoizedData = useMemo(() => processData(data), [data]);
  return <ChildComponent data={memoizedData} />;
}
```

### useCallback

useCallback用于缓存回调函数:

```jsx
const memoizedCallback = useCallback(
  () => {
    doSomething(a, b);
  },
  [a, b],
);
```

使用场景:
- 传递给子组件的回调函数
- 依赖项列表中使用的函数

#### useCallback vs useMemo

useCallback实际上是useMemo的一个特例:

```jsx
useCallback(fn, deps) 等价于 useMemo(() => fn, deps)
```

## 3. 虚拟化长列表

对于长列表,使用虚拟化技术可以显著提高性能。react-window和react-virtualized是两个流行的库。

使用react-window的例子:

```jsx
import { FixedSizeList as List } from 'react-window';

function Row({ index, style }) {
  return <div style={style}>Row {index}</div>;
}

function Example() {
  return (
    <List
      height={150}
      itemCount={1000}
      itemSize={35}
      width={300}
    >
      {Row}
    </List>
  );
}
```

虚拟化的优点:
- 只渲染可见区域的项目
- 大大减少DOM节点数量
- 提高滚动性能

### 动态高度列表

对于项目高度不固定的列表,可以使用`VariableSizeList`:

```jsx
import { VariableSizeList as List } from 'react-window';

const getItemSize = index => {
  // 根据索引返回项目高度
  return index % 2 ? 50 : 80;
};

function Example() {
  return (
    <List
      height={150}
      itemCount={1000}
      itemSize={getItemSize}
      width={300}
    >
      {Row}
    </List>
  );
}
```

## 4. 使用React.lazy进行代码分割

React.lazy允许您动态导入组件,实现代码分割:

```jsx
const OtherComponent = React.lazy(() => import('./OtherComponent'));

function MyComponent() {
  return (
    <React.Suspense fallback={<div>Loading...</div>}>
      <OtherComponent />
    </React.Suspense>
  );
}
```

代码分割的好处:
- 减少初始加载时间
- 按需加载组件

### 基于路由的代码分割

结合React Router实现更智能的代码分割:

```jsx
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
import React, { Suspense, lazy } from 'react';

const Home = lazy(() => import('./routes/Home'));
const About = lazy(() => import('./routes/About'));

const App = () => (
  <Router>
    <Suspense fallback={<div>Loading...</div>}>
      <Switch>
        <Route exact path="/" component={Home}/>
        <Route path="/about" component={About}/>
      </Switch>
    </Suspense>
  </Router>
);
```

## 5. 避免不必要的重渲染

除了使用React.memo,还有其他方法可以避免不必要的重渲染:

- 将状态下移到需要它的组件
- 使用Context API时,将provider的value拆分
- 使用`children`prop传递JSX

### 优化Context

避免Context导致的不必要重渲染:

```jsx
const ThemeContext = React.createContext();

function ThemeProvider({ children }) {
  const [theme, setTheme] = useState('light');
  
  const value = useMemo(() => ({ theme, setTheme }), [theme]);
  
  return (
    <ThemeContext.Provider value={value}>
      {children}
    </ThemeContext.Provider>
  );
}
```

## 6. 使用生产模式构建

确保在生产环境中使用优化后的构建版本:

- 使用`npm run build`创建生产版本
- 确保所有依赖都使用生产版本

### 分析打包结果

使用工具分析打包结果,找出可优化的地方:

- webpack-bundle-analyzer
- source-map-explorer

```bash
npm install --save-dev source-map-explorer
```

在package.json中添加脚本:

```json
"scripts": {
  "analyze": "source-map-explorer 'build/static/js/*.js'"
}
```

## 7. 使用Web Workers

对于复杂的计算,考虑使用Web Workers将其移至后台线程:

```jsx
// worker.js
self.addEventListener('message', (e) => {
  const result = heavyComputation(e.data);
  self.postMessage(result);
});

// React组件
function HeavyComponent() {
  const [result, setResult] = useState(null);
  
  useEffect(() => {
    const worker = new Worker('worker.js');
    worker.postMessage(data);
    worker.onmessage = (e) => {
      setResult(e.data);
    };
    return () => worker.terminate();
  }, []);

  return <div>{result}</div>;
}
```

## 8. 使用性能分析工具

利用React DevTools的Profiler进行性能分析:

- 识别渲染时间长的组件
- 分析组件重渲染的原因
- 优化渲染性能

## 结论

通过应用这些优化技巧,我们可以显著提升React应用的性能,为用户提供更流畅的体验。记住,性能优化是一个持续的过程,需要根据应用的具体情况和用户反馈不断调整和改进。

最后,始终记住:过早优化是万恶之源。在实际遇到性能问题时再进行针对性优化,通常会更加高效。
13:T1632,
# WebAssembly与前端的未来:深度解析与实践指南

WebAssembly (简称Wasm) 正在彻底改变Web应用的性能界限和可能性。本文将深入探讨Wasm的工作原理、与JavaScript的协作方式,以及在前端项目中的实际应用案例,帮助开发者全面了解这项革命性技术。

## WebAssembly简介

WebAssembly是一种低级的、高效的、可移植的字节码格式,专为在现代Web浏览器中执行而设计。它的主要特点包括:

1. 近乎原生的执行速度:Wasm可以以接近本地机器代码的速度运行,大大提升性能密集型任务的效率。
2. 跨平台兼容性:一次编译,到处运行,支持所有主流浏览器和操作系统。
3. 与JavaScript的无缝集成:可以与现有的JavaScript代码和Web API无缝协作。
4. 安全性:运行在沙箱环境中,遵循同源策略和其他Web安全措施。
5. 开放标准:由W3C WebAssembly工作组维护的开放Web标准。

## WebAssembly的工作原理

WebAssembly模块通常由C++、Rust、Go等高级语言编译而来。它的执行过程可以分为以下几个关键步骤:

1. 编译:使用特定工具链(如Emscripten)将源代码编译为.wasm文件。
2. 加载:在JavaScript中通过fetch()或XMLHttpRequest加载.wasm文件。
3. 编译和实例化:使用WebAssembly.instantiate()或WebAssembly.instantiateStreaming()方法。
4. 执行:调用导出的WebAssembly函数。

详细的代码示例:

```javascript
// 使用instantiateStreaming加载和实例化WebAssembly模块
WebAssembly.instantiateStreaming(fetch('module.wasm'))
  .then(result => {
    const instance = result.instance;
    const exports = instance.exports;
    
    // 调用WebAssembly函数
    const result = exports.someFunction(42);
    console.log('WebAssembly函数返回结果:', result);
  })
  .catch(error => console.error('加载WebAssembly模块失败:', error));
```

## 与JavaScript的深度协作

WebAssembly和JavaScript之间可以进行复杂的双向通信和数据交换:

1. 传递基本数据类型:数字、布尔值等可以直接传递。
2. 字符串和数组:需要通过内存操作进行传递,通常使用SharedArrayBuffer。
3. 函数调用:JavaScript可以调用WebAssembly函数,反之亦然。
4. 内存共享:WebAssembly可以直接操作JavaScript的ArrayBuffer。

高级交互示例:

```javascript
// 假设我们有一个处理图像的WebAssembly模块
const memory = new WebAssembly.Memory({ initial: 10, maximum: 100 });

WebAssembly.instantiateStreaming(fetch('image_processor.wasm'), {
  env: {
    memory,
    log: console.log
  }
})
.then(result => {
  const exports = result.instance.exports;
  
  // 创建一个用于图像数据的TypedArray
  const imageData = new Uint8ClampedArray(memory.buffer, 0, 1024 * 1024 * 4); // 假设图像大小为1024x1024
  
  // 在JavaScript中填充图像数据
  // ...

  // 调用WebAssembly函数处理图像
  exports.processImage(1024, 1024);
  
  // 处理后的图像数据现在在同一块内存中
  // 可以直接用于创建ImageData并绘制到Canvas
  const canvas = document.getElementById('myCanvas');
  const ctx = canvas.getContext('2d');
  ctx.putImageData(new ImageData(imageData, 1024, 1024), 0, 0);
});
```

## 实际应用案例深度剖析

1. 图像处理:
   - 案例:使用WebAssembly实现实时滤镜应用
   - 优势:可以处理大量像素数据,实现复杂的图像算法,同时保持流畅的用户体验
   - 实现:将核心图像处理算法用C++编写并编译为WebAssembly,在JavaScript中处理用户交互和UI更新

2. 游戏引擎:
   - 案例:将Unity游戏引擎编译为WebAssembly
   - 优势:能够在浏览器中运行接近原生性能的3D游戏
   - 挑战:需要处理大量资源加载和内存管理

3. 加密算法:
   - 案例:使用WebAssembly实现高性能的端到端加密
   - 优势:可以执行复杂的加密操作而不影响主线程,提高安全性和性能
   - 实现:将成熟的加密库(如OpenSSL)编译为WebAssembly,在JavaScript中调用相关函数

4. 音频处理:
   - 案例:在线音频编辑器和效果器
   - 优势:能够实时处理大量音频数据,实现复杂的音频算法
   - 实现:将DSP(数字信号处理)算法编译为WebAssembly,与Web Audio API结合使用

## WebAssembly的未来发展与挑战

1. 多线程支持:
   - 当前状态:通过SharedArrayBuffer和Atomics实现有限的多线程支持
   - 未来展望:完整的多线程API,允许更复杂的并行计算

2. 垃圾回收:
   - 挑战:目前WebAssembly需要手动管理内存,增加了开发难度
   - 解决方案:正在开发中的提案,旨在为WebAssembly添加垃圾回收支持

3. 异常处理:
   - 当前状态:缺乏原生的异常处理机制
   - 进展:Exception Handling提案正在推进,将允许更自然的错误处理

4. DOM和Web API直接访问:
   - 目标:允许WebAssembly直接操作DOM和访问Web API,而不需要通过JavaScript
   - 潜在影响:可能带来更高的性能和更简洁的代码结构

5. SIMD(单指令多数据)支持:
   - 意义:允许WebAssembly更有效地进行并行数据处理
   - 应用:在图像处理、机器学习等领域有巨大潜力

## 结论

WebAssembly正在迅速发展,为Web应用带来前所未有的性能和可能性。通过掌握WebAssembly,前端开发者可以突破传统Web应用的限制,构建更高性能、更复杂的应用程序。随着生态系统的不断完善和新特性的加入,WebAssembly必将在未来的Web开发中扮演越来越重要的角色。

作为前端开发者,建议积极学习和实践WebAssembly技术,探索其在实际项目中的应用,为未来的Web开发做好准备。
14:T1d01,
# Web3和去中心化应用(DApps)开发入门指南

Web3技术正在迅速崛起,为开发者带来了前所未有的机遇和挑战。本文将深入探讨Web3的核心概念,详细介绍如何创建一个简单的DApp,并探讨当前Web3应用面临的主要挑战及未来发展趋势。

## Web3核心概念详解

1. 智能合约: 
   - 定义:自动执行的程序,运行在区块链上
   - 特点:不可篡改、透明、自动执行
   - 应用:金融、供应链、游戏等领域

2. 去中心化存储: 
   - IPFS (InterPlanetary File System): 分布式文件存储系统
   - Filecoin: 基于区块链的去中心化存储网络
   - Arweave: 永久性存储解决方案

3. 去中心化身份验证: 
   - MetaMask: 流行的以太坊钱包和身份管理工具
   - WalletConnect: 开放协议,连接DApps和钱包
   - Civic: 基于区块链的身份验证和KYC解决方案

4. 代币经济:
   - 功能型代币: 用于访问特定服务或功能
   - 治理型代币: 用于参与项目决策和治理
   - 非同质化代币(NFT): 代表独特数字资产的所有权

## 创建简单DApp:投票系统

让我们通过创建一个基于以太坊的投票DApp来深入了解Web3开发流程:

1. 编写智能合约:

```solidity
pragma solidity ^0.8.0;

contract AdvancedVoting {
    struct Candidate {
        string name;
        uint256 voteCount;
    }
    
    mapping(address => bool) public voters;
    Candidate[] public candidates;
    uint public votingEnd;

    event VoteCast(address voter, string candidate);

    constructor(string[] memory candidateNames, uint durationInMinutes) {
        for (uint i = 0; i < candidateNames.length; i++) {
            candidates.push(Candidate({
                name: candidateNames[i],
                voteCount: 0
            }));
        }
        votingEnd = block.timestamp + (durationInMinutes * 1 minutes);
    }

    function vote(uint candidateIndex) public {
        require(!voters[msg.sender], "Already voted.");
        require(block.timestamp < votingEnd, "Voting has ended.");
        require(candidateIndex < candidates.length, "Invalid candidate index.");

        voters[msg.sender] = true;
        candidates[candidateIndex].voteCount++;

        emit VoteCast(msg.sender, candidates[candidateIndex].name);
    }

    function getCandidateCount() public view returns (uint) {
        return candidates.length;
    }

    function getVotes(uint candidateIndex) public view returns (uint256) {
        require(candidateIndex < candidates.length, "Invalid candidate index.");
        return candidates[candidateIndex].voteCount;
    }
}
```

2. 使用ethers.js与合约交互:

```javascript
import { ethers } from 'ethers';

const provider = new ethers.providers.Web3Provider(window.ethereum);
const signer = provider.getSigner();
const contract = new ethers.Contract(CONTRACT_ADDRESS, ABI, signer);

async function vote(candidateIndex) {
    try {
        const tx = await contract.vote(candidateIndex);
        await tx.wait();
        console.log('Vote cast successfully!');
    } catch (error) {
        console.error('Error casting vote:', error);
    }
}

async function getCandidateVotes(candidateIndex) {
    const votes = await contract.getVotes(candidateIndex);
    return votes.toNumber();
}
```

3. 集成React前端:

```jsx
import React, { useState, useEffect } from 'react';
import { ethers } from 'ethers';

function VotingApp() {
    const [candidates, setCandidates] = useState([]);
    const [selectedCandidate, setSelectedCandidate] = useState(null);
    const [votingEnded, setVotingEnded] = useState(false);

    useEffect(() => {
        async function loadCandidates() {
            const candidateCount = await contract.getCandidateCount();
            const loadedCandidates = [];
            for (let i = 0; i < candidateCount; i++) {
                const candidate = await contract.candidates(i);
                loadedCandidates.push({
                    name: candidate.name,
                    votes: candidate.voteCount.toNumber()
                });
            }
            setCandidates(loadedCandidates);
        }

        async function checkVotingStatus() {
            const currentTime = Math.floor(Date.now() / 1000);
            const endTime = await contract.votingEnd();
            setVotingEnded(currentTime >= endTime);
        }

        loadCandidates();
        checkVotingStatus();
    }, []);

    async function handleVote() {
        if (selectedCandidate !== null) {
            await vote(selectedCandidate);
            // 重新加载候选人数据以更新票数
            // ...
        }
    }

    return (
        <div>
            <h1>Decentralized Voting</h1>
            {votingEnded ? (
                <p>Voting has ended. Results:</p>
            ) : (
                <p>Select a candidate and cast your vote:</p>
            )}
            <ul>
                {candidates.map((candidate, index) => (
                    <li key={index}>
                        {candidate.name} - Votes: {candidate.votes}
                        {!votingEnded && (
                            <button onClick={() => setSelectedCandidate(index)}>
                                Select
                            </button>
                        )}
                    </li>
                ))}
            </ul>
            {!votingEnded && selectedCandidate !== null && (
                <button onClick={handleVote}>Cast Vote</button>
            )}
        </div>
    );
}
```

## Web3应用面临的挑战与解决方案

1. 可扩展性: 
   - 挑战:处理高并发交易,网络拥堵
   - 解决方案:Layer 2扩展方案(如Optimistic Rollups, zk-Rollups),分片技术

2. 用户体验: 
   - 挑战:复杂的钱包管理,高昂的Gas费用
   - 解决方案:社交恢复钱包,元交易(gasless transactions),直观的用户界面设计

3. 法律合规: 
   - 挑战:不同地区的监管要求,KYC/AML合规
   - 解决方案:合规性代币标准,与监管机构合作,隐私保护技术(如零知识证明)

4. 互操作性:
   - 挑战:不同区块链网络间的资产和数据传输
   - 解决方案:跨链桥接技术,互操作性协议(如Polkadot, Cosmos)

5. 安全性:
   - 挑战:智能合约漏洞,黑客攻击
   - 解决方案:形式化验证,安全审计,保险机制

## Web3技术的未来发展趋势

1. DeFi (去中心化金融) 的进一步创新和普及
2. NFT在艺术、游戏和元宇宙中的广泛应用
3. DAO (去中心化自治组织) 在企业管理和社区治理中的应用
4. Web3社交网络的兴起,重塑用户数据所有权
5. 区块链技术与物联网(IoT)的融合

Web3技术为开发者提供了创新的机会,但也带来了新的挑战。通过不断学习、实践和创新,我们可以在这个充满活力的新兴领域中创造出革命性的应用,重塑互联网的未来。作为Web3开发者,保持对新技术的好奇心和持续学习的态度至关重要,因为这个领域正在快速发展和变化。

参考资源:
- Ethereum官方文档: https://ethereum.org/developers/
- Web3.js文档: https://web3js.readthedocs.io/
- IPFS文档: https://docs.ipfs.io/
- OpenZeppelin (智能合约安全库): https://docs.openzeppelin.com/

通过深入学习这些核心概念和技术,并在实践中不断探索和创新,你将能够在Web3领域中创造出真正有影响力的去中心化应用。
15:T1a00,
# 前端可视化技术的新趋势

随着Web技术的不断发展,前端可视化已经成为现代Web应用中不可或缺的一部分。本文将深入探讨最新的3D渲染和数据可视化技术,以及它们在实际应用中的潜力。

## WebGL和Three.js

WebGL(Web Graphics Library)是一种用于在Web浏览器中渲染高性能、交互式3D和2D图形的JavaScript API。它基于OpenGL ES 2.0,利用GPU加速来实现复杂的图形渲染。

Three.js是一个流行的JavaScript 3D库,它大大简化了使用WebGL创建3D场景的过程。通过提供高级抽象和丰富的功能,Three.js使开发者能够快速构建复杂的3D应用。

### Three.js的核心概念

1. 场景(Scene): 所有3D对象的容器
2. 相机(Camera): 定义观察点和视角
3. 渲染器(Renderer): 将3D场景渲染到2D屏幕上
4. 几何体(Geometry): 定义3D对象的形状
5. 材质(Material): 定义对象的外观
6. 网格(Mesh): 几何体和材质的组合

### 创建一个简单的3D场景

以下代码展示了如何使用Three.js创建一个旋转的立方体:

```javascript
import * as THREE from 'three';

// 创建场景
const scene = new THREE.Scene();

// 创建相机
const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
camera.position.z = 5;

// 创建渲染器
const renderer = new THREE.WebGLRenderer();
renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);

// 创建立方体
const geometry = new THREE.BoxGeometry();
const material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });
const cube = new THREE.Mesh(geometry, material);
scene.add(cube);

// 动画循环
function animate() {
    requestAnimationFrame(animate);
    cube.rotation.x += 0.01;
    cube.rotation.y += 0.01;
    renderer.render(scene, camera);
}

animate();
```

这个例子展示了Three.js的基本用法,但它的功能远不止于此。开发者可以创建复杂的3D模型、添加光源和阴影、实现粒子系统,甚至创建VR体验。

## 数据可视化库

数据可视化是将复杂数据转化为直观、易懂的图形表示的过程。在前端开发中,有几个强大的库可以帮助我们实现这一目标。

### 1. D3.js

D3.js(Data-Driven Documents)是一个强大而灵活的JavaScript库,用于创建动态、交互式的数据可视化。它直接操作DOM,允许开发者将数据绑定到HTML或SVG元素上,然后使用强大的转换和过渡效果来操作这些元素。

D3.js的优势:
- 极高的灵活性和可定制性
- 强大的数据绑定机制
- 丰富的动画和交互能力
- 广泛的社区支持和大量示例

### 2. ECharts

ECharts是百度开发的一个功能丰富的图表库,提供了直观、交互丰富、可高度个性化定制的数据可视化图表。

ECharts的特点:
- 丰富的图表类型
- 响应式设计
- 强大的交互功能
- 大数据量展现能力

### 使用ECharts创建交互式图表

以下是使用ECharts创建一个简单柱状图的示例:

```javascript
import * as echarts from 'echarts';

// 初始化图表
const chartDom = document.getElementById('main');
const myChart = echarts.init(chartDom);

// 配置选项
const option = {
    title: {
        text: '周销售数据'
    },
    tooltip: {},
    xAxis: {
        type: 'category',
        data: ['周一', '周二', '周三', '周四', '周五', '周六', '周日']
    },
    yAxis: {
        type: 'value'
    },
    series: [{
        name: '销售额',
        type: 'bar',
        data: [120, 200, 150, 80, 70, 110, 130],
        itemStyle: {
            color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [
                {offset: 0, color: '#83bff6'},
                {offset: 0.5, color: '#188df0'},
                {offset: 1, color: '#188df0'}
            ])
        }
    }]
};

// 使用配置项设置图表
myChart.setOption(option);
```

这个例子展示了如何创建一个带有渐变色的基本柱状图。ECharts支持更多复杂的图表类型和交互功能,如地图、散点图、热力图等。

## WebGPU: 下一代图形和计算API

WebGPU是一个新兴的Web标准,旨在提供对现代图形硬件更直接的访问。它有望在未来取代WebGL,成为Web上高性能图形和通用计算的首选API。

WebGPU的主要优势:
1. 更低级的硬件访问,提供更高的性能
2. 更现代的API设计,简化复杂任务的实现
3. 支持通用GPU计算(GPGPU),扩展了Web应用的计算能力
4. 更好的跨平台一致性

虽然WebGPU仍在开发中,但它已经显示出巨大的潜力,特别是在以下领域:
- 高性能3D渲染
- 科学可视化
- 机器学习
- 物理模拟

## 实际应用案例

前端可视化技术在各个领域都有广泛的应用。以下是一些具体的案例:

### 1. 交互式数据仪表板

现代商业智能(BI)工具大量使用前端可视化技术来创建动态、交互式的数据仪表板。这些仪表板可以实时显示关键业务指标,帮助决策者快速洞察数据趋势。

### 2. 3D产品展示

电商和制造业越来越多地采用3D产品展示技术。用户可以360度旋转查看产品,甚至在虚拟环境中"试用"产品。这种交互式体验大大提升了用户参与度和购买信心。

### 3. 虚拟现实(VR)和增强现实(AR)应用

WebXR API结合Three.js等3D库,使得在Web浏览器中创建VR和AR体验成为可能。这项技术正在改变教育、培训、娱乐和零售等多个行业。

### 4. 地理信息系统(GIS)

结合WebGL和地图数据,开发者可以创建复杂的3D地图可视化,用于城市规划、环境监测、物流优化等领域。

### 5. 科学可视化

在医学、物理学、气象学等领域,复杂的科学数据通过高级可视化技术变得更加直观和易于理解。例如,3D分子模型、天气模拟等。

## 结论

前端可视化技术正在不断突破边界,为用户提供更丰富、更直观的数据展示和交互体验。从WebGL到WebGPU,从D3.js到ECharts,这些工具和技术使得创建复杂的可视化变得前所未有的简单。

随着硬件性能的提升和新标准的出现,我们可以期待看到更多令人惊叹的视觉效果和创新应用。对于前端开发者来说,掌握这些可视化技术不仅可以提升技术能力,还能为用户创造出更加吸引人和有价值的Web体验。

在这个数据驱动的时代,有效的数据可视化已经成为沟通和决策的关键工具。通过不断学习和实践这些新兴技术,前端开发者可以在这个快速发展的领域中保持竞争力,并为塑造未来的数字体验做出重要贡献。
2:[["$","$Lc",null,{}],["$","$d",null,{"fallback":null,"children":["$","$Le",null,{"reason":"next/dynamic","children":["$","$Lf",null,{"post":{"id":10,"title":"微前端架构实践与性能优化","excerpt":"深入理解微前端的实现原理和优化策略...","content":"$10","date":"2024-04-30","author":"刘十二","tags":["微前端","架构设计","性能优化"]},"headings":[{"level":1,"text":"微前端架构实践与性能优化","slug":"微前端架构实践与性能优化"},{"level":2,"text":"微前端实现方法","slug":"微前端实现方法"},{"level":3,"text":"1. 使用Single-SPA框架","slug":"1.-使用single-spa框架"},{"level":3,"text":"2. 使用Qiankun框架","slug":"2.-使用qiankun框架"},{"level":3,"text":"3. Web Components方式","slug":"3.-web-components方式"},{"level":2,"text":"微前端通信机制","slug":"微前端通信机制"},{"level":3,"text":"1. 基于CustomEvent的发布订阅模式","slug":"1.-基于customevent的发布订阅模式"},{"level":3,"text":"2. 使用Props进行父子应用通信","slug":"2.-使用props进行父子应用通信"},{"level":3,"text":"3. 全局状态管理","slug":"3.-全局状态管理"},{"level":2,"text":"样式隔离","slug":"样式隔离"},{"level":3,"text":"1. BEM命名约定","slug":"1.-bem命名约定"},{"level":3,"text":"2. CSS Modules","slug":"2.-css-modules"},{"level":3,"text":"3. Shadow DOM","slug":"3.-shadow-dom"},{"level":2,"text":"性能优化策略","slug":"性能优化策略"},{"level":3,"text":"1. 应用预加载","slug":"1.-应用预加载"},{"level":3,"text":"2. 公共依赖提取","slug":"2.-公共依赖提取"},{"level":3,"text":"3. 按需加载子应用","slug":"3.-按需加载子应用"},{"level":2,"text":"实践经验与注意事项","slug":"实践经验与注意事项"}],"readingTime":2,"wordCount":344,"relatedPosts":[{"id":2,"title":"Next.js 13新特性解析","excerpt":"深入了解Next.js 13带来的革命性变化...","content":"$11","date":"2024-03-20","author":"李四","tags":["Next.js","服务器组件","性能优化"]},{"id":6,"title":"React性能优化实战指南","excerpt":"学习React应用的高级性能优化技巧...","content":"$12","date":"2024-04-10","author":"林八","tags":["React","性能优化","虚拟列表"]},{"id":7,"title":"WebAssembly与前端的未来","excerpt":"探索WebAssembly如何革新Web应用开发...","content":"$13","date":"2024-04-15","author":"吴九","tags":["WebAssembly","性能优化","前端创新"]}],"prevPost":{"id":9,"title":"Web3和去中心化应用(DApps)开发入门","excerpt":"学习构建基于区块链的Web应用...","content":"$14","date":"2024-04-25","author":"黄十一","tags":["Web3","区块链","DApps"]},"nextPost":{"id":11,"title":"前端可视化技术的新趋势","excerpt":"探索数据可视化和3D渲染的最新进展...","content":"$15","date":"2024-05-05","author":"赵十三","tags":["数据可视化","WebGL","3D渲染"]}}]}]}]]
b:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"我的博客"}],["$","meta","3",{"name":"description","content":"欢迎来到我的博客,这里分享前端开发的最新趋势和技巧"}],["$","meta","4",{"name":"keywords","content":"Next.js,React,JavaScript,前端开发"}],["$","meta","5",{"property":"og:title","content":"我的博客"}],["$","meta","6",{"property":"og:description","content":"欢迎来到我的博客,这里分享前端开发的最新趋势和技巧"}],["$","meta","7",{"property":"og:url","content":"https://yourblog.com"}],["$","meta","8",{"property":"og:locale","content":"zh_CN"}],["$","meta","9",{"property":"og:type","content":"website"}],["$","meta","10",{"name":"twitter:card","content":"summary"}],["$","meta","11",{"name":"twitter:title","content":"我的博客"}],["$","meta","12",{"name":"twitter:description","content":"欢迎来到我的博客,这里分享前端开发的最新趋势和技巧"}]]
1:null
