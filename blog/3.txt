3:I[60380,[],""]
5:I[563,[],""]
6:I[50986,["322","static/chunks/322-b0b8be3dbd5c811c.js","185","static/chunks/app/layout-6c8a7d73b31e8e91.js"],"ViewTransitions"]
7:I[2741,["322","static/chunks/322-b0b8be3dbd5c811c.js","185","static/chunks/app/layout-6c8a7d73b31e8e91.js"],"ThemeProvider"]
8:I[55882,["322","static/chunks/322-b0b8be3dbd5c811c.js","185","static/chunks/app/layout-6c8a7d73b31e8e91.js"],"default"]
9:I[30760,["322","static/chunks/322-b0b8be3dbd5c811c.js","185","static/chunks/app/layout-6c8a7d73b31e8e91.js"],"default"]
a:I[50986,["322","static/chunks/322-b0b8be3dbd5c811c.js","185","static/chunks/app/layout-6c8a7d73b31e8e91.js"],"Link"]
4:["id","3","d"]
0:["N1ZU6oLRI8sqsYdlsQc5_",[[["",{"children":["blog",{"children":[["id","3","d"],{"children":["__PAGE__?{\"id\":\"3\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["id","3","d"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","$L6",null,{"children":["$","html",null,{"lang":"zh","suppressHydrationWarning":true,"className":"h-full","children":[["$","head",null,{"children":["$","link",null,{"rel":"icon","href":"/next.svg","type":"image/svg+xml"}]}],["$","body",null,{"className":"flex flex-col bg-background antialiased h-full","children":["$","$L7",null,{"attribute":"class","children":[["$","$L8",null,{}],["$","$L9",null,{"children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}]}],["$","footer",null,{"className":"border-t py-6 md:py-0","children":["$","div",null,{"className":"container flex flex-col items-center justify-between gap-4 md:h-24 md:flex-row","children":[["$","div",null,{"className":"flex flex-col items-center gap-4 px-8 md:flex-row md:gap-2 md:px-0","children":["$","p",null,{"className":"text-center text-sm leading-loose text-muted-foreground md:text-left","children":"© 2024 我的博客. 保留所有权利。"}]}],["$","nav",null,{"className":"flex items-center space-x-4","children":[["$","$La","/privacy",{"href":"/privacy","className":"text-sm text-muted-foreground","children":["$","div",null,{"className":"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 cursor-pointer transition-transform duration-200 ease-in-out hover:scale-105 active:scale-95 border-transparent bg-primary text-primary-foreground hover:bg-primary/80 active:bg-primary/70","children":"隐私政策"}]}],["$","$La","/terms",{"href":"/terms","className":"text-sm text-muted-foreground","children":["$","div",null,{"className":"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 cursor-pointer transition-transform duration-200 ease-in-out hover:scale-105 active:scale-95 border-transparent bg-primary text-primary-foreground hover:bg-primary/80 active:bg-primary/70","children":"使用条款"}]}],["$","$La","/contact",{"href":"/contact","className":"text-sm text-muted-foreground","children":["$","div",null,{"className":"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 cursor-pointer transition-transform duration-200 ease-in-out hover:scale-105 active:scale-95 border-transparent bg-primary text-primary-foreground hover:bg-primary/80 active:bg-primary/70","children":"联系我们"}]}]]}]]}]}]]}]}]]}]}],null],null],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/4b751e17faaae912.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/b9e5f75db2a40d89.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","2",{"rel":"stylesheet","href":"/_next/static/css/93c09f23e5e79b42.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","3",{"rel":"stylesheet","href":"/_next/static/css/d95f70565c8fec8b.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","4",{"rel":"stylesheet","href":"/_next/static/css/15a4a72a41cadd99.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","5",{"rel":"stylesheet","href":"/_next/static/css/5e92f1bdc02d74d7.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","6",{"rel":"stylesheet","href":"/_next/static/css/b295c53235df6f34.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$Lb"]]]]]
c:I[14194,["885","static/chunks/8f130de0-c7d1338a662b28bd.js","969","static/chunks/fae302de-456e5d4ead4d6a1d.js","838","static/chunks/80ded2dd-ad96456360d3ba7f.js","322","static/chunks/322-b0b8be3dbd5c811c.js","561","static/chunks/561-4b795d2c0254b24b.js","470","static/chunks/470-9a06a95cca284ff8.js","636","static/chunks/636-5322a2f7bbcb716f.js","548","static/chunks/app/blog/%5Bid%5D/page-de8b555dad09e78a.js"],"default"]
d:"$Sreact.suspense"
e:I[93145,["885","static/chunks/8f130de0-c7d1338a662b28bd.js","969","static/chunks/fae302de-456e5d4ead4d6a1d.js","838","static/chunks/80ded2dd-ad96456360d3ba7f.js","322","static/chunks/322-b0b8be3dbd5c811c.js","561","static/chunks/561-4b795d2c0254b24b.js","470","static/chunks/470-9a06a95cca284ff8.js","636","static/chunks/636-5322a2f7bbcb716f.js","548","static/chunks/app/blog/%5Bid%5D/page-de8b555dad09e78a.js"],"BailoutToCSR"]
2:[["$","$Lc",null,{}],["$","$d",null,{"fallback":null,"children":["$","$Le",null,{"reason":"next/dynamic","children":"$Lf"}]}]]
b:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"我的博客"}],["$","meta","3",{"name":"description","content":"欢迎来到我的博客,这里分享前端开发的最新趋势和技巧"}],["$","meta","4",{"name":"keywords","content":"Next.js,React,JavaScript,前端开发"}],["$","meta","5",{"property":"og:title","content":"我的博客"}],["$","meta","6",{"property":"og:description","content":"欢迎来到我的博客,这里分享前端开发的最新趋势和技巧"}],["$","meta","7",{"property":"og:url","content":"https://yourblog.com"}],["$","meta","8",{"property":"og:locale","content":"zh_CN"}],["$","meta","9",{"property":"og:type","content":"website"}],["$","meta","10",{"name":"twitter:card","content":"summary"}],["$","meta","11",{"name":"twitter:title","content":"我的博客"}],["$","meta","12",{"name":"twitter:description","content":"欢迎来到我的博客,这里分享前端开发的最新趋势和技巧"}]]
1:null
10:I[21858,["885","static/chunks/8f130de0-c7d1338a662b28bd.js","969","static/chunks/fae302de-456e5d4ead4d6a1d.js","838","static/chunks/80ded2dd-ad96456360d3ba7f.js","322","static/chunks/322-b0b8be3dbd5c811c.js","561","static/chunks/561-4b795d2c0254b24b.js","470","static/chunks/470-9a06a95cca284ff8.js","636","static/chunks/636-5322a2f7bbcb716f.js","548","static/chunks/app/blog/%5Bid%5D/page-de8b555dad09e78a.js"],"default"]
11:Tc70,
# CSS-in-JS解决方案对比

CSS-in-JS已成为现代前端开发中的重要工具。本文将对比分析几种流行的CSS-in-JS解决方案,包括styled-components、Emotion、CSS Modules等。我们将从性能、开发体验、维护性等多个角度进行评估,并提供每种方案的最佳使用场景。此外,我们还将探讨CSS-in-JS与传统CSS方法的区别,以及如何在大型项目中有效管理样式。

## styled-components

styled-components是最流行的CSS-in-JS库之一。它结合了CSS和JavaScript的优点,使得我们可以在React组件中定义样式。

### 优点

1. 简洁的语法
2. 支持动态样式
3. 自动生成唯一的类名
4. 易于主题化
5. 良好的开发体验

### 缺点

1. 运行时性能开销
2. 学习曲线较陡
3. 不支持CSS Modules的特性

### 最佳使用场景

styled-components适用于需要动态样式和主题化的项目,尤其是中小型项目。

## Emotion

Emotion是另一种流行的CSS-in-JS库,它提供了更灵活的API和更好的性能。

### 优点

1. 高性能
2. 支持CSS Modules的特性
3. 易于主题化
4. 良好的开发体验

### 缺点

1. 学习曲线较陡
2. 不支持动态样式

### 最佳使用场景

Emotion适用于需要高性能和CSS Modules特性的项目,尤其是大型项目。

## CSS Modules

CSS Modules是一种CSS-in-JS解决方案,它将CSS模块化,并将类名作为JavaScript对象导出。

### 优点

1. 简单易用
2. 支持CSS Modules的特性
3. 良好的开发体验

### 缺点

1. 不支持动态样式
2. 不易于主题化
3. 类名不是唯一的

### 最佳使用场景

CSS Modules适用于需要简单、可维护的样式解决方案的项目,尤其是小型项目。

## CSS-in-JS与传统CSS的区别

CSS-in-JS与传统CSS有一些重要的区别:

1. 作用域隔离: CSS-in-JS可以确保样式只应用于特定的组件,而传统CSS需要手动管理类名和命名空间。
2. 动态样式: CSS-in-JS可以根据组件的状态和属性动态生成样式,而传统CSS需要使用JavaScript来切换类名。
3. 主题化: CSS-in-JS可以轻松地支持主题化,而传统CSS需要使用预处理器或后处理器来实现。

## 在大型项目中管理样式

在大型项目中,有效管理样式是一个重要的挑战。以下是一些建议:

1. 使用CSS-in-JS库: CSS-in-JS库可以提供更好的作用域隔离和动态样式支持,从而简化样式管理。
2. 使用主题化: 主题化可以使样式更易于维护和扩展,尤其是在多个项目或不同环境中。
3. 使用CSS Modules: CSS Modules可以提供简单、可维护的样式解决方案,尤其是在小型项目中。
4. 使用CSS-in-JS库的最佳实践: 每个CSS-in-JS库都有自己的最佳实践,例如styled-components的`ThemeProvider`和Emotion的`css`函数。

## 结论

CSS-in-JS是一种强大的工具,它可以提供更好的作用域隔离、动态样式支持和主题化。styled-components、Emotion和CSS Modules都是流行的解决方案,每种方案都有自己的优缺点和最佳使用场景。在选择CSS-in-JS库时,应该根据项目的需求和规模来权衡性能、开发体验和维护性。
    12:T1fd5,
# Next.js 13新特性解析

Next.js 13是一个重大更新，引入了许多激动人心的新特性，如App Router、服务器组件、流式渲染等。本文将详细介绍这些新特性的使用方法和优势，以及如何从Next.js 12迁移到13版本。

## App Router

App Router是Next.js 13最显著的新特性之一，它彻底改变了路由管理的方式。

### 基于文件系统的路由

App Router延续了Next.js基于文件系统的路由概念，但引入了新的`app`目录结构：

```plaintext
app/
  layout.js
  page.js
  about/
    page.js
  blog/
    [slug]/
      page.js
```

在这个结构中，`page.js`文件定义了路由的主要内容，而`layout.js`则定义了共享布局。

### 嵌套布局

App Router支持嵌套布局，这使得创建复杂的页面结构变得更加简单：

```jsx
// app/layout.js
export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}

// app/blog/layout.js
export default function BlogLayout({ children }) {
  return (
    <div>
      <nav>Blog Navigation</nav>
      {children}
    </div>
  )
}
```

### 服务器组件

默认情况下，App Router中的所有组件都是服务器组件。这意味着它们在服务器上渲染，可以直接访问后端资源，并且不会增加客户端的JavaScript包大小。

```jsx
// app/page.js
async function getData() {
  const res = await fetch('https://api.example.com/data')
  return res.json()
}

export default async function Page() {
  const data = await getData()
  return <main>{data.map(item => <div key={item.id}>{item.title}</div>)}</main>
}
```

### 客户端组件

当需要客户端交互时，可以使用客户端组件

```jsx
'use client'

import { useState } from 'react'

export default function Counter() {
  const [count, setCount] = useState(0)
  return (
    <button onClick={() => setCount(count + 1)}>
      Count: {count}
    </button>
  )
}
```

## 服务器组件

服务器组件是Next.js 13的另一个重要特性，它允许我们在服务器上渲染React组件，从而提高性能和SEO。

### 优势

1. 减少客户端JavaScript包大小
2. 直接访问后端资源
3. 自动代码分割
4. 改善首次加载性能

### 使用场景

服务器组件特别适合于：

- 需要访问后端资源的组件
- 不需要客户端交互的静态内容
- SEO关键的页面内容

```jsx
// app/products/page.js
async function getProducts() {
  const res = await fetch('https://api.example.com/products')
  return res.json()
}

export default async function ProductsPage() {
  const products = await getProducts()
  return (
    <div>
      <h1>Products</h1>
      <ul>
        {products.map(product => (
          <li key={product.id}>{product.name}</li>
        ))}
      </ul>
    </div>
  )
}
```

## 流式渲染

流式渲染允许将页面内容分块传输到客户端，这可以显著改善大型应用的用户体验。

### 实现方式

Next.js 13通过`loading.js`文件和React的`Suspense`组件支持流式渲染：

```jsx
// app/dashboard/loading.js
export default function Loading() {
  return <div>Loading...</div>
}

// app/dashboard/page.js
import { Suspense } from 'react'
import UserProfile from './UserProfile'
import UserPosts from './UserPosts'

export default function Dashboard() {
  return (
    <div>
      <h1>Dashboard</h1>
      <Suspense fallback={<div>Loading profile...</div>}>
        <UserProfile />
      </Suspense>
      <Suspense fallback={<div>Loading posts...</div>}>
        <UserPosts />
      </Suspense>
    </div>
  )
}
```

## 新的图片组件

Next.js 13引入了新的`Image`组件，它提供了更好的性能和用户体验：

```jsx
import Image from 'next/image'

export default function Avatar() {
  return (
    <Image
      src="/avatar.png"
      alt="User Avatar"
      width={64}
      height={64}
      priority
    />
  )
}
```

新的`Image`组件支持：

- 自动图片优化
- 延迟加载
- 响应式图片
- 防止布局偏移

## 字体优化

Next.js 13引入了新的字体系统，它可以自动优化和加载自定义字体：

```jsx
import { Inter } from 'next/font/google'

const inter = Inter({ subsets: ['latin'] })

export default function RootLayout({ children }) {
  return (
    <html lang="en" className={inter.className}>
      <body>{children}</body>
    </html>
  )
}
```

这个系统可以：

- 自动内联字体CSS
- 消除布局偏移
- 预加载关键字体文件

## 从Next.js 12迁移到13

迁移到Next.js 13需要注意以下几点：

1. 创建新的`app`目录，逐步迁移路由
2. 更新`next/image`导入为`next/legacy/image`
3. 将客户端组件标记为`'use client'`
4. 更新API路由到新的`app/api`目录
5. 使用新的数据获取方法替代`getServerSideProps`和`getStaticProps`

## 结论

Next.js 13带来了许多令人兴奋的新特性，这些特性不仅提高了开发效率，还大大改善了应用性能和用户体验。App Router、服务器组件和流式渲染等新特性为我们提供了更灵活、更强大的工具，使得构建现代Web应用变得更加容易。

随着Next.js的不断发展，我们可以期待看到更多令人兴奋的新特性和改进。如果您还没有尝试过Next.js 13，现在是时候了！

## Turbopack - 新的打包工具

Next.js 13引入了Turbopack,这是一个用Rust编写的增量打包工具,旨在替代Webpack。

### Turbopack的主要优势:

1. 更快的启动时间 - 比Webpack快700倍
2. 更快的更新 - 比Webpack快20倍
3. 内存效率更高 - 使用的内存比Webpack少少5倍

### 如何启用Turbopack:

在开发模式下,只需添加 --turbo 标志:

```bash
next dev --turbo
```

注意:Turbopack目前仍处于beta阶段,可能存在一些兼容性问题。

## 改进的国际化支持

Next.js 13改进了国际化(i18n)支持,使得创建多语言应用变得更加简单。

### 新的i18n路由

在 `app` 目录中,你可以使用以下结构来支持多语言:

```
app/
  [lang]/
    page.js
    layout.js
    about/
      page.js
```

### 使用示例:

```jsx
// app/[lang]/layout.js
export async function generateStaticParams() {
  return [{ lang: 'en' }, { lang: 'de' }, { lang: 'fr' }]
}

export default function Layout({ children, params }) {
  return (
    <html lang={params.lang}>
      <body>{children}</body>
    </html>
  )
}
```

## 新的Middleware API

Next.js 13引入了新的Middleware API,使得在请求处理过程中进行拦截和修改变得更加容易。

### Middleware的使用场景:

- 认证和授权
- A/B测试
- 地理位置基础的内容定制
- 边缘计算

### 示例:

```typescript
// middleware.ts
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

export function middleware(request: NextRequest) {
  const country = request.geo?.country || 'US'
  return NextResponse.rewrite(new URL(`/${country}${request.nextUrl.pathname}`, request.url))
}

export const config = {
  matcher: '/:path*',
}
```

## 改进的TypeScript支持

Next.js 13进一步增强了对TypeScript的支持,提供了更好的类型推断和更严格的类型检查。

### 主要改进:

1. 自动生成类型定义文件
2. 改进的路由类型
3. 更好的API路由类型支持

### 示例:

```typescript
// app/api/user/[id]/route.ts
import { NextResponse } from 'next/server'

export async function GET(
  request: Request,
  { params }: { params: { id: string } }
) {
  const id = params.id
  // 获取用户数据
  return NextResponse.json({ id, name: 'John Doe' })
}
```

## 结论

Next.js 13不仅带来了App Router、服务器组件和流式渲染等重大新特性,还在性能优化、开发体验和国际化支持等方面做出了显著改进。Turbopack的引入预示着未来更快的构建速度,而改进的Middleware API和TypeScript支持则为开发者提供了更强大、更灵活的工具。

随着Next.js生态系统的不断发展,我们可以期待看到更多创新和改进。无论你是正在构建新项目还是考虑升级现有应用,Next.js 13都值得你认真考虑和尝试。
13:Ta8b,
# TypeScript高级类型技巧

TypeScript的类型系统非常强大,但也有一定的学习曲线。本文将深入探讨TypeScript中的高级类型技巧,包括条件类型、映射类型、联合类型和交叉类型等。我们将通过实际子展这些高级类型的应用,如何使用它们来创建更灵活、更安全的代码。同时,我们还将讨论TypeScript的类型推断机制,以及如何编写和使用自定义类型守卫。

## 条件类型

条件类型允许我们根据条件选择不同的类型。它的语法如下：

```
type SomeType<T> = T extends SomeCondition ? TrueType : FalseType;
```

例如,我们可以使用条件类型来创建一个`Nullable`类型：

```
type Nullable<T> = T extends null | undefined ? T : T & { notNull: true };
```

## 映射类型

映射类型允许我们对现有类型的每个属性进行转换。它的语法如下：

```
type MappedType<T> = {
  [P in keyof T]: TransformedType;
};
```

例如,我们可以使用映射类型来创建一个`Readonly`类型：

```
type Readonly<T> = {
  readonly [P in keyof T]: T[P];
};
```

## 联合类型和交叉类型

联合类型允许我们表示多个类型中的任意一个。它的语法如下：

```
type UnionType = Type1 | Type2 | Type3;
```

交叉类型允许我们组合多个类型的属性。它的语法如下：

```
type IntersectionType = Type1 & Type2 & Type3;
```

例如,我们可以使用交叉类型来创建一个`WithRequired`类型：

```
type WithRequired<T, K extends keyof T> = T & { [P in K]-?: T[P] };
```

## 类型推断

TypeScript的类型推断机制可以自动推断变量的类型。它基于以下规则：

1. 如果有明确的类型注释,则使用该类型
2. 如果没有类型注释,则从初始化表达式推断类型
3. 如果初始化表达式是函数调用,则使用函数返回类型

例如,以下代码中的`x`和`y`都会被推断为`number`类型：

```
let x = 10;
let y = x * 2;
```

## 自定义类型守卫

自定义类型守卫允许我们在运行时检查类型。它的语法如下：

```
function isTypeGuard(value: any): value is Type {
  // 检查类型
}
```

例如,我们可以使用自定义类型守卫来检查一个值是否是`string`类型：

```
function isString(value: any): value is string {
  return typeof value === 'string';
}
```

## 结论

TypeScript的高级类型技巧可以帮助我们创建更灵活、更安全的代码。通过掌握条件类型、映射类型、联合类型和交叉类型等高级类型,我们可以更好地表达复杂的类型关系。同时,通过理解TypeScript的类型推断机制和自定义类型守卫,我们可以更好地控制类型检查。
    f:["$","$L10",null,{"post":{"id":3,"title":"CSS-in-JS解决方案对比","excerpt":"比较流行的CSS-in-JS库的优缺点...","content":"$11","date":"2024-03-25","author":"王五","tags":["CSS-in-JS","styled-components","Emotion"]},"headings":[{"level":1,"text":"CSS-in-JS解决方案对比","slug":"css-in-js解决方案对比"},{"level":2,"text":"styled-components","slug":"styled-components"},{"level":3,"text":"优点","slug":"优点"},{"level":3,"text":"缺点","slug":"缺点"},{"level":3,"text":"最佳使用场景","slug":"最佳使用场景"},{"level":2,"text":"Emotion","slug":"emotion"},{"level":3,"text":"优点","slug":"优点"},{"level":3,"text":"缺点","slug":"缺点"},{"level":3,"text":"最佳使用场景","slug":"最佳使用场景"},{"level":2,"text":"CSS Modules","slug":"css-modules"},{"level":3,"text":"优点","slug":"优点"},{"level":3,"text":"缺点","slug":"缺点"},{"level":3,"text":"最佳使用场景","slug":"最佳使用场景"},{"level":2,"text":"CSS-in-JS与传统CSS的区别","slug":"css-in-js与传统css的区别"},{"level":2,"text":"在大型项目中管理样式","slug":"在大型项目中管理样式"},{"level":2,"text":"结论","slug":"结论"}],"readingTime":1,"relatedPosts":[],"prevPost":{"id":2,"title":"Next.js 13新特性解析","excerpt":"深入了解Next.js 13带来的革命性变化...","content":"$12","date":"2024-03-20","author":"李四","tags":["Next.js","服务器组件","性能优化"]},"nextPost":{"id":4,"title":"TypeScript高级类型技巧","excerpt":"掌握TypeScript中的高级类型用法...","content":"$13","date":"2024-03-30","author":"赵六","tags":["TypeScript","类型系统","前端开发"]}}]
